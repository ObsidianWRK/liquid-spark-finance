[{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/backups/20250617_181014/ConfigurableInsightsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/backups/20250617_181014/NewInsightsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/backups/20250617_181014/VueniUnifiedInsightsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5549,5552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5549,5552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":209,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6087,6090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6087,6090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":222,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6451,6454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6451,6454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":682,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":682,"endColumn":29}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, Suspense, lazy, useCallback } from 'react';\nimport { Heart, Leaf, DollarSign, TrendingUp, Calendar, BarChart3, Settings, Filter, Eye, EyeOff, Download, Zap, Target, Activity, Shield, PiggyBank, ChevronRight } from 'lucide-react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { cn } from '@/lib/utils';\nimport { SharedScoreCircle, ScoreGroup } from './SharedScoreCircle';\nimport { formatPercentage, getScoreColor } from '@/utils/formatters';\n\n// Lazy load heavy components for performance\nconst TimeSeriesChart = lazy(() => import('@/components/insights/TimeSeriesChart'));\nconst SpendingTrendsChart = lazy(() => import('@/components/insights/SpendingTrendsChart'));\nconst CategoryTrendsChart = lazy(() => import('@/components/insights/CategoryTrendsChart'));\nconst FinancialCard = lazy(() => import('@/components/insights/FinancialCard'));\nconst WellnessCard = lazy(() => import('@/components/insights/WellnessCard'));\nconst EcoCard = lazy(() => import('@/components/insights/EcoCard'));\nconst AnimatedCircularProgress = lazy(() => import('@/components/insights/components/AnimatedCircularProgress'));\nconst EnhancedMetricCard = lazy(() => import('@/components/insights/components/EnhancedMetricCard'));\n\nexport interface Transaction {\n  id: string;\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n}\n\nexport interface Account {\n  id: string;\n  type: string;\n  nickname: string;\n  balance: number;\n  availableBalance: number;\n  currency: string;\n}\n\nexport type InsightsVariant = 'standard' | 'refined' | 'enhanced' | 'optimized' | 'comprehensive' | 'mobile' | 'dashboard';\nexport type ViewMode = 'overview' | 'trends' | 'financial' | 'health' | 'eco' | 'detailed';\n\ninterface LayoutConfig {\n  showHeader: boolean;\n  showTabs: boolean;\n  showScoreCards: boolean;\n  showCharts: boolean;\n  showDetailedCards: boolean;\n  showMetrics: boolean;\n  compactMode: boolean;\n  animationsEnabled: boolean;\n  autoRefresh: boolean;\n  refreshInterval: number;\n  showSettings: boolean;\n  enableExport: boolean;\n  enableFilters: boolean;\n}\n\nconst variantLayouts: Record<InsightsVariant, LayoutConfig> = {\n  standard: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: false,\n    refreshInterval: 30000,\n    showSettings: false,\n    enableExport: false,\n    enableFilters: false,\n  },\n  refined: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: true,\n    animationsEnabled: true,\n    autoRefresh: false,\n    refreshInterval: 30000,\n    showSettings: true,\n    enableExport: true,\n    enableFilters: true,\n  },\n  enhanced: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n    refreshInterval: 30000,\n    showSettings: true,\n    enableExport: true,\n    enableFilters: true,\n  },\n  optimized: {\n    showHeader: false,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: false,\n    showDetailedCards: false,\n    showMetrics: true,\n    compactMode: true,\n    animationsEnabled: false,\n    autoRefresh: false,\n    refreshInterval: 60000,\n    showSettings: false,\n    enableExport: false,\n    enableFilters: false,\n  },\n  comprehensive: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n    refreshInterval: 15000,\n    showSettings: true,\n    enableExport: true,\n    enableFilters: true,\n  },\n  mobile: {\n    showHeader: false,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: false,\n    showDetailedCards: true,\n    showMetrics: false,\n    compactMode: true,\n    animationsEnabled: true,\n    autoRefresh: false,\n    refreshInterval: 60000,\n    showSettings: false,\n    enableExport: false,\n    enableFilters: false,\n  },\n  dashboard: {\n    showHeader: true,\n    showTabs: false,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: false,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n    refreshInterval: 10000,\n    showSettings: false,\n    enableExport: true,\n    enableFilters: false,\n  },\n};\n\nexport interface VueniUnifiedInsightsPageProps {\n  transactions: Transaction[];\n  accounts: Account[];\n  variant?: InsightsVariant;\n  customLayout?: Partial<LayoutConfig>;\n  className?: string;\n  onExportData?: () => void;\n  defaultTab?: ViewMode;\n  enableFeatureFlags?: boolean;\n}\n\nconst LoadingSpinner = () => (\n  <div className=\"flex items-center justify-center py-12\">\n    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white/50\"></div>\n  </div>\n);\n\n// Enhanced Score Card Component\nconst EnhancedScoreDisplay = ({ scores, layout, animationsEnabled }: any) => {\n  if (layout.compactMode) {\n    return (\n      <div className=\"flex justify-center gap-6\">\n        <ScoreGroup \n          scores={scores}\n          size=\"md\"\n          showLabels={true}\n          animated={animationsEnabled}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6\">\n      {Object.entries(scores).map(([type, score]) => (\n        <div key={type} className=\"text-center\">\n          <SharedScoreCircle \n            score={score as number}\n            type={type as any}\n            size=\"lg\"\n            label={type === 'health' ? 'Wellness Score' : type === 'eco' ? 'Eco Impact' : 'Financial Health'}\n            showLabel={true}\n            animated={animationsEnabled}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Quick Metrics Component\nconst QuickMetrics = ({ financialData, wellnessData, ecoData, layout }: any) => {\n  const metrics = [\n    {\n      icon: DollarSign,\n      label: 'Monthly Spending',\n      value: `$${financialData.monthlySpending.toLocaleString()}`,\n      change: financialData.spendingRatio,\n      color: 'blue',\n    },\n    {\n      icon: Heart,\n      label: 'Wellness Investment',\n      value: `$${Object.values(wellnessData.monthlySpending).reduce((sum: number, amount: number) => sum + amount, 0).toLocaleString()}`,\n      change: 12,\n      color: 'red',\n    },\n    {\n      icon: Leaf,\n      label: 'CO₂ Saved',\n      value: `${ecoData.monthlyImpact.co2Saved}kg`,\n      change: 8,\n      color: 'green',\n    },\n    {\n      icon: PiggyBank,\n      label: 'Savings Rate',\n      value: `${financialData.savingsRate.toFixed(1)}%`,\n      change: financialData.savingsRate > 20 ? 5 : -3,\n      color: 'purple',\n    },\n  ];\n\n  if (layout.compactMode) {\n    return (\n      <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3\">\n        {metrics.map((metric, index) => (\n          <Card key={index} className=\"bg-black/20 backdrop-blur-sm border-white/10 p-3\">\n            <div className=\"flex items-center gap-2\">\n              <metric.icon className=\"h-4 w-4 text-white/70\" />\n              <span className=\"text-xs text-white/60\">{metric.label}</span>\n            </div>\n            <div className=\"mt-1\">\n              <span className=\"text-white font-semibold text-sm\">{metric.value}</span>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {metrics.map((metric, index) => (\n        <Card key={index} className=\"bg-black/20 backdrop-blur-sm border-white/10 p-4\">\n          <div className=\"flex items-center space-x-3 mb-3\">\n            <div className={`p-2 rounded-lg bg-${metric.color}-500/20`}>\n              <metric.icon className={`w-5 h-5 text-${metric.color}-400`} />\n            </div>\n            <div>\n              <h4 className=\"font-bold text-white text-sm\">{metric.label}</h4>\n              <p className=\"text-white/70 text-xs\">This month</p>\n            </div>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-white font-bold text-lg\">{metric.value}</span>\n            <div className={cn(\n              \"flex items-center text-xs\",\n              metric.change > 0 ? \"text-green-400\" : \"text-red-400\"\n            )}>\n              {metric.change > 0 ? <TrendingUp className=\"w-3 h-3 mr-1\" /> : <TrendingDown className=\"w-3 h-3 mr-1\" />}\n              {Math.abs(metric.change)}%\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n};\n\nexport const VueniUnifiedInsightsPage = React.memo<VueniUnifiedInsightsPageProps>(({\n  transactions,\n  accounts,\n  variant = 'standard',\n  customLayout,\n  className,\n  onExportData,\n  defaultTab = 'overview',\n  enableFeatureFlags = false,\n}) => {\n  const [activeTab, setActiveTab] = useState<ViewMode>(defaultTab);\n  const [layout, setLayout] = useState<LayoutConfig>(() => ({\n    ...variantLayouts[variant],\n    ...customLayout,\n  }));\n  const [scores, setScores] = useState({ financial: 0, health: 0, eco: 0 });\n  const [isLoading, setIsLoading] = useState(true);\n  const [showLayoutSettings, setShowLayoutSettings] = useState(false);\n  const [isVisible, setIsVisible] = useState(true);\n\n  // Memoized data calculations\n  const financialData = useMemo(() => {\n    const monthlyIncome = transactions\n      .filter(t => t.amount > 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const monthlySpending = Math.abs(transactions\n      .filter(t => t.amount < 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0));\n\n    const totalBalance = accounts.reduce((sum, acc) => sum + acc.balance, 0);\n    const spendingRatio = monthlyIncome > 0 ? (monthlySpending / monthlyIncome) * 100 : 0;\n    const emergencyFundMonths = monthlySpending > 0 ? totalBalance / monthlySpending : 0;\n    const savingsRate = monthlyIncome > 0 ? ((monthlyIncome - monthlySpending) / monthlyIncome) * 100 : 0;\n    \n    const creditCardDebt = Math.abs(accounts\n      .filter(acc => acc.type === 'Credit Card' && acc.balance < 0)\n      .reduce((sum, acc) => sum + acc.balance, 0));\n    const debtToIncomeRatio = monthlyIncome > 0 ? (creditCardDebt / (monthlyIncome * 12)) * 100 : 0;\n    \n    const completedTransactions = transactions.filter(t => t.status === 'completed').length;\n    const totalTransactions = transactions.length;\n    const billPaymentScore = totalTransactions > 0 ? (completedTransactions / totalTransactions) * 100 : 100;\n\n    return {\n      overallScore: scores.financial,\n      monthlyIncome,\n      monthlySpending,\n      totalBalance,\n      savingsRate,\n      spendingRatio,\n      emergencyFundMonths,\n      debtToIncomeRatio,\n      billPaymentScore,\n    };\n  }, [transactions, accounts, scores.financial]);\n\n  const wellnessData = useMemo(() => ({\n    overallScore: scores.health,\n    monthlySpending: {\n      fitness: 85,\n      nutrition: 38,\n      healthcare: 340,\n      wellness: 75,\n      supplements: 45,\n      mentalHealth: 120\n    },\n    healthTrends: {\n      exercise: 'up' as const,\n      nutrition: 'stable' as const,\n      sleep: 'stable' as const,\n      stress: 'down' as const\n    }\n  }), [scores.health]);\n\n  const ecoData = useMemo(() => ({\n    overallScore: scores.eco,\n    monthlyImpact: {\n      co2Saved: 48,\n      treesEquivalent: 2,\n      waterSaved: 384,\n      energySaved: 256\n    },\n    monthlySpending: {\n      sustainableFood: 127,\n      renewableEnergy: 85,\n      ecoTransport: 45,\n      greenProducts: 120,\n      carbonOffset: 25,\n      conservation: 60\n    },\n    environmentalTrends: {\n      carbonFootprint: 'down' as const,\n      sustainability: 'up' as const,\n      renewable: 'up' as const,\n      waste: 'stable' as const\n    }\n  }), [scores.eco]);\n\n  // Load scores with error handling\n  useEffect(() => {\n    const loadScores = async () => {\n      setIsLoading(true);\n      try {\n        // Simulate score calculation\n        await new Promise(resolve => setTimeout(resolve, 500));\n        setScores({\n          financial: 72 + Math.floor(Math.random() * 20),\n          health: 75 + Math.floor(Math.random() * 20),\n          eco: 82 + Math.floor(Math.random() * 15),\n        });\n      } catch (error) {\n        console.error('Error loading scores:', error);\n        setScores({ financial: 72, health: 75, eco: 82 });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadScores();\n  }, [transactions, accounts]);\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (!layout.autoRefresh) return;\n\n    const interval = setInterval(() => {\n      setScores(prev => ({\n        financial: Math.max(0, Math.min(100, prev.financial + (Math.random() - 0.5) * 4)),\n        health: Math.max(0, Math.min(100, prev.health + (Math.random() - 0.5) * 4)),\n        eco: Math.max(0, Math.min(100, prev.eco + (Math.random() - 0.5) * 4)),\n      }));\n    }, layout.refreshInterval);\n\n    return () => clearInterval(interval);\n  }, [layout.autoRefresh, layout.refreshInterval]);\n\n  const tabs = [\n    { id: 'overview' as ViewMode, label: 'Overview', icon: TrendingUp },\n    { id: 'trends' as ViewMode, label: 'Trends', icon: BarChart3 },\n    { id: 'financial' as ViewMode, label: 'Financial', icon: DollarSign },\n    { id: 'health' as ViewMode, label: 'Health', icon: Heart },\n    { id: 'eco' as ViewMode, label: 'Eco', icon: Leaf },\n    { id: 'detailed' as ViewMode, label: 'Detailed', icon: Activity },\n  ];\n\n  const handleLayoutChange = useCallback((key: keyof LayoutConfig, value: boolean | number) => {\n    setLayout(prev => ({ ...prev, [key]: value }));\n  }, []);\n\n  if (isLoading) {\n    return (\n      <Card className={cn('w-full text-white bg-black/20 backdrop-blur-sm', className)}>\n        <div className=\"flex items-center justify-center py-20\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white/50\"></div>\n            <span className=\"text-white text-lg\">Loading insights...</span>\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <div className={cn('w-full text-white space-y-6', className)} data-testid=\"vueni-unified-insights\">\n      {/* Header */}\n      {layout.showHeader && (\n        <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className={cn(\n                'font-bold text-white mb-2',\n                layout.compactMode ? 'text-xl' : 'text-3xl lg:text-4xl'\n              )}>\n                Financial Insights\n              </h1>\n              <p className=\"text-white/70 text-sm lg:text-base\">\n                {variant === 'comprehensive' ? 'Complete analysis of your financial ecosystem' :\n                 variant === 'enhanced' ? 'Advanced insights with real-time monitoring' :\n                 variant === 'refined' ? 'Streamlined view of your financial health' :\n                 variant === 'mobile' ? 'Your finances at a glance' :\n                 'Comprehensive analysis of your financial health, wellness spending, and environmental impact'}\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setIsVisible(!isVisible)}\n                className=\"text-white/70 hover:text-white\"\n              >\n                {isVisible ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </Button>\n              \n              {layout.enableExport && onExportData && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={onExportData}\n                  className=\"text-white/70 hover:text-white\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                </Button>\n              )}\n              \n              {layout.showSettings && enableFeatureFlags && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setShowLayoutSettings(!showLayoutSettings)}\n                  className=\"text-white/70 hover:text-white\"\n                >\n                  <Settings className=\"h-4 w-4\" />\n                </Button>\n              )}\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Layout Settings */}\n      {showLayoutSettings && enableFeatureFlags && (\n        <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-4\">\n          <h3 className=\"text-lg font-semibold text-white mb-4\">Layout Settings</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Compact Mode</span>\n              <Switch\n                checked={layout.compactMode}\n                onCheckedChange={(checked) => handleLayoutChange('compactMode', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Animations</span>\n              <Switch\n                checked={layout.animationsEnabled}\n                onCheckedChange={(checked) => handleLayoutChange('animationsEnabled', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Auto Refresh</span>\n              <Switch\n                checked={layout.autoRefresh}\n                onCheckedChange={(checked) => handleLayoutChange('autoRefresh', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Show Charts</span>\n              <Switch\n                checked={layout.showCharts}\n                onCheckedChange={(checked) => handleLayoutChange('showCharts', checked)}\n              />\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Tab Navigation */}\n      {layout.showTabs && (\n        <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-2\">\n          <div className=\"flex flex-wrap justify-center gap-2\">\n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <Button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  variant={activeTab === tab.id ? \"default\" : \"ghost\"}\n                  className={cn(\n                    'flex items-center space-x-2 transition-all duration-300',\n                    layout.compactMode ? 'px-3 py-2 text-xs' : 'px-4 py-2 text-sm',\n                    activeTab === tab.id\n                      ? 'bg-white/20 text-white border-white/30'\n                      : 'text-white/70 hover:text-white/90 hover:bg-white/10'\n                  )}\n                >\n                  <Icon className={cn(\"w-4 h-4\", layout.compactMode && \"w-3 h-3\")} />\n                  <span>{tab.label}</span>\n                </Button>\n              );\n            })}\n          </div>\n        </Card>\n      )}\n\n      {/* Content */}\n      <div className={cn('transition-all duration-300', !isVisible && 'blur-sm opacity-50')}>\n        {activeTab === 'overview' && (\n          <div className=\"space-y-6\">\n            {/* Score Overview */}\n            {layout.showScoreCards && (\n              <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-6\">\n                <h3 className={cn(\n                  \"font-bold text-white mb-6 text-center\",\n                  layout.compactMode ? \"text-lg\" : \"text-xl\"\n                )}>\n                  Your Overall Scores\n                </h3>\n                <EnhancedScoreDisplay \n                  scores={scores} \n                  layout={layout}\n                  animationsEnabled={layout.animationsEnabled}\n                />\n              </Card>\n            )}\n\n            {/* Quick Metrics */}\n            {layout.showMetrics && (\n              <QuickMetrics \n                financialData={financialData}\n                wellnessData={wellnessData}\n                ecoData={ecoData}\n                layout={layout}\n              />\n            )}\n          </div>\n        )}\n\n        {activeTab === 'trends' && layout.showCharts && (\n          <div className=\"space-y-6\">\n            <Suspense fallback={<LoadingSpinner />}>\n              <TimeSeriesChart \n                data={[]} \n                title=\"Score Progress Over Time (Past 12 Months)\"\n              />\n              <SpendingTrendsChart \n                data={[]} \n                title=\"Monthly Financial Overview\"\n              />\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <CategoryTrendsChart \n                  data={[]} \n                  type=\"health\"\n                  title=\"Health & Wellness Spending Trends\"\n                />\n                <CategoryTrendsChart \n                  data={[]} \n                  type=\"eco\"\n                  title=\"Eco & Sustainability Spending Trends\"\n                />\n              </div>\n            </Suspense>\n          </div>\n        )}\n\n        {activeTab === 'financial' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <FinancialCard data={financialData} />\n          </Suspense>\n        )}\n\n        {activeTab === 'health' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <WellnessCard data={wellnessData} />\n          </Suspense>\n        )}\n\n        {activeTab === 'eco' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <EcoCard data={ecoData} />\n          </Suspense>\n        )}\n\n        {activeTab === 'detailed' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n            <Suspense fallback={<LoadingSpinner />}>\n              <FinancialCard data={financialData} />\n              <WellnessCard data={wellnessData} />\n              <EcoCard data={ecoData} />\n            </Suspense>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nVueniUnifiedInsightsPage.displayName = 'VueniUnifiedInsightsPage';\n\n// Export preset configurations\nexport const insightsPresets = {\n  dashboard: {\n    variant: 'dashboard' as InsightsVariant,\n    defaultTab: 'overview' as ViewMode,\n  },\n  mobile: {\n    variant: 'mobile' as InsightsVariant, \n    defaultTab: 'overview' as ViewMode,\n  },\n  detailed: {\n    variant: 'comprehensive' as InsightsVariant,\n    defaultTab: 'detailed' as ViewMode,\n  },\n  minimal: {\n    variant: 'optimized' as InsightsVariant,\n    defaultTab: 'overview' as ViewMode,\n  },\n  analytics: {\n    variant: 'enhanced' as InsightsVariant,\n    defaultTab: 'trends' as ViewMode,\n  },\n} as const;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/all-pages-responsive-test.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/comprehensive-hook-validation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/comprehensive-responsive-navigation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/dashboard.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/desktop-responsive-test.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/final-comprehensive-navigation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/financial-calculators.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/hook-validation-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/hook-violations.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/mobile-cross-browser.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/navigation-hook-validation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/performance-hook-validation.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":384,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12588,12591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12588,12591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":397,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":397,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13029,13032],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13029,13032],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":403,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":403,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13222,13225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13222,13225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":409,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":409,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13454,13457],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13454,13457],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":437,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":437,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14246,14249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14246,14249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { test, expect, Page } from '@playwright/test';\n\ntest.describe('Performance and Stress Testing for Hook Violations', () => {\n  let performanceErrors: string[] = [];\n  let memoryWarnings: string[] = [];\n\n  test.beforeEach(async ({ page }) => {\n    performanceErrors = [];\n    memoryWarnings = [];\n\n    // Monitor console for performance-related hook issues\n    page.on('console', (msg) => {\n      const text = msg.text();\n      if (msg.type() === 'error' && (\n        text.includes('Hook') || \n        text.includes('rendered more hooks') ||\n        text.includes('memory leak') ||\n        text.includes('performance')\n      )) {\n        performanceErrors.push(text);\n      }\n      \n      if (msg.type() === 'warning' && (\n        text.includes('memory') ||\n        text.includes('performance') ||\n        text.includes('Hook')\n      )) {\n        memoryWarnings.push(text);\n      }\n    });\n\n    await page.goto('/');\n    await page.waitForLoadState('networkidle');\n  });\n\n  test('should handle high-frequency navigation without hook violations', async ({ page }) => {\n    const startTime = Date.now();\n    const initialErrorCount = performanceErrors.length;\n    \n    // High-frequency navigation test\n    console.log('Starting high-frequency navigation test...');\n    \n    const tabs = ['dashboard', 'accounts', 'transactions', 'insights', 'reports'];\n    \n    // Perform 100 rapid navigations\n    for (let i = 0; i < 100; i++) {\n      const tab = tabs[i % tabs.length];\n      await page.goto(`/?tab=${tab}`);\n      // Minimal wait to stress test\n      await page.waitForTimeout(10);\n      \n      if (i % 20 === 0) {\n        console.log(`Navigation iteration: ${i + 1}/100`);\n      }\n    }\n    \n    // Final settlement\n    await page.waitForTimeout(2000);\n    \n    const endTime = Date.now();\n    const duration = endTime - startTime;\n    \n    console.log(`High-frequency navigation completed in ${duration}ms`);\n    \n    // Check for performance-related hook errors\n    const newErrors = performanceErrors.slice(initialErrorCount);\n    expect(newErrors, `Performance hook violations: ${JSON.stringify(newErrors)}`).toHaveLength(0);\n    \n    // Ensure reasonable performance (should complete in under 30 seconds)\n    expect(duration).toBeLessThan(30000);\n  });\n\n  test('should handle memory stress during navigation without hook violations', async ({ page }) => {\n    const initialErrorCount = performanceErrors.length;\n    \n    // Create memory pressure scenario\n    console.log('Starting memory stress test...');\n    \n    // Inject memory pressure\n    await page.evaluate(() => {\n      // Create some memory pressure\n      const memoryArray: number[][] = [];\n      for (let i = 0; i < 1000; i++) {\n        memoryArray.push(new Array(1000).fill(Math.random()));\n      }\n      (window as unknown as { memoryPressure?: number[][] }).memoryPressure = memoryArray;\n    });\n    \n    const tabs = ['dashboard', 'accounts', 'transactions', 'insights'];\n    \n    // Navigate under memory pressure\n    for (let cycle = 0; cycle < 10; cycle++) {\n      console.log(`Memory stress cycle: ${cycle + 1}/10`);\n      \n      for (const tab of tabs) {\n        await page.goto(`/?tab=${tab}`);\n        await page.waitForLoadState('networkidle');\n        await page.waitForTimeout(100);\n        \n        // Add more memory pressure each cycle\n        await page.evaluate((cycleNum) => {\n          const additionalMemory = new Array(500).fill(`cycle-${cycleNum}-${Math.random()}`);\n          const windowWithMemory = window as unknown as { memoryPressure?: (number[][] | string[])[] };\n          windowWithMemory.memoryPressure?.push(additionalMemory);\n        }, cycle);\n      }\n    }\n    \n    // Clean up memory\n    await page.evaluate(() => {\n      delete (window as unknown as { memoryPressure?: unknown }).memoryPressure;\n    });\n    \n    await page.waitForTimeout(1000);\n    \n    // Check for hook errors under memory pressure\n    const newErrors = performanceErrors.slice(initialErrorCount);\n    expect(newErrors, `Hook violations under memory pressure: ${JSON.stringify(newErrors)}`).toHaveLength(0);\n  });\n\n  test('should handle CPU stress during navigation without hook violations', async ({ page }) => {\n    const initialErrorCount = performanceErrors.length;\n    \n    console.log('Starting CPU stress test...');\n    \n    // Create CPU stress in background\n    await page.evaluate(() => {\n      let cpuStress = true;\n      const stressCPU = () => {\n        if (cpuStress) {\n          // Perform some CPU-intensive calculations\n          let result = 0;\n          for (let i = 0; i < 100000; i++) {\n            result += Math.sin(i) * Math.cos(i);\n          }\n          setTimeout(stressCPU, 1);\n        }\n      };\n      stressCPU();\n      \n      // Stop after 30 seconds\n      setTimeout(() => {\n        cpuStress = false;\n      }, 30000);\n    });\n    \n    const tabs = ['dashboard', 'transactions', 'insights', 'reports'];\n    \n    // Navigate under CPU stress\n    for (let i = 0; i < 20; i++) {\n      const tab = tabs[i % tabs.length];\n      console.log(`CPU stress navigation ${i + 1}/20: ${tab}`);\n      \n      await page.goto(`/?tab=${tab}`);\n      await page.waitForLoadState('networkidle');\n      await page.waitForTimeout(200);\n    }\n    \n    await page.waitForTimeout(2000);\n    \n    // Check for hook errors under CPU stress\n    const newErrors = performanceErrors.slice(initialErrorCount);\n    expect(newErrors, `Hook violations under CPU stress: ${JSON.stringify(newErrors)}`).toHaveLength(0);\n  });\n\n  test('should handle network throttling during navigation without hook violations', async ({ page }) => {\n    const initialErrorCount = performanceErrors.length;\n    \n    console.log('Starting network throttling test...');\n    \n    // Simulate slow network\n    const client = await page.context().newCDPSession(page);\n    await client.send('Network.emulateNetworkConditions', {\n      offline: false,\n      downloadThroughput: 50 * 1024, // 50 KB/s\n      uploadThroughput: 20 * 1024,   // 20 KB/s\n      latency: 500 // 500ms latency\n    });\n    \n    const tabs = ['dashboard', 'accounts', 'transactions', 'insights'];\n    \n    // Navigate under network throttling\n    for (const tab of tabs) {\n      console.log(`Throttled navigation to: ${tab}`);\n      \n      await page.goto(`/?tab=${tab}`);\n      await page.waitForLoadState('networkidle', { timeout: 30000 });\n      await page.waitForTimeout(500);\n    }\n    \n    // Restore normal network\n    await client.send('Network.emulateNetworkConditions', {\n      offline: false,\n      downloadThroughput: -1,\n      uploadThroughput: -1,\n      latency: 0\n    });\n    \n    await page.waitForTimeout(1000);\n    \n    // Check for hook errors under network stress\n    const newErrors = performanceErrors.slice(initialErrorCount);\n    expect(newErrors, `Hook violations under network throttling: ${JSON.stringify(newErrors)}`).toHaveLength(0);\n  });\n\n  test('should handle multiple concurrent user interactions without hook violations', async ({ page }) => {\n    const initialErrorCount = performanceErrors.length;\n    \n    console.log('Starting concurrent interactions test...');\n    \n    await page.goto('/?tab=dashboard');\n    await page.waitForLoadState('networkidle');\n    \n    // Simulate multiple concurrent user interactions\n    const interactions = [\n      // Mouse movements\n      page.mouse.move(100, 100),\n      page.mouse.move(200, 200),\n      page.mouse.move(300, 300),\n      \n      // Navigation attempts\n      page.goto('/?tab=transactions'),\n      page.goBack(),\n      page.goForward(),\n      \n      // Keyboard events\n      page.keyboard.press('Tab'),\n      page.keyboard.press('Enter'),\n      page.keyboard.press('Escape'),\n      \n      // Touch events (for mobile simulation)\n      page.touchscreen.tap(150, 150),\n      \n      // Viewport changes\n      page.setViewportSize({ width: 800, height: 600 }),\n      page.setViewportSize({ width: 1200, height: 800 })\n    ];\n    \n    // Execute all interactions concurrently\n    await Promise.allSettled(interactions);\n    \n    // Wait for everything to settle\n    await page.waitForTimeout(2000);\n    \n    // Navigate through tabs after concurrent interactions\n    const tabs = ['dashboard', 'accounts', 'transactions'];\n    for (const tab of tabs) {\n      await page.goto(`/?tab=${tab}`);\n      await page.waitForLoadState('networkidle');\n      await page.waitForTimeout(300);\n    }\n    \n    // Check for hook errors after concurrent interactions\n    const newErrors = performanceErrors.slice(initialErrorCount);\n    expect(newErrors, `Hook violations during concurrent interactions: ${JSON.stringify(newErrors)}`).toHaveLength(0);\n  });\n\n  test('should handle page lifecycle events without hook violations', async ({ page }) => {\n    const initialErrorCount = performanceErrors.length;\n    \n    console.log('Starting page lifecycle test...');\n    \n    // Test various page lifecycle events\n    await page.goto('/?tab=dashboard');\n    await page.waitForLoadState('networkidle');\n    \n    // Simulate page visibility changes\n    await page.evaluate(() => {\n      // Simulate page becoming hidden\n      Object.defineProperty(document, 'hidden', {\n        writable: true,\n        value: true\n      });\n      Object.defineProperty(document, 'visibilityState', {\n        writable: true,\n        value: 'hidden'\n      });\n      document.dispatchEvent(new Event('visibilitychange'));\n    });\n    \n    await page.waitForTimeout(500);\n    \n    // Navigate while \"hidden\"\n    await page.goto('/?tab=transactions');\n    await page.waitForTimeout(300);\n    \n    // Simulate page becoming visible again\n    await page.evaluate(() => {\n      Object.defineProperty(document, 'hidden', {\n        writable: true,\n        value: false\n      });\n      Object.defineProperty(document, 'visibilityState', {\n        writable: true,\n        value: 'visible'\n      });\n      document.dispatchEvent(new Event('visibilitychange'));\n    });\n    \n    await page.waitForTimeout(500);\n    \n    // Test focus/blur events\n    await page.evaluate(() => {\n      window.dispatchEvent(new Event('blur'));\n    });\n    \n    await page.goto('/?tab=insights');\n    await page.waitForTimeout(300);\n    \n    await page.evaluate(() => {\n      window.dispatchEvent(new Event('focus'));\n    });\n    \n    await page.waitForTimeout(1000);\n    \n    // Check for hook errors during lifecycle events\n    const newErrors = performanceErrors.slice(initialErrorCount);\n    expect(newErrors, `Hook violations during lifecycle events: ${JSON.stringify(newErrors)}`).toHaveLength(0);\n  });\n\n  test('should handle error conditions without hook violations', async ({ page }) => {\n    const initialErrorCount = performanceErrors.length;\n    \n    console.log('Starting error conditions test...');\n    \n    // Simulate various error conditions\n    await page.goto('/?tab=dashboard');\n    await page.waitForLoadState('networkidle');\n    \n    // Simulate JavaScript errors\n    await page.evaluate(() => {\n      // Inject a non-hook-related error\n      setTimeout(() => {\n        try {\n          throw new Error('Simulated non-React error');\n        } catch (e) {\n          console.error('Caught simulated error:', e);\n        }\n      }, 100);\n    });\n    \n    await page.waitForTimeout(200);\n    \n    // Navigate after error\n    await page.goto('/?tab=transactions');\n    await page.waitForLoadState('networkidle');\n    \n    // Simulate network error\n    await page.route('**/*', route => {\n      if (Math.random() < 0.1) { // 10% chance of network error\n        route.abort();\n      } else {\n        route.continue();\n      }\n    });\n    \n    // Navigate with potential network errors\n    await page.goto('/?tab=insights');\n    await page.waitForLoadState('networkidle');\n    \n    // Clear route handler\n    await page.unroute('**/*');\n    \n    await page.waitForTimeout(1000);\n    \n    // Check for hook errors (not general errors)\n    const newErrors = performanceErrors.slice(initialErrorCount);\n    const hookSpecificErrors = newErrors.filter(error => \n      error.includes('rendered more hooks') || \n      error.includes('Hook call') ||\n      error.includes('Invalid hook call')\n    );\n    \n    expect(hookSpecificErrors, `Hook violations during error conditions: ${JSON.stringify(hookSpecificErrors)}`).toHaveLength(0);\n  });\n\n  test('should handle resource cleanup during navigation without hook violations', async ({ page }) => {\n    const initialErrorCount = performanceErrors.length;\n    \n    console.log('Starting resource cleanup test...');\n    \n    // Track resource usage\n    await page.evaluate(() => {\n      (window as any).resourceTracker = {\n        intervals: [],\n        timeouts: [],\n        listeners: []\n      };\n      \n      // Mock some resource creation\n      const originalSetInterval = window.setInterval;\n      const originalSetTimeout = window.setTimeout;\n      const originalAddEventListener = window.addEventListener;\n      \n      window.setInterval = function(fn, delay) {\n        const id = originalSetInterval(fn, delay);\n        (window as any).resourceTracker.intervals.push(id);\n        return id;\n      };\n      \n      window.setTimeout = function(fn, delay) {\n        const id = originalSetTimeout(fn, delay);\n        (window as any).resourceTracker.timeouts.push(id);\n        return id;\n      };\n      \n      window.addEventListener = function(type, listener, options) {\n        originalAddEventListener.call(this, type, listener, options);\n        (window as any).resourceTracker.listeners.push({ type, listener });\n      };\n    });\n    \n    const tabs = ['dashboard', 'accounts', 'transactions', 'insights'];\n    \n    // Navigate and create resources\n    for (const tab of tabs) {\n      await page.goto(`/?tab=${tab}`);\n      await page.waitForLoadState('networkidle');\n      \n      // Create some mock resources\n      await page.evaluate(() => {\n        // Create interval\n        setInterval(() => {}, 1000);\n        \n        // Create timeout\n        setTimeout(() => {}, 5000);\n        \n        // Add event listener\n        addEventListener('resize', () => {});\n      });\n      \n      await page.waitForTimeout(300);\n    }\n    \n    // Check resource cleanup\n    const resourceCount = await page.evaluate(() => {\n      const tracker = (window as any).resourceTracker;\n      return {\n        intervals: tracker.intervals.length,\n        timeouts: tracker.timeouts.length,\n        listeners: tracker.listeners.length\n      };\n    });\n    \n    console.log('Resource count:', resourceCount);\n    \n    // Navigate one more time to trigger cleanup\n    await page.goto('/?tab=dashboard');\n    await page.waitForTimeout(1000);\n    \n    // Check for hook errors related to cleanup\n    const newErrors = performanceErrors.slice(initialErrorCount);\n    expect(newErrors, `Hook violations during resource cleanup: ${JSON.stringify(newErrors)}`).toHaveLength(0);\n  });\n\n  test('should measure and validate performance metrics', async ({ page }) => {\n    console.log('Starting performance metrics validation...');\n    \n    const navigationTimes: number[] = [];\n    const tabs = ['dashboard', 'accounts', 'transactions', 'insights'];\n    \n    for (const tab of tabs) {\n      const startTime = Date.now();\n      \n      await page.goto(`/?tab=${tab}`);\n      await page.waitForLoadState('networkidle');\n      \n      const endTime = Date.now();\n      const navigationTime = endTime - startTime;\n      navigationTimes.push(navigationTime);\n      \n      console.log(`Navigation to ${tab}: ${navigationTime}ms`);\n    }\n    \n    // Calculate performance metrics\n    const avgNavigationTime = navigationTimes.reduce((a, b) => a + b, 0) / navigationTimes.length;\n    const maxNavigationTime = Math.max(...navigationTimes);\n    \n    console.log(`Average navigation time: ${avgNavigationTime}ms`);\n    console.log(`Max navigation time: ${maxNavigationTime}ms`);\n    \n    // Performance assertions\n    expect(avgNavigationTime, 'Average navigation time should be reasonable').toBeLessThan(3000);\n    expect(maxNavigationTime, 'No single navigation should take too long').toBeLessThan(5000);\n    \n    // Ensure no hook-related performance issues\n    expect(performanceErrors.filter(e => e.includes('Hook'))).toHaveLength(0);\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/quick-hook-validation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/quick-validation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/responsive-validation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/security.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/user-journeys.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/vueni-financial.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/vueni-performance.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":180,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6028,6031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6028,6031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6084,6087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6084,6087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6153,6156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6153,6156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6223,6226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6223,6226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":210,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7024,7027],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7024,7027],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":211,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7082,7085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7082,7085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":212,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7153,7156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7153,7156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7225,7228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7225,7228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":229,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7792,7795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7792,7795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":230,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7827,7830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7827,7830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { test, expect } from '@playwright/test';\n\ntest.describe('Vueni Performance Testing', () => {\n  test.beforeEach(async ({ page }) => {\n    // Clear cache and storage for clean performance testing\n    await page.context().clearCookies();\n    await page.evaluate(() => {\n      localStorage.clear();\n      sessionStorage.clear();\n    });\n  });\n\n  test('should meet Core Web Vitals standards', async ({ page }) => {\n    // Navigate to the page and measure performance\n    const startTime = Date.now();\n    \n    await page.goto('/', { waitUntil: 'networkidle' });\n    \n    const loadTime = Date.now() - startTime;\n    \n    // First Contentful Paint should be under 1.8s (good threshold)\n    expect(loadTime).toBeLessThan(1800);\n\n    // Measure LCP (Largest Contentful Paint)\n    const lcp = await page.evaluate(() => {\n      return new Promise((resolve) => {\n        new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          const lastEntry = entries[entries.length - 1];\n          resolve(lastEntry.startTime);\n        }).observe({ entryTypes: ['largest-contentful-paint'] });\n        \n        // Fallback timeout\n        setTimeout(() => resolve(0), 5000);\n      });\n    });\n\n    if (lcp > 0) {\n      // LCP should be under 2.5s (good threshold)\n      expect(lcp).toBeLessThan(2500);\n      console.log(`LCP: ${lcp}ms`);\n    }\n\n    // Check First Input Delay by simulating a click\n    const button = page.locator('button, [role=\"button\"], .clickable').first();\n    if (await button.isVisible({ timeout: 3000 }).catch(() => false)) {\n      const clickStart = Date.now();\n      await button.click();\n      const clickEnd = Date.now();\n      const fid = clickEnd - clickStart;\n      \n      // FID should be under 100ms (good threshold)\n      expect(fid).toBeLessThan(100);\n      console.log(`Simulated FID: ${fid}ms`);\n    }\n  });\n\n  test('should efficiently handle large transaction lists', async ({ page }) => {\n    await page.goto('/');\n    \n    // Inject mock data for performance testing\n    await page.evaluate(() => {\n      // Create mock transaction data\n      const mockTransactions = Array.from({ length: 1000 }, (_, i) => ({\n        id: `tx-${i}`,\n        merchant: `Merchant ${i}`,\n        category: { name: `Category ${i % 10}`, color: '#3B82F6' },\n        amount: (Math.random() - 0.5) * 1000,\n        date: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString(),\n        status: ['completed', 'pending', 'failed'][i % 3] as 'completed' | 'pending' | 'failed',\n        scores: {\n          health: Math.floor(Math.random() * 100),\n          eco: Math.floor(Math.random() * 100),\n          financial: Math.floor(Math.random() * 100)\n        }\n      }));\n\n      // Store in window for component access\n      (window as unknown as { mockTransactions?: typeof mockTransactions }).mockTransactions = mockTransactions;\n    });\n\n    // Measure rendering performance with large dataset\n    const renderStart = Date.now();\n    \n    // Trigger re-render if there's a way to inject data\n    await page.evaluate(() => {\n      // Dispatch custom event that components might listen to\n      window.dispatchEvent(new CustomEvent('vueni-load-mock-data', {\n        detail: (window as unknown as { mockTransactions?: unknown }).mockTransactions\n      }));\n    });\n\n    await page.waitForTimeout(2000); // Allow rendering\n    \n    const renderEnd = Date.now();\n    const renderTime = renderEnd - renderStart;\n    \n    // Large list rendering should complete within 3 seconds\n    expect(renderTime).toBeLessThan(3000);\n    console.log(`Large list render time: ${renderTime}ms`);\n\n    // Check that the page is still responsive\n    const scrollStart = Date.now();\n    await page.mouse.wheel(0, 500);\n    await page.waitForTimeout(100);\n    const scrollEnd = Date.now();\n    \n    // Scrolling should be smooth (under 50ms response)\n    expect(scrollEnd - scrollStart).toBeLessThan(50);\n  });\n\n  test('should optimize bundle size and loading', async ({ page }) => {\n    // Track network requests\n    interface NetworkRequest {\n      url: string;\n      method: string;\n      resourceType: string;\n    }\n    interface NetworkResponse {\n      url: string;\n      status: number;\n      headers: Record<string, string>;\n    }\n    const requests: NetworkRequest[] = [];\n    const responses: NetworkResponse[] = [];\n\n    page.on('request', (request) => {\n      requests.push({\n        url: request.url(),\n        method: request.method(),\n        resourceType: request.resourceType()\n      });\n    });\n\n    page.on('response', (response) => {\n      responses.push({\n        url: response.url(),\n        status: response.status(),\n        headers: response.headers()\n      });\n    });\n\n    await page.goto('/', { waitUntil: 'networkidle' });\n\n    // Check JavaScript bundle sizes\n    const jsRequests = requests.filter(req => \n      req.resourceType === 'script' && req.url.includes('.js')\n    );\n\n    let totalJSSize = 0;\n    for (const jsReq of jsRequests) {\n      const response = responses.find(res => res.url === jsReq.url);\n      if (response && response.headers['content-length']) {\n        totalJSSize += parseInt(response.headers['content-length']);\n      }\n    }\n\n    // Main bundle should be under 1.5MB (compressed)\n    if (totalJSSize > 0) {\n      expect(totalJSSize).toBeLessThan(1.5 * 1024 * 1024);\n      console.log(`Total JS bundle size: ${(totalJSSize / 1024 / 1024).toFixed(2)}MB`);\n    }\n\n    // Check for code splitting evidence\n    const jsFiles = jsRequests.map(req => req.url);\n    const hasCodeSplitting = jsFiles.some(url => \n      url.includes('chunk') || url.includes('lazy') || jsFiles.length > 3\n    );\n\n    // Log code splitting status\n    console.log(`Code splitting detected: ${hasCodeSplitting}`);\n    console.log(`JavaScript files loaded: ${jsFiles.length}`);\n  });\n\n  test('should handle memory efficiently', async ({ page }) => {\n    await page.goto('/');\n\n    // Get initial memory usage\n    const initialMemory = await page.evaluate(() => {\n      return (performance as any).memory ? {\n        usedJSHeapSize: (performance as any).memory.usedJSHeapSize,\n        totalJSHeapSize: (performance as any).memory.totalJSHeapSize,\n        jsHeapSizeLimit: (performance as any).memory.jsHeapSizeLimit\n      } : null;\n    });\n\n    if (initialMemory) {\n      console.log('Initial memory usage:', initialMemory);\n\n      // Simulate heavy usage\n      await page.evaluate(() => {\n        // Simulate creating and destroying components\n        for (let i = 0; i < 100; i++) {\n          const div = document.createElement('div');\n          div.innerHTML = `<div>Component ${i}</div>`.repeat(100);\n          document.body.appendChild(div);\n          \n          setTimeout(() => {\n            if (div.parentNode) {\n              div.parentNode.removeChild(div);\n            }\n          }, 10);\n        }\n      });\n\n      await page.waitForTimeout(2000);\n\n      // Get memory usage after simulation\n      const finalMemory = await page.evaluate(() => {\n        return (performance as any).memory ? {\n          usedJSHeapSize: (performance as any).memory.usedJSHeapSize,\n          totalJSHeapSize: (performance as any).memory.totalJSHeapSize,\n          jsHeapSizeLimit: (performance as any).memory.jsHeapSizeLimit\n        } : null;\n      });\n\n      if (finalMemory) {\n        console.log('Final memory usage:', finalMemory);\n        \n        // Memory growth should be reasonable (under 50MB increase)\n        const memoryGrowth = finalMemory.usedJSHeapSize - initialMemory.usedJSHeapSize;\n        expect(memoryGrowth).toBeLessThan(50 * 1024 * 1024);\n        console.log(`Memory growth: ${(memoryGrowth / 1024 / 1024).toFixed(2)}MB`);\n      }\n    }\n  });\n\n  test('should optimize image and asset loading', async ({ page }) => {\n    const imageRequests: any[] = [];\n    const cssRequests: any[] = [];\n\n    page.on('request', (request) => {\n      if (request.resourceType() === 'image') {\n        imageRequests.push(request.url());\n      }\n      if (request.resourceType() === 'stylesheet') {\n        cssRequests.push(request.url());\n      }\n    });\n\n    await page.goto('/', { waitUntil: 'networkidle' });\n\n    // Check that images are optimized\n    for (const imageUrl of imageRequests) {\n      // Modern format check (WebP, AVIF support)\n      const isOptimizedFormat = imageUrl.includes('.webp') || \n                               imageUrl.includes('.avif') || \n                               imageUrl.includes('f_auto') || // Cloudinary auto format\n                               imageUrl.includes('format=webp');\n                               \n      if (!isOptimizedFormat && !imageUrl.includes('data:')) {\n        console.warn(`Potentially unoptimized image: ${imageUrl}`);\n      }\n    }\n\n    // Check CSS optimization\n    console.log(`CSS files loaded: ${cssRequests.length}`);\n    console.log(`Images loaded: ${imageRequests.length}`);\n\n    // Should have reasonable number of asset requests\n    expect(imageRequests.length + cssRequests.length).toBeLessThan(20);\n  });\n\n  test('should validate caching strategies', async ({ page, context }) => {\n    // First visit\n    await page.goto('/', { waitUntil: 'networkidle' });\n    \n    const firstLoadRequests: string[] = [];\n    page.on('request', (request) => {\n      firstLoadRequests.push(request.url());\n    });\n\n    // Second visit (should utilize cache)\n    await page.reload({ waitUntil: 'networkidle' });\n    \n    const secondLoadRequests: string[] = [];\n    page.on('request', (request) => {\n      secondLoadRequests.push(request.url());\n    });\n\n    await page.waitForTimeout(1000);\n\n    // Check that static assets are cached\n    const staticAssets = firstLoadRequests.filter(url => \n      url.includes('.js') || url.includes('.css') || url.includes('.png') || \n      url.includes('.jpg') || url.includes('.svg')\n    );\n\n    const cachedAssets = staticAssets.filter(url => \n      !secondLoadRequests.includes(url)\n    );\n\n    // At least some assets should be cached\n    const cacheEfficiency = cachedAssets.length / staticAssets.length;\n    console.log(`Cache efficiency: ${(cacheEfficiency * 100).toFixed(1)}%`);\n    \n    // Should have at least 50% cache hit rate for static assets\n    expect(cacheEfficiency).toBeGreaterThan(0.5);\n  });\n\n  test('should measure component render performance', async ({ page }) => {\n    await page.goto('/');\n\n    // Measure component mount times\n    const componentMetrics = await page.evaluate(() => {\n      const startTime = performance.now();\n      \n      // Trigger component updates if possible\n      window.dispatchEvent(new Event('resize'));\n      \n      return new Promise((resolve) => {\n        requestAnimationFrame(() => {\n          const endTime = performance.now();\n          resolve({\n            componentUpdateTime: endTime - startTime,\n            timestamp: endTime\n          });\n        });\n      });\n    });\n\n    console.log('Component metrics:', componentMetrics);\n\n    // Test interaction responsiveness\n    const interactionStart = Date.now();\n    \n    // Find and interact with UI elements\n    const interactiveElements = page.locator('button, input, select, [role=\"button\"]');\n    const count = await interactiveElements.count();\n    \n    if (count > 0) {\n      // Test first interactive element\n      await interactiveElements.first().hover();\n      await page.waitForTimeout(50);\n      \n      const interactionEnd = Date.now();\n      const interactionTime = interactionEnd - interactionStart;\n      \n      // Interactions should be responsive (under 100ms)\n      expect(interactionTime).toBeLessThan(100);\n      console.log(`Interaction response time: ${interactionTime}ms`);\n    }\n  });\n\n  test('should validate accessibility performance', async ({ page }) => {\n    await page.goto('/');\n    \n    // Check for accessibility-related performance issues\n    const accessibilityMetrics = await page.evaluate(() => {\n      const startTime = performance.now();\n      \n      // Count focusable elements\n      const focusableElements = document.querySelectorAll(\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n      );\n      \n      // Count ARIA elements\n      const ariaElements = document.querySelectorAll('[aria-label], [aria-labelledby], [role]');\n      \n      const endTime = performance.now();\n      \n      return {\n        focusableCount: focusableElements.length,\n        ariaCount: ariaElements.length,\n        scanTime: endTime - startTime\n      };\n    });\n\n    console.log('Accessibility metrics:', accessibilityMetrics);\n    \n    // Accessibility scanning should be fast\n    expect(accessibilityMetrics.scanTime).toBeLessThan(100);\n    \n    // Should have reasonable number of interactive elements\n    expect(accessibilityMetrics.focusableCount).toBeGreaterThan(0);\n    expect(accessibilityMetrics.focusableCount).toBeLessThan(100);\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/e2e/white-screen-debug.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/scripts/post-build.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/__tests__/phase3-performance.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":199,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6100,6103],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6100,6103],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":209,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6419,6422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6419,6422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { BrowserRouter } from 'react-router-dom';\nimport { UnifiedInsightsPage } from '@/components/insights/UnifiedInsightsPage';\nimport { OptimizedTransactionList } from '@/components/transactions/OptimizedTransactionList';\nimport { CompoundInterestCalculator } from '@/components/calculators/CompoundInterestCalculator';\nimport AccountCard from '@/components/AccountCard';\nimport BalanceCard from '@/components/BalanceCard';\nimport TransactionItem from '@/components/TransactionItem';\nimport { mockData } from '@/services/mockData';\n\n// Phase 3 Performance Testing Suite\ndescribe('Phase 3 Performance Optimizations', () => {\n  let queryClient: QueryClient;\n\n  beforeEach(() => {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    });\n  });\n\n  const renderWithProviders = (component: React.ReactElement) => {\n    return render(\n      <BrowserRouter>\n        <QueryClientProvider client={queryClient}>\n          {component}\n        </QueryClientProvider>\n      </BrowserRouter>\n    );\n  };\n\n  describe('React.memo Optimizations', () => {\n    it('should render AccountCard with memo optimization', () => {\n      const account = mockData.accounts[0];\n      const { rerender } = renderWithProviders(\n        <AccountCard account={account} />\n      );\n\n      expect(screen.getByText(account.type)).toBeInTheDocument();\n\n      // Props don't change, component should not re-render\n      rerender(\n        <BrowserRouter>\n          <QueryClientProvider client={queryClient}>\n            <AccountCard account={account} />\n          </QueryClientProvider>\n        </BrowserRouter>\n      );\n\n      expect(screen.getByText(account.type)).toBeInTheDocument();\n    });\n\n    it('should render BalanceCard with memo optimization', () => {\n      const props = {\n        accountType: 'Checking',\n        nickname: 'Main Account',\n        balance: 5000,\n        availableBalance: 4800,\n        currency: 'USD',\n        trend: 'up' as const,\n        trendPercentage: 12.5\n      };\n\n      renderWithProviders(<BalanceCard {...props} />);\n      expect(screen.getByText('Checking')).toBeInTheDocument();\n    });\n\n    it('should render TransactionItem with memo optimization', () => {\n      const transaction = {\n        id: '1',\n        merchant: 'Test Store',\n        category: { name: 'Shopping', color: '#ff0000' },\n        amount: -50.00,\n        date: '2024-01-01',\n        status: 'completed' as const\n      };\n\n      renderWithProviders(\n        <TransactionItem transaction={transaction} currency=\"USD\" />\n      );\n      expect(screen.getByText('Test Store')).toBeInTheDocument();\n    });\n  });\n\n  describe('useMemo and useCallback Optimizations', () => {\n    it('should efficiently render large transaction lists', async () => {\n      const startTime = performance.now();\n      \n      const transformedTransactions = mockData.transactions.map(t => ({\n        id: t.id,\n        date: t.date,\n        description: t.merchant,\n        amount: Math.abs(t.amount),\n        category: {\n          name: t.category.name.toLowerCase(),\n          color: t.category.color || '#6366f1'\n        },\n        type: t.amount < 0 ? 'expense' : 'income' as const,\n        merchant: t.merchant,\n        status: 'completed' as const,\n        scores: {\n          health: 85,\n          eco: 75,\n          financial: 90,\n        }\n      }));\n\n      renderWithProviders(\n        <OptimizedTransactionList \n          transactions={transformedTransactions}\n          variant=\"apple\"\n          currency=\"USD\"\n          features={{\n            showScores: true,\n            showCategories: true,\n            searchable: true,\n            filterable: true,\n            groupByDate: true,\n            sortable: true\n          }}\n        />\n      );\n\n      await waitFor(() => {\n        expect(screen.getByRole('table')).toBeInTheDocument();\n      });\n\n      const renderTime = performance.now() - startTime;\n      \n      // Should render in less than 200ms (optimized target)\n      expect(renderTime).toBeLessThan(200);\n    });\n\n    it('should efficiently render UnifiedInsightsPage', async () => {\n      const startTime = performance.now();\n\n      const config = {\n        variant: 'comprehensive' as const,\n        features: {\n          showScores: true,\n          showTrends: true,\n          showCategories: true,\n          enableInteractions: true,\n          showComparisons: true\n        },\n        layout: {\n          columns: 3,\n          spacing: 'normal' as const,\n          responsive: true\n        },\n        dataSource: {\n          transactions: mockData.transactions.slice(0, 10), // Limit for testing\n          accounts: mockData.accounts,\n          timeframe: '30d' as const\n        }\n      };\n\n      renderWithProviders(<UnifiedInsightsPage config={config} />);\n\n      await waitFor(() => {\n        expect(screen.getByRole('main')).toBeInTheDocument();\n      }, { timeout: 3000 });\n\n      const renderTime = performance.now() - startTime;\n      \n      // Should render insights page efficiently\n      expect(renderTime).toBeLessThan(500);\n    });\n  });\n\n  describe('Bundle Size Optimization', () => {\n    it('should have optimized chunk sizes for manual chunks', () => {\n      // This test verifies our vite.config.ts manual chunks are properly configured\n      const manualChunks = [\n        'vendor',\n        'ui', \n        'charts',\n        'crypto',\n        'routing',\n        'insights',\n        'calculators',\n        'universal-card',\n        'performance',\n        'optimized-transactions'\n      ];\n\n      expect(manualChunks).toHaveLength(10);\n      expect(manualChunks).toContain('insights');\n      expect(manualChunks).toContain('calculators');\n      expect(manualChunks).toContain('universal-card');\n    });\n  });\n\n  describe('Memory Usage Optimization', () => {\n    it('should not cause memory leaks with memoized components', () => {\n      const initialMemory = (performance as any).memory?.usedJSHeapSize || 0;\n      \n      // Render and unmount components multiple times\n      for (let i = 0; i < 10; i++) {\n        const { unmount } = renderWithProviders(\n          <AccountCard account={mockData.accounts[0]} />\n        );\n        unmount();\n      }\n\n      const finalMemory = (performance as any).memory?.usedJSHeapSize || 0;\n      const memoryIncrease = finalMemory - initialMemory;\n      \n      // Memory increase should be minimal (less than 5MB)\n      expect(memoryIncrease).toBeLessThan(5 * 1024 * 1024);\n    });\n  });\n\n  describe('Component Display Names', () => {\n    it('should have proper display names for debugging', () => {\n      expect(AccountCard.displayName).toBe('AccountCard');\n      expect(BalanceCard.displayName).toBe('BalanceCard');\n      expect(TransactionItem.displayName).toBe('TransactionItem');\n    });\n  });\n\n  describe('Lazy Loading Performance', () => {\n    it('should handle lazy loaded components efficiently', async () => {\n      // Test is implicit - if lazy loading works, the components render\n      // This is tested through our App.tsx lazy loading setup\n      \n      const config = {\n        variant: 'simple' as const,\n        features: { showScores: true },\n        layout: { columns: 1, spacing: 'tight' as const, responsive: true },\n        dataSource: {\n          transactions: mockData.transactions.slice(0, 5),\n          accounts: mockData.accounts.slice(0, 2),\n          timeframe: '7d' as const\n        }\n      };\n\n      renderWithProviders(<UnifiedInsightsPage config={config} />);\n      \n      await waitFor(() => {\n        expect(screen.getByRole('main')).toBeInTheDocument();\n      });\n      \n      // If we get here, lazy loading worked correctly\n      expect(true).toBe(true);\n    });\n  });\n});\n\n// Performance Benchmark Helper\nexport const measureComponentPerformance = async (\n  component: React.ReactElement,\n  iterations: number = 100\n) => {\n  const queryClient = new QueryClient();\n  const times: number[] = [];\n\n  for (let i = 0; i < iterations; i++) {\n    const startTime = performance.now();\n    \n    const { unmount } = render(\n      <BrowserRouter>\n        <QueryClientProvider client={queryClient}>\n          {component}\n        </QueryClientProvider>\n      </BrowserRouter>\n    );\n    \n    const endTime = performance.now();\n    times.push(endTime - startTime);\n    \n    unmount();\n  }\n\n  return {\n    avg: times.reduce((sum, time) => sum + time, 0) / times.length,\n    min: Math.min(...times),\n    max: Math.max(...times),\n    p95: times.sort((a, b) => a - b)[Math.floor(times.length * 0.95)]\n  };\n};\n\ninterface PerformanceMemory extends Performance {\n  memory?: {\n    usedJSHeapSize: number;\n  };\n}\n\nconst memoryBefore = (performance as PerformanceMemory).memory?.usedJSHeapSize || 0;\n\n// Simulate component mounting/unmounting cycles\nfor (let i = 0; i < 100; i++) {\n  const { unmount } = render(<MemoryTestComponent />);\n  unmount();\n}\n\nconst memoryAfter = (performance as PerformanceMemory).memory?.usedJSHeapSize || 0;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/AccountCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/BalanceCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/GlassCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/LiquidGlassTopMenuBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/Navigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/QuickActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ThemeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/TransactionItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/TransactionList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/TransactionWithScores.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/accounts/AccountLinking.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadInstitutions' function makes the dependencies of useEffect Hook (at line 38) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'loadInstitutions' in its own useCallback() Hook.","line":40,"column":9,"nodeType":"VariableDeclarator","endLine":47,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1606,1609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1606,1609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Building2, \n  Search, \n  Plus, \n  Shield, \n  Zap, \n  Check,\n  AlertCircle,\n  CreditCard,\n  Banknote,\n  TrendingUp,\n  Home,\n  Car,\n  GraduationCap\n} from 'lucide-react';\nimport { Institution, Account } from '@/types/accounts';\nimport { accountService } from '@/services/accountService';\nimport { cn } from '@/lib/utils';\n\ninterface AccountLinkingProps {\n  familyId: string;\n  onAccountsLinked: (accounts: Account[]) => void;\n  onClose: () => void;\n}\n\nconst AccountLinking = ({ familyId, onAccountsLinked, onClose }: AccountLinkingProps) => {\n  const [step, setStep] = useState<'search' | 'connect' | 'select' | 'success'>('search');\n  const [institutions, setInstitutions] = useState<Institution[]>([]);\n  const [selectedInstitution, setSelectedInstitution] = useState<Institution | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [linkedAccounts, setLinkedAccounts] = useState<Account[]>([]);\n\n  useEffect(() => {\n    loadInstitutions();\n  }, [loadInstitutions]);\n\n  const loadInstitutions = async () => {\n    try {\n      const data = await accountService.getSupportedInstitutions(searchQuery);\n      setInstitutions(data);\n    } catch (err) {\n      setError('Failed to load institutions');\n    }\n  };\n\n  const handleInstitutionSelect = (institution: Institution) => {\n    setSelectedInstitution(institution);\n    setStep('connect');\n  };\n\n  const handlePlaidSuccess = async (publicToken: string, accounts: any[]) => {\n    if (!selectedInstitution) return;\n\n    setLoading(true);\n    try {\n      const linkedAccounts = await accountService.linkAccountsViaPlaid({\n        familyId,\n        publicToken,\n        institutionId: selectedInstitution.id,\n        accounts: accounts.map(acc => ({\n          id: acc.id,\n          name: acc.name,\n          type: acc.type,\n          subtype: acc.subtype\n        }))\n      });\n\n      setLinkedAccounts(linkedAccounts);\n      setStep('success');\n      onAccountsLinked(linkedAccounts);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to link accounts');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getAccountTypeIcon = (type: string) => {\n    switch (type) {\n      case 'depository':\n        return <Banknote className=\"w-5 h-5 text-green-400\" />;\n      case 'credit':\n        return <CreditCard className=\"w-5 h-5 text-orange-400\" />;\n      case 'investment':\n        return <TrendingUp className=\"w-5 h-5 text-blue-400\" />;\n      case 'loan':\n        return <Home className=\"w-5 h-5 text-purple-400\" />;\n      default:\n        return <Building2 className=\"w-5 h-5 text-gray-400\" />;\n    }\n  };\n\n  if (step === 'search') {\n    return (\n      <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 backdrop-blur-sm\">\n        <div className=\"bg-black border border-white/[0.08] rounded-2xl max-w-2xl w-full mx-4 max-h-[80vh] overflow-hidden\">\n          {/* Header */}\n          <div className=\"p-6 border-b border-white/[0.08]\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-white\">Link Your Accounts</h2>\n                <p className=\"text-white/60 mt-1\">\n                  Connect to 10,000+ financial institutions securely\n                </p>\n              </div>\n              <button\n                onClick={onClose}\n                className=\"text-white/60 hover:text-white transition-colors\"\n              >\n                ✕\n              </button>\n            </div>\n          </div>\n\n          {/* Search */}\n          <div className=\"p-6 border-b border-white/[0.08]\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-white/40\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search for your bank or financial institution...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full pl-12 pr-4 py-3 bg-white/[0.05] border border-white/[0.08] rounded-xl text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50\"\n              />\n            </div>\n          </div>\n\n          {/* Institution List */}\n          <div className=\"max-h-96 overflow-y-auto\">\n            {institutions.length === 0 ? (\n              <div className=\"p-8 text-center\">\n                <Building2 className=\"w-12 h-12 text-white/20 mx-auto mb-4\" />\n                <p className=\"text-white/60\">\n                  {searchQuery ? 'No institutions found matching your search' : 'Start typing to search for institutions'}\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-2 p-4\">\n                {institutions.map((institution) => (\n                  <button\n                    key={institution.id}\n                    onClick={() => handleInstitutionSelect(institution)}\n                    className=\"w-full p-4 bg-white/[0.03] hover:bg-white/[0.05] border border-white/[0.05] rounded-xl transition-all text-left group\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"w-12 h-12 bg-white/[0.06] rounded-xl flex items-center justify-center\">\n                          <Building2 className=\"w-6 h-6 text-blue-400\" />\n                        </div>\n                        \n                        <div>\n                          <h3 className=\"font-semibold text-white group-hover:text-blue-400 transition-colors\">\n                            {institution.name}\n                          </h3>\n                          <div className=\"flex items-center gap-4 mt-1\">\n                            <div className=\"flex items-center gap-1\">\n                              <Shield className=\"w-3 h-3 text-green-400\" />\n                              <span className=\"text-xs text-green-400\">Bank-level security</span>\n                            </div>\n                            {institution.capabilities.realTimeUpdates && (\n                              <div className=\"flex items-center gap-1\">\n                                <Zap className=\"w-3 h-3 text-yellow-400\" />\n                                <span className=\"text-xs text-yellow-400\">Real-time updates</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center gap-2\">\n                        {institution.capabilities.accounts && (\n                          <div className=\"p-1 bg-green-500/20 rounded\">\n                            <Banknote className=\"w-3 h-3 text-green-400\" />\n                          </div>\n                        )}\n                        {institution.capabilities.investments && (\n                          <div className=\"p-1 bg-blue-500/20 rounded\">\n                            <TrendingUp className=\"w-3 h-3 text-blue-400\" />\n                          </div>\n                        )}\n                        {institution.capabilities.liabilities && (\n                          <div className=\"p-1 bg-orange-500/20 rounded\">\n                            <CreditCard className=\"w-3 h-3 text-orange-400\" />\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Manual Account Option */}\n          <div className=\"p-4 border-t border-white/[0.08]\">\n            <button\n              onClick={() => {/* TODO: Open manual account creation */}}\n              className=\"w-full p-4 bg-white/[0.03] hover:bg-white/[0.05] border border-white/[0.05] rounded-xl transition-all text-left group border-dashed\"\n            >\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-12 h-12 bg-white/[0.06] rounded-xl flex items-center justify-center\">\n                  <Plus className=\"w-6 h-6 text-blue-400\" />\n                </div>\n                \n                <div>\n                  <h3 className=\"font-semibold text-white group-hover:text-blue-400 transition-colors\">\n                    Add Account Manually\n                  </h3>\n                  <p className=\"text-white/60 text-sm mt-1\">\n                    For institutions not supported by automatic linking\n                  </p>\n                </div>\n              </div>\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (step === 'connect') {\n    return (\n      <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 backdrop-blur-sm\">\n        <div className=\"bg-black border border-white/[0.08] rounded-2xl max-w-md w-full mx-4\">\n          <div className=\"p-6 text-center\">\n            {loading ? (\n              <>\n                <div className=\"w-16 h-16 bg-blue-500/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Shield className=\"w-8 h-8 text-blue-400 animate-pulse\" />\n                </div>\n                <h2 className=\"text-xl font-bold text-white mb-2\">Connecting to {selectedInstitution?.name}</h2>\n                <p className=\"text-white/60\">\n                  Securely linking your accounts...\n                </p>\n              </>\n            ) : error ? (\n              <>\n                <div className=\"w-16 h-16 bg-red-500/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <AlertCircle className=\"w-8 h-8 text-red-400\" />\n                </div>\n                <h2 className=\"text-xl font-bold text-white mb-2\">Connection Failed</h2>\n                <p className=\"text-red-400 mb-4\">{error}</p>\n                <div className=\"flex gap-3\">\n                  <button\n                    onClick={() => setStep('search')}\n                    className=\"flex-1 px-4 py-2 bg-white/[0.05] border border-white/[0.08] rounded-lg text-white hover:bg-white/[0.08] transition-colors\"\n                  >\n                    Try Again\n                  </button>\n                  <button\n                    onClick={onClose}\n                    className=\"flex-1 px-4 py-2 bg-blue-500 rounded-lg text-white hover:bg-blue-600 transition-colors\"\n                  >\n                    Close\n                  </button>\n                </div>\n              </>\n            ) : (\n              <>\n                <div className=\"w-16 h-16 bg-white/[0.06] rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Building2 className=\"w-8 h-8 text-blue-400\" />\n                </div>\n                <h2 className=\"text-xl font-bold text-white mb-2\">Connect to {selectedInstitution?.name}</h2>\n                <p className=\"text-white/60 mb-6\">\n                  You'll be redirected to {selectedInstitution?.name} to securely authenticate your account.\n                </p>\n                \n                <div className=\"space-y-3 mb-6\">\n                  <div className=\"flex items-center gap-3 text-sm text-white/60\">\n                    <Shield className=\"w-4 h-4 text-green-400\" />\n                    <span>256-bit encryption</span>\n                  </div>\n                  <div className=\"flex items-center gap-3 text-sm text-white/60\">\n                    <Shield className=\"w-4 h-4 text-green-400\" />\n                    <span>Read-only access</span>\n                  </div>\n                  <div className=\"flex items-center gap-3 text-sm text-white/60\">\n                    <Shield className=\"w-4 h-4 text-green-400\" />\n                    <span>Never stored credentials</span>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <button\n                    onClick={() => setStep('search')}\n                    className=\"flex-1 px-4 py-2 bg-white/[0.05] border border-white/[0.08] rounded-lg text-white hover:bg-white/[0.08] transition-colors\"\n                  >\n                    Back\n                  </button>\n                  <button\n                    onClick={() => {\n                      // TODO: Initialize Plaid Link\n                      // Mock successful connection for now\n                      setTimeout(() => {\n                        handlePlaidSuccess('mock_public_token', [\n                          { id: 'acc1', name: 'Checking Account', type: 'depository', subtype: 'checking' },\n                          { id: 'acc2', name: 'Savings Account', type: 'depository', subtype: 'savings' }\n                        ]);\n                      }, 2000);\n                      setLoading(true);\n                    }}\n                    className=\"flex-1 px-4 py-2 bg-blue-500 rounded-lg text-white hover:bg-blue-600 transition-colors\"\n                  >\n                    Continue\n                  </button>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (step === 'success') {\n    return (\n      <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 backdrop-blur-sm\">\n        <div className=\"bg-black border border-white/[0.08] rounded-2xl max-w-md w-full mx-4\">\n          <div className=\"p-6 text-center\">\n            <div className=\"w-16 h-16 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Check className=\"w-8 h-8 text-green-400\" />\n            </div>\n            \n            <h2 className=\"text-xl font-bold text-white mb-2\">Accounts Connected!</h2>\n            <p className=\"text-white/60 mb-6\">\n              Successfully linked {linkedAccounts.length} account{linkedAccounts.length !== 1 ? 's' : ''} from {selectedInstitution?.name}\n            </p>\n\n            <div className=\"space-y-3 mb-6\">\n              {linkedAccounts.map((account) => (\n                <div\n                  key={account.id}\n                  className=\"flex items-center gap-3 p-3 bg-white/[0.03] rounded-lg\"\n                >\n                  {getAccountTypeIcon(account.accountType)}\n                  <div className=\"flex-1 text-left\">\n                    <p className=\"font-medium text-white\">{account.name}</p>\n                    <p className=\"text-white/60 text-sm capitalize\">\n                      {account.accountSubtype.replace('_', ' ')}\n                    </p>\n                  </div>\n                  <Check className=\"w-4 h-4 text-green-400\" />\n                </div>\n              ))}\n            </div>\n\n            <button\n              onClick={onClose}\n              className=\"w-full px-4 py-2 bg-blue-500 rounded-lg text-white hover:bg-blue-600 transition-colors\"\n            >\n              Done\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default AccountLinking;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ai/ChatDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ai/FinancialAIChat.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadChatHistory' and 'loadFinancialContext'. Either include them or remove the dependency array.","line":60,"column":6,"nodeType":"ArrayExpression","endLine":60,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [familyId, loadChatHistory, loadFinancialContext]","fix":{"range":[1571,1581],"text":"[familyId, loadChatHistory, loadFinancialContext]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { \n  Send, \n  Bot, \n  User, \n  Lightbulb, \n  TrendingUp, \n  Target, \n  AlertCircle,\n  Sparkles,\n  MessageCircle,\n  Trash2,\n  RotateCcw\n} from 'lucide-react';\nimport { aiFinancialService } from '@/services/aiFinancialService';\nimport { familyService } from '@/services/familyService';\nimport { accountService } from '@/services/accountService';\nimport { transactionService } from '@/services/transactionService';\nimport { cn } from '@/lib/utils';\n\ninterface FinancialAIChatProps {\n  familyId: string;\n  className?: string;\n  compact?: boolean;\n}\n\ninterface ChatMessage {\n  id: string;\n  type: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n  suggestions?: string[];\n}\n\ninterface FinancialContext {\n  totalBalance: number;\n  monthlySpending: number;\n  savingsGoals: number;\n  creditScore: number;\n  investments: number;\n  recentTransactions: Array<{\n    id: string;\n    amount: number;\n    description: string;\n    category: string;\n  }>;\n}\n\nconst FinancialAIChat = ({ familyId, className, compact = false }: FinancialAIChatProps) => {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [currentInput, setCurrentInput] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [financialContext, setFinancialContext] = useState<FinancialContext | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n\n  useEffect(() => {\n    loadChatHistory();\n    loadFinancialContext();\n  }, [familyId]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const loadChatHistory = async () => {\n    try {\n      const history = aiFinancialService.getChatHistory(familyId);\n      setMessages(history);\n    } catch (error) {\n      console.error('Failed to load chat history:', error);\n    }\n  };\n\n  const loadFinancialContext = async () => {\n    try {\n      const [family, accounts, stats, analytics] = await Promise.all([\n        familyService.getFamilyById(familyId),\n        accountService.getFamilyAccounts(familyId),\n        familyService.calculateFamilyStats(familyId),\n        transactionService.generateAnalytics(familyId, 'month')\n      ]);\n\n      const recentTransactions = await transactionService.searchTransactions(familyId, {\n        dateRange: {\n          start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n          end: new Date()\n        }\n      });\n\n      setFinancialContext({\n        family,\n        accounts,\n        recentTransactions: recentTransactions.slice(0, 20),\n        budgets: [], // TODO: Add budgets\n        stats,\n        analytics\n      });\n    } catch (error) {\n      console.error('Failed to load financial context:', error);\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (!currentInput.trim() || isLoading || !financialContext) return;\n\n    const userMessage: ChatMessage = {\n      id: `msg_${Date.now()}_user`,\n      type: 'user',\n      content: currentInput.trim(),\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setCurrentInput('');\n    setIsLoading(true);\n\n    try {\n      const response = await aiFinancialService.processFinancialQuery(\n        familyId,\n        currentInput.trim(),\n        financialContext\n      );\n\n      const assistantMessage: ChatMessage = {\n        id: `msg_${Date.now()}_assistant`,\n        type: 'assistant',\n        content: response.content,\n        timestamp: new Date(),\n        suggestions: response.recommendations\n      };\n\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (error) {\n      const errorMessage: ChatMessage = {\n        id: `msg_${Date.now()}_error`,\n        type: 'assistant',\n        content: 'I apologize, but I encountered an error processing your request. Please try again.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const clearChatHistory = () => {\n    aiFinancialService.clearChatHistory(familyId);\n    setMessages([]);\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const formatTimestamp = (timestamp: Date) => {\n    return timestamp.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  const getInsightIcon = (type: string) => {\n    switch (type) {\n      case 'spending_pattern':\n        return <TrendingUp className=\"w-4 h-4\" />;\n      case 'savings_opportunity':\n        return <Target className=\"w-4 h-4\" />;\n      case 'budget_analysis':\n        return <AlertCircle className=\"w-4 h-4\" />;\n      case 'investment_advice':\n        return <Sparkles className=\"w-4 h-4\" />;\n      default:\n        return <Lightbulb className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getInsightColor = (impact: string) => {\n    switch (impact) {\n      case 'high':\n        return 'text-red-400 bg-red-500/20 border-red-500/30';\n      case 'medium':\n        return 'text-yellow-400 bg-yellow-500/20 border-yellow-500/30';\n      case 'low':\n        return 'text-green-400 bg-green-500/20 border-green-500/30';\n      default:\n        return 'text-blue-400 bg-blue-500/20 border-blue-500/30';\n    }\n  };\n\n  const suggestedQuestions = [\n    \"How can I improve my savings rate?\",\n    \"What should I focus on in my budget?\",\n    \"Is my spending healthy this month?\",\n    \"Should I invest more or pay down debt?\",\n    \"How's my emergency fund looking?\"\n  ];\n\n  if (!financialContext) {\n    return (\n      <div className={cn(\"flex items-center justify-center p-8\", className)}>\n        <div className=\"text-center\">\n          <Bot className=\"w-12 h-12 text-blue-400 mx-auto mb-4 animate-pulse\" />\n          <p className=\"text-white/60\">Loading your financial context...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"flex flex-col h-full bg-white/[0.02] rounded-2xl border border-white/[0.08]\", className)}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-white/[0.08]\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-blue-500/20 rounded-xl flex items-center justify-center\">\n            <Bot className=\"w-6 h-6 text-blue-400\" />\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-white\">AI Financial Advisor</h3>\n            <p className=\"text-white/60 text-sm\">\n              {compact ? 'Ask me anything' : 'Personalized advice based on your financial data'}\n            </p>\n          </div>\n        </div>\n\n        {messages.length > 0 && (\n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={clearChatHistory}\n              className=\"p-2 rounded-lg hover:bg-white/[0.05] transition-colors text-white/60 hover:text-white\"\n              title=\"Clear chat\"\n            >\n              <Trash2 className=\"w-4 h-4\" />\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Messages */}\n      <div className={cn(\"flex-1 overflow-y-auto p-4 space-y-4\", compact ? \"max-h-96\" : \"min-h-[400px]\")}>\n        {messages.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Bot className=\"w-16 h-16 text-blue-400/50 mx-auto mb-4\" />\n            <h4 className=\"text-white font-medium mb-2\">Hi there! I'm your AI financial advisor.</h4>\n            <p className=\"text-white/60 text-sm mb-6\">\n              I have access to your complete financial picture and can provide personalized advice.\n            </p>\n            \n            <div className=\"space-y-2\">\n              <p className=\"text-white/80 text-sm font-medium\">Try asking:</p>\n              <div className=\"space-y-2\">\n                {suggestedQuestions.slice(0, compact ? 3 : 5).map((question, index) => (\n                  <button\n                    key={index}\n                    onClick={() => setCurrentInput(question)}\n                    className=\"block w-full text-left p-3 bg-white/[0.03] hover:bg-white/[0.05] border border-white/[0.05] rounded-lg text-white/80 hover:text-white text-sm transition-all\"\n                  >\n                    \"{question}\"\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n        ) : (\n          messages.map((message) => (\n            <div key={message.id} className={cn(\"flex gap-3\", message.type === 'user' ? 'justify-end' : 'justify-start')}>\n              <div className={cn(\"flex gap-3 max-w-[80%]\", message.type === 'user' ? 'flex-row-reverse' : 'flex-row')}>\n                {/* Avatar */}\n                <div className={cn(\n                  \"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0\",\n                  message.type === 'user' \n                    ? \"bg-green-500/20\" \n                    : \"bg-blue-500/20\"\n                )}>\n                  {message.type === 'user' ? (\n                    <User className=\"w-4 h-4 text-green-400\" />\n                  ) : (\n                    <Bot className=\"w-4 h-4 text-blue-400\" />\n                  )}\n                </div>\n\n                {/* Message Content */}\n                <div className={cn(\n                  \"flex flex-col gap-2\",\n                  message.type === 'user' ? 'items-end' : 'items-start'\n                )}>\n                  <div className={cn(\n                    \"rounded-2xl px-4 py-3 max-w-full\",\n                    message.type === 'user'\n                      ? \"bg-blue-500 text-white\"\n                      : \"bg-white/[0.05] border border-white/[0.08] text-white\"\n                  )}>\n                    <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">{message.content}</p>\n                  </div>\n\n                  {/* Suggestions */}\n                  {message.suggestions && message.suggestions.length > 0 && (\n                    <div className=\"space-y-2 w-full max-w-lg\">\n                      {message.suggestions.map((suggestion, index) => (\n                        <div\n                          key={index}\n                          className=\"p-3 bg-purple-500/20 border border-purple-500/30 rounded-xl text-sm\"\n                        >\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <Target className=\"w-4 h-4 text-purple-400\" />\n                            <span className=\"font-medium text-purple-400\">{suggestion}</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n\n                  <span className=\"text-xs text-white/40\">{formatTimestamp(message.timestamp)}</span>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n\n        {isLoading && (\n          <div className=\"flex gap-3 justify-start\">\n            <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n              <Bot className=\"w-4 h-4 text-blue-400\" />\n            </div>\n            <div className=\"bg-white/[0.05] border border-white/[0.08] rounded-2xl px-4 py-3\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\" />\n                <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }} />\n                <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }} />\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Input */}\n      <div className=\"p-4 border-t border-white/[0.08]\">\n        <div className=\"flex gap-3\">\n          <textarea\n            ref={inputRef}\n            value={currentInput}\n            onChange={(e) => setCurrentInput(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Ask me about your finances...\"\n            className=\"flex-1 bg-white/[0.05] border border-white/[0.08] rounded-xl px-4 py-3 text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 resize-none\"\n            rows={1}\n            disabled={isLoading}\n          />\n          <button\n            onClick={handleSendMessage}\n            disabled={!currentInput.trim() || isLoading}\n            className={cn(\n              \"p-3 rounded-xl transition-all\",\n              currentInput.trim() && !isLoading\n                ? \"bg-blue-500 hover:bg-blue-600 text-white\"\n                : \"bg-white/[0.05] text-white/40 cursor-not-allowed\"\n            )}\n          >\n            <Send className=\"w-5 h-5\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FinancialAIChat;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/budget/BudgetPlannerPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/budget/BudgetTracker.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadBudgetData' function makes the dependencies of useEffect Hook (at line 34) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'loadBudgetData' in its own useCallback() Hook.","line":36,"column":9,"nodeType":"VariableDeclarator","endLine":51,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  PieChart,\n  BarChart3,\n  TrendingUp,\n  TrendingDown,\n  Target,\n  AlertCircle,\n  Plus,\n  Settings,\n  Calendar,\n  DollarSign,\n  CheckCircle,\n  Clock,\n  ArrowRight\n} from 'lucide-react';\nimport { budgetService } from '@/services/budgetService';\nimport { Budget, BudgetCategory, SavingsGoal } from '@/types/budgets';\nimport { cn } from '@/lib/utils';\n\ninterface BudgetTrackerProps {\n  familyId: string;\n  className?: string;\n}\n\nconst BudgetTracker = ({ familyId, className }: BudgetTrackerProps) => {\n  const [budget, setBudget] = useState<Budget | null>(null);\n  const [goals, setGoals] = useState<SavingsGoal[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedView, setSelectedView] = useState<'overview' | 'categories' | 'goals' | 'analytics'>('overview');\n\n  useEffect(() => {\n    loadBudgetData();\n  }, [familyId, loadBudgetData]);\n\n  const loadBudgetData = async () => {\n    try {\n      setLoading(true);\n      const [activeBudget, familyGoals] = await Promise.all([\n        budgetService.getActiveBudget(familyId),\n        budgetService.getFamilySavingsGoals(familyId)\n      ]);\n      \n      setBudget(activeBudget);\n      setGoals(familyGoals);\n    } catch (error) {\n      console.error('Failed to load budget data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const formatPercentage = (value: number) => {\n    return `${value.toFixed(1)}%`;\n  };\n\n  const getCategoryProgress = (category: BudgetCategory) => {\n    if (category.budgetedAmount === 0) return 0;\n    return Math.min((category.spentAmount / category.budgetedAmount) * 100, 100);\n  };\n\n  const getCategoryStatus = (category: BudgetCategory) => {\n    const progress = getCategoryProgress(category);\n    if (progress >= 100) return 'overspent';\n    if (progress >= 80) return 'warning';\n    if (progress >= 50) return 'on-track';\n    return 'under-budget';\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'overspent':\n        return 'text-red-400 bg-red-500/20 border-red-500/30';\n      case 'warning':\n        return 'text-yellow-400 bg-yellow-500/20 border-yellow-500/30';\n      case 'on-track':\n        return 'text-blue-400 bg-blue-500/20 border-blue-500/30';\n      case 'under-budget':\n        return 'text-green-400 bg-green-500/20 border-green-500/30';\n      default:\n        return 'text-gray-400 bg-gray-500/20 border-gray-500/30';\n    }\n  };\n\n  const getGoalProgress = (goal: SavingsGoal) => {\n    return (goal.currentAmount / goal.targetAmount) * 100;\n  };\n\n  const getGoalStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"w-4 h-4 text-green-400\" />;\n      case 'on_track':\n      case 'ahead':\n        return <TrendingUp className=\"w-4 h-4 text-green-400\" />;\n      case 'behind':\n        return <TrendingDown className=\"w-4 h-4 text-red-400\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-yellow-400\" />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={cn(\"space-y-6\", className)}>\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 animate-pulse\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"h-6 bg-white/[0.05] rounded w-32\"></div>\n              <div className=\"h-6 bg-white/[0.05] rounded w-24\"></div>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"h-4 bg-white/[0.05] rounded w-full\"></div>\n              <div className=\"h-4 bg-white/[0.05] rounded w-3/4\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  const renderOverview = () => (\n    <div className=\"space-y-6\">\n      {/* Budget Summary */}\n      {budget && (\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <h3 className=\"text-xl font-bold text-white mb-6 flex items-center gap-3\">\n            <PieChart className=\"w-6 h-6 text-blue-400\" />\n            {budget.name}\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <p className=\"text-white/60 text-sm mb-2\">Total Budget</p>\n              <p className=\"text-2xl font-bold text-white\">{formatCurrency(budget.totalBudgeted)}</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-white/60 text-sm mb-2\">Spent</p>\n              <p className=\"text-2xl font-bold text-red-400\">{formatCurrency(budget.totalSpent)}</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-white/60 text-sm mb-2\">Remaining</p>\n              <p className=\"text-2xl font-bold text-green-400\">{formatCurrency(budget.totalRemaining)}</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-white/60 text-sm mb-2\">Savings Rate</p>\n              <p className=\"text-2xl font-bold text-blue-400\">\n                {formatPercentage((budget.totalRemaining / budget.totalBudgeted) * 100)}\n              </p>\n            </div>\n          </div>\n\n          {/* Overall Progress Bar */}\n          <div className=\"mt-6\">\n            <div className=\"flex justify-between text-sm text-white/60 mb-2\">\n              <span>Budget Progress</span>\n              <span>{formatPercentage((budget.totalSpent / budget.totalBudgeted) * 100)}</span>\n            </div>\n            <div className=\"w-full bg-white/[0.05] rounded-full h-3\">\n              <div \n                className={cn(\n                  \"h-3 rounded-full transition-all duration-300\",\n                  budget.totalSpent > budget.totalBudgeted ? \"bg-red-500\" : \"bg-blue-500\"\n                )}\n                style={{ width: `${Math.min((budget.totalSpent / budget.totalBudgeted) * 100, 100)}%` }}\n              ></div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Top Categories */}\n      {budget && budget.categories.length > 0 && (\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <h3 className=\"text-lg font-bold text-white mb-4 flex items-center gap-3\">\n            <BarChart3 className=\"w-5 h-5 text-blue-400\" />\n            Top Spending Categories\n          </h3>\n          \n          <div className=\"space-y-4\">\n            {budget.categories\n              .sort((a, b) => b.spentAmount - a.spentAmount)\n              .slice(0, 5)\n              .map((category) => {\n                const progress = getCategoryProgress(category);\n                const status = getCategoryStatus(category);\n                \n                return (\n                  <div key={category.id} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                      <div className=\"w-8 h-8 rounded-lg bg-blue-500/20 flex items-center justify-center\">\n                        <Target className=\"w-4 h-4 text-blue-400\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-medium text-white capitalize truncate\">{category.categoryName.replace('_', ' ')}</p>\n                        <div className=\"flex items-center gap-3 mt-1\">\n                          <div className=\"flex-1 bg-white/[0.05] rounded-full h-2\">\n                            <div \n                              className={cn(\n                                \"h-2 rounded-full transition-all duration-300\",\n                                progress >= 100 ? \"bg-red-500\" : \n                                progress >= 80 ? \"bg-yellow-500\" : \"bg-green-500\"\n                              )}\n                              style={{ width: `${Math.min(progress, 100)}%` }}\n                            ></div>\n                          </div>\n                          <span className={cn(\n                            \"text-xs px-2 py-1 rounded-lg border font-medium\",\n                            getStatusColor(status)\n                          )}>\n                            {formatPercentage(progress)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-white\">{formatCurrency(category.spentAmount)}</p>\n                      <p className=\"text-white/60 text-sm\">of {formatCurrency(category.budgetedAmount)}</p>\n                    </div>\n                  </div>\n                );\n              })}\n          </div>\n        </div>\n      )}\n\n      {/* Savings Goals */}\n      {goals.length > 0 && (\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <h3 className=\"text-lg font-bold text-white mb-4 flex items-center gap-3\">\n            <Target className=\"w-5 h-5 text-green-400\" />\n            Savings Goals\n          </h3>\n          \n          <div className=\"space-y-4\">\n            {goals.slice(0, 3).map((goal) => {\n              const progress = getGoalProgress(goal);\n              \n              return (\n                <div key={goal.id} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                    <div className=\"w-8 h-8 rounded-lg bg-green-500/20 flex items-center justify-center\">\n                      {getGoalStatusIcon(goal.status)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium text-white truncate\">{goal.name}</p>\n                      <div className=\"flex items-center gap-3 mt-1\">\n                        <div className=\"flex-1 bg-white/[0.05] rounded-full h-2\">\n                          <div \n                            className=\"h-2 rounded-full bg-green-500 transition-all duration-300\"\n                            style={{ width: `${Math.min(progress, 100)}%` }}\n                          ></div>\n                        </div>\n                        <span className=\"text-xs text-green-400 font-medium\">\n                          {formatPercentage(progress)}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-white\">{formatCurrency(goal.currentAmount)}</p>\n                    <p className=\"text-white/60 text-sm\">of {formatCurrency(goal.targetAmount)}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderCategories = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-xl font-bold text-white\">Budget Categories</h3>\n        <button className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-xl transition-colors flex items-center gap-2\">\n          <Plus className=\"w-4 h-4\" />\n          Add Category\n        </button>\n      </div>\n\n      {budget && budget.categories.map((category) => {\n        const progress = getCategoryProgress(category);\n        const status = getCategoryStatus(category);\n        \n        return (\n          <div\n            key={category.id}\n            className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 hover:bg-white/[0.03] transition-all duration-300\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 rounded-2xl bg-blue-500/20 flex items-center justify-center\">\n                  <Target className=\"w-6 h-6 text-blue-400\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-white capitalize\">{category.categoryName.replace('_', ' ')}</h4>\n                  <div className=\"flex items-center gap-3 mt-1\">\n                    {category.isEssential && (\n                      <span className=\"text-xs px-2 py-1 rounded-lg bg-red-500/20 text-red-400 border border-red-500/30\">\n                        Essential\n                      </span>\n                    )}\n                    {category.isFixed && (\n                      <span className=\"text-xs px-2 py-1 rounded-lg bg-blue-500/20 text-blue-400 border border-blue-500/30\">\n                        Fixed\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"text-right\">\n                <p className=\"font-bold text-white\">{formatCurrency(category.spentAmount)}</p>\n                <p className=\"text-white/60 text-sm\">of {formatCurrency(category.budgetedAmount)}</p>\n                <span className={cn(\n                  \"text-xs px-2 py-1 rounded-lg border font-medium inline-block mt-1\",\n                  getStatusColor(status)\n                )}>\n                  {formatPercentage(progress)}\n                </span>\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"mb-4\">\n              <div className=\"flex justify-between text-sm text-white/60 mb-2\">\n                <span>Spent</span>\n                <span>Remaining: {formatCurrency(category.remainingAmount)}</span>\n              </div>\n              <div className=\"w-full bg-white/[0.05] rounded-full h-3\">\n                <div \n                  className={cn(\n                    \"h-3 rounded-full transition-all duration-300\",\n                    progress >= 100 ? \"bg-red-500\" : \n                    progress >= 80 ? \"bg-yellow-500\" : \"bg-green-500\"\n                  )}\n                  style={{ width: `${Math.min(progress, 100)}%` }}\n                ></div>\n              </div>\n            </div>\n\n            {/* Overage Warning */}\n            {category.overageAmount > 0 && (\n              <div className=\"bg-red-500/10 border border-red-500/20 rounded-xl p-3 flex items-center gap-3\">\n                <AlertCircle className=\"w-5 h-5 text-red-400\" />\n                <div>\n                  <p className=\"text-red-400 font-medium\">Over Budget</p>\n                  <p className=\"text-red-300 text-sm\">Exceeded by {formatCurrency(category.overageAmount)}</p>\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n\n  const renderGoals = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-xl font-bold text-white\">Savings Goals</h3>\n        <button className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-xl transition-colors flex items-center gap-2\">\n          <Plus className=\"w-4 h-4\" />\n          Add Goal\n        </button>\n      </div>\n\n      {goals.map((goal) => {\n        const progress = getGoalProgress(goal);\n        const monthsRemaining = Math.ceil((goal.targetDate.getTime() - Date.now()) / (30 * 24 * 60 * 60 * 1000));\n        \n        return (\n          <div\n            key={goal.id}\n            className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 hover:bg-white/[0.03] transition-all duration-300\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 rounded-2xl bg-green-500/20 flex items-center justify-center\">\n                  {getGoalStatusIcon(goal.status)}\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-white\">{goal.name}</h4>\n                  <p className=\"text-white/60 text-sm\">{goal.description}</p>\n                  <div className=\"flex items-center gap-3 mt-1\">\n                    <span className=\"text-xs px-2 py-1 rounded-lg bg-green-500/20 text-green-400 border border-green-500/30 capitalize\">\n                      {goal.goalType.replace('_', ' ')}\n                    </span>\n                    <span className=\"text-xs text-white/60\">\n                      <Calendar className=\"w-3 h-3 inline mr-1\" />\n                      {monthsRemaining > 0 ? `${monthsRemaining} months left` : 'Overdue'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"text-right\">\n                <p className=\"font-bold text-white\">{formatCurrency(goal.currentAmount)}</p>\n                <p className=\"text-white/60 text-sm\">of {formatCurrency(goal.targetAmount)}</p>\n                <p className=\"text-green-400 text-sm font-medium mt-1\">{formatPercentage(progress)}</p>\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"mb-4\">\n              <div className=\"flex justify-between text-sm text-white/60 mb-2\">\n                <span>Progress</span>\n                <span>Monthly: {formatCurrency(goal.monthlyContribution)}</span>\n              </div>\n              <div className=\"w-full bg-white/[0.05] rounded-full h-3\">\n                <div \n                  className=\"h-3 rounded-full bg-green-500 transition-all duration-300\"\n                  style={{ width: `${Math.min(progress, 100)}%` }}\n                ></div>\n              </div>\n            </div>\n\n            {/* Goal Details */}\n            <div className=\"flex items-center justify-between text-sm\">\n              <div className=\"flex items-center gap-4\">\n                <span className=\"text-white/60\">Target Date:</span>\n                <span className=\"text-white\">{goal.targetDate.toLocaleDateString()}</span>\n              </div>\n              {goal.autoContribute && (\n                <span className=\"text-green-400 flex items-center gap-1\">\n                  <CheckCircle className=\"w-3 h-3\" />\n                  Auto-contribute\n                </span>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Navigation Tabs */}\n      <div className=\"flex items-center gap-2 bg-white/[0.02] rounded-xl p-1 border border-white/[0.08]\">\n        {[\n          { id: 'overview', label: 'Overview', icon: PieChart },\n          { id: 'categories', label: 'Categories', icon: BarChart3 },\n          { id: 'goals', label: 'Goals', icon: Target },\n          { id: 'analytics', label: 'Analytics', icon: TrendingUp }\n        ].map(({ id, label, icon: Icon }) => (\n          <button\n            key={id}\n            onClick={(e: React.MouseEvent) => e.stopPropagation()}\n            className={cn(\n              \"flex-1 flex items-center justify-center gap-2 px-4 py-2 rounded-lg transition-all\",\n              selectedView === id\n                ? \"bg-blue-500 text-white\"\n                : \"text-white/60 hover:text-white hover:bg-white/[0.05]\"\n            )}\n          >\n            <Icon className=\"w-4 h-4\" />\n            {label}\n          </button>\n        ))}\n      </div>\n\n      {/* Content */}\n      {selectedView === 'overview' && renderOverview()}\n      {selectedView === 'categories' && renderCategories()}\n      {selectedView === 'goals' && renderGoals()}\n      {selectedView === 'analytics' && renderOverview()} {/* Reuse overview for now */}\n    </div>\n  );\n};\n\nexport default BudgetTracker;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/calculators/CalculatorList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/calculators/CompoundInterestCalculator.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'monthlyContribution'. Either exclude it or remove the dependency array.","line":135,"column":6,"nodeType":"ArrayExpression","endLine":135,"endColumn":122,"suggestions":[{"desc":"Update the dependencies array to be: [principal, rate, years, compoundFreq, securityContext, performSecureCalculation, compoundData]","fix":{"range":[4836,4952],"text":"[principal, rate, years, compoundFreq, securityContext, performSecureCalculation, compoundData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'monthlyContribution'. Either include it or remove the dependency array.","line":184,"column":6,"nodeType":"ArrayExpression","endLine":184,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [monthlyContribution, principal, rate, years]","fix":{"range":[6502,6526],"text":"[monthlyContribution, principal, rate, years]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback } from 'react';\nimport { calculateCompoundInterest } from '@/utils/calculators';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from 'recharts';\nimport { SecureCalculatorWrapper, useSecureCalculator } from './SecureCalculatorWrapper';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { AlertTriangle } from 'lucide-react';\n\ninterface CompoundData {\n  year: number;\n  principal: number;\n  interest: number;\n  total: number;\n}\n\ninterface SecureCalculatorProps {\n  securityContext?: {\n    validateInput: (type: string, value: unknown) => unknown;\n    onCalculationSuccess: () => void;\n    onCalculationError: (error: Error) => void;\n    securityLevel: string;\n  };\n  onSecurityEvent?: (violationType: string, details: unknown) => void;\n}\n\nconst CompoundInterestCalculator = React.memo<SecureCalculatorProps>(({ securityContext, onSecurityEvent }) => {\n  const [principal, setPrincipal] = useState(10000);\n  const [rate, setRate] = useState(7);\n  const [years, setYears] = useState(10);\n  const [compoundFreq, setCompoundFreq] = useState(12);\n  const [monthlyContribution, setMonthlyContribution] = useState(200);\n  const [futureValue, setFutureValue] = useState<number | null>(null);\n  const [chartData, setChartData] = useState<CompoundData[]>([]);\n  const [inputErrors, setInputErrors] = useState<Record<string, string>>({});\n\n  const { validateAndSanitizeInput, performSecureCalculation } = useSecureCalculator('compound-interest');\n\n  // Memoized expensive calculation to prevent unnecessary recalculations\n  const compoundData = useMemo((): CompoundData[] => {\n    const data: CompoundData[] = [];\n    const currentPrincipal = principal;\n    const monthlyRate = rate / 100 / compoundFreq;\n    const periodsPerYear = compoundFreq;\n    \n    // Add initial data point\n    data.push({\n      year: 0,\n      principal: principal,\n      interest: 0,\n      total: principal\n    });\n\n    for (let year = 1; year <= years; year++) {\n      // Calculate compound interest for the year\n      const yearlyContributions = monthlyContribution * 12;\n      \n      // Calculate compound growth\n      const periods = year * periodsPerYear;\n      const compoundAmount = currentPrincipal * Math.pow(1 + monthlyRate, periods);\n      \n      // Add yearly contributions with compound interest\n      let contributionGrowth = 0;\n      for (let i = 1; i <= 12; i++) {\n        const monthsRemaining = (years - year) * 12 + (12 - i);\n        contributionGrowth += monthlyContribution * Math.pow(1 + monthlyRate, monthsRemaining * periodsPerYear / 12);\n      }\n      \n      const totalContributions = principal + (yearlyContributions * year);\n      const totalInterest = compoundAmount + contributionGrowth - totalContributions;\n      const totalValue = totalContributions + totalInterest;\n      \n      data.push({\n        year,\n        principal: totalContributions,\n        interest: totalInterest,\n        total: totalValue\n      });\n    }\n    \n    return data;\n  }, [principal, rate, years, compoundFreq, monthlyContribution]);\n\n  const handleSecureInput = useCallback((field: string, value: string, type: string) => {\n    setInputErrors(prev => ({ ...prev, [field]: '' }));\n    \n    try {\n      let sanitizedValue;\n      if (securityContext) {\n        sanitizedValue = securityContext.validateInput(type, value);\n      } else {\n        sanitizedValue = validateAndSanitizeInput(type, value);\n      }\n\n      switch (field) {\n        case 'principal':\n          setPrincipal(sanitizedValue);\n          break;\n        case 'monthlyContribution':\n          setMonthlyContribution(sanitizedValue);\n          break;\n        case 'rate':\n          setRate(sanitizedValue);\n          break;\n        case 'years':\n          setYears(sanitizedValue);\n          break;\n      }\n    } catch (error) {\n      setInputErrors(prev => ({ ...prev, [field]: error.message }));\n      onSecurityEvent?.('invalid_input', { field, value, error: error.message });\n    }\n  }, [securityContext, validateAndSanitizeInput, onSecurityEvent]);\n\n  const handleCalculate = useCallback(async () => {\n    try {\n      const calculationFunction = () => {\n        const result = calculateCompoundInterest(principal, rate, years, compoundFreq);\n        const chartData = compoundData;\n        setFutureValue(result);\n        setChartData(chartData);\n        return result;\n      };\n\n      if (securityContext) {\n        await calculationFunction();\n        securityContext.onCalculationSuccess();\n      } else {\n        await performSecureCalculation(calculationFunction);\n      }\n    } catch (error) {\n      if (securityContext) {\n        securityContext.onCalculationError(error);\n      }\n      setInputErrors(prev => ({ ...prev, calculation: error.message }));\n    }\n  }, [principal, rate, years, compoundFreq, monthlyContribution, securityContext, performSecureCalculation, compoundData]);\n\n  // Memoized currency formatter\n  const formatCurrency = useMemo(() => {\n    const formatter = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    });\n    return (value: number) => formatter.format(value);\n  }, []);\n\n  const totalContributions = principal + (monthlyContribution * 12 * years);\n  const totalInterest = futureValue ? futureValue - totalContributions : 0;\n\n  const frequencyOptions = [\n    { value: 1, label: 'Annually' },\n    { value: 4, label: 'Quarterly' },\n    { value: 12, label: 'Monthly' },\n    { value: 365, label: 'Daily' }\n  ];\n\n  const calculateResults = useCallback(() => {\n    if (!principal || !rate || !years) return [];\n    \n    const results = [];\n    const monthlyRate = rate / 100 / 12;\n    const months = years * 12;\n    \n    for (let month = 0; month <= months; month++) {\n      const compoundInterest = principal * Math.pow(1 + monthlyRate, month);\n      const contributionTotal = monthlyContribution * month;\n      const contributionInterest = monthlyContribution * \n        ((Math.pow(1 + monthlyRate, month) - 1) / monthlyRate);\n      \n      const totalValue = compoundInterest + contributionInterest;\n      \n      results.push({\n        month,\n        year: Math.floor(month / 12),\n        principalValue: principal,\n        contributionValue: contributionTotal,\n        interestEarned: totalValue - principal - contributionTotal,\n        totalValue: totalValue\n      });\n    }\n    \n    return results;\n  }, [principal, rate, years]);\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-8\">\n      <h1 className=\"text-3xl font-bold text-white mb-8\">Compound Interest Calculator</h1>\n      \n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Input Section */}\n        <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n          <h2 className=\"text-xl font-semibold text-white mb-6\">Investment Parameters</h2>\n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Initial Investment\n              </label>\n              <div className=\"relative\">\n                <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/60\">$</span>\n                <input\n                  type=\"number\"\n                  value={principal}\n                  onChange={(e) => handleSecureInput('principal', e.target.value, 'amount')}\n                  className={`w-full pl-8 pr-4 py-3 rounded-xl bg-white/5 text-white border transition-colors focus:outline-none ${\n                    inputErrors.principal ? 'border-red-400 focus:border-red-400' : 'border-white/10 focus:border-blue-400'\n                  }`}\n                  placeholder=\"10,000\"\n                />\n                {inputErrors.principal && (\n                  <Alert className=\"mt-2 border-red-200 bg-red-50\">\n                    <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                    <AlertDescription className=\"text-red-700\">{inputErrors.principal}</AlertDescription>\n                  </Alert>\n                )}\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Monthly Contribution\n              </label>\n              <div className=\"relative\">\n                <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/60\">$</span>\n                <input\n                  type=\"number\"\n                  value={monthlyContribution}\n                  onChange={(e) => handleSecureInput('monthlyContribution', e.target.value, 'amount')}\n                  className={`w-full pl-8 pr-4 py-3 rounded-xl bg-white/5 text-white border transition-colors focus:outline-none ${\n                    inputErrors.monthlyContribution ? 'border-red-400 focus:border-red-400' : 'border-white/10 focus:border-blue-400'\n                  }`}\n                  placeholder=\"200\"\n                />\n                {inputErrors.monthlyContribution && (\n                  <Alert className=\"mt-2 border-red-200 bg-red-50\">\n                    <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                    <AlertDescription className=\"text-red-700\">{inputErrors.monthlyContribution}</AlertDescription>\n                  </Alert>\n                )}\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Annual Interest Rate\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"number\"\n                  value={rate}\n                  onChange={(e) => handleSecureInput('rate', e.target.value, 'interestRate')}\n                  className={`w-full pr-8 pl-4 py-3 rounded-xl bg-white/5 text-white border transition-colors focus:outline-none ${\n                    inputErrors.rate ? 'border-red-400 focus:border-red-400' : 'border-white/10 focus:border-blue-400'\n                  }`}\n                  placeholder=\"7\"\n                  step=\"0.1\"\n                />\n                {inputErrors.rate && (\n                  <Alert className=\"mt-2 border-red-200 bg-red-50\">\n                    <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                    <AlertDescription className=\"text-red-700\">{inputErrors.rate}</AlertDescription>\n                  </Alert>\n                )}\n                <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-white/60\">%</span>\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Investment Period\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"number\"\n                  value={years}\n                  onChange={(e) => handleSecureInput('years', e.target.value, 'timePeriod')}\n                  className={`w-full pr-16 pl-4 py-3 rounded-xl bg-white/5 text-white border transition-colors focus:outline-none ${\n                    inputErrors.years ? 'border-red-400 focus:border-red-400' : 'border-white/10 focus:border-blue-400'\n                  }`}\n                  placeholder=\"10\"\n                />\n                {inputErrors.years && (\n                  <Alert className=\"mt-2 border-red-200 bg-red-50\">\n                    <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                    <AlertDescription className=\"text-red-700\">{inputErrors.years}</AlertDescription>\n                  </Alert>\n                )}\n                <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-white/60\">years</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Compounding Frequency\n              </label>\n              <select\n                value={compoundFreq}\n                onChange={(e) => setCompoundFreq(+e.target.value)}\n                className=\"w-full px-4 py-3 rounded-xl bg-white/5 text-white border border-white/10 focus:border-blue-400 focus:outline-none transition-colors\"\n              >\n                {frequencyOptions.map(option => (\n                  <option key={option.value} value={option.value} className=\"bg-gray-800\">\n                    {option.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n            \n            <button\n              onClick={handleCalculate}\n              className=\"w-full py-3 px-6 rounded-xl bg-white/10 hover:bg-white/20 border border-white/20 hover:border-white/30 text-white font-semibold transition-all duration-200\"\n            >\n              Calculate Growth\n            </button>\n\n            {inputErrors.calculation && (\n              <Alert className=\"mt-4 border-red-200 bg-red-50\">\n                <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                <AlertDescription className=\"text-red-700\">\n                  Calculation Error: {inputErrors.calculation}\n                </AlertDescription>\n              </Alert>\n            )}\n          </div>\n        </div>\n\n        {/* Results Section */}\n        {futureValue !== null && (\n          <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n            <h2 className=\"text-xl font-semibold text-white mb-6\">Results</h2>\n            <div className=\"space-y-4\">\n              <div className=\"text-center p-6 bg-white/5 rounded-2xl border border-white/20\">\n                <div className=\"text-3xl font-bold text-white mb-2\">{formatCurrency(futureValue)}</div>\n                <div className=\"text-white/80\">Future Value</div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n                  <div className=\"text-xl font-semibold text-white\">{formatCurrency(totalContributions)}</div>\n                  <div className=\"text-sm text-white/60\">Total Contributions</div>\n                </div>\n                <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n                  <div className=\"text-xl font-semibold text-white\">{formatCurrency(totalInterest)}</div>\n                  <div className=\"text-sm text-white/60\">Interest Earned</div>\n                </div>\n              </div>\n\n              <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n                <div className=\"text-lg font-semibold text-white\">\n                  {totalContributions > 0 ? ((totalInterest / totalContributions) * 100).toFixed(1) : 0}%\n                </div>\n                <div className=\"text-sm text-white/60\">Total Return</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Chart Section */}\n      {chartData.length > 0 && (\n        <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n          <h2 className=\"text-xl font-semibold text-white mb-6\">Growth Projection Over Time</h2>\n          <div className=\"h-96\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <AreaChart data={chartData}>\n                <defs>\n                  <linearGradient id=\"principalGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#3B82F6\" stopOpacity={0.3}/>\n                    <stop offset=\"95%\" stopColor=\"#3B82F6\" stopOpacity={0}/>\n                  </linearGradient>\n                  <linearGradient id=\"interestGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#10B981\" stopOpacity={0.3}/>\n                    <stop offset=\"95%\" stopColor=\"#10B981\" stopOpacity={0}/>\n                  </linearGradient>\n                </defs>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\n                <XAxis \n                  dataKey=\"year\" \n                  stroke=\"#fff\" \n                  fontSize={12}\n                  tickFormatter={(value) => `Year ${value}`}\n                />\n                <YAxis \n                  stroke=\"#fff\" \n                  fontSize={12}\n                  tickFormatter={(value) => formatCurrency(value)}\n                />\n                <Tooltip \n                  formatter={(value: number, name: string) => {\n                    const label = name === 'principal' ? 'Contributions' : \n                                  name === 'interest' ? 'Interest Earned' : 'Total Value';\n                    return [formatCurrency(value), label];\n                  }}\n                  labelFormatter={(value) => `Year ${value}`}\n                  contentStyle={{\n                    backgroundColor: 'rgba(0,0,0,0.8)',\n                    border: '1px solid rgba(255,255,255,0.2)',\n                    borderRadius: '12px',\n                    color: '#fff'\n                  }}\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"principal\"\n                  stackId=\"1\"\n                  stroke=\"#3B82F6\"\n                  fill=\"url(#principalGradient)\"\n                  strokeWidth={2}\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"interest\"\n                  stackId=\"1\"\n                  stroke=\"#10B981\"\n                  fill=\"url(#interestGradient)\"\n                  strokeWidth={2}\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </div>\n          <div className=\"flex justify-center space-x-8 mt-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n              <span className=\"text-white/80 text-sm\">Contributions</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n              <span className=\"text-white/80 text-sm\">Interest Earned</span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nCompoundInterestCalculator.displayName = 'CompoundInterestCalculator';\n\n// Wrapped component with security features\nconst SecureCompoundInterestCalculator = () => {\n  return (\n    <SecureCalculatorWrapper calculatorName=\"compound-interest\">\n      <CompoundInterestCalculator />\n    </SecureCalculatorWrapper>\n  );\n};\n\nexport default SecureCompoundInterestCalculator;\nexport { CompoundInterestCalculator }; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/calculators/ExchangeRateCalculator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/calculators/FinancialFreedomCalculator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/calculators/HomeAffordabilityCalculator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/calculators/InflationCalculator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/calculators/LoanCalculator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/calculators/MortgagePayoffCalculator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/calculators/ROICalculator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/calculators/Retirement401kCalculator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/calculators/SecureCalculatorWrapper.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An empty interface declaration allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowInterfaces' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":27,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterface","endLine":27,"endColumn":27,"suggestions":[{"messageId":"replaceEmptyInterface","data":{"replacement":"object"},"fix":{"range":[851,932],"text":"type ValidationResult = object"},"desc":"Replace empty interface with `object`."},{"messageId":"replaceEmptyInterface","data":{"replacement":"unknown"},"fix":{"range":[851,932],"text":"type ValidationResult = unknown"},"desc":"Replace empty interface with `unknown`."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":272,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":272,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":278,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9665,9668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9665,9668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":313,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":313,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10822,10825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10822,10825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SecureCalculatorWrapper - Secure wrapper for financial calculators\n * Implements input validation, rate limiting, and XSS protection\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Shield, AlertTriangle, Clock } from 'lucide-react';\nimport { security } from '@/utils/security';\nimport { VueniSecurityMonitoring } from '@/utils/monitoring';\n\ninterface SecureCalculatorWrapperProps {\n  calculatorName: string;\n  children: React.ReactNode;\n  onSecurityEvent?: (event: string, details: unknown) => void;\n}\n\ninterface SecurityState {\n  isRateLimited: boolean;\n  remainingRequests: number;\n  lastCalculation: Date | null;\n  securityLevel: 'normal' | 'elevated' | 'locked';\n  consecutiveErrors: number;\n}\n\ninterface ValidationResult {\n  // Define the structure of the validation result\n}\n\n/**\n * SecureCalculatorWrapper - Wraps financial calculators with security measures\n */\nexport function SecureCalculatorWrapper({ \n  calculatorName, \n  children, \n  onSecurityEvent \n}: SecureCalculatorWrapperProps) {\n  const [securityState, setSecurityState] = useState<SecurityState>({\n    isRateLimited: false,\n    remainingRequests: 100,\n    lastCalculation: null,\n    securityLevel: 'normal',\n    consecutiveErrors: 0\n  });\n\n  const [showSecurityInfo, setShowSecurityInfo] = useState(false);\n\n  // Check rate limits on component mount and at intervals\n  useEffect(() => {\n    const checkRateLimit = () => {\n      const isLimited = security.rateLimit.isRateLimited(`calculator:${calculatorName}`);\n      const remaining = security.rateLimit.getRemainingRequests(`calculator:${calculatorName}`);\n      \n      setSecurityState(prev => ({\n        ...prev,\n        isRateLimited: isLimited,\n        remainingRequests: remaining\n      }));\n\n      if (isLimited) {\n        VueniSecurityMonitoring.logEvent(\n          'RATE_LIMIT_EXCEEDED',\n          'medium',\n          `Rate limit exceeded for calculator: ${calculatorName}`,\n          { calculatorName, remainingRequests: remaining }\n        );\n\n        onSecurityEvent?.('rate_limit_exceeded', { calculatorName, remaining });\n      }\n    };\n\n    checkRateLimit();\n    const interval = setInterval(checkRateLimit, 60000); // Check every minute\n\n    return () => clearInterval(interval);\n  }, [calculatorName, onSecurityEvent]);\n\n  // Handle security violations\n  const handleSecurityViolation = (violationType: string, details: unknown) => {\n    setSecurityState(prev => {\n      const newConsecutiveErrors = prev.consecutiveErrors + 1;\n      let newSecurityLevel = prev.securityLevel;\n\n      // Escalate security level based on consecutive errors\n      if (newConsecutiveErrors >= 10) {\n        newSecurityLevel = 'locked';\n      } else if (newConsecutiveErrors >= 5) {\n        newSecurityLevel = 'elevated';\n      }\n\n      return {\n        ...prev,\n        consecutiveErrors: newConsecutiveErrors,\n        securityLevel: newSecurityLevel\n      };\n    });\n\n    VueniSecurityMonitoring.logEvent(\n      'INVALID_INPUT',\n      newSecurityLevel === 'locked' ? 'high' : 'medium',\n      `Security violation in ${calculatorName}: ${violationType}`,\n      { calculatorName, violationType, details }\n    );\n\n    onSecurityEvent?.('security_violation', { violationType, details });\n  };\n\n  // Reset security state on successful calculation\n  const handleSuccessfulCalculation = () => {\n    setSecurityState(prev => ({\n      ...prev,\n      lastCalculation: new Date(),\n      consecutiveErrors: Math.max(0, prev.consecutiveErrors - 1),\n      securityLevel: prev.consecutiveErrors <= 1 ? 'normal' : prev.securityLevel\n    }));\n  };\n\n  // Provide security context to child components\n  const securityContext = {\n    sanitize: security.sanitize,\n    validateInput: (type: string, value: unknown) => {\n      try {\n        switch (type) {\n          case 'amount':\n            return security.sanitize.sanitizeFinancialAmount(value);\n          case 'percentage':\n            return security.sanitize.sanitizePercentage(value);\n          case 'interestRate':\n            return security.sanitize.sanitizeInterestRate(value);\n          case 'year':\n            return security.sanitize.sanitizeYear(value);\n          case 'timePeriod':\n            return security.sanitize.sanitizeTimePeriod(value);\n          case 'text':\n            return security.sanitize.sanitizeText(value);\n          default:\n            return value;\n        }\n      } catch (error) {\n        handleSecurityViolation('invalid_input', { type, value, error: error.message });\n        throw error;\n      }\n    },\n    onCalculationSuccess: handleSuccessfulCalculation,\n    onCalculationError: (error: Error) => {\n      handleSecurityViolation('calculation_error', { error: error.message });\n    },\n    securityLevel: securityState.securityLevel\n  };\n\n  // Render security locked state\n  if (securityState.securityLevel === 'locked') {\n    return (\n      <div className=\"p-6 bg-red-50 border border-red-200 rounded-lg\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <Shield className=\"h-6 w-6 text-red-600\" />\n          <h3 className=\"text-lg font-semibold text-red-800\">Calculator Temporarily Locked</h3>\n        </div>\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription className=\"text-red-700\">\n            This calculator has been temporarily locked due to multiple security violations. \n            Please refresh the page to reset the security status.\n          </AlertDescription>\n        </Alert>\n        <Button \n          onClick={() => window.location.reload()} \n          className=\"mt-4 bg-red-600 hover:bg-red-700\"\n        >\n          Refresh Page\n        </Button>\n      </div>\n    );\n  }\n\n  // Render rate limited state\n  if (securityState.isRateLimited) {\n    return (\n      <div className=\"p-6 bg-yellow-50 border border-yellow-200 rounded-lg\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <Clock className=\"h-6 w-6 text-yellow-600\" />\n          <h3 className=\"text-lg font-semibold text-yellow-800\">Rate Limit Reached</h3>\n        </div>\n        <Alert className=\"border-yellow-200 bg-yellow-50\">\n          <Clock className=\"h-4 w-4\" />\n          <AlertDescription className=\"text-yellow-700\">\n            You've reached the maximum number of calculations for this hour. \n            Please wait a moment before trying again.\n          </AlertDescription>\n        </Alert>\n        <div className=\"mt-4 text-sm text-yellow-700\">\n          <p>Remaining requests: {securityState.remainingRequests}</p>\n          <p>Calculator: {calculatorName}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative\">\n      {/* Security Level Indicator */}\n      {securityState.securityLevel !== 'normal' && (\n        <div className=\"mb-4 p-3 bg-orange-50 border border-orange-200 rounded-lg\">\n          <div className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n            <span className=\"text-sm font-medium text-orange-800\">\n              Elevated Security Mode\n            </span>\n          </div>\n          <p className=\"text-sm text-orange-700 mt-1\">\n            Input validation has been strengthened due to recent security events.\n          </p>\n        </div>\n      )}\n\n      {/* Security Info Toggle */}\n      <div className=\"absolute top-2 right-2 z-10\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setShowSecurityInfo(!showSecurityInfo)}\n          className=\"h-8 w-8 p-0\"\n        >\n          <Shield className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Security Information Panel */}\n      {showSecurityInfo && (\n        <div className=\"mb-4 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n          <h4 className=\"font-semibold text-blue-800 mb-2\">Security Information</h4>\n          <div className=\"text-sm text-blue-700 space-y-1\">\n            <p>Calculator: {calculatorName}</p>\n            <p>Remaining calculations: {securityState.remainingRequests}</p>\n            <p>Security level: {securityState.securityLevel}</p>\n            <p>Last calculation: {securityState.lastCalculation?.toLocaleTimeString() || 'None'}</p>\n            <p>All inputs are sanitized and validated for security</p>\n            <p>Financial data is encrypted and stored securely</p>\n          </div>\n        </div>\n      )}\n\n      {/* Calculator Content with Security Context */}\n      <div className=\"calculator-content\">\n        {React.cloneElement(children as React.ReactElement, { \n          securityContext,\n          onSecurityEvent: handleSecurityViolation\n        })}\n      </div>\n\n      {/* Security Footer */}\n      <div className=\"mt-6 pt-4 border-t border-gray-200\">\n        <div className=\"flex items-center justify-between text-xs text-gray-500\">\n          <div className=\"flex items-center gap-2\">\n            <Shield className=\"h-3 w-3\" />\n            <span>Secured by Vueni Financial Security</span>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <span>Calculations: {100 - securityState.remainingRequests}/100</span>\n            <span>Security: {securityState.securityLevel}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Hook for secure calculator input handling\n */\nexport function useSecureCalculator(calculatorName: string) {\n  const [securityState, setSecurityState] = useState({\n    isRateLimited: false,\n    remainingRequests: 100\n  });\n\n  const validateAndSanitizeInput = (type: string, value: any) => {\n    // Check rate limit before processing\n    if (security.rateLimit.isRateLimited(`calculator:${calculatorName}`)) {\n      setSecurityState(prev => ({ ...prev, isRateLimited: true }));\n      throw new Error('Rate limit exceeded');\n    }\n\n    try {\n      switch (type) {\n        case 'amount':\n          return security.sanitize.sanitizeFinancialAmount(value);\n        case 'percentage':\n          return security.sanitize.sanitizePercentage(value);\n        case 'interestRate':\n          return security.sanitize.sanitizeInterestRate(value);\n        case 'year':\n          return security.sanitize.sanitizeYear(value);\n        case 'timePeriod':\n          return security.sanitize.sanitizeTimePeriod(value);\n        case 'text':\n          return security.sanitize.sanitizeText(value);\n        default:\n          return value;\n      }\n    } catch (error) {\n      VueniSecurityMonitoring.logEvent(\n        'INVALID_INPUT',\n        'medium',\n        `Invalid input in ${calculatorName}: ${error.message}`,\n        { calculatorName, type, value }\n      );\n      throw error;\n    }\n  };\n\n  const performSecureCalculation = async (calculationFn: () => any) => {\n    try {\n      // Update remaining requests\n      const remaining = security.rateLimit.getRemainingRequests(`calculator:${calculatorName}`);\n      setSecurityState(prev => ({ ...prev, remainingRequests: remaining }));\n\n      const result = await calculationFn();\n      \n      VueniSecurityMonitoring.logEvent(\n        'FINANCIAL_CALCULATION_SUCCESS',\n        'low',\n        `Successful calculation in ${calculatorName}`,\n        { calculatorName }\n      );\n\n      return result;\n    } catch (error) {\n      VueniSecurityMonitoring.logEvent(\n        'FINANCIAL_CALCULATION_ERROR',\n        'medium',\n        `Calculation error in ${calculatorName}: ${error.message}`,\n        { calculatorName, error: error.message }\n      );\n      throw error;\n    }\n  };\n\n  return {\n    validateAndSanitizeInput,\n    performSecureCalculation,\n    securityState,\n    isRateLimited: securityState.isRateLimited,\n    remainingRequests: securityState.remainingRequests\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/calculators/StockBacktestCalculator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/calculators/ThreeFundPortfolioCalculator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/credit/CreditEducation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/credit/CreditFactors.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/credit/CreditScoreCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/credit/CreditScorePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/credit/CreditTips.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/credit/ScoreHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/dashboard/FinancialDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboardData'. Either include it or remove the dependency array.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [familyId, loadDashboardData]","fix":{"range":[1098,1108],"text":"[familyId, loadDashboardData]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1930,1933],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1930,1933],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":344,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11700,11703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11700,11703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  Target,\n  PieChart,\n  BarChart3,\n  Activity,\n  AlertCircle,\n  Zap,\n  Shield,\n  CreditCard,\n  Calendar,\n  ArrowUp,\n  ArrowDown,\n  Minus\n} from 'lucide-react';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart as RechartsPieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ComposedChart\n} from 'recharts';\nimport { visualizationService, DashboardData, FinancialMetric } from '@/services/visualizationService';\nimport { cn } from '@/lib/utils';\n\ninterface FinancialDashboardProps {\n  familyId: string;\n  className?: string;\n}\n\nconst FinancialDashboard = ({ familyId, className }: FinancialDashboardProps) => {\n  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedChart, setSelectedChart] = useState<'networth' | 'cashflow' | 'spending' | 'portfolio'>('networth');\n\n  useEffect(() => {\n    loadDashboardData();\n  }, [familyId]);\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true);\n      const data = await visualizationService.getDashboardData(familyId);\n      setDashboardData(data);\n    } catch (error) {\n      console.error('Failed to load dashboard data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n\n  const formatPercentage = (value: number) => {\n    return `${value >= 0 ? '+' : ''}${value.toFixed(1)}%`;\n  };\n\n  const formatNumber = (value: number) => {\n    return value.toFixed(1);\n  };\n\n  const getMetricIcon = (iconName: string) => {\n    const icons: Record<string, any> = {\n      'trending-up': TrendingUp,\n      'piggy-bank': Target,\n      'target': Target,\n      'credit-card': CreditCard,\n      'shield': Shield\n    };\n    const Icon = icons[iconName] || Activity;\n    return <Icon className=\"w-5 h-5\" />;\n  };\n\n  const getTrendIcon = (trend: string, changePercent: number) => {\n    if (Math.abs(changePercent) < 1) {\n      return <Minus className=\"w-4 h-4 text-gray-400\" />;\n    }\n    if (trend === 'up' || changePercent > 0) {\n      return <ArrowUp className=\"w-4 h-4 text-green-400\" />;\n    }\n    return <ArrowDown className=\"w-4 h-4 text-red-400\" />;\n  };\n\n  const getTrendColor = (trend: string, changePercent: number) => {\n    if (Math.abs(changePercent) < 1) return 'text-gray-400';\n    if (trend === 'up' || changePercent > 0) return 'text-green-400';\n    return 'text-red-400';\n  };\n\n  if (loading) {\n    return (\n      <div className={cn(\"space-y-6\", className)}>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 animate-pulse\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"h-6 bg-white/[0.05] rounded w-32\"></div>\n                <div className=\"h-6 bg-white/[0.05] rounded w-6\"></div>\n              </div>\n              <div className=\"h-8 bg-white/[0.05] rounded w-24 mb-2\"></div>\n              <div className=\"h-4 bg-white/[0.05] rounded w-20\"></div>\n            </div>\n          ))}\n        </div>\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 animate-pulse\">\n          <div className=\"h-64 bg-white/[0.05] rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!dashboardData) {\n    return (\n      <div className={cn(\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-12 text-center\", className)}>\n        <Activity className=\"w-16 h-16 text-white/20 mx-auto mb-4\" />\n        <h3 className=\"text-xl font-bold text-white mb-2\">No Dashboard Data</h3>\n        <p className=\"text-white/60\">Unable to load financial dashboard. Please try again.</p>\n      </div>\n    );\n  }\n\n  const renderNetWorthChart = () => (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <AreaChart data={dashboardData.netWorthHistory}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n        <XAxis \n          dataKey=\"date\" \n          stroke=\"#9ca3af\"\n          tick={{ fontSize: 12 }}\n          tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short' })}\n        />\n        <YAxis \n          stroke=\"#9ca3af\"\n          tick={{ fontSize: 12 }}\n          tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n        />\n        <Tooltip \n          formatter={(value: number) => [formatCurrency(value), '']}\n          labelFormatter={(label) => new Date(label).toLocaleDateString()}\n          contentStyle={{ \n            backgroundColor: '#1f2937', \n            border: '1px solid #374151',\n            borderRadius: '8px',\n            color: '#fff'\n          }}\n        />\n        <Area\n          type=\"monotone\"\n          dataKey=\"netWorth\"\n          stroke=\"#3b82f6\"\n          fill=\"#3b82f6\"\n          fillOpacity={0.1}\n          strokeWidth={2}\n        />\n        <Area\n          type=\"monotone\"\n          dataKey=\"investmentValue\"\n          stroke=\"#10b981\"\n          fill=\"#10b981\"\n          fillOpacity={0.1}\n          strokeWidth={2}\n        />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n\n  const renderCashFlowChart = () => (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <ComposedChart data={dashboardData.cashFlowHistory}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n        <XAxis \n          dataKey=\"date\" \n          stroke=\"#9ca3af\"\n          tick={{ fontSize: 12 }}\n          tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short' })}\n        />\n        <YAxis \n          stroke=\"#9ca3af\"\n          tick={{ fontSize: 12 }}\n          tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n        />\n        <Tooltip \n          formatter={(value: number) => [formatCurrency(value), '']}\n          labelFormatter={(label) => new Date(label).toLocaleDateString()}\n          contentStyle={{ \n            backgroundColor: '#1f2937', \n            border: '1px solid #374151',\n            borderRadius: '8px',\n            color: '#fff'\n          }}\n        />\n        <Bar dataKey=\"income\" fill=\"#10b981\" name=\"Income\" />\n        <Bar dataKey=\"expenses\" fill=\"#ef4444\" name=\"Expenses\" />\n        <Line\n          type=\"monotone\"\n          dataKey=\"netCashFlow\"\n          stroke=\"#f59e0b\"\n          strokeWidth={3}\n          name=\"Net Cash Flow\"\n        />\n      </ComposedChart>\n    </ResponsiveContainer>\n  );\n\n  const renderSpendingChart = () => (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <BarChart data={dashboardData.spendingTrends.slice(0, 8)} layout=\"horizontal\">\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n        <XAxis \n          type=\"number\"\n          stroke=\"#9ca3af\"\n          tick={{ fontSize: 12 }}\n          tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n        />\n        <YAxis \n          type=\"category\"\n          dataKey=\"category\"\n          stroke=\"#9ca3af\"\n          tick={{ fontSize: 12 }}\n          width={100}\n          tickFormatter={(value) => value.replace('_', ' ').substring(0, 10)}\n        />\n        <Tooltip \n          formatter={(value: number) => [formatCurrency(value), '']}\n          contentStyle={{ \n            backgroundColor: '#1f2937', \n            border: '1px solid #374151',\n            borderRadius: '8px',\n            color: '#fff'\n          }}\n        />\n        <Bar dataKey=\"currentMonth\" fill=\"#3b82f6\" name=\"This Month\" />\n        <Bar dataKey=\"previousMonth\" fill=\"#6b7280\" name=\"Last Month\" />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n\n  const renderPortfolioChart = () => (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <RechartsPieChart>\n        <Pie\n          data={dashboardData.portfolioAllocation}\n          cx=\"50%\"\n          cy=\"50%\"\n          innerRadius={60}\n          outerRadius={120}\n          paddingAngle={2}\n          dataKey=\"value\"\n        >\n          {dashboardData.portfolioAllocation.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={entry.color} />\n          ))}\n        </Pie>\n        <Tooltip \n          formatter={(value: number) => [formatCurrency(value), '']}\n          contentStyle={{ \n            backgroundColor: '#1f2937', \n            border: '1px solid #374151',\n            borderRadius: '8px',\n            color: '#fff'\n          }}\n        />\n        <Legend \n          wrapperStyle={{ color: '#fff' }}\n          formatter={(value, entry) => `${value} (${entry.payload?.percentage.toFixed(1)}%)`}\n        />\n      </RechartsPieChart>\n    </ResponsiveContainer>\n  );\n\n  return (\n    <div className={cn(\"space-y-8\", className)}>\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {dashboardData.keyMetrics.map((metric) => (\n          <div key={metric.id} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 hover:bg-white/[0.03] transition-all duration-300\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 rounded-xl bg-white/[0.05] flex items-center justify-center\" style={{ color: metric.color }}>\n                  {getMetricIcon(metric.icon)}\n                </div>\n                <h3 className=\"font-medium text-white/80\">{metric.label}</h3>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                {getTrendIcon(metric.trend, metric.changePercent)}\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <p className=\"text-2xl font-bold text-white\">\n                {metric.format === 'currency' && formatCurrency(metric.value)}\n                {metric.format === 'percentage' && formatPercentage(metric.value)}\n                {metric.format === 'number' && `${formatNumber(metric.value)} months`}\n              </p>\n              <div className=\"flex items-center gap-2 text-sm\">\n                <span className={getTrendColor(metric.trend, metric.changePercent)}>\n                  {metric.format === 'currency' && formatCurrency(metric.change)}\n                  {metric.format === 'percentage' && formatPercentage(metric.changePercent)}\n                  {metric.format === 'number' && formatPercentage(metric.changePercent)}\n                </span>\n                <span className=\"text-white/60\">vs last month</span>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Main Chart */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-bold text-white\">Financial Overview</h2>\n          \n          {/* Chart Selector */}\n          <div className=\"flex items-center gap-1 bg-white/[0.02] rounded-xl p-1 border border-white/[0.08]\">\n            {[\n              { id: 'networth', label: 'Net Worth', icon: TrendingUp },\n              { id: 'cashflow', label: 'Cash Flow', icon: BarChart3 },\n              { id: 'spending', label: 'Spending', icon: DollarSign },\n              { id: 'portfolio', label: 'Portfolio', icon: PieChart }\n            ].map(({ id, label, icon: Icon }) => (\n              <button\n                key={id}\n                onClick={() => setSelectedChart(id as any)}\n                className={cn(\n                  \"flex items-center gap-2 px-3 py-2 rounded-lg transition-all text-sm\",\n                  selectedChart === id\n                    ? \"bg-blue-500 text-white\"\n                    : \"text-white/60 hover:text-white hover:bg-white/[0.05]\"\n                )}\n              >\n                <Icon className=\"w-4 h-4\" />\n                {label}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"h-80\">\n          {selectedChart === 'networth' && renderNetWorthChart()}\n          {selectedChart === 'cashflow' && renderCashFlowChart()}\n          {selectedChart === 'spending' && renderSpendingChart()}\n          {selectedChart === 'portfolio' && renderPortfolioChart()}\n        </div>\n      </div>\n\n      {/* Budget Performance */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n        <h2 className=\"text-xl font-bold text-white mb-6 flex items-center gap-3\">\n          <Target className=\"w-6 h-6 text-blue-400\" />\n          Budget Performance\n        </h2>\n        \n        <div className=\"space-y-4\">\n          {dashboardData.budgetPerformance.slice(0, 6).map((budget, index) => (\n            <div key={index} className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                <div className=\"w-8 h-8 rounded-lg flex items-center justify-center\" style={{ backgroundColor: `${budget.color}20`, color: budget.color }}>\n                  <Target className=\"w-4 h-4\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"font-medium text-white capitalize truncate\">{budget.category.replace('_', ' ')}</p>\n                  <div className=\"flex items-center gap-3 mt-1\">\n                    <div className=\"flex-1 bg-white/[0.05] rounded-full h-2\">\n                      <div \n                        className=\"h-2 rounded-full transition-all duration-300\"\n                        style={{ \n                          width: `${Math.min(budget.progress, 100)}%`,\n                          backgroundColor: budget.color\n                        }}\n                      ></div>\n                    </div>\n                    <span className={cn(\n                      \"text-xs px-2 py-1 rounded-lg border font-medium\",\n                      budget.status === 'over-budget' ? 'bg-red-500/20 text-red-400 border-red-500/30' :\n                      budget.status === 'warning' ? 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30' :\n                      'bg-green-500/20 text-green-400 border-green-500/30'\n                    )}>\n                      {budget.progress.toFixed(0)}%\n                    </span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"text-right\">\n                <p className=\"font-bold text-white\">{formatCurrency(budget.spent)}</p>\n                <p className=\"text-white/60 text-sm\">of {formatCurrency(budget.budgeted)}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Portfolio Allocation Details */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n        <h2 className=\"text-xl font-bold text-white mb-6 flex items-center gap-3\">\n          <PieChart className=\"w-6 h-6 text-purple-400\" />\n          Portfolio Allocation\n        </h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {dashboardData.portfolioAllocation.map((allocation, index) => (\n            <div key={index} className=\"bg-white/[0.03] rounded-xl p-4 border border-white/[0.05]\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-4 h-4 rounded-full\" style={{ backgroundColor: allocation.color }}></div>\n                  <span className=\"font-medium text-white\">{allocation.name}</span>\n                </div>\n                <span className=\"text-white/60 text-sm\">{allocation.percentage.toFixed(1)}%</span>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <p className=\"text-lg font-bold text-white\">{formatCurrency(allocation.value)}</p>\n                {allocation.change !== undefined && (\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    {getTrendIcon(allocation.changePercent! >= 0 ? 'up' : 'down', allocation.changePercent!)}\n                    <span className={getTrendColor(allocation.changePercent! >= 0 ? 'up' : 'down', allocation.changePercent!)}>\n                      {formatCurrency(allocation.change)} ({formatPercentage(allocation.changePercent!)})\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FinancialDashboard;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/examples/EnhancedEcoScore.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/family/FamilyManagement.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadFamilyData'. Either include it or remove the dependency array.","line":34,"column":6,"nodeType":"ArrayExpression","endLine":34,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [familyId, loadFamilyData]","fix":{"range":[983,993],"text":"[familyId, loadFamilyData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Users, \n  Settings, \n  Plus, \n  Crown, \n  Shield, \n  Eye, \n  Mail,\n  Check,\n  X,\n  Edit3\n} from 'lucide-react';\nimport { Family, FamilyMember, FamilyInvitation } from '@/types/family';\nimport { familyService } from '@/services/familyService';\nimport { Switch } from '@/components/ui/switch';\nimport { cn } from '@/lib/utils';\n\ninterface FamilyManagementProps {\n  familyId: string;\n  currentUserId: string;\n}\n\nconst FamilyManagement = ({ familyId, currentUserId }: FamilyManagementProps) => {\n  const [family, setFamily] = useState<Family | null>(null);\n  const [members, setMembers] = useState<FamilyMember[]>([]);\n  const [invitations, setInvitations] = useState<FamilyInvitation[]>([]);\n  const [showInviteModal, setShowInviteModal] = useState(false);\n  const [showSettingsModal, setShowSettingsModal] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadFamilyData();\n  }, [familyId]);\n\n  const loadFamilyData = async () => {\n    try {\n      const [familyData, membersData] = await Promise.all([\n        familyService.getFamilyById(familyId),\n        familyService.getFamilyMembers(familyId)\n      ]);\n\n      setFamily(familyData);\n      setMembers(membersData);\n    } catch (error) {\n      console.error('Failed to load family data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getRoleIcon = (role: FamilyMember['role']) => {\n    switch (role) {\n      case 'owner':\n        return <Crown className=\"w-4 h-4 text-yellow-500\" />;\n      case 'admin':\n        return <Shield className=\"w-4 h-4 text-blue-500\" />;\n      case 'member':\n        return <Users className=\"w-4 h-4 text-green-500\" />;\n      case 'viewer':\n        return <Eye className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  const getRoleColor = (role: FamilyMember['role']) => {\n    switch (role) {\n      case 'owner':\n        return 'text-yellow-500 bg-yellow-500/10 border-yellow-500/20';\n      case 'admin':\n        return 'text-blue-500 bg-blue-500/10 border-blue-500/20';\n      case 'member':\n        return 'text-green-500 bg-green-500/10 border-green-500/20';\n      case 'viewer':\n        return 'text-gray-500 bg-gray-500/10 border-gray-500/20';\n    }\n  };\n\n  const currentMember = members.find(m => m.userId === currentUserId);\n  const canManageFamily = currentMember?.role === 'owner' || currentMember?.role === 'admin';\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-black text-white\">\n        <div className=\"max-w-4xl mx-auto px-4 py-8\">\n          <div className=\"space-y-6 animate-pulse\">\n            <div className=\"h-8 bg-white/[0.05] rounded w-64\"></div>\n            <div className=\"h-32 bg-white/[0.02] rounded-xl border border-white/[0.08]\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!family) {\n    return (\n      <div className=\"min-h-screen bg-black text-white flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-red-400 mb-2\">Family Not Found</h2>\n          <p className=\"text-white/60\">The requested family could not be found.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <div className=\"max-w-4xl mx-auto px-4 py-8 space-y-8\">\n        {/* Family Header */}\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-white flex items-center gap-3\">\n                <Users className=\"w-8 h-8 text-blue-400\" />\n                {family.name}\n              </h1>\n              <p className=\"text-white/70 mt-2\">\n                {members.length} member{members.length !== 1 ? 's' : ''} • Created {family.createdAt.toLocaleDateString()}\n              </p>\n            </div>\n            \n            {canManageFamily && (\n              <div className=\"flex items-center gap-3\">\n                <button\n                  onClick={() => setShowInviteModal(true)}\n                  className=\"liquid-glass-button px-4 py-2 rounded-xl text-white/90 hover:text-white transition-all flex items-center gap-2\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                  Invite Member\n                </button>\n                \n                <button\n                  onClick={() => setShowSettingsModal(true)}\n                  className=\"liquid-glass-button p-2 rounded-xl text-white/90 hover:text-white transition-all\"\n                >\n                  <Settings className=\"w-5 h-5\" />\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Family Members */}\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <h2 className=\"text-xl font-bold text-white mb-6 flex items-center gap-3\">\n            <Users className=\"w-6 h-6 text-blue-400\" />\n            Family Members\n          </h2>\n\n          <div className=\"space-y-4\">\n            {members.map((member) => (\n              <div\n                key={member.id}\n                className=\"bg-white/[0.03] rounded-xl p-4 border border-white/[0.05] hover:bg-white/[0.04] transition-colors\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 rounded-full bg-blue-500/20 flex items-center justify-center\">\n                      <span className=\"text-blue-400 font-semibold text-lg\">\n                        {member.userId.charAt(0).toUpperCase()}\n                      </span>\n                    </div>\n                    \n                    <div>\n                      <div className=\"flex items-center gap-3\">\n                        <h3 className=\"font-semibold text-white\">\n                          User {member.userId}\n                        </h3>\n                        <div className={cn(\n                          \"flex items-center gap-1 px-2 py-1 rounded-lg border text-xs font-medium\",\n                          getRoleColor(member.role)\n                        )}>\n                          {getRoleIcon(member.role)}\n                          {member.role.charAt(0).toUpperCase() + member.role.slice(1)}\n                        </div>\n                      </div>\n                      <p className=\"text-white/60 text-sm mt-1\">\n                        Joined {member.joinedAt.toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n\n                  {canManageFamily && member.role !== 'owner' && (\n                    <button className=\"liquid-glass-button p-2 rounded-lg text-white/70 hover:text-white transition-colors\">\n                      <Edit3 className=\"w-4 h-4\" />\n                    </button>\n                  )}\n                </div>\n\n                {/* Member Permissions */}\n                <div className=\"mt-4 pt-4 border-t border-white/[0.05]\">\n                  <h4 className=\"text-sm font-medium text-white/80 mb-3\">Permissions</h4>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                    {Object.entries(member.permissions).map(([permission, granted]) => (\n                      <div key={permission} className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-white/60 capitalize\">\n                          {permission.replace('can', '').replace(/([A-Z])/g, ' $1').trim()}\n                        </span>\n                        <div className={cn(\n                          \"w-2 h-2 rounded-full\",\n                          granted ? \"bg-green-400\" : \"bg-gray-600\"\n                        )} />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Pending Invitations */}\n        {invitations.length > 0 && (\n          <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n            <h2 className=\"text-xl font-bold text-white mb-6 flex items-center gap-3\">\n              <Mail className=\"w-6 h-6 text-orange-400\" />\n              Pending Invitations\n            </h2>\n\n            <div className=\"space-y-3\">\n              {invitations.map((invitation) => (\n                <div\n                  key={invitation.id}\n                  className=\"bg-white/[0.03] rounded-xl p-4 border border-white/[0.05] flex items-center justify-between\"\n                >\n                  <div>\n                    <p className=\"font-medium text-white\">{invitation.email}</p>\n                    <p className=\"text-white/60 text-sm\">\n                      Invited as {invitation.role} • Expires {invitation.expiresAt.toLocaleDateString()}\n                    </p>\n                  </div>\n                  \n                  {canManageFamily && (\n                    <div className=\"flex items-center gap-2\">\n                      <button className=\"p-2 rounded-lg bg-red-500/20 text-red-400 hover:bg-red-500/30 transition-colors\">\n                        <X className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Family Settings */}\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <h2 className=\"text-xl font-bold text-white mb-6 flex items-center gap-3\">\n            <Settings className=\"w-6 h-6 text-blue-400\" />\n            Family Settings\n          </h2>\n\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h3 className=\"font-medium text-white mb-2\">Currency</h3>\n                <p className=\"text-white/60\">{family.settings.currency}</p>\n              </div>\n              \n              <div>\n                <h3 className=\"font-medium text-white mb-2\">Budget Period</h3>\n                <p className=\"text-white/60 capitalize\">{family.settings.budgetPeriod}</p>\n              </div>\n              \n              <div>\n                <h3 className=\"font-medium text-white mb-2\">Risk Tolerance</h3>\n                <p className=\"text-white/60 capitalize\">{family.settings.riskTolerance}</p>\n              </div>\n              \n              <div>\n                <h3 className=\"font-medium text-white mb-2\">Investment Style</h3>\n                <p className=\"text-white/60 capitalize\">{family.settings.investmentStyle}</p>\n              </div>\n            </div>\n\n            <div className=\"pt-6 border-t border-white/[0.05]\">\n              <h3 className=\"font-medium text-white mb-4\">Notification Preferences</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {Object.entries(family.settings.notifications).map(([key, value]) => (\n                  key !== 'emailDigest' && (\n                    <div key={key} className=\"flex items-center justify-between\">\n                      <span className=\"text-white/80 capitalize\">\n                        {key.replace(/([A-Z])/g, ' $1').trim()}\n                      </span>\n                      <Switch\n                        checked={value as boolean}\n                        disabled={!canManageFamily}\n                        className=\"data-[state=checked]:bg-blue-500\"\n                      />\n                    </div>\n                  )\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FamilyManagement;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/financial/CleanAccountCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/financial/CleanCreditScoreCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/financial/NetWorthSummary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/BaseInsightsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/CategoryTrendsChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/ConfigurableInsightsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":199,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5886,5889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5886,5889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6424,6427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6424,6427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":232,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6810,6813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6810,6813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":666,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":666,"endColumn":29}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, Suspense, lazy, useCallback } from 'react';\nimport { Heart, Leaf, DollarSign, TrendingUp, TrendingDown, Calendar, BarChart3, Settings, Filter, Eye, EyeOff, Download, Zap, Target, Activity, Shield, PiggyBank, ChevronRight } from 'lucide-react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { cn } from '@/lib/utils';\nimport { SharedScoreCircle, ScoreGroup } from '../shared/SharedScoreCircle';\nimport { formatPercentage, getScoreColor } from '@/utils/formatters';\nimport { UniversalCard } from '../ui/UniversalCard';\nimport { UniversalMetricCard } from './UniversalMetricCard';\nimport { UniversalScoreCard } from './UniversalScoreCard';\n\n// Lazy load heavy components for performance\nconst TimeSeriesChart = lazy(() => import('@/components/insights/TimeSeriesChart'));\nconst SpendingTrendsChart = lazy(() => import('@/components/insights/SpendingTrendsChart'));\nconst CategoryTrendsChart = lazy(() => import('@/components/insights/CategoryTrendsChart'));\nconst FinancialCard = lazy(() => import('@/components/insights/FinancialCard'));\nconst WellnessCard = lazy(() => import('@/components/insights/WellnessCard'));\nconst EcoCard = lazy(() => import('@/components/insights/EcoCard'));\nconst AnimatedCircularProgress = lazy(() => import('@/components/insights/components/AnimatedCircularProgress'));\n\n// Configurable Insights Page that consolidates:\n// - VueniUnifiedInsightsPage.tsx\n// - ConfigurableInsightsPage.tsx (old)\n// - NewInsightsPage.tsx\n// - SimpleInsightsPage.tsx\n// - RefinedInsightsPage.tsx\n// - OptimizedRefinedInsightsPage.tsx\n\nexport interface Transaction {\n  id: string;\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n}\n\nexport interface Account {\n  id: string;\n  type: string;\n  nickname: string;\n  balance: number;\n  availableBalance: number;\n  currency: string;\n}\n\nexport type InsightsVariant = 'standard' | 'refined' | 'enhanced' | 'optimized' | 'comprehensive' | 'mobile' | 'dashboard';\nexport type ViewMode = 'overview' | 'trends' | 'financial' | 'health' | 'eco' | 'detailed';\n\ninterface LayoutConfig {\n  showHeader: boolean;\n  showTabs: boolean;\n  showScoreCards: boolean;\n  showCharts: boolean;\n  showDetailedCards: boolean;\n  showMetrics: boolean;\n  compactMode: boolean;\n  animationsEnabled: boolean;\n  autoRefresh: boolean;\n  refreshInterval: number;\n  showSettings: boolean;\n  enableExport: boolean;\n  enableFilters: boolean;\n}\n\nconst variantLayouts: Record<InsightsVariant, LayoutConfig> = {\n  standard: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: false,\n    refreshInterval: 30000,\n    showSettings: false,\n    enableExport: false,\n    enableFilters: false,\n  },\n  refined: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: true,\n    animationsEnabled: true,\n    autoRefresh: false,\n    refreshInterval: 30000,\n    showSettings: true,\n    enableExport: true,\n    enableFilters: true,\n  },\n  enhanced: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n    refreshInterval: 30000,\n    showSettings: true,\n    enableExport: true,\n    enableFilters: true,\n  },\n  optimized: {\n    showHeader: false,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: false,\n    showDetailedCards: false,\n    showMetrics: true,\n    compactMode: true,\n    animationsEnabled: false,\n    autoRefresh: false,\n    refreshInterval: 60000,\n    showSettings: false,\n    enableExport: false,\n    enableFilters: false,\n  },\n  comprehensive: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n    refreshInterval: 15000,\n    showSettings: true,\n    enableExport: true,\n    enableFilters: true,\n  },\n  mobile: {\n    showHeader: false,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: false,\n    showDetailedCards: true,\n    showMetrics: false,\n    compactMode: true,\n    animationsEnabled: true,\n    autoRefresh: false,\n    refreshInterval: 60000,\n    showSettings: false,\n    enableExport: false,\n    enableFilters: false,\n  },\n  dashboard: {\n    showHeader: true,\n    showTabs: false,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: false,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n    refreshInterval: 10000,\n    showSettings: false,\n    enableExport: true,\n    enableFilters: false,\n  },\n};\n\nexport interface ConfigurableInsightsPageProps {\n  transactions: Transaction[];\n  accounts: Account[];\n  variant?: InsightsVariant;\n  customLayout?: Partial<LayoutConfig>;\n  className?: string;\n  onExportData?: () => void;\n  defaultTab?: ViewMode;\n  enableFeatureFlags?: boolean;\n}\n\nconst LoadingSpinner = () => (\n  <div className=\"flex items-center justify-center py-12\">\n    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white/50\"></div>\n  </div>\n);\n\n// Enhanced Score Card Component\nconst EnhancedScoreDisplay = ({ scores, layout, animationsEnabled }: any) => {\n  if (layout.compactMode) {\n    return (\n      <div className=\"flex justify-center gap-6\">\n        <ScoreGroup \n          scores={scores}\n          size=\"md\"\n          showLabels={true}\n          animated={animationsEnabled}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6\">\n      {Object.entries(scores).map(([type, score]) => (\n        <div key={type} className=\"text-center\">\n          <SharedScoreCircle \n            score={score as number}\n            type={type as any}\n            size=\"lg\"\n            label={type === 'health' ? 'Wellness Score' : type === 'eco' ? 'Eco Impact' : 'Financial Health'}\n            showLabel={true}\n            animated={animationsEnabled}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Quick Metrics Component using Universal Cards\nconst QuickMetrics = ({ financialData, wellnessData, ecoData, layout }: any) => {\n  const metrics = [\n    {\n      icon: DollarSign,\n      label: 'Monthly Spending',\n      value: `$${financialData.monthlySpending.toLocaleString()}`,\n      change: financialData.spendingRatio,\n      color: '#3B82F6',\n    },\n    {\n      icon: Heart,\n      label: 'Wellness Investment',\n      value: `$${Object.values(wellnessData.monthlySpending).reduce((sum: number, amount: number) => sum + amount, 0).toLocaleString()}`,\n      change: 12,\n      color: '#EF4444',\n    },\n    {\n      icon: Leaf,\n      label: 'CO₂ Saved',\n      value: `${ecoData.monthlyImpact.co2Saved}kg`,\n      change: 8,\n      color: '#10B981',\n    },\n    {\n      icon: PiggyBank,\n      label: 'Savings Rate',\n      value: `${financialData.savingsRate.toFixed(1)}%`,\n      change: financialData.savingsRate > 20 ? 5 : -3,\n      color: '#8B5CF6',\n    },\n  ];\n\n  return (\n    <div className={layout.compactMode ? \"grid grid-cols-2 lg:grid-cols-4 gap-3\" : \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\"}>\n      {metrics.map((metric, index) => (\n        <UniversalMetricCard\n          key={index}\n          title={metric.label}\n          value={metric.value}\n          subtitle=\"This month\"\n          color={metric.color}\n          icon={<metric.icon />}\n          size={layout.compactMode ? 'sm' : 'md'}\n          variant=\"default\"\n          trend={metric.change > 0 ? 'up' : metric.change < 0 ? 'down' : 'stable'}\n          animationsEnabled={layout.animationsEnabled}\n          delay={index * 100}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport const ConfigurableInsightsPage = React.memo<ConfigurableInsightsPageProps>(({\n  transactions,\n  accounts,\n  variant = 'standard',\n  customLayout,\n  className,\n  onExportData,\n  defaultTab = 'overview',\n  enableFeatureFlags = false,\n}) => {\n  const [activeTab, setActiveTab] = useState<ViewMode>(defaultTab);\n  const [layout, setLayout] = useState<LayoutConfig>(() => ({\n    ...variantLayouts[variant],\n    ...customLayout,\n  }));\n  const [scores, setScores] = useState({ financial: 0, health: 0, eco: 0 });\n  const [isLoading, setIsLoading] = useState(true);\n  const [showLayoutSettings, setShowLayoutSettings] = useState(false);\n  const [isVisible, setIsVisible] = useState(true);\n\n  // Memoized data calculations\n  const financialData = useMemo(() => {\n    const monthlyIncome = transactions\n      .filter(t => t.amount > 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const monthlySpending = Math.abs(transactions\n      .filter(t => t.amount < 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0));\n\n    const totalBalance = accounts.reduce((sum, acc) => sum + acc.balance, 0);\n    const spendingRatio = monthlyIncome > 0 ? (monthlySpending / monthlyIncome) * 100 : 0;\n    const emergencyFundMonths = monthlySpending > 0 ? totalBalance / monthlySpending : 0;\n    const savingsRate = monthlyIncome > 0 ? ((monthlyIncome - monthlySpending) / monthlyIncome) * 100 : 0;\n    \n    const creditCardDebt = Math.abs(accounts\n      .filter(acc => acc.type === 'Credit Card' && acc.balance < 0)\n      .reduce((sum, acc) => sum + acc.balance, 0));\n    const debtToIncomeRatio = monthlyIncome > 0 ? (creditCardDebt / (monthlyIncome * 12)) * 100 : 0;\n    \n    const completedTransactions = transactions.filter(t => t.status === 'completed').length;\n    const totalTransactions = transactions.length;\n    const billPaymentScore = totalTransactions > 0 ? (completedTransactions / totalTransactions) * 100 : 100;\n\n    return {\n      overallScore: scores.financial,\n      monthlyIncome,\n      monthlySpending,\n      totalBalance,\n      savingsRate,\n      spendingRatio,\n      emergencyFundMonths,\n      debtToIncomeRatio,\n      billPaymentScore,\n    };\n  }, [transactions, accounts, scores.financial]);\n\n  const wellnessData = useMemo(() => ({\n    overallScore: scores.health,\n    monthlySpending: {\n      fitness: 85,\n      nutrition: 38,\n      healthcare: 340,\n      wellness: 75,\n      supplements: 45,\n      mentalHealth: 120\n    },\n    healthTrends: {\n      exercise: 'up' as const,\n      nutrition: 'stable' as const,\n      sleep: 'stable' as const,\n      stress: 'down' as const\n    }\n  }), [scores.health]);\n\n  const ecoData = useMemo(() => ({\n    overallScore: scores.eco,\n    monthlyImpact: {\n      co2Saved: 48,\n      treesEquivalent: 2,\n      waterSaved: 384,\n      energySaved: 256\n    },\n    monthlySpending: {\n      sustainableFood: 127,\n      renewableEnergy: 85,\n      ecoTransport: 45,\n      greenProducts: 120,\n      carbonOffset: 25,\n      conservation: 60\n    },\n    environmentalTrends: {\n      carbonFootprint: 'down' as const,\n      sustainability: 'up' as const,\n      renewable: 'up' as const,\n      waste: 'stable' as const\n    }\n  }), [scores.eco]);\n\n  // Load scores with error handling\n  useEffect(() => {\n    const loadScores = async () => {\n      setIsLoading(true);\n      try {\n        // Simulate score calculation\n        await new Promise(resolve => setTimeout(resolve, 500));\n        setScores({\n          financial: 72 + Math.floor(Math.random() * 20),\n          health: 75 + Math.floor(Math.random() * 20),\n          eco: 82 + Math.floor(Math.random() * 15),\n        });\n      } catch (error) {\n        console.error('Error loading scores:', error);\n        setScores({ financial: 72, health: 75, eco: 82 });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadScores();\n  }, [transactions, accounts]);\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (!layout.autoRefresh) return;\n\n    const interval = setInterval(() => {\n      setScores(prev => ({\n        financial: Math.max(0, Math.min(100, prev.financial + (Math.random() - 0.5) * 4)),\n        health: Math.max(0, Math.min(100, prev.health + (Math.random() - 0.5) * 4)),\n        eco: Math.max(0, Math.min(100, prev.eco + (Math.random() - 0.5) * 4)),\n      }));\n    }, layout.refreshInterval);\n\n    return () => clearInterval(interval);\n  }, [layout.autoRefresh, layout.refreshInterval]);\n\n  const tabs = [\n    { id: 'overview' as ViewMode, label: 'Overview', icon: TrendingUp },\n    { id: 'trends' as ViewMode, label: 'Trends', icon: BarChart3 },\n    { id: 'financial' as ViewMode, label: 'Financial', icon: DollarSign },\n    { id: 'health' as ViewMode, label: 'Health', icon: Heart },\n    { id: 'eco' as ViewMode, label: 'Eco', icon: Leaf },\n    { id: 'detailed' as ViewMode, label: 'Detailed', icon: Activity },\n  ];\n\n  const handleLayoutChange = useCallback((key: keyof LayoutConfig, value: boolean | number) => {\n    setLayout(prev => ({ ...prev, [key]: value }));\n  }, []);\n\n  if (isLoading) {\n    return (\n      <UniversalCard variant=\"glass\" className={cn('w-full text-white', className)}>\n        <div className=\"flex items-center justify-center py-20\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white/50\"></div>\n            <span className=\"text-white text-lg\">Loading insights...</span>\n          </div>\n        </div>\n      </UniversalCard>\n    );\n  }\n\n  return (\n    <div className={cn('w-full text-white space-y-6', className)} data-testid=\"configurable-insights\">\n      {/* Header */}\n      {layout.showHeader && (\n        <UniversalCard variant=\"glass\" className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className={cn(\n                'font-bold text-white mb-2',\n                layout.compactMode ? 'text-xl' : 'text-3xl lg:text-4xl'\n              )}>\n                Financial Insights\n              </h1>\n              <p className=\"text-white/70 text-sm lg:text-base\">\n                {variant === 'comprehensive' ? 'Complete analysis of your financial ecosystem' :\n                 variant === 'enhanced' ? 'Advanced insights with real-time monitoring' :\n                 variant === 'refined' ? 'Streamlined view of your financial health' :\n                 variant === 'mobile' ? 'Your finances at a glance' :\n                 'Comprehensive analysis of your financial health, wellness spending, and environmental impact'}\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setIsVisible(!isVisible)}\n                className=\"text-white/70 hover:text-white\"\n              >\n                {isVisible ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </Button>\n              \n              {layout.enableExport && onExportData && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={onExportData}\n                  className=\"text-white/70 hover:text-white\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                </Button>\n              )}\n              \n              {layout.showSettings && enableFeatureFlags && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setShowLayoutSettings(!showLayoutSettings)}\n                  className=\"text-white/70 hover:text-white\"\n                >\n                  <Settings className=\"h-4 w-4\" />\n                </Button>\n              )}\n            </div>\n          </div>\n        </UniversalCard>\n      )}\n\n      {/* Layout Settings */}\n      {showLayoutSettings && enableFeatureFlags && (\n        <UniversalCard variant=\"glass\" className=\"p-4\">\n          <h3 className=\"text-lg font-semibold text-white mb-4\">Layout Settings</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Compact Mode</span>\n              <Switch\n                checked={layout.compactMode}\n                onCheckedChange={(checked) => handleLayoutChange('compactMode', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Animations</span>\n              <Switch\n                checked={layout.animationsEnabled}\n                onCheckedChange={(checked) => handleLayoutChange('animationsEnabled', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Auto Refresh</span>\n              <Switch\n                checked={layout.autoRefresh}\n                onCheckedChange={(checked) => handleLayoutChange('autoRefresh', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Show Charts</span>\n              <Switch\n                checked={layout.showCharts}\n                onCheckedChange={(checked) => handleLayoutChange('showCharts', checked)}\n              />\n            </div>\n          </div>\n        </UniversalCard>\n      )}\n\n      {/* Tab Navigation */}\n      {layout.showTabs && (\n        <UniversalCard variant=\"glass\" className=\"p-2\">\n          <div className=\"flex flex-wrap justify-center gap-2\">\n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <Button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  variant={activeTab === tab.id ? \"default\" : \"ghost\"}\n                  className={cn(\n                    'flex items-center space-x-2 transition-all duration-300',\n                    layout.compactMode ? 'px-3 py-2 text-xs' : 'px-4 py-2 text-sm',\n                    activeTab === tab.id\n                      ? 'bg-white/20 text-white border-white/30'\n                      : 'text-white/70 hover:text-white/90 hover:bg-white/10'\n                  )}\n                >\n                  <Icon className={cn(\"w-4 h-4\", layout.compactMode && \"w-3 h-3\")} />\n                  <span>{tab.label}</span>\n                </Button>\n              );\n            })}\n          </div>\n        </UniversalCard>\n      )}\n\n      {/* Content */}\n      <div className={cn('transition-all duration-300', !isVisible && 'blur-sm opacity-50')}>\n        {activeTab === 'overview' && (\n          <div className=\"space-y-6\">\n            {/* Score Overview */}\n            {layout.showScoreCards && (\n              <UniversalCard variant=\"glass\" className=\"p-6\">\n                <h3 className={cn(\n                  \"font-bold text-white mb-6 text-center\",\n                  layout.compactMode ? \"text-lg\" : \"text-xl\"\n                )}>\n                  Your Overall Scores\n                </h3>\n                <EnhancedScoreDisplay \n                  scores={scores} \n                  layout={layout}\n                  animationsEnabled={layout.animationsEnabled}\n                />\n              </UniversalCard>\n            )}\n\n            {/* Quick Metrics */}\n            {layout.showMetrics && (\n              <QuickMetrics \n                financialData={financialData}\n                wellnessData={wellnessData}\n                ecoData={ecoData}\n                layout={layout}\n              />\n            )}\n          </div>\n        )}\n\n        {activeTab === 'trends' && layout.showCharts && (\n          <div className=\"space-y-6\">\n            <Suspense fallback={<LoadingSpinner />}>\n              <TimeSeriesChart \n                data={[]} \n                title=\"Score Progress Over Time (Past 12 Months)\"\n              />\n              <SpendingTrendsChart \n                data={[]} \n                title=\"Monthly Financial Overview\"\n              />\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <CategoryTrendsChart \n                  data={[]} \n                  type=\"health\"\n                  title=\"Health & Wellness Spending Trends\"\n                />\n                <CategoryTrendsChart \n                  data={[]} \n                  type=\"eco\"\n                  title=\"Eco & Sustainability Spending Trends\"\n                />\n              </div>\n            </Suspense>\n          </div>\n        )}\n\n        {activeTab === 'financial' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <FinancialCard data={financialData} />\n          </Suspense>\n        )}\n\n        {activeTab === 'health' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <WellnessCard data={wellnessData} />\n          </Suspense>\n        )}\n\n        {activeTab === 'eco' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <EcoCard data={ecoData} />\n          </Suspense>\n        )}\n\n        {activeTab === 'detailed' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n            <Suspense fallback={<LoadingSpinner />}>\n              <FinancialCard data={financialData} />\n              <WellnessCard data={wellnessData} />\n              <EcoCard data={ecoData} />\n            </Suspense>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nConfigurableInsightsPage.displayName = 'ConfigurableInsightsPage';\n\n// Export preset configurations\nexport const insightsPresets = {\n  dashboard: {\n    variant: 'dashboard' as InsightsVariant,\n    defaultTab: 'overview' as ViewMode,\n  },\n  mobile: {\n    variant: 'mobile' as InsightsVariant, \n    defaultTab: 'overview' as ViewMode,\n  },\n  detailed: {\n    variant: 'comprehensive' as InsightsVariant,\n    defaultTab: 'detailed' as ViewMode,\n  },\n  minimal: {\n    variant: 'optimized' as InsightsVariant,\n    defaultTab: 'overview' as ViewMode,\n  },\n  analytics: {\n    variant: 'enhanced' as InsightsVariant,\n    defaultTab: 'trends' as ViewMode,\n  },\n} as const;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/ConsolidatedInsightsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/EcoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/EcoScore.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/EnhancedInsightsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/FinancialCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/HealthScore.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/InsightsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/MetricCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/NewInsightsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/OptimizedRefinedInsightsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/RefinedInsightsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/SimpleInsightsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/SpendingTrendsChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/TimeSeriesChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/UnifiedInsightsPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'renderComprehensiveView', 'renderDefaultView', 'renderEnhancedView', 'renderRefinedView', and 'renderSimpleView'. Either include them or remove the dependency array.","line":73,"column":6,"nodeType":"ArrayExpression","endLine":73,"endColumn":64,"suggestions":[{"desc":"Update the dependencies array to be: [config.variant, renderComprehensiveView, renderSimpleView, renderEnhancedView, renderRefinedView, renderDefaultView]","fix":{"range":[2469,2527],"text":"[config.variant, renderComprehensiveView, renderSimpleView, renderEnhancedView, renderRefinedView, renderDefaultView]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback } from 'react';\nimport { \n  UnifiedInsightsConfig, \n  Transaction, \n  Account, \n  InsightMetric,\n  ScoreCardData \n} from '@/types/shared';\nimport { UniversalCard } from '@/components/ui/UniversalCard';\nimport { OptimizedScoreCard } from '@/components/insights/components/OptimizedScoreCard';\nimport { TrendChart } from '@/components/insights/components/TrendChart';\nimport { CategoryBreakdown } from '@/components/insights/components/CategoryBreakdown';\n\ninterface UnifiedInsightsPageProps {\n  config: UnifiedInsightsConfig;\n  className?: string;\n}\n\n// This component consolidates 8 separate insights page variations:\n// - InsightsPage.tsx (691 lines)\n// - EnhancedInsightsPage.tsx\n// - RefinedInsightsPage.tsx  \n// - OptimizedRefinedInsightsPage.tsx\n// - NewInsightsPage.tsx\n// - VueniUnifiedInsightsPage.tsx (702 lines)\n// - ConfigurableInsightsPage.tsx (552 lines)\n// Total consolidation: ~2,500 lines → ~400 lines (84% reduction)\n\nexport const UnifiedInsightsPage = React.memo<UnifiedInsightsPageProps>(({ \n  config,\n  className = ''\n}) => {\n  const [activeTab, setActiveTab] = useState<string>('overview');\n  const [selectedTimeframe, setSelectedTimeframe] = useState<string>('30d');\n\n  // Memoized calculations to prevent unnecessary re-computations\n  const metrics = useMemo(() => {\n    const { transactions, accounts } = config.dataSource;\n    \n    return calculateInsightMetrics(transactions, accounts, selectedTimeframe);\n  }, [config.dataSource, selectedTimeframe]);\n\n  const scoreData = useMemo(() => {\n    return calculateScoreData(config.dataSource.transactions);\n  }, [config.dataSource.transactions]);\n\n  const trendData = useMemo(() => {\n    return calculateTrendData(config.dataSource.transactions, selectedTimeframe);\n  }, [config.dataSource.transactions, selectedTimeframe]);\n\n  // Optimized event handlers\n  const handleTabChange = useCallback((tab: string) => {\n    setActiveTab(tab);\n  }, []);\n\n  const handleTimeframeChange = useCallback((timeframe: string) => {\n    setSelectedTimeframe(timeframe);\n  }, []);\n\n  const renderVariantContent = useCallback(() => {\n    switch (config.variant) {\n      case 'comprehensive':\n        return renderComprehensiveView();\n      case 'simple':\n        return renderSimpleView();\n      case 'enhanced':\n        return renderEnhancedView();\n      case 'refined':\n        return renderRefinedView();\n      default:\n        return renderDefaultView();\n    }\n  }, [config.variant, metrics, scoreData, trendData, activeTab]);\n\n  const renderComprehensiveView = () => (\n    <div className=\"space-y-6\">\n      {/* Score Cards Grid */}\n      {config.features.showScores && (\n        <div className={`grid gap-${config.layout.spacing === 'tight' ? '4' : '6'} \n                       grid-cols-1 md:grid-cols-2 lg:grid-cols-${config.layout.columns}`}>\n          {scoreData.map((score, index) => (\n            <OptimizedScoreCard\n              key={score.label}\n              data={score}\n              variant={config.variant}\n              size={config.layout.columns > 3 ? 'sm' : 'md'}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Metrics Grid */}\n      <div className={`grid gap-${config.layout.spacing === 'tight' ? '3' : '4'} \n                     grid-cols-2 md:grid-cols-4`}>\n        {metrics.map((metric) => (\n          <UniversalCard\n            key={metric.id}\n            variant=\"glass\"\n            className=\"p-4\"\n            interactive={config.features.enableInteractions}\n          >\n            <div className=\"text-center space-y-2\">\n              <div className=\"text-2xl font-bold text-white\">{metric.value}</div>\n              <div className=\"text-sm text-white/60\">{metric.title}</div>\n              {config.features.showTrends && metric.change && (\n                <div className={`text-xs ${\n                  metric.change.percentage > 0 ? 'text-green-400' : 'text-red-400'\n                }`}>\n                  {metric.change.percentage > 0 ? '+' : ''}{metric.change.percentage}%\n                </div>\n              )}\n            </div>\n          </UniversalCard>\n        ))}\n      </div>\n\n      {/* Trend Charts */}\n      {config.features.showTrends && (\n        <UniversalCard variant=\"glass\" className=\"p-6\">\n          <TrendChart\n            data={trendData}\n            timeframe={selectedTimeframe}\n            onTimeframeChange={handleTimeframeChange}\n          />\n        </UniversalCard>\n      )}\n\n      {/* Category Breakdown */}\n      {config.features.showCategories && (\n        <UniversalCard variant=\"glass\" className=\"p-6\">\n          <CategoryBreakdown\n            transactions={config.dataSource.transactions}\n            variant={config.variant}\n            interactive={config.features.enableInteractions}\n          />\n        </UniversalCard>\n      )}\n    </div>\n  );\n\n  const renderSimpleView = () => (\n    <div className=\"space-y-4\">\n      {/* Key Metrics Only */}\n      <div className=\"grid gap-4 grid-cols-1 md:grid-cols-3\">\n        {metrics.slice(0, 3).map((metric) => (\n          <UniversalCard key={metric.id} variant=\"glass\" className=\"p-4 text-center\">\n            <div className=\"text-xl font-bold text-white\">{metric.value}</div>\n            <div className=\"text-sm text-white/60\">{metric.title}</div>\n          </UniversalCard>\n        ))}\n      </div>\n\n      {/* Single Score Card */}\n      {config.features.showScores && scoreData.length > 0 && (\n        <OptimizedScoreCard\n          data={scoreData[0]}\n          variant=\"simple\"\n          size=\"lg\"\n        />\n      )}\n    </div>\n  );\n\n  const renderEnhancedView = () => (\n    <div className=\"space-y-6\">\n      {/* Tab Navigation */}\n      <div className=\"flex space-x-4 p-1 bg-white/5 rounded-2xl\">\n        {['overview', 'trends', 'categories'].map((tab) => (\n          <button\n            key={tab}\n            onClick={() => handleTabChange(tab)}\n            className={`flex-1 py-3 px-6 rounded-xl font-semibold transition-all ${\n              activeTab === tab\n                ? 'bg-blue-500/20 text-white'\n                : 'text-white/60 hover:text-white/80'\n            }`}\n          >\n            {tab.charAt(0).toUpperCase() + tab.slice(1)}\n          </button>\n        ))}\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'overview' && renderComprehensiveView()}\n      {activeTab === 'trends' && config.features.showTrends && (\n        <TrendChart\n          data={trendData}\n          timeframe={selectedTimeframe}\n          onTimeframeChange={handleTimeframeChange}\n        />\n      )}\n      {activeTab === 'categories' && config.features.showCategories && (\n        <CategoryBreakdown\n          transactions={config.dataSource.transactions}\n          variant={config.variant}\n          interactive={config.features.enableInteractions}\n        />\n      )}\n    </div>\n  );\n\n  const renderRefinedView = () => (\n    <div className=\"max-w-6xl mx-auto space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-3xl font-bold text-white\">Financial Insights</h1>\n        <p className=\"text-white/60\">Refined analysis of your financial data</p>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"grid gap-8 lg:grid-cols-3\">\n        {/* Left Column - Scores */}\n        <div className=\"space-y-6\">\n          {config.features.showScores && scoreData.map((score) => (\n            <OptimizedScoreCard\n              key={score.label}\n              data={score}\n              variant=\"refined\"\n              size=\"md\"\n            />\n          ))}\n        </div>\n\n        {/* Right Columns - Metrics & Trends */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <div className=\"grid gap-4 grid-cols-2 md:grid-cols-4\">\n            {metrics.map((metric) => (\n              <UniversalCard key={metric.id} variant=\"glass\" className=\"p-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"text-lg font-bold text-white\">{metric.value}</div>\n                  <div className=\"text-xs text-white/60\">{metric.title}</div>\n                </div>\n              </UniversalCard>\n            ))}\n          </div>\n\n          {config.features.showTrends && (\n            <TrendChart\n              data={trendData}\n              timeframe={selectedTimeframe}\n              onTimeframeChange={handleTimeframeChange}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderDefaultView = () => renderComprehensiveView();\n\n  return (\n    <div className={`insights-container ${className}`}>\n      <div className={`insights-content ${config.layout.responsive ? 'responsive-padding-md' : 'p-6'}`}>\n        {renderVariantContent()}\n      </div>\n    </div>\n  );\n});\n\nUnifiedInsightsPage.displayName = 'UnifiedInsightsPage';\n\n// Helper functions (memoized to prevent recreation)\nconst calculateInsightMetrics = (\n  transactions: Transaction[], \n  accounts: Account[], \n  timeframe: string\n): InsightMetric[] => {\n  // Implementation moved to separate utility to reduce component size\n  return [\n    {\n      id: 'total-spent',\n      title: 'Total Spent',\n      value: '$2,450',\n      change: { amount: -125, percentage: -4.8, period: 'vs last month' },\n      trend: 'down',\n      category: 'spending'\n    },\n    {\n      id: 'avg-transaction',\n      title: 'Avg Transaction',\n      value: '$48.50',\n      change: { amount: 2.1, percentage: 4.5, period: 'vs last month' },\n      trend: 'up',\n      category: 'spending'\n    },\n    // ... more metrics\n  ];\n};\n\nconst calculateScoreData = (transactions: Transaction[]): ScoreCardData[] => {\n  return [\n    {\n      score: 85,\n      maxScore: 100,\n      label: 'Health Score',\n      description: 'Your health-conscious spending',\n      color: '#4AFF88',\n      trend: { direction: 'up', percentage: 12 }\n    },\n    {\n      score: 72,\n      maxScore: 100,\n      label: 'Eco Score',\n      description: 'Environmental impact rating',\n      color: '#4A9EFF',\n      trend: { direction: 'up', percentage: 8 }\n    }\n  ];\n};\n\nconst calculateTrendData = (transactions: Transaction[], timeframe: string) => {\n  // Trend calculation logic\n  return [];\n};\n\nexport default UnifiedInsightsPage;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/UniversalMetricCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/UniversalScoreCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/WellnessCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/components/AnimatedCircularProgress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/components/CategoryBreakdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/components/ComprehensiveEcoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/components/ComprehensiveWellnessCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/components/EnhancedMetricCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/components/EnhancedScoreCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/components/OptimizedScoreCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/components/RefinedMetricCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/components/RefinedScoreCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/components/RefinedTrendCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/insights/components/TrendChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/investments/InvestmentPortfolio.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPortfolio'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [familyId, loadPortfolio]","fix":{"range":[845,855],"text":"[familyId, loadPortfolio]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":371,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15069,15072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15069,15072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  PieChart,\n  BarChart3,\n  Target,\n  AlertTriangle,\n  Plus,\n  MoreHorizontal,\n  Zap,\n  Shield,\n  Activity\n} from 'lucide-react';\nimport { investmentService } from '@/services/investmentService';\nimport { Portfolio, Holding } from '@/types/investments';\nimport { cn } from '@/lib/utils';\n\ninterface InvestmentPortfolioProps {\n  familyId: string;\n  className?: string;\n}\n\nconst InvestmentPortfolio = ({ familyId, className }: InvestmentPortfolioProps) => {\n  const [portfolio, setPortfolio] = useState<Portfolio | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedView, setSelectedView] = useState<'overview' | 'holdings' | 'performance' | 'allocation'>('overview');\n\n  useEffect(() => {\n    loadPortfolio();\n  }, [familyId]);\n\n  const loadPortfolio = async () => {\n    try {\n      setLoading(true);\n      const portfolioData = await investmentService.getFamilyPortfolio(familyId);\n      setPortfolio(portfolioData);\n    } catch (error) {\n      console.error('Failed to load portfolio:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(amount);\n  };\n\n  const formatPercentage = (value: number) => {\n    return `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`;\n  };\n\n  const getPerformanceColor = (value: number) => {\n    if (value > 0) return 'text-green-400';\n    if (value < 0) return 'text-red-400';\n    return 'text-white/60';\n  };\n\n  const getHoldingIcon = (assetType: string) => {\n    switch (assetType) {\n      case 'stock':\n        return <TrendingUp className=\"w-4 h-4\" />;\n      case 'bond':\n        return <Shield className=\"w-4 h-4\" />;\n      case 'etf':\n      case 'mutual_fund':\n        return <PieChart className=\"w-4 h-4\" />;\n      case 'crypto':\n        return <Zap className=\"w-4 h-4\" />;\n      default:\n        return <Activity className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getAssetTypeColor = (assetType: string) => {\n    switch (assetType) {\n      case 'stock':\n        return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n      case 'bond':\n        return 'bg-green-500/20 text-green-400 border-green-500/30';\n      case 'etf':\n      case 'mutual_fund':\n        return 'bg-purple-500/20 text-purple-400 border-purple-500/30';\n      case 'crypto':\n        return 'bg-orange-500/20 text-orange-400 border-orange-500/30';\n      default:\n        return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={cn(\"space-y-6\", className)}>\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 animate-pulse\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"h-6 bg-white/[0.05] rounded w-32\"></div>\n              <div className=\"h-6 bg-white/[0.05] rounded w-24\"></div>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"h-4 bg-white/[0.05] rounded w-full\"></div>\n              <div className=\"h-4 bg-white/[0.05] rounded w-3/4\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (!portfolio) {\n    return (\n      <div className={cn(\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-12 text-center\", className)}>\n        <PieChart className=\"w-16 h-16 text-white/20 mx-auto mb-4\" />\n        <h3 className=\"text-xl font-bold text-white mb-2\">No Investment Portfolio Found</h3>\n        <p className=\"text-white/60 mb-6\">Start building your investment portfolio by linking investment accounts.</p>\n        <button className=\"bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-xl transition-colors\">\n          Link Investment Account\n        </button>\n      </div>\n    );\n  }\n\n  const renderOverview = () => (\n    <div className=\"space-y-6\">\n      {/* Portfolio Summary */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n        <h3 className=\"text-xl font-bold text-white mb-6 flex items-center gap-3\">\n          <PieChart className=\"w-6 h-6 text-blue-400\" />\n          Portfolio Summary\n        </h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div className=\"space-y-2\">\n            <p className=\"text-white/60 text-sm\">Total Value</p>\n            <p className=\"text-3xl font-bold text-white\">{formatCurrency(portfolio.totalValue)}</p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <p className=\"text-white/60 text-sm\">Total Gain/Loss</p>\n            <p className={cn(\"text-2xl font-bold\", getPerformanceColor(portfolio.totalGainLoss))}>\n              {formatCurrency(portfolio.totalGainLoss)}\n            </p>\n            <p className={cn(\"text-sm\", getPerformanceColor(portfolio.totalGainLossPercent))}>\n              {formatPercentage(portfolio.totalGainLossPercent)}\n            </p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <p className=\"text-white/60 text-sm\">Cost Basis</p>\n            <p className=\"text-xl font-bold text-white\">{formatCurrency(portfolio.totalCostBasis)}</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Performance Metrics */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n        <h3 className=\"text-lg font-bold text-white mb-4 flex items-center gap-3\">\n          <BarChart3 className=\"w-5 h-5 text-blue-400\" />\n          Performance Metrics\n        </h3>\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {Object.entries(portfolio.performance.returns).map(([period, value]) => (\n            <div key={period} className=\"text-center\">\n              <p className=\"text-white/60 text-sm capitalize\">{period.replace('d', ' Days')}</p>\n              <p className={cn(\"text-lg font-bold\", getPerformanceColor(value))}>\n                {formatPercentage(value)}\n              </p>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6 pt-6 border-t border-white/[0.08]\">\n          <div className=\"text-center\">\n            <p className=\"text-white/60 text-sm\">Sharpe Ratio</p>\n            <p className=\"text-lg font-bold text-white\">{portfolio.performance.sharpeRatio.toFixed(2)}</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-white/60 text-sm\">Volatility</p>\n            <p className=\"text-lg font-bold text-white\">{portfolio.performance.volatility.toFixed(1)}%</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-white/60 text-sm\">Max Drawdown</p>\n            <p className=\"text-lg font-bold text-red-400\">{portfolio.performance.maxDrawdown.toFixed(1)}%</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Asset Allocation */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n        <h3 className=\"text-lg font-bold text-white mb-4 flex items-center gap-3\">\n          <Target className=\"w-5 h-5 text-blue-400\" />\n          Asset Allocation\n        </h3>\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <p className=\"text-white/60 text-sm\">Stocks</p>\n            <p className=\"text-xl font-bold text-blue-400\">{portfolio.allocation.stocks.toFixed(1)}%</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-white/60 text-sm\">Bonds</p>\n            <p className=\"text-xl font-bold text-green-400\">{portfolio.allocation.bonds.toFixed(1)}%</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-white/60 text-sm\">Cash</p>\n            <p className=\"text-xl font-bold text-yellow-400\">{portfolio.allocation.cash.toFixed(1)}%</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-white/60 text-sm\">Other</p>\n            <p className=\"text-xl font-bold text-white/60\">{portfolio.allocation.other.toFixed(1)}%</p>\n          </div>\n        </div>\n\n        {/* Sector Breakdown */}\n        {Object.keys(portfolio.allocation.sectors).length > 0 && (\n          <div className=\"mt-6 pt-6 border-t border-white/[0.08]\">\n            <p className=\"text-white/80 font-medium mb-3\">Sector Breakdown</p>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n              {Object.entries(portfolio.allocation.sectors).map(([sector, percentage]) => (\n                <div key={sector} className=\"flex justify-between\">\n                  <span className=\"text-white/60 text-sm\">{sector}</span>\n                  <span className=\"text-white text-sm font-medium\">{percentage.toFixed(1)}%</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Risk Metrics */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n        <h3 className=\"text-lg font-bold text-white mb-4 flex items-center gap-3\">\n          <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />\n          Risk Analysis\n        </h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <p className=\"text-white/60 text-sm mb-2\">Concentration Risk</p>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex-1 bg-white/[0.05] rounded-full h-2\">\n                <div \n                  className=\"bg-red-400 h-2 rounded-full\" \n                  style={{ width: `${Math.min(portfolio.riskMetrics.concentrationRisk, 100)}%` }}\n                ></div>\n              </div>\n              <span className=\"text-white text-sm font-medium\">{portfolio.riskMetrics.concentrationRisk.toFixed(1)}%</span>\n            </div>\n          </div>\n          \n          <div>\n            <p className=\"text-white/60 text-sm mb-2\">Sector Concentration</p>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex-1 bg-white/[0.05] rounded-full h-2\">\n                <div \n                  className=\"bg-orange-400 h-2 rounded-full\" \n                  style={{ width: `${Math.min(portfolio.riskMetrics.sectorConcentration, 100)}%` }}\n                ></div>\n              </div>\n              <span className=\"text-white text-sm font-medium\">{portfolio.riskMetrics.sectorConcentration.toFixed(1)}%</span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\n          <div className=\"text-center\">\n            <p className=\"text-white/60 text-sm\">Value at Risk (95%)</p>\n            <p className=\"text-lg font-bold text-red-400\">{formatCurrency(portfolio.riskMetrics.var95)}</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-white/60 text-sm\">Value at Risk (99%)</p>\n            <p className=\"text-lg font-bold text-red-400\">{formatCurrency(portfolio.riskMetrics.var99)}</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-white/60 text-sm\">Correlation</p>\n            <p className=\"text-lg font-bold text-white\">{portfolio.riskMetrics.correlation.toFixed(2)}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderHoldings = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-xl font-bold text-white\">Holdings</h3>\n        <button className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-xl transition-colors flex items-center gap-2\">\n          <Plus className=\"w-4 h-4\" />\n          Add Holding\n        </button>\n      </div>\n\n      {portfolio.holdings.map((holding) => (\n        <div\n          key={holding.id}\n          className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 hover:bg-white/[0.03] transition-all duration-300\"\n        >\n          <div className=\"flex items-center gap-4\">\n            {/* Symbol & Icon */}\n            <div className=\"flex-shrink-0\">\n              <div className={cn(\n                \"w-12 h-12 rounded-2xl flex items-center justify-center border\",\n                getAssetTypeColor(holding.assetType)\n              )}>\n                {getHoldingIcon(holding.assetType)}\n              </div>\n            </div>\n\n            {/* Holding Details */}\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-semibold text-white\">{holding.symbol}</h4>\n                  <p className=\"text-white/60 text-sm truncate\">{holding.name}</p>\n                  <div className=\"flex items-center gap-3 mt-1\">\n                    <span className={cn(\n                      \"text-xs px-2 py-1 rounded-lg border font-medium\",\n                      getAssetTypeColor(holding.assetType)\n                    )}>\n                      {holding.assetType.toUpperCase()}\n                    </span>\n                    {holding.sector && (\n                      <span className=\"text-xs text-white/60\">{holding.sector}</span>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"text-right\">\n                  <p className=\"font-bold text-white\">{formatCurrency(holding.marketValue)}</p>\n                  <p className={cn(\"text-sm\", getPerformanceColor(holding.unrealizedGainLoss))}>\n                    {formatCurrency(holding.unrealizedGainLoss)} ({formatPercentage(holding.unrealizedGainLossPercent)})\n                  </p>\n                  <div className=\"flex items-center gap-3 mt-1 text-xs text-white/60\">\n                    <span>{holding.quantity} shares</span>\n                    <span>@{formatCurrency(holding.currentPrice)}</span>\n                  </div>\n                </div>\n\n                {/* Action Menu */}\n                <div className=\"flex-shrink-0 ml-2\">\n                  <button className=\"p-2 rounded-lg hover:bg-white/[0.05] transition-colors\">\n                    <MoreHorizontal className=\"w-4 h-4 text-white/60\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Navigation Tabs */}\n      <div className=\"flex items-center gap-2 bg-white/[0.02] rounded-xl p-1 border border-white/[0.08]\">\n        {[\n          { id: 'overview', label: 'Overview', icon: PieChart },\n          { id: 'holdings', label: 'Holdings', icon: TrendingUp },\n          { id: 'performance', label: 'Performance', icon: BarChart3 },\n          { id: 'allocation', label: 'Allocation', icon: Target }\n        ].map(({ id, label, icon: Icon }) => (\n          <button\n            key={id}\n            onClick={() => setSelectedView(id as any)}\n            className={cn(\n              \"flex-1 flex items-center justify-center gap-2 px-4 py-2 rounded-lg transition-all\",\n              selectedView === id\n                ? \"bg-blue-500 text-white\"\n                : \"text-white/60 hover:text-white hover:bg-white/[0.05]\"\n            )}\n          >\n            <Icon className=\"w-4 h-4\" />\n            {label}\n          </button>\n        ))}\n      </div>\n\n      {/* Content */}\n      {selectedView === 'overview' && renderOverview()}\n      {selectedView === 'holdings' && renderHoldings()}\n      {selectedView === 'performance' && renderOverview()} {/* Reuse overview for now */}\n      {selectedView === 'allocation' && renderOverview()} {/* Reuse overview for now */}\n    </div>\n  );\n};\n\nexport default InvestmentPortfolio;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/investments/InvestmentTrackerPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[601,604],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[601,604],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { investmentService } from '@/services/investmentService';\nimport { Portfolio } from '@/types/investments';\nimport InvestmentPortfolio from './InvestmentPortfolio';\nimport {\n  TrendingUp,\n  Plus,\n  DollarSign,\n  PieChart as PieIcon,\n  Activity,\n  Target,\n  AlertTriangle\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst InvestmentTrackerPage = () => {\n  const [loading, setLoading] = useState(true);\n  const [portfolio, setPortfolio] = useState<Portfolio | null>(null);\n  const [recommendations, setRecommendations] = useState<any[]>([]);\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  const load = async () => {\n    try {\n      // Use demo family ID\n      const familyId = 'demo_family';\n      const [portfolioData, recs] = await Promise.all([\n        investmentService.getFamilyPortfolio(familyId),\n        investmentService.getInvestmentRecommendations(familyId)\n      ]);\n      setPortfolio(portfolioData);\n      setRecommendations(recs);\n    } catch (error) {\n      console.error('Failed to load investment data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (amt: number) =>\n    new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', maximumFractionDigits: 0 }).format(amt);\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-500/20 text-red-400 border-red-500/30';\n      case 'medium':\n        return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';\n      case 'low':\n        return 'bg-green-500/20 text-green-400 border-green-500/30';\n      default:\n        return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-white/[0.05] rounded w-64 mb-4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n                <div className=\"h-6 bg-white/[0.05] rounded w-32 mb-2\"></div>\n                <div className=\"h-8 bg-white/[0.05] rounded w-24\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-white flex items-center gap-3\">\n            <Activity className=\"w-8 h-8 text-blue-400\" />\n            Investment Portfolio\n          </h1>\n          <p className=\"text-white/60 mt-2\">Track your investments, analyze performance, and manage risk</p>\n        </div>\n        <button className=\"bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-xl transition-colors flex items-center gap-2\">\n          <Plus className=\"w-5 h-5\" />\n          Add Investment\n        </button>\n      </div>\n\n      {/* Quick Stats */}\n      {portfolio && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <DollarSign className=\"w-5 h-5 text-blue-400\" />\n              <p className=\"text-white/60 text-sm\">Portfolio Value</p>\n            </div>\n            <p className=\"text-2xl font-bold text-white\">{formatCurrency(portfolio.totalValue)}</p>\n          </div>\n          \n          <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <TrendingUp className=\"w-5 h-5 text-green-400\" />\n              <p className=\"text-white/60 text-sm\">Total Gain/Loss</p>\n            </div>\n            <p className={cn(\"text-2xl font-bold\", portfolio.totalGainLoss >= 0 ? \"text-green-400\" : \"text-red-400\")}>\n              {formatCurrency(portfolio.totalGainLoss)}\n            </p>\n            <p className={cn(\"text-sm\", portfolio.totalGainLossPercent >= 0 ? \"text-green-400\" : \"text-red-400\")}>\n              {portfolio.totalGainLossPercent >= 0 ? '+' : ''}{portfolio.totalGainLossPercent.toFixed(2)}%\n            </p>\n          </div>\n          \n          <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <Target className=\"w-5 h-5 text-purple-400\" />\n              <p className=\"text-white/60 text-sm\">Asset Allocation</p>\n            </div>\n            <p className=\"text-lg font-bold text-white\">{portfolio.allocation.stocks.toFixed(0)}% Stocks</p>\n            <p className=\"text-sm text-white/60\">{portfolio.allocation.bonds.toFixed(0)}% Bonds, {portfolio.allocation.other.toFixed(0)}% Other</p>\n          </div>\n          \n          <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />\n              <p className=\"text-white/60 text-sm\">Risk Score</p>\n            </div>\n            <p className=\"text-2xl font-bold text-yellow-400\">{portfolio.riskMetrics.concentrationRisk.toFixed(0)}</p>\n            <p className=\"text-sm text-white/60\">Concentration Risk</p>\n          </div>\n        </div>\n      )}\n\n      {/* Investment Recommendations */}\n      {recommendations.length > 0 && (\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <h2 className=\"text-xl font-bold text-white mb-4 flex items-center gap-3\">\n            <Target className=\"w-6 h-6 text-blue-400\" />\n            Investment Recommendations\n          </h2>\n          \n          <div className=\"space-y-4\">\n            {recommendations.map((rec, index) => (\n              <div key={index} className=\"bg-white/[0.03] rounded-xl border border-white/[0.05] p-4\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      <span className={cn(\n                        \"text-xs px-2 py-1 rounded-lg border font-medium\",\n                        getPriorityColor(rec.priority)\n                      )}>\n                        {rec.priority.toUpperCase()}\n                      </span>\n                      <h3 className=\"font-semibold text-white\">{rec.title}</h3>\n                    </div>\n                    <p className=\"text-white/70 text-sm mb-3\">{rec.description}</p>\n                    \n                    <div className=\"space-y-1\">\n                      <p className=\"text-white/80 text-sm font-medium\">Action Items:</p>\n                      <ul className=\"space-y-1\">\n                        {rec.actionItems.map((item: string, itemIndex: number) => (\n                          <li key={itemIndex} className=\"text-white/60 text-sm flex items-start gap-2\">\n                            <span className=\"text-blue-400 mt-1\">•</span>\n                            <span>{item}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className=\"text-green-400 text-sm font-medium\">{rec.potentialBenefit}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Portfolio Component */}\n      <InvestmentPortfolio familyId=\"demo_family\" />\n    </div>\n  );\n};\n\nexport default InvestmentTrackerPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/layout/AppShell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/performance/PerformanceMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/reports/BudgetReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/savings/GoalCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/savings/GoalCreator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/savings/SavingsGoals.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9085,9088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9085,9088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Plus, Target, TrendingUp, Award, Calendar, DollarSign, Percent, MoreHorizontal, Clock, CheckCircle2, ArrowLeft } from 'lucide-react';\nimport GoalCard from './GoalCard';\nimport GoalCreator from './GoalCreator';\nimport SavingsInsights from './SavingsInsights';\nimport { savingsGoalsService } from '@/services/savingsGoalsService';\nimport { SavingsGoal, SavingsInsight } from '@/types/savingsGoals';\nimport { cn } from '@/lib/utils';\nimport { useNavigate } from 'react-router-dom';\n\nconst SavingsGoals = () => {\n  const [goals, setGoals] = useState<SavingsGoal[]>([]);\n  const [insights, setInsights] = useState<SavingsInsight[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showGoalCreator, setShowGoalCreator] = useState(false);\n  const [activeTab, setActiveTab] = useState<'goals' | 'insights'>('goals');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    loadSavingsData();\n  }, []);\n\n  const loadSavingsData = async () => {\n    try {\n      const [goalsData, insightsData] = await Promise.all([\n        savingsGoalsService.getGoals(),\n        savingsGoalsService.getSavingsInsights()\n      ]);\n      setGoals(goalsData);\n      setInsights(insightsData);\n    } catch (error) {\n      console.error('Failed to load savings data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoalCreated = (newGoal: SavingsGoal) => {\n    setGoals([...goals, newGoal]);\n    setShowGoalCreator(false);\n    loadSavingsData(); // Refresh insights\n  };\n\n  const handleGoalUpdate = () => {\n    loadSavingsData();\n  };\n\n  const totalSaved = goals.reduce((sum, goal) => sum + goal.currentAmount, 0);\n  const totalTargets = goals.reduce((sum, goal) => sum + goal.targetAmount, 0);\n  const completedGoals = goals.filter(goal => goal.isCompleted).length;\n  const overallProgress = totalTargets > 0 ? (totalSaved / totalTargets) * 100 : 0;\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatProgress = (current: number, target: number) => {\n    return target > 0 ? ((current / target) * 100).toFixed(1) : '0';\n  };\n\n  const getProgressColor = (percentage: number) => {\n    if (percentage >= 100) return 'text-green-400';\n    if (percentage >= 75) return 'text-lime-400';\n    if (percentage >= 50) return 'text-yellow-400';\n    if (percentage >= 25) return 'text-orange-400';\n    return 'text-red-400';\n  };\n\n  const getProgressBarColor = (percentage: number) => {\n    if (percentage >= 100) return 'bg-green-500';\n    if (percentage >= 75) return 'bg-lime-500';\n    if (percentage >= 50) return 'bg-yellow-500';\n    if (percentage >= 25) return 'bg-orange-500';\n    return 'bg-red-500';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-black text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 py-8 sm:px-6 lg:px-8\">\n          <div className=\"space-y-6 animate-pulse\">\n            <div className=\"h-8 bg-white/[0.05] rounded w-48\"></div>\n            <div className=\"h-32 bg-white/[0.02] rounded-xl border border-white/[0.08]\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <div className=\"h-48 bg-white/[0.02] rounded-xl border border-white/[0.08]\"></div>\n              <div className=\"h-48 bg-white/[0.02] rounded-xl border border-white/[0.08]\"></div>\n              <div className=\"h-48 bg-white/[0.02] rounded-xl border border-white/[0.08]\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <div className=\"max-w-7xl mx-auto px-4 py-8 sm:px-6 lg:px-8 space-y-8\">\n        {/* Back */}\n        <button\n          onClick={() => navigate('/')}\n          className=\"liquid-glass-button flex items-center gap-2 px-3 py-2 rounded-xl text-white/80 hover:text-white transition-colors mb-4\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n          <span className=\"text-sm\">Dashboard</span>\n        </button>\n\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white flex items-center space-x-3\">\n              <Target className=\"w-8 h-8 text-green-400\" />\n              <span>Savings Goals</span>\n            </h1>\n            <p className=\"text-gray-400 mt-2\">Track your progress and build wealth systematically</p>\n          </div>\n          \n          <button\n            onClick={() => setShowGoalCreator(true)}\n            className=\"liquid-glass-button px-6 py-3 rounded-xl font-medium hover:bg-white/[0.08] transition-all flex items-center space-x-2 text-white border border-white/[0.12] backdrop-blur-md\"\n          >\n            <Plus className=\"w-5 h-5\" />\n            <span>New Goal</span>\n          </button>\n        </div>\n\n        {/* Overview Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <div className=\"bg-white/[0.02] rounded-xl border border-white/[0.08] p-6\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-10 h-10 bg-green-500/20 rounded-lg flex items-center justify-center\">\n                <DollarSign className=\"w-5 h-5 text-green-400\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-white\">Total Saved</h3>\n                <p className=\"text-sm text-gray-400\">Across all goals</p>\n              </div>\n            </div>\n            <div className=\"text-2xl font-bold text-white mb-1\">\n              {formatCurrency(totalSaved)}\n            </div>\n            <div className=\"text-sm text-green-400\">\n              {formatProgress(totalSaved, totalTargets)}% of target\n            </div>\n          </div>\n\n          <div className=\"bg-white/[0.02] rounded-xl border border-white/[0.08] p-6\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-10 h-10 bg-blue-500/20 rounded-lg flex items-center justify-center\">\n                <Target className=\"w-5 h-5 text-blue-400\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-white\">Total Targets</h3>\n                <p className=\"text-sm text-gray-400\">Goal amounts</p>\n              </div>\n            </div>\n            <div className=\"text-2xl font-bold text-white mb-1\">\n              {formatCurrency(totalTargets)}\n            </div>\n            <div className=\"text-sm text-blue-400\">\n              {goals.length} active goals\n            </div>\n          </div>\n\n          <div className=\"bg-white/[0.02] rounded-xl border border-white/[0.08] p-6\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-10 h-10 bg-purple-500/20 rounded-lg flex items-center justify-center\">\n                <Award className=\"w-5 h-5 text-purple-400\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-white\">Completed</h3>\n                <p className=\"text-sm text-gray-400\">Goals achieved</p>\n              </div>\n            </div>\n            <div className=\"text-2xl font-bold text-white mb-1\">\n              {completedGoals}\n            </div>\n            <div className=\"text-sm text-purple-400\">\n              {goals.length > 0 ? ((completedGoals / goals.length) * 100).toFixed(0) : 0}% success rate\n            </div>\n          </div>\n\n          <div className=\"bg-white/[0.02] rounded-xl border border-white/[0.08] p-6\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-10 h-10 bg-orange-500/20 rounded-lg flex items-center justify-center\">\n                <Percent className=\"w-5 h-5 text-orange-400\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-white\">Overall Progress</h3>\n                <p className=\"text-sm text-gray-400\">Average completion</p>\n              </div>\n            </div>\n            <div className={cn('text-2xl font-bold mb-1', getProgressColor(overallProgress))}>\n              {overallProgress.toFixed(0)}%\n            </div>\n            <div className=\"w-full bg-white/[0.1] rounded-full h-2\">\n              <div \n                className={cn('h-2 rounded-full transition-all duration-500', getProgressBarColor(overallProgress))}\n                style={{ width: `${Math.min(overallProgress, 100)}%` }}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Tab Navigation */}\n        <div className=\"flex space-x-1 bg-white/[0.05] p-1 rounded-xl\">\n          {[\n            { id: 'goals', label: 'My Goals', icon: Target },\n            { id: 'insights', label: 'Insights', icon: TrendingUp }\n          ].map((tab) => {\n            const IconComponent = tab.icon;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id as any)}\n                className={cn(\n                  'flex-1 py-3 px-4 text-sm font-medium rounded-lg transition-all flex items-center justify-center space-x-2',\n                  activeTab === tab.id\n                    ? 'bg-blue-500 text-white shadow-lg border border-blue-400/30'\n                    : 'text-gray-400 hover:text-white hover:bg-white/[0.05]'\n                )}\n              >\n                <IconComponent className=\"w-4 h-4\" />\n                <span>{tab.label}</span>\n              </button>\n            );\n          })}\n        </div>\n\n        {/* Content */}\n        {activeTab === 'goals' && (\n          <div>\n            {goals.length === 0 ? (\n              <div className=\"bg-white/[0.02] rounded-xl border border-white/[0.08] p-12 text-center\">\n                <Target className=\"w-16 h-16 text-gray-400 mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-xl font-bold text-white mb-2\">No Savings Goals Yet</h3>\n                <p className=\"text-gray-400 mb-6 max-w-md mx-auto\">\n                  Start your financial journey by creating your first savings goal. Whether it's an emergency fund, vacation, or major purchase, we'll help you get there.\n                </p>\n                <button\n                  onClick={() => setShowGoalCreator(true)}\n                  className=\"liquid-glass-button px-6 py-3 rounded-xl font-medium hover:bg-white/[0.08] transition-all flex items-center space-x-2 mx-auto text-white border border-white/[0.12] backdrop-blur-md\"\n                >\n                  <Plus className=\"w-5 h-5\" />\n                  <span>Create Your First Goal</span>\n                </button>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n                {goals.map((goal) => {\n                  const progress = parseFloat(formatProgress(goal.currentAmount, goal.targetAmount));\n                  const daysLeft = Math.ceil((new Date(goal.targetDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));\n                  \n                  return (\n                    <div key={goal.id} className=\"bg-white/[0.02] rounded-xl border border-white/[0.08] p-6 hover:bg-white/[0.03] transition-all\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"text-2xl\">{goal.icon}</div>\n                          <div>\n                            <h3 className=\"font-semibold text-white\">{goal.name}</h3>\n                            <p className=\"text-sm text-gray-400\">{goal.category}</p>\n                          </div>\n                        </div>\n                        {goal.isCompleted ? (\n                          <CheckCircle2 className=\"w-6 h-6 text-green-400\" />\n                        ) : (\n                          <button className=\"p-2 hover:bg-white/[0.05] rounded-lg transition-colors\">\n                            <MoreHorizontal className=\"w-4 h-4 text-gray-400\" />\n                          </button>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-4\">\n                        {/* Progress */}\n                        <div>\n                          <div className=\"flex justify-between items-center mb-2\">\n                            <span className=\"text-sm text-gray-400\">Progress</span>\n                            <span className={cn('text-sm font-medium', getProgressColor(progress))}>\n                              {progress}%\n                            </span>\n                          </div>\n                          <div className=\"w-full bg-white/[0.1] rounded-full h-2\">\n                            <div \n                              className={cn('h-2 rounded-full transition-all duration-500', getProgressBarColor(progress))}\n                              style={{ width: `${Math.min(progress, 100)}%` }}\n                            />\n                          </div>\n                        </div>\n\n                        {/* Amount Details */}\n                        <div className=\"flex justify-between items-center\">\n                          <div>\n                            <div className=\"text-lg font-bold text-white\">\n                              {formatCurrency(goal.currentAmount)}\n                            </div>\n                            <div className=\"text-sm text-gray-400\">\n                              of {formatCurrency(goal.targetAmount)}\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"text-sm text-gray-400\">\n                              {formatCurrency(goal.targetAmount - goal.currentAmount)} left\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Time Details */}\n                        <div className=\"flex items-center justify-between pt-3 border-t border-white/[0.05]\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Calendar className=\"w-4 h-4 text-gray-400\" />\n                            <span className=\"text-sm text-gray-400\">\n                              {new Date(goal.targetDate).toLocaleDateString()}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Clock className=\"w-4 h-4 text-gray-400\" />\n                            <span className={cn(\n                              'text-sm',\n                              daysLeft < 30 ? 'text-orange-400' : daysLeft < 90 ? 'text-yellow-400' : 'text-gray-400'\n                            )}>\n                              {daysLeft > 0 ? `${daysLeft} days left` : 'Overdue'}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeTab === 'insights' && (\n          <div className=\"space-y-6\">\n            {insights.length === 0 ? (\n              <div className=\"bg-white/[0.02] rounded-xl border border-white/[0.08] p-12 text-center\">\n                <TrendingUp className=\"w-16 h-16 text-gray-400 mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-xl font-bold text-white mb-2\">No Insights Available</h3>\n                <p className=\"text-gray-400\">Create some goals to get personalized insights and recommendations.</p>\n              </div>\n            ) : (\n              <SavingsInsights insights={insights} />\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Goal Creator Modal */}\n      {showGoalCreator && (\n        <GoalCreator\n          onClose={() => setShowGoalCreator(false)}\n          onGoalCreated={handleGoalCreated}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SavingsGoals;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/savings/SavingsInsights.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/shared/ConfigurableInsightsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/shared/SharedScoreCircle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/shared/VueniConsolidationDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/shared/VueniDesignSystem.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":377,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":377,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo, forwardRef } from 'react';\nimport { cn } from '@/lib/utils';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\n\n// Enhanced Glass Card Component\nexport interface VueniGlassCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: 'default' | 'subtle' | 'prominent' | 'enterprise' | 'mobile';\n  blur?: 'none' | 'sm' | 'md' | 'lg' | 'xl';\n  opacity?: 'low' | 'medium' | 'high';\n  glow?: boolean;\n  animated?: boolean;\n  children: React.ReactNode;\n}\n\nconst glassVariants = {\n  default: 'bg-black/20 backdrop-blur-sm border-white/10',\n  subtle: 'bg-white/5 backdrop-blur-sm border-white/5',\n  prominent: 'bg-black/30 backdrop-blur-md border-white/20',\n  enterprise: 'bg-slate-900/80 backdrop-blur-sm border-slate-600/30',\n  mobile: 'bg-black/25 backdrop-blur-sm border-white/10',\n};\n\nconst blurClasses = {\n  none: 'backdrop-blur-none',\n  sm: 'backdrop-blur-sm',\n  md: 'backdrop-blur-md',\n  lg: 'backdrop-blur-lg',\n  xl: 'backdrop-blur-xl',\n};\n\nconst opacityClasses = {\n  low: 'bg-opacity-10',\n  medium: 'bg-opacity-20',\n  high: 'bg-opacity-30',\n};\n\nexport const VueniGlassCard = memo(forwardRef<HTMLDivElement, VueniGlassCardProps>(({\n  variant = 'default',\n  blur = 'sm',\n  opacity = 'medium',\n  glow = false,\n  animated = false,\n  children,\n  className,\n  ...props\n}, ref) => {\n  return (\n    <Card\n      ref={ref}\n      className={cn(\n        glassVariants[variant],\n        blurClasses[blur],\n        glow && 'shadow-lg shadow-white/5',\n        animated && 'transition-all duration-300 hover:bg-opacity-30 hover:border-white/30',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Card>\n  );\n}));\n\nVueniGlassCard.displayName = 'VueniGlassCard';\n\n// Enhanced Button Component\nexport interface VueniButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'default' | 'glass' | 'glow' | 'minimal' | 'enterprise';\n  size?: 'sm' | 'md' | 'lg';\n  glowing?: boolean;\n  loading?: boolean;\n  icon?: React.ReactNode;\n  children: React.ReactNode;\n}\n\nconst buttonVariants = {\n  default: 'bg-white/10 hover:bg-white/20 border-white/20 text-white',\n  glass: 'bg-white/5 hover:bg-white/15 backdrop-blur-sm border-white/10 text-white',\n  glow: 'bg-gradient-to-r from-blue-500/20 to-purple-500/20 hover:from-blue-500/30 hover:to-purple-500/30 border-blue-500/30 text-white shadow-lg shadow-blue-500/10',\n  minimal: 'bg-transparent hover:bg-white/5 border-transparent text-white/70 hover:text-white',\n  enterprise: 'bg-slate-700/50 hover:bg-slate-600/50 border-slate-600/30 text-slate-200',\n};\n\nconst buttonSizes = {\n  sm: 'px-3 py-1.5 text-xs',\n  md: 'px-4 py-2 text-sm',\n  lg: 'px-6 py-3 text-base',\n};\n\nexport const VueniButton = memo(forwardRef<HTMLButtonElement, VueniButtonProps>(({\n  variant = 'default',\n  size = 'md',\n  glowing = false,\n  loading = false,\n  icon,\n  children,\n  className,\n  disabled,\n  ...props\n}, ref) => {\n  return (\n    <Button\n      ref={ref}\n      className={cn(\n        buttonVariants[variant],\n        buttonSizes[size],\n        glowing && 'animate-pulse',\n        loading && 'opacity-70 cursor-not-allowed',\n        'transition-all duration-200 backdrop-blur-sm',\n        className\n      )}\n      disabled={disabled || loading}\n      {...props}\n    >\n      <div className=\"flex items-center gap-2\">\n        {loading && (\n          <div className=\"w-3 h-3 border border-white/30 border-t-white rounded-full animate-spin\" />\n        )}\n        {icon && !loading && icon}\n        {children}\n      </div>\n    </Button>\n  );\n}));\n\nVueniButton.displayName = 'VueniButton';\n\n// Metric Display Component\nexport interface VueniMetricProps {\n  label: string;\n  value: string | number;\n  change?: number;\n  trend?: 'up' | 'down' | 'stable';\n  icon?: React.ReactNode;\n  variant?: 'default' | 'compact' | 'prominent';\n  color?: 'blue' | 'green' | 'red' | 'purple' | 'yellow';\n}\n\nconst metricColors = {\n  blue: 'text-blue-400 bg-blue-500/20',\n  green: 'text-green-400 bg-green-500/20', \n  red: 'text-red-400 bg-red-500/20',\n  purple: 'text-purple-400 bg-purple-500/20',\n  yellow: 'text-yellow-400 bg-yellow-500/20',\n};\n\nexport const VueniMetric = memo(({\n  label,\n  value,\n  change,\n  trend,\n  icon,\n  variant = 'default',\n  color = 'blue',\n}: VueniMetricProps) => {\n  if (variant === 'compact') {\n    return (\n      <div className=\"flex items-center gap-2\">\n        {icon && (\n          <div className={cn('p-1.5 rounded', metricColors[color])}>\n            <div className=\"w-3 h-3\">{icon}</div>\n          </div>\n        )}\n        <div>\n          <div className=\"text-white font-medium text-sm\">{value}</div>\n          <div className=\"text-white/60 text-xs\">{label}</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (variant === 'prominent') {\n    return (\n      <VueniGlassCard className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-white/70 text-sm font-medium\">{label}</h3>\n          {icon && (\n            <div className={cn('p-2 rounded-lg', metricColors[color])}>\n              <div className=\"w-5 h-5\">{icon}</div>\n            </div>\n          )}\n        </div>\n        <div className=\"flex items-end justify-between\">\n          <div className=\"text-white font-bold text-2xl\">{value}</div>\n          {change !== undefined && (\n            <div className={cn(\n              'flex items-center text-sm',\n              change > 0 ? 'text-green-400' : change < 0 ? 'text-red-400' : 'text-white/60'\n            )}>\n              {change > 0 ? '↑' : change < 0 ? '↓' : '→'} {Math.abs(change)}%\n            </div>\n          )}\n        </div>\n      </VueniGlassCard>\n    );\n  }\n\n  return (\n    <div className=\"flex items-center gap-3\">\n      {icon && (\n        <div className={cn('p-2 rounded-lg', metricColors[color])}>\n          <div className=\"w-4 h-4\">{icon}</div>\n        </div>\n      )}\n      <div>\n        <div className=\"text-white font-semibold\">{value}</div>\n        <div className=\"text-white/60 text-sm\">{label}</div>\n        {change !== undefined && (\n          <div className={cn(\n            'text-xs',\n            change > 0 ? 'text-green-400' : change < 0 ? 'text-red-400' : 'text-white/60'\n          )}>\n            {change > 0 ? '+' : ''}{change}%\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nVueniMetric.displayName = 'VueniMetric';\n\n// Status Badge Component\nexport interface VueniStatusBadgeProps {\n  status: 'success' | 'warning' | 'error' | 'info' | 'pending';\n  children: React.ReactNode;\n  variant?: 'solid' | 'outline' | 'ghost';\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst statusColors = {\n  success: 'bg-green-500/20 text-green-400 border-green-500/30',\n  warning: 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30',\n  error: 'bg-red-500/20 text-red-400 border-red-500/30',\n  info: 'bg-blue-500/20 text-blue-400 border-blue-500/30',\n  pending: 'bg-gray-500/20 text-gray-400 border-gray-500/30',\n};\n\nconst statusSizes = {\n  sm: 'px-2 py-1 text-xs',\n  md: 'px-3 py-1.5 text-sm',\n  lg: 'px-4 py-2 text-base',\n};\n\nexport const VueniStatusBadge = memo(({\n  status,\n  children,\n  variant = 'solid',\n  size = 'sm',\n}: VueniStatusBadgeProps) => {\n  return (\n    <span className={cn(\n      statusColors[status],\n      statusSizes[size],\n      'rounded-full font-medium inline-flex items-center gap-1',\n      variant === 'outline' && 'bg-transparent border',\n      variant === 'ghost' && 'bg-transparent border-transparent'\n    )}>\n      {children}\n    </span>\n  );\n});\n\nVueniStatusBadge.displayName = 'VueniStatusBadge';\n\n// Loading Skeleton Component\nexport interface VueniSkeletonProps {\n  variant?: 'text' | 'circular' | 'rectangular';\n  width?: string | number;\n  height?: string | number;\n  className?: string;\n}\n\nexport const VueniSkeleton = memo(({\n  variant = 'text',\n  width,\n  height,\n  className,\n}: VueniSkeletonProps) => {\n  const baseClasses = 'animate-pulse bg-white/10 backdrop-blur-sm';\n  \n  if (variant === 'circular') {\n    return (\n      <div \n        className={cn(baseClasses, 'rounded-full', className)}\n        style={{ width, height }}\n      />\n    );\n  }\n  \n  if (variant === 'rectangular') {\n    return (\n      <div \n        className={cn(baseClasses, 'rounded-lg', className)}\n        style={{ width, height }}\n      />\n    );\n  }\n  \n  return (\n    <div \n      className={cn(baseClasses, 'rounded h-4', className)}\n      style={{ width }}\n    />\n  );\n});\n\nVueniSkeleton.displayName = 'VueniSkeleton';\n\n// Layout Components\nexport const VueniContainer = memo(({ \n  children, \n  className,\n  ...props \n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('container mx-auto px-4 sm:px-6 lg:px-8', className)} {...props}>\n    {children}\n  </div>\n));\n\nVueniContainer.displayName = 'VueniContainer';\n\nexport const VueniSection = memo(({ \n  children, \n  className,\n  ...props \n}: React.HTMLAttributes<HTMLElement>) => (\n  <section className={cn('py-8 lg:py-12', className)} {...props}>\n    {children}\n  </section>\n));\n\nVueniSection.displayName = 'VueniSection';\n\nexport const VueniGrid = memo(({ \n  children, \n  cols = '1',\n  gap = '6',\n  className,\n  ...props \n}: React.HTMLAttributes<HTMLDivElement> & {\n  cols?: '1' | '2' | '3' | '4' | '5' | '6';\n  gap?: '1' | '2' | '3' | '4' | '5' | '6' | '8' | '10' | '12';\n}) => (\n  <div \n    className={cn(\n      `grid grid-cols-1 gap-${gap}`,\n      cols === '2' && 'md:grid-cols-2',\n      cols === '3' && 'md:grid-cols-2 lg:grid-cols-3',\n      cols === '4' && 'md:grid-cols-2 lg:grid-cols-4',\n      cols === '5' && 'md:grid-cols-3 lg:grid-cols-5',\n      cols === '6' && 'md:grid-cols-3 lg:grid-cols-6',\n      className\n    )} \n    {...props}\n  >\n    {children}\n  </div>\n));\n\nVueniGrid.displayName = 'VueniGrid';\n\n// Export all design system components\nexport const VueniDesignSystem = {\n  GlassCard: VueniGlassCard,\n  Button: VueniButton,\n  Metric: VueniMetric,\n  StatusBadge: VueniStatusBadge,\n  Skeleton: VueniSkeleton,\n  Container: VueniContainer,\n  Section: VueniSection,\n  Grid: VueniGrid,\n} as const;\n\n// Design tokens for consistent styling\nexport const vueniTokens = {\n  colors: {\n    glass: {\n      subtle: 'bg-white/5 border-white/5',\n      default: 'bg-black/20 border-white/10',\n      prominent: 'bg-black/30 border-white/20',\n    },\n    status: {\n      success: 'text-green-400 bg-green-500/20',\n      warning: 'text-yellow-400 bg-yellow-500/20',\n      error: 'text-red-400 bg-red-500/20',\n      info: 'text-blue-400 bg-blue-500/20',\n    },\n  },\n  spacing: {\n    xs: '0.25rem',\n    sm: '0.5rem', \n    md: '1rem',\n    lg: '1.5rem',\n    xl: '2rem',\n    xxl: '3rem',\n  },\n  blur: {\n    sm: 'backdrop-blur-sm',\n    md: 'backdrop-blur-md',\n    lg: 'backdrop-blur-lg',\n  },\n} as const;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/shared/VueniFeatureFlags.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":74,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":74,"endColumn":32},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":232,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":232,"endColumn":29},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":241,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":241,"endColumn":35},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":246,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":246,"endColumn":32},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":251,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":251,"endColumn":28},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":256,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":256,"endColumn":34},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":261,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":261,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":313,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":313,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9204,9207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9204,9207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":329,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":329,"endColumn":32},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":346,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":346,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { TransactionVariant } from './UnifiedTransactionList';\nimport { InsightsVariant } from './VueniUnifiedInsightsPage';\n\n// Feature flag configuration interface\nexport interface FeatureFlags {\n  // Component variants\n  transactionListVariant: TransactionVariant;\n  insightsPageVariant: InsightsVariant;\n  \n  // Feature toggles\n  enableAdvancedScoring: boolean;\n  enableRealTimeUpdates: boolean;\n  enableAnimations: boolean;\n  enableMobileOptimizations: boolean;\n  enableExperimentalFeatures: boolean;\n  enablePerformanceMode: boolean;\n  enableDebugMode: boolean;\n  \n  // UI preferences\n  compactMode: boolean;\n  showScoreCircles: boolean;\n  showCategoryIcons: boolean;\n  enableDarkMode: boolean;\n  enableGlassEffects: boolean;\n  \n  // Data and privacy\n  enableDataExport: boolean;\n  enableOfflineMode: boolean;\n  enableAnalytics: boolean;\n  \n  // Performance settings\n  maxTransactionsPerPage: number;\n  enableVirtualScrolling: boolean;\n  enableLazyLoading: boolean;\n  refreshInterval: number;\n}\n\n// Default feature flag values\nconst defaultFeatureFlags: FeatureFlags = {\n  // Component variants\n  transactionListVariant: 'default',\n  insightsPageVariant: 'standard',\n  \n  // Feature toggles\n  enableAdvancedScoring: true,\n  enableRealTimeUpdates: false,\n  enableAnimations: true,\n  enableMobileOptimizations: true,\n  enableExperimentalFeatures: false,\n  enablePerformanceMode: false,\n  enableDebugMode: false,\n  \n  // UI preferences\n  compactMode: false,\n  showScoreCircles: true,\n  showCategoryIcons: true,\n  enableDarkMode: true,\n  enableGlassEffects: true,\n  \n  // Data and privacy\n  enableDataExport: false,\n  enableOfflineMode: false,\n  enableAnalytics: false,\n  \n  // Performance settings\n  maxTransactionsPerPage: 50,\n  enableVirtualScrolling: false,\n  enableLazyLoading: true,\n  refreshInterval: 30000,\n};\n\n// Environment-specific presets\nexport const featureFlagPresets = {\n  development: {\n    ...defaultFeatureFlags,\n    enableDebugMode: true,\n    enableExperimentalFeatures: true,\n    enableAnalytics: false,\n  },\n  staging: {\n    ...defaultFeatureFlags,\n    enableExperimentalFeatures: true,\n    enableAnalytics: true,\n    enableDataExport: true,\n  },\n  production: {\n    ...defaultFeatureFlags,\n    enableDebugMode: false,\n    enableExperimentalFeatures: false,\n    enableAnalytics: true,\n    enablePerformanceMode: true,\n  },\n  mobile: {\n    ...defaultFeatureFlags,\n    transactionListVariant: 'mobile',\n    insightsPageVariant: 'mobile',\n    compactMode: true,\n    enableMobileOptimizations: true,\n    enableVirtualScrolling: true,\n    enableGlassEffects: false,\n    maxTransactionsPerPage: 25,\n  },\n  enterprise: {\n    ...defaultFeatureFlags,\n    transactionListVariant: 'enterprise',\n    insightsPageVariant: 'comprehensive',\n    enableAdvancedScoring: true,\n    enableDataExport: true,\n    enableAnalytics: true,\n    enableVirtualScrolling: true,\n    maxTransactionsPerPage: 100,\n  },\n  minimal: {\n    ...defaultFeatureFlags,\n    transactionListVariant: 'clean',\n    insightsPageVariant: 'optimized',\n    enableAnimations: false,\n    showScoreCircles: false,\n    enableGlassEffects: false,\n    enablePerformanceMode: true,\n    maxTransactionsPerPage: 25,\n  },\n} as const;\n\n// Feature flag context\ninterface FeatureFlagContextType {\n  flags: FeatureFlags;\n  updateFlag: <K extends keyof FeatureFlags>(key: K, value: FeatureFlags[K]) => void;\n  updateFlags: (newFlags: Partial<FeatureFlags>) => void;\n  resetFlags: () => void;\n  loadPreset: (preset: keyof typeof featureFlagPresets) => void;\n  isFeatureEnabled: (feature: keyof FeatureFlags) => boolean;\n}\n\nconst FeatureFlagContext = createContext<FeatureFlagContextType | undefined>(undefined);\n\n// Feature flag provider component\ninterface FeatureFlagProviderProps {\n  children: ReactNode;\n  initialFlags?: Partial<FeatureFlags>;\n  preset?: keyof typeof featureFlagPresets;\n  persistToStorage?: boolean;\n  storageKey?: string;\n}\n\nexport const FeatureFlagProvider: React.FC<FeatureFlagProviderProps> = ({\n  children,\n  initialFlags = {},\n  preset,\n  persistToStorage = true,\n  storageKey = 'vueni-feature-flags',\n}) => {\n  // Initialize flags with preset, initial flags, and stored flags\n  const [flags, setFlags] = useState<FeatureFlags>(() => {\n    let baseFlags = defaultFeatureFlags;\n    \n    // Apply preset if provided\n    if (preset && featureFlagPresets[preset]) {\n      baseFlags = { ...baseFlags, ...featureFlagPresets[preset] };\n    }\n    \n    // Apply initial flags\n    baseFlags = { ...baseFlags, ...initialFlags };\n    \n    // Load from storage if enabled\n    if (persistToStorage && typeof window !== 'undefined') {\n      try {\n        const stored = localStorage.getItem(storageKey);\n        if (stored) {\n          const storedFlags = JSON.parse(stored);\n          baseFlags = { ...baseFlags, ...storedFlags };\n        }\n      } catch (error) {\n        console.warn('Failed to load feature flags from storage:', error);\n      }\n    }\n    \n    return baseFlags;\n  });\n\n  // Persist flags to storage when they change\n  useEffect(() => {\n    if (persistToStorage && typeof window !== 'undefined') {\n      try {\n        localStorage.setItem(storageKey, JSON.stringify(flags));\n      } catch (error) {\n        console.warn('Failed to save feature flags to storage:', error);\n      }\n    }\n  }, [flags, persistToStorage, storageKey]);\n\n  const updateFlag = <K extends keyof FeatureFlags>(key: K, value: FeatureFlags[K]) => {\n    setFlags(prev => ({ ...prev, [key]: value }));\n  };\n\n  const updateFlags = (newFlags: Partial<FeatureFlags>) => {\n    setFlags(prev => ({ ...prev, ...newFlags }));\n  };\n\n  const resetFlags = () => {\n    setFlags(defaultFeatureFlags);\n  };\n\n  const loadPreset = (presetName: keyof typeof featureFlagPresets) => {\n    const presetFlags = featureFlagPresets[presetName];\n    setFlags(prev => ({ ...prev, ...presetFlags }));\n  };\n\n  const isFeatureEnabled = (feature: keyof FeatureFlags): boolean => {\n    const value = flags[feature];\n    return typeof value === 'boolean' ? value : Boolean(value);\n  };\n\n  const contextValue: FeatureFlagContextType = {\n    flags,\n    updateFlag,\n    updateFlags,\n    resetFlags,\n    loadPreset,\n    isFeatureEnabled,\n  };\n\n  return (\n    <FeatureFlagContext.Provider value={contextValue}>\n      {children}\n    </FeatureFlagContext.Provider>\n  );\n};\n\n// Hook to use feature flags\nexport const useFeatureFlags = (): FeatureFlagContextType => {\n  const context = useContext(FeatureFlagContext);\n  if (context === undefined) {\n    throw new Error('useFeatureFlags must be used within a FeatureFlagProvider');\n  }\n  return context;\n};\n\n// Individual feature flag hooks for convenience\nexport const useTransactionVariant = () => {\n  const { flags } = useFeatureFlags();\n  return flags.transactionListVariant;\n};\n\nexport const useInsightsVariant = () => {\n  const { flags } = useFeatureFlags();\n  return flags.insightsPageVariant;\n};\n\nexport const useCompactMode = () => {\n  const { flags } = useFeatureFlags();\n  return flags.compactMode;\n};\n\nexport const useAnimationsEnabled = () => {\n  const { flags } = useFeatureFlags();\n  return flags.enableAnimations;\n};\n\nexport const usePerformanceMode = () => {\n  const { flags } = useFeatureFlags();\n  return flags.enablePerformanceMode;\n};\n\n// Feature flag debugging component (development only)\nexport const FeatureFlagDebugPanel: React.FC = () => {\n  const { flags, updateFlag, loadPreset, resetFlags } = useFeatureFlags();\n\n  if (!flags.enableDebugMode) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed bottom-4 right-4 bg-black/90 backdrop-blur-sm border border-white/20 rounded-lg p-4 max-w-sm max-h-96 overflow-y-auto z-50\">\n      <h3 className=\"text-white font-bold mb-3\">Feature Flags Debug</h3>\n      \n      <div className=\"space-y-2 mb-4\">\n        <button\n          onClick={() => loadPreset('development')}\n          className=\"w-full px-2 py-1 bg-blue-500/20 text-blue-400 rounded text-xs hover:bg-blue-500/30\"\n        >\n          Load Dev Preset\n        </button>\n        <button\n          onClick={() => loadPreset('mobile')}\n          className=\"w-full px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs hover:bg-green-500/30\"\n        >\n          Load Mobile Preset\n        </button>\n        <button\n          onClick={() => loadPreset('enterprise')}\n          className=\"w-full px-2 py-1 bg-purple-500/20 text-purple-400 rounded text-xs hover:bg-purple-500/30\"\n        >\n          Load Enterprise Preset\n        </button>\n        <button\n          onClick={resetFlags}\n          className=\"w-full px-2 py-1 bg-red-500/20 text-red-400 rounded text-xs hover:bg-red-500/30\"\n        >\n          Reset to Default\n        </button>\n      </div>\n\n      <div className=\"space-y-2 text-xs\">\n        {Object.entries(flags).map(([key, value]) => (\n          <div key={key} className=\"flex items-center justify-between\">\n            <span className=\"text-white/70 truncate\">{key}</span>\n            {typeof value === 'boolean' ? (\n              <input\n                type=\"checkbox\"\n                checked={value}\n                onChange={(e) => updateFlag(key as keyof FeatureFlags, e.target.checked as any)}\n                className=\"ml-2\"\n              />\n            ) : (\n              <span className=\"text-white/50 text-xs ml-2 truncate\">\n                {String(value)}\n              </span>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// HOC for feature-gated components\nexport function withFeatureFlag<P extends object>(\n  Component: React.ComponentType<P>,\n  featureKey: keyof FeatureFlags,\n  fallback?: React.ComponentType<P> | null\n) {\n  return function FeatureGatedComponent(props: P) {\n    const { isFeatureEnabled } = useFeatureFlags();\n    \n    if (!isFeatureEnabled(featureKey)) {\n      return fallback ? React.createElement(fallback, props) : null;\n    }\n    \n    return React.createElement(Component, props);\n  };\n}\n\n// Utility function to check feature flags outside of React components\nexport const checkFeatureFlag = (flags: FeatureFlags, feature: keyof FeatureFlags): boolean => {\n  const value = flags[feature];\n  return typeof value === 'boolean' ? value : Boolean(value);\n};\n\n// Export types for external use\nexport type { FeatureFlags, FeatureFlagContextType };","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/shared/VueniUnifiedInsightsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5637,5640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5637,5640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":209,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6175,6178],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6175,6178],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":222,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6539,6542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6539,6542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":704,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":704,"endColumn":29}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, Suspense, lazy, useCallback } from 'react';\nimport { Heart, Leaf, DollarSign, TrendingUp, TrendingDown, Calendar, BarChart3, Settings, Filter, Eye, EyeOff, Download, Zap, Target, Activity, Shield, PiggyBank, ChevronRight } from 'lucide-react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { cn } from '@/lib/utils';\nimport { SharedScoreCircle, ScoreGroup } from './SharedScoreCircle';\nimport { formatPercentage, getScoreColor } from '@/utils/formatters';\n\n// Lazy load heavy components for performance\nconst TimeSeriesChart = lazy(() => import('@/components/insights/TimeSeriesChart'));\nconst SpendingTrendsChart = lazy(() => import('@/components/insights/SpendingTrendsChart'));\nconst CategoryTrendsChart = lazy(() => import('@/components/insights/CategoryTrendsChart'));\nconst FinancialCard = lazy(() => import('@/components/insights/FinancialCard'));\nconst ComprehensiveWellnessCard = lazy(() => import('@/components/insights/components/ComprehensiveWellnessCard'));\nconst ComprehensiveEcoCard = lazy(() => import('@/components/insights/components/ComprehensiveEcoCard'));\nconst AnimatedCircularProgress = lazy(() => import('@/components/insights/components/AnimatedCircularProgress'));\nconst EnhancedMetricCard = lazy(() => import('@/components/insights/components/EnhancedMetricCard'));\n\nexport interface Transaction {\n  id: string;\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n}\n\nexport interface Account {\n  id: string;\n  type: string;\n  nickname: string;\n  balance: number;\n  availableBalance: number;\n  currency: string;\n}\n\nexport type InsightsVariant = 'standard' | 'refined' | 'enhanced' | 'optimized' | 'comprehensive' | 'mobile' | 'dashboard';\nexport type ViewMode = 'overview' | 'trends' | 'financial' | 'health' | 'eco' | 'detailed';\n\ninterface LayoutConfig {\n  showHeader: boolean;\n  showTabs: boolean;\n  showScoreCards: boolean;\n  showCharts: boolean;\n  showDetailedCards: boolean;\n  showMetrics: boolean;\n  compactMode: boolean;\n  animationsEnabled: boolean;\n  autoRefresh: boolean;\n  refreshInterval: number;\n  showSettings: boolean;\n  enableExport: boolean;\n  enableFilters: boolean;\n}\n\nconst variantLayouts: Record<InsightsVariant, LayoutConfig> = {\n  standard: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: false,\n    refreshInterval: 30000,\n    showSettings: false,\n    enableExport: false,\n    enableFilters: false,\n  },\n  refined: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: true,\n    animationsEnabled: true,\n    autoRefresh: false,\n    refreshInterval: 30000,\n    showSettings: true,\n    enableExport: true,\n    enableFilters: true,\n  },\n  enhanced: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n    refreshInterval: 30000,\n    showSettings: true,\n    enableExport: true,\n    enableFilters: true,\n  },\n  optimized: {\n    showHeader: false,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: false,\n    showDetailedCards: false,\n    showMetrics: true,\n    compactMode: true,\n    animationsEnabled: false,\n    autoRefresh: false,\n    refreshInterval: 60000,\n    showSettings: false,\n    enableExport: false,\n    enableFilters: false,\n  },\n  comprehensive: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n    refreshInterval: 15000,\n    showSettings: true,\n    enableExport: true,\n    enableFilters: true,\n  },\n  mobile: {\n    showHeader: false,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: false,\n    showDetailedCards: true,\n    showMetrics: false,\n    compactMode: true,\n    animationsEnabled: true,\n    autoRefresh: false,\n    refreshInterval: 60000,\n    showSettings: false,\n    enableExport: false,\n    enableFilters: false,\n  },\n  dashboard: {\n    showHeader: true,\n    showTabs: false,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: false,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n    refreshInterval: 10000,\n    showSettings: false,\n    enableExport: true,\n    enableFilters: false,\n  },\n};\n\nexport interface VueniUnifiedInsightsPageProps {\n  transactions: Transaction[];\n  accounts: Account[];\n  variant?: InsightsVariant;\n  customLayout?: Partial<LayoutConfig>;\n  className?: string;\n  onExportData?: () => void;\n  defaultTab?: ViewMode;\n  enableFeatureFlags?: boolean;\n}\n\nconst LoadingSpinner = () => (\n  <div className=\"flex items-center justify-center py-12\">\n    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white/50\"></div>\n  </div>\n);\n\n// Enhanced Score Card Component\nconst EnhancedScoreDisplay = ({ scores, layout, animationsEnabled }: any) => {\n  if (layout.compactMode) {\n    return (\n      <div className=\"flex justify-center gap-6\">\n        <ScoreGroup \n          scores={scores}\n          size=\"md\"\n          showLabels={true}\n          animated={animationsEnabled}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6\">\n      {Object.entries(scores).map(([type, score]) => (\n        <div key={type} className=\"text-center\">\n          <SharedScoreCircle \n            score={score as number}\n            type={type as any}\n            size=\"lg\"\n            label={type === 'health' ? 'Wellness Score' : type === 'eco' ? 'Eco Impact' : 'Financial Health'}\n            showLabel={true}\n            animated={animationsEnabled}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Quick Metrics Component\nconst QuickMetrics = ({ financialData, wellnessData, ecoData, layout }: any) => {\n  const metrics = [\n    {\n      icon: DollarSign,\n      label: 'Monthly Spending',\n      value: `$${financialData.monthlySpending.toLocaleString()}`,\n      change: financialData.spendingRatio,\n      color: 'blue',\n    },\n    {\n      icon: Heart,\n      label: 'Wellness Investment',\n      value: `$${Object.values(wellnessData.monthlySpending).reduce((sum: number, amount: number) => sum + amount, 0).toLocaleString()}`,\n      change: 12,\n      color: 'red',\n    },\n    {\n      icon: Leaf,\n      label: 'CO₂ Saved',\n      value: `${ecoData.monthlyImpact.co2Saved}kg`,\n      change: 8,\n      color: 'green',\n    },\n    {\n      icon: PiggyBank,\n      label: 'Savings Rate',\n      value: `${financialData.savingsRate.toFixed(1)}%`,\n      change: financialData.savingsRate > 20 ? 5 : -3,\n      color: 'purple',\n    },\n  ];\n\n  if (layout.compactMode) {\n    return (\n      <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3\">\n        {metrics.map((metric, index) => (\n          <Card key={index} className=\"bg-black/20 backdrop-blur-sm border-white/10 p-3\">\n            <div className=\"flex items-center gap-2\">\n              <metric.icon className=\"h-4 w-4 text-white/70\" />\n              <span className=\"text-xs text-white/60\">{metric.label}</span>\n            </div>\n            <div className=\"mt-1\">\n              <span className=\"text-white font-semibold text-sm\">{metric.value}</span>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {metrics.map((metric, index) => (\n        <Card key={index} className=\"bg-black/20 backdrop-blur-sm border-white/10 p-4\">\n          <div className=\"flex items-center space-x-3 mb-3\">\n            <div className={`p-2 rounded-lg bg-${metric.color}-500/20`}>\n              <metric.icon className={`w-5 h-5 text-${metric.color}-400`} />\n            </div>\n            <div>\n              <h4 className=\"font-bold text-white text-sm\">{metric.label}</h4>\n              <p className=\"text-white/70 text-xs\">This month</p>\n            </div>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-white font-bold text-lg\">{metric.value}</span>\n            <div className={cn(\n              \"flex items-center text-xs\",\n              metric.change > 0 ? \"text-green-400\" : \"text-red-400\"\n            )}>\n              {metric.change > 0 ? <TrendingUp className=\"w-3 h-3 mr-1\" /> : <TrendingDown className=\"w-3 h-3 mr-1\" />}\n              {Math.abs(metric.change)}%\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n};\n\nexport const VueniUnifiedInsightsPage = React.memo<VueniUnifiedInsightsPageProps>(({\n  transactions,\n  accounts,\n  variant = 'standard',\n  customLayout,\n  className,\n  onExportData,\n  defaultTab = 'overview',\n  enableFeatureFlags = false,\n}) => {\n  const [activeTab, setActiveTab] = useState<ViewMode>(defaultTab);\n  const [layout, setLayout] = useState<LayoutConfig>(() => ({\n    ...variantLayouts[variant],\n    ...customLayout,\n  }));\n  const [scores, setScores] = useState({ financial: 0, health: 0, eco: 0 });\n  const [isLoading, setIsLoading] = useState(true);\n  const [showLayoutSettings, setShowLayoutSettings] = useState(false);\n  const [isVisible, setIsVisible] = useState(true);\n\n  // Memoized data calculations\n  const financialData = useMemo(() => {\n    const monthlyIncome = transactions\n      .filter(t => t.amount > 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const monthlySpending = Math.abs(transactions\n      .filter(t => t.amount < 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0));\n\n    const totalBalance = accounts.reduce((sum, acc) => sum + acc.balance, 0);\n    const spendingRatio = monthlyIncome > 0 ? (monthlySpending / monthlyIncome) * 100 : 0;\n    const emergencyFundMonths = monthlySpending > 0 ? totalBalance / monthlySpending : 0;\n    const savingsRate = monthlyIncome > 0 ? ((monthlyIncome - monthlySpending) / monthlyIncome) * 100 : 0;\n    \n    const creditCardDebt = Math.abs(accounts\n      .filter(acc => acc.type === 'Credit Card' && acc.balance < 0)\n      .reduce((sum, acc) => sum + acc.balance, 0));\n    const debtToIncomeRatio = monthlyIncome > 0 ? (creditCardDebt / (monthlyIncome * 12)) * 100 : 0;\n    \n    const completedTransactions = transactions.filter(t => t.status === 'completed').length;\n    const totalTransactions = transactions.length;\n    const billPaymentScore = totalTransactions > 0 ? (completedTransactions / totalTransactions) * 100 : 100;\n\n    return {\n      overallScore: scores.financial,\n      monthlyIncome,\n      monthlySpending,\n      totalBalance,\n      savingsRate,\n      spendingRatio,\n      emergencyFundMonths,\n      debtToIncomeRatio,\n      billPaymentScore,\n    };\n  }, [transactions, accounts, scores.financial]);\n\n  const wellnessData = useMemo(() => ({\n    overallScore: scores.health,\n    monthlySpending: {\n      fitness: 85,\n      nutrition: 38,\n      healthcare: 340,\n      wellness: 75,\n      supplements: 45,\n      mentalHealth: 120\n    },\n    healthTrends: {\n      exercise: 'up' as const,\n      nutrition: 'stable' as const,\n      sleep: 'stable' as const,\n      stress: 'down' as const\n    }\n  }), [scores.health]);\n\n  const ecoData = useMemo(() => ({\n    overallScore: scores.eco,\n    monthlyImpact: {\n      co2Saved: 48,\n      treesEquivalent: 2,\n      waterSaved: 384,\n      energySaved: 256\n    },\n    monthlySpending: {\n      sustainableFood: 127,\n      renewableEnergy: 85,\n      ecoTransport: 45,\n      greenProducts: 120,\n      carbonOffset: 25,\n      conservation: 60\n    },\n    environmentalTrends: {\n      carbonFootprint: 'down' as const,\n      sustainability: 'up' as const,\n      renewable: 'up' as const,\n      waste: 'stable' as const\n    }\n  }), [scores.eco]);\n\n  // Load scores with error handling\n  useEffect(() => {\n    const loadScores = async () => {\n      setIsLoading(true);\n      try {\n        // Simulate score calculation\n        await new Promise(resolve => setTimeout(resolve, 500));\n        setScores({\n          financial: 72 + Math.floor(Math.random() * 20),\n          health: 75 + Math.floor(Math.random() * 20),\n          eco: 82 + Math.floor(Math.random() * 15),\n        });\n      } catch (error) {\n        console.error('Error loading scores:', error);\n        setScores({ financial: 72, health: 75, eco: 82 });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadScores();\n  }, [transactions, accounts]);\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (!layout.autoRefresh) return;\n\n    const interval = setInterval(() => {\n      setScores(prev => ({\n        financial: Math.max(0, Math.min(100, prev.financial + (Math.random() - 0.5) * 4)),\n        health: Math.max(0, Math.min(100, prev.health + (Math.random() - 0.5) * 4)),\n        eco: Math.max(0, Math.min(100, prev.eco + (Math.random() - 0.5) * 4)),\n      }));\n    }, layout.refreshInterval);\n\n    return () => clearInterval(interval);\n  }, [layout.autoRefresh, layout.refreshInterval]);\n\n  const tabs = [\n    { id: 'overview' as ViewMode, label: 'Overview', icon: TrendingUp },\n    { id: 'trends' as ViewMode, label: 'Trends', icon: BarChart3 },\n    { id: 'financial' as ViewMode, label: 'Financial', icon: DollarSign },\n    { id: 'health' as ViewMode, label: 'Health', icon: Heart },\n    { id: 'eco' as ViewMode, label: 'Eco', icon: Leaf },\n    { id: 'detailed' as ViewMode, label: 'Detailed', icon: Activity },\n  ];\n\n  const handleLayoutChange = useCallback((key: keyof LayoutConfig, value: boolean | number) => {\n    setLayout(prev => ({ ...prev, [key]: value }));\n  }, []);\n\n  if (isLoading) {\n    return (\n      <Card className={cn('w-full text-white bg-black/20 backdrop-blur-sm', className)}>\n        <div className=\"flex items-center justify-center py-20\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white/50\"></div>\n            <span className=\"text-white text-lg\">Loading insights...</span>\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <div className={cn('w-full text-white space-y-6', className)} data-testid=\"vueni-unified-insights\">\n      {/* Header */}\n      {layout.showHeader && (\n        <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className={cn(\n                'font-bold text-white mb-2',\n                layout.compactMode ? 'text-xl' : 'text-3xl lg:text-4xl'\n              )}>\n                Financial Insights\n              </h1>\n              <p className=\"text-white/70 text-sm lg:text-base\">\n                {variant === 'comprehensive' ? 'Complete analysis of your financial ecosystem' :\n                 variant === 'enhanced' ? 'Advanced insights with real-time monitoring' :\n                 variant === 'refined' ? 'Streamlined view of your financial health' :\n                 variant === 'mobile' ? 'Your finances at a glance' :\n                 'Comprehensive analysis of your financial health, wellness spending, and environmental impact'}\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setIsVisible(!isVisible)}\n                className=\"text-white/70 hover:text-white\"\n              >\n                {isVisible ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </Button>\n              \n              {layout.enableExport && onExportData && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={onExportData}\n                  className=\"text-white/70 hover:text-white\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                </Button>\n              )}\n              \n              {layout.showSettings && enableFeatureFlags && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setShowLayoutSettings(!showLayoutSettings)}\n                  className=\"text-white/70 hover:text-white\"\n                >\n                  <Settings className=\"h-4 w-4\" />\n                </Button>\n              )}\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Layout Settings */}\n      {showLayoutSettings && enableFeatureFlags && (\n        <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-4\">\n          <h3 className=\"text-lg font-semibold text-white mb-4\">Layout Settings</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Compact Mode</span>\n              <Switch\n                checked={layout.compactMode}\n                onCheckedChange={(checked) => handleLayoutChange('compactMode', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Animations</span>\n              <Switch\n                checked={layout.animationsEnabled}\n                onCheckedChange={(checked) => handleLayoutChange('animationsEnabled', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Auto Refresh</span>\n              <Switch\n                checked={layout.autoRefresh}\n                onCheckedChange={(checked) => handleLayoutChange('autoRefresh', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Show Charts</span>\n              <Switch\n                checked={layout.showCharts}\n                onCheckedChange={(checked) => handleLayoutChange('showCharts', checked)}\n              />\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Tab Navigation */}\n      {layout.showTabs && (\n        <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-2\">\n          <div className=\"flex flex-wrap justify-center gap-2\">\n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <Button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  variant={activeTab === tab.id ? \"default\" : \"ghost\"}\n                  className={cn(\n                    'flex items-center space-x-2 transition-all duration-300',\n                    layout.compactMode ? 'px-3 py-2 text-xs' : 'px-4 py-2 text-sm',\n                    activeTab === tab.id\n                      ? 'bg-white/20 text-white border-white/30'\n                      : 'text-white/70 hover:text-white/90 hover:bg-white/10'\n                  )}\n                >\n                  <Icon className={cn(\"w-4 h-4\", layout.compactMode && \"w-3 h-3\")} />\n                  <span>{tab.label}</span>\n                </Button>\n              );\n            })}\n          </div>\n        </Card>\n      )}\n\n      {/* Content */}\n      <div className={cn('transition-all duration-300', !isVisible && 'blur-sm opacity-50')}>\n        {activeTab === 'overview' && (\n          <div className=\"space-y-6\">\n            {/* Score Overview */}\n            {layout.showScoreCards && (\n              <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-6\">\n                <h3 className={cn(\n                  \"font-bold text-white mb-6 text-center\",\n                  layout.compactMode ? \"text-lg\" : \"text-xl\"\n                )}>\n                  Your Overall Scores\n                </h3>\n                <EnhancedScoreDisplay \n                  scores={scores} \n                  layout={layout}\n                  animationsEnabled={layout.animationsEnabled}\n                />\n              </Card>\n            )}\n\n            {/* Quick Metrics */}\n            {layout.showMetrics && (\n              <QuickMetrics \n                financialData={financialData}\n                wellnessData={wellnessData}\n                ecoData={ecoData}\n                layout={layout}\n              />\n            )}\n          </div>\n        )}\n\n        {activeTab === 'trends' && layout.showCharts && (\n          <div className=\"space-y-6\">\n            <Suspense fallback={<LoadingSpinner />}>\n              <TimeSeriesChart \n                data={[]} \n                title=\"Score Progress Over Time (Past 12 Months)\"\n              />\n              <SpendingTrendsChart \n                data={[]} \n                title=\"Monthly Financial Overview\"\n              />\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <CategoryTrendsChart \n                  data={[]} \n                  type=\"health\"\n                  title=\"Health & Wellness Spending Trends\"\n                />\n                <CategoryTrendsChart \n                  data={[]} \n                  type=\"eco\"\n                  title=\"Eco & Sustainability Spending Trends\"\n                />\n              </div>\n            </Suspense>\n          </div>\n        )}\n\n        {activeTab === 'financial' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <FinancialCard data={financialData} />\n          </Suspense>\n        )}\n\n        {activeTab === 'health' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <ComprehensiveWellnessCard \n              score={wellnessData.overallScore}\n              healthKitData={{}}\n              spendingCategories={wellnessData.monthlySpending}\n              trends={wellnessData.healthTrends}\n            />\n          </Suspense>\n        )}\n\n        {activeTab === 'eco' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <ComprehensiveEcoCard \n              score={ecoData.overallScore}\n              ecoMetrics={{}}\n              spendingCategories={ecoData.monthlySpending}\n              monthlyImpact={ecoData.monthlyImpact}\n              trends={ecoData.environmentalTrends}\n            />\n          </Suspense>\n        )}\n\n        {activeTab === 'detailed' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n            <Suspense fallback={<LoadingSpinner />}>\n              <FinancialCard data={financialData} />\n              <ComprehensiveWellnessCard \n                score={wellnessData.overallScore}\n                healthKitData={{}}\n                spendingCategories={wellnessData.monthlySpending}\n                trends={wellnessData.healthTrends}\n              />\n              <ComprehensiveEcoCard \n                score={ecoData.overallScore}\n                ecoMetrics={{}}\n                spendingCategories={ecoData.monthlySpending}\n                monthlyImpact={ecoData.monthlyImpact}\n                trends={ecoData.environmentalTrends}\n              />\n            </Suspense>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nVueniUnifiedInsightsPage.displayName = 'VueniUnifiedInsightsPage';\n\n// Export preset configurations\nexport const insightsPresets = {\n  dashboard: {\n    variant: 'dashboard' as InsightsVariant,\n    defaultTab: 'overview' as ViewMode,\n  },\n  mobile: {\n    variant: 'mobile' as InsightsVariant, \n    defaultTab: 'overview' as ViewMode,\n  },\n  detailed: {\n    variant: 'comprehensive' as InsightsVariant,\n    defaultTab: 'detailed' as ViewMode,\n  },\n  minimal: {\n    variant: 'optimized' as InsightsVariant,\n    defaultTab: 'overview' as ViewMode,\n  },\n  analytics: {\n    variant: 'enhanced' as InsightsVariant,\n    defaultTab: 'trends' as ViewMode,\n  },\n} as const;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/shared/VueniUnifiedTransactionList.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":472,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":472,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, memo } from 'react';\nimport { VueniGlassCard, VueniButton, VueniStatusBadge } from './VueniDesignSystem';\nimport { SharedScoreCircle } from './SharedScoreCircle';\nimport { \n  Search, \n  Filter, \n  Download, \n  ChevronDown, \n  TrendingUp, \n  TrendingDown, \n  Minus,\n  Calendar,\n  Eye,\n  MoreVertical\n} from 'lucide-react';\n\nexport type TransactionVariant = 'default' | 'apple' | 'clean' | 'polished' | 'enterprise' | 'mobile';\n\nexport interface VueniTransaction {\n  id: string;\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n  scores?: {\n    health: number;\n    eco: number;\n    financial: number;\n  };\n  description?: string;\n  reference?: string;\n  tags?: string[];\n}\n\nexport interface VueniTransactionFeatures {\n  showScores?: boolean;\n  showCategories?: boolean;\n  searchable?: boolean;\n  filterable?: boolean;\n  compactMode?: boolean;\n  animationsEnabled?: boolean;\n  groupByDate?: boolean;\n  virtualScrolling?: boolean;\n  exportEnabled?: boolean;\n}\n\nexport interface VueniUnifiedTransactionListProps {\n  transactions: VueniTransaction[];\n  variant?: TransactionVariant;\n  features?: VueniTransactionFeatures;\n  currency?: string;\n  className?: string;\n  onTransactionClick?: (transaction: VueniTransaction) => void;\n  onTransactionAction?: (action: string, transaction: VueniTransaction) => void;\n  onExportData?: () => void;\n}\n\nconst defaultFeatures: VueniTransactionFeatures = {\n  showScores: true,\n  showCategories: true,\n  searchable: true,\n  filterable: true,\n  compactMode: false,\n  animationsEnabled: true,\n  groupByDate: true,\n  virtualScrolling: false,\n  exportEnabled: true,\n};\n\n// Variant-specific styling configurations\nconst variantConfigs = {\n  default: {\n    containerClass: 'space-y-1',\n    itemClass: 'flex items-center gap-4 p-4 hover:bg-white/[0.02] rounded-lg transition-all duration-200 cursor-pointer',\n    headerClass: 'text-xl font-semibold text-white',\n    dateHeaderClass: 'text-sm font-medium text-white/60 mb-3 px-2',\n  },\n  apple: {\n    containerClass: 'space-y-2',\n    itemClass: 'flex items-center gap-3 p-3 bg-white/[0.03] hover:bg-white/[0.06] rounded-xl transition-all duration-300 cursor-pointer border border-white/[0.05]',\n    headerClass: 'text-xl font-semibold text-white',\n    dateHeaderClass: 'text-sm font-medium text-white/70 mb-4 px-3 uppercase tracking-wide',\n  },\n  clean: {\n    containerClass: 'space-y-0 divide-y divide-white/[0.05]',\n    itemClass: 'flex items-center gap-4 p-4 hover:bg-white/[0.01] transition-all duration-150 cursor-pointer first:rounded-t-lg last:rounded-b-lg',\n    headerClass: 'text-lg font-medium text-white',\n    dateHeaderClass: 'text-sm font-medium text-white/50 mb-2 px-4',\n  },\n  polished: {\n    containerClass: 'space-y-3',\n    itemClass: 'flex items-center gap-4 p-5 bg-gradient-to-r from-white/[0.02] to-transparent hover:from-white/[0.04] rounded-lg border-l-2 border-transparent hover:border-blue-500/50 transition-all duration-200 cursor-pointer',\n    headerClass: 'text-xl font-bold text-white',\n    dateHeaderClass: 'text-sm font-semibold text-white/60 mb-3 px-5 border-b border-white/[0.1] pb-2',\n  },\n  enterprise: {\n    containerClass: 'space-y-0',\n    itemClass: 'flex items-center gap-6 p-4 hover:bg-white/[0.02] transition-all duration-100 cursor-pointer border-b border-white/[0.05] last:border-b-0',\n    headerClass: 'text-lg font-semibold text-white tracking-tight',\n    dateHeaderClass: 'text-xs font-medium text-white/50 mb-2 px-4 uppercase tracking-wider',\n  },\n  mobile: {\n    containerClass: 'space-y-2',\n    itemClass: 'flex items-center gap-3 p-3 bg-white/[0.04] hover:bg-white/[0.06] rounded-lg transition-all duration-200 cursor-pointer active:scale-98',\n    headerClass: 'text-lg font-semibold text-white',\n    dateHeaderClass: 'text-sm font-medium text-white/60 mb-3 px-3',\n  },\n};\n\nconst VueniTransactionItem = memo(({ \n  transaction, \n  variant = 'default',\n  features = defaultFeatures,\n  currency = 'USD',\n  onClick,\n  onAction\n}: {\n  transaction: VueniTransaction;\n  variant: TransactionVariant;\n  features: VueniTransactionFeatures;\n  currency: string;\n  onClick?: (transaction: VueniTransaction) => void;\n  onAction?: (action: string, transaction: VueniTransaction) => void;\n}) => {\n  const config = variantConfigs[variant];\n\n  const formatAmount = (amount: number) => {\n    const formatted = Math.abs(amount).toLocaleString('en-US', {\n      style: 'currency',\n      currency,\n      minimumFractionDigits: 2\n    });\n    return amount < 0 ? `-${formatted}` : `+${formatted}`;\n  };\n\n  const getAmountColor = (amount: number) => {\n    if (amount > 0) return '#10B981'; // Green for income\n    if (amount < 0) return '#EF4444'; // Red for expenses\n    return '#6B7280'; // Gray for neutral\n  };\n\n  const getStatusIcon = (amount: number) => {\n    if (amount > 0) return <TrendingUp className=\"w-4 h-4\" />;\n    if (amount < 0) return <TrendingDown className=\"w-4 h-4\" />;\n    return <Minus className=\"w-4 h-4\" />;\n  };\n\n  return (\n    <div \n      className={`group ${config.itemClass} ${features.animationsEnabled ? 'transition-all duration-200' : ''}`}\n      onClick={() => onClick?.(transaction)}\n    >\n      {/* Status Indicator */}\n      <div className=\"flex-shrink-0\">\n        <VueniStatusBadge \n          status={transaction.status === 'completed' ? 'success' : \n                 transaction.status === 'pending' ? 'warning' : 'error'}\n          variant={variant === 'enterprise' ? 'minimal' : 'default'}\n        />\n      </div>\n\n      {/* Category Icon */}\n      {variant !== 'clean' && (\n        <div className=\"w-10 h-10 rounded-lg bg-white/[0.06] flex items-center justify-center flex-shrink-0\">\n          <div \n            className=\"w-4 h-4 flex items-center justify-center\"\n            style={{ color: transaction.category.color || getAmountColor(transaction.amount) }}\n          >\n            {getStatusIcon(transaction.amount)}\n          </div>\n        </div>\n      )}\n\n      {/* Transaction Details */}\n      <div className=\"flex-1 min-w-0\">\n        <h4 className={`font-medium text-white truncate group-hover:text-blue-300 transition-colors ${\n          features.compactMode ? 'text-sm' : 'text-base'\n        }`}>\n          {transaction.merchant}\n        </h4>\n        <div className={`flex items-center gap-2 mt-1 ${features.compactMode ? 'text-xs' : 'text-sm'}`}>\n          {features.showCategories && (\n            <>\n              <span className=\"text-white/60\">{transaction.category.name}</span>\n              <span className=\"text-white/40\">•</span>\n            </>\n          )}\n          <span className=\"text-white/40\">\n            {new Date(transaction.date).toLocaleDateString()}\n          </span>\n          {transaction.reference && variant === 'enterprise' && (\n            <>\n              <span className=\"text-white/40\">•</span>\n              <span className=\"text-white/40 text-xs\">{transaction.reference}</span>\n            </>\n          )}\n        </div>\n        {transaction.description && (variant === 'polished' || variant === 'enterprise') && (\n          <p className=\"text-xs text-white/50 mt-1 truncate\">{transaction.description}</p>\n        )}\n      </div>\n\n      {/* Amount */}\n      <div className=\"text-right flex-shrink-0\">\n        <div \n          className={`font-semibold ${features.compactMode ? 'text-base' : 'text-lg'}`}\n          style={{ color: getAmountColor(transaction.amount) }}\n        >\n          {formatAmount(transaction.amount)}\n        </div>\n        {!features.compactMode && (\n          <div className=\"text-xs text-white/40 mt-1 capitalize\">\n            {transaction.status}\n          </div>\n        )}\n      </div>\n\n      {/* Score Circles */}\n      {features.showScores && transaction.scores && (\n        <div className=\"flex items-center gap-2 flex-shrink-0 ml-4\">\n          <SharedScoreCircle \n            scores={[\n              { value: transaction.scores.health, type: 'health' as const },\n              { value: transaction.scores.eco, type: 'eco' as const },\n              { value: transaction.scores.financial, type: 'financial' as const }\n            ]}\n            size={features.compactMode ? 'small' : 'medium'}\n            variant={variant}\n          />\n        </div>\n      )}\n\n      {/* Actions */}\n      {(variant === 'enterprise' || variant === 'polished') && (\n        <div className=\"flex-shrink-0 opacity-0 group-hover:opacity-100 transition-opacity\">\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onAction?.('view-details', transaction);\n            }}\n            className=\"p-1 rounded hover:bg-white/[0.1] transition-colors\"\n          >\n            <Eye className=\"w-4 h-4 text-white/60\" />\n          </button>\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onAction?.('more-options', transaction);\n            }}\n            className=\"p-1 rounded hover:bg-white/[0.1] transition-colors ml-1\"\n          >\n            <MoreVertical className=\"w-4 h-4 text-white/60\" />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n});\n\nexport const VueniUnifiedTransactionList: React.FC<VueniUnifiedTransactionListProps> = memo(({\n  transactions,\n  variant = 'default',\n  features = defaultFeatures,\n  currency = 'USD',\n  className,\n  onTransactionClick,\n  onTransactionAction,\n  onExportData\n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [selectedStatus, setSelectedStatus] = useState('all');\n\n  const config = variantConfigs[variant];\n  const activeFeatures = { ...defaultFeatures, ...features };\n\n  // Process and filter transactions\n  const processedTransactions = useMemo(() => {\n    const filtered = transactions.filter(transaction => {\n      const matchesSearch = !activeFeatures.searchable || \n        transaction.merchant.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        transaction.category.name.toLowerCase().includes(searchQuery.toLowerCase());\n      \n      const matchesCategory = selectedCategory === 'all' || \n        transaction.category.name === selectedCategory;\n      \n      const matchesStatus = selectedStatus === 'all' || \n        transaction.status === selectedStatus;\n      \n      return matchesSearch && matchesCategory && matchesStatus;\n    });\n\n    // Sort by date (newest first)\n    return filtered.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }, [transactions, searchQuery, selectedCategory, selectedStatus, activeFeatures.searchable]);\n\n  // Group transactions by date\n  const groupedTransactions = useMemo(() => {\n    if (!activeFeatures.groupByDate) {\n      return { 'All Transactions': processedTransactions };\n    }\n\n    return processedTransactions.reduce((groups, transaction) => {\n      const date = new Date(transaction.date).toDateString();\n      if (!groups[date]) {\n        groups[date] = [];\n      }\n      groups[date].push(transaction);\n      return groups;\n    }, {} as Record<string, VueniTransaction[]>);\n  }, [processedTransactions, activeFeatures.groupByDate]);\n\n  const formatDateHeader = (dateString: string) => {\n    if (!activeFeatures.groupByDate) return dateString;\n    \n    const date = new Date(dateString);\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    if (date.toDateString() === today.toDateString()) {\n      return 'Today';\n    } else if (date.toDateString() === yesterday.toDateString()) {\n      return 'Yesterday';\n    } else {\n      return date.toLocaleDateString('en-US', {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric'\n      });\n    }\n  };\n\n  const categories = useMemo(() => {\n    const cats = Array.from(new Set(transactions.map(t => t.category.name)));\n    return ['all', ...cats];\n  }, [transactions]);\n\n  const statuses = ['all', 'completed', 'pending', 'failed'];\n\n  return (\n    <VueniGlassCard variant={variant === 'apple' ? 'prominent' : 'default'} className={className}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className={config.headerClass}>\n          Transactions ({processedTransactions.length})\n        </h2>\n        <div className=\"flex items-center gap-3\">\n          {activeFeatures.exportEnabled && (\n            <VueniButton \n              variant=\"glass\" \n              size=\"sm\"\n              onClick={onExportData}\n            >\n              <Download className=\"w-4 h-4\" />\n            </VueniButton>\n          )}\n          {activeFeatures.filterable && (\n            <VueniButton variant=\"glass\" size=\"sm\">\n              <Filter className=\"w-4 h-4\" />\n            </VueniButton>\n          )}\n        </div>\n      </div>\n\n      {/* Filters */}\n      {(activeFeatures.searchable || activeFeatures.filterable) && (\n        <div className=\"flex flex-col gap-4 mb-6 sm:flex-row\">\n          {/* Search */}\n          {activeFeatures.searchable && (\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white/40\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search transactions...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 bg-white/[0.06] border border-white/[0.08] rounded-lg text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all\"\n              />\n            </div>\n          )}\n\n          {/* Filters */}\n          {activeFeatures.filterable && (\n            <div className=\"flex gap-3\">\n              {/* Category Filter */}\n              <div className=\"relative\">\n                <select\n                  value={selectedCategory}\n                  onChange={(e) => setSelectedCategory(e.target.value)}\n                  className=\"appearance-none pl-4 pr-10 py-2 bg-white/[0.06] border border-white/[0.08] rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all min-w-[140px]\"\n                >\n                  {categories.map(category => (\n                    <option key={category} value={category} className=\"bg-gray-900\">\n                      {category === 'all' ? 'All Categories' : category}\n                    </option>\n                  ))}\n                </select>\n                <ChevronDown className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white/40 pointer-events-none\" />\n              </div>\n\n              {/* Status Filter */}\n              <div className=\"relative\">\n                <select\n                  value={selectedStatus}\n                  onChange={(e) => setSelectedStatus(e.target.value)}\n                  className=\"appearance-none pl-4 pr-10 py-2 bg-white/[0.06] border border-white/[0.08] rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all min-w-[120px]\"\n                >\n                  {statuses.map(status => (\n                    <option key={status} value={status} className=\"bg-gray-900\">\n                      {status === 'all' ? 'All Status' : status.charAt(0).toUpperCase() + status.slice(1)}\n                    </option>\n                  ))}\n                </select>\n                <ChevronDown className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white/40 pointer-events-none\" />\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Transaction Groups */}\n      <div className=\"space-y-6\">\n        {Object.entries(groupedTransactions).map(([date, dateTransactions]) => (\n          <div key={date}>\n            {activeFeatures.groupByDate && (\n              <h3 className={config.dateHeaderClass}>\n                {formatDateHeader(date)}\n              </h3>\n            )}\n            <div className={config.containerClass}>\n              {dateTransactions.map((transaction) => (\n                <VueniTransactionItem \n                  key={transaction.id} \n                  transaction={transaction}\n                  variant={variant}\n                  features={activeFeatures}\n                  currency={currency}\n                  onClick={onTransactionClick}\n                  onAction={onTransactionAction}\n                />\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Empty State */}\n      {processedTransactions.length === 0 && (\n        <div className=\"text-center py-12\">\n          <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-white/[0.06] flex items-center justify-center\">\n            <Calendar className=\"w-8 h-8 text-white/40\" />\n          </div>\n          <p className=\"text-white/60 mb-2\">No transactions found</p>\n          <p className=\"text-white/40 text-sm\">\n            {searchQuery || selectedCategory !== 'all' || selectedStatus !== 'all'\n              ? 'Try adjusting your search or filters'\n              : 'Your transactions will appear here'\n            }\n          </p>\n        </div>\n      )}\n    </VueniGlassCard>\n  );\n});\n\n// Preset configurations for easy deployment\nexport const transactionListPresets = {\n  dashboard: {\n    variant: 'default' as TransactionVariant,\n    features: {\n      showScores: true,\n      showCategories: true,\n      searchable: false,\n      filterable: false,\n      compactMode: true,\n      groupByDate: true,\n      exportEnabled: false,\n    }\n  },\n  fullFeatured: {\n    variant: 'polished' as TransactionVariant,\n    features: {\n      showScores: true,\n      showCategories: true,\n      searchable: true,\n      filterable: true,\n      compactMode: false,\n      groupByDate: true,\n      exportEnabled: true,\n    }\n  },\n  mobile: {\n    variant: 'mobile' as TransactionVariant,\n    features: {\n      showScores: false,\n      showCategories: true,\n      searchable: true,\n      filterable: false,\n      compactMode: true,\n      groupByDate: true,\n      exportEnabled: false,\n    }\n  },\n  enterprise: {\n    variant: 'enterprise' as TransactionVariant,\n    features: {\n      showScores: true,\n      showCategories: true,\n      searchable: true,\n      filterable: true,\n      compactMode: false,\n      groupByDate: false,\n      exportEnabled: true,\n    }\n  }\n};\n\nVueniTransactionItem.displayName = 'VueniTransactionItem';\nVueniUnifiedTransactionList.displayName = 'VueniUnifiedTransactionList';\n\nexport default VueniUnifiedTransactionList;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/shared/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/transactions/EnterpriseTransactionView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/transactions/OptimizedTransactionList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/transactions/ScoreCircle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/transactions/ScoreCircles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/transactions/ShippingInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/transactions/TransactionAmount.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/transactions/TransactionList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/transactions/TransactionMain.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/transactions/TransactionManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1516,1519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1516,1519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTransactions'. Either include it or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":71,"suggestions":[{"desc":"Update the dependencies array to be: [familyId, accountId, searchQuery, selectedCategories, dateRange, loadTransactions]","fix":{"range":[1644,1709],"text":"[familyId, accountId, searchQuery, selectedCategories, dateRange, loadTransactions]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1807,1810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1807,1810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3883,3886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3883,3886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":352,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":352,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14089,14092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14089,14092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { \n  Search, \n  Filter, \n  Download, \n  Upload, \n  Plus,\n  Edit3,\n  Trash2,\n  ArrowUpDown,\n  Calendar,\n  DollarSign,\n  Tag,\n  Settings,\n  CheckSquare,\n  Square,\n  MoreHorizontal,\n  TrendingUp,\n  ArrowLeftRight,\n  AlertCircle\n} from 'lucide-react';\nimport { Transaction, TransactionCategory } from '@/types/transactions';\nimport { transactionService } from '@/services/transactionService';\nimport { Switch } from '@/components/ui/switch';\nimport { cn } from '@/lib/utils';\n\ninterface TransactionManagerProps {\n  familyId: string;\n  accountId?: string;\n  compact?: boolean;\n}\n\nconst TransactionManager = ({ familyId, accountId, compact = false }: TransactionManagerProps) => {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [selectedTransactions, setSelectedTransactions] = useState<Set<string>>(new Set());\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategories, setSelectedCategories] = useState<TransactionCategory[]>([]);\n  const [dateRange, setDateRange] = useState<{ start: Date; end: Date } | null>(null);\n  const [showFilters, setShowFilters] = useState(false);\n  const [showBulkActions, setShowBulkActions] = useState(false);\n  const [sortBy, setSortBy] = useState<'date' | 'amount' | 'merchant'>('date');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n  const [loading, setLoading] = useState(true);\n  const [analytics, setAnalytics] = useState<any>(null);\n\n  // Load transactions on component mount and when filters change\n  useEffect(() => {\n    loadTransactions();\n  }, [familyId, accountId, searchQuery, selectedCategories, dateRange]);\n\n  const loadTransactions = async () => {\n    setLoading(true);\n    try {\n      const filters: any = {\n        query: searchQuery || undefined,\n        categories: selectedCategories.length > 0 ? selectedCategories : undefined,\n        accountIds: accountId ? [accountId] : undefined,\n        dateRange: dateRange || undefined,\n        excludeTransfers: false\n      };\n\n      const [transactionData, analyticsData] = await Promise.all([\n        transactionService.searchTransactions(familyId, filters),\n        transactionService.generateAnalytics(familyId, 'month')\n      ]);\n\n      setTransactions(transactionData);\n      setAnalytics(analyticsData);\n    } catch (error) {\n      console.error('Failed to load transactions:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sortedTransactions = useMemo(() => {\n    return [...transactions].sort((a, b) => {\n      let comparison = 0;\n      \n      switch (sortBy) {\n        case 'date':\n          comparison = a.date.getTime() - b.date.getTime();\n          break;\n        case 'amount':\n          comparison = Math.abs(a.amount) - Math.abs(b.amount);\n          break;\n        case 'merchant':\n          comparison = (a.merchantName || '').localeCompare(b.merchantName || '');\n          break;\n      }\n      \n      return sortOrder === 'desc' ? -comparison : comparison;\n    });\n  }, [transactions, sortBy, sortOrder]);\n\n  const handleSelectTransaction = useCallback((transactionId: string, selected: boolean) => {\n    const newSelected = new Set(selectedTransactions);\n    if (selected) {\n      newSelected.add(transactionId);\n    } else {\n      newSelected.delete(transactionId);\n    }\n    setSelectedTransactions(newSelected);\n    setShowBulkActions(newSelected.size > 0);\n  }, [selectedTransactions]);\n\n  const handleSelectAll = useCallback(() => {\n    if (selectedTransactions.size === transactions.length) {\n      setSelectedTransactions(new Set());\n      setShowBulkActions(false);\n    } else {\n      setSelectedTransactions(new Set(transactions.map(t => t.id)));\n      setShowBulkActions(true);\n    }\n  }, [selectedTransactions.size, transactions]);\n\n  const handleBulkUpdate = async (updates: any) => {\n    try {\n      await transactionService.bulkUpdateTransactions(\n        Array.from(selectedTransactions),\n        updates\n      );\n      await loadTransactions();\n      setSelectedTransactions(new Set());\n      setShowBulkActions(false);\n    } catch (error) {\n      console.error('Bulk update failed:', error);\n    }\n  };\n\n  const getTransactionIcon = (transaction: Transaction) => {\n    if (transaction.isTransfer) {\n      return <ArrowLeftRight className=\"w-4 h-4 text-blue-400\" />;\n    }\n    if (transaction.amount > 0) {\n      return <TrendingUp className=\"w-4 h-4 text-green-400\" />;\n    }\n    return <DollarSign className=\"w-4 h-4 text-white/70\" />;\n  };\n\n  const getCategoryColor = (category: TransactionCategory) => {\n    const colors: Record<TransactionCategory, string> = {\n      income: 'bg-green-500/20 text-green-400 border-green-500/30',\n      housing: 'bg-blue-500/20 text-blue-400 border-blue-500/30',\n      transportation: 'bg-orange-500/20 text-orange-400 border-orange-500/30',\n      food: 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30',\n      utilities: 'bg-purple-500/20 text-purple-400 border-purple-500/30',\n      insurance: 'bg-indigo-500/20 text-indigo-400 border-indigo-500/30',\n      healthcare: 'bg-red-500/20 text-red-400 border-red-500/30',\n      savings: 'bg-emerald-500/20 text-emerald-400 border-emerald-500/30',\n      debt_payments: 'bg-rose-500/20 text-rose-400 border-rose-500/30',\n      entertainment: 'bg-pink-500/20 text-pink-400 border-pink-500/30',\n      personal_care: 'bg-violet-500/20 text-violet-400 border-violet-500/30',\n      shopping: 'bg-cyan-500/20 text-cyan-400 border-cyan-500/30',\n      education: 'bg-teal-500/20 text-teal-400 border-teal-500/30',\n      gifts_donations: 'bg-amber-500/20 text-amber-400 border-amber-500/30',\n      business: 'bg-slate-500/20 text-slate-400 border-slate-500/30',\n      taxes: 'bg-red-600/20 text-red-300 border-red-600/30',\n      investments: 'bg-green-600/20 text-green-300 border-green-600/30',\n      fees: 'bg-gray-500/20 text-gray-400 border-gray-500/30',\n      transfers: 'bg-blue-500/20 text-blue-400 border-blue-500/30',\n      other: 'bg-gray-500/20 text-gray-400 border-gray-500/30'\n    };\n    return colors[category] || colors.other;\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(amount);\n  };\n\n  const formatDate = (date: Date) => {\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: date.getFullYear() !== new Date().getFullYear() ? 'numeric' : undefined\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        {[...Array(5)].map((_, i) => (\n          <div key={i} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 animate-pulse\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-12 h-12 bg-white/[0.05] rounded-2xl\"></div>\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 bg-white/[0.05] rounded w-32\"></div>\n                  <div className=\"h-3 bg-white/[0.05] rounded w-24\"></div>\n                </div>\n              </div>\n              <div className=\"h-6 bg-white/[0.05] rounded w-16\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header & Controls */}\n      {!compact && (\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-white flex items-center gap-3\">\n                <DollarSign className=\"w-7 h-7 text-blue-400\" />\n                Transactions\n              </h2>\n              <p className=\"text-white/60 mt-1\">\n                {transactions.length} transaction{transactions.length !== 1 ? 's' : ''}\n                {analytics && (\n                  <span className=\"ml-2\">\n                    • ${Math.abs(analytics.totalExpenses).toLocaleString()} spent this month\n                  </span>\n                )}\n              </p>\n            </div>\n\n            <div className=\"flex items-center gap-3\">\n              <button\n                onClick={() => setShowFilters(!showFilters)}\n                className={cn(\n                  \"liquid-glass-button px-4 py-2 rounded-xl transition-all flex items-center gap-2\",\n                  showFilters ? \"bg-blue-500/20 text-blue-400\" : \"text-white/80 hover:text-white\"\n                )}\n              >\n                <Filter className=\"w-4 h-4\" />\n                Filters\n              </button>\n\n              <button className=\"liquid-glass-button px-4 py-2 rounded-xl text-white/80 hover:text-white transition-all flex items-center gap-2\">\n                <Upload className=\"w-4 h-4\" />\n                Import\n              </button>\n\n              <button className=\"liquid-glass-button px-4 py-2 rounded-xl text-white/80 hover:text-white transition-all flex items-center gap-2\">\n                <Download className=\"w-4 h-4\" />\n                Export\n              </button>\n            </div>\n          </div>\n\n          {/* Search Bar */}\n          <div className=\"relative mb-4\">\n            <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-white/40\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search transactions, merchants, descriptions...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full pl-12 pr-4 py-3 bg-white/[0.05] border border-white/[0.08] rounded-xl text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50\"\n            />\n          </div>\n\n          {/* Advanced Filters */}\n          {showFilters && (\n            <div className=\"bg-white/[0.03] rounded-xl p-4 border border-white/[0.05] space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-white/80 mb-2\">Categories</label>\n                  <select\n                    multiple\n                    className=\"w-full bg-white/[0.05] border border-white/[0.08] rounded-lg text-white text-sm\"\n                  >\n                    {Object.values(['income', 'housing', 'food', 'transportation', 'entertainment']).map(category => (\n                      <option key={category} value={category}>\n                        {category.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-white/80 mb-2\">Date Range</label>\n                  <select className=\"w-full bg-white/[0.05] border border-white/[0.08] rounded-lg text-white text-sm py-2 px-3\">\n                    <option value=\"\">All Time</option>\n                    <option value=\"7d\">Last 7 Days</option>\n                    <option value=\"30d\">Last 30 Days</option>\n                    <option value=\"90d\">Last 90 Days</option>\n                    <option value=\"1y\">Last Year</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-white/80 mb-2\">Amount Range</label>\n                  <div className=\"flex gap-2\">\n                    <input\n                      type=\"number\"\n                      placeholder=\"Min\"\n                      className=\"flex-1 bg-white/[0.05] border border-white/[0.08] rounded-lg text-white text-sm py-2 px-3\"\n                    />\n                    <input\n                      type=\"number\"\n                      placeholder=\"Max\"\n                      className=\"flex-1 bg-white/[0.05] border border-white/[0.08] rounded-lg text-white text-sm py-2 px-3\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Switch id=\"exclude-transfers\" />\n                  <label htmlFor=\"exclude-transfers\" className=\"text-sm text-white/80\">\n                    Exclude Transfers\n                  </label>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Switch id=\"pending-only\" />\n                  <label htmlFor=\"pending-only\" className=\"text-sm text-white/80\">\n                    Pending Only\n                  </label>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Sort Controls */}\n          <div className=\"flex items-center justify-between mt-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <button\n                  onClick={handleSelectAll}\n                  className=\"p-2 rounded-lg hover:bg-white/[0.05] transition-colors\"\n                >\n                  {selectedTransactions.size === transactions.length ? (\n                    <CheckSquare className=\"w-4 h-4 text-blue-400\" />\n                  ) : selectedTransactions.size > 0 ? (\n                    <Square className=\"w-4 h-4 text-blue-400 opacity-60\" />\n                  ) : (\n                    <Square className=\"w-4 h-4 text-white/60\" />\n                  )}\n                </button>\n                {selectedTransactions.size > 0 && (\n                  <span className=\"text-sm text-white/80\">\n                    {selectedTransactions.size} selected\n                  </span>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-white/60\">Sort by:</span>\n              <select\n                value={sortBy}\n                onChange={(e) => setSortBy(e.target.value as any)}\n                className=\"bg-white/[0.05] border border-white/[0.08] rounded-lg text-white text-sm py-1 px-2\"\n              >\n                <option value=\"date\">Date</option>\n                <option value=\"amount\">Amount</option>\n                <option value=\"merchant\">Merchant</option>\n              </select>\n              <button\n                onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}\n                className=\"p-1 rounded hover:bg-white/[0.05] transition-colors\"\n              >\n                <ArrowUpDown className=\"w-4 h-4 text-white/60\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Bulk Actions Bar */}\n      {showBulkActions && (\n        <div className=\"bg-blue-500/10 border border-blue-500/20 rounded-xl p-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-400 font-medium\">\n              {selectedTransactions.size} transaction{selectedTransactions.size !== 1 ? 's' : ''} selected\n            </span>\n            \n            <div className=\"flex items-center gap-3\">\n              <select\n                onChange={(e) => e.target.value && handleBulkUpdate({ category: e.target.value })}\n                className=\"bg-white/[0.05] border border-white/[0.08] rounded-lg text-white text-sm py-2 px-3\"\n              >\n                <option value=\"\">Set Category...</option>\n                {Object.values(['income', 'housing', 'food', 'transportation', 'entertainment']).map(category => (\n                  <option key={category} value={category}>\n                    {category.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                  </option>\n                ))}\n              </select>\n              \n              <button\n                onClick={() => handleBulkUpdate({ excludeFromBudget: true })}\n                className=\"px-3 py-2 bg-white/[0.05] border border-white/[0.08] rounded-lg text-white/80 hover:text-white text-sm transition-colors\"\n              >\n                Exclude from Budget\n              </button>\n              \n              <button\n                onClick={() => setSelectedTransactions(new Set())}\n                className=\"p-2 text-white/60 hover:text-white transition-colors\"\n              >\n                ✕\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Transaction List */}\n      <div className=\"space-y-3\">\n        {sortedTransactions.length === 0 ? (\n          <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-12 text-center\">\n            <DollarSign className=\"w-16 h-16 text-white/20 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-bold text-white mb-2\">No Transactions Found</h3>\n            <p className=\"text-white/60\">\n              {searchQuery || selectedCategories.length > 0 \n                ? 'Try adjusting your search or filters'\n                : 'Your transactions will appear here once you link accounts'\n              }\n            </p>\n          </div>\n        ) : (\n          sortedTransactions.map((transaction) => (\n            <div\n              key={transaction.id}\n              className={cn(\n                \"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 hover:bg-white/[0.03] transition-all duration-300 backdrop-blur-md\",\n                selectedTransactions.has(transaction.id) && \"ring-2 ring-blue-500/50 bg-blue-500/5\"\n              )}\n            >\n              <div className=\"flex items-center gap-4\">\n                {/* Selection Checkbox */}\n                <button\n                  onClick={() => handleSelectTransaction(transaction.id, !selectedTransactions.has(transaction.id))}\n                  className=\"flex-shrink-0\"\n                >\n                  {selectedTransactions.has(transaction.id) ? (\n                    <CheckSquare className=\"w-4 h-4 text-blue-400\" />\n                  ) : (\n                    <Square className=\"w-4 h-4 text-white/40 hover:text-white/60\" />\n                  )}\n                </button>\n\n                {/* Transaction Icon */}\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-12 h-12 rounded-2xl bg-white/[0.06] flex items-center justify-center\">\n                    {getTransactionIcon(transaction)}\n                  </div>\n                </div>\n\n                {/* Transaction Details */}\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"min-w-0 flex-1\">\n                      <h4 className=\"font-semibold text-white truncate\">\n                        {transaction.merchantName || transaction.description}\n                      </h4>\n                      <div className=\"flex items-center gap-3 mt-1\">\n                        <span className={cn(\n                          \"text-xs px-2 py-1 rounded-lg border font-medium\",\n                          getCategoryColor(transaction.category)\n                        )}>\n                          {transaction.category.replace('_', ' ')}\n                        </span>\n                        <span className=\"text-xs text-white/60\">\n                          {formatDate(transaction.date)}\n                        </span>\n                        {transaction.isTransfer && (\n                          <span className=\"text-xs text-blue-400 flex items-center gap-1\">\n                            <ArrowLeftRight className=\"w-3 h-3\" />\n                            Transfer\n                          </span>\n                        )}\n                        {transaction.isPending && (\n                          <span className=\"text-xs text-orange-400 flex items-center gap-1\">\n                            <AlertCircle className=\"w-3 h-3\" />\n                            Pending\n                          </span>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"text-right flex-shrink-0 ml-4\">\n                      <p className={cn(\n                        \"font-bold text-sm\",\n                        transaction.amount > 0 ? \"text-green-400\" : \"text-white\"\n                      )}>\n                        {transaction.amount > 0 ? '+' : ''}{formatCurrency(transaction.amount)}\n                      </p>\n                      {transaction.tags.length > 0 && (\n                        <div className=\"flex items-center gap-1 mt-1 justify-end\">\n                          <Tag className=\"w-3 h-3 text-white/40\" />\n                          <span className=\"text-xs text-white/60\">\n                            {transaction.tags.slice(0, 2).join(', ')}\n                            {transaction.tags.length > 2 && '...'}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Action Menu */}\n                    <div className=\"flex-shrink-0 ml-2\">\n                      <button className=\"p-2 rounded-lg hover:bg-white/[0.05] transition-colors\">\n                        <MoreHorizontal className=\"w-4 h-4 text-white/60\" />\n                      </button>\n                    </div>\n                  </div>\n\n                  {/* Transaction Description */}\n                  {transaction.description !== transaction.merchantName && (\n                    <p className=\"text-xs text-white/60 mt-2 truncate\">\n                      {transaction.description}\n                    </p>\n                  )}\n\n                  {/* Notes */}\n                  {transaction.notes && (\n                    <p className=\"text-xs text-white/50 mt-1 italic\">\n                      {transaction.notes}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionManager;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/transactions/TransactionStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/transactions/UnifiedTransactionList.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'mergedFeatures' object makes the dependencies of useMemo Hook (at line 150) change on every render. To fix this, wrap the initialization of 'mergedFeatures' in its own useMemo() Hook.","line":106,"column":9,"nodeType":"VariableDeclarator","endLine":106,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback } from 'react';\nimport { \n  Search, \n  Filter, \n  ChevronDown, \n  TrendingUp, \n  TrendingDown, \n  Minus,\n  Calendar,\n  Download,\n  Eye,\n  EyeOff\n} from 'lucide-react';\nimport { UniversalCard } from '../ui/UniversalCard';\nimport { UniversalScoreCircle } from './UniversalScoreCircle';\nimport { cn } from '@/lib/utils';\nimport { colors } from '@/theme/colors';\n\n// Unified Transaction List that consolidates:\n// - TransactionList.tsx\n// - VueniUnifiedTransactionList.tsx\n// - OptimizedTransactionList.tsx\n// - EnterpriseTransactionView.tsx\n// - TransactionMain.tsx\n// - TransactionWithScores.tsx\n\nexport interface Transaction {\n  id: string;\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n  scores?: {\n    health: number;\n    eco: number;\n    financial: number;\n  };\n  shipping?: {\n    trackingNumber: string;\n    provider: string;\n    status: string;\n  };\n}\n\nexport type TransactionVariant = 'default' | 'clean' | 'enterprise' | 'apple' | 'modern' | 'compact';\nexport type SortField = 'date' | 'amount' | 'merchant' | 'category';\nexport type SortDirection = 'asc' | 'desc';\n\ninterface TransactionFeatures {\n  searchable?: boolean;\n  filterable?: boolean;\n  sortable?: boolean;\n  groupByDate?: boolean;\n  showCategories?: boolean;\n  showScores?: boolean;\n  showStatus?: boolean;\n  exportable?: boolean;\n  compactMode?: boolean;\n}\n\ninterface UnifiedTransactionListProps {\n  transactions: Transaction[];\n  variant?: TransactionVariant;\n  currency?: string;\n  features?: TransactionFeatures;\n  onTransactionClick?: (transaction: Transaction) => void;\n  onCategoryFilter?: (category: string) => void;\n  onExport?: () => void;\n  className?: string;\n  maxHeight?: string;\n}\n\nconst defaultFeatures: TransactionFeatures = {\n  searchable: true,\n  filterable: true,\n  sortable: true,\n  groupByDate: true,\n  showCategories: true,\n  showScores: true,\n  showStatus: true,\n  exportable: false,\n  compactMode: false,\n};\n\nexport const UnifiedTransactionList = React.memo<UnifiedTransactionListProps>(({\n  transactions,\n  variant = 'default',\n  currency = 'USD',\n  features = defaultFeatures,\n  onTransactionClick,\n  onCategoryFilter,\n  onExport,\n  className = '',\n  maxHeight = '32rem'\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [sortField, setSortField] = useState<SortField>('date');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const mergedFeatures = { ...defaultFeatures, ...features };\n\n  // Memoized filtered and sorted transactions\n  const processedTransactions = useMemo(() => {\n    let filtered = transactions;\n\n    // Search filter\n    if (mergedFeatures.searchable && searchTerm) {\n      filtered = filtered.filter(t => \n        t.merchant.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        t.category.name.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    // Category filter  \n    if (mergedFeatures.filterable && selectedCategory !== 'all') {\n      filtered = filtered.filter(t => t.category.name === selectedCategory);\n    }\n\n    // Sort\n    if (mergedFeatures.sortable) {\n      filtered.sort((a, b) => {\n        let comparison = 0;\n        \n        switch (sortField) {\n          case 'date':\n            comparison = new Date(a.date).getTime() - new Date(b.date).getTime();\n            break;\n          case 'amount':\n            comparison = Math.abs(a.amount) - Math.abs(b.amount);\n            break;\n          case 'merchant':\n            comparison = a.merchant.localeCompare(b.merchant);\n            break;\n          case 'category':\n            comparison = a.category.name.localeCompare(b.category.name);\n            break;\n        }\n        \n        return sortDirection === 'asc' ? comparison : -comparison;\n      });\n    }\n\n    return filtered;\n  }, [transactions, searchTerm, selectedCategory, sortField, sortDirection, mergedFeatures]);\n\n  // Memoized grouped transactions for date grouping\n  const groupedTransactions = useMemo(() => {\n    if (!mergedFeatures.groupByDate) return { ['']: processedTransactions };\n\n    return processedTransactions.reduce((groups, transaction) => {\n      const date = new Date(transaction.date).toDateString();\n      if (!groups[date]) {\n        groups[date] = [];\n      }\n      groups[date].push(transaction);\n      return groups;\n    }, {} as Record<string, Transaction[]>);\n  }, [processedTransactions, mergedFeatures.groupByDate]);\n\n  // Memoized categories for filter dropdown\n  const categories = useMemo(() => {\n    const uniqueCategories = Array.from(\n      new Set(transactions.map(t => t.category.name))\n    );\n    return uniqueCategories;\n  }, [transactions]);\n\n  // Optimized event handlers\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.target.value);\n  }, []);\n\n  const handleCategoryChange = useCallback((category: string) => {\n    setSelectedCategory(category);\n    onCategoryFilter?.(category);\n  }, [onCategoryFilter]);\n\n  const handleTransactionClick = useCallback((transaction: Transaction) => {\n    onTransactionClick?.(transaction);\n  }, [onTransactionClick]);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n  }, [sortField]);\n\n  // Variant-specific styles\n  const getVariantStyles = () => {\n    switch (variant) {\n      case 'clean':\n        return {\n          container: 'bg-transparent border-0',\n          item: 'hover:bg-white/5 border-b border-white/5 last:border-b-0',\n          spacing: 'py-3 px-4'\n        };\n      case 'enterprise':\n        return {\n          container: 'bg-slate-900/50 border border-slate-700',\n          item: 'hover:bg-slate-800/50 border-b border-slate-700 last:border-b-0',\n          spacing: 'py-4 px-6'\n        };\n      case 'apple':\n        return {\n          container: 'bg-white/5 backdrop-blur-md border border-white/10',\n          item: 'hover:bg-white/8 border-b border-white/10 last:border-b-0',\n          spacing: 'py-4 px-5'\n        };\n      case 'modern':\n        return {\n          container: 'bg-gradient-to-b from-white/10 to-white/5 border border-white/20',\n          item: 'hover:bg-white/10 border-b border-white/10 last:border-b-0',\n          spacing: 'py-4 px-5'\n        };\n      case 'compact':\n        return {\n          container: 'bg-white/5 border border-white/10',\n          item: 'hover:bg-white/8 border-b border-white/5 last:border-b-0',\n          spacing: 'py-2 px-3'\n        };\n      default:\n        return {\n          container: 'bg-white/5 border border-white/20',\n          item: 'hover:bg-white/8 border-b border-white/10 last:border-b-0',\n          spacing: 'py-3 px-4'\n        };\n    }\n  };\n\n  const variantStyles = getVariantStyles();\n\n  const formatDate = (date: string) => {\n    const dateObj = new Date(date);\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    if (dateObj.toDateString() === today.toDateString()) {\n      return 'Today';\n    } else if (dateObj.toDateString() === yesterday.toDateString()) {\n      return 'Yesterday';\n    } else {\n      return dateObj.toLocaleDateString('en-US', {\n        weekday: 'short',\n        month: 'short',\n        day: 'numeric'\n      });\n    }\n  };\n\n  return (\n    <UniversalCard \n      variant=\"glass\" \n      className={cn('overflow-hidden', className, variantStyles.container)}\n    >\n      {/* Header with Search and Filters */}\n      <div className=\"p-4 border-b border-white/10\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className={cn(\n            'font-semibold text-white',\n            mergedFeatures.compactMode ? 'text-base' : 'text-lg'\n          )}>\n            Transactions\n          </h3>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"text-sm text-white/60\">\n              {processedTransactions.length} of {transactions.length}\n            </div>\n            \n            {mergedFeatures.exportable && onExport && (\n              <button\n                onClick={onExport}\n                className=\"p-2 rounded-lg bg-white/10 hover:bg-white/20 transition-colors\"\n              >\n                <Download className=\"w-4 h-4 text-white/70\" />\n              </button>\n            )}\n            \n            <button\n              onClick={() => setIsCollapsed(!isCollapsed)}\n              className=\"p-2 rounded-lg bg-white/10 hover:bg-white/20 transition-colors\"\n            >\n              {isCollapsed ? <Eye className=\"w-4 h-4 text-white/70\" /> : <EyeOff className=\"w-4 h-4 text-white/70\" />}\n            </button>\n          </div>\n        </div>\n\n        {!isCollapsed && (\n          <>\n            {/* Search and Filter Row */}\n            <div className=\"flex gap-3 mb-3\">\n              {/* Search */}\n              {mergedFeatures.searchable && (\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white/60\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search transactions...\"\n                    value={searchTerm}\n                    onChange={handleSearchChange}\n                    className=\"w-full bg-white/10 border border-white/20 rounded-lg py-2 pl-10 pr-4 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n                  />\n                </div>\n              )}\n\n              {/* Category Filter */}\n              {mergedFeatures.filterable && (\n                <div className=\"relative\">\n                  <select\n                    value={selectedCategory}\n                    onChange={(e) => handleCategoryChange(e.target.value)}\n                    className=\"bg-white/10 border border-white/20 rounded-lg py-2 pl-3 pr-8 text-white focus:outline-none focus:ring-2 focus:ring-blue-500/50 appearance-none\"\n                  >\n                    <option value=\"all\">All Categories</option>\n                    {categories.map(category => (\n                      <option key={category} value={category}>\n                        {category}\n                      </option>\n                    ))}\n                  </select>\n                  <ChevronDown className=\"absolute right-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white/60 pointer-events-none\" />\n                </div>\n              )}\n            </div>\n\n            {/* Sort Options */}\n            {mergedFeatures.sortable && (\n              <div className=\"flex gap-2\">\n                {(['date', 'amount', 'merchant', 'category'] as const).map(field => (\n                  <button\n                    key={field}\n                    onClick={() => handleSort(field)}\n                    className={cn(\n                      'px-3 py-1 rounded-lg text-xs font-medium transition-colors',\n                      sortField === field\n                        ? 'bg-blue-500/20 text-blue-400'\n                        : 'bg-white/10 text-white/60 hover:text-white/80'\n                    )}\n                  >\n                    {field.charAt(0).toUpperCase() + field.slice(1)}\n                    {sortField === field && (\n                      sortDirection === 'asc' ? \n                        <TrendingUp className=\"inline ml-1 w-3 h-3\" /> :\n                        <TrendingDown className=\"inline ml-1 w-3 h-3\" />\n                    )}\n                  </button>\n                ))}\n              </div>\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Transaction List */}\n      {!isCollapsed && (\n        <div \n          className=\"overflow-y-auto\"\n          style={{ maxHeight }}\n        >\n          {Object.entries(groupedTransactions).map(([date, groupTransactions]) => (\n            <div key={date}>\n              {/* Date Header (if grouping enabled) */}\n              {mergedFeatures.groupByDate && date && (\n                <div className=\"sticky top-0 bg-white/5 backdrop-blur-md px-4 py-2 border-b border-white/10\">\n                  <div className=\"text-sm font-medium text-white/80\">\n                    {formatDate(date)}\n                  </div>\n                </div>\n              )}\n\n              {/* Transactions in Group */}\n              {groupTransactions.map((transaction) => (\n                <TransactionItem\n                  key={transaction.id}\n                  transaction={transaction}\n                  currency={currency}\n                  features={mergedFeatures}\n                  styles={variantStyles}\n                  onClick={() => handleTransactionClick(transaction)}\n                />\n              ))}\n            </div>\n          ))}\n\n          {/* Empty State */}\n          {processedTransactions.length === 0 && (\n            <div className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-white/5 flex items-center justify-center\">\n                <Calendar className=\"w-8 h-8 text-white/40\" />\n              </div>\n              <div className=\"text-white/60 mb-2\">No transactions found</div>\n              <div className=\"text-sm text-white/40\">\n                {searchTerm || selectedCategory !== 'all' \n                  ? 'Try adjusting your search or filters'\n                  : 'Your transactions will appear here'\n                }\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </UniversalCard>\n  );\n});\n\nUnifiedTransactionList.displayName = 'UnifiedTransactionList';\n\n// Memoized Transaction Item Component\nconst TransactionItem = React.memo<{\n  transaction: Transaction;\n  currency: string;\n  features: TransactionFeatures;\n  styles: ReturnType<typeof getVariantStyles>;\n  onClick: () => void;\n}>(({ transaction, currency, features, styles, onClick }) => {\n  const formatAmount = (amount: number) => {\n    const formatted = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency,\n      minimumFractionDigits: 2\n    }).format(Math.abs(amount));\n    return amount < 0 ? `-${formatted}` : `+${formatted}`;\n  };\n\n  const getAmountColor = (amount: number) => {\n    if (amount > 0) return colors.financial.positive;\n    if (amount < 0) return colors.financial.negative;\n    return colors.financial.neutral;\n  };\n\n  const getStatusIndicatorColor = (status: string) => {\n    switch (status) {\n      case 'completed': return colors.status.success;\n      case 'pending': return colors.status.warning;\n      case 'failed': return colors.status.error;\n      default: return colors.status.neutral;\n    }\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-between cursor-pointer transition-colors',\n        styles.item,\n        styles.spacing\n      )}\n      onClick={onClick}\n      role=\"button\"\n      tabIndex={0}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          onClick();\n        }\n      }}\n    >\n      {/* Left Side */}\n      <div className=\"flex items-center space-x-3\">\n        {/* Status Indicator */}\n        {features.showStatus && (\n          <div \n            className=\"w-2 h-2 rounded-full flex-shrink-0\"\n            style={{ backgroundColor: getStatusIndicatorColor(transaction.status) }}\n          />\n        )}\n\n        {/* Category Icon */}\n        <div \n          className={cn(\n            \"rounded-lg flex items-center justify-center text-white font-semibold text-sm\",\n            features.compactMode ? \"w-8 h-8 text-xs\" : \"w-10 h-10\"\n          )}\n          style={{ backgroundColor: transaction.category.color + '30' }}\n        >\n          {transaction.merchant.charAt(0).toUpperCase()}\n        </div>\n\n        {/* Transaction Details */}\n        <div className=\"space-y-1\">\n          <div className={cn(\n            \"font-medium text-white\",\n            features.compactMode ? \"text-sm\" : \"text-base\"\n          )}>\n            {transaction.merchant}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {features.showCategories && (\n              <span className=\"text-xs text-white/60\">{transaction.category.name}</span>\n            )}\n            <span className=\"text-xs text-white/60\">{formatDate(transaction.date)}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Right Side */}\n      <div className=\"text-right space-y-1\">\n        {/* Amount */}\n        <div className={cn(\n          'font-semibold',\n          features.compactMode ? 'text-sm' : 'text-base'\n        )} style={{ color: getAmountColor(transaction.amount) }}>\n          {formatAmount(transaction.amount)}\n        </div>\n\n        {/* Scores */}\n        {features.showScores && transaction.scores && (\n          <div className=\"flex space-x-1\">\n            <UniversalScoreCircle \n              score={transaction.scores.health} \n              type=\"health\" \n              size={features.compactMode ? 'sm' : 'md'}\n            />\n            <UniversalScoreCircle \n              score={transaction.scores.eco} \n              type=\"eco\" \n              size={features.compactMode ? 'sm' : 'md'}\n            />\n            <UniversalScoreCircle \n              score={transaction.scores.financial} \n              type=\"financial\" \n              size={features.compactMode ? 'sm' : 'md'}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nTransactionItem.displayName = 'TransactionItem';\n\nexport default UnifiedTransactionList;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/BackHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/EnhancedGlassCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/GlassSlider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/LiquidGlass.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'createProgram'. Either include it or remove the dependency array.","line":191,"column":6,"nodeType":"ArrayExpression","endLine":191,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [createProgram, webGLSupported]","fix":{"range":[5914,5930],"text":"[createProgram, webGLSupported]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":239,"column":30,"nodeType":"Identifier","endLine":239,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface LiquidGlassProps {\n  children: React.ReactNode;\n  className?: string;\n  intensity?: number; // 0-1\n  distortion?: number; // 0-1\n  animated?: boolean;\n  interactive?: boolean;\n  fallbackToCSS?: boolean;\n}\n\nconst LiquidGlass = ({\n  children,\n  className,\n  intensity = 0.6,\n  distortion = 0.4,\n  animated = true,\n  interactive = true,\n  fallbackToCSS = true\n}: LiquidGlassProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [webGLSupported, setWebGLSupported] = useState<boolean | null>(null);\n  const [mousePos, setMousePos] = useState({ x: 0.5, y: 0.5 });\n  const animationRef = useRef<number>();\n  const glRef = useRef<WebGLRenderingContext | null>(null);\n  const programRef = useRef<WebGLProgram | null>(null);\n  const startTimeRef = useRef(Date.now());\n\n  // WebGL shaders for liquid distortion effect\n  const vertexShaderSource = `\n    attribute vec4 a_position;\n    attribute vec2 a_texCoord;\n    varying vec2 v_texCoord;\n    \n    void main() {\n      gl_Position = a_position;\n      v_texCoord = a_texCoord;\n    }\n  `;\n\n  const fragmentShaderSource = `\n    precision mediump float;\n    \n    uniform sampler2D u_texture;\n    uniform float u_time;\n    uniform vec2 u_mouse;\n    uniform float u_intensity;\n    uniform float u_distortion;\n    uniform vec2 u_resolution;\n    \n    varying vec2 v_texCoord;\n    \n    void main() {\n      vec2 uv = v_texCoord;\n      \n      // Create liquid distortion effect\n      float time = u_time * 0.001;\n      vec2 mouse = u_mouse;\n      \n      // Distance from mouse\n      float dist = distance(uv, mouse);\n      \n      // Liquid wave effect\n      float wave1 = sin(dist * 20.0 - time * 3.0) * 0.1;\n      float wave2 = cos(uv.x * 15.0 + time * 2.0) * 0.05;\n      float wave3 = sin(uv.y * 12.0 - time * 1.5) * 0.03;\n      \n      // Mouse interaction ripple\n      float ripple = smoothstep(0.3, 0.0, dist) * sin(dist * 30.0 - time * 5.0) * 0.2;\n      \n      // Combine distortions\n      vec2 distortionOffset = vec2(\n        (wave1 + wave2 + ripple) * u_distortion,\n        (wave1 + wave3 + ripple) * u_distortion\n      );\n      \n      // Apply distortion with intensity control\n      vec2 distortedUV = uv + distortionOffset * u_intensity;\n      \n      // Sample the texture with distorted coordinates\n      vec4 color = texture2D(u_texture, distortedUV);\n      \n      // Add subtle color shifting for liquid effect\n      float colorShift = sin(dist * 10.0 - time * 2.0) * 0.1 * u_intensity;\n      color.rgb += vec3(colorShift * 0.1, colorShift * 0.05, -colorShift * 0.1);\n      \n      gl_FragColor = color;\n    }\n  `;\n\n  // Check WebGL support\n  const checkWebGLSupport = useCallback(() => {\n    try {\n      const canvas = document.createElement('canvas');\n      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n      setWebGLSupported(!!gl);\n      return !!gl;\n    } catch (e) {\n      setWebGLSupported(false);\n      return false;\n    }\n  }, []);\n\n  // Create shader\n  const createShader = (gl: WebGLRenderingContext, type: number, source: string) => {\n    const shader = gl.createShader(type);\n    if (!shader) return null;\n    \n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    \n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      console.error('Shader compilation error:', gl.getShaderInfoLog(shader));\n      gl.deleteShader(shader);\n      return null;\n    }\n    \n    return shader;\n  };\n\n  // Create shader program\n  const createProgram = (gl: WebGLRenderingContext) => {\n    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    \n    if (!vertexShader || !fragmentShader) return null;\n    \n    const program = gl.createProgram();\n    if (!program) return null;\n    \n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    \n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      console.error('Program linking error:', gl.getProgramInfoLog(program));\n      gl.deleteProgram(program);\n      return null;\n    }\n    \n    return program;\n  };\n\n  // Initialize WebGL\n  const initWebGL = useCallback(() => {\n    if (!canvasRef.current || !webGLSupported) return;\n    \n    const gl = canvasRef.current.getContext('webgl') || canvasRef.current.getContext('experimental-webgl');\n    if (!gl) return;\n    \n    glRef.current = gl;\n    programRef.current = createProgram(gl);\n    \n    if (!programRef.current) return;\n    \n    // Set up geometry (full screen quad)\n    const positions = new Float32Array([\n      -1, -1,  1, -1,  -1, 1,\n      -1, 1,   1, -1,   1, 1,\n    ]);\n    \n    const texCoords = new Float32Array([\n      0, 0,  1, 0,  0, 1,\n      0, 1,  1, 0,  1, 1,\n    ]);\n    \n    // Position buffer\n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);\n    \n    // Texture coordinate buffer\n    const texCoordBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, texCoords, gl.STATIC_DRAW);\n    \n    // Set up attributes\n    const positionLocation = gl.getAttribLocation(programRef.current, 'a_position');\n    const texCoordLocation = gl.getAttribLocation(programRef.current, 'a_texCoord');\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.enableVertexAttribArray(positionLocation);\n    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.enableVertexAttribArray(texCoordLocation);\n    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n  }, [webGLSupported]);\n\n  // Animation loop\n  const animate = useCallback(() => {\n    if (!glRef.current || !programRef.current || !canvasRef.current) return;\n    \n    const gl = glRef.current;\n    const program = programRef.current;\n    \n    // Set viewport\n    gl.viewport(0, 0, canvasRef.current.width, canvasRef.current.height);\n    \n    // Use shader program\n    gl.useProgram(program);\n    \n    // Set uniforms\n    const timeLocation = gl.getUniformLocation(program, 'u_time');\n    const mouseLocation = gl.getUniformLocation(program, 'u_mouse');\n    const intensityLocation = gl.getUniformLocation(program, 'u_intensity');\n    const distortionLocation = gl.getUniformLocation(program, 'u_distortion');\n    const resolutionLocation = gl.getUniformLocation(program, 'u_resolution');\n    \n    if (timeLocation) gl.uniform1f(timeLocation, animated ? Date.now() - startTimeRef.current : 0);\n    if (mouseLocation) gl.uniform2f(mouseLocation, mousePos.x, mousePos.y);\n    if (intensityLocation) gl.uniform1f(intensityLocation, intensity);\n    if (distortionLocation) gl.uniform1f(distortionLocation, distortion);\n    if (resolutionLocation) gl.uniform2f(resolutionLocation, canvasRef.current.width, canvasRef.current.height);\n    \n    // Draw\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    \n    if (animated) {\n      animationRef.current = requestAnimationFrame(animate);\n    }\n  }, [mousePos, intensity, distortion, animated]);\n\n  // Handle mouse movement\n  const handleMouseMove = useCallback((event: React.MouseEvent) => {\n    if (!interactive || !containerRef.current) return;\n    \n    const rect = containerRef.current.getBoundingClientRect();\n    const x = (event.clientX - rect.left) / rect.width;\n    const y = 1 - (event.clientY - rect.top) / rect.height; // Flip Y coordinate\n    \n    setMousePos({ x, y });\n  }, [interactive]);\n\n  // Debounced mouse move for performance\n  const debouncedMouseMove = useCallback(\n    (() => {\n      let timeoutId: NodeJS.Timeout;\n      return (event: React.MouseEvent) => {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => handleMouseMove(event), 16); // ~60fps\n      };\n    })(),\n    [handleMouseMove]\n  );\n\n  // Resize canvas\n  const resizeCanvas = useCallback(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n    \n    const container = containerRef.current;\n    const canvas = canvasRef.current;\n    \n    canvas.width = container.offsetWidth;\n    canvas.height = container.offsetHeight;\n  }, []);\n\n  // Initialize\n  useEffect(() => {\n    checkWebGLSupport();\n  }, [checkWebGLSupport]);\n\n  useEffect(() => {\n    if (webGLSupported) {\n      initWebGL();\n      resizeCanvas();\n      \n      if (animated) {\n        animationRef.current = requestAnimationFrame(animate);\n      } else {\n        animate();\n      }\n    }\n    \n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [webGLSupported, initWebGL, animate, animated, resizeCanvas]);\n\n  // Handle resize\n  useEffect(() => {\n    const handleResize = () => resizeCanvas();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [resizeCanvas]);\n\n  // CSS fallback styles\n  const fallbackStyles = !webGLSupported && fallbackToCSS ? {\n    background: 'rgba(255, 255, 255, 0.08)',\n    backdropFilter: `blur(${20 + intensity * 10}px) saturate(${150 + intensity * 30}%)`,\n    WebkitBackdropFilter: `blur(${20 + intensity * 10}px) saturate(${150 + intensity * 30}%)`,\n    border: '1px solid rgba(255, 255, 255, 0.12)',\n    boxShadow: `\n      0 8px 32px rgba(0, 0, 0, 0.12),\n      inset 0 1px 0 rgba(255, 255, 255, 0.15)\n    `,\n    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n  } : {};\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        'relative overflow-hidden',\n        !webGLSupported && fallbackToCSS && 'liquid-glass-fallback',\n        className\n      )}\n      style={fallbackStyles}\n      onMouseMove={interactive ? debouncedMouseMove : undefined}\n    >\n      {webGLSupported && (\n        <canvas\n          ref={canvasRef}\n          className=\"absolute inset-0 w-full h-full pointer-events-none\"\n          style={{ mixBlendMode: 'overlay' }}\n        />\n      )}\n      \n      <div className=\"relative z-10\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default LiquidGlass; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/LiquidGlassSVGFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/SimpleGlassCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/UniversalCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":56,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":56,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":168,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":168,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":119,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":119,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":760,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":760,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/sonner.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":26,"column":19,"nodeType":"Identifier","messageId":"namedExport","endLine":26,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  return (\n    <Sonner\n      theme=\"dark\"\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/components/wrapped/WrappedPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/config/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/hooks/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/hooks/useLiquidGlass.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateSettings'. Either include it or remove the dependency array.","line":186,"column":6,"nodeType":"ArrayExpression","endLine":186,"endColumn":91,"suggestions":[{"desc":"Update the dependencies array to be: [optimizedSettings.enabled, settings.autoDetectPerformance, settings.performanceMode, updateSettings]","fix":{"range":[5073,5158],"text":"[optimizedSettings.enabled, settings.autoDetectPerformance, settings.performanceMode, updateSettings]"}}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":202,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":202,"endColumn":28},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":211,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":211,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { secureStorage } from '@/utils/crypto';\n\ninterface LiquidGlassSettings {\n  enabled: boolean;\n  globalIntensity: number; // 0-1\n  globalDistortion: number; // 0-1\n  animated: boolean;\n  interactive: boolean;\n  performanceMode: boolean;\n  autoDetectPerformance: boolean;\n}\n\ninterface LiquidGlassContextType {\n  settings: LiquidGlassSettings;\n  updateSettings: (updates: Partial<LiquidGlassSettings>) => void;\n  resetSettings: () => void;\n  performanceInfo: {\n    webGLSupported: boolean;\n    isMobile: boolean;\n    isLowEnd: boolean;\n    prefersReducedMotion: boolean;\n  };\n}\n\nconst defaultSettings: LiquidGlassSettings = {\n  enabled: true,\n  globalIntensity: 0.6,\n  globalDistortion: 0.4,\n  animated: true,\n  interactive: true,\n  performanceMode: false,\n  autoDetectPerformance: true,\n};\n\nconst LiquidGlassContext = createContext<LiquidGlassContextType | undefined>(undefined);\n\n// Performance detection utilities\nconst detectPerformance = () => {\n  // Check WebGL support\n  const checkWebGL = () => {\n    try {\n      const canvas = document.createElement('canvas');\n      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n      return !!gl;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  // Detect mobile devices\n  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n    navigator.userAgent\n  );\n\n  // Detect low-end devices\n  const isLowEnd = navigator.hardwareConcurrency ? navigator.hardwareConcurrency < 4 : false;\n\n  // Check reduced motion preference\n  const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n  return {\n    webGLSupported: checkWebGL(),\n    isMobile,\n    isLowEnd,\n    prefersReducedMotion,\n  };\n};\n\n// Auto-adjust settings based on performance\nconst getOptimizedSettings = (\n  settings: LiquidGlassSettings,\n  performanceInfo: ReturnType<typeof detectPerformance>\n): LiquidGlassSettings => {\n  if (!settings.autoDetectPerformance) return settings;\n\n  const { isMobile, isLowEnd, prefersReducedMotion, webGLSupported } = performanceInfo;\n\n  // If no WebGL support, disable entirely\n  if (!webGLSupported) {\n    return { ...settings, enabled: false };\n  }\n\n  // Mobile optimization\n  if (isMobile) {\n    return {\n      ...settings,\n      globalIntensity: Math.min(settings.globalIntensity * 0.6, 0.4),\n      globalDistortion: Math.min(settings.globalDistortion * 0.6, 0.3),\n      animated: false,\n      interactive: false,\n    };\n  }\n\n  // Low-end device optimization\n  if (isLowEnd) {\n    return {\n      ...settings,\n      globalIntensity: Math.min(settings.globalIntensity * 0.7, 0.5),\n      globalDistortion: Math.min(settings.globalDistortion * 0.7, 0.3),\n      animated: !prefersReducedMotion,\n    };\n  }\n\n  // Respect reduced motion preference\n  if (prefersReducedMotion) {\n    return {\n      ...settings,\n      animated: false,\n    };\n  }\n\n  return settings;\n};\n\nexport const LiquidGlassProvider = ({ children }: { children: ReactNode }) => {\n  const [settings, setSettings] = useState<LiquidGlassSettings>(() => {\n    // Load settings from secure storage if available\n    try {\n      const saved = secureStorage.getItem('vueni:liquidGlassSettings');\n      return saved ? { ...defaultSettings, ...saved } : defaultSettings;\n    } catch {\n      return defaultSettings;\n    }\n  });\n\n  const [performanceInfo] = useState(() => detectPerformance());\n\n  // Get optimized settings based on performance\n  const optimizedSettings = getOptimizedSettings(settings, performanceInfo);\n\n  const updateSettings = (updates: Partial<LiquidGlassSettings>) => {\n    const newSettings = { ...settings, ...updates };\n    setSettings(newSettings);\n    \n    // Save to secure storage\n    try {\n      secureStorage.setItem('vueni:liquidGlassSettings', newSettings);\n    } catch {\n      // Ignore storage errors\n    }\n  };\n\n  const resetSettings = () => {\n    setSettings(defaultSettings);\n    try {\n      secureStorage.removeItem('vueni:liquidGlassSettings');\n    } catch {\n      // Ignore storage errors\n    }\n  };\n\n  // Performance monitoring\n  useEffect(() => {\n    if (!optimizedSettings.enabled) return;\n\n    let frameCount = 0;\n    let lastTime = performance.now();\n    let fps = 60;\n\n    const monitorPerformance = () => {\n      frameCount++;\n      const currentTime = performance.now();\n      \n      if (currentTime - lastTime >= 1000) {\n        fps = Math.round((frameCount * 1000) / (currentTime - lastTime));\n        frameCount = 0;\n        lastTime = currentTime;\n\n        // Auto-enable performance mode if FPS drops too low\n        if (fps < 30 && settings.autoDetectPerformance && !settings.performanceMode) {\n          console.warn('Low FPS detected, enabling performance mode');\n          updateSettings({ performanceMode: true });\n        }\n      }\n\n      requestAnimationFrame(monitorPerformance);\n    };\n\n    const animationId = requestAnimationFrame(monitorPerformance);\n\n    return () => {\n      cancelAnimationFrame(animationId);\n    };\n  }, [optimizedSettings.enabled, settings.autoDetectPerformance, settings.performanceMode]);\n\n  const contextValue: LiquidGlassContextType = {\n    settings: optimizedSettings,\n    updateSettings,\n    resetSettings,\n    performanceInfo,\n  };\n\n  return (\n    <LiquidGlassContext.Provider value={contextValue}>\n      {children}\n    </LiquidGlassContext.Provider>\n  );\n};\n\nexport const useLiquidGlass = () => {\n  const context = useContext(LiquidGlassContext);\n  if (!context) {\n    throw new Error('useLiquidGlass must be used within a LiquidGlassProvider');\n  }\n  return context;\n};\n\n// Hook for individual component settings\nexport const useLiquidGlassSettings = (\n  componentSettings?: Partial<{\n    intensity: number;\n    distortion: number;\n    animated: boolean;\n    interactive: boolean;\n  }>\n) => {\n  const { settings, performanceInfo } = useLiquidGlass();\n\n  return {\n    enabled: settings.enabled && performanceInfo.webGLSupported,\n    intensity: componentSettings?.intensity ?? settings.globalIntensity,\n    distortion: componentSettings?.distortion ?? settings.globalDistortion,\n    animated: (componentSettings?.animated ?? settings.animated) && !performanceInfo.prefersReducedMotion,\n    interactive: componentSettings?.interactive ?? settings.interactive,\n    performanceMode: settings.performanceMode,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/hooks/usePerformanceOptimization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/lib/VueniCacheManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":310,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8562,8565],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8562,8565],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":311,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":311,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8585,8588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8585,8588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Transaction } from '@/types/shared';\n\nexport interface VueniCacheItem<T = unknown> {\n  data: T;\n  timestamp: number;\n  expiresAt: number;\n  key: string;\n  size?: number;\n  accessCount: number;\n  lastAccessed: number;\n}\n\nexport interface VueniCacheConfig {\n  maxSize: number; // Maximum cache size in bytes\n  maxAge: number; // Default TTL in milliseconds\n  maxItems: number; // Maximum number of items\n  enableCompression: boolean;\n  enableMetrics: boolean;\n  defaultTTL: number;\n  cleanupInterval: number;\n  compressionThreshold: number;\n  enablePersistence: boolean;\n  persistenceKey: string;\n}\n\nexport class VueniCacheManager {\n  private cache = new Map<string, VueniCacheItem>();\n  private config: VueniCacheConfig;\n  private currentSize = 0;\n  private metrics = {\n    hits: 0,\n    misses: 0,\n    evictions: 0,\n    compressionSavings: 0\n  };\n\n  constructor(config: Partial<VueniCacheConfig> = {}) {\n    this.config = {\n      maxSize: 50 * 1024 * 1024, // 50MB default\n      maxAge: 30 * 60 * 1000, // 30 minutes default\n      maxItems: 1000,\n      enableCompression: true,\n      enableMetrics: true,\n      defaultTTL: 30 * 60 * 1000, // 30 minutes default\n      cleanupInterval: 5 * 60 * 1000, // 5 minutes\n      compressionThreshold: 1024,\n      enablePersistence: true,\n      persistenceKey: 'vueni_cache',\n      ...config\n    };\n\n    // Cleanup expired items periodically\n    setInterval(() => this.cleanup(), this.config.cleanupInterval);\n  }\n\n  set<T>(key: string, data: T, ttl?: number): void {\n    const timestamp = Date.now();\n    const expiresAt = timestamp + (ttl || this.config.maxAge);\n    \n    // Estimate size\n    const dataSize = this.estimateSize(data);\n    \n    // Compress data if enabled and beneficial\n    let processedData = data;\n    if (this.config.enableCompression && dataSize > this.config.compressionThreshold) { // Compress if > 1KB\n      processedData = this.compress(data);\n      const compressedSize = this.estimateSize(processedData);\n      this.metrics.compressionSavings += dataSize - compressedSize;\n    }\n\n    const item: VueniCacheItem<T> = {\n      data: processedData,\n      timestamp,\n      expiresAt,\n      key,\n      size: dataSize,\n      accessCount: 0,\n      lastAccessed: timestamp\n    };\n\n    // Remove old item if exists\n    if (this.cache.has(key)) {\n      const oldItem = this.cache.get(key)!;\n      this.currentSize -= oldItem.size || 0;\n    }\n\n    // Check cache limits and evict if necessary\n    this.ensureCacheSpace(dataSize);\n\n    this.cache.set(key, item);\n    this.currentSize += dataSize;\n\n    if (this.config.enableMetrics) {\n      console.log(`[Vueni Cache] Cached ${key} (${this.formatSize(dataSize)})`);\n    }\n  }\n\n  get<T>(key: string): T | null {\n    const item = this.cache.get(key) as VueniCacheItem<T> | undefined;\n    \n    if (!item) {\n      this.metrics.misses++;\n      return null;\n    }\n\n    // Check if expired\n    if (Date.now() > item.expiresAt) {\n      this.delete(key);\n      this.metrics.misses++;\n      return null;\n    }\n\n    // Update access metrics\n    item.accessCount++;\n    item.lastAccessed = Date.now();\n    this.metrics.hits++;\n\n    // Decompress if needed\n    let data = item.data;\n    if (this.isCompressed(data)) {\n      data = this.decompress(data);\n    }\n\n    return data;\n  }\n\n  delete(key: string): boolean {\n    const item = this.cache.get(key);\n    if (item) {\n      this.currentSize -= item.size || 0;\n      return this.cache.delete(key);\n    }\n    return false;\n  }\n\n  clear(): void {\n    this.cache.clear();\n    this.currentSize = 0;\n    console.log('[Vueni Cache] Cache cleared');\n  }\n\n  // Cache financial transactions with optimized strategy\n  cacheTransactions(transactions: Transaction[], userId: string): void {\n    const key = `vueni_transactions_${userId}`;\n    \n    // Optimize transaction data for caching\n    const optimizedTransactions = transactions.map(transaction => ({\n      id: transaction.id,\n      merchant: transaction.merchant,\n      category: transaction.category,\n      amount: transaction.amount,\n      date: transaction.date,\n      status: transaction.status,\n      scores: transaction.scores\n    }));\n\n    this.set(key, optimizedTransactions, 10 * 60 * 1000); // 10 minutes for transactions\n  }\n\n  getCachedTransactions(userId: string): Transaction[] | null {\n    const key = `vueni_transactions_${userId}`;\n    return this.get(key);\n  }\n\n  // Cache insights with longer TTL\n  cacheInsights<T = Record<string, unknown>>(insights: T, userId: string): void {\n    const key = `vueni_insights_${userId}`;\n    this.set(key, insights, 60 * 60 * 1000); // 1 hour for insights\n  }\n\n  getCachedInsights<T = Record<string, unknown>>(userId: string): T | null {\n    const key = `vueni_insights_${userId}`;\n    return this.get(key);\n  }\n\n  // Cache component state\n  cacheComponentState<T = Record<string, unknown>>(componentName: string, state: T): void {\n    const key = `vueni_component_${componentName}`;\n    this.set(key, state, 5 * 60 * 1000); // 5 minutes for component state\n  }\n\n  getCachedComponentState<T = Record<string, unknown>>(componentName: string): T | null {\n    const key = `vueni_component_${componentName}`;\n    return this.get(key);\n  }\n\n  private ensureCacheSpace(requiredSize: number): void {\n    // If we exceed max items, evict oldest items\n    if (this.cache.size >= this.config.maxItems) {\n      this.evictLRU(1);\n    }\n\n    // If we exceed max size, evict until we have enough space\n    while (this.currentSize + requiredSize > this.config.maxSize && this.cache.size > 0) {\n      this.evictLRU(1);\n    }\n  }\n\n  private evictLRU(count: number): void {\n    const items = Array.from(this.cache.values())\n      .sort((a, b) => a.lastAccessed - b.lastAccessed)\n      .slice(0, count);\n\n    items.forEach(item => {\n      this.delete(item.key);\n      this.metrics.evictions++;\n    });\n\n    if (this.config.enableMetrics && items.length > 0) {\n      console.log(`[Vueni Cache] Evicted ${items.length} items (LRU)`);\n    }\n  }\n\n  private cleanup(): void {\n    const now = Date.now();\n    const expiredKeys: string[] = [];\n\n    this.cache.forEach((item, key) => {\n      if (now > item.expiresAt) {\n        expiredKeys.push(key);\n      }\n    });\n\n    expiredKeys.forEach(key => this.delete(key));\n\n    if (this.config.enableMetrics && expiredKeys.length > 0) {\n      console.log(`[Vueni Cache] Cleaned up ${expiredKeys.length} expired items`);\n    }\n  }\n\n  private estimateSize(data: unknown): number {\n    if (typeof data === 'string') {\n      return data.length * 2; // UTF-16 encoding\n    }\n    \n    if (typeof data === 'number') {\n      return 8; // 64-bit number\n    }\n    \n    if (typeof data === 'boolean') {\n      return 4;\n    }\n    \n    if (data === null || data === undefined) {\n      return 0;\n    }\n    \n    if (Array.isArray(data)) {\n      return data.reduce((total, item) => total + this.estimateSize(item), 0);\n    }\n    \n    if (typeof data === 'object') {\n      return Object.entries(data).reduce((total, [key, value]) => {\n        return total + this.estimateSize(key) + this.estimateSize(value);\n      }, 0);\n    }\n    \n    return JSON.stringify(data).length * 2; // Fallback\n  }\n\n  private compress(data: unknown): unknown {\n    // Simple compression simulation (in real implementation, use a compression library)\n    if (typeof data === 'object') {\n      const compressed = {\n        __compressed: true,\n        data: JSON.stringify(data)\n      };\n      return compressed;\n    }\n    return data;\n  }\n\n  private decompress(data: unknown): unknown {\n    if (this.isCompressed(data)) {\n      return JSON.parse(data.data);\n    }\n    return data;\n  }\n\n  private isCompressed(data: unknown): data is { __compressed: true; data: string } {\n    return typeof data === 'object' && data.__compressed === true;\n  }\n\n  private formatSize(bytes: number): string {\n    const units = ['B', 'KB', 'MB', 'GB'];\n    let size = bytes;\n    let unitIndex = 0;\n    \n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n    \n    return `${size.toFixed(1)}${units[unitIndex]}`;\n  }\n\n  // Performance and monitoring methods\n  getStats() {\n    return {\n      size: this.cache.size,\n      currentSize: this.formatSize(this.currentSize),\n      maxSize: this.formatSize(this.config.maxSize),\n      hitRate: (this.metrics.hits / (this.metrics.hits + this.metrics.misses) * 100).toFixed(1) + '%',\n      metrics: this.metrics,\n      compressionSavings: this.formatSize(this.metrics.compressionSavings)\n    };\n  }\n\n  // Export cache contents for debugging\n  exportCache(): any {\n    const items: any[] = [];\n    this.cache.forEach((item, key) => {\n      items.push({\n        key,\n        size: this.formatSize(item.size || 0),\n        expiresIn: Math.max(0, item.expiresAt - Date.now()),\n        accessCount: item.accessCount,\n        lastAccessed: new Date(item.lastAccessed).toISOString()\n      });\n    });\n    \n    return {\n      stats: this.getStats(),\n      items: items.sort((a, b) => b.accessCount - a.accessCount)\n    };\n  }\n\n  // Preload commonly accessed data\n  preloadCommonData(): void {\n    // Preload data that's commonly accessed\n    const commonKeys = [\n      'vueni_user_preferences',\n      'vueni_category_mappings',\n      'vueni_feature_flags'\n    ];\n\n    commonKeys.forEach(key => {\n      // Check if data exists in localStorage and cache it\n      const data = localStorage.getItem(key);\n      if (data) {\n        try {\n          const parsedData = JSON.parse(data);\n          this.set(key, parsedData, 60 * 60 * 1000); // 1 hour\n        } catch (error) {\n          console.warn(`[Vueni Cache] Failed to preload ${key}:`, error);\n        }\n      }\n    });\n  }\n}\n\n// Create global Vueni cache instance\nexport const vueniCache = new VueniCacheManager({\n  maxSize: 100 * 1024 * 1024, // 100MB for Vueni\n  maxAge: 30 * 60 * 1000, // 30 minutes default\n  maxItems: 500,\n  enableCompression: true,\n  enableMetrics: import.meta.env.DEV // Enable metrics in development\n});\n\n// Initialize cache\nif (typeof window !== 'undefined') {\n  // Preload common data after a short delay\n  setTimeout(() => {\n    vueniCache.preloadCommonData();\n  }, 1000);\n\n  // Log cache stats periodically in development\n  if (import.meta.env.DEV) {\n    setInterval(() => {\n      const stats = vueniCache.getStats();\n      console.log('[Vueni Cache] Stats:', stats);\n    }, 60000); // Every minute\n  }\n}\n\nexport default VueniCacheManager;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/lib/VueniLazyImports.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3159,3162],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3159,3162],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4578,4581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4578,4581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5957,5960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5957,5960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7050,7053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7050,7053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { lazy } from 'react';\n\n// Vueni Code Splitting Configuration for optimal performance\nexport const VueniLazyComponents = {\n  // Core Pages - Lazy loaded for better performance\n  VueniDashboard: lazy(() => import('@/pages/Dashboard').then(module => ({ default: module.Dashboard || module.default }))),\n  VueniTransactions: lazy(() => import('@/pages/Transactions').then(module => ({ default: module.Transactions || module.default }))),\n  VueniInsights: lazy(() => import('@/pages/Insights').then(module => ({ default: module.Insights || module.default }))),\n  VueniSettings: lazy(() => import('@/pages/Settings').then(module => ({ default: module.Settings || module.default }))),\n\n  // Vueni Components - Lazy loaded when needed\n  VueniUnifiedTransactionList: lazy(() => \n    import('@/components/shared/VueniUnifiedTransactionList').then(module => ({ \n      default: module.VueniUnifiedTransactionList || module.default \n    }))\n  ),\n  \n  VueniUnifiedInsightsPage: lazy(() => \n    import('@/components/shared/VueniUnifiedInsightsPage').then(module => ({ \n      default: module.VueniUnifiedInsightsPage || module.default \n    }))\n  ),\n\n  VueniConsolidationDemo: lazy(() => \n    import('@/components/shared/VueniConsolidationDemo').then(module => ({ \n      default: module.VueniConsolidationDemo || module.default \n    }))\n  ),\n\n  // Chart Components - Heavy components loaded on demand\n  VueniSpendingChart: lazy(() => \n    import('@/components/charts/SpendingChart').then(module => ({ default: module.SpendingChart || module.default }))\n  ),\n  \n  VueniCashFlowChart: lazy(() => \n    import('@/components/charts/CashFlowChart').then(module => ({ default: module.CashFlowChart || module.default }))\n  ),\n\n  VueniCategoryBreakdown: lazy(() => \n    import('@/components/charts/CategoryBreakdown').then(module => ({ default: module.CategoryBreakdown || module.default }))\n  ),\n\n  // Feature-specific Components\n  VueniExportModal: lazy(() => \n    import('@/components/modals/ExportModal').then(module => ({ default: module.ExportModal || module.default }))\n  ),\n\n  VueniFilterPanel: lazy(() => \n    import('@/components/filters/FilterPanel').then(module => ({ default: module.FilterPanel || module.default }))\n  ),\n\n  VueniReportsEngine: lazy(() => \n    import('@/components/reports/ReportsEngine').then(module => ({ default: module.ReportsEngine || module.default }))\n  ),\n};\n\n// Preload strategies for different scenarios\nexport const VueniPreloadStrategies = {\n  // Preload critical components on app start\n  preloadCritical: () => {\n    const criticalComponents = [\n      () => import('@/components/shared/VueniUnifiedTransactionList'),\n      () => import('@/components/shared/VueniDesignSystem'),\n    ];\n\n    criticalComponents.forEach(importFn => {\n      // Use requestIdleCallback for non-blocking preload\n      if ('requestIdleCallback' in window) {\n        requestIdleCallback(() => importFn());\n      } else {\n        setTimeout(() => importFn(), 100);\n      }\n    });\n  },\n\n  // Preload components based on user navigation\n  preloadOnHover: (componentName: keyof typeof VueniLazyComponents) => {\n    const importMap: Record<string, () => Promise<any>> = {\n      VueniTransactions: () => import('@/pages/Transactions'),\n      VueniInsights: () => import('@/pages/Insights'),\n      VueniSettings: () => import('@/pages/Settings'),\n      VueniSpendingChart: () => import('@/components/charts/SpendingChart'),\n      VueniCashFlowChart: () => import('@/components/charts/CashFlowChart'),\n    };\n\n    const importFn = importMap[componentName];\n    if (importFn) {\n      importFn().catch(error => {\n        console.warn(`Failed to preload ${componentName}:`, error);\n      });\n    }\n  },\n\n  // Preload based on viewport intersection\n  preloadOnIntersection: (componentName: keyof typeof VueniLazyComponents, element: Element) => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            VueniPreloadStrategies.preloadOnHover(componentName);\n            observer.unobserve(element);\n          }\n        });\n      },\n      { rootMargin: '100px' } // Preload when element is 100px away from viewport\n    );\n\n    observer.observe(element);\n  }\n};\n\n// Bundle size optimization utilities\nexport const VueniOptimizationUtils = {\n  // Check if component should be loaded\n  shouldLoadComponent: (componentName: string, userAgent?: string): boolean => {\n    // Don't load heavy components on slow connections\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      if (connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g') {\n        const heavyComponents = ['VueniSpendingChart', 'VueniCashFlowChart', 'VueniReportsEngine'];\n        return !heavyComponents.includes(componentName);\n      }\n    }\n\n    // Don't load desktop-specific components on mobile\n    if (userAgent && /Mobile|Android|iPhone|iPad/.test(userAgent)) {\n      const desktopOnlyComponents = ['VueniReportsEngine'];\n      return !desktopOnlyComponents.includes(componentName);\n    }\n\n    return true;\n  },\n\n  // Get loading priority for components\n  getLoadingPriority: (componentName: string): 'high' | 'medium' | 'low' => {\n    const highPriority = ['VueniUnifiedTransactionList', 'VueniDesignSystem'];\n    const mediumPriority = ['VueniUnifiedInsightsPage', 'VueniDashboard'];\n    \n    if (highPriority.includes(componentName)) return 'high';\n    if (mediumPriority.includes(componentName)) return 'medium';\n    return 'low';\n  },\n\n  // Memory optimization for large lists\n  optimizeVirtualScrolling: (itemCount: number): { \n    enableVirtual: boolean; \n    windowSize: number; \n    bufferSize: number; \n  } => {\n    if (itemCount < 100) {\n      return { enableVirtual: false, windowSize: itemCount, bufferSize: 0 };\n    }\n\n    // Calculate optimal window size based on device capabilities\n    const deviceMemory = (navigator as any).deviceMemory || 4; // Default to 4GB\n    const baseWindowSize = Math.min(50, Math.max(20, deviceMemory * 10));\n    \n    return {\n      enableVirtual: true,\n      windowSize: baseWindowSize,\n      bufferSize: Math.floor(baseWindowSize * 0.3)\n    };\n  }\n};\n\n// Performance monitoring for lazy loaded components\nexport const VueniPerformanceMonitor = {\n  // Track component load times\n  trackComponentLoad: (componentName: string, startTime: number) => {\n    const endTime = performance.now();\n    const loadTime = endTime - startTime;\n    \n    // Log performance metrics\n    console.log(`[Vueni Performance] ${componentName} loaded in ${loadTime.toFixed(2)}ms`);\n    \n    // Send to analytics in production\n    if (import.meta.env.PROD && 'sendBeacon' in navigator) {\n      navigator.sendBeacon('/api/vueni/performance', JSON.stringify({\n        component: componentName,\n        loadTime,\n        timestamp: Date.now()\n      }));\n    }\n  },\n\n  // Monitor memory usage\n  trackMemoryUsage: (componentName: string) => {\n    if ('memory' in performance) {\n      const memory = (performance as any).memory;\n      console.log(`[Vueni Memory] ${componentName} - Used: ${(memory.usedJSHeapSize / 1024 / 1024).toFixed(2)}MB`);\n      \n      // Warn if memory usage is high\n      if (memory.usedJSHeapSize > 100 * 1024 * 1024) { // 100MB\n        console.warn(`[Vueni Memory] High memory usage detected: ${(memory.usedJSHeapSize / 1024 / 1024).toFixed(2)}MB`);\n      }\n    }\n  },\n\n  // Initialize performance monitoring\n  initialize: () => {\n    // Monitor overall bundle performance\n    if ('PerformanceObserver' in window) {\n      const observer = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry) => {\n          if (entry.entryType === 'navigation') {\n            const navEntry = entry as PerformanceNavigationTiming;\n            console.log(`[Vueni Performance] Page load: ${navEntry.loadEventEnd - navEntry.loadEventStart}ms`);\n          }\n        });\n      });\n      \n      observer.observe({ entryTypes: ['navigation'] });\n    }\n\n    // Preload critical components\n    VueniPreloadStrategies.preloadCritical();\n  }\n};\n\n// Export default optimization configuration\nexport const vueniOptimizationConfig = {\n  lazyComponents: VueniLazyComponents,\n  preloadStrategies: VueniPreloadStrategies,\n  optimizationUtils: VueniOptimizationUtils,\n  performanceMonitor: VueniPerformanceMonitor,\n  \n  // Global settings\n  settings: {\n    enableCodeSplitting: true,\n    enablePreloading: true,\n    enableVirtualScrolling: true,\n    enablePerformanceMonitoring: import.meta.env.PROD,\n    maxMemoryUsage: 150 * 1024 * 1024, // 150MB limit\n    chunkSizeTarget: 250 * 1024, // 250KB target chunk size\n  }\n};\n\nexport default vueniOptimizationConfig;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/lib/VueniPerformanceMonitor.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5318,5321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5318,5321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getCLS, getFID, getFCP, getLCP, getTTFB, Metric } from 'web-vitals';\n\nexport interface VueniPerformanceMetrics {\n  cls: number | null;\n  fid: number | null;\n  fcp: number | null;\n  lcp: number | null;\n  ttfb: number | null;\n  componentLoadTimes: Record<string, number>;\n  memoryUsage: {\n    used: number;\n    total: number;\n    limit: number;\n  } | null;\n  bundleSize: number | null;\n  timestamp: number;\n}\n\nexport class VueniPerformanceMonitor {\n  private static metrics: VueniPerformanceMetrics = {\n    cls: null,\n    fid: null,\n    fcp: null,\n    lcp: null,\n    ttfb: null,\n    componentLoadTimes: {},\n    memoryUsage: null,\n    bundleSize: null,\n    timestamp: Date.now()\n  };\n\n  private static observers: PerformanceObserver[] = [];\n  private static thresholds = {\n    cls: 0.1,      // Good: ≤ 0.1\n    fid: 100,      // Good: ≤ 100ms\n    fcp: 1800,     // Good: ≤ 1.8s\n    lcp: 2500,     // Good: ≤ 2.5s\n    ttfb: 800,     // Good: ≤ 800ms\n    componentLoad: 200, // Component should load within 200ms\n    memoryUsage: 100 * 1024 * 1024 // 100MB warning threshold\n  };\n\n  static initialize(): void {\n    if (typeof window === 'undefined') return;\n\n    // Initialize Web Vitals monitoring\n    this.initWebVitals();\n    \n    // Initialize component performance monitoring\n    this.initComponentMonitoring();\n    \n    // Initialize memory monitoring\n    this.initMemoryMonitoring();\n    \n    // Initialize bundle analysis\n    this.initBundleAnalysis();\n\n    console.log('[Vueni Performance] Performance monitoring initialized');\n  }\n\n  private static initWebVitals(): void {\n    getCLS(this.handleMetric.bind(this));\n    getFID(this.handleMetric.bind(this));\n    getFCP(this.handleMetric.bind(this));\n    getLCP(this.handleMetric.bind(this));\n    getTTFB(this.handleMetric.bind(this));\n  }\n\n  private static handleMetric(metric: Metric): void {\n    const { name, value } = metric;\n    \n    switch (name) {\n      case 'CLS':\n        this.metrics.cls = value;\n        break;\n      case 'FID':\n        this.metrics.fid = value;\n        break;\n      case 'FCP':\n        this.metrics.fcp = value;\n        break;\n      case 'LCP':\n        this.metrics.lcp = value;\n        break;\n      case 'TTFB':\n        this.metrics.ttfb = value;\n        break;\n    }\n\n    this.logMetric(name, value);\n    this.evaluateMetric(name, value);\n    this.sendMetricToAnalytics(metric);\n  }\n\n  private static logMetric(name: string, value: number): void {\n    const threshold = this.thresholds[name.toLowerCase() as keyof typeof this.thresholds];\n    const status = value <= threshold ? '✅' : '⚠️';\n    \n    console.log(`[Vueni Performance] ${status} ${name}: ${value.toFixed(2)}${name === 'CLS' ? '' : 'ms'}`);\n  }\n\n  private static evaluateMetric(name: string, value: number): void {\n    const threshold = this.thresholds[name.toLowerCase() as keyof typeof this.thresholds];\n    \n    if (value > threshold) {\n      console.warn(`[Vueni Performance] ${name} exceeds threshold: ${value} > ${threshold}`);\n      \n      // Provide specific recommendations\n      this.provideOptimizationRecommendations(name, value);\n    }\n  }\n\n  private static provideOptimizationRecommendations(metric: string, value: number): void {\n    const recommendations: Record<string, string[]> = {\n      CLS: [\n        'Add explicit dimensions to images and embeds',\n        'Reserve space for dynamically injected content',\n        'Use CSS containment for layout stability'\n      ],\n      FID: [\n        'Break up long-running JavaScript tasks',\n        'Use React.memo() for expensive components',\n        'Implement virtualization for large lists'\n      ],\n      FCP: [\n        'Optimize critical resource loading',\n        'Use resource hints (preload, prefetch)',\n        'Minimize render-blocking resources'\n      ],\n      LCP: [\n        'Optimize largest element loading',\n        'Use appropriate image formats (WebP, AVIF)',\n        'Implement lazy loading for below-fold content'\n      ],\n      TTFB: [\n        'Optimize server response times',\n        'Use CDN for static assets',\n        'Implement proper caching strategies'\n      ]\n    };\n\n    const metricRecommendations = recommendations[metric];\n    if (metricRecommendations) {\n      console.group(`[Vueni Performance] Optimization recommendations for ${metric}:`);\n      metricRecommendations.forEach(rec => console.log(`• ${rec}`));\n      console.groupEnd();\n    }\n  }\n\n  private static initComponentMonitoring(): void {\n    // Monitor long tasks that might affect component rendering\n    if ('PerformanceObserver' in window) {\n      const longTaskObserver = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry) => {\n          if (entry.duration > 50) { // Tasks longer than 50ms\n            console.warn(`[Vueni Performance] Long task detected: ${entry.duration.toFixed(2)}ms`);\n          }\n        });\n      });\n\n      try {\n        longTaskObserver.observe({ entryTypes: ['longtask'] });\n        this.observers.push(longTaskObserver);\n      } catch (error) {\n        console.warn('[Vueni Performance] Long task monitoring not supported');\n      }\n    }\n  }\n\n  private static initMemoryMonitoring(): void {\n    // Monitor memory usage every 30 seconds\n    const checkMemory = () => {\n      if ('memory' in performance) {\n        const memory = (performance as any).memory;\n        \n        this.metrics.memoryUsage = {\n          used: memory.usedJSHeapSize,\n          total: memory.totalJSHeapSize,\n          limit: memory.jsHeapSizeLimit\n        };\n\n        const usedMB = memory.usedJSHeapSize / 1024 / 1024;\n        \n        if (memory.usedJSHeapSize > this.thresholds.memoryUsage) {\n          console.warn(`[Vueni Performance] High memory usage: ${usedMB.toFixed(2)}MB`);\n          this.suggestMemoryOptimizations();\n        }\n\n        console.log(`[Vueni Performance] Memory usage: ${usedMB.toFixed(2)}MB`);\n      }\n    };\n\n    checkMemory();\n    setInterval(checkMemory, 30000); // Check every 30 seconds\n  }\n\n  private static suggestMemoryOptimizations(): void {\n    console.group('[Vueni Performance] Memory optimization suggestions:');\n    console.log('• Use React.memo() for components that re-render frequently');\n    console.log('• Implement proper cleanup in useEffect hooks');\n    console.log('• Consider virtualization for large transaction lists');\n    console.log('• Clear unused data from state management');\n    console.log('• Use lazy loading for heavy components');\n    console.groupEnd();\n  }\n\n  private static initBundleAnalysis(): void {\n    // Analyze bundle size by tracking resource loading\n    if ('PerformanceObserver' in window) {\n      const resourceObserver = new PerformanceObserver((list) => {\n        let totalJSSize = 0;\n        \n        list.getEntries().forEach((entry) => {\n          const resourceEntry = entry as PerformanceResourceTiming;\n          \n          if (resourceEntry.name.includes('.js')) {\n            totalJSSize += resourceEntry.transferSize || 0;\n          }\n        });\n\n        if (totalJSSize > 0) {\n          this.metrics.bundleSize = totalJSSize;\n          const sizeMB = totalJSSize / 1024 / 1024;\n          \n          console.log(`[Vueni Performance] Total JS bundle size: ${sizeMB.toFixed(2)}MB`);\n          \n          if (sizeMB > 1.5) { // Warn if bundle is larger than 1.5MB\n            console.warn('[Vueni Performance] Large bundle size detected. Consider code splitting.');\n          }\n        }\n      });\n\n      try {\n        resourceObserver.observe({ entryTypes: ['resource'] });\n        this.observers.push(resourceObserver);\n      } catch (error) {\n        console.warn('[Vueni Performance] Resource monitoring not supported');\n      }\n    }\n  }\n\n  static trackComponentLoad(componentName: string, loadTime: number): void {\n    this.metrics.componentLoadTimes[componentName] = loadTime;\n    \n    const status = loadTime <= this.thresholds.componentLoad ? '✅' : '⚠️';\n    console.log(`[Vueni Performance] ${status} Component ${componentName} loaded in ${loadTime.toFixed(2)}ms`);\n\n    if (loadTime > this.thresholds.componentLoad) {\n      console.warn(`[Vueni Performance] Slow component load: ${componentName} (${loadTime.toFixed(2)}ms)`);\n      this.suggestComponentOptimizations(componentName);\n    }\n\n    // Send component performance to analytics\n    this.sendComponentMetricToAnalytics(componentName, loadTime);\n  }\n\n  private static suggestComponentOptimizations(componentName: string): void {\n    console.group(`[Vueni Performance] Optimization suggestions for ${componentName}:`);\n    console.log('• Use React.memo() to prevent unnecessary re-renders');\n    console.log('• Implement code splitting with React.lazy()');\n    console.log('• Consider memoizing expensive calculations with useMemo()');\n    console.log('• Use useCallback() for event handlers');\n    console.log('• Implement virtualization for large lists');\n    console.groupEnd();\n  }\n\n  private static sendMetricToAnalytics(metric: Metric): void {\n    if (!import.meta.env.PROD) return;\n\n    // Send to Vueni analytics endpoint\n    if ('sendBeacon' in navigator) {\n      const data = {\n        type: 'web-vital',\n        name: metric.name,\n        value: metric.value,\n        rating: this.getRating(metric.name, metric.value),\n        timestamp: Date.now(),\n        url: window.location.href,\n        userAgent: navigator.userAgent\n      };\n\n      navigator.sendBeacon('/api/vueni/analytics/performance', JSON.stringify(data));\n    }\n  }\n\n  private static sendComponentMetricToAnalytics(componentName: string, loadTime: number): void {\n    if (!import.meta.env.PROD) return;\n\n    if ('sendBeacon' in navigator) {\n      const data = {\n        type: 'component-performance',\n        component: componentName,\n        loadTime,\n        rating: loadTime <= this.thresholds.componentLoad ? 'good' : 'poor',\n        timestamp: Date.now(),\n        url: window.location.href\n      };\n\n      navigator.sendBeacon('/api/vueni/analytics/component', JSON.stringify(data));\n    }\n  }\n\n  private static getRating(metricName: string, value: number): 'good' | 'needs-improvement' | 'poor' {\n    const thresholds: Record<string, [number, number]> = {\n      CLS: [0.1, 0.25],\n      FID: [100, 300],\n      FCP: [1800, 3000],\n      LCP: [2500, 4000],\n      TTFB: [800, 1800]\n    };\n\n    const [goodThreshold, poorThreshold] = thresholds[metricName] || [0, Infinity];\n    \n    if (value <= goodThreshold) return 'good';\n    if (value <= poorThreshold) return 'needs-improvement';\n    return 'poor';\n  }\n\n  static getMetrics(): VueniPerformanceMetrics {\n    return { ...this.metrics, timestamp: Date.now() };\n  }\n\n  static generatePerformanceReport(): string {\n    const metrics = this.getMetrics();\n    \n    let report = '\\n🚀 Vueni Performance Report\\n';\n    report += '═══════════════════════════════\\n\\n';\n    \n    // Web Vitals\n    report += '📊 Core Web Vitals:\\n';\n    report += `• CLS: ${metrics.cls?.toFixed(3) || 'N/A'} ${this.getStatusEmoji('CLS', metrics.cls)}\\n`;\n    report += `• FID: ${metrics.fid?.toFixed(2) || 'N/A'}ms ${this.getStatusEmoji('FID', metrics.fid)}\\n`;\n    report += `• FCP: ${metrics.fcp?.toFixed(2) || 'N/A'}ms ${this.getStatusEmoji('FCP', metrics.fcp)}\\n`;\n    report += `• LCP: ${metrics.lcp?.toFixed(2) || 'N/A'}ms ${this.getStatusEmoji('LCP', metrics.lcp)}\\n`;\n    report += `• TTFB: ${metrics.ttfb?.toFixed(2) || 'N/A'}ms ${this.getStatusEmoji('TTFB', metrics.ttfb)}\\n\\n`;\n\n    // Component Performance\n    if (Object.keys(metrics.componentLoadTimes).length > 0) {\n      report += '🧩 Component Load Times:\\n';\n      Object.entries(metrics.componentLoadTimes).forEach(([component, time]) => {\n        const status = time <= this.thresholds.componentLoad ? '✅' : '⚠️';\n        report += `• ${component}: ${time.toFixed(2)}ms ${status}\\n`;\n      });\n      report += '\\n';\n    }\n\n    // Memory Usage\n    if (metrics.memoryUsage) {\n      const usedMB = metrics.memoryUsage.used / 1024 / 1024;\n      const status = metrics.memoryUsage.used <= this.thresholds.memoryUsage ? '✅' : '⚠️';\n      report += `💾 Memory Usage: ${usedMB.toFixed(2)}MB ${status}\\n\\n`;\n    }\n\n    // Bundle Size\n    if (metrics.bundleSize) {\n      const sizeMB = metrics.bundleSize / 1024 / 1024;\n      const status = sizeMB <= 1.5 ? '✅' : '⚠️';\n      report += `📦 Bundle Size: ${sizeMB.toFixed(2)}MB ${status}\\n\\n`;\n    }\n\n    report += `⏰ Report generated: ${new Date(metrics.timestamp).toLocaleString()}`;\n    \n    return report;\n  }\n\n  private static getStatusEmoji(metric: string, value: number | null): string {\n    if (value === null) return '❓';\n    \n    const threshold = this.thresholds[metric.toLowerCase() as keyof typeof this.thresholds];\n    return value <= threshold ? '✅' : '⚠️';\n  }\n\n  static cleanup(): void {\n    // Clean up observers\n    this.observers.forEach(observer => {\n      observer.disconnect();\n    });\n    this.observers = [];\n    \n    console.log('[Vueni Performance] Performance monitoring cleanup completed');\n  }\n}\n\n// Auto-initialize in production\nif (import.meta.env.PROD && typeof window !== 'undefined') {\n  // Initialize after DOM is ready\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n      VueniPerformanceMonitor.initialize();\n    });\n  } else {\n    VueniPerformanceMonitor.initialize();\n  }\n}\n\nexport default VueniPerformanceMonitor;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/lib/VueniSecureStorage.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[377,380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[377,380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[533,536],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[533,536],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[724,727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[724,727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[894,897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[894,897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import CryptoJS from 'crypto-js';\nimport { SecurityEnvValidator } from '../utils/envValidation';\nimport { generateSecureToken } from '../utils/secureRandom';\n\n// Get validated encryption key from environment\nconst VUENI_STORAGE_KEY = SecurityEnvValidator.getValidatedEncryptionKey('VITE_VUENI_ENCRYPTION_KEY');\n\nexport class VueniSecureStorage {\n  private static encrypt(data: any): string {\n    return CryptoJS.AES.encrypt(JSON.stringify(data), VUENI_STORAGE_KEY).toString();\n  }\n  \n  private static decrypt(encryptedData: string): any {\n    const bytes = CryptoJS.AES.decrypt(encryptedData, VUENI_STORAGE_KEY);\n    return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n  }\n  \n  static setFinancialData(key: string, value: any): void {\n    this.logVueniAccess('SET_FINANCIAL', key);\n    localStorage.setItem(`vueni_${key}`, this.encrypt(value));\n  }\n  \n  static getFinancialData(key: string): any {\n    this.logVueniAccess('GET_FINANCIAL', key);\n    const encrypted = localStorage.getItem(`vueni_${key}`);\n    return encrypted ? this.decrypt(encrypted) : null;\n  }\n  \n  static removeFinancialData(key: string): void {\n    this.logVueniAccess('DELETE_FINANCIAL', key);\n    localStorage.removeItem(`vueni_${key}`);\n  }\n  \n  static clearAllFinancialData(): void {\n    this.logVueniAccess('CLEAR_ALL', 'all_financial_data');\n    const keys = Object.keys(localStorage).filter(key => key.startsWith('vueni_'));\n    keys.forEach(key => localStorage.removeItem(key));\n  }\n  \n  private static logVueniAccess(action: string, key: string): void {\n    if (import.meta.env.PROD) {\n      fetch('/api/vueni/audit-log', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          action,\n          key,\n          timestamp: new Date().toISOString(),\n          userAgent: navigator.userAgent,\n          sessionId: this.getSessionId()\n        })\n      }).catch(error => {\n        console.error('Audit log failed:', error);\n      });\n    }\n  }\n  \n  private static getSessionId(): string {\n    let sessionId = sessionStorage.getItem('vueni_session_id');\n    if (!sessionId) {\n      sessionId = generateSecureToken(16); // 16 bytes = 32 hex characters\n      sessionStorage.setItem('vueni_session_id', sessionId);\n    }\n    return sessionId;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/lib/VueniSessionManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/pages/CalculatorsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/pages/CleanDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2808,2811],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2808,2811],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":186,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5254,5257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5254,5257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5363,5366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5363,5366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport AppShell from '@/components/layout/AppShell';\nimport CleanAccountCard from '@/components/financial/CleanAccountCard';\nimport CleanCreditScoreCard from '@/components/financial/CleanCreditScoreCard';\nimport { VueniUnifiedTransactionList } from '@/components/shared';\nimport SimpleGlassCard from '@/components/ui/SimpleGlassCard';\nimport { colors } from '@/theme/colors';\nimport { \n  DollarSign, \n  TrendingUp, \n  CreditCard, \n  PiggyBank,\n  Eye,\n  EyeOff \n} from 'lucide-react';\n\n// Mock data that matches your existing structure\nconst mockAccounts = [\n  {\n    id: 'acc_001',\n    accountType: 'Checking',\n    accountName: 'Main Account',\n    balance: 12450.00,\n    available: 11200.00,\n    change: { amount: 1523.50, percentage: 12.5, period: 'vs last month' },\n    isActive: true\n  },\n  {\n    id: 'acc_002',\n    accountType: 'Savings',\n    accountName: 'Emergency Fund',\n    balance: 25780.50,\n    available: 25780.50,\n    change: { amount: 780.25, percentage: 3.1, period: 'vs last month' }\n  },\n  {\n    id: 'acc_003',\n    accountType: 'Credit Card',\n    accountName: 'Rewards Card',\n    balance: -1245.30,\n    available: 8754.70,\n    change: { amount: -245.30, percentage: -2.1, period: 'vs last month' }\n  },\n  {\n    id: 'acc_004',\n    accountType: 'Investment',\n    accountName: 'Portfolio',\n    balance: 45600.25,\n    available: 45600.25,\n    change: { amount: 2340.80, percentage: 5.4, period: 'vs last month' }\n  }\n];\n\nconst mockTransactions = [\n  {\n    id: 'txn_001',\n    merchant: 'Whole Foods Market',\n    category: 'Groceries',\n    amount: -127.43,\n    date: '2025-06-16T10:30:00Z',\n    status: 'completed' as const,\n    scores: { health: 85, eco: 92, financial: 78 }\n  },\n  {\n    id: 'txn_002',\n    merchant: 'Apple Store',\n    category: 'Electronics',\n    amount: -899.00,\n    date: '2025-06-16T08:15:00Z',\n    status: 'completed' as const,\n    scores: { health: 65, eco: 45, financial: 60 }\n  },\n  {\n    id: 'txn_003',\n    merchant: 'Salary Deposit',\n    category: 'Income',\n    amount: 3250.00,\n    date: '2025-06-15T09:00:00Z',\n    status: 'completed' as const,\n    scores: { health: 100, eco: 85, financial: 95 }\n  },\n  {\n    id: 'txn_004',\n    merchant: 'Starbucks',\n    category: 'Coffee',\n    amount: -6.85,\n    date: '2025-06-15T07:45:00Z',\n    status: 'completed' as const,\n    scores: { health: 40, eco: 60, financial: 85 }\n  },\n  {\n    id: 'txn_005',\n    merchant: 'Gas Station',\n    category: 'Transportation',\n    amount: -45.20,\n    date: '2025-06-14T18:30:00Z',\n    status: 'pending' as const,\n    scores: { health: 70, eco: 30, financial: 80 }\n  }\n];\n\nconst OverviewCard = ({ \n  title, \n  value, \n  change, \n  icon: Icon, \n  color \n}: { \n  title: string; \n  value: string; \n  change: { amount: number; percentage: number };\n  icon: any; \n  color: string;\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n\n  return (\n    <SimpleGlassCard className=\"p-6\">\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"p-2 rounded-lg bg-white/[0.06]\">\n            <Icon className=\"w-5 h-5\" style={{ color }} />\n          </div>\n          <div>\n            <h3 className=\"font-bold text-white text-sm tracking-wide\">***{title}***</h3>\n          </div>\n        </div>\n        \n        <button\n          onClick={() => setIsVisible(!isVisible)}\n          className=\"p-2 rounded-lg bg-white/[0.06] hover:bg-white/[0.08] transition-colors\"\n        >\n          {isVisible ? (\n            <EyeOff className=\"w-4 h-4 text-white/70\" />\n          ) : (\n            <Eye className=\"w-4 h-4 text-white/70\" />\n          )}\n        </button>\n      </div>\n\n      <div className={`mb-3 transition-all duration-300 ${isVisible ? '' : 'blur-sm'}`}>\n        <div className=\"text-3xl font-black text-white mb-1 tracking-wide\">\n          {isVisible ? value : '••••••'}\n        </div>\n      </div>\n\n      <div className=\"flex items-center gap-2\">\n        <div \n          className=\"flex items-center gap-1\"\n          style={{ \n            color: change.amount >= 0 ? colors.status.success : colors.status.error \n          }}\n        >\n          <TrendingUp className={`w-4 h-4 ${change.amount < 0 ? 'rotate-180' : ''}`} />\n          <span className=\"text-sm font-medium\">\n            {change.percentage >= 0 ? '+' : ''}{change.percentage.toFixed(1)}%\n          </span>\n        </div>\n        <span className=\"text-white/50 text-sm\">vs last month</span>\n      </div>\n    </SimpleGlassCard>\n  );\n};\n\nconst CleanDashboard = () => {\n  const [activeTab, setActiveTab] = useState('dashboard');\n\n  // Calculate totals\n  const totalBalance = mockAccounts.reduce((sum, acc) => {\n    if (acc.accountType.toLowerCase() === 'credit card') {\n      return sum; // Don't include credit card debt in total assets\n    }\n    return sum + acc.balance;\n  }, 0);\n\n  const totalDebt = mockAccounts\n    .filter(acc => acc.accountType.toLowerCase() === 'credit card')\n    .reduce((sum, acc) => sum + Math.abs(acc.balance), 0);\n\n  const netWorth = totalBalance - totalDebt;\n  \n  const monthlyIncome = mockTransactions\n    .filter(t => t.amount > 0)\n    .reduce((sum, t) => sum + t.amount, 0);\n\n  const handleTransactionClick = (transaction: any) => {\n    console.log('Transaction clicked:', transaction);\n  };\n\n  const handleAccountClick = (account: any) => {\n    console.log('Account clicked:', account);\n  };\n\n  const handleCreditReportClick = () => {\n    console.log('View credit report clicked');\n  };\n\n  if (activeTab !== 'dashboard') {\n    return (\n      <AppShell activeTab={activeTab} onTabChange={setActiveTab}>\n        <div className=\"space-y-6\">\n          <SimpleGlassCard className=\"p-8 text-center\">\n            <h2 className=\"text-2xl font-bold text-white mb-4\">\n              {activeTab.charAt(0).toUpperCase() + activeTab.slice(1)}\n            </h2>\n            <p className=\"text-white/60\">\n              This section would contain the {activeTab} content.\n            </p>\n          </SimpleGlassCard>\n        </div>\n      </AppShell>\n    );\n  }\n\n  return (\n    <AppShell activeTab={activeTab} onTabChange={setActiveTab}>\n      <div className=\"space-y-6\">\n        {/* Welcome Header */}\n        <SimpleGlassCard className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-black text-white mb-2 tracking-wide\">\n                ***Good morning, John*** 👋\n              </h1>\n              <p className=\"text-white/70 font-medium italic\">\n                Here's what's happening with your finances today\n              </p>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm text-white/60 font-semibold\">***Total Net Worth***</p>\n              <p className=\"text-2xl font-black text-white tracking-wide\">\n                {new Intl.NumberFormat('en-US', {\n                  style: 'currency',\n                  currency: 'USD'\n                }).format(netWorth)}\n              </p>\n            </div>\n          </div>\n        </SimpleGlassCard>\n\n        {/* Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <OverviewCard\n            title=\"Total Assets\"\n            value={new Intl.NumberFormat('en-US', {\n              style: 'currency',\n              currency: 'USD'\n            }).format(totalBalance)}\n            change={{ amount: 2500, percentage: 8.2 }}\n            icon={DollarSign}\n            color={colors.accent.green}\n          />\n          \n          <OverviewCard\n            title=\"Monthly Income\"\n            value={new Intl.NumberFormat('en-US', {\n              style: 'currency',\n              currency: 'USD'\n            }).format(monthlyIncome)}\n            change={{ amount: 250, percentage: 4.1 }}\n            icon={TrendingUp}\n            color={colors.accent.blue}\n          />\n          \n          <OverviewCard\n            title=\"Total Debt\"\n            value={new Intl.NumberFormat('en-US', {\n              style: 'currency',\n              currency: 'USD'\n            }).format(totalDebt)}\n            change={{ amount: -125, percentage: -2.5 }}\n            icon={CreditCard}\n            color={colors.status.error}\n          />\n          \n          <OverviewCard\n            title=\"Savings Rate\"\n            value=\"23.5%\"\n            change={{ amount: 1.2, percentage: 5.4 }}\n            icon={PiggyBank}\n            color={colors.accent.purple}\n          />\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Accounts & Credit Score */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            {/* Credit Score */}\n            <CleanCreditScoreCard onViewReport={handleCreditReportClick} />\n            \n            {/* Account Cards */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-xl font-black text-white px-2 tracking-wide italic\">***Accounts***</h3>\n              {mockAccounts.slice(0, 3).map((account) => (\n                <CleanAccountCard\n                  key={account.id}\n                  account={account}\n                  onClick={() => handleAccountClick(account)}\n                />\n              ))}\n            </div>\n          </div>\n\n          {/* Right Column - Transactions */}\n          <div className=\"lg:col-span-2\">\n            <OptimizedTransactionList\n              transactions={mockTransactions.map(t => ({\n                id: t.id,\n                date: t.date,\n                description: t.merchant,\n                amount: t.amount,\n                category: {\n                  name: t.category,\n                  color: '#6366f1'\n                },\n                type: t.amount < 0 ? 'expense' : 'income' as const,\n                merchant: t.merchant,\n                scores: t.scores,\n                status: 'completed' as const\n              }))}\n              variant=\"clean\"\n              currency=\"USD\"\n              features={{\n                showScores: true,\n                showCategories: true,\n                searchable: true,\n                filterable: true,\n                sortable: true\n              }}\n              onTransactionClick={handleTransactionClick}\n            />\n          </div>\n        </div>\n      </div>\n    </AppShell>\n  );\n};\n\nexport default CleanDashboard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/pages/Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/pages/InsightsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/pages/MenuBarDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/pages/OptimizedProfile.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[725,728],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[725,728],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[764,767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[764,767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":250,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7442,7445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7442,7445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useMemo } from 'react';\nimport { UserPreferences } from '@/types/shared';\nimport { UniversalCard } from '@/components/ui/UniversalCard';\nimport { shouldComponentUpdate } from '@/utils/optimizedHelpers';\nimport { \n  User, \n  Settings, \n  Bell, \n  Shield, \n  Palette,\n  ChevronRight \n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// Optimized Profile Component - Demonstrates optimization principles\n// Original Profile.tsx: 764 lines with 40+ state variables\n// Optimized version: ~200 lines with consolidated state and memoization\n// Performance improvement: 70% reduction in complexity\n\ninterface ProfileSection {\n  id: string;\n  label: string;\n  icon: React.ComponentType<any>;\n  component: React.ComponentType<any>;\n}\n\ninterface OptimizedProfileState {\n  activeSection: string;\n  profile: {\n    name: string;\n    email: string;\n    bio: string;\n    avatar?: string;\n  };\n  preferences: UserPreferences;\n  isEditing: boolean;\n}\n\nconst OptimizedProfile = React.memo(() => {\n  // Consolidated state (was 40+ separate useState calls)\n  const [state, setState] = useState<OptimizedProfileState>({\n    activeSection: 'profile',\n    profile: {\n      name: 'John Doe',\n      email: 'john.doe@example.com',\n      bio: 'Passionate about financial wellness'\n    },\n    preferences: {\n      theme: 'dark',\n      currency: 'USD',\n      language: 'en',\n      notifications: {\n        email: true,\n        push: true,\n        sms: false\n      },\n      privacy: {\n        shareData: false,\n        analytics: true\n      }\n    },\n    isEditing: false\n  });\n\n  // Memoized sections configuration\n  const sections = useMemo<ProfileSection[]>(() => [\n    { \n      id: 'profile', \n      label: 'Profile', \n      icon: User,\n      component: ProfileSection \n    },\n    { \n      id: 'preferences', \n      label: 'Preferences', \n      icon: Settings,\n      component: PreferencesSection \n    },\n    { \n      id: 'notifications', \n      label: 'Notifications', \n      icon: Bell,\n      component: NotificationsSection \n    },\n    { \n      id: 'privacy', \n      label: 'Privacy & Security', \n      icon: Shield,\n      component: PrivacySection \n    },\n    { \n      id: 'appearance', \n      label: 'Appearance', \n      icon: Palette,\n      component: AppearanceSection \n    }\n  ], []);\n\n  // Optimized update handlers using useCallback\n  const updateState = useCallback((updates: Partial<OptimizedProfileState>) => {\n    setState(prev => ({ ...prev, ...updates }));\n  }, []);\n\n  const updateProfile = useCallback((profileUpdates: Partial<OptimizedProfileState['profile']>) => {\n    setState(prev => ({\n      ...prev,\n      profile: { ...prev.profile, ...profileUpdates }\n    }));\n  }, []);\n\n  const updatePreferences = useCallback((prefUpdates: Partial<UserPreferences>) => {\n    setState(prev => ({\n      ...prev,\n      preferences: { ...prev.preferences, ...prefUpdates }\n    }));\n  }, []);\n\n  const handleSectionChange = useCallback((sectionId: string) => {\n    updateState({ activeSection: sectionId });\n  }, [updateState]);\n\n  // Memoized active section component\n  const ActiveSectionComponent = useMemo(() => {\n    const section = sections.find(s => s.id === state.activeSection);\n    return section?.component || ProfileSection;\n  }, [sections, state.activeSection]);\n\n  return (\n    <div className=\"min-h-screen bg-black text-white p-4 md:p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-white mb-2\">Profile Settings</h1>\n          <p className=\"text-white/60\">Manage your account preferences and privacy settings</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Sidebar Navigation */}\n          <div className=\"lg:col-span-1\">\n            <UniversalCard variant=\"glass\" className=\"p-4\">\n              <nav className=\"space-y-2\">\n                {sections.map((section) => (\n                  <SectionNavItem\n                    key={section.id}\n                    section={section}\n                    isActive={state.activeSection === section.id}\n                    onClick={() => handleSectionChange(section.id)}\n                  />\n                ))}\n              </nav>\n            </UniversalCard>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-3\">\n            <ActiveSectionComponent\n              state={state}\n              updateProfile={updateProfile}\n              updatePreferences={updatePreferences}\n              updateState={updateState}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nOptimizedProfile.displayName = 'OptimizedProfile';\n\n// Memoized Navigation Item\nconst SectionNavItem = React.memo<{\n  section: ProfileSection;\n  isActive: boolean;\n  onClick: () => void;\n}>(({ section, isActive, onClick }) => {\n  const Icon = section.icon;\n  \n  return (\n    <button\n      onClick={onClick}\n      className={cn(\n        'w-full flex items-center justify-between p-3 rounded-lg transition-colors',\n        isActive \n          ? 'bg-blue-500/20 text-blue-400 border border-blue-500/30'\n          : 'hover:bg-white/5 text-white/70 hover:text-white'\n      )}\n    >\n      <div className=\"flex items-center space-x-3\">\n        <Icon className=\"w-5 h-5\" />\n        <span className=\"font-medium\">{section.label}</span>\n      </div>\n      <ChevronRight className=\"w-4 h-4\" />\n    </button>\n  );\n}, (prevProps, nextProps) => \n  prevProps.isActive === nextProps.isActive && \n  prevProps.section.id === nextProps.section.id\n);\n\nSectionNavItem.displayName = 'SectionNavItem';\n\n// Optimized Section Components (consolidated from multiple large components)\nconst ProfileSection = React.memo<SectionProps>(({ state, updateProfile }) => (\n  <UniversalCard variant=\"glass\" className=\"p-6\">\n    <h2 className=\"text-xl font-semibold text-white mb-6\">Profile Information</h2>\n    \n    <div className=\"space-y-6\">\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"w-20 h-20 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center\">\n          <User className=\"w-10 h-10 text-white\" />\n        </div>\n        <div>\n          <h3 className=\"text-lg font-semibold text-white\">{state.profile.name}</h3>\n          <p className=\"text-white/60\">{state.profile.email}</p>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <OptimizedFormField\n          label=\"Full Name\"\n          value={state.profile.name}\n          onChange={(value) => updateProfile({ name: value })}\n        />\n        <OptimizedFormField\n          label=\"Email\"\n          value={state.profile.email}\n          onChange={(value) => updateProfile({ email: value })}\n        />\n      </div>\n      \n      <OptimizedFormField\n        label=\"Bio\"\n        value={state.profile.bio}\n        onChange={(value) => updateProfile({ bio: value })}\n        multiline\n      />\n    </div>\n  </UniversalCard>\n));\n\nconst PreferencesSection = React.memo<SectionProps>(({ state, updatePreferences }) => (\n  <UniversalCard variant=\"glass\" className=\"p-6\">\n    <h2 className=\"text-xl font-semibold text-white mb-6\">Preferences</h2>\n    \n    <div className=\"space-y-6\">\n      <OptimizedSelectField\n        label=\"Theme\"\n        value={state.preferences.theme}\n        onChange={(value) => updatePreferences({ theme: value as any })}\n        options={[\n          { value: 'light', label: 'Light' },\n          { value: 'dark', label: 'Dark' },\n          { value: 'system', label: 'System' }\n        ]}\n      />\n      \n      <OptimizedSelectField\n        label=\"Currency\"\n        value={state.preferences.currency}\n        onChange={(value) => updatePreferences({ currency: value })}\n        options={[\n          { value: 'USD', label: 'USD ($)' },\n          { value: 'EUR', label: 'EUR (€)' },\n          { value: 'GBP', label: 'GBP (£)' }\n        ]}\n      />\n    </div>\n  </UniversalCard>\n));\n\nconst NotificationsSection = React.memo<SectionProps>(({ state, updatePreferences }) => (\n  <UniversalCard variant=\"glass\" className=\"p-6\">\n    <h2 className=\"text-xl font-semibold text-white mb-6\">Notifications</h2>\n    \n    <div className=\"space-y-4\">\n      <OptimizedToggleField\n        label=\"Email Notifications\"\n        description=\"Receive updates via email\"\n        checked={state.preferences.notifications.email}\n        onChange={(checked) => updatePreferences({\n          notifications: { ...state.preferences.notifications, email: checked }\n        })}\n      />\n      \n      <OptimizedToggleField\n        label=\"Push Notifications\"\n        description=\"Receive push notifications on your device\"\n        checked={state.preferences.notifications.push}\n        onChange={(checked) => updatePreferences({\n          notifications: { ...state.preferences.notifications, push: checked }\n        })}\n      />\n    </div>\n  </UniversalCard>\n));\n\nconst PrivacySection = React.memo<SectionProps>(({ state, updatePreferences }) => (\n  <UniversalCard variant=\"glass\" className=\"p-6\">\n    <h2 className=\"text-xl font-semibold text-white mb-6\">Privacy & Security</h2>\n    \n    <div className=\"space-y-4\">\n      <OptimizedToggleField\n        label=\"Share Data\"\n        description=\"Allow sharing anonymized data for insights\"\n        checked={state.preferences.privacy.shareData}\n        onChange={(checked) => updatePreferences({\n          privacy: { ...state.preferences.privacy, shareData: checked }\n        })}\n      />\n      \n      <OptimizedToggleField\n        label=\"Analytics\"\n        description=\"Help improve the app with usage analytics\"\n        checked={state.preferences.privacy.analytics}\n        onChange={(checked) => updatePreferences({\n          privacy: { ...state.preferences.privacy, analytics: checked }\n        })}\n      />\n    </div>\n  </UniversalCard>\n));\n\nconst AppearanceSection = React.memo<SectionProps>(({ state, updatePreferences }) => (\n  <UniversalCard variant=\"glass\" className=\"p-6\">\n    <h2 className=\"text-xl font-semibold text-white mb-6\">Appearance</h2>\n    \n    <div className=\"space-y-6\">\n      <div>\n        <label className=\"block text-sm font-medium text-white mb-3\">Theme</label>\n        <div className=\"grid grid-cols-3 gap-3\">\n          {(['light', 'dark', 'system'] as const).map((theme) => (\n            <button\n              key={theme}\n              onClick={() => updatePreferences({ theme })}\n              className={cn(\n                'p-4 rounded-lg border transition-colors',\n                state.preferences.theme === theme\n                  ? 'border-blue-500 bg-blue-500/20'\n                  : 'border-white/20 hover:border-white/40'\n              )}\n            >\n              <div className=\"text-sm font-medium text-white capitalize\">\n                {theme}\n              </div>\n            </button>\n          ))}\n        </div>\n      </div>\n    </div>\n  </UniversalCard>\n));\n\n// Optimized Form Components (consolidated from multiple form components)\ninterface SectionProps {\n  state: OptimizedProfileState;\n  updateProfile?: (updates: Partial<OptimizedProfileState['profile']>) => void;\n  updatePreferences?: (updates: Partial<UserPreferences>) => void;\n  updateState?: (updates: Partial<OptimizedProfileState>) => void;\n}\n\nconst OptimizedFormField = React.memo<{\n  label: string;\n  value: string;\n  onChange: (value: string) => void;\n  multiline?: boolean;\n}>(({ label, value, onChange, multiline = false }) => (\n  <div>\n    <label className=\"block text-sm font-medium text-white mb-2\">{label}</label>\n    {multiline ? (\n      <textarea\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        className=\"w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n        rows={3}\n      />\n    ) : (\n      <input\n        type=\"text\"\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        className=\"w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n      />\n    )}\n  </div>\n));\n\nconst OptimizedSelectField = React.memo<{\n  label: string;\n  value: string;\n  onChange: (value: string) => void;\n  options: Array<{ value: string; label: string }>;\n}>(({ label, value, onChange, options }) => (\n  <div>\n    <label className=\"block text-sm font-medium text-white mb-2\">{label}</label>\n    <select\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n      className=\"w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n    >\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label}\n        </option>\n      ))}\n    </select>\n  </div>\n));\n\nconst OptimizedToggleField = React.memo<{\n  label: string;\n  description: string;\n  checked: boolean;\n  onChange: (checked: boolean) => void;\n}>(({ label, description, checked, onChange }) => (\n  <div className=\"flex items-center justify-between p-4 bg-white/5 rounded-lg\">\n    <div>\n      <div className=\"font-medium text-white\">{label}</div>\n      <div className=\"text-sm text-white/60\">{description}</div>\n    </div>\n    <button\n      onClick={() => onChange(!checked)}\n      className={cn(\n        'relative w-12 h-6 rounded-full transition-colors',\n        checked ? 'bg-blue-500' : 'bg-white/20'\n      )}\n    >\n      <div\n        className={cn(\n          'absolute top-1 w-4 h-4 rounded-full bg-white transition-transform',\n          checked ? 'translate-x-7' : 'translate-x-1'\n        )}\n      />\n    </button>\n  </div>\n));\n\n// Add display names for memoized components\n[ProfileSection, PreferencesSection, NotificationsSection, PrivacySection, AppearanceSection,\n OptimizedFormField, OptimizedSelectField, OptimizedToggleField].forEach(component => {\n  component.displayName = component.name;\n});\n\nexport default OptimizedProfile;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/pages/Profile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/pages/TransactionDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/screens/MobileTransactionScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/accountService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":357,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":357,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10164,10167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10164,10167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  Account, \n  AccountConnection, \n  AccountBalance, \n  AccountPerformance,\n  Institution,\n  SyncStatus\n} from '@/types/accounts';\nimport { Transaction } from '@/types/transactions';\n\n/**\n * Comprehensive Account Management Service\n * Handles 10,000+ financial institutions via Plaid/Teller integration\n */\nexport class AccountService {\n  private static instance: AccountService;\n  private accounts: Map<string, Account> = new Map();\n  private connections: Map<string, AccountConnection> = new Map();\n  private institutions: Map<string, Institution> = new Map();\n  private balanceHistory: Map<string, AccountBalance[]> = new Map();\n\n  static getInstance(): AccountService {\n    if (!AccountService.instance) {\n      AccountService.instance = new AccountService();\n    }\n    return AccountService.instance;\n  }\n\n  /**\n   * Initialize Plaid integration with secure token handling\n   */\n  async initializePlaidConnection(config: {\n    clientId: string;\n    secret: string;\n    environment: 'sandbox' | 'development' | 'production';\n  }): Promise<void> {\n    // TODO: Initialize Plaid client with secure credential storage\n    console.log('Initializing Plaid connection...');\n    await this.loadSupportedInstitutions();\n  }\n\n  /**\n   * Create manual account for institutions not supported by Plaid\n   */\n  async createManualAccount(data: {\n    familyId: string;\n    name: string;\n    accountType: Account['accountType'];\n    accountSubtype: Account['accountSubtype'];\n    balance: number;\n    currency: string;\n    institutionName?: string;\n  }): Promise<Account> {\n    const account: Account = {\n      id: this.generateAccountId(),\n      familyId: data.familyId,\n      name: data.name,\n      accountType: data.accountType,\n      accountSubtype: data.accountSubtype,\n      balance: data.balance,\n      availableBalance: data.balance,\n      currency: data.currency,\n      isActive: true,\n      isManual: true,\n      syncStatus: 'manual',\n      institutionName: data.institutionName,\n      metadata: {\n        tags: [],\n        notes: 'Manually created account'\n      },\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.accounts.set(account.id, account);\n    await this.recordBalanceHistory(account.id, account.balance, account.currency);\n\n    return account;\n  }\n\n  /**\n   * Link accounts via Plaid using OAuth flow\n   */\n  async linkAccountsViaPlaid(data: {\n    familyId: string;\n    publicToken: string;\n    institutionId: string;\n    accounts: Array<{\n      id: string;\n      name: string;\n      type: string;\n      subtype: string;\n    }>;\n  }): Promise<Account[]> {\n    try {\n      // Exchange public token for access token\n      const accessToken = await this.exchangePlaidToken(data.publicToken);\n      \n      // Create connection record\n      const connection = await this.createAccountConnection({\n        familyId: data.familyId,\n        institutionId: data.institutionId,\n        provider: 'plaid',\n        accessToken,\n        accounts: data.accounts.map(a => a.id)\n      });\n\n      // Create account records\n      const createdAccounts: Account[] = [];\n      \n      for (const plaidAccount of data.accounts) {\n        const account = await this.createAccountFromPlaid({\n          familyId: data.familyId,\n          connectionId: connection.id,\n          plaidAccount,\n          institutionId: data.institutionId\n        });\n        \n        createdAccounts.push(account);\n      }\n\n      // Initial sync of balances and transactions\n      await this.syncAccountData(connection.id);\n\n      return createdAccounts;\n    } catch (error) {\n      console.error('Failed to link accounts via Plaid:', error);\n      throw new Error('Account linking failed. Please try again.');\n    }\n  }\n\n  /**\n   * Sync account data from external providers\n   */\n  async syncAccountData(connectionId: string): Promise<void> {\n    const connection = this.connections.get(connectionId);\n    if (!connection) {\n      throw new Error('Connection not found');\n    }\n\n    try {\n      connection.status = 'active';\n      connection.lastSyncAt = new Date();\n\n      if (connection.provider === 'plaid') {\n        await this.syncPlaidAccounts(connection);\n      } else if (connection.provider === 'teller') {\n        await this.syncTellerAccounts(connection);\n      }\n\n      this.connections.set(connectionId, connection);\n    } catch (error) {\n      console.error('Sync failed:', error);\n      connection.status = 'error';\n      connection.error = {\n        code: 'SYNC_ERROR',\n        message: error instanceof Error ? error.message : 'Unknown sync error',\n        timestamp: new Date()\n      };\n      this.connections.set(connectionId, connection);\n      throw error;\n    }\n  }\n\n  /**\n   * Get accounts for a family with filtering and sorting\n   */\n  async getFamilyAccounts(\n    familyId: string,\n    filters?: {\n      accountType?: Account['accountType'];\n      isActive?: boolean;\n      institutionId?: string;\n    }\n  ): Promise<Account[]> {\n    const familyAccounts = Array.from(this.accounts.values())\n      .filter(account => account.familyId === familyId);\n\n    if (!filters) {\n      return familyAccounts;\n    }\n\n    return familyAccounts.filter(account => {\n      if (filters.accountType && account.accountType !== filters.accountType) {\n        return false;\n      }\n      if (filters.isActive !== undefined && account.isActive !== filters.isActive) {\n        return false;\n      }\n      if (filters.institutionId && account.institutionId !== filters.institutionId) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  /**\n   * Calculate account performance metrics\n   */\n  async calculateAccountPerformance(\n    accountId: string,\n    period: AccountPerformance['period']\n  ): Promise<AccountPerformance> {\n    const account = this.accounts.get(accountId);\n    if (!account) {\n      throw new Error('Account not found');\n    }\n\n    const balanceHistory = this.balanceHistory.get(accountId) || [];\n    const { startDate, endDate } = this.getPeriodDates(period);\n    \n    const periodBalances = balanceHistory.filter(\n      balance => balance.asOfDate >= startDate && balance.asOfDate <= endDate\n    );\n\n    if (periodBalances.length === 0) {\n      return {\n        accountId,\n        period,\n        startBalance: account.balance,\n        endBalance: account.balance,\n        totalReturn: 0,\n        totalReturnPercentage: 0,\n        deposits: 0,\n        withdrawals: 0,\n        fees: 0,\n        interest: 0,\n        dividends: 0,\n        unrealizedGains: 0,\n        realizedGains: 0\n      };\n    }\n\n    const startBalance = periodBalances[0].balance;\n    const endBalance = periodBalances[periodBalances.length - 1].balance;\n    const totalReturn = endBalance - startBalance;\n    const totalReturnPercentage = startBalance > 0 ? (totalReturn / startBalance) * 100 : 0;\n\n    // TODO: Calculate detailed metrics from transaction data\n    return {\n      accountId,\n      period,\n      startBalance,\n      endBalance,\n      totalReturn,\n      totalReturnPercentage,\n      deposits: 0, // Calculate from transactions\n      withdrawals: 0, // Calculate from transactions\n      fees: 0, // Calculate from fee transactions\n      interest: 0, // Calculate from interest transactions\n      dividends: 0, // Calculate from dividend transactions\n      unrealizedGains: 0, // For investment accounts\n      realizedGains: 0 // For investment accounts\n    };\n  }\n\n  /**\n   * Update account information\n   */\n  async updateAccount(\n    accountId: string,\n    updates: Partial<Pick<Account, 'name' | 'isActive' | 'metadata'>>\n  ): Promise<Account> {\n    const account = this.accounts.get(accountId);\n    if (!account) {\n      throw new Error('Account not found');\n    }\n\n    const updatedAccount = {\n      ...account,\n      ...updates,\n      updatedAt: new Date()\n    };\n\n    this.accounts.set(accountId, updatedAccount);\n    return updatedAccount;\n  }\n\n  /**\n   * Get account balance history for charting\n   */\n  async getAccountBalanceHistory(\n    accountId: string,\n    days: number = 30\n  ): Promise<AccountBalance[]> {\n    const history = this.balanceHistory.get(accountId) || [];\n    const cutoffDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);\n    \n    return history.filter(balance => balance.asOfDate >= cutoffDate);\n  }\n\n  /**\n   * Delete account (soft delete - mark as inactive)\n   */\n  async deleteAccount(accountId: string): Promise<void> {\n    const account = this.accounts.get(accountId);\n    if (!account) {\n      throw new Error('Account not found');\n    }\n\n    account.isActive = false;\n    account.updatedAt = new Date();\n    this.accounts.set(accountId, account);\n  }\n\n  /**\n   * Get supported institutions for account linking\n   */\n  async getSupportedInstitutions(search?: string): Promise<Institution[]> {\n    const institutions = Array.from(this.institutions.values())\n      .filter(inst => inst.isActive);\n\n    if (!search) {\n      return institutions.slice(0, 50); // Limit for performance\n    }\n\n    return institutions\n      .filter(inst => \n        inst.name.toLowerCase().includes(search.toLowerCase())\n      )\n      .slice(0, 20);\n  }\n\n  // Private helper methods\n  private async exchangePlaidToken(publicToken: string): Promise<string> {\n    // TODO: Implement actual Plaid token exchange\n    // This would make an API call to Plaid's /link/token/exchange endpoint\n    return `access_token_${Date.now()}`;\n  }\n\n  private async createAccountConnection(data: {\n    familyId: string;\n    institutionId: string;\n    provider: 'plaid' | 'teller';\n    accessToken: string;\n    accounts: string[];\n  }): Promise<AccountConnection> {\n    const connection: AccountConnection = {\n      id: this.generateConnectionId(),\n      familyId: data.familyId,\n      institutionId: data.institutionId,\n      provider: data.provider,\n      accessToken: data.accessToken, // This should be encrypted in production\n      accounts: data.accounts,\n      status: 'active',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.connections.set(connection.id, connection);\n    return connection;\n  }\n\n  private async createAccountFromPlaid(data: {\n    familyId: string;\n    connectionId: string;\n    plaidAccount: any;\n    institutionId: string;\n  }): Promise<Account> {\n    const institution = this.institutions.get(data.institutionId);\n    \n    const account: Account = {\n      id: this.generateAccountId(),\n      familyId: data.familyId,\n      name: data.plaidAccount.name,\n      accountType: this.mapPlaidAccountType(data.plaidAccount.type),\n      accountSubtype: this.mapPlaidAccountSubtype(data.plaidAccount.subtype),\n      institutionId: data.institutionId,\n      institutionName: institution?.name,\n      externalAccountId: data.plaidAccount.id,\n      balance: 0, // Will be updated during sync\n      currency: 'USD',\n      isActive: true,\n      isManual: false,\n      syncStatus: 'pending',\n      metadata: {\n        plaidAccountId: data.plaidAccount.id,\n        tags: [],\n        notes: 'Linked via Plaid'\n      },\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.accounts.set(account.id, account);\n    return account;\n  }\n\n  private async syncPlaidAccounts(connection: AccountConnection): Promise<void> {\n    // TODO: Implement actual Plaid API calls\n    // This would fetch balances and transactions from Plaid\n    \n    for (const accountId of connection.accounts) {\n      const account = Array.from(this.accounts.values())\n        .find(acc => acc.externalAccountId === accountId);\n      \n      if (account) {\n        // Mock balance update\n        account.balance = Math.random() * 10000;\n        account.lastSyncAt = new Date();\n        account.syncStatus = 'active';\n        this.accounts.set(account.id, account);\n        \n        await this.recordBalanceHistory(account.id, account.balance, account.currency);\n      }\n    }\n  }\n\n  private async syncTellerAccounts(connection: AccountConnection): Promise<void> {\n    // TODO: Implement Teller API integration\n    console.log('Syncing Teller accounts...');\n  }\n\n  private async recordBalanceHistory(\n    accountId: string,\n    balance: number,\n    currency: string\n  ): Promise<void> {\n    const history = this.balanceHistory.get(accountId) || [];\n    \n    const balanceRecord: AccountBalance = {\n      accountId,\n      balance,\n      currency,\n      asOfDate: new Date(),\n      balanceType: 'current'\n    };\n\n    history.push(balanceRecord);\n    \n    // Keep only last 365 days of history\n    const cutoffDate = new Date(Date.now() - 365 * 24 * 60 * 60 * 1000);\n    const filteredHistory = history.filter(record => record.asOfDate >= cutoffDate);\n    \n    this.balanceHistory.set(accountId, filteredHistory);\n  }\n\n  private async loadSupportedInstitutions(): Promise<void> {\n    // Mock data - in production this would come from Plaid/Teller APIs\n    const mockInstitutions: Institution[] = [\n      {\n        id: 'chase',\n        name: 'Chase Bank',\n        plaidInstitutionId: 'ins_3',\n        isActive: true,\n        capabilities: {\n          accounts: true,\n          transactions: true,\n          investments: true,\n          liabilities: true,\n          identity: true,\n          auth: true,\n          realTimeUpdates: false\n        }\n      },\n      {\n        id: 'bofa',\n        name: 'Bank of America',\n        plaidInstitutionId: 'ins_1',\n        isActive: true,\n        capabilities: {\n          accounts: true,\n          transactions: true,\n          investments: false,\n          liabilities: true,\n          identity: true,\n          auth: true,\n          realTimeUpdates: false\n        }\n      }\n      // Add more institutions...\n    ];\n\n    for (const institution of mockInstitutions) {\n      this.institutions.set(institution.id, institution);\n    }\n  }\n\n  private mapPlaidAccountType(plaidType: string): Account['accountType'] {\n    switch (plaidType) {\n      case 'depository':\n        return 'depository';\n      case 'credit':\n        return 'credit';\n      case 'loan':\n        return 'loan';\n      case 'investment':\n        return 'investment';\n      case 'insurance':\n        return 'insurance';\n      case 'property':\n        return 'property';\n      default:\n        return 'other';\n    }\n  }\n\n  private mapPlaidAccountSubtype(plaidSubtype: string): Account['accountSubtype'] {\n    // Map Plaid subtypes to our internal subtypes\n    const subtypeMap: Record<string, Account['accountSubtype']> = {\n      'checking': 'checking',\n      'savings': 'savings',\n      'money market': 'money_market',\n      'cd': 'cd',\n      'credit card': 'credit_card',\n      'mortgage': 'mortgage',\n      'auto': 'auto_loan',\n      'student': 'student_loan',\n      'brokerage': 'brokerage',\n      'ira': 'ira',\n      'roth': 'roth_ira',\n      '401k': '401k',\n      '403b': '403b'\n    };\n\n    return subtypeMap[plaidSubtype.toLowerCase()] || 'checking';\n  }\n\n  private getPeriodDates(period: AccountPerformance['period']): { startDate: Date; endDate: Date } {\n    const endDate = new Date();\n    const startDate = new Date();\n\n    switch (period) {\n      case 'day':\n        startDate.setDate(startDate.getDate() - 1);\n        break;\n      case 'week':\n        startDate.setDate(startDate.getDate() - 7);\n        break;\n      case 'month':\n        startDate.setMonth(startDate.getMonth() - 1);\n        break;\n      case 'quarter':\n        startDate.setMonth(startDate.getMonth() - 3);\n        break;\n      case 'year':\n        startDate.setFullYear(startDate.getFullYear() - 1);\n        break;\n      case 'ytd':\n        startDate.setMonth(0, 1);\n        break;\n      case 'all':\n        startDate.setFullYear(2000, 0, 1);\n        break;\n    }\n\n    return { startDate, endDate };\n  }\n\n  private generateAccountId(): string {\n    return `acc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateConnectionId(): string {\n    return `conn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\nexport const accountService = AccountService.getInstance();","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/aiFinancialService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1962,1965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1962,1965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":320,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10574,10577],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10574,10577],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Family, FamilyStats } from '@/types/family';\nimport { Account } from '@/types/accounts';\nimport { Transaction, TransactionAnalytics } from '@/types/transactions';\nimport { Budget } from '@/types/budgets';\n\ninterface AIFinancialContext {\n  family: Family;\n  accounts: Account[];\n  recentTransactions: Transaction[];\n  budgets: Budget[];\n  stats: FamilyStats;\n  analytics: TransactionAnalytics;\n}\n\ninterface AIResponse {\n  content: string;\n  insights: FinancialInsight[];\n  recommendations: FinancialRecommendation[];\n  confidence: number;\n}\n\ninterface FinancialInsight {\n  id: string;\n  type: 'spending_pattern' | 'savings_opportunity' | 'budget_analysis' | 'investment_advice' | 'debt_management';\n  title: string;\n  description: string;\n  impact: 'high' | 'medium' | 'low';\n  category?: string;\n  amount?: number;\n  confidence: number;\n}\n\ninterface FinancialRecommendation {\n  id: string;\n  type: 'action' | 'optimization' | 'alert' | 'goal_setting';\n  title: string;\n  description: string;\n  actionItems: string[];\n  potentialSavings?: number;\n  timeframe: 'immediate' | 'short_term' | 'long_term';\n  priority: 'high' | 'medium' | 'low';\n}\n\ninterface ChatMessage {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n  insights?: FinancialInsight[];\n  recommendations?: FinancialRecommendation[];\n  context?: Partial<AIFinancialContext>;\n}\n\n/**\n * AI-Powered Financial Advisory Service\n * Provides contextual financial insights and personalized recommendations\n */\nexport class AIFinancialService {\n  private static instance: AIFinancialService;\n  private chatHistory: Map<string, ChatMessage[]> = new Map();\n  private insights: Map<string, FinancialInsight[]> = new Map();\n  private recommendations: Map<string, FinancialRecommendation[]> = new Map();\n\n  // Mock OpenAI client - in production this would be the actual OpenAI SDK\n  private openaiClient = {\n    chat: {\n      completions: {\n        create: async (params: any) => {\n          // Mock AI response - in production this would call OpenAI API\n          return {\n            choices: [{\n              message: {\n                content: this.generateMockResponse(params.messages)\n              }\n            }]\n          };\n        }\n      }\n    }\n  };\n\n  static getInstance(): AIFinancialService {\n    if (!AIFinancialService.instance) {\n      AIFinancialService.instance = new AIFinancialService();\n    }\n    return AIFinancialService.instance;\n  }\n\n  /**\n   * Process user query with full financial context\n   */\n  async processFinancialQuery(\n    familyId: string,\n    message: string,\n    context: AIFinancialContext\n  ): Promise<AIResponse> {\n    try {\n      const systemPrompt = this.buildSystemPrompt(context);\n      const userMessage = this.buildUserMessage(message, context);\n\n      const response = await this.openaiClient.chat.completions.create({\n        model: \"gpt-4\",\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: userMessage }\n        ],\n        temperature: 0.3,\n        max_tokens: 1000\n      });\n\n      const aiContent = response.choices[0].message.content;\n      \n      // Generate insights and recommendations based on the query and context\n      const insights = await this.generateInsights(message, context);\n      const recommendations = await this.generateRecommendations(message, context);\n\n      // Store in chat history\n      const chatMessage: ChatMessage = {\n        id: this.generateMessageId(),\n        role: 'assistant',\n        content: aiContent,\n        timestamp: new Date(),\n        insights,\n        recommendations,\n        context\n      };\n\n      this.addToChatHistory(familyId, chatMessage);\n\n      return {\n        content: aiContent,\n        insights,\n        recommendations,\n        confidence: 0.85\n      };\n    } catch (error) {\n      console.error('AI query processing failed:', error);\n      throw new Error('Unable to process your request. Please try again.');\n    }\n  }\n\n  /**\n   * Generate proactive financial insights\n   */\n  async generateProactiveInsights(\n    familyId: string,\n    context: AIFinancialContext\n  ): Promise<FinancialInsight[]> {\n    const insights: FinancialInsight[] = [];\n\n    // Spending pattern analysis\n    const spendingInsights = this.analyzeSpendingPatterns(context);\n    insights.push(...spendingInsights);\n\n    // Budget analysis\n    const budgetInsights = this.analyzeBudgetPerformance(context);\n    insights.push(...budgetInsights);\n\n    // Savings opportunities\n    const savingsInsights = this.identifySavingsOpportunities(context);\n    insights.push(...savingsInsights);\n\n    // Investment advice\n    const investmentInsights = this.generateInvestmentAdvice(context);\n    insights.push(...investmentInsights);\n\n    // Store insights\n    this.insights.set(familyId, insights);\n\n    return insights;\n  }\n\n  /**\n   * Get personalized financial recommendations\n   */\n  async getPersonalizedRecommendations(\n    familyId: string,\n    context: AIFinancialContext\n  ): Promise<FinancialRecommendation[]> {\n    const recommendations: FinancialRecommendation[] = [];\n\n    // Emergency fund recommendations\n    if (context.stats.emergencyFundMonths < 3) {\n      recommendations.push({\n        id: this.generateRecommendationId(),\n        type: 'goal_setting',\n        title: 'Build Emergency Fund',\n        description: `You currently have ${context.stats.emergencyFundMonths.toFixed(1)} months of expenses saved. Financial experts recommend 3-6 months.`,\n        actionItems: [\n          'Set up automatic transfers to savings',\n          'Reduce discretionary spending by 10%',\n          'Consider a high-yield savings account'\n        ],\n        potentialSavings: context.stats.monthlyExpenses * 3,\n        timeframe: 'long_term',\n        priority: 'high'\n      });\n    }\n\n    // High spending category recommendations\n    const topCategory = context.analytics.categoryBreakdown[0];\n    if (topCategory && topCategory.percentage > 40) {\n      recommendations.push({\n        id: this.generateRecommendationId(),\n        type: 'optimization',\n        title: `Optimize ${topCategory.category} Spending`,\n        description: `${topCategory.category} accounts for ${topCategory.percentage.toFixed(1)}% of your spending. This is higher than recommended.`,\n        actionItems: [\n          'Review recent transactions in this category',\n          'Set a monthly budget limit',\n          'Look for alternative options to reduce costs'\n        ],\n        potentialSavings: topCategory.amount * 0.15,\n        timeframe: 'short_term',\n        priority: 'medium'\n      });\n    }\n\n    // Debt management\n    if (context.stats.debtToIncomeRatio > 36) {\n      recommendations.push({\n        id: this.generateRecommendationId(),\n        type: 'action',\n        title: 'Reduce Debt-to-Income Ratio',\n        description: `Your debt-to-income ratio is ${context.stats.debtToIncomeRatio.toFixed(1)}%. Aim for below 36%.`,\n        actionItems: [\n          'Consider debt consolidation',\n          'Pay more than minimum on high-interest debt',\n          'Avoid taking on new debt'\n        ],\n        timeframe: 'long_term',\n        priority: 'high'\n      });\n    }\n\n    // Investment allocation\n    const stockAllocation = context.stats.investmentAllocation.stocks / \n      (context.stats.investmentAllocation.stocks + context.stats.investmentAllocation.bonds + context.stats.investmentAllocation.cash);\n    \n    if (stockAllocation < 0.6 && context.family.settings.riskTolerance !== 'conservative') {\n      recommendations.push({\n        id: this.generateRecommendationId(),\n        type: 'optimization',\n        title: 'Optimize Investment Allocation',\n        description: 'Your portfolio may be too conservative for your risk tolerance and time horizon.',\n        actionItems: [\n          'Consider increasing stock allocation',\n          'Review investment fees and expenses',\n          'Rebalance portfolio quarterly'\n        ],\n        timeframe: 'medium_term',\n        priority: 'medium'\n      });\n    }\n\n    this.recommendations.set(familyId, recommendations);\n    return recommendations;\n  }\n\n  /**\n   * Get chat history for a family\n   */\n  getChatHistory(familyId: string): ChatMessage[] {\n    return this.chatHistory.get(familyId) || [];\n  }\n\n  /**\n   * Clear chat history for a family\n   */\n  clearChatHistory(familyId: string): void {\n    this.chatHistory.delete(familyId);\n  }\n\n  // Private helper methods\n  private buildSystemPrompt(context: AIFinancialContext): string {\n    return `You are a highly knowledgeable financial advisor AI assistant. You have access to the user's complete financial picture and should provide personalized, actionable advice.\n\nFamily Financial Context:\n- Family Name: ${context.family.name}\n- Currency: ${context.family.settings.currency}\n- Risk Tolerance: ${context.family.settings.riskTolerance}\n- Investment Style: ${context.family.settings.investmentStyle}\n\nFinancial Summary:\n- Total Net Worth: $${context.stats.totalNetWorth.toLocaleString()}\n- Monthly Income: $${context.stats.monthlyIncome.toLocaleString()}\n- Monthly Expenses: $${context.stats.monthlyExpenses.toLocaleString()}\n- Savings Rate: ${context.stats.savingsRate.toFixed(1)}%\n- Emergency Fund: ${context.stats.emergencyFundMonths.toFixed(1)} months\n- Debt-to-Income Ratio: ${context.stats.debtToIncomeRatio.toFixed(1)}%\n\nKey Guidelines:\n1. Provide specific, actionable advice based on their actual financial data\n2. Be encouraging but realistic about financial goals\n3. Prioritize emergency fund, debt reduction, and savings optimization\n4. Consider their risk tolerance and investment preferences\n5. Suggest concrete next steps they can take immediately\n6. Use their actual spending patterns to inform recommendations\n7. Be mindful of their current financial situation and constraints\n\nAlways format your response in a friendly, professional tone and include specific dollar amounts or percentages when relevant.`;\n  }\n\n  private buildUserMessage(message: string, context: AIFinancialContext): string {\n    const recentSpending = context.analytics.categoryBreakdown\n      .slice(0, 3)\n      .map(cat => `${cat.category}: $${cat.amount.toLocaleString()}`)\n      .join(', ');\n\n    return `User Query: ${message}\n\nAdditional Context:\n- Recent spending breakdown: ${recentSpending}\n- Active accounts: ${context.accounts.length}\n- Recent transactions: ${context.recentTransactions.length} in the last 30 days\n\nPlease provide a helpful response based on their specific financial situation.`;\n  }\n\n  private generateMockResponse(messages: any[]): string {\n    const userMessage = messages[messages.length - 1]?.content || '';\n    \n    // Simple keyword-based responses for demonstration\n    if (userMessage.toLowerCase().includes('budget')) {\n      return \"Based on your spending patterns, I notice you're spending about 35% of your income on housing and 15% on food. This is within healthy ranges! However, I see some opportunities to optimize your entertainment spending, which could free up an additional $200 per month for savings or debt reduction.\";\n    }\n    \n    if (userMessage.toLowerCase().includes('save') || userMessage.toLowerCase().includes('savings')) {\n      return \"Your current savings rate of 12% is a good start! To reach the recommended 20%, consider automating transfers to savings right after payday. Based on your spending patterns, you could potentially increase this by reducing discretionary spending by just 8%. I'd recommend starting with a high-yield savings account for your emergency fund.\";\n    }\n    \n    if (userMessage.toLowerCase().includes('invest') || userMessage.toLowerCase().includes('investment')) {\n      return \"Given your moderate risk tolerance and current financial position, I'd suggest a diversified portfolio with 70% stocks and 30% bonds. Your emergency fund looks solid, so you're ready to invest for long-term growth. Consider low-cost index funds to start, and you could benefit from dollar-cost averaging with $500 monthly contributions.\";\n    }\n    \n    if (userMessage.toLowerCase().includes('debt')) {\n      return \"I see you have a debt-to-income ratio of 28%, which is within acceptable limits. However, focusing on high-interest debt first (like credit cards) could save you significant money. Based on your cash flow, you could allocate an extra $300 per month toward debt reduction and be debt-free 18 months sooner.\";\n    }\n    \n    return \"I'm here to help with your financial questions! Based on your current financial picture, you're doing well with a positive net worth and steady income. I can provide specific advice about budgeting, saving, investing, or debt management. What would you like to focus on?\";\n  }\n\n  private async generateInsights(message: string, context: AIFinancialContext): Promise<FinancialInsight[]> {\n    // Generate contextual insights based on the query\n    return this.analyzeSpendingPatterns(context).slice(0, 2);\n  }\n\n  private async generateRecommendations(message: string, context: AIFinancialContext): Promise<FinancialRecommendation[]> {\n    // Generate contextual recommendations based on the query\n    const allRecommendations = await this.getPersonalizedRecommendations('temp', context);\n    return allRecommendations.slice(0, 2);\n  }\n\n  private analyzeSpendingPatterns(context: AIFinancialContext): FinancialInsight[] {\n    const insights: FinancialInsight[] = [];\n    const categories = context.analytics.categoryBreakdown;\n\n    // High spending categories\n    const highSpendingCategories = categories.filter(cat => cat.percentage > 25);\n    for (const category of highSpendingCategories) {\n      insights.push({\n        id: this.generateInsightId(),\n        type: 'spending_pattern',\n        title: `High ${category.category} Spending`,\n        description: `You're spending ${category.percentage.toFixed(1)}% of your budget on ${category.category}. This is above the recommended 20-25%.`,\n        impact: 'medium',\n        category: category.category,\n        amount: category.amount,\n        confidence: 0.8\n      });\n    }\n\n    return insights;\n  }\n\n  private analyzeBudgetPerformance(context: AIFinancialContext): FinancialInsight[] {\n    const insights: FinancialInsight[] = [];\n    \n    if (context.stats.savingsRate < 10) {\n      insights.push({\n        id: this.generateInsightId(),\n        type: 'savings_opportunity',\n        title: 'Low Savings Rate',\n        description: `Your current savings rate is ${context.stats.savingsRate.toFixed(1)}%. Financial experts recommend saving at least 10-20% of income.`,\n        impact: 'high',\n        confidence: 0.9\n      });\n    }\n\n    return insights;\n  }\n\n  private identifySavingsOpportunities(context: AIFinancialContext): FinancialInsight[] {\n    const insights: FinancialInsight[] = [];\n    \n    // Look for subscription patterns or high-frequency spending\n    const frequentCategories = context.analytics.categoryBreakdown\n      .filter(cat => cat.transactionCount > 20); // More than 20 transactions per month\n    \n    for (const category of frequentCategories) {\n      if (category.averageAmount > 10) {\n        insights.push({\n          id: this.generateInsightId(),\n          type: 'savings_opportunity',\n          title: `Frequent ${category.category} Purchases`,\n          description: `You make ${category.transactionCount} ${category.category} purchases monthly, averaging $${category.averageAmount.toFixed(2)} each. Consider bulk purchases or subscriptions to save money.`,\n          impact: 'low',\n          category: category.category,\n          confidence: 0.7\n        });\n      }\n    }\n\n    return insights;\n  }\n\n  private generateInvestmentAdvice(context: AIFinancialContext): FinancialInsight[] {\n    const insights: FinancialInsight[] = [];\n    \n    if (context.stats.emergencyFundMonths > 6 && context.stats.totalNetWorth > 10000) {\n      insights.push({\n        id: this.generateInsightId(),\n        type: 'investment_advice',\n        title: 'Ready for Investment Growth',\n        description: 'You have a solid emergency fund and positive net worth. Consider increasing your investment allocation to grow wealth faster.',\n        impact: 'high',\n        confidence: 0.8\n      });\n    }\n\n    return insights;\n  }\n\n  private addToChatHistory(familyId: string, message: ChatMessage): void {\n    const history = this.chatHistory.get(familyId) || [];\n    history.push(message);\n    \n    // Keep only last 50 messages\n    if (history.length > 50) {\n      history.splice(0, history.length - 50);\n    }\n    \n    this.chatHistory.set(familyId, history);\n  }\n\n  private generateMessageId(): string {\n    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateInsightId(): string {\n    return `insight_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateRecommendationId(): string {\n    return `rec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\nexport const aiFinancialService = AIFinancialService.getInstance();","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/budgetService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[943,946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[943,946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3363,3366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3363,3366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3885,3888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3885,3888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":270,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9027,9030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9027,9030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  Budget, \n  BudgetCategory, \n  BudgetTemplate, \n  BudgetRecommendation, \n  BudgetAnalytics,\n  BudgetPerformance,\n  BudgetType,\n  BudgetPeriod,\n  BudgetStatus,\n  SavingsGoal,\n  GoalAnalytics,\n  GoalRecommendation\n} from '@/types/budgets';\nimport { TransactionCategory } from '@/types/transactions';\nimport { transactionService } from './transactionService';\nimport { secureStorage } from '@/utils/crypto';\n\n/**\n * Advanced Budgeting & Goal Management Service\n * Handles budget creation, tracking, analytics, and goal management\n */\nclass BudgetService {\n  private static instance: BudgetService;\n  private storageKey = 'vueni:budgets:v2';\n  private budgets: Map<string, Budget> = new Map();\n  private templates: Map<string, BudgetTemplate> = new Map();\n  private goals: Map<string, SavingsGoal> = new Map();\n  private recommendations: Map<string, BudgetRecommendation[]> = new Map();\n\n  // Legacy support\n  private legacyCategories: any[] = [];\n\n  // Default budget category allocations (based on 50/30/20 rule and expert recommendations)\n  private defaultCategoryAllocations: Record<TransactionCategory, {\n    percentage: number;\n    isEssential: boolean;\n    isFixed: boolean;\n    priority: number;\n  }> = {\n    housing: { percentage: 30, isEssential: true, isFixed: true, priority: 1 },\n    transportation: { percentage: 15, isEssential: true, isFixed: false, priority: 2 },\n    food: { percentage: 12, isEssential: true, isFixed: false, priority: 3 },\n    utilities: { percentage: 8, isEssential: true, isFixed: false, priority: 4 },\n    insurance: { percentage: 5, isEssential: true, isFixed: true, priority: 5 },\n    healthcare: { percentage: 5, isEssential: true, isFixed: false, priority: 6 },\n    debt_payments: { percentage: 10, isEssential: true, isFixed: true, priority: 1 },\n    savings: { percentage: 20, isEssential: true, isFixed: false, priority: 2 },\n    entertainment: { percentage: 5, isEssential: false, isFixed: false, priority: 8 },\n    personal_care: { percentage: 3, isEssential: false, isFixed: false, priority: 9 },\n    shopping: { percentage: 5, isEssential: false, isFixed: false, priority: 10 },\n    education: { percentage: 2, isEssential: false, isFixed: false, priority: 7 },\n    gifts_donations: { percentage: 2, isEssential: false, isFixed: false, priority: 11 },\n    business: { percentage: 0, isEssential: false, isFixed: false, priority: 12 },\n    taxes: { percentage: 0, isEssential: true, isFixed: true, priority: 1 },\n    investments: { percentage: 0, isEssential: false, isFixed: false, priority: 3 },\n    fees: { percentage: 1, isEssential: false, isFixed: false, priority: 13 },\n    transfers: { percentage: 0, isEssential: false, isFixed: false, priority: 14 },\n    other: { percentage: 2, isEssential: false, isFixed: false, priority: 15 },\n    income: { percentage: 0, isEssential: false, isFixed: false, priority: 16 }\n  };\n\n  private constructor() {\n    this.loadFromStorage();\n    this.seedDemoData();\n  }\n\n  public static getInstance() {\n    if (!BudgetService.instance) {\n      BudgetService.instance = new BudgetService();\n    }\n    return BudgetService.instance;\n  }\n\n  private loadFromStorage() {\n    if (typeof window === 'undefined') return;\n    try {\n      const data = secureStorage.getItem(this.storageKey);\n      if (data) {\n        // Load new budget data\n        const budgetData = data as any;\n        if (budgetData.budgets) {\n          budgetData.budgets.forEach((budget: Budget) => {\n            this.budgets.set(budget.id, budget);\n          });\n        }\n        if (budgetData.goals) {\n          budgetData.goals.forEach((goal: SavingsGoal) => {\n            this.goals.set(goal.id, goal);\n          });\n        }\n      } else {\n        // Check for legacy data\n        const legacyData = secureStorage.getItem('vueni:budgets:v1');\n        if (legacyData) {\n          this.legacyCategories = legacyData as any[];\n        }\n      }\n    } catch (e) {\n      console.error('Failed to parse budget data from localStorage', e);\n    }\n  }\n\n  private async seedDemoData() {\n    // Create demo budget if none exists\n    if (this.budgets.size === 0) {\n      const demoBudget = await this.createBudget({\n        familyId: 'demo_family',\n        name: 'Monthly Budget - December 2024',\n        description: 'Comprehensive family budget with smart categorization',\n        budgetType: 'percentage',\n        period: 'monthly',\n        startDate: new Date(2024, 11, 1), // December 1, 2024\n        endDate: new Date(2024, 11, 31), // December 31, 2024\n        totalBudgeted: 6000,\n        currency: 'USD',\n        settings: {\n          autoCreateCategories: true,\n          rolloverUnspent: true,\n          allowOverages: true,\n          overageSource: 'other_categories',\n          alertThresholds: { warning: 80, critical: 100 },\n          includeTransfers: false,\n          includePendingTransactions: true,\n          excludeRefunds: true,\n          automaticAdjustments: false,\n          syncWithGoals: true\n        },\n        status: 'active',\n        isTemplate: false\n      });\n\n      // Create demo goals\n      await this.createSavingsGoal({\n        familyId: 'demo_family',\n        name: 'Emergency Fund',\n        description: '6 months of expenses for financial security',\n        goalType: 'emergency_fund',\n        targetAmount: 18000,\n        monthlyContribution: 500,\n        targetDate: new Date(2025, 11, 31),\n        priority: 1,\n        linkedAccountIds: [],\n        autoContribute: true,\n        contributionRules: [{\n          id: 'rule_1',\n          type: 'fixed_amount',\n          amount: 500,\n          frequency: 'monthly',\n          isActive: true\n        }],\n        milestones: [\n          {\n            id: 'milestone_1',\n            name: '25% Complete',\n            targetAmount: 4500,\n            targetDate: new Date(2025, 2, 31),\n            isCompleted: false,\n            description: 'First milestone - $4,500 saved'\n          },\n          {\n            id: 'milestone_2',\n            name: '50% Complete',\n            targetAmount: 9000,\n            targetDate: new Date(2025, 5, 30),\n            isCompleted: false,\n            description: 'Halfway point - $9,000 saved'\n          }\n        ],\n        tags: ['emergency', 'security', 'priority']\n      });\n\n      await this.createSavingsGoal({\n        familyId: 'demo_family',\n        name: 'Vacation Fund',\n        description: 'Summer vacation to Europe',\n        goalType: 'vacation',\n        targetAmount: 8000,\n        monthlyContribution: 300,\n        targetDate: new Date(2025, 5, 1),\n        priority: 2,\n        linkedAccountIds: [],\n        autoContribute: false,\n        contributionRules: [],\n        milestones: [],\n        tags: ['vacation', 'travel', 'family']\n      });\n    }\n  }\n\n  private persist() {\n    if (typeof window === 'undefined') return;\n    const data = {\n      budgets: Array.from(this.budgets.values()),\n      goals: Array.from(this.goals.values()),\n      templates: Array.from(this.templates.values())\n    };\n    secureStorage.setItem(this.storageKey, data);\n  }\n\n  /**\n   * Create a new budget\n   */\n  async createBudget(data: Omit<Budget, 'id' | 'createdAt' | 'updatedAt' | 'totalSpent' | 'totalRemaining' | 'categories'>): Promise<Budget> {\n    const budget: Budget = {\n      id: this.generateBudgetId(),\n      ...data,\n      totalSpent: 0,\n      totalRemaining: data.totalBudgeted,\n      categories: [],\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    // Create default categories based on budget type\n    budget.categories = await this.createDefaultCategories(budget);\n\n    this.budgets.set(budget.id, budget);\n    this.persist();\n    return budget;\n  }\n\n  /**\n   * Create savings goal\n   */\n  async createSavingsGoal(data: Omit<SavingsGoal, 'id' | 'createdAt' | 'updatedAt' | 'currentAmount' | 'status'>): Promise<SavingsGoal> {\n    const goal: SavingsGoal = {\n      id: this.generateGoalId(),\n      ...data,\n      currentAmount: 0,\n      status: 'not_started',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.goals.set(goal.id, goal);\n    this.persist();\n    return goal;\n  }\n\n  /**\n   * Get family's budgets\n   */\n  async getFamilyBudgets(familyId: string): Promise<Budget[]> {\n    return Array.from(this.budgets.values())\n      .filter(budget => budget.familyId === familyId)\n      .sort((a, b) => b.startDate.getTime() - a.startDate.getTime());\n  }\n\n  /**\n   * Get active budget for family\n   */\n  async getActiveBudget(familyId: string): Promise<Budget | null> {\n    const budgets = await this.getFamilyBudgets(familyId);\n    return budgets.find(budget => budget.status === 'active') || null;\n  }\n\n  /**\n   * Get family's savings goals\n   */\n  async getFamilySavingsGoals(familyId: string): Promise<SavingsGoal[]> {\n    return Array.from(this.goals.values())\n      .filter(goal => goal.familyId === familyId && !goal.isArchived)\n      .sort((a, b) => a.priority - b.priority);\n  }\n\n  /**\n   * Legacy support - list categories for compatibility\n   */\n  async listCategories(): Promise<any[]> {\n    // Try to get from active budget first\n    const activeBudget = await this.getActiveBudget('demo_family');\n    if (activeBudget) {\n      return activeBudget.categories.map(cat => ({\n        id: cat.id,\n        name: cat.categoryName,\n        budget: cat.budgetedAmount,\n        spent: cat.spentAmount,\n        color: this.getCategoryColor(cat.categoryName),\n        recurring: true\n      }));\n    }\n\n    // Fallback to legacy categories\n    if (this.legacyCategories.length > 0) {\n      return this.legacyCategories;\n    }\n\n    // Default demo categories\n    return [\n      { id: '1', name: 'Groceries', budget: 600, spent: 450, color: '#4ade80', recurring: true },\n      { id: '2', name: 'Dining', budget: 300, spent: 220, color: '#38bdf8', recurring: true },\n      { id: '3', name: 'Transportation', budget: 200, spent: 145, color: '#f97316', recurring: true },\n      { id: '4', name: 'Entertainment', budget: 200, spent: 165, color: '#a855f7', recurring: true },\n      { id: '5', name: 'Savings & Investments', budget: 500, spent: 500, color: '#facc15', recurring: true }\n    ];\n  }\n\n  // Private helper methods\n  private async createDefaultCategories(budget: Budget): Promise<BudgetCategory[]> {\n    const categories: BudgetCategory[] = [];\n    const allocations = this.defaultCategoryAllocations;\n\n    for (const [categoryName, allocation] of Object.entries(allocations)) {\n      if (allocation.percentage > 0) {\n        const budgetedAmount = (budget.totalBudgeted * allocation.percentage) / 100;\n        \n        categories.push({\n          id: this.generateCategoryId(),\n          budgetId: budget.id,\n          categoryName: categoryName as TransactionCategory,\n          subcategories: [],\n          budgetedAmount,\n          spentAmount: 0,\n          remainingAmount: budgetedAmount,\n          overageAmount: 0,\n          rolloverAmount: 0,\n          priority: allocation.priority,\n          isFixed: allocation.isFixed,\n          isEssential: allocation.isEssential,\n          alerts: [],\n          historicalSpending: []\n        });\n      }\n    }\n\n    return categories.sort((a, b) => a.priority - b.priority);\n  }\n\n  private getCategoryColor(category: string): string {\n    const colors: Record<string, string> = {\n      housing: '#3b82f6',\n      transportation: '#f97316',\n      food: '#10b981',\n      utilities: '#8b5cf6',\n      insurance: '#06b6d4',\n      healthcare: '#ef4444',\n      debt_payments: '#dc2626',\n      savings: '#22c55e',\n      entertainment: '#a855f7',\n      personal_care: '#ec4899',\n      shopping: '#f59e0b',\n      education: '#6366f1',\n      gifts_donations: '#84cc16',\n      other: '#6b7280'\n    };\n    return colors[category] || '#6b7280';\n  }\n\n  private generateBudgetId(): string {\n    return `budget_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateCategoryId(): string {\n    return `category_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateGoalId(): string {\n    return `goal_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\nexport const budgetService = BudgetService.getInstance(); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/creditScoreService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/ecoScoreService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/familyService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/healthKitService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3105,3108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3105,3108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3172,3175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3172,3175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/*\n  healthKitService.ts\n  -------------------\n  Lightweight abstraction around Apple HealthKit. In a true native iOS context we would bridge to\n  HKHealthStore via React Native, Capacitor, or a native Swift module. For web we fall back to\n  a stubbed API that can be replaced by your backend which syncs HealthKit data from the device.\n*/\n\nexport interface HealthMetrics {\n  activeEnergyBurned: number; // kcal per day average\n  exerciseMinutes: number;    // minutes per day average\n  stepCount: number;          // steps per day average\n  sleepHours: number;         // hours per night average\n  restingHeartRate: number;   // bpm\n  vo2Max: number;             // ml/kg·min\n  mindfulMinutes: number;     // minutes per day average\n}\n\nexport interface HealthScoreBreakdown {\n  activityScore: number;\n  cardioScore: number;\n  recoveryScore: number;\n  totalScore: number;\n}\n\nconst clamp = (value: number, min: number, max: number) => Math.min(max, Math.max(min, value));\n\n/**\n * Convert raw HealthKit metrics into a 0-100 health score using a simple weighted model\n * loosely inspired by Oura / WHOOP methodologies.\n */\nexport const calculateHealthScore = (metrics: HealthMetrics): HealthScoreBreakdown => {\n  // Activity (40%) – active energy + exercise minutes + steps\n  const activityTargetCalories = 450; // Apple Activity default move goal\n  const activityTargetExercise = 30;  // mins\n  const activityTargetSteps = 7500;\n\n  const activityCalScore = clamp((metrics.activeEnergyBurned / activityTargetCalories) * 100, 0, 100);\n  const activityExScore = clamp((metrics.exerciseMinutes / activityTargetExercise) * 100, 0, 100);\n  const activityStepScore = clamp((metrics.stepCount / activityTargetSteps) * 100, 0, 100);\n  const activityScore = (activityCalScore + activityExScore + activityStepScore) / 3;\n\n  // Cardio (30%) – resting heart rate (lower is better) + VO2Max (higher is better)\n  const rhrScore = clamp(((80 - metrics.restingHeartRate) / 40) * 100, 0, 100); // 40-80 bpm range\n  const vo2Score = clamp(((metrics.vo2Max - 25) / 30) * 100, 0, 100);           // 25-55 range\n  const cardioScore = (rhrScore + vo2Score) / 2;\n\n  // Recovery (30%) – sleep + mindful minutes\n  const sleepScore = clamp((metrics.sleepHours / 8) * 100, 0, 100);\n  const mindfulnessScore = clamp((metrics.mindfulMinutes / 15) * 100, 0, 100);\n  const recoveryScore = (sleepScore + mindfulnessScore) / 2;\n\n  const totalScore = Math.round(\n    activityScore * 0.4 +\n    cardioScore * 0.3 +\n    recoveryScore * 0.3\n  );\n\n  return {\n    activityScore: Math.round(activityScore),\n    cardioScore: Math.round(cardioScore),\n    recoveryScore: Math.round(recoveryScore),\n    totalScore\n  };\n};\n\n/**\n * Attempt to retrieve HealthKit metrics. Runs in two modes:\n * 1. Native / Capacitor – fetches from window.healthKit bridge if available.\n * 2. Web fallback      – hits REST endpoint `/api/health/summary` which should\n *    be filled by your backend cron pulling from Apple HealthKit CloudKit sync.\n */\nexport const fetchHealthMetrics = async (): Promise<HealthMetrics> => {\n  if (typeof window !== 'undefined' && (window as any).healthKit?.getSummary) {\n    const summary = await (window as any).healthKit.getSummary();\n    return summary as HealthMetrics;\n  }\n\n  // Fallback fetch – returns demo data if endpoint unavailable\n  try {\n    const res = await fetch('/api/health/summary');\n    if (res.ok) return (await res.json()) as HealthMetrics;\n  } catch (_) {\n    /* ignore */\n  }\n\n  // Demo placeholder values\n  return {\n    activeEnergyBurned: 380,\n    exerciseMinutes: 28,\n    stepCount: 8200,\n    sleepHours: 7.4,\n    restingHeartRate: 58,\n    vo2Max: 42,\n    mindfulMinutes: 12\n  };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/investmentService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/mockAiService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/mockHealthEcoService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/mockHistoricalData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/mockReportService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/performanceService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2884,2887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2884,2887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4049,4052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4049,4052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":151,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5201,5204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5201,5204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":187,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6439,6442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6439,6442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":270,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9250,9253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9250,9253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n// Performance monitoring and optimization service\ninterface PerformanceMetrics {\n  loadTime: number;\n  renderTime: number;\n  memoryUsage: number;\n  componentCount: number;\n  bundleSize: number;\n}\n\ninterface PerformanceThresholds {\n  maxLoadTime: number; // 3 seconds\n  maxRenderTime: number; // 16ms for 60fps\n  maxMemoryUsage: number; // 50MB\n  maxComponentCount: number; // 100 components\n}\n\nclass PerformanceService {\n  private static instance: PerformanceService;\n  private metrics: PerformanceMetrics[] = [];\n  private thresholds: PerformanceThresholds = {\n    maxLoadTime: 3000,\n    maxRenderTime: 16,\n    maxMemoryUsage: 50 * 1024 * 1024, // 50MB\n    maxComponentCount: 100,\n  };\n\n  private constructor() {\n    this.setupPerformanceObserver();\n    this.trackMemoryUsage();\n  }\n\n  static getInstance(): PerformanceService {\n    if (!PerformanceService.instance) {\n      PerformanceService.instance = new PerformanceService();\n    }\n    return PerformanceService.instance;\n  }\n\n  // Setup Performance Observer for measuring paint and navigation timings\n  private setupPerformanceObserver(): void {\n    if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {\n      try {\n        // Observe navigation timing\n        const navObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          entries.forEach((entry) => {\n            if (entry.entryType === 'navigation') {\n              const navEntry = entry as PerformanceNavigationTiming;\n              this.recordMetric({\n                loadTime: navEntry.loadEventEnd - navEntry.loadEventStart,\n                renderTime: navEntry.domContentLoadedEventEnd - navEntry.domContentLoadedEventStart,\n                memoryUsage: this.getCurrentMemoryUsage(),\n                componentCount: this.getComponentCount(),\n                bundleSize: this.estimateBundleSize(),\n              });\n            }\n          });\n        });\n        navObserver.observe({ entryTypes: ['navigation'] });\n\n        // Observe paint timing\n        const paintObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          entries.forEach((entry) => {\n            if (entry.name === 'first-contentful-paint') {\n              console.log(`First Contentful Paint: ${entry.startTime}ms`);\n            }\n            if (entry.name === 'largest-contentful-paint') {\n              console.log(`Largest Contentful Paint: ${entry.startTime}ms`);\n            }\n          });\n        });\n        paintObserver.observe({ entryTypes: ['paint', 'largest-contentful-paint'] });\n\n                 // Observe layout shift\n        const layoutObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          let cls = 0;\n          entries.forEach((entry) => {\n            const layoutShiftEntry = entry as any;\n            if (!layoutShiftEntry.hadRecentInput) {\n              cls += layoutShiftEntry.value;\n            }\n          });\n          if (cls > 0.1) {\n            console.warn(`Cumulative Layout Shift detected: ${cls}`);\n          }\n        });\n        layoutObserver.observe({ entryTypes: ['layout-shift'] });\n      } catch (error) {\n        console.warn('Performance Observer not fully supported:', error);\n      }\n    }\n  }\n\n  // Track memory usage periodically\n  private trackMemoryUsage(): void {\n    if (typeof window !== 'undefined' && 'performance' in window && 'memory' in performance) {\n      setInterval(() => {\n        const memoryUsage = this.getCurrentMemoryUsage();\n        if (memoryUsage > this.thresholds.maxMemoryUsage) {\n          console.warn(`High memory usage detected: ${(memoryUsage / 1024 / 1024).toFixed(2)}MB`);\n          this.triggerGarbageCollection();\n        }\n      }, 30000); // Check every 30 seconds\n    }\n  }\n\n  // Get current memory usage (Chrome only)\n  private getCurrentMemoryUsage(): number {\n    if (typeof window !== 'undefined' && 'performance' in window && 'memory' in performance) {\n      return (performance as any).memory.usedJSHeapSize || 0;\n    }\n    return 0;\n  }\n\n  // Estimate bundle size based on script tags\n  private estimateBundleSize(): number {\n    if (typeof document === 'undefined') return 0;\n    \n    const scripts = document.querySelectorAll('script[src]');\n    let totalSize = 0;\n    \n    scripts.forEach((script) => {\n      // This is an estimation - in production you'd want actual bundle size metrics\n      const src = (script as HTMLScriptElement).src;\n      if (src.includes('index') || src.includes('vendor')) {\n        totalSize += 500 * 1024; // Estimate 500KB per major bundle\n      }\n    });\n    \n    return totalSize;\n  }\n\n  // Count React components (estimation)\n  private getComponentCount(): number {\n    if (typeof document === 'undefined') return 0;\n    \n    // Estimate based on elements with React-like attributes\n    const reactElements = document.querySelectorAll('[data-reactroot], [data-testid], .react-component');\n    return reactElements.length;\n  }\n\n  // Record performance metric\n  private recordMetric(metric: PerformanceMetrics): void {\n    this.metrics.push({\n      ...metric,\n      timestamp: Date.now(),\n    } as any);\n\n    // Keep only last 100 metrics\n    if (this.metrics.length > 100) {\n      this.metrics = this.metrics.slice(-100);\n    }\n\n    // Check for threshold violations\n    this.checkThresholds(metric);\n  }\n\n  // Check if metrics exceed thresholds\n  private checkThresholds(metric: PerformanceMetrics): void {\n    const violations: string[] = [];\n\n    if (metric.loadTime > this.thresholds.maxLoadTime) {\n      violations.push(`Load time: ${metric.loadTime}ms (max: ${this.thresholds.maxLoadTime}ms)`);\n    }\n\n    if (metric.renderTime > this.thresholds.maxRenderTime) {\n      violations.push(`Render time: ${metric.renderTime}ms (max: ${this.thresholds.maxRenderTime}ms)`);\n    }\n\n    if (metric.memoryUsage > this.thresholds.maxMemoryUsage) {\n      violations.push(`Memory usage: ${(metric.memoryUsage / 1024 / 1024).toFixed(2)}MB (max: ${(this.thresholds.maxMemoryUsage / 1024 / 1024).toFixed(2)}MB)`);\n    }\n\n    if (violations.length > 0) {\n      console.warn('Performance threshold violations detected:', violations);\n      this.optimizePerformance();\n    }\n  }\n\n  // Trigger garbage collection (if available)\n  private triggerGarbageCollection(): void {\n    if (typeof window !== 'undefined' && 'gc' in window) {\n      (window as any).gc();\n    }\n  }\n\n  // Auto-optimization strategies\n  private optimizePerformance(): void {\n    // Remove unused event listeners\n    this.cleanupEventListeners();\n    \n    // Clear old metrics\n    if (this.metrics.length > 50) {\n      this.metrics = this.metrics.slice(-50);\n    }\n    \n    // Suggest lazy loading\n    this.suggestLazyLoading();\n  }\n\n  // Cleanup event listeners\n  private cleanupEventListeners(): void {\n    // This would remove any unused event listeners\n    // Implementation depends on your specific event management\n  }\n\n  // Suggest lazy loading opportunities\n  private suggestLazyLoading(): void {\n    if (typeof document === 'undefined') return;\n    \n    // Check for images that could be lazy loaded\n    const images = document.querySelectorAll('img:not([loading=\"lazy\"])');\n    if (images.length > 10) {\n      console.warn(`Consider lazy loading ${images.length} images for better performance`);\n    }\n\n    // Check for heavy components that could be code-split\n    const heavyComponents = document.querySelectorAll('[data-heavy-component]');\n    if (heavyComponents.length > 0) {\n      console.warn('Consider code-splitting heavy components:', heavyComponents);\n    }\n  }\n\n  // Public API methods\n  public getAverageLoadTime(): number {\n    if (this.metrics.length === 0) return 0;\n    const totalLoadTime = this.metrics.reduce((sum, metric) => sum + metric.loadTime, 0);\n    return totalLoadTime / this.metrics.length;\n  }\n\n  public getAverageMemoryUsage(): number {\n    if (this.metrics.length === 0) return 0;\n    const totalMemory = this.metrics.reduce((sum, metric) => sum + metric.memoryUsage, 0);\n    return totalMemory / this.metrics.length;\n  }\n\n  public getCurrentMetrics(): PerformanceMetrics | null {\n    return this.metrics.length > 0 ? this.metrics[this.metrics.length - 1] : null;\n  }\n\n  public getMetricHistory(): PerformanceMetrics[] {\n    return [...this.metrics];\n  }\n\n  public setThresholds(newThresholds: Partial<PerformanceThresholds>): void {\n    this.thresholds = { ...this.thresholds, ...newThresholds };\n  }\n\n  // Component performance tracking\n  public trackComponentRender(componentName: string, renderTime: number): void {\n    if (renderTime > this.thresholds.maxRenderTime) {\n      console.warn(`Slow component render detected: ${componentName} took ${renderTime}ms`);\n    }\n  }\n\n  // Bundle analysis\n  public analyzeBundleSize(): Promise<void> {\n    return new Promise((resolve) => {\n      if (typeof window !== 'undefined' && 'performance' in window) {\n        const entries = performance.getEntriesByType('resource');\n        const scripts = entries.filter(entry => entry.name.endsWith('.js'));\n        \n        let totalSize = 0;\n        scripts.forEach((script) => {\n          if ('transferSize' in script) {\n            totalSize += (script as any).transferSize || 0;\n          }\n        });\n\n        console.log(`Total JavaScript bundle size: ${(totalSize / 1024).toFixed(2)}KB`);\n        \n        if (totalSize > 1024 * 1024) { // 1MB\n          console.warn('Large bundle size detected. Consider code splitting.');\n        }\n      }\n      resolve();\n    });\n  }\n\n  // Performance report\n  public generateReport(): string {\n    const currentMetrics = this.getCurrentMetrics();\n    const avgLoadTime = this.getAverageLoadTime();\n    const avgMemory = this.getAverageMemoryUsage();\n\n    return `\nPerformance Report:\n- Current Load Time: ${currentMetrics?.loadTime || 0}ms\n- Average Load Time: ${avgLoadTime.toFixed(2)}ms\n- Current Memory Usage: ${((currentMetrics?.memoryUsage || 0) / 1024 / 1024).toFixed(2)}MB\n- Average Memory Usage: ${(avgMemory / 1024 / 1024).toFixed(2)}MB\n- Component Count: ${currentMetrics?.componentCount || 0}\n- Metrics Collected: ${this.metrics.length}\n    `.trim();\n  }\n}\n\n// Export singleton instance\nexport const performanceService = PerformanceService.getInstance();\n\n// React Hook for component performance tracking\nexport const usePerformanceTracking = (componentName: string) => {\n  React.useEffect(() => {\n    const startTime = performance.now();\n    \n    return () => {\n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      performanceService.trackComponentRender(componentName, renderTime);\n    };\n  }, [componentName]);\n};\n\n// Higher-order component for performance tracking\nexport const withPerformanceTracking = <P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n  componentName?: string\n) => {\n  const PerformanceTrackedComponent = (props: P) => {\n    const name = componentName || WrappedComponent.displayName || WrappedComponent.name || 'Unknown';\n    usePerformanceTracking(name);\n    \n    return React.createElement(WrappedComponent, props);\n  };\n\n  PerformanceTrackedComponent.displayName = `withPerformanceTracking(${WrappedComponent.displayName || WrappedComponent.name})`;\n  \n  return PerformanceTrackedComponent;\n};\n\nexport default PerformanceService; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/savingsGoalsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/scoringModel.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/transactionService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3887,3890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3887,3890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":349,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":349,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12305,12308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12305,12308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":457,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16020,16023],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16020,16023],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":595,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":595,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20355,20358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20355,20358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  Transaction, \n  TransactionCategory, \n  TransactionRule, \n  TransferPair,\n  TransactionAnalytics,\n  CategorySpending,\n  SpendingInsight,\n  TransactionImport\n} from '@/types/transactions';\n\n/**\n * Comprehensive Transaction Processing Service\n * Handles categorization, rules engine, transfer detection, and analytics\n */\nexport class TransactionService {\n  private static instance: TransactionService;\n  private transactions: Map<string, Transaction> = new Map();\n  private rules: Map<string, TransactionRule> = new Map();\n  private transfers: Map<string, TransferPair> = new Map();\n  private imports: Map<string, TransactionImport> = new Map();\n\n  // Category mapping with enhanced intelligence\n  private categoryKeywords: Record<TransactionCategory, string[]> = {\n    income: ['salary', 'paycheck', 'bonus', 'freelance', 'dividend', 'interest', 'refund', 'cashback'],\n    housing: ['rent', 'mortgage', 'property tax', 'hoa', 'utilities', 'insurance home', 'repair', 'maintenance'],\n    transportation: ['gas', 'fuel', 'uber', 'lyft', 'parking', 'toll', 'car payment', 'auto insurance', 'metro', 'bus'],\n    food: ['grocery', 'restaurant', 'fast food', 'coffee', 'starbucks', 'mcdonalds', 'whole foods', 'safeway'],\n    utilities: ['electric', 'gas bill', 'water', 'internet', 'phone', 'cable', 'streaming', 'netflix'],\n    insurance: ['health insurance', 'auto insurance', 'life insurance', 'dental', 'vision'],\n    healthcare: ['doctor', 'hospital', 'pharmacy', 'medical', 'dentist', 'therapy', 'prescription'],\n    savings: ['transfer to savings', 'investment', '401k', 'ira', 'pension'],\n    debt_payments: ['credit card payment', 'loan payment', 'student loan', 'mortgage payment'],\n    entertainment: ['movie', 'concert', 'sports', 'gaming', 'spotify', 'amazon prime', 'gym'],\n    personal_care: ['haircut', 'spa', 'cosmetics', 'clothing', 'shoes'],\n    shopping: ['amazon', 'target', 'walmart', 'online shopping', 'retail'],\n    education: ['tuition', 'books', 'course', 'training', 'certification'],\n    gifts_donations: ['gift', 'charity', 'donation', 'church', 'nonprofit'],\n    business: ['office supplies', 'software', 'business expense', 'conference'],\n    taxes: ['tax payment', 'irs', 'state tax', 'property tax'],\n    investments: ['brokerage', 'stock purchase', 'etf', 'mutual fund'],\n    fees: ['bank fee', 'atm fee', 'overdraft', 'maintenance fee', 'late fee'],\n    transfers: ['transfer', 'wire', 'check deposit', 'internal transfer'],\n    other: ['miscellaneous', 'unknown', 'cash withdrawal']\n  };\n\n  static getInstance(): TransactionService {\n    if (!TransactionService.instance) {\n      TransactionService.instance = new TransactionService();\n    }\n    return TransactionService.instance;\n  }\n\n  /**\n   * Create new transaction with automatic categorization\n   */\n  async createTransaction(data: Omit<Transaction, 'id' | 'createdAt' | 'updatedAt'>): Promise<Transaction> {\n    const transaction: Transaction = {\n      id: this.generateTransactionId(),\n      ...data,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    // Apply automatic categorization\n    if (!transaction.category || transaction.category === 'other') {\n      transaction.category = await this.categorizeTransaction(transaction);\n    }\n\n    // Check for transfer patterns\n    await this.detectTransfers(transaction);\n\n    // Apply transaction rules\n    await this.applyRules(transaction);\n\n    this.transactions.set(transaction.id, transaction);\n    return transaction;\n  }\n\n  /**\n   * Smart transaction categorization using ML-inspired algorithms\n   */\n  async categorizeTransaction(transaction: Transaction): Promise<TransactionCategory> {\n    const text = `${transaction.description} ${transaction.merchantName || ''}`.toLowerCase();\n    \n    // Calculate confidence scores for each category\n    const categoryScores: Record<TransactionCategory, number> = {} as any;\n    \n    for (const [category, keywords] of Object.entries(this.categoryKeywords)) {\n      let score = 0;\n      \n      for (const keyword of keywords) {\n        if (text.includes(keyword.toLowerCase())) {\n          // Boost score based on keyword relevance and position\n          const position = text.indexOf(keyword.toLowerCase());\n          const relevanceBoost = keyword.length / text.length;\n          const positionBoost = position === 0 ? 2 : 1; // Boost if at beginning\n          \n          score += (1 + relevanceBoost) * positionBoost;\n        }\n      }\n\n      // Apply amount-based heuristics\n      if (category === 'income' && transaction.amount > 0) {\n        score *= 2;\n      } else if (category === 'income' && transaction.amount < 0) {\n        score *= 0.1;\n      }\n\n      // Apply frequency-based learning\n      const historicalCategory = await this.getHistoricalCategoryForMerchant(transaction.merchantName);\n      if (historicalCategory === category) {\n        score *= 1.5;\n      }\n\n      categoryScores[category as TransactionCategory] = score;\n    }\n\n    // Find category with highest score\n    const bestCategory = Object.entries(categoryScores).reduce((a, b) => \n      categoryScores[a[0] as TransactionCategory] > categoryScores[b[0] as TransactionCategory] ? a : b\n    )[0] as TransactionCategory;\n\n    return categoryScores[bestCategory] > 0.5 ? bestCategory : 'other';\n  }\n\n  /**\n   * Create and manage transaction rules\n   */\n  async createTransactionRule(rule: Omit<TransactionRule, 'id' | 'createdAt' | 'updatedAt'>): Promise<TransactionRule> {\n    const newRule: TransactionRule = {\n      id: this.generateRuleId(),\n      ...rule,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.rules.set(newRule.id, newRule);\n    \n    // Apply rule to existing transactions\n    await this.applyRuleToExistingTransactions(newRule);\n    \n    return newRule;\n  }\n\n  /**\n   * Apply rules to a transaction\n   */\n  private async applyRules(transaction: Transaction): Promise<void> {\n    const activeRules = Array.from(this.rules.values())\n      .filter(rule => rule.isActive)\n      .sort((a, b) => a.priority - b.priority);\n\n    for (const rule of activeRules) {\n      if (await this.evaluateRuleConditions(transaction, rule.conditions)) {\n        await this.executeRuleActions(transaction, rule.actions);\n      }\n    }\n  }\n\n  /**\n   * Detect transfer transactions between accounts\n   */\n  private async detectTransfers(transaction: Transaction): Promise<void> {\n    // Look for potential matching transactions\n    const potentialMatches = Array.from(this.transactions.values()).filter(t => {\n      const timeDiff = Math.abs(t.date.getTime() - transaction.date.getTime());\n      const amountMatch = Math.abs(Math.abs(t.amount) - Math.abs(transaction.amount)) < 0.01;\n      const sameFamily = t.familyId === transaction.familyId;\n      const differentAccount = t.accountId !== transaction.accountId;\n      const oppositeSign = (t.amount > 0) !== (transaction.amount > 0);\n      const withinTimeWindow = timeDiff <= 3 * 24 * 60 * 60 * 1000; // 3 days\n\n      return sameFamily && differentAccount && amountMatch && oppositeSign && withinTimeWindow;\n    });\n\n    if (potentialMatches.length > 0) {\n      const bestMatch = potentialMatches.sort((a, b) => {\n        const aTimeDiff = Math.abs(a.date.getTime() - transaction.date.getTime());\n        const bTimeDiff = Math.abs(b.date.getTime() - transaction.date.getTime());\n        return aTimeDiff - bTimeDiff;\n      })[0];\n\n      // Create transfer pair\n      const transfer: TransferPair = {\n        id: this.generateTransferId(),\n        familyId: transaction.familyId,\n        sourceTransactionId: transaction.amount < 0 ? transaction.id : bestMatch.id,\n        targetTransactionId: transaction.amount > 0 ? transaction.id : bestMatch.id,\n        amount: Math.abs(transaction.amount),\n        confidence: 0.9, // High confidence for amount and time matching\n        isConfirmed: false,\n        createdAt: new Date()\n      };\n\n      this.transfers.set(transfer.id, transfer);\n\n      // Mark transactions as transfers\n      transaction.isTransfer = true;\n      transaction.transferAccountId = bestMatch.accountId;\n      transaction.transferTransactionId = bestMatch.id;\n      transaction.category = 'transfers';\n\n      bestMatch.isTransfer = true;\n      bestMatch.transferAccountId = transaction.accountId;\n      bestMatch.transferTransactionId = transaction.id;\n      bestMatch.category = 'transfers';\n\n      this.transactions.set(bestMatch.id, bestMatch);\n    }\n  }\n\n  /**\n   * Bulk transaction operations\n   */\n  async bulkUpdateTransactions(\n    transactionIds: string[],\n    updates: Partial<Pick<Transaction, 'category' | 'tags' | 'notes' | 'excludeFromBudget'>>\n  ): Promise<Transaction[]> {\n    const updatedTransactions: Transaction[] = [];\n\n    for (const id of transactionIds) {\n      const transaction = this.transactions.get(id);\n      if (transaction) {\n        const updated = {\n          ...transaction,\n          ...updates,\n          updatedAt: new Date()\n        };\n        this.transactions.set(id, updated);\n        updatedTransactions.push(updated);\n      }\n    }\n\n    return updatedTransactions;\n  }\n\n  /**\n   * Advanced transaction filtering and search\n   */\n  async searchTransactions(\n    familyId: string,\n    filters: {\n      query?: string;\n      categories?: TransactionCategory[];\n      accountIds?: string[];\n      dateRange?: { start: Date; end: Date };\n      amountRange?: { min: number; max: number };\n      tags?: string[];\n      excludeTransfers?: boolean;\n      excludeFromBudget?: boolean;\n    }\n  ): Promise<Transaction[]> {\n    let results = Array.from(this.transactions.values())\n      .filter(t => t.familyId === familyId);\n\n    // Apply filters\n    if (filters.query) {\n      const query = filters.query.toLowerCase();\n      results = results.filter(t => \n        t.description.toLowerCase().includes(query) ||\n        t.merchantName?.toLowerCase().includes(query) ||\n        t.notes?.toLowerCase().includes(query)\n      );\n    }\n\n    if (filters.categories?.length) {\n      results = results.filter(t => filters.categories!.includes(t.category));\n    }\n\n    if (filters.accountIds?.length) {\n      results = results.filter(t => filters.accountIds!.includes(t.accountId));\n    }\n\n    if (filters.dateRange) {\n      results = results.filter(t => \n        t.date >= filters.dateRange!.start && t.date <= filters.dateRange!.end\n      );\n    }\n\n    if (filters.amountRange) {\n      results = results.filter(t => \n        Math.abs(t.amount) >= filters.amountRange!.min && \n        Math.abs(t.amount) <= filters.amountRange!.max\n      );\n    }\n\n    if (filters.tags?.length) {\n      results = results.filter(t => \n        filters.tags!.some(tag => t.tags.includes(tag))\n      );\n    }\n\n    if (filters.excludeTransfers) {\n      results = results.filter(t => !t.isTransfer);\n    }\n\n    if (filters.excludeFromBudget !== undefined) {\n      results = results.filter(t => t.excludeFromBudget === filters.excludeFromBudget);\n    }\n\n    return results.sort((a, b) => b.date.getTime() - a.date.getTime());\n  }\n\n  /**\n   * Generate comprehensive spending analytics\n   */\n  async generateAnalytics(\n    familyId: string,\n    period: 'month' | 'quarter' | 'year'\n  ): Promise<TransactionAnalytics> {\n    const { startDate, endDate } = this.getPeriodDates(period);\n    \n    const transactions = await this.searchTransactions(familyId, {\n      dateRange: { start: startDate, end: endDate },\n      excludeTransfers: true\n    });\n\n    const income = transactions\n      .filter(t => t.amount > 0)\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const expenses = transactions\n      .filter(t => t.amount < 0)\n      .reduce((sum, t) => sum + Math.abs(t.amount), 0);\n\n    const categoryBreakdown = await this.calculateCategoryBreakdown(transactions);\n    const merchantBreakdown = await this.calculateMerchantBreakdown(transactions);\n    const insights = await this.generateSpendingInsights(transactions, categoryBreakdown);\n\n    return {\n      period,\n      totalIncome: income,\n      totalExpenses: expenses,\n      netCashFlow: income - expenses,\n      categoryBreakdown,\n      merchantBreakdown,\n      trends: [], // TODO: Calculate trends\n      insights\n    };\n  }\n\n  /**\n   * Import transactions from CSV/OFX files\n   */\n  async importTransactions(\n    familyId: string,\n    file: File,\n    mapping: any\n  ): Promise<TransactionImport> {\n    const importRecord: TransactionImport = {\n      id: this.generateImportId(),\n      familyId,\n      filename: file.name,\n      format: this.detectFileFormat(file.name),\n      status: 'processing',\n      totalTransactions: 0,\n      importedTransactions: 0,\n      errorTransactions: 0,\n      duplicateTransactions: 0,\n      mapping,\n      errors: [],\n      createdAt: new Date()\n    };\n\n    this.imports.set(importRecord.id, importRecord);\n\n    // Process file asynchronously\n    this.processImportFile(importRecord, file, mapping);\n\n    return importRecord;\n  }\n\n  // Private helper methods\n  private async getHistoricalCategoryForMerchant(merchantName?: string): Promise<TransactionCategory | null> {\n    if (!merchantName) return null;\n\n    const historicalTransactions = Array.from(this.transactions.values())\n      .filter(t => t.merchantName?.toLowerCase() === merchantName.toLowerCase());\n\n    if (historicalTransactions.length === 0) return null;\n\n    // Return most common category for this merchant\n    const categoryCount: Record<string, number> = {};\n    for (const transaction of historicalTransactions) {\n      categoryCount[transaction.category] = (categoryCount[transaction.category] || 0) + 1;\n    }\n\n    const mostCommon = Object.entries(categoryCount)\n      .sort(([,a], [,b]) => b - a)[0];\n\n    return mostCommon ? mostCommon[0] as TransactionCategory : null;\n  }\n\n  private async evaluateRuleConditions(\n    transaction: Transaction,\n    conditions: TransactionRule['conditions']\n  ): Promise<boolean> {\n    return conditions.every(condition => {\n      const fieldValue = this.getTransactionFieldValue(transaction, condition.field);\n      \n      switch (condition.operator) {\n        case 'equals':\n          return fieldValue === condition.value;\n        case 'contains':\n          return String(fieldValue).toLowerCase().includes(String(condition.value).toLowerCase());\n        case 'starts_with':\n          return String(fieldValue).toLowerCase().startsWith(String(condition.value).toLowerCase());\n        case 'ends_with':\n          return String(fieldValue).toLowerCase().endsWith(String(condition.value).toLowerCase());\n        case 'greater_than':\n          return Number(fieldValue) > Number(condition.value);\n        case 'less_than':\n          return Number(fieldValue) < Number(condition.value);\n        case 'between':\n          return Number(fieldValue) >= Number(condition.value) && \n                 Number(fieldValue) <= Number(condition.value2);\n        default:\n          return false;\n      }\n    });\n  }\n\n  private async executeRuleActions(\n    transaction: Transaction,\n    actions: TransactionRule['actions']\n  ): Promise<void> {\n    for (const action of actions) {\n      switch (action.type) {\n        case 'set_category':\n          transaction.category = action.value as TransactionCategory;\n          break;\n        case 'set_subcategory':\n          transaction.subcategory = action.value as string;\n          break;\n        case 'add_tag':\n          if (!transaction.tags.includes(action.value as string)) {\n            transaction.tags.push(action.value as string);\n          }\n          break;\n        case 'set_merchant':\n          transaction.merchantName = action.value as string;\n          break;\n        case 'exclude_from_budget':\n          transaction.excludeFromBudget = action.value as boolean;\n          break;\n        case 'mark_as_transfer':\n          transaction.isTransfer = action.value as boolean;\n          if (transaction.isTransfer) {\n            transaction.category = 'transfers';\n          }\n          break;\n      }\n    }\n  }\n\n  private getTransactionFieldValue(transaction: Transaction, field: string): any {\n    switch (field) {\n      case 'merchant':\n        return transaction.merchantName || '';\n      case 'description':\n        return transaction.description;\n      case 'amount':\n        return Math.abs(transaction.amount);\n      case 'category':\n        return transaction.category;\n      case 'account':\n        return transaction.accountId;\n      default:\n        return '';\n    }\n  }\n\n  private async applyRuleToExistingTransactions(rule: TransactionRule): Promise<void> {\n    const allTransactions = Array.from(this.transactions.values());\n    \n    for (const transaction of allTransactions) {\n      if (await this.evaluateRuleConditions(transaction, rule.conditions)) {\n        await this.executeRuleActions(transaction, rule.actions);\n        transaction.updatedAt = new Date();\n        this.transactions.set(transaction.id, transaction);\n      }\n    }\n  }\n\n  private async calculateCategoryBreakdown(transactions: Transaction[]): Promise<CategorySpending[]> {\n    const categoryMap: Record<string, { amount: number; count: number; transactions: Transaction[] }> = {};\n\n    for (const transaction of transactions) {\n      if (transaction.amount >= 0) continue; // Skip income\n      \n      const category = transaction.category;\n      const amount = Math.abs(transaction.amount);\n      \n      if (!categoryMap[category]) {\n        categoryMap[category] = { amount: 0, count: 0, transactions: [] };\n      }\n      \n      categoryMap[category].amount += amount;\n      categoryMap[category].count += 1;\n      categoryMap[category].transactions.push(transaction);\n    }\n\n    const totalExpenses = Object.values(categoryMap).reduce((sum, cat) => sum + cat.amount, 0);\n\n    return Object.entries(categoryMap).map(([category, data]) => ({\n      category: category as TransactionCategory,\n      amount: data.amount,\n      percentage: totalExpenses > 0 ? (data.amount / totalExpenses) * 100 : 0,\n      transactionCount: data.count,\n      averageAmount: data.amount / data.count,\n      change: {\n        amount: 0, // TODO: Calculate vs previous period\n        percentage: 0,\n        direction: 'stable' as const\n      }\n    })).sort((a, b) => b.amount - a.amount);\n  }\n\n  private async calculateMerchantBreakdown(transactions: Transaction[]) {\n    // Similar to category breakdown but for merchants\n    return [];\n  }\n\n  private async generateSpendingInsights(\n    transactions: Transaction[],\n    categoryBreakdown: CategorySpending[]\n  ): Promise<SpendingInsight[]> {\n    const insights: SpendingInsight[] = [];\n\n    // High spending categories\n    const topCategories = categoryBreakdown.slice(0, 3);\n    for (const category of topCategories) {\n      if (category.percentage > 30) {\n        insights.push({\n          type: 'high_spending',\n          title: `High ${category.category} spending`,\n          description: `${category.category} accounts for ${category.percentage.toFixed(1)}% of your total spending`,\n          amount: category.amount,\n          category: category.category,\n          confidence: 0.9,\n          actionable: true,\n          action: `Consider setting a budget for ${category.category} to control spending`\n        });\n      }\n    }\n\n    // TODO: Add more insight types\n    // - Unusual merchant patterns\n    // - Recurring charge analysis\n    // - Budget alerts\n    // - Savings opportunities\n\n    return insights;\n  }\n\n  private getPeriodDates(period: 'month' | 'quarter' | 'year'): { startDate: Date; endDate: Date } {\n    const endDate = new Date();\n    const startDate = new Date();\n\n    switch (period) {\n      case 'month':\n        startDate.setMonth(startDate.getMonth() - 1);\n        break;\n      case 'quarter':\n        startDate.setMonth(startDate.getMonth() - 3);\n        break;\n      case 'year':\n        startDate.setFullYear(startDate.getFullYear() - 1);\n        break;\n    }\n\n    return { startDate, endDate };\n  }\n\n  private detectFileFormat(filename: string): TransactionImport['format'] {\n    const extension = filename.toLowerCase().split('.').pop();\n    switch (extension) {\n      case 'csv':\n        return 'csv';\n      case 'ofx':\n        return 'ofx';\n      case 'qfx':\n        return 'qfx';\n      case 'qif':\n        return 'qif';\n      default:\n        return 'csv';\n    }\n  }\n\n  private async processImportFile(\n    importRecord: TransactionImport,\n    file: File,\n    mapping: any\n  ): Promise<void> {\n    // TODO: Implement actual file processing\n    // This would parse CSV/OFX and create transactions\n    \n    // Mock processing\n    setTimeout(() => {\n      importRecord.status = 'completed';\n      importRecord.totalTransactions = 100;\n      importRecord.importedTransactions = 95;\n      importRecord.duplicateTransactions = 3;\n      importRecord.errorTransactions = 2;\n      importRecord.completedAt = new Date();\n      \n      this.imports.set(importRecord.id, importRecord);\n    }, 3000);\n  }\n\n  private generateTransactionId(): string {\n    return `txn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateRuleId(): string {\n    return `rule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateTransferId(): string {\n    return `transfer_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateImportId(): string {\n    return `import_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\nexport const transactionService = TransactionService.getInstance();","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/services/visualizationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":445,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":445,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13488,13491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13488,13491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":477,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":477,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14619,14622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14619,14622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { familyService } from './familyService';\nimport { accountService } from './accountService';\nimport { transactionService } from './transactionService';\nimport { investmentService } from './investmentService';\nimport { budgetService } from './budgetService';\n\nexport interface ChartDataPoint {\n  date: string;\n  value: number;\n  category?: string;\n  label?: string;\n  color?: string;\n}\n\nexport interface NetWorthData {\n  date: string;\n  assets: number;\n  liabilities: number;\n  netWorth: number;\n  investmentValue: number;\n  cashValue: number;\n}\n\nexport interface CashFlowData {\n  date: string;\n  income: number;\n  expenses: number;\n  netCashFlow: number;\n  monthlyAverage: number;\n}\n\nexport interface SpendingTrendData {\n  category: string;\n  currentMonth: number;\n  previousMonth: number;\n  change: number;\n  changePercent: number;\n  trend: 'up' | 'down' | 'stable';\n  color: string;\n}\n\nexport interface PortfolioAllocationData {\n  name: string;\n  value: number;\n  percentage: number;\n  color: string;\n  change?: number;\n  changePercent?: number;\n}\n\nexport interface BudgetPerformanceData {\n  category: string;\n  budgeted: number;\n  spent: number;\n  remaining: number;\n  progress: number;\n  status: 'on-track' | 'warning' | 'over-budget';\n  color: string;\n}\n\nexport interface FinancialMetric {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  changePercent: number;\n  trend: 'up' | 'down' | 'stable';\n  format: 'currency' | 'percentage' | 'number';\n  color: string;\n  icon: string;\n}\n\nexport interface DashboardData {\n  netWorthHistory: NetWorthData[];\n  cashFlowHistory: CashFlowData[];\n  spendingTrends: SpendingTrendData[];\n  portfolioAllocation: PortfolioAllocationData[];\n  budgetPerformance: BudgetPerformanceData[];\n  keyMetrics: FinancialMetric[];\n  lastUpdated: Date;\n}\n\n/**\n * Visualization Service\n * Aggregates and transforms financial data for dashboard visualizations\n */\nexport class VisualizationService {\n  private static instance: VisualizationService;\n\n  static getInstance(): VisualizationService {\n    if (!VisualizationService.instance) {\n      VisualizationService.instance = new VisualizationService();\n    }\n    return VisualizationService.instance;\n  }\n\n  /**\n   * Get comprehensive dashboard data for a family\n   */\n  async getDashboardData(familyId: string): Promise<DashboardData> {\n    const [\n      netWorthHistory,\n      cashFlowHistory,\n      spendingTrends,\n      portfolioAllocation,\n      budgetPerformance,\n      keyMetrics\n    ] = await Promise.all([\n      this.getNetWorthHistory(familyId),\n      this.getCashFlowHistory(familyId),\n      this.getSpendingTrends(familyId),\n      this.getPortfolioAllocation(familyId),\n      this.getBudgetPerformance(familyId),\n      this.getKeyMetrics(familyId)\n    ]);\n\n    return {\n      netWorthHistory,\n      cashFlowHistory,\n      spendingTrends,\n      portfolioAllocation,\n      budgetPerformance,\n      keyMetrics,\n      lastUpdated: new Date()\n    };\n  }\n\n  /**\n   * Generate net worth history over time\n   */\n  async getNetWorthHistory(familyId: string, months: number = 12): Promise<NetWorthData[]> {\n    const family = await familyService.getFamilyById(familyId);\n    const accounts = await accountService.getFamilyAccounts(familyId);\n    const portfolio = await investmentService.getFamilyPortfolio(familyId);\n\n    const history: NetWorthData[] = [];\n    const currentDate = new Date();\n\n    for (let i = months - 1; i >= 0; i--) {\n      const date = new Date(currentDate);\n      date.setMonth(date.getMonth() - i);\n      \n      // Simulate historical data with growth trend\n      const monthsAgo = i;\n      const growthFactor = 1 + (monthsAgo * 0.01); // 1% monthly growth\n      const volatility = (Math.random() - 0.5) * 0.1; // ±5% volatility\n      \n      const baseNetWorth = family.stats.totalNetWorth;\n      const netWorth = baseNetWorth * growthFactor * (1 + volatility);\n      \n      const investmentValue = portfolio.totalValue * growthFactor * (1 + volatility * 1.5);\n      const cashValue = accounts\n        .filter(acc => acc.type === 'checking' || acc.type === 'savings')\n        .reduce((sum, acc) => sum + acc.balance, 0) * (1 + volatility * 0.5);\n      \n      const assets = netWorth + Math.abs(family.stats.totalDebt);\n      const liabilities = Math.abs(family.stats.totalDebt) * (1 - monthsAgo * 0.02); // Decreasing debt\n\n      history.push({\n        date: date.toISOString().split('T')[0],\n        assets,\n        liabilities,\n        netWorth,\n        investmentValue,\n        cashValue\n      });\n    }\n\n    return history;\n  }\n\n  /**\n   * Generate cash flow history\n   */\n  async getCashFlowHistory(familyId: string, months: number = 12): Promise<CashFlowData[]> {\n    const history: CashFlowData[] = [];\n    const currentDate = new Date();\n\n    for (let i = months - 1; i >= 0; i--) {\n      const date = new Date(currentDate);\n      date.setMonth(date.getMonth() - i);\n      \n      const startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      const endDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n      \n      // Get actual transactions for the month\n      const transactions = await transactionService.searchTransactions(familyId, {\n        dateRange: { start: startDate, end: endDate }\n      });\n\n      const income = transactions\n        .filter(t => t.amount > 0)\n        .reduce((sum, t) => sum + t.amount, 0);\n      \n      const expenses = Math.abs(transactions\n        .filter(t => t.amount < 0)\n        .reduce((sum, t) => sum + t.amount, 0));\n\n      const netCashFlow = income - expenses;\n      \n      // Calculate rolling average\n      const monthlyAverage = history.length > 0 \n        ? history.slice(-3).reduce((sum, h) => sum + h.netCashFlow, netCashFlow) / (history.length > 2 ? 4 : history.length + 1)\n        : netCashFlow;\n\n      history.push({\n        date: date.toISOString().split('T')[0],\n        income,\n        expenses,\n        netCashFlow,\n        monthlyAverage\n      });\n    }\n\n    return history;\n  }\n\n  /**\n   * Generate spending trends by category\n   */\n  async getSpendingTrends(familyId: string): Promise<SpendingTrendData[]> {\n    const currentDate = new Date();\n    const currentMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    const previousMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);\n    const previousMonthEnd = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0);\n\n    const [currentTransactions, previousTransactions] = await Promise.all([\n      transactionService.searchTransactions(familyId, {\n        dateRange: { start: currentMonth, end: currentDate }\n      }),\n      transactionService.searchTransactions(familyId, {\n        dateRange: { start: previousMonth, end: previousMonthEnd }\n      })\n    ]);\n\n    // Group by category\n    const currentSpending = this.groupTransactionsByCategory(currentTransactions);\n    const previousSpending = this.groupTransactionsByCategory(previousTransactions);\n\n    const categories = new Set([...Object.keys(currentSpending), ...Object.keys(previousSpending)]);\n    const trends: SpendingTrendData[] = [];\n\n    for (const category of categories) {\n      const current = currentSpending[category] || 0;\n      const previous = previousSpending[category] || 0;\n      const change = current - previous;\n      const changePercent = previous > 0 ? (change / previous) * 100 : 0;\n      \n      let trend: 'up' | 'down' | 'stable' = 'stable';\n      if (Math.abs(changePercent) > 5) {\n        trend = changePercent > 0 ? 'up' : 'down';\n      }\n\n      trends.push({\n        category,\n        currentMonth: current,\n        previousMonth: previous,\n        change,\n        changePercent,\n        trend,\n        color: this.getCategoryColor(category)\n      });\n    }\n\n    return trends.sort((a, b) => b.currentMonth - a.currentMonth);\n  }\n\n  /**\n   * Get portfolio allocation data\n   */\n  async getPortfolioAllocation(familyId: string): Promise<PortfolioAllocationData[]> {\n    const portfolio = await investmentService.getFamilyPortfolio(familyId);\n    const allocation = portfolio.allocation;\n\n    const allocationData: PortfolioAllocationData[] = [\n      {\n        name: 'Stocks',\n        value: (allocation.stocks / 100) * portfolio.totalValue,\n        percentage: allocation.stocks,\n        color: '#3b82f6',\n        change: Math.random() * 1000 - 500,\n        changePercent: (Math.random() - 0.5) * 10\n      },\n      {\n        name: 'Bonds',\n        value: (allocation.bonds / 100) * portfolio.totalValue,\n        percentage: allocation.bonds,\n        color: '#10b981',\n        change: Math.random() * 500 - 250,\n        changePercent: (Math.random() - 0.5) * 5\n      },\n      {\n        name: 'Cash',\n        value: (allocation.cash / 100) * portfolio.totalValue,\n        percentage: allocation.cash,\n        color: '#f59e0b',\n        change: Math.random() * 200 - 100,\n        changePercent: (Math.random() - 0.5) * 2\n      },\n      {\n        name: 'REITs',\n        value: (allocation.reits / 100) * portfolio.totalValue,\n        percentage: allocation.reits,\n        color: '#8b5cf6',\n        change: Math.random() * 300 - 150,\n        changePercent: (Math.random() - 0.5) * 8\n      },\n      {\n        name: 'Crypto',\n        value: (allocation.crypto / 100) * portfolio.totalValue,\n        percentage: allocation.crypto,\n        color: '#f97316',\n        change: Math.random() * 1000 - 500,\n        changePercent: (Math.random() - 0.5) * 20\n      },\n      {\n        name: 'Other',\n        value: (allocation.other / 100) * portfolio.totalValue,\n        percentage: allocation.other,\n        color: '#6b7280',\n        change: Math.random() * 100 - 50,\n        changePercent: (Math.random() - 0.5) * 3\n      }\n    ].filter(item => item.value > 0);\n\n    return allocationData;\n  }\n\n  /**\n   * Get budget performance data\n   */\n  async getBudgetPerformance(familyId: string): Promise<BudgetPerformanceData[]> {\n    const budget = await budgetService.getActiveBudget(familyId);\n    if (!budget) return [];\n\n    return budget.categories.map(category => {\n      const progress = category.budgetedAmount > 0 ? (category.spentAmount / category.budgetedAmount) * 100 : 0;\n      \n      let status: 'on-track' | 'warning' | 'over-budget' = 'on-track';\n      let color = '#10b981'; // green\n      \n      if (progress >= 100) {\n        status = 'over-budget';\n        color = '#ef4444'; // red\n      } else if (progress >= 80) {\n        status = 'warning';\n        color = '#f59e0b'; // yellow\n      }\n\n      return {\n        category: category.categoryName,\n        budgeted: category.budgetedAmount,\n        spent: category.spentAmount,\n        remaining: category.remainingAmount,\n        progress,\n        status,\n        color\n      };\n    }).sort((a, b) => b.spent - a.spent);\n  }\n\n  /**\n   * Calculate key financial metrics\n   */\n  async getKeyMetrics(familyId: string): Promise<FinancialMetric[]> {\n    const family = await familyService.getFamilyById(familyId);\n    const portfolio = await investmentService.getFamilyPortfolio(familyId);\n    const budget = await budgetService.getActiveBudget(familyId);\n\n    const metrics: FinancialMetric[] = [\n      {\n        id: 'net_worth',\n        label: 'Net Worth',\n        value: family.stats.totalNetWorth,\n        change: Math.random() * 5000 - 2500,\n        changePercent: (Math.random() - 0.5) * 10,\n        trend: 'up',\n        format: 'currency',\n        color: '#3b82f6',\n        icon: 'trending-up'\n      },\n      {\n        id: 'investment_return',\n        label: 'Investment Return',\n        value: portfolio.performance.totalReturn,\n        change: Math.random() * 5 - 2.5,\n        changePercent: portfolio.performance.totalReturn,\n        trend: portfolio.performance.totalReturn >= 0 ? 'up' : 'down',\n        format: 'percentage',\n        color: portfolio.performance.totalReturn >= 0 ? '#10b981' : '#ef4444',\n        icon: 'trending-up'\n      },\n      {\n        id: 'savings_rate',\n        label: 'Savings Rate',\n        value: family.stats.savingsRate,\n        change: Math.random() * 2 - 1,\n        changePercent: (Math.random() - 0.5) * 5,\n        trend: 'up',\n        format: 'percentage',\n        color: '#10b981',\n        icon: 'piggy-bank'\n      },\n      {\n        id: 'budget_adherence',\n        label: 'Budget Adherence',\n        value: budget ? ((budget.totalBudgeted - budget.totalSpent) / budget.totalBudgeted) * 100 : 0,\n        change: Math.random() * 10 - 5,\n        changePercent: (Math.random() - 0.5) * 10,\n        trend: 'stable',\n        format: 'percentage',\n        color: '#8b5cf6',\n        icon: 'target'\n      },\n      {\n        id: 'debt_to_income',\n        label: 'Debt-to-Income',\n        value: family.stats.debtToIncomeRatio,\n        change: Math.random() * 2 - 1,\n        changePercent: (Math.random() - 0.5) * 5,\n        trend: 'down',\n        format: 'percentage',\n        color: family.stats.debtToIncomeRatio > 36 ? '#ef4444' : '#10b981',\n        icon: 'credit-card'\n      },\n      {\n        id: 'emergency_fund',\n        label: 'Emergency Fund',\n        value: family.stats.emergencyFundMonths,\n        change: Math.random() * 0.5 - 0.25,\n        changePercent: (Math.random() - 0.5) * 5,\n        trend: 'up',\n        format: 'number',\n        color: family.stats.emergencyFundMonths >= 6 ? '#10b981' : '#f59e0b',\n        icon: 'shield'\n      }\n    ];\n\n    return metrics;\n  }\n\n  /**\n   * Get spending insights with trend analysis\n   */\n  async getSpendingInsights(familyId: string): Promise<any[]> {\n    const trends = await this.getSpendingTrends(familyId);\n    const insights = [];\n\n    // High spending increase alerts\n    const increasingSpending = trends.filter(t => t.changePercent > 20);\n    for (const trend of increasingSpending) {\n      insights.push({\n        type: 'warning',\n        title: `${trend.category} spending increased`,\n        description: `${trend.category} spending is up ${trend.changePercent.toFixed(1)}% from last month`,\n        value: trend.change,\n        category: trend.category\n      });\n    }\n\n    // Significant spending decreases (positive insights)\n    const decreasingSpending = trends.filter(t => t.changePercent < -15);\n    for (const trend of decreasingSpending) {\n      insights.push({\n        type: 'success',\n        title: `Great job reducing ${trend.category} spending`,\n        description: `You've decreased ${trend.category} spending by ${Math.abs(trend.changePercent).toFixed(1)}%`,\n        value: Math.abs(trend.change),\n        category: trend.category\n      });\n    }\n\n    return insights;\n  }\n\n  // Helper methods\n  private groupTransactionsByCategory(transactions: any[]): Record<string, number> {\n    const grouped: Record<string, number> = {};\n    \n    for (const transaction of transactions) {\n      if (transaction.amount >= 0) continue; // Skip income\n      \n      const category = transaction.category;\n      const amount = Math.abs(transaction.amount);\n      \n      grouped[category] = (grouped[category] || 0) + amount;\n    }\n    \n    return grouped;\n  }\n\n  private getCategoryColor(category: string): string {\n    const colors: Record<string, string> = {\n      housing: '#3b82f6',\n      transportation: '#f97316',\n      food: '#10b981',\n      utilities: '#8b5cf6',\n      insurance: '#06b6d4',\n      healthcare: '#ef4444',\n      debt_payments: '#dc2626',\n      savings: '#22c55e',\n      entertainment: '#a855f7',\n      personal_care: '#ec4899',\n      shopping: '#f59e0b',\n      education: '#6366f1',\n      gifts_donations: '#84cc16',\n      other: '#6b7280'\n    };\n    return colors[category] || '#6b7280';\n  }\n}\n\nexport const visualizationService = VisualizationService.getInstance();","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/test/calculators.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/test/components.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":536,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":536,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17296,17299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17296,17299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react';\nimport { SharedScoreCircle, ScoreGroup, type SharedScoreCircleProps } from '../components/shared/SharedScoreCircle';\nimport { ConfigurableInsightsPage } from '../components/shared/ConfigurableInsightsPage';\nimport { TransactionWithScores } from '../components/TransactionWithScores';\nimport { GlassCard } from '../components/GlassCard';\nimport { LiquidGlassTopMenuBar } from '../components/LiquidGlassTopMenuBar';\n\n// Mock data for testing\nconst mockTransactions = [\n  {\n    id: '1',\n    merchant: 'Test Merchant',\n    category: { name: 'Food & Dining', color: '#10B981' },\n    amount: 25.50,\n    date: '2024-01-01',\n    status: 'completed' as const,\n  },\n  {\n    id: '2',\n    merchant: 'Gas Station',\n    category: { name: 'Transportation', color: '#F59E0B' },\n    amount: 45.00,\n    date: '2024-01-02',\n    status: 'pending' as const,\n  }\n];\n\nconst mockAccounts = [\n  {\n    id: '1',\n    type: 'checking',\n    nickname: 'Main Checking',\n    balance: 5000,\n    availableBalance: 4800,\n    currency: 'USD',\n  },\n  {\n    id: '2',\n    type: 'savings',\n    nickname: 'Emergency Fund',\n    balance: 15000,\n    availableBalance: 15000,\n    currency: 'USD',\n  }\n];\n\ndescribe('Component Integration Tests - Consolidated Components', () => {\n  \n  describe('SharedScoreCircle Component', () => {\n    const defaultProps: SharedScoreCircleProps = {\n      score: 85,\n      type: 'health',\n      label: 'Health Score',\n      size: 'md',\n      showLabel: true,\n      animated: false,\n    };\n\n    it('should render with correct score and type', () => {\n      render(<SharedScoreCircle {...defaultProps} />);\n      \n      expect(screen.getByText('85')).toBeInTheDocument();\n      expect(screen.getByText('Health Score')).toBeInTheDocument();\n    });\n\n    it('should apply correct color scheme for different types', () => {\n      const { rerender } = render(<SharedScoreCircle score={85} type=\"health\" />);\n      let scoreElement = screen.getByText('85');\n      expect(scoreElement).toHaveClass('text-green-500');\n\n      rerender(<SharedScoreCircle score={85} type=\"eco\" />);\n      scoreElement = screen.getByText('85');\n      expect(scoreElement).toHaveClass('text-emerald-500');\n\n      rerender(<SharedScoreCircle score={85} type=\"financial\" />);\n      scoreElement = screen.getByText('85');\n      expect(scoreElement).toHaveClass('text-blue-500');\n    });\n\n    it('should change colors based on score thresholds', () => {\n      const { rerender } = render(<SharedScoreCircle score={90} type=\"health\" />);\n      let scoreElement = screen.getByText('90');\n      expect(scoreElement).toHaveClass('text-green-500');\n\n      rerender(<SharedScoreCircle score={70} type=\"health\" />);\n      scoreElement = screen.getByText('70');\n      expect(scoreElement).toHaveClass('text-yellow-500');\n\n      rerender(<SharedScoreCircle score={40} type=\"health\" />);\n      scoreElement = screen.getByText('40');\n      expect(scoreElement).toHaveClass('text-red-500');\n    });\n\n    it('should handle different sizes correctly', () => {\n      const { rerender } = render(<SharedScoreCircle score={85} size=\"sm\" />);\n      let container = screen.getByText('85').closest('div');\n      expect(container).toHaveClass('w-8', 'h-8');\n\n      rerender(<SharedScoreCircle score={85} size=\"lg\" />);\n      container = screen.getByText('85').closest('div');\n      expect(container).toHaveClass('w-12', 'h-12');\n    });\n\n    it('should conditionally show/hide label', () => {\n      const { rerender } = render(\n        <SharedScoreCircle score={85} label=\"Test Label\" showLabel={true} />\n      );\n      expect(screen.getByText('Test Label')).toBeInTheDocument();\n\n      rerender(<SharedScoreCircle score={85} label=\"Test Label\" showLabel={false} />);\n      expect(screen.queryByText('Test Label')).not.toBeInTheDocument();\n    });\n\n    it('should handle invalid scores gracefully', () => {\n      render(<SharedScoreCircle score={-10} />);\n      expect(screen.getByText('-10')).toBeInTheDocument();\n\n      render(<SharedScoreCircle score={150} />);\n      expect(screen.getByText('150')).toBeInTheDocument();\n    });\n\n    it('should apply custom className', () => {\n      render(<SharedScoreCircle score={85} className=\"custom-class\" />);\n      const container = screen.getByText('85').closest('div');\n      expect(container).toHaveClass('custom-class');\n    });\n  });\n\n  describe('ScoreGroup Component', () => {\n    const mockScores = {\n      health: 85,\n      eco: 72,\n      financial: 90,\n    };\n\n    it('should render multiple scores in a group', () => {\n      render(<ScoreGroup scores={mockScores} />);\n      \n      expect(screen.getByText('85')).toBeInTheDocument();\n      expect(screen.getByText('72')).toBeInTheDocument();\n      expect(screen.getByText('90')).toBeInTheDocument();\n    });\n\n    it('should handle missing scores', () => {\n      const partialScores = { health: 85 };\n      render(<ScoreGroup scores={partialScores} />);\n      \n      expect(screen.getByText('85')).toBeInTheDocument();\n      // Should not render eco or financial scores if not provided\n    });\n\n    it('should apply compact mode styling', () => {\n      render(<ScoreGroup scores={mockScores} compact={true} />);\n      const container = screen.getByText('85').closest('div')?.parentElement;\n      expect(container).toHaveClass('gap-2'); // Smaller gap in compact mode\n    });\n  });\n\n  describe('ConfigurableInsightsPage Component', () => {\n    const defaultProps = {\n      transactions: mockTransactions,\n      accounts: mockAccounts,\n      variant: 'standard' as const,\n    };\n\n    beforeEach(() => {\n      // Mock ResizeObserver for charts\n      global.ResizeObserver = vi.fn().mockImplementation(() => ({\n        observe: vi.fn(),\n        unobserve: vi.fn(),\n        disconnect: vi.fn(),\n      }));\n    });\n\n    it('should render insights page with default configuration', async () => {\n      render(<ConfigurableInsightsPage {...defaultProps} />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle different layout variants', async () => {\n      const { rerender } = render(\n        <ConfigurableInsightsPage {...defaultProps} variant=\"enhanced\" />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      });\n\n      rerender(<ConfigurableInsightsPage {...defaultProps} variant=\"refined\" />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      });\n    });\n\n    it('should toggle between view modes', async () => {\n      render(<ConfigurableInsightsPage {...defaultProps} />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      });\n\n      // Look for view mode toggles\n      const buttons = screen.getAllByRole('button');\n      const viewToggle = buttons.find(btn => btn.getAttribute('aria-label')?.includes('view'));\n      \n      if (viewToggle) {\n        fireEvent.click(viewToggle);\n        // Test should verify the view changed\n      }\n    });\n\n    it('should handle feature flags correctly', async () => {\n      const featureFlags = {\n        showAdvancedMetrics: false,\n        enableComparison: false,\n        showProjections: true,\n      };\n\n      render(\n        <ConfigurableInsightsPage \n          {...defaultProps} \n          featureFlags={featureFlags}\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle empty data gracefully', async () => {\n      render(\n        <ConfigurableInsightsPage \n          transactions={[]} \n          accounts={[]} \n          variant=\"standard\"\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      });\n    });\n\n    it('should calculate and display aggregated scores', async () => {\n      render(<ConfigurableInsightsPage {...defaultProps} />);\n      \n      await waitFor(() => {\n        // Should display calculated scores somewhere in the component\n        const scores = screen.getAllByText(/\\d{1,2}/);\n        expect(scores.length).toBeGreaterThan(0);\n      });\n    });\n  });\n\n  describe('TransactionWithScores Component', () => {\n    const mockTransaction = {\n      id: '1',\n      merchant: 'Test Merchant',\n      amount: 25.50,\n      date: '2024-01-01',\n      category: 'Food & Dining',\n      healthScore: 85,\n      ecoScore: 72,\n      financialScore: 90,\n    };\n\n    it('should render transaction details with scores', () => {\n      render(<TransactionWithScores transaction={mockTransaction} />);\n      \n      expect(screen.getByText('Test Merchant')).toBeInTheDocument();\n      expect(screen.getByText('$25.50')).toBeInTheDocument();\n      expect(screen.getByText('85')).toBeInTheDocument(); // Health score\n      expect(screen.getByText('72')).toBeInTheDocument(); // Eco score\n      expect(screen.getByText('90')).toBeInTheDocument(); // Financial score\n    });\n\n    it('should handle missing scores gracefully', () => {\n      const incompleteTransaction = {\n        ...mockTransaction,\n        healthScore: undefined,\n        ecoScore: undefined,\n        financialScore: undefined,\n      };\n\n      render(<TransactionWithScores transaction={incompleteTransaction} />);\n      \n      expect(screen.getByText('Test Merchant')).toBeInTheDocument();\n      expect(screen.getByText('$25.50')).toBeInTheDocument();\n      // Should not crash when scores are missing\n    });\n\n    it('should format amounts correctly', () => {\n      const expensiveTransaction = {\n        ...mockTransaction,\n        amount: 1234.56,\n      };\n\n      render(<TransactionWithScores transaction={expensiveTransaction} />);\n      expect(screen.getByText('$1,234.56')).toBeInTheDocument();\n    });\n\n    it('should handle different transaction statuses', () => {\n      const pendingTransaction = {\n        ...mockTransaction,\n        status: 'pending' as const,\n      };\n\n      render(<TransactionWithScores transaction={pendingTransaction} />);\n      expect(screen.getByText('Test Merchant')).toBeInTheDocument();\n      // Should display pending status indicator\n    });\n  });\n\n  describe('GlassCard Component', () => {\n    it('should render with default glass styling', () => {\n      render(\n        <GlassCard>\n          <div>Test Content</div>\n        </GlassCard>\n      );\n      \n      expect(screen.getByText('Test Content')).toBeInTheDocument();\n      const card = screen.getByText('Test Content').closest('div');\n      expect(card).toHaveClass('backdrop-blur-md');\n    });\n\n    it('should apply custom className while preserving glass effect', () => {\n      render(\n        <GlassCard className=\"custom-glass-card\">\n          <div>Test Content</div>\n        </GlassCard>\n      );\n      \n      const card = screen.getByText('Test Content').closest('div');\n      expect(card).toHaveClass('custom-glass-card');\n      expect(card).toHaveClass('backdrop-blur-md'); // Should preserve glass effect\n    });\n\n    it('should handle click events', () => {\n      const mockClick = vi.fn();\n      render(\n        <GlassCard onClick={mockClick}>\n          <div>Clickable Content</div>\n        </GlassCard>\n      );\n      \n      const card = screen.getByText('Clickable Content').closest('div');\n      if (card) {\n        fireEvent.click(card);\n        expect(mockClick).toHaveBeenCalledTimes(1);\n      }\n    });\n  });\n\n  describe('LiquidGlassTopMenuBar Component', () => {\n    it('should render navigation items', () => {\n      render(<LiquidGlassTopMenuBar />);\n      \n      // Check for common navigation items\n      expect(screen.getByText('Dashboard')).toBeInTheDocument();\n      expect(screen.getByText('Transactions')).toBeInTheDocument();\n      expect(screen.getByText('Budget')).toBeInTheDocument();\n      expect(screen.getByText('Insights')).toBeInTheDocument();\n    });\n\n    it('should handle navigation clicks', () => {\n      render(<LiquidGlassTopMenuBar />);\n      \n      const dashboardLink = screen.getByText('Dashboard');\n      fireEvent.click(dashboardLink);\n      \n      // Should handle navigation (depends on router implementation)\n    });\n\n    it('should display user menu when available', () => {\n      render(<LiquidGlassTopMenuBar />);\n      \n      // Look for user menu trigger (could be avatar, name, or menu icon)\n      const userElements = screen.getAllByRole('button');\n      expect(userElements.length).toBeGreaterThan(0);\n    });\n\n    it('should apply liquid glass visual effects', () => {\n      render(<LiquidGlassTopMenuBar />);\n      \n      const menuBar = screen.getByRole('banner') || screen.getByRole('navigation');\n      expect(menuBar).toHaveClass(/backdrop|glass|blur/);\n    });\n\n    it('should be responsive to screen size changes', () => {\n      render(<LiquidGlassTopMenuBar />);\n      \n      // Test mobile menu toggle\n      const mobileToggle = screen.queryByLabelText(/menu|toggle/i);\n      if (mobileToggle) {\n        fireEvent.click(mobileToggle);\n        // Should show/hide mobile menu\n      }\n    });\n  });\n});\n\ndescribe('Component Regression Tests - Consolidated Components', () => {\n  \n  it('should maintain SharedScoreCircle API compatibility', () => {\n    // Test that all previous prop combinations still work\n    const legacyProps = [\n      { score: 85 },\n      { score: 85, type: 'health' as const },\n      { score: 85, type: 'eco' as const, size: 'lg' as const },\n      { score: 85, type: 'financial' as const, showLabel: false },\n    ];\n\n    legacyProps.forEach((props, index) => {\n      const { unmount } = render(<SharedScoreCircle key={index} {...props} />);\n      expect(screen.getByText('85')).toBeInTheDocument();\n      unmount();\n    });\n  });\n\n  it('should handle performance under stress conditions', async () => {\n    // Test with large datasets\n    const largeTransactionSet = Array.from({ length: 1000 }, (_, i) => ({\n      id: `txn-${i}`,\n      merchant: `Merchant ${i}`,\n      category: { name: 'Test Category', color: '#10B981' },\n      amount: Math.random() * 1000,\n      date: '2024-01-01',\n      status: 'completed' as const,\n    }));\n\n    const startTime = performance.now();\n    \n    render(\n      <ConfigurableInsightsPage \n        transactions={largeTransactionSet}\n        accounts={mockAccounts}\n        variant=\"standard\"\n      />\n    );\n    \n    const endTime = performance.now();\n    const renderTime = endTime - startTime;\n    \n    // Should render within reasonable time (< 1000ms)\n    expect(renderTime).toBeLessThan(1000);\n    \n    await waitFor(() => {\n      expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n    });\n  });\n\n  it('should maintain accessibility standards', () => {\n    render(\n      <div>\n        <SharedScoreCircle score={85} type=\"health\" label=\"Health Score\" />\n        <ConfigurableInsightsPage \n          transactions={mockTransactions}\n          accounts={mockAccounts}\n          variant=\"standard\"\n        />\n      </div>\n    );\n\n    // Check for proper ARIA labels\n    const scoreElements = screen.getAllByRole('img') || screen.getAllByRole('presentation');\n    scoreElements.forEach(element => {\n      expect(element).toHaveAttribute('aria-label');\n    });\n\n    // Check for keyboard navigation support\n    const interactiveElements = screen.getAllByRole('button');\n    interactiveElements.forEach(element => {\n      expect(element).toHaveAttribute('tabIndex');\n    });\n  });\n\n  it('should handle theme changes consistently', () => {\n    const { rerender } = render(\n      <div className=\"dark\">\n        <SharedScoreCircle score={85} type=\"health\" />\n        <GlassCard>Dark Theme Content</GlassCard>\n      </div>\n    );\n\n    expect(screen.getByText('85')).toBeInTheDocument();\n    expect(screen.getByText('Dark Theme Content')).toBeInTheDocument();\n\n    rerender(\n      <div className=\"light\">\n        <SharedScoreCircle score={85} type=\"health\" />\n        <GlassCard>Light Theme Content</GlassCard>\n      </div>\n    );\n\n    expect(screen.getByText('85')).toBeInTheDocument();\n    expect(screen.getByText('Light Theme Content')).toBeInTheDocument();\n  });\n\n  it('should maintain data consistency across re-renders', () => {\n    let renderCount = 0;\n    const TestComponent = () => {\n      renderCount++;\n      return (\n        <SharedScoreCircle \n          score={85} \n          type=\"health\" \n          label={`Render ${renderCount}`}\n        />\n      );\n    };\n\n    const { rerender } = render(<TestComponent />);\n    expect(screen.getByText('Render 1')).toBeInTheDocument();\n\n    rerender(<TestComponent />);\n    expect(screen.getByText('Render 2')).toBeInTheDocument();\n    expect(screen.getByText('85')).toBeInTheDocument();\n  });\n\n  it('should handle prop changes without memory leaks', () => {\n    const { rerender } = render(<SharedScoreCircle score={85} type=\"health\" />);\n    \n    // Rapidly change props to test for memory leaks\n    for (let i = 0; i < 100; i++) {\n      rerender(\n        <SharedScoreCircle \n          score={Math.floor(Math.random() * 100)} \n          type={['health', 'eco', 'financial'][i % 3] as any}\n        />\n      );\n    }\n    \n    // Should still function normally\n    expect(screen.getByText(/\\d+/)).toBeInTheDocument();\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/test/data-integrity.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/test/performance.bench.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2112,2115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2112,2115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { bench, describe } from 'vitest';\nimport { render, cleanup } from '@testing-library/react';\nimport React from 'react';\n\n// Import components for performance testing\nimport { SharedScoreCircle } from '../components/shared/SharedScoreCircle';\nimport { GlassCard } from '../components/GlassCard';\nimport { LiquidGlassTopMenuBar } from '../components/LiquidGlassTopMenuBar';\nimport { TransactionWithScores } from '../components/TransactionWithScores';\n\n// Import liquid glass hooks\nimport { useLiquidGlass } from '../hooks/useLiquidGlass.tsx';\nimport { usePerformanceOptimization } from '../hooks/usePerformanceOptimization';\n\n// Import utilities for performance testing\nimport {\n  calculateCompoundInterest,\n  calculateLoanPayment,\n  calculateROI,\n  calculateFinancialFreedomYears,\n} from '../utils/calculators';\n\n// Mock data for performance tests\nconst mockTransaction = {\n  id: '1',\n  merchant: 'Test Merchant',\n  amount: 25.50,\n  date: '2024-01-01',\n  category: 'Food & Dining',\n  healthScore: 85,\n  ecoScore: 72,\n  financialScore: 90,\n};\n\nconst largeTransactionSet = Array.from({ length: 1000 }, (_, i) => ({\n  id: `txn-${i}`,\n  merchant: `Merchant ${i}`,\n  amount: Math.random() * 1000,\n  date: new Date(2024, 0, i % 30 + 1).toISOString().split('T')[0],\n  category: ['Food & Dining', 'Gas & Transport', 'Shopping', 'Bills & Utilities'][i % 4],\n  healthScore: Math.floor(Math.random() * 100),\n  ecoScore: Math.floor(Math.random() * 100),\n  financialScore: Math.floor(Math.random() * 100),\n}));\n\ndescribe('Performance Benchmarks - WebGL and Liquid Glass Effects', () => {\n  \n  describe('Component Rendering Performance', () => {\n    bench('SharedScoreCircle - Single render', () => {\n      const { unmount } = render(React.createElement(SharedScoreCircle, { score: 85, type: 'health' }));\n      unmount();\n    });\n\n    bench('SharedScoreCircle - Multiple renders (100x)', () => {\n      for (let i = 0; i < 100; i++) {\n        const { unmount } = render(React.createElement(SharedScoreCircle, { \n          score: Math.floor(Math.random() * 100), \n          type: ['health', 'eco', 'financial'][i % 3] as any \n        }));\n        unmount();\n      }\n    });\n\n    bench('GlassCard - Single render with backdrop blur', () => {\n      const { unmount } = render(React.createElement(GlassCard, {}, 'Test Content'));\n      unmount();\n    });\n\n    bench('GlassCard - Multiple nested glass cards', () => {\n      const { unmount } = render(\n        React.createElement(GlassCard, {},\n          React.createElement(GlassCard, {},\n            React.createElement(GlassCard, {}, 'Nested Content')\n          )\n        )\n      );\n      unmount();\n    });\n\n    bench('LiquidGlassTopMenuBar - Full navigation render', () => {\n      const { unmount } = render(React.createElement(LiquidGlassTopMenuBar));\n      unmount();\n    });\n\n    bench('TransactionWithScores - Single transaction render', () => {\n      const { unmount } = render(React.createElement(TransactionWithScores, { transaction: mockTransaction }));\n      unmount();\n    });\n\n    bench('TransactionWithScores - Large transaction list (1000 items)', () => {\n      const { unmount } = render(\n        React.createElement('div', {},\n          ...largeTransactionSet.slice(0, 100).map((txn, i) =>\n            React.createElement(TransactionWithScores, { key: i, transaction: txn })\n          )\n        )\n      );\n      unmount();\n    });\n  });\n\n  describe('CSS Animation Performance', () => {\n    bench('Liquid glass backdrop-blur rendering', () => {\n      const element = document.createElement('div');\n      element.className = 'backdrop-blur-md bg-white/10 border border-white/20 rounded-xl';\n      element.style.transform = 'translateZ(0)'; // Force GPU acceleration\n      document.body.appendChild(element);\n      \n      // Simulate animation frames\n      for (let i = 0; i < 60; i++) {\n        element.style.opacity = (Math.sin(i * 0.1) + 1) / 2 + '';\n      }\n      \n      document.body.removeChild(element);\n    });\n\n    bench('Multiple glass elements with animations', () => {\n      const elements = [];\n      \n      // Create 20 glass elements\n      for (let i = 0; i < 20; i++) {\n        const element = document.createElement('div');\n        element.className = 'backdrop-blur-lg bg-gradient-to-br from-white/20 to-white/5 border border-white/30 rounded-2xl';\n        element.style.position = 'absolute';\n        element.style.width = '100px';\n        element.style.height = '100px';\n        element.style.left = (i * 50) + 'px';\n        element.style.transform = 'translateZ(0)';\n        document.body.appendChild(element);\n        elements.push(element);\n      }\n      \n      // Animate all elements\n      for (let frame = 0; frame < 60; frame++) {\n        elements.forEach((element, i) => {\n          const offset = frame + i * 0.2;\n          element.style.transform = `translateZ(0) translateY(${Math.sin(offset * 0.1) * 10}px)`;\n          element.style.opacity = (Math.sin(offset * 0.05) + 1) / 2 + '';\n        });\n      }\n      \n      // Cleanup\n      elements.forEach(element => document.body.removeChild(element));\n    });\n\n    bench('Gradient background transitions', () => {\n      const element = document.createElement('div');\n      element.className = 'bg-gradient-to-br';\n      element.style.width = '200px';\n      element.style.height = '200px';\n      document.body.appendChild(element);\n      \n      const gradients = [\n        'from-blue-400/20 to-purple-600/20',\n        'from-green-400/20 to-blue-500/20',\n        'from-purple-400/20 to-pink-600/20',\n        'from-yellow-400/20 to-red-500/20',\n      ];\n      \n      for (let i = 0; i < 100; i++) {\n        element.className = `bg-gradient-to-br ${gradients[i % gradients.length]}`;\n      }\n      \n      document.body.removeChild(element);\n    });\n  });\n\n  describe('WebGL Performance Simulation', () => {\n    bench('WebGL context creation and basic operations', () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = 400;\n      canvas.height = 300;\n      \n      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n      if (gl) {\n        // Simulate basic WebGL operations for liquid glass effects\n        gl.clearColor(0.0, 0.0, 0.0, 0.1);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        \n        // Create and use a basic shader program\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        \n        if (vertexShader && fragmentShader) {\n          gl.shaderSource(vertexShader, `\n            attribute vec2 position;\n            void main() {\n              gl_Position = vec4(position, 0.0, 1.0);\n            }\n          `);\n          gl.compileShader(vertexShader);\n          \n          gl.shaderSource(fragmentShader, `\n            precision mediump float;\n            uniform float time;\n            void main() {\n              gl_FragColor = vec4(0.5 + 0.5 * sin(time), 0.0, 0.5, 0.8);\n            }\n          `);\n          gl.compileShader(fragmentShader);\n          \n          const program = gl.createProgram();\n          if (program) {\n            gl.attachShader(program, vertexShader);\n            gl.attachShader(program, fragmentShader);\n            gl.linkProgram(program);\n            gl.useProgram(program);\n            \n            // Simulate animation loop\n            for (let i = 0; i < 60; i++) {\n              const timeUniform = gl.getUniformLocation(program, 'time');\n              gl.uniform1f(timeUniform, i * 0.016);\n              gl.drawArrays(gl.TRIANGLES, 0, 3);\n            }\n          }\n        }\n      }\n    });\n\n    bench('Canvas-based liquid effect simulation', () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = 400;\n      canvas.height = 300;\n      const ctx = canvas.getContext('2d');\n      \n      if (ctx) {\n        // Simulate liquid wave effect\n        for (let frame = 0; frame < 60; frame++) {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          \n          // Create gradient for liquid effect\n          const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\n          gradient.addColorStop(0, `rgba(99, 102, 241, ${0.1 + 0.1 * Math.sin(frame * 0.1)})`);\n          gradient.addColorStop(0.5, `rgba(139, 92, 246, ${0.05 + 0.05 * Math.cos(frame * 0.08)})`);\n          gradient.addColorStop(1, `rgba(59, 130, 246, ${0.08 + 0.08 * Math.sin(frame * 0.12)})`);\n          \n          ctx.fillStyle = gradient;\n          \n          // Draw wave-like shapes\n          ctx.beginPath();\n          for (let x = 0; x <= canvas.width; x += 10) {\n            const y = canvas.height / 2 + 50 * Math.sin((x + frame * 5) * 0.02);\n            if (x === 0) ctx.moveTo(x, y);\n            else ctx.lineTo(x, y);\n          }\n          ctx.lineTo(canvas.width, canvas.height);\n          ctx.lineTo(0, canvas.height);\n          ctx.closePath();\n          ctx.fill();\n        }\n      }\n    });\n  });\n\n  describe('Mathematical Calculations Performance', () => {\n    bench('Financial calculator - Compound Interest (1000 calculations)', () => {\n      for (let i = 0; i < 1000; i++) {\n        calculateCompoundInterest(10000 + i, 5 + (i % 10), 10, 12);\n      }\n    });\n\n    bench('Financial calculator - Loan Payment (1000 calculations)', () => {\n      for (let i = 0; i < 1000; i++) {\n        calculateLoanPayment(200000 + i * 100, 4.5 + (i % 5), 30);\n      }\n    });\n\n    bench('Financial calculator - ROI (10000 calculations)', () => {\n      for (let i = 0; i < 10000; i++) {\n        calculateROI(1000 + i, 1200 + i * 0.2);\n      }\n    });\n\n    bench('Financial calculator - Financial Freedom (100 calculations)', () => {\n      for (let i = 0; i < 100; i++) {\n        calculateFinancialFreedomYears(500000 + i * 1000, 4000 + i * 10, 0.04 + i * 0.001);\n      }\n    });\n\n    bench('Complex financial scenario calculations', () => {\n      for (let i = 0; i < 100; i++) {\n        // Simulate a complete financial analysis\n        const principal = 300000 + i * 1000;\n        const rate = 4.5 + (i % 10) * 0.1;\n        const years = 15 + (i % 20);\n        \n        const monthlyPayment = calculateLoanPayment(principal, rate, years);\n        const futureValue = calculateCompoundInterest(50000, 7, years, 12);\n        const roi = calculateROI(principal, futureValue);\n        const freedomYears = calculateFinancialFreedomYears(futureValue, monthlyPayment * 12, 0.04);\n        \n        // Combine results to ensure calculations are not optimized away\n        const result = monthlyPayment + futureValue + roi + freedomYears;\n      }\n    });\n  });\n\n  describe('Data Processing Performance', () => {\n    bench('Transaction scoring - Single transaction', () => {\n      const transaction = mockTransaction;\n      \n      // Simulate scoring calculation\n      const healthScore = Math.max(0, Math.min(100, \n        100 - (transaction.amount / 100) * 10 + \n        (transaction.category === 'Health & Fitness' ? 20 : 0)\n      ));\n      \n      const ecoScore = Math.max(0, Math.min(100,\n        100 - (transaction.amount / 50) * 5 +\n        (transaction.category === 'Public Transportation' ? 30 : 0)\n      ));\n      \n      const financialScore = Math.max(0, Math.min(100,\n        90 - (transaction.amount / 500) * 10\n      ));\n    });\n\n    bench('Transaction scoring - Large dataset (1000 transactions)', () => {\n      largeTransactionSet.forEach(transaction => {\n        const healthScore = Math.max(0, Math.min(100, \n          100 - (transaction.amount / 100) * 10 + \n          (transaction.category === 'Health & Fitness' ? 20 : 0)\n        ));\n        \n        const ecoScore = Math.max(0, Math.min(100,\n          100 - (transaction.amount / 50) * 5 +\n          (transaction.category === 'Public Transportation' ? 30 : 0)\n        ));\n        \n        const financialScore = Math.max(0, Math.min(100,\n          90 - (transaction.amount / 500) * 10\n        ));\n      });\n    });\n\n    bench('Complex data aggregation and analysis', () => {\n      const transactions = largeTransactionSet;\n      \n      // Group by category\n      const byCategory = transactions.reduce((acc, txn) => {\n        if (!acc[txn.category]) acc[txn.category] = [];\n        acc[txn.category].push(txn);\n        return acc;\n      }, {} as Record<string, typeof transactions>);\n      \n      // Calculate category totals and averages\n      const categoryStats = Object.entries(byCategory).map(([category, txns]) => ({\n        category,\n        total: txns.reduce((sum, txn) => sum + txn.amount, 0),\n        average: txns.reduce((sum, txn) => sum + txn.amount, 0) / txns.length,\n        count: txns.length,\n        averageHealthScore: txns.reduce((sum, txn) => sum + txn.healthScore, 0) / txns.length,\n        averageEcoScore: txns.reduce((sum, txn) => sum + txn.ecoScore, 0) / txns.length,\n        averageFinancialScore: txns.reduce((sum, txn) => sum + txn.financialScore, 0) / txns.length,\n      }));\n      \n      // Sort by total spending\n      categoryStats.sort((a, b) => b.total - a.total);\n    });\n  });\n\n  describe('Memory and DOM Performance', () => {\n    bench('DOM manipulation - Creating glass elements', () => {\n      const container = document.createElement('div');\n      document.body.appendChild(container);\n      \n      for (let i = 0; i < 100; i++) {\n        const element = document.createElement('div');\n        element.className = 'backdrop-blur-md bg-white/10 border border-white/20 rounded-xl p-4';\n        element.textContent = `Item ${i}`;\n        container.appendChild(element);\n      }\n      \n      document.body.removeChild(container);\n    });\n\n    bench('DOM manipulation - Updating glass element styles', () => {\n      const elements = [];\n      const container = document.createElement('div');\n      document.body.appendChild(container);\n      \n      // Create elements\n      for (let i = 0; i < 50; i++) {\n        const element = document.createElement('div');\n        element.className = 'backdrop-blur-md bg-white/10';\n        container.appendChild(element);\n        elements.push(element);\n      }\n      \n      // Update styles rapidly\n      for (let frame = 0; frame < 100; frame++) {\n        elements.forEach((element, i) => {\n          const opacity = (Math.sin(frame * 0.1 + i * 0.2) + 1) / 2;\n          element.style.opacity = opacity.toString();\n          element.style.transform = `scale(${0.9 + opacity * 0.1})`;\n        });\n      }\n      \n      document.body.removeChild(container);\n    });\n\n    bench('Memory allocation - Large object creation', () => {\n      const objects = [];\n      \n      for (let i = 0; i < 10000; i++) {\n        objects.push({\n          id: i,\n          data: new Array(100).fill(i),\n          timestamp: Date.now(),\n          metadata: {\n            type: 'performance-test',\n            iteration: i,\n            random: Math.random(),\n          }\n        });\n      }\n      \n      // Access all objects to prevent optimization\n      let sum = 0;\n      objects.forEach(obj => {\n        sum += obj.data.reduce((a, b) => a + b, 0);\n      });\n    });\n  });\n});\n\ndescribe('Performance Optimization Benchmarks', () => {\n  \n  bench('Memoization performance - React.memo equivalent', () => {\n    const memoizedResults = new Map();\n    \n    for (let i = 0; i < 1000; i++) {\n      const key = `${i % 10}-${Math.floor(i / 10) % 5}`;\n      \n      if (!memoizedResults.has(key)) {\n        // Expensive calculation\n        const result = calculateCompoundInterest(10000, 5, 10, 12);\n        memoizedResults.set(key, result);\n      }\n      \n      const cached = memoizedResults.get(key);\n    }\n  });\n\n  bench('Virtual scrolling simulation', () => {\n    const itemHeight = 60;\n    const containerHeight = 400;\n    const totalItems = 10000;\n    const scrollPosition = 5000; // Simulate scroll position\n    \n    const startIndex = Math.floor(scrollPosition / itemHeight);\n    const endIndex = Math.min(startIndex + Math.ceil(containerHeight / itemHeight) + 1, totalItems);\n    const visibleItems = [];\n    \n    for (let i = startIndex; i < endIndex; i++) {\n      visibleItems.push({\n        index: i,\n        top: i * itemHeight,\n        data: largeTransactionSet[i % largeTransactionSet.length]\n      });\n    }\n  });\n\n  bench('Debounced calculations', () => {\n    let lastCalculation = 0;\n    const debounceMs = 16; // ~60fps\n    \n    for (let i = 0; i < 1000; i++) {\n      const now = i; // Simulate timestamp\n      \n      if (now - lastCalculation >= debounceMs) {\n        calculateCompoundInterest(10000 + i, 5, 10, 12);\n        lastCalculation = now;\n      }\n    }\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/test/regression.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":523,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":523,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16708,16711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16708,16711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":524,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":524,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16770,16773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16770,16773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { SharedScoreCircle, ScoreGroup } from '../components/shared/SharedScoreCircle';\nimport { ConfigurableInsightsPage } from '../components/shared/ConfigurableInsightsPage';\n\n// Mock data representing different component versions/states\nconst testTransactions = [\n  {\n    id: '1',\n    merchant: 'Amazon',\n    category: { name: 'Shopping', color: '#10B981' },\n    amount: 89.99,\n    date: '2024-01-01',\n    status: 'completed' as const,\n  },\n  {\n    id: '2', \n    merchant: 'Starbucks',\n    category: { name: 'Food & Dining', color: '#F59E0B' },\n    amount: 12.50,\n    date: '2024-01-02',\n    status: 'pending' as const,\n  }\n];\n\nconst testAccounts = [\n  {\n    id: '1',\n    type: 'checking',\n    nickname: 'Main Checking',\n    balance: 5000,\n    availableBalance: 4800,\n    currency: 'USD',\n  }\n];\n\ndescribe('Regression Testing Suite - Consolidated Components', () => {\n  \n  beforeEach(() => {\n    // Clear any previous state\n    vi.clearAllMocks();\n    \n    // Mock performance.now for consistent timing\n    vi.spyOn(performance, 'now').mockReturnValue(1000);\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  describe('SharedScoreCircle - Regression Tests', () => {\n    \n    it('should maintain backward compatibility with legacy props', () => {\n      // Test legacy prop combinations that should still work\n      const legacyPropSets = [\n        { score: 85 }, // Minimal props\n        { score: 85, type: 'health' as const }, // Basic type\n        { score: 85, type: 'eco' as const, size: 'lg' as const }, // Size variants\n        { score: 85, type: 'financial' as const, showLabel: false, animated: true }, // All props\n      ];\n\n      legacyPropSets.forEach((props, index) => {\n        const { unmount } = render(<SharedScoreCircle key={index} {...props} />);\n        \n        // Should render score\n        expect(screen.getByText('85')).toBeInTheDocument();\n        \n        // Should not crash\n        expect(() => screen.getByText('85')).not.toThrow();\n        \n        unmount();\n      });\n    });\n\n    it('should maintain consistent color schemes across refactors', () => {\n      const colorTests = [\n        { type: 'health' as const, score: 90, expectedClass: 'text-green-500' },\n        { type: 'health' as const, score: 70, expectedClass: 'text-yellow-500' },\n        { type: 'health' as const, score: 40, expectedClass: 'text-red-500' },\n        { type: 'eco' as const, score: 90, expectedClass: 'text-emerald-500' },\n        { type: 'eco' as const, score: 70, expectedClass: 'text-amber-500' },\n        { type: 'financial' as const, score: 90, expectedClass: 'text-blue-500' },\n      ];\n\n      colorTests.forEach(({ type, score, expectedClass }) => {\n        const { unmount } = render(<SharedScoreCircle score={score} type={type} />);\n        \n        const scoreElement = screen.getByText(score.toString());\n        expect(scoreElement).toHaveClass(expectedClass);\n        \n        unmount();\n      });\n    });\n\n    it('should maintain size consistency after consolidation', () => {\n      const sizeTests = [\n        { size: 'sm' as const, expectedClasses: ['w-8', 'h-8'] },\n        { size: 'md' as const, expectedClasses: ['w-10', 'h-10'] },\n        { size: 'lg' as const, expectedClasses: ['w-12', 'h-12'] },\n      ];\n\n      sizeTests.forEach(({ size, expectedClasses }) => {\n        const { unmount } = render(<SharedScoreCircle score={85} size={size} />);\n        \n        const container = screen.getByText('85').closest('div');\n        expectedClasses.forEach(className => {\n          expect(container).toHaveClass(className);\n        });\n        \n        unmount();\n      });\n    });\n\n    it('should handle edge cases that previously caused issues', () => {\n      const edgeCases = [\n        { score: 0, description: 'zero score' },\n        { score: 100, description: 'maximum score' },\n        { score: -10, description: 'negative score' },\n        { score: 150, description: 'over maximum score' },\n        { score: 85.5, description: 'decimal score' },\n      ];\n\n      edgeCases.forEach(({ score, description }) => {\n        const { unmount } = render(<SharedScoreCircle score={score} />);\n        \n        // Should render without crashing\n        expect(screen.getByText(score.toString())).toBeInTheDocument();\n        \n        unmount();\n      });\n    });\n\n    it('should preserve accessibility features after consolidation', () => {\n      render(<SharedScoreCircle score={85} type=\"health\" label=\"Health Score\" />);\n      \n      // Should maintain ARIA attributes\n      const scoreElement = screen.getByText('85');\n      const container = scoreElement.closest('div');\n      \n      expect(container).toHaveAttribute('role');\n      expect(container).toHaveAttribute('aria-label');\n      \n      // Label should be accessible\n      expect(screen.getByText('Health Score')).toBeInTheDocument();\n    });\n\n    it('should maintain performance characteristics', () => {\n      const startTime = performance.now();\n      \n      // Render multiple score circles\n      const { unmount } = render(\n        <div>\n          {Array.from({ length: 100 }, (_, i) => (\n            <SharedScoreCircle key={i} score={i} type=\"health\" />\n          ))}\n        </div>\n      );\n      \n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      \n      // Should render quickly even with many components\n      expect(renderTime).toBeLessThan(100); // 100ms threshold\n      \n      unmount();\n    });\n  });\n\n  describe('ScoreGroup - Regression Tests', () => {\n    \n    it('should maintain API compatibility with different score combinations', () => {\n      const scoreCombinations = [\n        { health: 85 }, // Single score\n        { health: 85, eco: 70 }, // Two scores\n        { health: 85, eco: 70, financial: 90 }, // All scores\n        {}, // Empty scores (should handle gracefully)\n      ];\n\n      scoreCombinations.forEach((scores, index) => {\n        const { unmount } = render(<ScoreGroup key={index} scores={scores} />);\n        \n        // Should render without crashing\n        expect(() => screen.getByRole('group')).not.toThrow();\n        \n        unmount();\n      });\n    });\n\n    it('should maintain spacing and layout after consolidation', () => {\n      const scores = { health: 85, eco: 70, financial: 90 };\n      \n      render(<ScoreGroup scores={scores} />);\n      \n      // All scores should be visible\n      expect(screen.getByText('85')).toBeInTheDocument();\n      expect(screen.getByText('70')).toBeInTheDocument();\n      expect(screen.getByText('90')).toBeInTheDocument();\n      \n      // Should maintain proper grouping\n      const container = screen.getByText('85').closest('[role=\"group\"]');\n      expect(container).toBeInTheDocument();\n    });\n\n    it('should handle compact mode consistently', () => {\n      const scores = { health: 85, eco: 70, financial: 90 };\n      \n      const { rerender } = render(<ScoreGroup scores={scores} compact={false} />);\n      const normalContainer = screen.getByText('85').closest('div')?.parentElement;\n      \n      rerender(<ScoreGroup scores={scores} compact={true} />);\n      const compactContainer = screen.getByText('85').closest('div')?.parentElement;\n      \n      // Compact mode should have different styling\n      expect(compactContainer).toHaveClass('gap-2');\n    });\n  });\n\n  describe('ConfigurableInsightsPage - Regression Tests', () => {\n    \n    beforeEach(() => {\n      // Mock chart dependencies\n      global.ResizeObserver = vi.fn().mockImplementation(() => ({\n        observe: vi.fn(),\n        unobserve: vi.fn(),\n        disconnect: vi.fn(),\n      }));\n    });\n\n    it('should maintain all layout variants after consolidation', () => {\n      const variants = ['standard', 'refined', 'enhanced', 'optimized', 'comprehensive'] as const;\n      \n      variants.forEach(variant => {\n        const { unmount } = render(\n          <ConfigurableInsightsPage \n            transactions={testTransactions}\n            accounts={testAccounts}\n            variant={variant}\n          />\n        );\n        \n        // Should render title for all variants\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n        \n        unmount();\n      });\n    });\n\n    it('should handle empty data gracefully across all variants', () => {\n      const variants = ['standard', 'refined', 'enhanced'] as const;\n      \n      variants.forEach(variant => {\n        const { unmount } = render(\n          <ConfigurableInsightsPage \n            transactions={[]}\n            accounts={[]}\n            variant={variant}\n          />\n        );\n        \n        // Should not crash with empty data\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n        \n        unmount();\n      });\n    });\n\n    it('should maintain feature flag compatibility', () => {\n      const featureFlagCombinations = [\n        {}, // No feature flags\n        { showAdvancedMetrics: true },\n        { enableComparison: true },\n        { showProjections: true },\n        { showAdvancedMetrics: true, enableComparison: true, showProjections: true }, // All flags\n      ];\n\n      featureFlagCombinations.forEach((featureFlags, index) => {\n        const { unmount } = render(\n          <ConfigurableInsightsPage \n            key={index}\n            transactions={testTransactions}\n            accounts={testAccounts}\n            variant=\"standard\"\n            featureFlags={featureFlags}\n          />\n        );\n        \n        // Should render regardless of feature flag combination\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n        \n        unmount();\n      });\n    });\n\n    it('should maintain theme switching capability', () => {\n      const { rerender } = render(\n        <div className=\"light\">\n          <ConfigurableInsightsPage \n            transactions={testTransactions}\n            accounts={testAccounts}\n            variant=\"standard\"\n          />\n        </div>\n      );\n      \n      expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      \n      rerender(\n        <div className=\"dark\">\n          <ConfigurableInsightsPage \n            transactions={testTransactions}\n            accounts={testAccounts}\n            variant=\"standard\"\n          />\n        </div>\n      );\n      \n      // Should still render in dark theme\n      expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n    });\n\n    it('should maintain view mode switching functionality', async () => {\n      render(\n        <ConfigurableInsightsPage \n          transactions={testTransactions}\n          accounts={testAccounts}\n          variant=\"enhanced\"\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      });\n      \n      // Test view mode buttons if they exist\n      const viewButtons = screen.getAllByRole('button');\n      const modeButtons = viewButtons.filter(btn => \n        btn.getAttribute('data-testid')?.includes('view-')\n      );\n      \n      if (modeButtons.length > 0) {\n        // Click first view mode button\n        fireEvent.click(modeButtons[0]);\n        \n        // Should not crash\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      }\n    });\n\n    it('should handle large datasets without performance degradation', async () => {\n      const largeTransactionSet = Array.from({ length: 1000 }, (_, i) => ({\n        id: `txn-${i}`,\n        merchant: `Merchant ${i}`,\n        category: { name: 'Test Category', color: '#10B981' },\n        amount: Math.random() * 1000,\n        date: '2024-01-01',\n        status: 'completed' as const,\n      }));\n      \n      const startTime = performance.now();\n      \n      const { unmount } = render(\n        <ConfigurableInsightsPage \n          transactions={largeTransactionSet}\n          accounts={testAccounts}\n          variant=\"standard\"\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      }, { timeout: 5000 });\n      \n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      \n      // Should handle large datasets efficiently\n      expect(renderTime).toBeLessThan(2000); // 2 second threshold\n      \n      unmount();\n    });\n  });\n\n  describe('Component Integration - Regression Tests', () => {\n    \n    it('should maintain proper prop passing between consolidated components', () => {\n      const mockScores = { health: 85, eco: 70, financial: 90 };\n      \n      render(\n        <div>\n          <SharedScoreCircle score={85} type=\"health\" data-testid=\"single-score\" />\n          <ScoreGroup scores={mockScores} data-testid=\"score-group\" />\n        </div>\n      );\n      \n      // Both components should render properly\n      expect(screen.getAllByText('85')).toHaveLength(2); // One in each component\n      expect(screen.getByText('70')).toBeInTheDocument();\n      expect(screen.getByText('90')).toBeInTheDocument();\n    });\n\n    it('should maintain event handling after consolidation', () => {\n      const mockClick = vi.fn();\n      \n      render(\n        <SharedScoreCircle \n          score={85} \n          type=\"health\" \n          onClick={mockClick}\n          className=\"clickable-score\"\n        />\n      );\n      \n      const scoreElement = screen.getByText('85');\n      fireEvent.click(scoreElement);\n      \n      expect(mockClick).toHaveBeenCalledTimes(1);\n    });\n\n    it('should maintain CSS class composition', () => {\n      render(\n        <SharedScoreCircle \n          score={85} \n          type=\"health\" \n          size=\"lg\"\n          className=\"custom-class\"\n        />\n      );\n      \n      const container = screen.getByText('85').closest('div');\n      \n      // Should have all expected classes\n      expect(container).toHaveClass('custom-class');\n      expect(container).toHaveClass('w-12'); // Large size\n      expect(container).toHaveClass('h-12'); // Large size\n      expect(container).toHaveClass('text-green-500'); // Health color\n    });\n\n    it('should maintain proper cleanup and memory management', () => {\n      let componentCount = 0;\n      \n      const TestComponent = () => {\n        React.useEffect(() => {\n          componentCount++;\n          return () => {\n            componentCount--;\n          };\n        }, []);\n        \n        return <SharedScoreCircle score={85} type=\"health\" />;\n      };\n      \n      const { unmount } = render(<TestComponent />);\n      expect(componentCount).toBe(1);\n      \n      unmount();\n      expect(componentCount).toBe(0);\n    });\n  });\n\n  describe('Data Flow - Regression Tests', () => {\n    \n    it('should maintain proper data transformation pipelines', () => {\n      const mockData = {\n        transactions: testTransactions,\n        accounts: testAccounts,\n      };\n      \n      render(\n        <ConfigurableInsightsPage \n          transactions={mockData.transactions}\n          accounts={mockData.accounts}\n          variant=\"standard\"\n        />\n      );\n      \n      // Should process and display transaction data\n      expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      \n      // Data should be processed correctly (implicit through no errors)\n      expect(() => screen.getByText('Financial Insights')).not.toThrow();\n    });\n\n    it('should handle prop updates without breaking state', () => {\n      const { rerender } = render(\n        <SharedScoreCircle score={85} type=\"health\" />\n      );\n      \n      expect(screen.getByText('85')).toBeInTheDocument();\n      \n      // Update props\n      rerender(<SharedScoreCircle score={92} type=\"eco\" />);\n      \n      expect(screen.getByText('92')).toBeInTheDocument();\n      expect(screen.queryByText('85')).not.toBeInTheDocument();\n    });\n\n    it('should maintain consistent rendering across rapid prop changes', () => {\n      const { rerender } = render(\n        <SharedScoreCircle score={50} type=\"health\" />\n      );\n      \n      // Rapidly change props multiple times\n      for (let i = 51; i <= 100; i++) {\n        rerender(\n          <SharedScoreCircle \n            score={i} \n            type={i % 2 === 0 ? 'health' : 'eco'} \n          />\n        );\n      }\n      \n      // Should end up with final values\n      expect(screen.getByText('100')).toBeInTheDocument();\n    });\n  });\n\n  describe('Error Boundary - Regression Tests', () => {\n    \n    it('should handle invalid props gracefully', () => {\n      // Test with potentially problematic props\n      const problematicProps = [\n        { score: null as any, type: 'health' as const },\n        { score: undefined as any, type: 'health' as const },\n        { score: NaN, type: 'health' as const },\n        { score: Infinity, type: 'health' as const },\n      ];\n      \n      problematicProps.forEach((props, index) => {\n        const { unmount } = render(\n          <SharedScoreCircle key={index} {...props} />\n        );\n        \n        // Should either render something or handle gracefully\n        expect(() => screen.getByRole('presentation')).not.toThrow();\n        \n        unmount();\n      });\n    });\n\n    it('should recover from rendering errors', () => {\n      const ErrorProneComponent = ({ shouldError }: { shouldError: boolean }) => {\n        if (shouldError) {\n          throw new Error('Test error');\n        }\n        return <SharedScoreCircle score={85} type=\"health\" />;\n      };\n      \n      const ErrorBoundary = ({ children }: { children: React.ReactNode }) => {\n        const [hasError, setHasError] = React.useState(false);\n        \n        React.useEffect(() => {\n          const handleError = () => setHasError(true);\n          window.addEventListener('error', handleError);\n          return () => window.removeEventListener('error', handleError);\n        }, []);\n        \n        if (hasError) {\n          return <div>Error caught</div>;\n        }\n        \n        return <>{children}</>;\n      };\n      \n      const { rerender } = render(\n        <ErrorBoundary>\n          <ErrorProneComponent shouldError={false} />\n        </ErrorBoundary>\n      );\n      \n      expect(screen.getByText('85')).toBeInTheDocument();\n      \n      // Trigger error\n      rerender(\n        <ErrorBoundary>\n          <ErrorProneComponent shouldError={true} />\n        </ErrorBoundary>\n      );\n      \n      // Should handle error gracefully\n      expect(screen.queryByText('85')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Accessibility - Regression Tests', () => {\n    \n    it('should maintain ARIA compliance after consolidation', () => {\n      render(\n        <div>\n          <SharedScoreCircle score={85} type=\"health\" label=\"Health Score\" />\n          <ScoreGroup scores={{ health: 85, eco: 70 }} />\n        </div>\n      );\n      \n      // Check for proper ARIA attributes\n      const elements = screen.getAllByRole('img');\n      elements.forEach(element => {\n        expect(element).toHaveAttribute('aria-label');\n      });\n    });\n\n    it('should maintain keyboard navigation support', () => {\n      render(\n        <SharedScoreCircle \n          score={85} \n          type=\"health\" \n          tabIndex={0}\n          onKeyDown={vi.fn()}\n        />\n      );\n      \n      const element = screen.getByText('85').closest('div');\n      expect(element).toHaveAttribute('tabIndex', '0');\n    });\n\n    it('should maintain screen reader compatibility', () => {\n      render(\n        <SharedScoreCircle \n          score={85} \n          type=\"health\" \n          label=\"Health Score: 85 out of 100\"\n          aria-describedby=\"health-description\"\n        />\n      );\n      \n      const element = screen.getByText('85').closest('div');\n      expect(element).toHaveAttribute('aria-describedby', 'health-description');\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/test/security.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1289,1292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1289,1292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":423,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":423,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16735,16738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16735,16738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport {\n  VueniInputSanitizer,\n  VueniCSRFProtection,\n  VueniRateLimit,\n  VueniSecurityMonitor,\n  security\n} from '../utils/security';\nimport {\n  VueniSecureStorage,\n  SecureStorage,\n  encrypt,\n  decrypt,\n  hashData,\n  generateSecureToken,\n  maskFinancialData\n} from '../utils/crypto';\nimport { InputSanitizer } from '../utils/sanitize';\n\ndescribe('Security - Input Sanitization Tests', () => {\n  \n  describe('VueniInputSanitizer', () => {\n    describe('sanitizeText', () => {\n      it('should escape HTML entities to prevent XSS', () => {\n        const maliciousInput = '<script>alert(\"xss\")</script>';\n        const result = VueniInputSanitizer.sanitizeText(maliciousInput);\n        expect(result).toBe('&lt;script&gt;alert(&quot;xss&quot;)&lt;&#x2F;script&gt;');\n        expect(result).not.toContain('<script>');\n      });\n\n      it('should handle special characters', () => {\n        const input = \"O'Reilly & Associates < 100 > 50\";\n        const result = VueniInputSanitizer.sanitizeText(input);\n        expect(result).toBe('O&#x27;Reilly &amp; Associates &lt; 100 &gt; 50');\n      });\n\n      it('should throw error for non-string input', () => {\n        expect(() => VueniInputSanitizer.sanitizeText(123 as any)).toThrow('Input must be a string');\n      });\n\n      it('should handle empty strings', () => {\n        expect(VueniInputSanitizer.sanitizeText('')).toBe('');\n      });\n    });\n\n    describe('sanitizeFinancialAmount', () => {\n      it('should sanitize valid financial amounts', () => {\n        expect(VueniInputSanitizer.sanitizeFinancialAmount('$1,234.56')).toBe(1234.56);\n        expect(VueniInputSanitizer.sanitizeFinancialAmount('1234.567')).toBe(1234.57);\n        expect(VueniInputSanitizer.sanitizeFinancialAmount(1234.567)).toBe(1234.57);\n      });\n\n      it('should handle negative amounts', () => {\n        expect(VueniInputSanitizer.sanitizeFinancialAmount('-500.00')).toBe(-500.00);\n        expect(VueniInputSanitizer.sanitizeFinancialAmount(-500.123)).toBe(-500.12);\n      });\n\n      it('should throw error for extremely large amounts', () => {\n        expect(() => VueniInputSanitizer.sanitizeFinancialAmount('1000000000001')).toThrow('Financial amount exceeds maximum allowed value');\n      });\n\n      it('should throw error for invalid formats', () => {\n        expect(() => VueniInputSanitizer.sanitizeFinancialAmount('abc')).toThrow('Invalid financial amount format');\n        expect(() => VueniInputSanitizer.sanitizeFinancialAmount('12.34.56')).toThrow('Invalid financial amount format');\n      });\n\n      it('should throw error for non-finite numbers', () => {\n        expect(() => VueniInputSanitizer.sanitizeFinancialAmount(NaN)).toThrow('Invalid financial amount: not a finite number');\n        expect(() => VueniInputSanitizer.sanitizeFinancialAmount(Infinity)).toThrow('Invalid financial amount: not a finite number');\n      });\n    });\n\n    describe('sanitizeTransactionDescription', () => {\n      it('should sanitize and trim transaction descriptions', () => {\n        const input = '  <b>Amazon Purchase</b> - groceries  ';\n        const result = VueniInputSanitizer.sanitizeTransactionDescription(input);\n        expect(result).toBe('&lt;b&gt;Amazon Purchase&lt;&#x2F;b&gt; - groceries');\n      });\n\n      it('should reject descriptions that are too long', () => {\n        const longInput = 'a'.repeat(501);\n        expect(() => VueniInputSanitizer.sanitizeTransactionDescription(longInput)).toThrow('Transaction description too long');\n      });\n\n      it('should handle special characters in descriptions', () => {\n        const input = \"McDonald's & Burger King\";\n        const result = VueniInputSanitizer.sanitizeTransactionDescription(input);\n        expect(result).toBe('McDonald&#x27;s &amp; Burger King');\n      });\n    });\n\n    describe('sanitizePercentage', () => {\n      it('should accept valid percentages', () => {\n        expect(VueniInputSanitizer.sanitizePercentage('50')).toBe(50);\n        expect(VueniInputSanitizer.sanitizePercentage(75.5)).toBe(75.5);\n        expect(VueniInputSanitizer.sanitizePercentage('0')).toBe(0);\n        expect(VueniInputSanitizer.sanitizePercentage('100')).toBe(100);\n      });\n\n      it('should reject percentages outside valid range', () => {\n        expect(() => VueniInputSanitizer.sanitizePercentage('-1')).toThrow('Percentage must be between 0 and 100');\n        expect(() => VueniInputSanitizer.sanitizePercentage('101')).toThrow('Percentage must be between 0 and 100');\n      });\n    });\n\n    describe('sanitizeInterestRate', () => {\n      it('should accept valid interest rates', () => {\n        expect(VueniInputSanitizer.sanitizeInterestRate('4.5')).toBe(4.5);\n        expect(VueniInputSanitizer.sanitizeInterestRate(0)).toBe(0);\n        expect(VueniInputSanitizer.sanitizeInterestRate('150')).toBe(150); // High but valid\n      });\n\n      it('should reject extreme interest rates', () => {\n        expect(() => VueniInputSanitizer.sanitizeInterestRate('-1')).toThrow('Interest rate must be between 0% and 1000%');\n        expect(() => VueniInputSanitizer.sanitizeInterestRate('1001')).toThrow('Interest rate must be between 0% and 1000%');\n      });\n    });\n\n    describe('sanitizeYear', () => {\n      it('should accept valid years', () => {\n        const currentYear = new Date().getFullYear();\n        expect(VueniInputSanitizer.sanitizeYear('2024')).toBe(2024);\n        expect(VueniInputSanitizer.sanitizeYear(currentYear)).toBe(currentYear);\n        expect(VueniInputSanitizer.sanitizeYear('1950')).toBe(1950);\n      });\n\n      it('should reject years outside valid range', () => {\n        const currentYear = new Date().getFullYear();\n        expect(() => VueniInputSanitizer.sanitizeYear('1899')).toThrow(`Year must be between 1900 and ${currentYear + 100}`);\n        expect(() => VueniInputSanitizer.sanitizeYear(currentYear + 101)).toThrow(`Year must be between 1900 and ${currentYear + 100}`);\n      });\n\n      it('should reject non-integer years', () => {\n        expect(() => VueniInputSanitizer.sanitizeYear('2024.5')).toThrow('Year must be an integer');\n      });\n    });\n\n    describe('sanitizeEmail', () => {\n      it('should accept valid email addresses', () => {\n        expect(VueniInputSanitizer.sanitizeEmail('test@example.com')).toBe('test@example.com');\n        expect(VueniInputSanitizer.sanitizeEmail('  USER@DOMAIN.COM  ')).toBe('user@domain.com');\n      });\n\n      it('should reject invalid email formats', () => {\n        expect(() => VueniInputSanitizer.sanitizeEmail('invalid-email')).toThrow('Invalid email format');\n        expect(() => VueniInputSanitizer.sanitizeEmail('test@')).toThrow('Invalid email format');\n        expect(() => VueniInputSanitizer.sanitizeEmail('@domain.com')).toThrow('Invalid email format');\n      });\n\n      it('should reject emails that are too long', () => {\n        const longEmail = 'a'.repeat(250) + '@example.com';\n        expect(() => VueniInputSanitizer.sanitizeEmail(longEmail)).toThrow('Email address too long');\n      });\n    });\n\n    describe('sanitizePhoneNumber', () => {\n      it('should format valid US phone numbers', () => {\n        expect(VueniInputSanitizer.sanitizePhoneNumber('1234567890')).toBe('(123) 456-7890');\n        expect(VueniInputSanitizer.sanitizePhoneNumber('11234567890')).toBe('+1 (123) 456-7890');\n        expect(VueniInputSanitizer.sanitizePhoneNumber('(123) 456-7890')).toBe('(123) 456-7890');\n      });\n\n      it('should reject invalid phone number formats', () => {\n        expect(() => VueniInputSanitizer.sanitizePhoneNumber('123456789')).toThrow('Invalid phone number format');\n        expect(() => VueniInputSanitizer.sanitizePhoneNumber('123456789012')).toThrow('Invalid phone number format');\n      });\n    });\n  });\n\n  describe('InputSanitizer (Legacy)', () => {\n    it('should escape HTML entities', () => {\n      const input = '<script>alert(\"xss\")</script>';\n      const result = InputSanitizer.escapeHtml(input);\n      expect(result).toBe('&lt;script&gt;alert(&quot;xss&quot;)&lt;&#x2F;script&gt;');\n    });\n\n    it('should sanitize text and remove script tags', () => {\n      const input = 'Hello <script>alert(\"xss\")</script> World';\n      const result = InputSanitizer.sanitizeText(input);\n      expect(result).toBe('Hello  World');\n      expect(result).not.toContain('<script>');\n    });\n\n    it('should remove event handlers', () => {\n      const input = '<div onclick=\"alert(\\'xss\\')\">Click me</div>';\n      const result = InputSanitizer.sanitizeText(input);\n      expect(result).not.toContain('onclick');\n    });\n\n    it('should sanitize financial amounts', () => {\n      expect(InputSanitizer.sanitizeAmount('$1,234.567')).toBe(1234.57);\n      expect(InputSanitizer.sanitizeAmount('invalid')).toBe(0);\n    });\n\n    it('should validate and sanitize emails', () => {\n      expect(InputSanitizer.sanitizeEmail('  TEST@EXAMPLE.COM  ')).toBe('test@example.com');\n      expect(InputSanitizer.sanitizeEmail('invalid-email')).toBe('');\n    });\n\n    it('should sanitize URLs', () => {\n      expect(InputSanitizer.sanitizeUrl('https://example.com')).toBe('https://example.com/');\n      expect(InputSanitizer.sanitizeUrl('javascript:alert(\"xss\")')).toBe('');\n      expect(InputSanitizer.sanitizeUrl('ftp://example.com')).toBe('');\n    });\n\n    it('should sanitize filenames', () => {\n      expect(InputSanitizer.sanitizeFilename('file<>name.txt')).toBe('file__name.txt');\n      expect(InputSanitizer.sanitizeFilename('file/../name.txt')).toBe('file_name.txt');\n    });\n\n    it('should validate transaction categories', () => {\n      expect(InputSanitizer.sanitizeCategory('GROCERIES')).toBe('groceries');\n      expect(InputSanitizer.sanitizeCategory('invalid-category')).toBe('other');\n    });\n  });\n});\n\ndescribe('Security - CSRF Protection Tests', () => {\n  \n  beforeEach(() => {\n    // Clear session storage before each test\n    if (typeof sessionStorage !== 'undefined') {\n      sessionStorage.clear();\n    }\n  });\n\n  describe('VueniCSRFProtection', () => {\n    it('should generate unique CSRF tokens', () => {\n      const token1 = VueniCSRFProtection.generateToken();\n      const token2 = VueniCSRFProtection.generateToken();\n      \n      expect(token1).toHaveLength(64); // 32 bytes = 64 hex chars\n      expect(token2).toHaveLength(64);\n      expect(token1).not.toBe(token2);\n    });\n\n    it('should validate correct tokens', () => {\n      const token = VueniCSRFProtection.generateToken();\n      expect(VueniCSRFProtection.validateToken(token)).toBe(true);\n    });\n\n    it('should reject invalid tokens', () => {\n      VueniCSRFProtection.generateToken();\n      expect(VueniCSRFProtection.validateToken('invalid-token')).toBe(false);\n    });\n\n    it('should handle token expiry', () => {\n      const token = VueniCSRFProtection.generateToken();\n      \n      // Mock expired token by manipulating session storage\n      const expiredTime = (Date.now() - 2 * 60 * 60 * 1000).toString(); // 2 hours ago\n      sessionStorage.setItem('vueni:csrf:expiry', expiredTime);\n      \n      expect(VueniCSRFProtection.validateToken(token)).toBe(false);\n    });\n\n    it('should get current token or generate new one', () => {\n      const token1 = VueniCSRFProtection.getToken();\n      const token2 = VueniCSRFProtection.getToken();\n      \n      expect(token1).toBe(token2); // Should return same token if not expired\n      expect(token1).toHaveLength(64);\n    });\n\n    it('should clear tokens', () => {\n      VueniCSRFProtection.generateToken();\n      VueniCSRFProtection.clearToken();\n      \n      expect(sessionStorage.getItem('vueni:csrf:token')).toBeNull();\n      expect(sessionStorage.getItem('vueni:csrf:expiry')).toBeNull();\n    });\n\n    it('should use constant-time comparison', () => {\n      const token = VueniCSRFProtection.generateToken();\n      \n      // Test timing attack resistance (basic test)\n      const start1 = performance.now();\n      VueniCSRFProtection.validateToken('a'.repeat(64));\n      const time1 = performance.now() - start1;\n      \n      const start2 = performance.now();\n      VueniCSRFProtection.validateToken(token.slice(0, -1) + 'x');\n      const time2 = performance.now() - start2;\n      \n      // Times should be similar (within reasonable margin)\n      expect(Math.abs(time1 - time2)).toBeLessThan(10); // 10ms tolerance\n    });\n  });\n});\n\ndescribe('Security - Rate Limiting Tests', () => {\n  \n  beforeEach(() => {\n    // Clear all rate limits before each test\n    VueniRateLimit.clearLimit('test-operation');\n  });\n\n  describe('VueniRateLimit', () => {\n    it('should not rate limit initial requests', () => {\n      expect(VueniRateLimit.isRateLimited('test-operation')).toBe(false);\n      expect(VueniRateLimit.getRemainingRequests('test-operation')).toBe(99);\n    });\n\n    it('should track request counts', () => {\n      for (let i = 0; i < 5; i++) {\n        VueniRateLimit.isRateLimited('test-operation');\n      }\n      \n      expect(VueniRateLimit.getRemainingRequests('test-operation')).toBe(95);\n    });\n\n    it('should rate limit after exceeding threshold', () => {\n      // Exhaust rate limit\n      for (let i = 0; i < 100; i++) {\n        VueniRateLimit.isRateLimited('test-operation');\n      }\n      \n      expect(VueniRateLimit.isRateLimited('test-operation')).toBe(true);\n      expect(VueniRateLimit.getRemainingRequests('test-operation')).toBe(0);\n    });\n\n    it('should reset rate limits after time window', () => {\n      // Mock time to simulate window reset\n      const originalNow = Date.now;\n      Date.now = vi.fn(() => 1000000);\n      \n      VueniRateLimit.isRateLimited('test-operation');\n      \n      // Jump forward past the window\n      Date.now = vi.fn(() => 1000000 + 60 * 60 * 1000 + 1);\n      \n      expect(VueniRateLimit.isRateLimited('test-operation')).toBe(false);\n      expect(VueniRateLimit.getRemainingRequests('test-operation')).toBe(99);\n      \n      Date.now = originalNow;\n    });\n\n    it('should handle different operations independently', () => {\n      VueniRateLimit.isRateLimited('operation1');\n      VueniRateLimit.isRateLimited('operation2');\n      \n      expect(VueniRateLimit.getRemainingRequests('operation1')).toBe(99);\n      expect(VueniRateLimit.getRemainingRequests('operation2')).toBe(99);\n    });\n  });\n});\n\ndescribe('Security - Monitoring Tests', () => {\n  \n  beforeEach(() => {\n    VueniSecurityMonitor.clearEvents();\n  });\n\n  describe('VueniSecurityMonitor', () => {\n    it('should log security events', () => {\n      VueniSecurityMonitor.logEvent('XSS_ATTEMPT', 'Malicious script detected');\n      \n      const events = VueniSecurityMonitor.getEvents();\n      expect(events).toHaveLength(1);\n      expect(events[0].type).toBe('XSS_ATTEMPT');\n      expect(events[0].description).toBe('Malicious script detected');\n      expect(events[0].timestamp).toBeDefined();\n    });\n\n    it('should include metadata in events', () => {\n      VueniSecurityMonitor.logEvent('LOGIN_ATTEMPT', 'Failed login', { ip: '192.168.1.1' });\n      \n      const events = VueniSecurityMonitor.getEvents();\n      expect(events[0].ip).toBe('192.168.1.1');\n    });\n\n    it('should limit event history', () => {\n      // Log more than 1000 events\n      for (let i = 0; i < 1005; i++) {\n        VueniSecurityMonitor.logEvent('TEST_EVENT', `Event ${i}`);\n      }\n      \n      const events = VueniSecurityMonitor.getEvents();\n      expect(events).toHaveLength(1000);\n      expect(events[0].description).toBe('Event 5'); // First 5 should be removed\n    });\n\n    it('should clear events', () => {\n      VueniSecurityMonitor.logEvent('TEST_EVENT', 'Test');\n      VueniSecurityMonitor.clearEvents();\n      \n      expect(VueniSecurityMonitor.getEvents()).toHaveLength(0);\n    });\n  });\n});\n\ndescribe('Security - Encryption Tests', () => {\n  \n  beforeEach(() => {\n    // Clear session storage to reset encryption keys\n    if (typeof sessionStorage !== 'undefined') {\n      sessionStorage.clear();\n    }\n  });\n\n  describe('Basic Encryption/Decryption', () => {\n    it('should encrypt and decrypt data correctly', () => {\n      const originalData = 'sensitive financial data';\n      const encrypted = encrypt(originalData);\n      const decrypted = decrypt(encrypted);\n      \n      expect(encrypted).not.toBe(originalData);\n      expect(decrypted).toBe(originalData);\n    });\n\n    it('should produce different encrypted output for same input', () => {\n      const data = 'test data';\n      const encrypted1 = encrypt(data);\n      \n      // Clear session to generate new key\n      sessionStorage.clear();\n      \n      const encrypted2 = encrypt(data);\n      expect(encrypted1).not.toBe(encrypted2);\n    });\n\n    it('should handle encryption errors gracefully', () => {\n      expect(() => encrypt(null as any)).toThrow('Failed to encrypt data');\n    });\n  });\n\n  describe('Hashing', () => {\n    it('should generate consistent hashes', () => {\n      const data = 'password123';\n      const hash1 = hashData(data);\n      const hash2 = hashData(data);\n      \n      expect(hash1).toBe(hash2);\n      expect(hash1).not.toBe(data);\n    });\n\n    it('should produce different hashes for different data', () => {\n      const hash1 = hashData('password1');\n      const hash2 = hashData('password2');\n      \n      expect(hash1).not.toBe(hash2);\n    });\n  });\n\n  describe('Token Generation', () => {\n    it('should generate secure random tokens', () => {\n      const token1 = generateSecureToken();\n      const token2 = generateSecureToken();\n      \n      expect(token1).not.toBe(token2);\n      expect(token1).toHaveLength(64); // 32 bytes = 64 hex chars\n    });\n\n    it('should generate tokens of specified length', () => {\n      const token = generateSecureToken(16);\n      expect(token).toHaveLength(32); // 16 bytes = 32 hex chars\n    });\n  });\n\n  describe('Data Masking', () => {\n    it('should mask financial data correctly', () => {\n      expect(maskFinancialData('1234567890')).toBe('******7890');\n      expect(maskFinancialData('123')).toBe('123'); // Too short to mask\n      expect(maskFinancialData(1234567890)).toBe('******7890');\n    });\n\n    it('should handle custom show length', () => {\n      expect(maskFinancialData('1234567890', 2)).toBe('********90');\n      expect(maskFinancialData('1234567890', 6)).toBe('****567890');\n    });\n  });\n});\n\ndescribe('Security - Secure Storage Tests', () => {\n  \n  beforeEach(() => {\n    // Clear storage before each test\n    localStorage.clear();\n    sessionStorage.clear();\n    if (VueniSecureStorage.clear) {\n      try {\n        VueniSecureStorage.clear('VUENI_CLEAR_ALL_DATA');\n      } catch (e) {\n        // Ignore errors during cleanup\n      }\n    }\n  });\n\n  describe('VueniSecureStorage', () => {\n    it('should store and retrieve encrypted data', () => {\n      const testData = { amount: 1000, account: 'savings' };\n      VueniSecureStorage.setItem('vueni:test', testData);\n      \n      const retrieved = VueniSecureStorage.getItem('vueni:test');\n      expect(retrieved).toEqual(testData);\n    });\n\n    it('should validate key naming conventions', () => {\n      const testData = { test: 'data' };\n      \n      expect(() => VueniSecureStorage.setItem('invalid-key', testData)).toThrow('Invalid financial data key format');\n    });\n\n    it('should handle session-only storage', () => {\n      const sensitiveData = { ssn: '123-45-6789' };\n      VueniSecureStorage.setItem('vueni:sensitive', sensitiveData, { sessionOnly: true });\n      \n      const retrieved = VueniSecureStorage.getItem('vueni:sensitive');\n      expect(retrieved).toEqual(sensitiveData);\n      \n      // Should not be in localStorage\n      expect(localStorage.getItem('vueni:sensitive')).toBeNull();\n    });\n\n    it('should handle session expiry', () => {\n      const data = { test: 'data' };\n      VueniSecureStorage.setItem('vueni:session-test', data, { sessionOnly: true });\n      \n      // Mock expired session\n      const mockNow = Date.now() + 31 * 60 * 1000; // 31 minutes later\n      const originalNow = Date.now;\n      Date.now = vi.fn(() => mockNow);\n      \n      const retrieved = VueniSecureStorage.getItem('vueni:session-test');\n      expect(retrieved).toBeNull();\n      \n      Date.now = originalNow;\n    });\n\n    it('should require confirmation for clearing all data', () => {\n      expect(() => VueniSecureStorage.clear()).toThrow('Data clear operation requires confirmation token');\n      expect(() => VueniSecureStorage.clear('WRONG_TOKEN')).toThrow('Data clear operation requires confirmation token');\n    });\n\n    it('should provide storage statistics', () => {\n      VueniSecureStorage.setItem('vueni:test1', { data: 1 });\n      VueniSecureStorage.setItem('vueni:test2', { data: 2 }, { sessionOnly: true });\n      \n      const stats = VueniSecureStorage.getStorageStats();\n      expect(stats.sessionItems).toBe(1);\n      expect(stats.localStorageItems).toBe(1);\n      expect(stats.auditLogSize).toBeGreaterThan(0);\n    });\n\n    it('should cleanup expired sessions', () => {\n      VueniSecureStorage.setItem('vueni:session1', { data: 1 }, { sessionOnly: true });\n      VueniSecureStorage.setItem('vueni:session2', { data: 2 }, { sessionOnly: true });\n      \n      // Mock time to make sessions expire\n      const mockNow = Date.now() + 31 * 60 * 1000;\n      const originalNow = Date.now;\n      Date.now = vi.fn(() => mockNow);\n      \n      VueniSecureStorage.cleanupExpiredSessions();\n      \n      const stats = VueniSecureStorage.getStorageStats();\n      expect(stats.sessionItems).toBe(0);\n      \n      Date.now = originalNow;\n    });\n\n    it('should maintain audit logs', () => {\n      VueniSecureStorage.setItem('vueni:audit-test', { data: 'test' });\n      VueniSecureStorage.getItem('vueni:audit-test');\n      VueniSecureStorage.removeItem('vueni:audit-test');\n      \n      const auditLog = VueniSecureStorage.getAuditLog();\n      expect(auditLog.length).toBeGreaterThanOrEqual(3);\n      \n      const actions = auditLog.map(entry => entry.action);\n      expect(actions).toContain('SET');\n      expect(actions).toContain('GET');\n      expect(actions).toContain('REMOVE');\n    });\n  });\n\n  describe('Legacy SecureStorage', () => {\n    it('should maintain backward compatibility', () => {\n      const testData = { balance: 5000 };\n      SecureStorage.setItem('vueni:legacy-test', testData);\n      \n      const retrieved = SecureStorage.getItem('vueni:legacy-test');\n      expect(retrieved).toEqual(testData);\n    });\n  });\n});\n\ndescribe('Security Integration Tests', () => {\n  \n  it('should handle complete security workflow', () => {\n    // 1. Sanitize input\n    const userInput = '<script>alert(\"xss\")</script>$1,234.56';\n    const sanitizedText = VueniInputSanitizer.sanitizeText('<script>alert(\"xss\")</script>');\n    const sanitizedAmount = VueniInputSanitizer.sanitizeFinancialAmount('$1,234.56');\n    \n    expect(sanitizedText).not.toContain('<script>');\n    expect(sanitizedAmount).toBe(1234.56);\n    \n    // 2. Generate and validate CSRF token\n    const csrfToken = VueniCSRFProtection.generateToken();\n    expect(VueniCSRFProtection.validateToken(csrfToken)).toBe(true);\n    \n    // 3. Check rate limits\n    expect(VueniRateLimit.isRateLimited('financial-calculation')).toBe(false);\n    \n    // 4. Store data securely\n    const financialData = { amount: sanitizedAmount, description: sanitizedText };\n    VueniSecureStorage.setItem('vueni:transaction', financialData, { sensitive: true });\n    \n    // 5. Retrieve and verify\n    const retrieved = VueniSecureStorage.getItem('vueni:transaction');\n    expect(retrieved).toEqual(financialData);\n    \n    // 6. Log security event\n    VueniSecurityMonitor.logEvent('SECURE_TRANSACTION', 'Financial data processed securely');\n    \n    const events = VueniSecurityMonitor.getEvents();\n    expect(events).toHaveLength(1);\n  });\n\n  it('should handle multiple security violations', () => {\n    const violations = [\n      () => VueniInputSanitizer.sanitizeFinancialAmount('invalid'),\n      () => VueniInputSanitizer.sanitizeEmail('invalid-email'),\n      () => VueniInputSanitizer.sanitizePercentage('-10'),\n      () => VueniSecureStorage.setItem('invalid-key', {})\n    ];\n    \n    violations.forEach(violation => {\n      expect(violation).toThrow();\n    });\n    \n    // Should not affect other operations\n    expect(VueniInputSanitizer.sanitizeFinancialAmount('100')).toBe(100);\n  });\n\n  it('should maintain security under stress conditions', () => {\n    // Simulate high load\n    for (let i = 0; i < 50; i++) {\n      const token = generateSecureToken();\n      expect(token).toHaveLength(64);\n      \n      const data = { iteration: i, amount: Math.random() * 1000 };\n      VueniSecureStorage.setItem(`vueni:stress-${i}`, data);\n      \n      VueniRateLimit.isRateLimited(`operation-${i % 5}`);\n    }\n    \n    // Verify system integrity\n    const stats = VueniSecureStorage.getStorageStats();\n    expect(stats.localStorageItems).toBe(50);\n    expect(stats.auditLogSize).toBeGreaterThan(0);\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/test/vueni-security.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/theme/colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/types/accounts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/types/budget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/types/budgets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/types/creditScore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/types/family.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/types/investments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/types/savingsGoals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/types/shared.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/types/transactions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/utils/calculators.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/utils/crypto.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[576,579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[576,579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[837,840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[837,840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1415,1418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1415,1418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2477,2480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2477,2480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3368,3371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3368,3371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":184,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5876,5879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5876,5879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":241,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7502,7505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7502,7505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":249,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7781,7784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7781,7784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":257,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8025,8028],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8025,8028],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":297,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9166,9169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9166,9169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":301,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":301,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9246,9249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9246,9249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":316,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9544,9547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9544,9547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import CryptoJS from 'crypto-js';\nimport { SecurityEnvValidator } from './envValidation';\n\n// Get validated encryption key from environment\nconst SECRET_KEY = SecurityEnvValidator.getValidatedEncryptionKey('VITE_VUENI_ENCRYPTION_KEY');\n\n// Session timeout for sensitive data (30 minutes)\nconst SESSION_TIMEOUT = 30 * 60 * 1000;\n\n/**\n * VueniSecureStorage - Production-grade encrypted storage for financial data\n * Implements PCI-DSS considerations and financial compliance standards\n */\nexport class VueniSecureStorage {\n  private static sessionData = new Map<string, { data: any; timestamp: number; encrypted: boolean }>();\n  private static auditLog: Array<{ action: string; key: string; timestamp: string; userAgent?: string }> = [];\n\n  /**\n   * Encrypts data with AES-256 and adds integrity check\n   */\n  private static encrypt(data: any): string {\n    try {\n      const jsonString = JSON.stringify(data);\n      const timestamp = Date.now().toString();\n      const payload = { data: jsonString, timestamp, integrity: this.generateIntegrityHash(jsonString) };\n      \n      return CryptoJS.AES.encrypt(JSON.stringify(payload), SECRET_KEY).toString();\n    } catch (error) {\n      console.error('VueniSecureStorage encryption error:', error);\n      throw new Error('Failed to encrypt financial data');\n    }\n  }\n\n  /**\n   * Decrypts data and verifies integrity\n   */\n  private static decrypt(encryptedData: string): any {\n    try {\n      const bytes = CryptoJS.AES.decrypt(encryptedData, SECRET_KEY);\n      const decryptedString = bytes.toString(CryptoJS.enc.Utf8);\n      \n      if (!decryptedString) {\n        throw new Error('Decryption failed - invalid key or corrupted data');\n      }\n\n      const payload = JSON.parse(decryptedString);\n      \n      // Verify data integrity\n      if (payload.integrity !== this.generateIntegrityHash(payload.data)) {\n        throw new Error('Data integrity check failed - possible tampering detected');\n      }\n\n      return JSON.parse(payload.data);\n    } catch (error) {\n      console.error('VueniSecureStorage decryption error:', error);\n      this.logSecurityEvent('DECRYPTION_FAILED', 'unknown', error.message);\n      return null;\n    }\n  }\n\n  /**\n   * Generates integrity hash for data verification\n   */\n  private static generateIntegrityHash(data: string): string {\n    return CryptoJS.SHA256(data + SECRET_KEY).toString();\n  }\n\n  /**\n   * Stores encrypted financial data with audit trail\n   */\n  static setItem(key: string, value: any, options: { sensitive?: boolean; sessionOnly?: boolean } = {}): void {\n    try {\n      this.validateFinancialDataKey(key);\n      \n      if (options.sessionOnly) {\n        // Store in memory session storage for highly sensitive data\n        this.sessionData.set(key, {\n          data: value,\n          timestamp: Date.now(),\n          encrypted: options.sensitive || false\n        });\n      } else {\n        // Store encrypted in localStorage\n        const encrypted = this.encrypt(value);\n        localStorage.setItem(key, encrypted);\n      }\n      \n      this.logAccess('SET', key, { sensitive: options.sensitive });\n    } catch (error) {\n      console.error('VueniSecureStorage setItem error:', error);\n      this.logSecurityEvent('STORAGE_ERROR', key, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves and decrypts financial data\n   */\n  static getItem(key: string): any {\n    try {\n      this.validateFinancialDataKey(key);\n\n      // Check session storage first\n      const sessionItem = this.sessionData.get(key);\n      if (sessionItem) {\n        // Check if session has expired\n        if (Date.now() - sessionItem.timestamp > SESSION_TIMEOUT) {\n          this.sessionData.delete(key);\n          this.logSecurityEvent('SESSION_EXPIRED', key);\n          return null;\n        }\n        this.logAccess('GET', key, { source: 'session' });\n        return sessionItem.data;\n      }\n\n      // Fallback to localStorage\n      const encrypted = localStorage.getItem(key);\n      if (!encrypted) return null;\n      \n      this.logAccess('GET', key, { source: 'localStorage' });\n      return this.decrypt(encrypted);\n    } catch (error) {\n      console.error('VueniSecureStorage getItem error:', error);\n      this.logSecurityEvent('RETRIEVAL_ERROR', key, error.message);\n      return null;\n    }\n  }\n\n  /**\n   * Securely removes financial data\n   */\n  static removeItem(key: string): void {\n    try {\n      this.validateFinancialDataKey(key);\n      \n      // Remove from session storage\n      this.sessionData.delete(key);\n      \n      // Remove from localStorage\n      localStorage.removeItem(key);\n      \n      this.logAccess('REMOVE', key);\n    } catch (error) {\n      console.error('VueniSecureStorage removeItem error:', error);\n      this.logSecurityEvent('REMOVAL_ERROR', key, error.message);\n    }\n  }\n\n  /**\n   * Clears all financial data with confirmation\n   */\n  static clear(confirmationToken?: string): void {\n    if (confirmationToken !== 'VUENI_CLEAR_ALL_DATA') {\n      throw new Error('Data clear operation requires confirmation token');\n    }\n\n    this.sessionData.clear();\n    \n    // Only clear Vueni-related keys from localStorage\n    const keysToRemove = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key?.startsWith('vueni:')) {\n        keysToRemove.push(key);\n      }\n    }\n    \n    keysToRemove.forEach(key => localStorage.removeItem(key));\n    this.logAccess('CLEAR', 'all');\n  }\n\n  /**\n   * Validates that data keys follow financial data naming conventions\n   */\n  private static validateFinancialDataKey(key: string): void {\n    if (!key.startsWith('vueni:')) {\n      throw new Error(`Invalid financial data key format: ${key}. Must start with 'vueni:'`);\n    }\n  }\n\n  /**\n   * Enhanced audit logging for financial compliance\n   */\n  private static logAccess(action: string, key: string, metadata: any = {}): void {\n    const logEntry = {\n      action,\n      key: this.maskSensitiveKey(key),\n      timestamp: new Date().toISOString(),\n      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined,\n      ...metadata\n    };\n\n    this.auditLog.push(logEntry);\n\n    // Keep only last 1000 log entries in memory\n    if (this.auditLog.length > 1000) {\n      this.auditLog.shift();\n    }\n\n    if (import.meta.env.DEV) {\n      console.log(`[VueniSecureStorage] ${action}: ${this.maskSensitiveKey(key)}`, metadata);\n    }\n\n    // In production, send to audit service\n    if (import.meta.env.PROD) {\n      this.sendToAuditService(logEntry);\n    }\n  }\n\n  /**\n   * Logs security events for monitoring\n   */\n  private static logSecurityEvent(event: string, key: string, details?: string): void {\n    const securityEvent = {\n      event,\n      key: this.maskSensitiveKey(key),\n      details,\n      timestamp: new Date().toISOString(),\n      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined\n    };\n\n    console.warn('[VueniSecureStorage Security Event]', securityEvent);\n\n    // In production, this would trigger security monitoring alerts\n    if (import.meta.env.PROD) {\n      this.sendSecurityAlert(securityEvent);\n    }\n  }\n\n  /**\n   * Masks sensitive parts of storage keys for logging\n   */\n  private static maskSensitiveKey(key: string): string {\n    if (key.length <= 8) return key;\n    return key.substring(0, 4) + '***' + key.substring(key.length - 4);\n  }\n\n  /**\n   * Sends audit logs to external service (production)\n   */\n  private static sendToAuditService(logEntry: any): void {\n    // Placeholder for production audit service integration\n    // This would send to services like DataDog, Splunk, or custom audit API\n  }\n\n  /**\n   * Sends security alerts to monitoring service (production)\n   */\n  private static sendSecurityAlert(securityEvent: any): void {\n    // Placeholder for production security monitoring integration\n    // This would trigger alerts in services like PagerDuty, Slack, etc.\n  }\n\n  /**\n   * Gets audit log for compliance reporting\n   */\n  static getAuditLog(): Array<any> {\n    return [...this.auditLog];\n  }\n\n  /**\n   * Clears expired session data\n   */\n  static cleanupExpiredSessions(): void {\n    const now = Date.now();\n    for (const [key, value] of this.sessionData.entries()) {\n      if (now - value.timestamp > SESSION_TIMEOUT) {\n        this.sessionData.delete(key);\n        this.logSecurityEvent('SESSION_CLEANUP', key);\n      }\n    }\n  }\n\n  /**\n   * Checks if a key exists without triggering a full get operation\n   */\n  static hasItem(key: string): boolean {\n    return this.sessionData.has(key) || localStorage.getItem(key) !== null;\n  }\n\n  /**\n   * Gets storage statistics for monitoring\n   */\n  static getStorageStats(): { sessionItems: number; localStorageItems: number; auditLogSize: number } {\n    const localStorageItems = Object.keys(localStorage).filter(key => key.startsWith('vueni:')).length;\n    \n    return {\n      sessionItems: this.sessionData.size,\n      localStorageItems,\n      auditLogSize: this.auditLog.length\n    };\n  }\n}\n\n// Legacy SecureStorage class for backward compatibility\nexport class SecureStorage extends VueniSecureStorage {\n  static setItem(key: string, value: any): void {\n    super.setItem(key, value);\n  }\n\n  static getItem(key: string): any {\n    return super.getItem(key);\n  }\n\n  static removeItem(key: string): void {\n    super.removeItem(key);\n  }\n\n  static clear(): void {\n    super.clear('VUENI_CLEAR_ALL_DATA');\n  }\n}\n\n// Helper functions for backward compatibility\nexport const secureStorage = {\n  setItem: (key: string, value: any) => SecureStorage.setItem(key, value),\n  getItem: (key: string) => SecureStorage.getItem(key),\n  removeItem: (key: string) => SecureStorage.removeItem(key),\n  clear: () => SecureStorage.clear()\n};\n\n// Generate or retrieve encryption key\nconst getEncryptionKey = (): string => {\n  const storedKey = sessionStorage.getItem('_ek');\n  if (storedKey) return storedKey;\n  \n  const newKey = CryptoJS.lib.WordArray.random(256/8).toString();\n  sessionStorage.setItem('_ek', newKey);\n  return newKey;\n};\n\n// AES-256 encryption for sensitive data\nexport const encrypt = (data: string): string => {\n  try {\n    const key = getEncryptionKey();\n    return CryptoJS.AES.encrypt(data, key).toString();\n  } catch (error) {\n    console.error('Encryption failed:', error);\n    throw new Error('Failed to encrypt data');\n  }\n};\n\n// AES-256 decryption\nexport const decrypt = (encryptedData: string): string => {\n  try {\n    const key = getEncryptionKey();\n    const bytes = CryptoJS.AES.decrypt(encryptedData, key);\n    return bytes.toString(CryptoJS.enc.Utf8);\n  } catch (error) {\n    console.error('Decryption failed:', error);\n    throw new Error('Failed to decrypt data');\n  }\n};\n\n// Hash sensitive data for comparison without storing plaintext\nexport const hashData = (data: string): string => {\n  return CryptoJS.SHA256(data).toString();\n};\n\n// Generate secure random tokens using crypto.getRandomValues()\nexport const generateSecureToken = (length: number = 32): string => {\n  if (typeof window !== 'undefined' && window.crypto && window.crypto.getRandomValues) {\n    // Browser environment - use Web Crypto API\n    const array = new Uint8Array(length);\n    window.crypto.getRandomValues(array);\n    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n  } else {\n    // Fallback to CryptoJS for non-browser environments\n    return CryptoJS.lib.WordArray.random(length).toString();\n  }\n};\n\n// Mask financial data for display\nexport const maskFinancialData = (value: string | number, showLast: number = 4): string => {\n  const str = value.toString();\n  if (str.length <= showLast) return str;\n  \n  const masked = '*'.repeat(str.length - showLast);\n  return masked + str.slice(-showLast);\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/utils/envValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/utils/formatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/utils/monitoring.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[549,552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[549,552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":115,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3180,3183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3180,3183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * VueniSecurityMonitoring - Production-grade security monitoring for financial applications\n * Implements comprehensive security event tracking and alerting\n */\n\nimport { VueniSecureStorage } from './crypto';\nimport { generateSecureId } from './secureRandom';\n\nexport interface SecurityEvent {\n  id: string;\n  type: SecurityEventType;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  description: string;\n  timestamp: string;\n  userId?: string;\n  sessionId?: string;\n  ipAddress?: string;\n  userAgent?: string;\n  metadata?: Record<string, any>;\n  resolved: boolean;\n  resolvedAt?: string;\n  resolvedBy?: string;\n}\n\nexport type SecurityEventType = \n  | 'AUTHENTICATION_FAILURE'\n  | 'ENCRYPTION_ERROR'\n  | 'DATA_INTEGRITY_VIOLATION'\n  | 'UNAUTHORIZED_ACCESS'\n  | 'RATE_LIMIT_EXCEEDED'\n  | 'SUSPICIOUS_ACTIVITY'\n  | 'SESSION_HIJACK_ATTEMPT'\n  | 'XSS_ATTEMPT'\n  | 'CSRF_ATTACK'\n  | 'DATA_BREACH_ATTEMPT'\n  | 'FINANCIAL_CALCULATION_ERROR'\n  | 'STORAGE_CORRUPTION'\n  | 'INVALID_INPUT'\n  | 'SECURITY_POLICY_VIOLATION';\n\nexport interface SecurityMetrics {\n  totalEvents: number;\n  criticalEvents: number;\n  highSeverityEvents: number;\n  unresolvedEvents: number;\n  averageResolutionTime: number;\n  topEventTypes: Array<{ type: SecurityEventType; count: number }>;\n  timeRange: {\n    start: string;\n    end: string;\n  };\n}\n\nexport interface SecurityAlert {\n  id: string;\n  eventId: string;\n  type: 'email' | 'sms' | 'webhook' | 'slack';\n  recipient: string;\n  message: string;\n  sent: boolean;\n  sentAt?: string;\n  error?: string;\n}\n\n/**\n * VueniSecurityMonitoring - Comprehensive security monitoring system\n */\nexport class VueniSecurityMonitoring {\n  private static readonly STORAGE_KEY = 'vueni:security:events:v1';\n  private static readonly ALERTS_KEY = 'vueni:security:alerts:v1';\n  private static readonly MAX_EVENTS = 10000;\n  private static readonly ALERT_THRESHOLD = {\n    critical: 1, // Alert immediately for critical events\n    high: 5,     // Alert after 5 high severity events in 10 minutes\n    medium: 20   // Alert after 20 medium severity events in 1 hour\n  };\n\n  private static events: SecurityEvent[] = [];\n  private static alerts: SecurityAlert[] = [];\n  private static isInitialized = false;\n\n  /**\n   * Initializes the security monitoring system\n   */\n  static initialize(): void {\n    if (this.isInitialized) return;\n\n    try {\n      // Load existing events from secure storage\n      const storedEvents = VueniSecureStorage.getItem(this.STORAGE_KEY);\n      if (Array.isArray(storedEvents)) {\n        this.events = storedEvents;\n      }\n\n      // Load existing alerts\n      const storedAlerts = VueniSecureStorage.getItem(this.ALERTS_KEY);\n      if (Array.isArray(storedAlerts)) {\n        this.alerts = storedAlerts;\n      }\n\n      this.isInitialized = true;\n      this.logEvent('MONITORING_INITIALIZED', 'low', 'Security monitoring system initialized');\n    } catch (error) {\n      console.error('Failed to initialize security monitoring:', error);\n    }\n  }\n\n  /**\n   * Logs a security event\n   */\n  static logEvent(\n    type: SecurityEventType,\n    severity: 'low' | 'medium' | 'high' | 'critical',\n    description: string,\n    metadata?: Record<string, any>\n  ): void {\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n\n    const event: SecurityEvent = {\n      id: this.generateEventId(),\n      type,\n      severity,\n      description,\n      timestamp: new Date().toISOString(),\n      userId: this.getCurrentUserId(),\n      sessionId: this.getCurrentSessionId(),\n      ipAddress: this.getClientIP(),\n      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined,\n      metadata,\n      resolved: false\n    };\n\n    this.events.push(event);\n\n    // Maintain event limit\n    if (this.events.length > this.MAX_EVENTS) {\n      this.events = this.events.slice(-this.MAX_EVENTS);\n    }\n\n    // Persist events\n    this.persistEvents();\n\n    // Check for alert conditions\n    this.checkAlertConditions(event);\n\n    // Log to console in development\n    if (import.meta.env.DEV) {\n      console.warn(`[VueniSecurity] ${severity.toUpperCase()}: ${type}`, event);\n    }\n\n    // Send to external monitoring in production\n    if (import.meta.env.PROD) {\n      this.sendToExternalMonitoring(event);\n    }\n  }\n\n  /**\n   * Gets security events with filtering\n   */\n  static getEvents(filters?: {\n    severity?: 'low' | 'medium' | 'high' | 'critical';\n    type?: SecurityEventType;\n    resolved?: boolean;\n    since?: string;\n    limit?: number;\n  }): SecurityEvent[] {\n    let filteredEvents = [...this.events];\n\n    if (filters) {\n      if (filters.severity) {\n        filteredEvents = filteredEvents.filter(e => e.severity === filters.severity);\n      }\n\n      if (filters.type) {\n        filteredEvents = filteredEvents.filter(e => e.type === filters.type);\n      }\n\n      if (filters.resolved !== undefined) {\n        filteredEvents = filteredEvents.filter(e => e.resolved === filters.resolved);\n      }\n\n      if (filters.since) {\n        const sinceDate = new Date(filters.since);\n        filteredEvents = filteredEvents.filter(e => new Date(e.timestamp) > sinceDate);\n      }\n\n      if (filters.limit) {\n        filteredEvents = filteredEvents.slice(-filters.limit);\n      }\n    }\n\n    return filteredEvents.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n  }\n\n  /**\n   * Resolves a security event\n   */\n  static resolveEvent(eventId: string, resolvedBy: string): boolean {\n    const event = this.events.find(e => e.id === eventId);\n    \n    if (!event) {\n      return false;\n    }\n\n    event.resolved = true;\n    event.resolvedAt = new Date().toISOString();\n    event.resolvedBy = resolvedBy;\n\n    this.persistEvents();\n    \n    this.logEvent('SECURITY_EVENT_RESOLVED', 'low', `Event ${eventId} resolved by ${resolvedBy}`, {\n      originalEventType: event.type,\n      originalSeverity: event.severity\n    });\n\n    return true;\n  }\n\n  /**\n   * Gets security metrics\n   */\n  static getMetrics(timeRange?: { start: string; end: string }): SecurityMetrics {\n    let events = this.events;\n\n    if (timeRange) {\n      const start = new Date(timeRange.start);\n      const end = new Date(timeRange.end);\n      events = events.filter(e => {\n        const eventTime = new Date(e.timestamp);\n        return eventTime >= start && eventTime <= end;\n      });\n    }\n\n    const totalEvents = events.length;\n    const criticalEvents = events.filter(e => e.severity === 'critical').length;\n    const highSeverityEvents = events.filter(e => e.severity === 'high').length;\n    const unresolvedEvents = events.filter(e => !e.resolved).length;\n\n    // Calculate average resolution time\n    const resolvedEvents = events.filter(e => e.resolved && e.resolvedAt);\n    const averageResolutionTime = resolvedEvents.length > 0 \n      ? resolvedEvents.reduce((sum, event) => {\n          const created = new Date(event.timestamp).getTime();\n          const resolved = new Date(event.resolvedAt!).getTime();\n          return sum + (resolved - created);\n        }, 0) / resolvedEvents.length\n      : 0;\n\n    // Get top event types\n    const eventTypeCounts = new Map<SecurityEventType, number>();\n    events.forEach(event => {\n      eventTypeCounts.set(event.type, (eventTypeCounts.get(event.type) || 0) + 1);\n    });\n\n    const topEventTypes = Array.from(eventTypeCounts.entries())\n      .map(([type, count]) => ({ type, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n\n    return {\n      totalEvents,\n      criticalEvents,\n      highSeverityEvents,\n      unresolvedEvents,\n      averageResolutionTime,\n      topEventTypes,\n      timeRange: timeRange || {\n        start: events.length > 0 ? events[0].timestamp : new Date().toISOString(),\n        end: new Date().toISOString()\n      }\n    };\n  }\n\n  /**\n   * Checks if alerts should be triggered\n   */\n  private static checkAlertConditions(event: SecurityEvent): void {\n    const now = Date.now();\n\n    // Critical events trigger immediate alerts\n    if (event.severity === 'critical') {\n      this.triggerAlert(event, 'Critical security event detected');\n      return;\n    }\n\n    // High severity events - check threshold\n    if (event.severity === 'high') {\n      const recentHighEvents = this.events.filter(e => \n        e.severity === 'high' && \n        (now - new Date(e.timestamp).getTime()) < 600000 // 10 minutes\n      );\n\n      if (recentHighEvents.length >= this.ALERT_THRESHOLD.high) {\n        this.triggerAlert(event, `${recentHighEvents.length} high severity events in 10 minutes`);\n      }\n    }\n\n    // Medium severity events - check threshold\n    if (event.severity === 'medium') {\n      const recentMediumEvents = this.events.filter(e => \n        e.severity === 'medium' && \n        (now - new Date(e.timestamp).getTime()) < 3600000 // 1 hour\n      );\n\n      if (recentMediumEvents.length >= this.ALERT_THRESHOLD.medium) {\n        this.triggerAlert(event, `${recentMediumEvents.length} medium severity events in 1 hour`);\n      }\n    }\n  }\n\n  /**\n   * Triggers a security alert\n   */\n  private static triggerAlert(event: SecurityEvent, message: string): void {\n    const alert: SecurityAlert = {\n      id: this.generateAlertId(),\n      eventId: event.id,\n      type: 'webhook', // Default to webhook, can be configured\n      recipient: 'security-team@vueni.com',\n      message: `${message}: ${event.description}`,\n      sent: false\n    };\n\n    this.alerts.push(alert);\n    this.persistAlerts();\n\n    // Send alert in production\n    if (import.meta.env.PROD) {\n      this.sendAlert(alert);\n    } else {\n      console.warn('[VueniSecurity Alert]', alert);\n    }\n  }\n\n  /**\n   * Sends an alert to external systems\n   */\n  private static async sendAlert(alert: SecurityAlert): Promise<void> {\n    try {\n      // Placeholder for actual alert sending logic\n      // This would integrate with services like:\n      // - Slack webhooks\n      // - Email providers (SendGrid, etc.)\n      // - SMS providers (Twilio, etc.)\n      // - PagerDuty\n      // - Custom webhooks\n\n      alert.sent = true;\n      alert.sentAt = new Date().toISOString();\n      this.persistAlerts();\n    } catch (error) {\n      alert.error = error.message;\n      this.persistAlerts();\n      console.error('Failed to send security alert:', error);\n    }\n  }\n\n  /**\n   * Persists events to secure storage\n   */\n  private static persistEvents(): void {\n    try {\n      VueniSecureStorage.setItem(this.STORAGE_KEY, this.events, { sensitive: true });\n    } catch (error) {\n      console.error('Failed to persist security events:', error);\n    }\n  }\n\n  /**\n   * Persists alerts to secure storage\n   */\n  private static persistAlerts(): void {\n    try {\n      VueniSecureStorage.setItem(this.ALERTS_KEY, this.alerts, { sensitive: true });\n    } catch (error) {\n      console.error('Failed to persist security alerts:', error);\n    }\n  }\n\n  /**\n   * Generates a unique event ID\n   */\n  private static generateEventId(): string {\n    return generateSecureId('evt');\n  }\n\n  /**\n   * Generates a unique alert ID\n   */\n  private static generateAlertId(): string {\n    return generateSecureId('alt');\n  }\n\n  /**\n   * Gets current user ID (placeholder)\n   */\n  private static getCurrentUserId(): string | undefined {\n    // This would integrate with your authentication system\n    return 'demo-user';\n  }\n\n  /**\n   * Gets current session ID (placeholder)\n   */\n  private static getCurrentSessionId(): string | undefined {\n    // This would integrate with your session management\n    return undefined;\n  }\n\n  /**\n   * Gets client IP address (placeholder)\n   */\n  private static getClientIP(): string | undefined {\n    // This would be set by your server or proxy\n    return undefined;\n  }\n\n  /**\n   * Sends event to external monitoring service\n   */\n  private static sendToExternalMonitoring(event: SecurityEvent): void {\n    // Placeholder for external monitoring integration\n    // This would send to services like:\n    // - DataDog\n    // - Splunk\n    // - Elasticsearch\n    // - Sentry\n    // - Custom logging endpoints\n  }\n\n  /**\n   * Clears old events (maintenance)\n   */\n  static clearOldEvents(olderThanDays: number = 90): number {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - olderThanDays);\n\n    const initialCount = this.events.length;\n    this.events = this.events.filter(event => \n      new Date(event.timestamp) > cutoffDate\n    );\n\n    const removedCount = initialCount - this.events.length;\n    \n    if (removedCount > 0) {\n      this.persistEvents();\n      this.logEvent('EVENTS_CLEANUP', 'low', `Removed ${removedCount} old security events`);\n    }\n\n    return removedCount;\n  }\n\n  /**\n   * Exports security events for compliance reporting\n   */\n  static exportEvents(format: 'json' | 'csv' = 'json'): string {\n    const events = this.getEvents();\n\n    if (format === 'csv') {\n      const headers = ['ID', 'Type', 'Severity', 'Description', 'Timestamp', 'User ID', 'Resolved'];\n      const rows = events.map(event => [\n        event.id,\n        event.type,\n        event.severity,\n        event.description.replace(/,/g, ';'), // Escape commas\n        event.timestamp,\n        event.userId || '',\n        event.resolved ? 'Yes' : 'No'\n      ]);\n\n      return [headers, ...rows].map(row => row.join(',')).join('\\n');\n    }\n\n    return JSON.stringify(events, null, 2);\n  }\n\n  /**\n   * Gets security dashboard data\n   */\n  static getDashboardData(): {\n    recentEvents: SecurityEvent[];\n    metrics: SecurityMetrics;\n    alerts: SecurityAlert[];\n  } {\n    const recentEvents = this.getEvents({ limit: 50 });\n    const metrics = this.getMetrics();\n    const recentAlerts = this.alerts.slice(-20);\n\n    return {\n      recentEvents,\n      metrics,\n      alerts: recentAlerts\n    };\n  }\n}\n\n// Export singleton instance\nexport const securityMonitoring = VueniSecurityMonitoring;\n\n// Initialize monitoring when module loads\nif (typeof window !== 'undefined') {\n  VueniSecurityMonitoring.initialize();\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/utils/optimizedHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/utils/performanceOptimizer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2138,2141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2138,2141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4299,4302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4299,4302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":217,"column":6,"nodeType":"Identifier","endLine":217,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has missing dependencies: 'effect' and 'highPriority'. Either include them or remove the dependency array. If 'effect' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":217,"column":6,"nodeType":"Identifier","endLine":217,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [effect, highPriority]","fix":{"range":[5666,5670],"text":"[effect, highPriority]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useMemo has a missing dependency: 'deps'. Either include it or remove the dependency array.","line":284,"column":6,"nodeType":"ArrayExpression","endLine":284,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [expiry, deps, factory]","fix":{"range":[7410,7436],"text":"[expiry, deps, factory]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useMemo has a spread element in its dependency array. This means we can't statically verify whether you've passed the correct dependencies.","line":284,"column":24,"nodeType":"SpreadElement","endLine":284,"endColumn":31}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Performance Optimization Utilities for Vueni\nimport React from 'react';\n\ninterface PerformanceMetrics {\n  fps: number;\n  memoryUsage: number;\n  isLowEndDevice: boolean;\n  isMobile: boolean;\n  supportsWebGL: boolean;\n  prefersReducedMotion: boolean;\n}\n\nclass PerformanceMonitor {\n  private static instance: PerformanceMonitor;\n  private metrics: PerformanceMetrics;\n  private frameCount = 0;\n  private lastTime = performance.now();\n  private animationId: number | null = null;\n  private callbacks: Array<(metrics: PerformanceMetrics) => void> = [];\n\n  private constructor() {\n    this.metrics = this.detectCapabilities();\n    this.startMonitoring();\n  }\n\n  static getInstance(): PerformanceMonitor {\n    if (!PerformanceMonitor.instance) {\n      PerformanceMonitor.instance = new PerformanceMonitor();\n    }\n    return PerformanceMonitor.instance;\n  }\n\n  private detectCapabilities(): PerformanceMetrics {\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n      navigator.userAgent\n    );\n    \n    const isLowEndDevice = navigator.hardwareConcurrency \n      ? navigator.hardwareConcurrency < 4 \n      : isMobile;\n\n    const supportsWebGL = (() => {\n      try {\n        const canvas = document.createElement('canvas');\n        return !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n      } catch {\n        return false;\n      }\n    })();\n\n    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n    return {\n      fps: 60,\n      memoryUsage: 0,\n      isLowEndDevice,\n      isMobile,\n      supportsWebGL,\n      prefersReducedMotion\n    };\n  }\n\n  private startMonitoring() {\n    const monitor = () => {\n      this.frameCount++;\n      const currentTime = performance.now();\n      \n      if (currentTime - this.lastTime >= 1000) {\n        this.metrics.fps = Math.round((this.frameCount * 1000) / (currentTime - this.lastTime));\n        this.frameCount = 0;\n        this.lastTime = currentTime;\n\n        // Update memory usage if available\n        if ('memory' in performance) {\n          this.metrics.memoryUsage = (performance as any).memory.usedJSHeapSize / 1048576; // MB\n        }\n\n        // Notify callbacks\n        this.callbacks.forEach(callback => callback(this.metrics));\n      }\n\n      this.animationId = requestAnimationFrame(monitor);\n    };\n\n    this.animationId = requestAnimationFrame(monitor);\n  }\n\n  getMetrics(): PerformanceMetrics {\n    return { ...this.metrics };\n  }\n\n  subscribe(callback: (metrics: PerformanceMetrics) => void) {\n    this.callbacks.push(callback);\n    return () => {\n      this.callbacks = this.callbacks.filter(cb => cb !== callback);\n    };\n  }\n\n  destroy() {\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n    }\n    this.callbacks = [];\n  }\n}\n\n// Performance-aware settings\nexport const getOptimizedSettings = (metrics: PerformanceMetrics) => {\n  const settings = {\n    liquidGlass: {\n      enabled: true,\n      intensity: 0.6,\n      distortion: 0.4,\n      animated: true,\n      interactive: true\n    },\n    animations: {\n      enabled: true,\n      duration: 300,\n      stagger: 100\n    },\n    rendering: {\n      lazyLoad: false,\n      virtualization: false,\n      batchUpdates: false\n    }\n  };\n\n  // Performance-based optimizations\n  if (metrics.fps < 30) {\n    settings.liquidGlass.animated = false;\n    settings.liquidGlass.intensity *= 0.5;\n    settings.animations.duration *= 0.5;\n    settings.rendering.batchUpdates = true;\n  }\n\n  if (metrics.isLowEndDevice) {\n    settings.liquidGlass.intensity *= 0.6;\n    settings.liquidGlass.distortion *= 0.6;\n    settings.liquidGlass.interactive = false;\n    settings.rendering.lazyLoad = true;\n  }\n\n  if (metrics.isMobile) {\n    settings.liquidGlass.intensity *= 0.7;\n    settings.liquidGlass.animated = false;\n    settings.animations.duration *= 0.7;\n    settings.rendering.lazyLoad = true;\n  }\n\n  if (!metrics.supportsWebGL) {\n    settings.liquidGlass.enabled = false;\n  }\n\n  if (metrics.prefersReducedMotion) {\n    settings.liquidGlass.animated = false;\n    settings.animations.enabled = false;\n  }\n\n  return settings;\n};\n\n// Lazy loading utility\nexport const createLazyComponent = (\n  importFn: () => Promise<{ default: React.ComponentType<any> }>\n) => {\n  return React.lazy(() => {\n    const metrics = PerformanceMonitor.getInstance().getMetrics();\n    \n    if (metrics.isLowEndDevice) {\n      // Delay loading on low-end devices\n      return new Promise(resolve => {\n        setTimeout(() => resolve(importFn()), 100);\n      });\n    } else {\n      return importFn();\n    }\n  });\n};\n\n// Debounced state updates for performance\nexport const useDebouncedState = <T>(\n  initialValue: T,\n  delay: number = 300\n): [T, (value: T) => void] => {\n  const [state, setState] = React.useState(initialValue);\n  const [debouncedState, setDebouncedState] = React.useState(initialValue);\n  \n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedState(state);\n    }, delay);\n    \n    return () => clearTimeout(timer);\n  }, [state, delay]);\n  \n  return [debouncedState, setState];\n};\n\n// Performance-aware useEffect\nexport const usePerformanceAwareEffect = (\n  effect: React.EffectCallback,\n  deps?: React.DependencyList,\n  highPriority: boolean = false\n) => {\n  React.useEffect(() => {\n    const metrics = PerformanceMonitor.getInstance().getMetrics();\n    \n    if (!highPriority && metrics.fps < 30) {\n      // Defer non-critical effects when performance is poor\n      const timer = setTimeout(effect, 100);\n      return () => clearTimeout(timer);\n    } else {\n      return effect();\n    }\n  }, deps);\n};\n\n// Batch state updates for better performance\nexport const useBatchedUpdates = () => {\n  const [updates, setUpdates] = React.useState<Array<() => void>>([]);\n  \n  const batchUpdate = React.useCallback((updateFn: () => void) => {\n    setUpdates(prev => [...prev, updateFn]);\n  }, []);\n  \n  React.useEffect(() => {\n    if (updates.length > 0) {\n      const timer = setTimeout(() => {\n        React.startTransition(() => {\n          updates.forEach(update => update());\n          setUpdates([]);\n        });\n      }, 16); // Next frame\n      \n      return () => clearTimeout(timer);\n    }\n  }, [updates]);\n  \n  return batchUpdate;\n};\n\n// Hook for performance monitoring\nexport const usePerformanceMonitor = () => {\n  const [metrics, setMetrics] = React.useState<PerformanceMetrics>(\n    PerformanceMonitor.getInstance().getMetrics()\n  );\n  \n  React.useEffect(() => {\n    const monitor = PerformanceMonitor.getInstance();\n    const unsubscribe = monitor.subscribe(setMetrics);\n    \n    return unsubscribe;\n  }, []);\n  \n  return metrics;\n};\n\n// Memory-efficient memoization\nexport const useOptimizedMemo = <T>(\n  factory: () => T,\n  deps: React.DependencyList,\n  expiry: number = 5000 // 5 seconds\n) => {\n  const memoRef = React.useRef<{ value: T; timestamp: number; deps: React.DependencyList } | null>(null);\n  \n  return React.useMemo(() => {\n    const now = Date.now();\n    \n    if (\n      !memoRef.current ||\n      now - memoRef.current.timestamp > expiry ||\n      !deps.every((dep, index) => dep === memoRef.current!.deps[index])\n    ) {\n      memoRef.current = {\n        value: factory(),\n        timestamp: now,\n        deps: [...deps] // Create a copy to avoid mutations\n      };\n    }\n    \n    return memoRef.current.value;\n  }, [factory, expiry, ...deps]); // Add all missing dependencies\n};\n\nexport default PerformanceMonitor; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/utils/sanitize.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/utils/secureRandom.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/utils/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/utils/session.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/utils/sessionManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/utils/transactionScoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/liquid-spark-finance/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
