
> vite_react_shadcn_ts@0.0.0 lint
> eslint . --format=json

[{"filePath":"/Users/damon/liquid-spark-finance/accessibility-audit.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/scripts/extract-critical-css.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/scripts/generate-playwright-report.js","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","message":"Definition for rule '@typescript-eslint/no-unsafe-assignment' was not found.","line":10,"column":1,"endLine":10,"endColumn":68,"severity":2,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\n\nconst resultsPath = path.resolve('test-results/test-results.json');\nif (!fs.existsSync(resultsPath)) {\n  console.error('❌ No Playwright JSON results found at', resultsPath);\n  process.exit(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nconst reportJson = JSON.parse(fs.readFileSync(resultsPath, 'utf-8'));\n\n// Collect failed tests across projects.\nconst failures = [];\nfor (const suite of reportJson.suites ?? []) {\n  traverseSuite(suite);\n}\n\nfunction traverseSuite(suite) {\n  for (const spec of suite.specs ?? []) {\n    for (const test of spec.tests ?? []) {\n      for (const result of test.results ?? []) {\n        if (result.status !== 'passed') {\n          failures.push({\n            project: test.projectName,\n            title: spec.title,\n            error: result.errors?.map((e) => e.message).join('\\n') || 'Unknown error',\n            screenshot: findScreenshot(result.attachments || []),\n          });\n        }\n      }\n    }\n  }\n  for (const child of suite.suites ?? []) traverseSuite(child);\n}\n\nfunction findScreenshot(attachments) {\n  const shot = attachments.find((a) => a.name === 'screenshot' || a.contentType === 'image/png');\n  return shot?.path || '';\n}\n\n// Build markdown summary.\nconst lines = [];\nlines.push('## 🚨 Playwright Audit Summary');\nlines.push('');\nif (failures.length === 0) {\n  lines.push('🎉 **All tests passed without errors across all viewports!**');\n} else {\n  lines.push('| Viewport | Test | Error | Screenshot |');\n  lines.push('|----------|------|-------|------------|');\n  for (const f of failures) {\n    const shot = f.screenshot ? `![](${f.screenshot})` : '—';\n    lines.push(`| ${f.project} | ${f.title} | ${escapePipe(f.error)} | ${shot} |`);\n  }\n}\nlines.push('');\nlines.push(`_Generated: ${new Date().toUTCString()}_`);\n\nfunction escapePipe(text) {\n  return text.replace(/\\|/g, '\\\\|').replace(/\\n/g, ' ');\n}\n\nconst markdown = lines.join('\\n');\nconst outPath = '/tmp/playwright-audit.md';\nfs.writeFileSync(outPath, markdown);\nconsole.log(`📄 Audit report written to ${outPath}`);\nconsole.log('\\n' + markdown + '\\n'); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/scripts/post-build.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/scripts/reproduce-analytics-crash.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/App.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/App.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Toaster } from \"@/shared/ui/toaster\";\nimport { Toaster as Sonner } from \"@/shared/ui/sonner\";\nimport { TooltipProvider } from \"@/shared/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { lazy, Suspense } from 'react';\nimport { UniversalCard } from '@/shared/ui/UniversalCard';\nimport { LiquidGlassProvider } from '@/shared/hooks/useLiquidGlass';\nimport { FeatureFlagProvider } from '@/components/shared/VueniFeatureFlags';\nimport GlobalGradientBackground from '@/shared/ui/GlobalGradientBackground';\nimport { BiometricsProvider } from '@/providers/BiometricsProvider';\nimport { VueniThemeProvider } from '@/theme/ThemeProvider';\nimport '@/app/styles/accessibility.css';\n\nconst queryClient = new QueryClient();\n\n// Vite-Compatible Lazy Loading (NO Webpack chunks) - Fixed for Vercel\nconst Index = lazy(() => import('./pages/Index'));\nconst Profile = lazy(() => import('./pages/Profile'));\nconst NotFound = lazy(() => import('./pages/NotFound'));\n\n// Financial Components\nconst CreditScorePage = lazy(() => import('@/features/credit/components/CreditScorePage'));\nconst SavingsGoals = lazy(() => import('@/features/savings/components/SavingsGoals'));\nconst BudgetPlannerPage = lazy(() => import('@/features/budget/components/BudgetPlannerPage'));\nconst InvestmentTrackerPage = lazy(() => import('@/features/investments/components/InvestmentTrackerPage'));\nconst BudgetReportsPage = lazy(() => import('@/features/budget/components/BudgetReportsPage'));\n\n// Tools & Utilities\nconst TransactionDemo = lazy(() => import('./pages/TransactionDemo'));\nconst CalculatorsPage = lazy(() => import('./pages/CalculatorsPage'));\n\n// Insights (Fixed for Vercel)\nconst InsightsPage = lazy(() => import('./pages/InsightsPage'));\n\n// Enhanced Loading Fallback Component\nconst OptimizedLoadingFallback = () => (\n  <div className=\"min-h-screen bg-black text-white flex items-center justify-center\">\n    <UniversalCard variant=\"glass\" className=\"p-8\">\n      <div className=\"text-center space-y-4\">\n        <div className=\"w-12 h-12 border-4 border-blue-500/30 border-t-blue-500 rounded-full animate-spin mx-auto\"></div>\n        <div className=\"space-y-2\">\n          <div className=\"text-lg font-semibold\">Loading Vueni</div>\n          <div className=\"text-sm text-white/60\">Optimized components loading...</div>\n        </div>\n      </div>\n    </UniversalCard>\n  </div>\n);\n\nconst App = () => (\n  <VueniThemeProvider>\n    <QueryClientProvider client={queryClient}>\n      <FeatureFlagProvider preset=\"production\">\n        <LiquidGlassProvider>\n          <BiometricsProvider autoStart={true} debugMode={import.meta.env.DEV}>\n            <TooltipProvider>\n              <GlobalGradientBackground />\n              <Toaster />\n              <Sonner />\n              <BrowserRouter>\n                <Suspense fallback={<OptimizedLoadingFallback />}>\n                  <Routes>\n                    <Route path=\"/\" element={<Index />} />\n                    <Route path=\"/profile\" element={<Profile />} />\n                    <Route path=\"/credit-score\" element={<CreditScorePage />} />\n                    <Route path=\"/savings\" element={<SavingsGoals />} />\n                    <Route path=\"/transactions\" element={<TransactionDemo />} />\n                    <Route path=\"/budget-planner\" element={<BudgetPlannerPage />} />\n                    <Route path=\"/goal-setting\" element={<SavingsGoals />} />\n                    <Route path=\"/investment-tracker\" element={<InvestmentTrackerPage />} />\n                    <Route path=\"/calculators\" element={<CalculatorsPage />} />\n                    <Route path=\"/calculators/:id\" element={<CalculatorsPage />} />\n                    <Route path=\"/reports\" element={<BudgetReportsPage />} />\n                    <Route path=\"/insights\" element={<InsightsPage />} />\n                    {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL \"*\" ROUTE */}\n                    <Route path=\"*\" element={<NotFound />} />\n                  </Routes>\n                </Suspense>\n              </BrowserRouter>\n            </TooltipProvider>\n          </BiometricsProvider>\n        </LiquidGlassProvider>\n      </FeatureFlagProvider>\n    </QueryClientProvider>\n  </VueniThemeProvider>\n);\n\nexport default App;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/__tests__/phase3-performance.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/__tests__/phase3-performance.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { BrowserRouter } from 'react-router-dom';\nimport { UnifiedInsightsPage } from '@/features/insights/components/UnifiedInsightsPage';\nimport { OptimizedTransactionList } from '@/features/transactions/components/OptimizedTransactionList';\nimport { CompoundInterestCalculator } from '@/features/calculators/components/CompoundInterestCalculator';\nimport AccountCard from '@/components/AccountCard';\nimport BalanceCard from '@/components/BalanceCard';\nimport TransactionItem from '@/components/TransactionItem';\nimport { mockData } from '@/services/mockData';\n\n// Phase 3 Performance Testing Suite\ndescribe('Phase 3 Performance Optimizations', () => {\n  let queryClient: QueryClient;\n\n  beforeEach(() => {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    });\n  });\n\n  const renderWithProviders = (component: React.ReactElement) => {\n    return render(\n      <BrowserRouter>\n        <QueryClientProvider client={queryClient}>\n          {component}\n        </QueryClientProvider>\n      </BrowserRouter>\n    );\n  };\n\n  describe('React.memo Optimizations', () => {\n    it('should render AccountCard with memo optimization', () => {\n      const account = mockData.accounts[0];\n      const { rerender } = renderWithProviders(\n        <AccountCard account={account} />\n      );\n\n      expect(screen.getByText(account.type)).toBeInTheDocument();\n\n      // Props don't change, component should not re-render\n      rerender(\n        <BrowserRouter>\n          <QueryClientProvider client={queryClient}>\n            <AccountCard account={account} />\n          </QueryClientProvider>\n        </BrowserRouter>\n      );\n\n      expect(screen.getByText(account.type)).toBeInTheDocument();\n    });\n\n    it('should render BalanceCard with memo optimization', () => {\n      const props = {\n        accountType: 'Checking',\n        nickname: 'Main Account',\n        balance: 5000,\n        availableBalance: 4800,\n        currency: 'USD',\n        trend: 'up' as const,\n        trendPercentage: 12.5\n      };\n\n      renderWithProviders(<BalanceCard {...props} />);\n      expect(screen.getByText('Checking')).toBeInTheDocument();\n    });\n\n    it('should render TransactionItem with memo optimization', () => {\n      const transaction = {\n        id: '1',\n        merchant: 'Test Store',\n        category: { name: 'Shopping', color: '#ff0000' },\n        amount: -50.00,\n        date: '2024-01-01',\n        status: 'completed' as const\n      };\n\n      renderWithProviders(\n        <TransactionItem transaction={transaction} currency=\"USD\" />\n      );\n      expect(screen.getByText('Test Store')).toBeInTheDocument();\n    });\n  });\n\n  describe('useMemo and useCallback Optimizations', () => {\n    it('should efficiently render large transaction lists', async () => {\n      const startTime = performance.now();\n      \n      const transformedTransactions = mockData.transactions.map(t => ({\n        id: t.id,\n        date: t.date,\n        description: t.merchant,\n        amount: Math.abs(t.amount),\n        category: {\n          name: t.category.name.toLowerCase(),\n          color: t.category.color || '#6366f1'\n        },\n        type: t.amount < 0 ? 'expense' : 'income' as const,\n        merchant: t.merchant,\n        status: 'completed' as const,\n        scores: {\n          health: 85,\n          eco: 75,\n          financial: 90,\n        }\n      }));\n\n      renderWithProviders(\n        <OptimizedTransactionList \n          transactions={transformedTransactions}\n          variant=\"apple\"\n          currency=\"USD\"\n          features={{\n            showScores: true,\n            showCategories: true,\n            searchable: true,\n            filterable: true,\n            groupByDate: true,\n            sortable: true\n          }}\n        />\n      );\n\n      await waitFor(() => {\n        expect(screen.getByRole('table')).toBeInTheDocument();\n      });\n\n      const renderTime = performance.now() - startTime;\n      \n      // Should render in less than 200ms (optimized target)\n      expect(renderTime).toBeLessThan(200);\n    });\n\n    it('should efficiently render UnifiedInsightsPage', async () => {\n      const startTime = performance.now();\n\n      const config = {\n        variant: 'comprehensive' as const,\n        features: {\n          showScores: true,\n          showTrends: true,\n          showCategories: true,\n          enableInteractions: true,\n          showComparisons: true\n        },\n        layout: {\n          columns: 3,\n          spacing: 'normal' as const,\n          responsive: true\n        },\n        dataSource: {\n          transactions: mockData.transactions.slice(0, 10), // Limit for testing\n          accounts: mockData.accounts,\n          timeframe: '30d' as const\n        }\n      };\n\n      renderWithProviders(<UnifiedInsightsPage config={config} />);\n\n      await waitFor(() => {\n        expect(screen.getByRole('main')).toBeInTheDocument();\n      }, { timeout: 3000 });\n\n      const renderTime = performance.now() - startTime;\n      \n      // Should render insights page efficiently\n      expect(renderTime).toBeLessThan(500);\n    });\n  });\n\n  describe('Bundle Size Optimization', () => {\n    it('should have optimized chunk sizes for manual chunks', () => {\n      // This test verifies our vite.config.ts manual chunks are properly configured\n      const manualChunks = [\n        'vendor',\n        'ui', \n        'charts',\n        'crypto',\n        'routing',\n        'insights',\n        'calculators',\n        'universal-card',\n        'performance',\n        'optimized-transactions'\n      ];\n\n      expect(manualChunks).toHaveLength(10);\n      expect(manualChunks).toContain('insights');\n      expect(manualChunks).toContain('calculators');\n      expect(manualChunks).toContain('universal-card');\n    });\n  });\n\n  describe('Memory Usage Optimization', () => {\n    it('should not cause memory leaks with memoized components', () => {\n      interface PerformanceMemory extends Performance {\n        memory?: {\n          usedJSHeapSize: number;\n        };\n      }\n      \n      const initialMemory = (performance as PerformanceMemory).memory?.usedJSHeapSize || 0;\n      \n      // Render and unmount components multiple times\n      for (let i = 0; i < 10; i++) {\n        const { unmount } = renderWithProviders(\n          <AccountCard account={mockData.accounts[0]} />\n        );\n        unmount();\n      }\n\n      const finalMemory = (performance as PerformanceMemory).memory?.usedJSHeapSize || 0;\n      const memoryIncrease = finalMemory - initialMemory;\n      \n      // Memory increase should be minimal (less than 5MB)\n      expect(memoryIncrease).toBeLessThan(5 * 1024 * 1024);\n    });\n  });\n\n  describe('Component Display Names', () => {\n    it('should have proper display names for debugging', () => {\n      expect(AccountCard.displayName).toBe('AccountCard');\n      expect(BalanceCard.displayName).toBe('BalanceCard');\n      expect(TransactionItem.displayName).toBe('TransactionItem');\n    });\n  });\n\n  describe('Lazy Loading Performance', () => {\n    it('should handle lazy loaded components efficiently', async () => {\n      // Test is implicit - if lazy loading works, the components render\n      // This is tested through our App.tsx lazy loading setup\n      \n      const config = {\n        variant: 'simple' as const,\n        features: { showScores: true },\n        layout: { columns: 1, spacing: 'tight' as const, responsive: true },\n        dataSource: {\n          transactions: mockData.transactions.slice(0, 5),\n          accounts: mockData.accounts.slice(0, 2),\n          timeframe: '7d' as const\n        }\n      };\n\n      renderWithProviders(<UnifiedInsightsPage config={config} />);\n      \n      await waitFor(() => {\n        expect(screen.getByRole('main')).toBeInTheDocument();\n      });\n      \n      // If we get here, lazy loading worked correctly\n      expect(true).toBe(true);\n    });\n  });\n});\n\n// Performance Benchmark Helper\nexport const measureComponentPerformance = async (\n  component: React.ReactElement,\n  iterations: number = 100\n) => {\n  const queryClient = new QueryClient();\n  const times: number[] = [];\n\n  for (let i = 0; i < iterations; i++) {\n    const startTime = performance.now();\n    \n    const { unmount } = render(\n      <BrowserRouter>\n        <QueryClientProvider client={queryClient}>\n          {component}\n        </QueryClientProvider>\n      </BrowserRouter>\n    );\n    \n    const endTime = performance.now();\n    times.push(endTime - startTime);\n    \n    unmount();\n  }\n\n  return {\n    avg: times.reduce((sum, time) => sum + time, 0) / times.length,\n    min: Math.min(...times),\n    max: Math.max(...times),\n    p95: times.sort((a, b) => a - b)[Math.floor(times.length * 0.95)]\n  };\n};\n\ninterface PerformanceMemory extends Performance {\n  memory?: {\n    usedJSHeapSize: number;\n  };\n}\n\nconst memoryBefore = (performance as PerformanceMemory).memory?.usedJSHeapSize || 0;\n\n// Simulate component mounting/unmounting cycles\nfor (let i = 0; i < 100; i++) {\n  const { unmount } = render(<MemoryTestComponent />);\n  unmount();\n}\n\nconst memoryAfter = (performance as PerformanceMemory).memory?.usedJSHeapSize || 0;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/AccountCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/AccountCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback } from 'react';\nimport { ChevronDown, ChevronUp } from 'lucide-react';\nimport { Account } from '@/types/shared';\nimport { UniversalCard } from '@/shared/ui/UniversalCard';\n\ninterface AccountCardProps {\n  account: Account;\n  recentTransactions?: Array<{\n    id: string;\n    merchant: string;\n    amount: number;\n    date: string;\n  }>;\n}\n\nconst AccountCard = React.memo<AccountCardProps>(({ account, recentTransactions = [] }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Memoized currency formatter to prevent recreation\n  const formatCurrency = useMemo(() => {\n    const formatter = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: account.currency,\n      minimumFractionDigits: 2\n    });\n    return (amount: number) => formatter.format(amount);\n  }, [account.currency]);\n\n  return (\n    <UniversalCard\n      variant=\"glass\"\n      className=\"card w-full min-w-[18rem] sm:max-w-[20rem] lg:max-w-[22rem] xl:max-w-[24rem] stagger-item cursor-pointer\"\n      interactive\n      hover={{ scale: true, glow: true }}\n      onClick={useCallback(() => setIsExpanded(prev => !prev), [])}\n    >\n      <div className=\"flex justify-between items-start mb-3\">\n        <div>\n          <h3 className=\"text-white font-semibold text-lg\">{account.type}</h3>\n          <p className=\"text-white/50 text-sm\">{account.nickname}</p>\n        </div>\n        <div className=\"text-right\">\n          <p className=\"text-white font-bold text-lg\">\n            {formatCurrency(account.balance)}\n          </p>\n          <p className=\"text-white/50 text-xs\">\n            Available: {formatCurrency(account.availableBalance)}\n          </p>\n        </div>\n      </div>\n\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex space-x-2\">\n          <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n          <span className=\"text-white/70 text-xs\">Active</span>\n        </div>\n        {isExpanded ? (\n          <ChevronUp className=\"w-4 h-4 text-white/50\" />\n        ) : (\n          <ChevronDown className=\"w-4 h-4 text-white/50\" />\n        )}\n      </div>\n\n      {/* Expanded Content */}\n      <div className={`transition-all duration-300 overflow-hidden ${\n        isExpanded ? 'max-h-96 mt-4' : 'max-h-0'\n      }`}>\n        <div className=\"border-t border-white/10 pt-4\">\n          <h4 className=\"text-white/70 text-sm font-medium mb-3\">Recent Activity</h4>\n          <div className=\"space-y-2\">\n            {recentTransactions.slice(0, 3).map((transaction) => (\n              <div key={transaction.id} className=\"flex justify-between items-center py-2\">\n                <span className=\"text-white/70 text-sm\">{transaction.merchant}</span>\n                <span className={`text-sm font-medium ${\n                  transaction.amount > 0 ? 'text-green-400' : 'text-white'\n                }`}>\n                  {formatCurrency(transaction.amount)}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </UniversalCard>\n  );\n});\n\nAccountCard.displayName = 'AccountCard';\n\nexport default AccountCard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/AccountDeck/AccountRow.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/AccountDeck/AccountRow.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// CC: AccountRow component for Smart Accounts Deck (R2 requirement)\nimport React from 'react';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, TrendingDown } from 'lucide-react';\nimport { cn } from '@/shared/lib/utils';\nimport { formatCurrency } from '@/shared/utils/formatters';\n\nexport interface AccountRowData {\n  id: string;\n  name: string;\n  institution: {\n    name: string;\n    logo?: string;\n    color: string;\n  };\n  balance: number;\n  currency: string;\n  sparklineData: number[];\n  deltaPercentage: number;\n  accountType: string;\n  last4: string;\n}\n\ninterface AccountRowProps {\n  account: AccountRowData;\n  index: number;\n  style?: React.CSSProperties;\n}\n\n// CC: SVG Sparkline component with proper WCAG contrast\nconst Sparkline: React.FC<{ data: number[]; trend: 'up' | 'down' }> = ({ data, trend }) => {\n  if (!data || data.length < 2) return null;\n\n  const min = Math.min(...data);\n  const max = Math.max(...data);\n  const range = max - min || 1;\n  \n  // CC: Generate SVG path for sparkline\n  const points = data.map((value, index) => {\n    const x = (index / (data.length - 1)) * 48; // 48px width\n    const y = 16 - ((value - min) / range) * 16; // 16px height, inverted y-axis\n    return `${x},${y}`;\n  }).join(' ');\n\n  return (\n    <svg \n      width=\"48\" \n      height=\"16\" \n      className=\"flex-shrink-0\"\n      role=\"img\"\n      aria-label={`Trend sparkline showing ${trend} movement`}\n    >\n      <polyline\n        points={points}\n        fill=\"none\"\n        stroke={trend === 'up' ? '#10B981' : '#EF4444'} // WCAG AA contrast colors\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n};\n\nexport const AccountRow: React.FC<AccountRowProps> = ({ account, index, style }) => {\n  // CC: Calculate trend direction for sparkline and delta color\n  const trend = account.deltaPercentage >= 0 ? 'up' : 'down';\n  const deltaColor = trend === 'up' ? 'text-green-500' : 'text-red-500';\n  const deltaIcon = trend === 'up' ? TrendingUp : TrendingDown;\n  const DeltaIcon = deltaIcon;\n\n  return (\n    <motion.div\n      style={style}\n      initial={{ opacity: 0, x: -20 }}\n      animate={{ opacity: 1, x: 0 }}\n      transition={{ duration: 0.3, delay: index * 0.02 }}\n      className={cn(\n        // CC: R2 requirement - 56px height row\n        \"h-14 px-4 flex items-center gap-3\",\n        // CC: R3 requirement - 12px radius, 1px surface.borderLight, Liquid-Glass theme\n        \"rounded-xl border border-white/[0.08] bg-white/[0.02] backdrop-blur-md\",\n        \"hover:bg-white/[0.05] hover:border-white/[0.12] transition-all duration-200\",\n        \"cursor-pointer group\"\n      )}\n      whileHover={{ scale: 1.02 }}\n      whileTap={{ scale: 0.98 }}\n    >\n      {/* CC: Left logo */}\n      <div className=\"flex-shrink-0\">\n        {account.institution.logo ? (\n          <img \n            src={account.institution.logo} \n            alt={account.institution.name}\n            className=\"w-8 h-8 rounded object-cover\"\n            onError={(e) => {\n              // CC: Fallback to colored circle if logo fails to load\n              e.currentTarget.style.display = 'none';\n              const fallback = e.currentTarget.nextElementSibling as HTMLElement;\n              if (fallback) fallback.style.display = 'flex';\n            }}\n          />\n        ) : null}\n        <div \n          className=\"w-8 h-8 rounded flex items-center justify-center text-white text-xs font-bold\"\n          style={{ \n            backgroundColor: account.institution.color,\n            display: account.institution.logo ? 'none' : 'flex'\n          }}\n        >\n          {account.institution.name.charAt(0)}\n        </div>\n      </div>\n\n      {/* CC: Account name and type */}\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"text-white font-medium text-sm truncate\">\n          {account.name}\n        </div>\n        <div className=\"text-white/60 text-xs truncate\">\n          {account.accountType} ••{account.last4}\n        </div>\n      </div>\n\n      {/* CC: SVG Sparkline */}\n      <div className=\"flex-shrink-0\">\n        <Sparkline data={account.sparklineData} trend={trend} />\n      </div>\n\n      {/* CC: Balance */}\n      <div className=\"flex-shrink-0 text-right min-w-[80px]\">\n        <div className=\"text-white font-semibold text-sm\">\n          {formatCurrency(account.balance, { currency: account.currency })}\n        </div>\n      </div>\n\n      {/* CC: Percentage delta with green ↑/red ↓ indicators (R2 requirement) */}\n      <div className=\"flex-shrink-0 flex items-center gap-1 min-w-[60px] justify-end\">\n        <DeltaIcon className={cn(\"w-3 h-3\", deltaColor)} />\n        <span \n          className={cn(\"text-xs font-medium\", deltaColor)}\n          aria-label={`${trend === 'up' ? 'up' : 'down'} ${Math.abs(account.deltaPercentage).toFixed(1)} percent`}\n        >\n          {Math.abs(account.deltaPercentage).toFixed(1)}%\n        </span>\n      </div>\n    </motion.div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/AccountDeck/VirtualizedDeck.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/AccountDeck/VirtualizedDeck.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// CC: VirtualizedDeck component for Smart Accounts Deck with react-window (R2 requirement)\nimport React, { useMemo } from 'react';\nimport { FixedSizeList as List } from 'react-window';\nimport { motion } from 'framer-motion';\nimport { AccountRow, AccountRowData } from './AccountRow';\nimport { cn } from '@/shared/lib/utils';\n\ninterface VirtualizedDeckProps {\n  accounts: AccountRowData[];\n  height?: number;\n  className?: string;\n  onAccountClick?: (account: AccountRowData) => void;\n}\n\n// CC: Row renderer for react-window virtual scrolling\nconst Row = ({ index, style, data }: { \n  index: number; \n  style: React.CSSProperties; \n  data: { accounts: AccountRowData[]; onAccountClick?: (account: AccountRowData) => void } \n}) => {\n  const account = data.accounts[index];\n  \n  return (\n    <div \n      style={style} \n      onClick={() => data.onAccountClick?.(account)}\n      className=\"px-2\"\n    >\n      <AccountRow \n        account={account} \n        index={index}\n      />\n    </div>\n  );\n};\n\nexport const VirtualizedDeck: React.FC<VirtualizedDeckProps> = ({ \n  accounts, \n  height = 400,\n  className,\n  onAccountClick \n}) => {\n  // CC: Memoize data for react-window performance\n  const itemData = useMemo(() => ({\n    accounts,\n    onAccountClick\n  }), [accounts, onAccountClick]);\n\n  // CC: Animation variants for container\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.5,\n        ease: [0.25, 0.1, 0.25, 1] as const\n      }\n    }\n  };\n\n  return (\n    <motion.div\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      className={cn(\n        // CC: R3 requirement - 12px radius, Liquid-Glass theme\n        \"rounded-xl border border-white/[0.08] bg-white/[0.02] backdrop-blur-md overflow-hidden\",\n        className\n      )}\n    >\n      {/* CC: Header with account count */}\n      <div className=\"px-4 py-3 border-b border-white/[0.08]\">\n        <h3 className=\"text-white font-semibold text-lg\">\n          Smart Accounts\n        </h3>\n        <p className=\"text-white/60 text-sm\">\n          {accounts.length} accounts • Scroll to view all\n        </p>\n      </div>\n\n      {/* CC: Virtual scrolling list with react-window for performance (R2 requirement) */}\n      <div className=\"p-2\">\n        <List\n          height={height}\n          width=\"100%\"\n          itemCount={accounts.length}\n          itemSize={60} // CC: 56px row height + 4px spacing (R2 requirement)\n          itemData={itemData}\n          className=\"scrollbar-thin scrollbar-track-transparent scrollbar-thumb-white/20\"\n        >\n          {Row}\n        </List>\n      </div>\n\n      {/* CC: Footer with \"Add Account\" CTA for success metrics */}\n      <div className=\"px-4 py-3 border-t border-white/[0.08]\">\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          className={cn(\n            \"w-full py-2 px-4 rounded-lg text-sm font-medium\",\n            \"bg-blue-500 hover:bg-blue-600 text-white\",\n            \"transition-colors duration-200\"\n          )}\n          onClick={() => {\n            // CC: Track feature_cloud_seen event for success metrics\n            if (typeof window !== 'undefined' && (window as any).gtag) {\n              (window as any).gtag('event', 'add_account_clicked', {\n                event_category: 'smart_accounts_deck',\n                event_label: 'cta_button'\n              });\n            }\n          }}\n        >\n          + Add Account\n        </motion.button>\n      </div>\n    </motion.div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/BalanceCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/BalanceCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback } from 'react';\nimport { Eye, EyeOff, TrendingUp } from 'lucide-react';\nimport { UniversalCard } from '@/shared/ui/UniversalCard';\n\ninterface BalanceCardProps {\n  accountType: string;\n  nickname: string;\n  balance: number;\n  availableBalance: number;\n  currency: string;\n  trend: 'up' | 'down';\n  trendPercentage: number;\n}\n\nconst BalanceCard = React.memo<BalanceCardProps>(({\n  accountType,\n  nickname,\n  balance,\n  availableBalance,\n  currency,\n  trend,\n  trendPercentage\n}) => {\n  const [isBalanceVisible, setIsBalanceVisible] = useState(true);\n\n  // Memoized currency formatter to prevent recreation\n  const formatCurrency = useMemo(() => {\n    const formatter = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2\n    });\n    return (amount: number) => formatter.format(amount);\n  }, [currency]);\n\n  const toggleBalanceVisibility = useCallback(() => {\n    setIsBalanceVisible(prev => !prev);\n  }, []);\n\n  return (\n    <UniversalCard variant=\"glass\" className=\"stagger-item p-6\" interactive>\n      <div className=\"flex justify-between items-start mb-4\">\n        <div>\n          <p className=\"text-white/70 text-sm font-medium\">{accountType}</p>\n          <p className=\"text-white/50 text-xs\">{nickname}</p>\n        </div>\n        <button\n          onClick={toggleBalanceVisibility}\n          className=\"p-2 rounded-lg bg-white/5 hover:bg-white/10 min-w-[44px] min-h-[44px] flex items-center justify-center focus:outline-none focus:ring-2 focus:ring-blue-400/50 transition-colors\"\n          aria-label={isBalanceVisible ? \"Hide account balance\" : \"Show account balance\"}\n          aria-pressed={isBalanceVisible}\n          type=\"button\"\n        >\n          {isBalanceVisible ? (\n            <EyeOff className=\"w-4 h-4 text-white/70\" aria-hidden=\"true\" />\n          ) : (\n            <Eye className=\"w-4 h-4 text-white/70\" aria-hidden=\"true\" />\n          )}\n        </button>\n      </div>\n\n      <div className=\"mb-4\">\n        <div className={`transition-all duration-300 ${isBalanceVisible ? 'balance-reveal' : 'balance-blur'}`}>\n          <h1 className=\"text-4xl font-bold text-white mb-1\" aria-live=\"polite\">\n            {isBalanceVisible ? formatCurrency(balance) : '••••••'}\n          </h1>\n          <p className=\"text-white/50 text-sm\">\n            Available: {isBalanceVisible ? formatCurrency(availableBalance) : '••••••'}\n          </p>\n        </div>\n      </div>\n\n      <div className=\"flex items-center space-x-2\" role=\"group\" aria-label=\"Account performance\">\n        <div className={`flex items-center space-x-1 ${trend === 'up' ? 'text-green-400' : 'text-red-400'}`}>\n          <TrendingUp \n            className={`w-4 h-4 ${trend === 'down' ? 'rotate-180' : ''}`} \n            aria-hidden=\"true\"\n          />\n          <span className=\"text-sm font-medium\" aria-label={`${trend === 'up' ? 'Increased' : 'Decreased'} by ${trendPercentage} percent`}>\n            {trendPercentage}%\n          </span>\n        </div>\n        <span className=\"text-white/50 text-sm\">vs last month</span>\n      </div>\n    </UniversalCard>\n  );\n});\n\nBalanceCard.displayName = 'BalanceCard';\n\nexport default BalanceCard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/FeatureCloud.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/FeatureCloud.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// CC: Feature Cloud hero component with configurable keywords and emoji icons\nimport React from 'react';\nimport { motion } from 'framer-motion';\nimport { useNavigate } from 'react-router-dom';\nimport { cn } from '@/shared/lib/utils';\n\ninterface FeatureCloudProps {\n  className?: string;\n  keywords?: Array<{\n    text: string;\n    emoji: string;\n    size?: 'sm' | 'md' | 'lg';\n    route?: string;\n  }>;\n  onKeywordClick?: (keyword: string, route?: string) => void;\n}\n\n// CC: Default feature keywords with financial focus and their routes\nconst defaultKeywords = [\n  { text: 'Smart Banking', emoji: '🏦', size: 'lg' as const, route: 'accounts' },\n  { text: 'AI Insights', emoji: '🤖', size: 'md' as const, route: 'insights' },\n  { text: 'Investment', emoji: '📈', size: 'md' as const, route: 'investments' },\n  { text: 'Budgeting', emoji: '💰', size: 'sm' as const, route: 'budget' },\n  { text: 'Goals', emoji: '🎯', size: 'sm' as const, route: 'savings' },\n  { text: 'Analytics', emoji: '📊', size: 'md' as const, route: 'analytics' },\n  { text: 'Security', emoji: '🔒', size: 'sm' as const, route: 'dashboard' },\n  { text: 'Planning', emoji: '📋', size: 'lg' as const, route: 'planning' },\n  { text: 'Savings', emoji: '🐷', size: 'md' as const, route: 'savings' },\n  { text: 'Credit', emoji: '💳', size: 'sm' as const, route: 'credit' }\n];\n\n// CC: Framer Motion stagger animation variants\nconst containerVariants = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n    transition: { when: \"beforeChildren\", duration: 0.4 }\n  }\n};\n\nconst itemVariants = {\n  hidden: { \n    opacity: 0, \n    y: 20,\n    scale: 0.8\n  },\n  visible: { \n    opacity: 1, \n    y: 0,\n    scale: 1,\n    transition: {\n      type: \"spring\" as const,\n      stiffness: 100,\n      damping: 10\n    }\n  }\n};\n\nconst FeatureCloud: React.FC<FeatureCloudProps> = ({ \n  className,\n  keywords = defaultKeywords,\n  onKeywordClick\n}) => {\n  const navigate = useNavigate();\n\n  // CC: Handle keyword click navigation\n  const handleKeywordClick = (keyword: { text: string; route?: string }) => {\n    if (onKeywordClick) {\n      onKeywordClick(keyword.text, keyword.route);\n    }\n    \n    if (keyword.route) {\n      // Navigate to the route\n      navigate(`/?tab=${keyword.route}`);\n    }\n  };\n\n  // CC: Responsive sizing classes for keywords\n  const getSizeClasses = (size: 'sm' | 'md' | 'lg') => {\n    switch (size) {\n      case 'sm':\n        return 'text-sm sm:text-base px-3 py-1.5';\n      case 'md':\n        return 'text-base sm:text-lg px-4 py-2';\n      case 'lg':\n        return 'text-lg sm:text-xl px-5 py-2.5';\n      default:\n        return 'text-base sm:text-lg px-4 py-2';\n    }\n  };\n\n  return (\n    <div className={cn(\"relative overflow-hidden\", className)}>\n      {/* CC: Main hero headline with responsive typography */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.8, ease: \"easeOut\" }}\n        className=\"text-center mb-8 sm:mb-12\"\n      >\n        <h1 className=\"text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl text-white leading-tight\">\n          <span className=\"font-bold\">Intelligence you can{' '}</span>\n          <span className=\"font-light italic bg-gradient-to-r from-blue-400 via-purple-400 to-green-400 bg-clip-text text-transparent\">\n            bank\n          </span>{' '}\n          <span className=\"font-bold\">on</span>\n        </h1>\n        <p className=\"text-lg sm:text-xl md:text-2xl text-white/70 mt-4 max-w-3xl mx-auto px-4\">\n          Experience the power of intelligent financial management\n        </p>\n      </motion.div>\n\n      {/* CC: Feature cloud with staggered animations */}\n      <motion.div\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className=\"flex flex-wrap justify-center items-center gap-3 sm:gap-4 max-w-4xl mx-auto px-4\"\n      >\n        {keywords.map((keyword, index) => (\n          <motion.button\n            key={`${keyword.text}-${index}`}\n            variants={itemVariants}\n            // Appear simultaneously with parent animation\n            whileHover={{ \n              scale: 1.05,\n              boxShadow: \"0 10px 30px rgba(59, 130, 246, 0.3)\"\n            }}\n            whileTap={{ scale: 0.95 }}\n            onClick={() => handleKeywordClick(keyword)}\n            className={cn(\n              // CC: Liquid glass theme with 12px radius and surface.borderLight\n              \"rounded-xl border border-white/[0.08] bg-white/[0.02] backdrop-blur-md\",\n              \"flex items-center gap-2 cursor-pointer transition-all duration-300\",\n              \"hover:bg-white/[0.05] hover:border-white/[0.12]\",\n              \"active:scale-95 select-none\",\n              \"focus:outline-none focus:ring-2 focus:ring-blue-400/50 focus:ring-offset-2 focus:ring-offset-black/50\",\n              getSizeClasses(keyword.size || 'md')\n            )}\n            style={{\n              // CC: Ensure no text overflow on 320-1440px viewports\n              minWidth: 'fit-content',\n              maxWidth: '200px'\n            }}\n            type=\"button\"\n            aria-label={`Navigate to ${keyword.text}`}\n          >\n            <span \n              className=\"text-white font-medium truncate\"\n              title={keyword.text}\n            >\n              {keyword.text}\n            </span>\n          </motion.button>\n        ))}\n      </motion.div>\n\n      {/* CC: Decorative background elements */}\n      <div className=\"absolute inset-0 -z-10 overflow-hidden\">\n        <div className=\"absolute top-1/4 left-1/4 w-32 h-32 bg-blue-500/10 rounded-full blur-3xl\" />\n        <div className=\"absolute bottom-1/4 right-1/4 w-40 h-40 bg-purple-500/10 rounded-full blur-3xl\" />\n        <div className=\"absolute top-3/4 left-1/2 w-24 h-24 bg-green-500/10 rounded-full blur-3xl\" />\n      </div>\n    </div>\n  );\n};\n\nexport default FeatureCloud;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/GlassCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/GlassCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Legacy GlassCard - Redirected to UniversalCard for optimization\n// This maintains backward compatibility while using the optimized system\n\nimport { UniversalCard } from '@/shared/ui/UniversalCard';\nimport type { BaseCardProps } from '@/types/shared';\n\ninterface GlassCardProps extends Omit<BaseCardProps, 'variant'> {\n  variant?: 'default' | 'elevated' | 'subtle';\n  shape?: 'rounded' | 'card' | 'capsule';\n  interactive?: boolean;\n}\n\n// Optimized wrapper component - consolidates legacy GlassCard functionality\nexport const GlassCard: React.FC<GlassCardProps> = ({ \n  children, \n  className = '', \n  variant = 'default',\n  shape = 'card',\n  interactive = false,\n  ...props \n}) => {\n  // Map legacy variants to UniversalCard system\n  const universalVariant = 'glass';\n  const universalSize = variant === 'elevated' ? 'lg' : variant === 'subtle' ? 'sm' : 'md';\n  \n  return (\n    <UniversalCard\n      variant={universalVariant}\n      size={universalSize}\n      interactive={interactive}\n      className={className}\n      hover={interactive ? { scale: true, glow: true } : undefined}\n      {...props}\n    >\n      {children}\n    </UniversalCard>\n  );\n};\n\nexport default GlassCard;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/LiquidGlassTopMenuBar.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/LiquidGlassTopMenuBar.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  File, \n  Edit, \n  Eye, \n  Settings, \n  HelpCircle,\n  User,\n  Search,\n  Bell,\n  ChevronDown,\n  Home,\n  BarChart3,\n  Wallet,\n  TrendingUp,\n  Menu\n} from 'lucide-react';\nimport LiquidGlassSVGFilters from '@/shared/ui/LiquidGlassSVGFilters';\nimport { cn } from '@/shared/lib/utils';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarShortcut,\n} from '@/shared/ui/menubar';\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from '@/shared/ui/sheet';\n\ninterface MenuBarProps {\n  className?: string;\n  onMenuItemClick?: (item: string) => void;\n}\n\ninterface MenuItem {\n  label: string;\n  items: { label: string; shortcut?: string; separator?: boolean }[];\n}\n\nconst LiquidGlassTopMenuBar = ({ className, onMenuItemClick }: MenuBarProps) => {\n  const navigate = useNavigate();\n  const [isMobileToolsOpen, setIsMobileToolsOpen] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const fileMenu = [\n    { label: 'New Transaction', shortcut: '⌘N' },\n    { label: 'Import Data', shortcut: '⌘I' },\n    { label: 'Export Report', shortcut: '⌘E' },\n    { separator: true },\n    { label: 'Settings', shortcut: '⌘,' },\n  ];\n\n  const viewMenu = [\n    { label: 'Dashboard', shortcut: '⌘1' },\n    { label: 'Transactions', shortcut: '⌘2' },\n    { label: 'Reports', shortcut: '⌘3' },\n    { label: 'Insights', shortcut: '⌘4' },\n    { separator: true },\n    { label: 'Full Screen', shortcut: '⌃⌘F' },\n  ];\n\n  const toolsMenu = [\n    { label: 'Calculators' },\n    { label: 'Budget Planner' },\n    { label: 'Investment Tracker' },\n    { label: 'Goal Setting' },\n    { separator: true },\n    { label: 'Data Analysis' },\n  ];\n\n  const helpMenu = [\n    { label: 'Documentation' },\n    { label: 'Keyboard Shortcuts', shortcut: '⌘/' },\n    { label: 'Support Center' },\n    { separator: true },\n    { label: 'About Vueni' },\n  ];\n\n  const handleItemSelect = (item: string) => {\n    switch (item) {\n      // Tools Menu Navigation\n      case 'Calculators':\n        navigate('/calculators');\n        break;\n      case 'Budget Planner':\n        navigate('/budget-planner');\n        break;\n      case 'Goal Setting':\n        navigate('/goal-setting');\n        break;\n      case 'Investment Tracker':\n        navigate('/investment-tracker');\n        break;\n      case 'Data Analysis':\n        navigate('/?tab=insights');\n        break;\n      \n      // View Menu Navigation\n      case 'Dashboard':\n        navigate('/');\n        break;\n      case 'Transactions':\n        navigate('/transactions');\n        break;\n      case 'Reports':\n        navigate('/reports');\n        break;\n      case 'Insights':\n        navigate('/?tab=insights');\n        break;\n      case 'Full Screen':\n        if (document.fullscreenElement) {\n          document.exitFullscreen();\n        } else {\n          document.documentElement.requestFullscreen();\n        }\n        break;\n      \n      // File Menu Actions\n      case 'New Transaction':\n        navigate('/transactions?new=true');\n        break;\n      case 'Settings':\n        navigate('/profile');\n        break;\n      \n      // Help Menu Actions\n      case 'Documentation':\n        window.open('https://github.com/your-org/vueni-finance/wiki', '_blank');\n        break;\n      case 'Support Center':\n        window.open('https://support.vueni.com', '_blank');\n        break;\n      case 'About Vueni':\n        navigate('/profile');\n        break;\n      \n      // Default fallback\n      default:\n        console.log('Menu item not handled:', item);\n        onMenuItemClick?.(item);\n    }\n    // Close mobile menu after selection\n    setIsMobileMenuOpen(false);\n  };\n\n  return (\n    <>\n      <LiquidGlassSVGFilters />\n      \n      {/* Top Menu Bar with Liquid Glass Effect */}\n      <div className={cn(\"fixed top-0 left-0 right-0 z-50 p-2 sm:p-4 pt-safe\", className)}>\n        <div className=\"liquid-glass-nav rounded-2xl p-2 sm:p-3 border-x-0 border-t-0 border-b border-white/10 backdrop-blur-xl\">\n          <div className=\"flex items-center justify-between max-w-7xl mx-auto\">\n            \n            {/* Logo/Brand */}\n            <div className=\"flex items-center space-x-2 sm:space-x-6 flex-shrink-0\">\n              <button\n                onClick={() => navigate('/')}\n                aria-label=\"Home\"\n                className=\"liquid-glass-button p-2 sm:p-3 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-400/50\"\n              >\n                <span className=\"text-white font-bold text-lg sm:text-xl bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                  Vueni\n                </span>\n              </button>\n\n              {/* Desktop Menu Items using Radix Menubar */}\n              <div className=\"hidden lg:block\">\n                <Menubar>\n                  {/* File */}\n                  <MenubarMenu>\n                    <MenubarTrigger>File</MenubarTrigger>\n                    <MenubarContent>\n                      {fileMenu.map((item, idx) =>\n                        item.separator ? (\n                          <MenubarSeparator key={idx} />\n                        ) : (\n                          <MenubarItem key={idx} onSelect={() => handleItemSelect(item.label)}>\n                            {item.label}\n                            {item.shortcut && <MenubarShortcut>{item.shortcut}</MenubarShortcut>}\n                          </MenubarItem>\n                        )\n                      )}\n                    </MenubarContent>\n                  </MenubarMenu>\n\n                  {/* View */}\n                  <MenubarMenu>\n                    <MenubarTrigger>View</MenubarTrigger>\n                    <MenubarContent>\n                      {viewMenu.map((item, idx) =>\n                        item.separator ? (\n                          <MenubarSeparator key={idx} />\n                        ) : (\n                          <MenubarItem key={idx} onSelect={() => handleItemSelect(item.label)}>\n                            {item.label}\n                            {item.shortcut && <MenubarShortcut>{item.shortcut}</MenubarShortcut>}\n                          </MenubarItem>\n                        )\n                      )}\n                    </MenubarContent>\n                  </MenubarMenu>\n\n                  {/* Tools */}\n                  <MenubarMenu>\n                    <MenubarTrigger>Tools</MenubarTrigger>\n                    <MenubarContent>\n                      {toolsMenu.map((item, idx) =>\n                        item.separator ? (\n                          <MenubarSeparator key={idx} />\n                        ) : (\n                          <MenubarItem key={idx} onSelect={() => handleItemSelect(item.label)}>\n                            {item.label}\n                          </MenubarItem>\n                        )\n                      )}\n                    </MenubarContent>\n                  </MenubarMenu>\n\n                  {/* Help */}\n                  <MenubarMenu>\n                    <MenubarTrigger>Help</MenubarTrigger>\n                    <MenubarContent>\n                      {helpMenu.map((item, idx) =>\n                        item.separator ? (\n                          <MenubarSeparator key={idx} />\n                        ) : (\n                          <MenubarItem key={idx} onSelect={() => handleItemSelect(item.label)}>\n                            {item.label}\n                            {item.shortcut && <MenubarShortcut>{item.shortcut}</MenubarShortcut>}\n                          </MenubarItem>\n                        )\n                      )}\n                    </MenubarContent>\n                  </MenubarMenu>\n                </Menubar>\n              </div>\n\n              {/* Mobile Menu Button - Tablet and smaller */}\n              <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n                <SheetTrigger asChild>\n                  <button\n                    className=\"lg:hidden liquid-glass-menu-item p-2 rounded-xl text-white/90 hover:text-white transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-400/50 flex items-center\"\n                    aria-label=\"Open menu\"\n                  >\n                    <Menu className=\"w-4 h-4\" />\n                  </button>\n                </SheetTrigger>\n                <SheetContent side=\"left\" className=\"liquid-glass-card border-0 backdrop-blur-xl w-80 sm:w-96\">\n                  <SheetHeader className=\"mb-6\">\n                    <SheetTitle className=\"text-white text-left\">Menu</SheetTitle>\n                  </SheetHeader>\n                  <div className=\"space-y-6\">\n                    {/* File Menu */}\n                    <div>\n                      <h3 className=\"text-white/80 font-medium mb-3\">File</h3>\n                      <div className=\"space-y-1\">\n                        {fileMenu.map((item, idx) =>\n                          item.separator ? (\n                            <div key={idx} className=\"my-3 h-px bg-white/10\" />\n                          ) : (\n                            <button\n                              key={idx}\n                              onClick={() => handleItemSelect(item.label)}\n                              className=\"w-full text-left px-3 py-2 rounded-lg text-white/70 hover:text-white hover:bg-white/5 transition-all flex items-center justify-between\"\n                            >\n                              <span>{item.label}</span>\n                              {item.shortcut && <span className=\"text-xs text-white/40\">{item.shortcut}</span>}\n                            </button>\n                          )\n                        )}\n                      </div>\n                    </div>\n\n                    {/* View Menu */}\n                    <div>\n                      <h3 className=\"text-white/80 font-medium mb-3\">View</h3>\n                      <div className=\"space-y-1\">\n                        {viewMenu.map((item, idx) =>\n                          item.separator ? (\n                            <div key={idx} className=\"my-3 h-px bg-white/10\" />\n                          ) : (\n                            <button\n                              key={idx}\n                              onClick={() => handleItemSelect(item.label)}\n                              className=\"w-full text-left px-3 py-2 rounded-lg text-white/70 hover:text-white hover:bg-white/5 transition-all flex items-center justify-between\"\n                            >\n                              <span>{item.label}</span>\n                              {item.shortcut && <span className=\"text-xs text-white/40\">{item.shortcut}</span>}\n                            </button>\n                          )\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Tools Menu */}\n                    <div>\n                      <h3 className=\"text-white/80 font-medium mb-3\">Tools</h3>\n                      <div className=\"space-y-1\">\n                        {toolsMenu.map((item, idx) =>\n                          item.separator ? (\n                            <div key={idx} className=\"my-3 h-px bg-white/10\" />\n                          ) : (\n                            <button\n                              key={idx}\n                              onClick={() => handleItemSelect(item.label)}\n                              className=\"w-full text-left px-3 py-2 rounded-lg text-white/70 hover:text-white hover:bg-white/5 transition-all\"\n                            >\n                              {item.label}\n                            </button>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </div>\n\n            {/* Right Side Actions - Responsive */}\n            <div className=\"flex items-center space-x-1 sm:space-x-2 flex-shrink-0\">\n              {/* Quick Navigation Pills - Large screens only */}\n              <div className=\"hidden xl:flex items-center space-x-1\">\n                <button \n                  onClick={() => navigate('/')}\n                  className=\"liquid-glass-menu-item p-2 rounded-xl text-white/80 hover:text-white transition-all duration-300 group\"\n                  aria-label=\"Dashboard\"\n                >\n                  <Home className=\"w-4 h-4\" />\n                </button>\n                <button \n                  onClick={() => navigate('/?tab=insights')}\n                  className=\"liquid-glass-menu-item p-2 rounded-xl text-white/80 hover:text-white transition-all duration-300\"\n                  aria-label=\"Insights\"\n                >\n                  <BarChart3 className=\"w-4 h-4\" />\n                </button>\n                <button \n                  onClick={() => navigate('/transactions')}\n                  className=\"liquid-glass-menu-item p-2 rounded-xl text-white/80 hover:text-white transition-all duration-300\"\n                  aria-label=\"Transactions\"\n                >\n                  <Wallet className=\"w-4 h-4\" />\n                </button>\n                <button \n                  onClick={() => navigate('/reports')}\n                  className=\"liquid-glass-menu-item p-2 rounded-xl text-white/80 hover:text-white transition-all duration-300\"\n                  aria-label=\"Reports\"\n                >\n                  <TrendingUp className=\"w-4 h-4\" />\n                </button>\n              </div>\n\n              {/* Divider - Large screens only */}\n              <div className=\"hidden xl:block w-px h-6 bg-white/10\" />\n\n              {/* Essential Action Buttons - Always visible */}\n              <button \n                onClick={() => alert('Search functionality coming soon!')}\n                className=\"hidden sm:flex liquid-glass-menu-item p-2 rounded-xl text-white/80 hover:text-white transition-all duration-300 relative\"\n                aria-label=\"Search\"\n              >\n                <Search className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n              </button>\n              \n              <button \n                onClick={() => alert('Notifications coming soon!')}\n                className=\"liquid-glass-menu-item p-2 rounded-xl text-white/80 hover:text-white transition-all duration-300 relative\"\n                aria-label=\"Notifications\"\n              >\n                <Bell className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n                <span className=\"absolute -top-1 -right-1 w-2 h-2 sm:w-3 sm:h-3 bg-red-500 rounded-full border border-black/20\"></span>\n              </button>\n\n              <button \n                onClick={() => navigate('/profile')}\n                className=\"liquid-glass-button p-2 rounded-xl text-white/90 hover:text-white transition-all duration-300\"\n                aria-label=\"Profile\"\n              >\n                <User className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default LiquidGlassTopMenuBar; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/Navigation.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/Navigation.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport LiquidGlassSVGFilters from '@/shared/ui/LiquidGlassSVGFilters';\nimport { \n  Home, \n  CreditCard, \n  Receipt,\n  TrendingUp,\n  BarChart3,\n  Award,\n  User,\n  Settings,\n  Plus,\n  Shield,\n  Target\n} from 'lucide-react';\nimport { cn } from '@/shared/lib/utils';\n\ninterface NavigationProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n}\n\nconst Navigation = React.memo<NavigationProps>(({ activeTab, onTabChange }) => {\n  const [showMore, setShowMore] = useState(false);\n\n  // Memoized tab configurations to prevent recreation on every render\n  const mainTabs = React.useMemo(() => [\n    { id: 'dashboard', label: 'Home', icon: Home },\n    { id: 'accounts', label: 'Accounts', icon: CreditCard },\n    { id: 'transactions', label: 'Transactions', icon: Receipt },\n    { id: 'analytics', label: 'Analytics', icon: BarChart3 }\n  ], []);\n\n  const moreTabs = React.useMemo(() => [\n    { id: 'insights', label: 'Insights', icon: TrendingUp },\n    { id: 'investments', label: 'Investments', icon: Award },\n    { id: 'budget', label: 'Budget', icon: Target },\n    { id: 'planning', label: 'Planning', icon: Target },\n    { id: 'reports', label: 'Reports', icon: BarChart3 }\n  ], []);\n\n  // Optimized event handlers with useCallback\n  const handleMoreClick = React.useCallback(() => {\n    setShowMore(!showMore);\n  }, [showMore]);\n\n  const handleTabClick = React.useCallback((tabId: string) => {\n    onTabChange(tabId);\n    setShowMore(false); // Close more menu when tab is selected\n  }, [onTabChange]);\n\n  const getTabStyles = (isActive: boolean, index: number, total: number) => {\n    let borderRadius = '';\n    \n    // Create seamless borders - only round outer edges\n    if (index === 0) {\n      borderRadius = 'rounded-l-3xl';\n    } else if (index === total - 1) {\n      borderRadius = 'rounded-r-3xl';\n    } else {\n      borderRadius = 'rounded-none';\n    }\n\n    return cn(\n      // Base responsive sizing with proper touch targets\n      \"flex flex-col items-center justify-center space-y-1 transition-all duration-500 focus:outline-none focus:ring-2 focus:ring-blue-400/50 relative border-r border-white/5 last:border-r-0\",\n      // Mobile: Compact size\n      \"py-3 px-3 min-w-[56px] min-h-[56px]\",\n      // Tablet: Medium size  \n      \"md:py-4 md:px-4 md:min-w-[64px] md:min-h-[64px]\",\n      // Desktop: Larger, more accessible size\n      \"lg:py-5 lg:px-6 lg:min-w-[80px] lg:min-h-[80px]\",\n      // Large Desktop: Maximum comfortable size\n      \"xl:py-6 xl:px-8 xl:min-w-[96px] xl:min-h-[96px]\",\n      borderRadius,\n      isActive ? \n        \"ios26-nav-item-active text-white transform scale-105 z-10\" : \n        \"ios26-nav-item text-white/70 hover:text-white hover:scale-102\"\n    );\n  };\n\n  return (\n    <>\n      {/* SVG Filters for Glass Effects */}\n      <LiquidGlassSVGFilters />\n\n      {/* More Options Overlay */}\n      {showMore && (\n        <div \n          className=\"fixed inset-0 z-40 bg-black/50 backdrop-blur-sm\" \n          onClick={() => setShowMore(false)}\n          aria-label=\"Close navigation menu\"\n          role=\"button\"\n          tabIndex={0}\n          onKeyDown={(e) => e.key === 'Escape' && setShowMore(false)}\n        >\n          <div className=\"fixed bottom-navigation-spacing left-4 right-4 max-w-md mx-auto\">\n            <div className=\"liquid-glass-card p-6\">\n              <div className=\"grid grid-cols-3 gap-4\">\n                {moreTabs.map((tab) => {\n                  const IconComponent = tab.icon;\n                  const isActive = activeTab === tab.id;\n                  \n                  return (\n                    <button\n                      key={tab.id}\n                      onClick={() => {\n                        onTabChange(tab.id);\n                        setShowMore(false);\n                      }}\n                      className={cn(\n                        \"flex flex-col items-center justify-center space-y-2 py-4 px-3 rounded-lg transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-400/50\",\n                        // Responsive sizing for more buttons\n                        \"min-w-[64px] min-h-[64px]\",\n                        \"lg:min-w-[80px] lg:min-h-[80px] lg:py-6 lg:px-4\",\n                        isActive ? \n                          \"liquid-glass-menu-item active text-white shadow-lg\" : \n                          \"liquid-glass-menu-item text-white/70 hover:text-white\"\n                      )}\n                      aria-label={`Navigate to ${tab.label}`}\n                      aria-current={isActive ? 'page' : undefined}\n                    >\n                      <IconComponent className=\"nav-icon\" aria-hidden=\"true\" />\n                      <span className=\"nav-text font-medium\">{tab.label}</span>\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* iOS 26 Style Seamless Navigation Bar */}\n      <div className=\"fixed bottom-0 left-0 right-0 z-50 safe-area-bottom\">\n        <div className=\"bottom-navigation\">\n          <nav aria-label=\"Main navigation\" className=\"ios26-nav-bubble\">\n            <div className=\"flex items-center justify-around w-full\">\n              {/* Main Navigation Tabs - Seamless touching bubbles */}\n              <div className=\"flex items-center justify-around flex-1\">\n                {mainTabs.map((tab, index) => {\n                  const IconComponent = tab.icon;\n                  const isActive = activeTab === tab.id;\n                  \n                  return (\n                    <button\n                      key={tab.id}\n                      onClick={() => handleTabClick(tab.id)}\n                      className={getTabStyles(isActive, index, mainTabs.length + 1)}\n                      aria-label={`Navigate to ${tab.label}`}\n                      aria-current={isActive ? 'page' : undefined}\n                    >\n                      <IconComponent className=\"nav-icon\" aria-hidden=\"true\" />\n                      <span className=\"nav-text font-medium\">{tab.label}</span>\n                    </button>\n                  );\n                })}\n                \n                {/* More Button - Part of seamless design */}\n                <button\n                  onClick={handleMoreClick}\n                  className={getTabStyles(\n                    moreTabs.some(tab => tab.id === activeTab),\n                    mainTabs.length,\n                    mainTabs.length + 1\n                  )}\n                  aria-label=\"More navigation options\"\n                  aria-expanded={showMore}\n                  aria-haspopup=\"true\"\n                >\n                  <Settings className=\"nav-icon\" aria-hidden=\"true\" />\n                  <span className=\"nav-text font-medium\">More</span>\n                </button>\n              </div>\n            </div>\n          </nav>\n        </div>\n      </div>\n\n      {/* Floating Action Button - Enhanced with Glass Effects */}\n      <button\n        className={cn(\n          \"liquid-glass-fab fixed right-4 z-40 flex items-center justify-center\",\n          // Responsive positioning and sizing\n          \"bottom-fab-mobile\",\n          \"sm:bottom-fab-tablet sm:right-6\",\n          \"lg:bottom-fab-desktop lg:right-8\",\n          \"xl:bottom-fab-large-desktop xl:right-12\",\n          // Responsive FAB sizing\n          \"p-3 min-w-[52px] min-h-[52px]\",\n          \"sm:p-4 sm:min-w-[56px] sm:min-h-[56px]\",\n          \"lg:p-5 lg:min-w-[64px] lg:min-h-[64px]\",\n          \"xl:p-6 xl:min-w-[72px] xl:min-h-[72px]\"\n        )}\n        aria-label=\"Add new transaction\"\n        onClick={() => {\n          // Handle FAB action\n          // FAB action handler\n        }}\n      >\n        <Plus className=\"nav-icon text-white\" aria-hidden=\"true\" />\n      </button>\n    </>\n  );\n});\n\nNavigation.displayName = 'Navigation';\n\nexport default Navigation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/QuickActions.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/QuickActions.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { ArrowUp, ArrowDown, Plus } from 'lucide-react';\n\nconst QuickActions = () => {\n  const actions = [\n    {\n      id: 'transfer',\n      label: 'Transfer',\n      icon: ArrowUp,\n      color: 'text-blue-400'\n    },\n    {\n      id: 'pay',\n      label: 'Pay',\n      icon: ArrowDown,\n      color: 'text-green-400'\n    },\n    {\n      id: 'deposit',\n      label: 'Deposit',\n      icon: Plus,\n      color: 'text-orange-400'\n    }\n  ];\n\n  return (\n    <div \n      className=\"stagger-item\"\n      style={{ \n        animationDelay: '100ms'\n      }}\n    >\n      <div className=\"flex justify-between items-center space-x-4\">\n        {actions.map((action) => {\n          const IconComponent = action.icon;\n          return (\n            <button\n              key={action.id}\n              className=\"liquid-glass-button flex-1 py-4 px-4 flex flex-col items-center space-y-2 cursor-pointer rounded-xl\"\n            >\n              <IconComponent className={`w-6 h-6 ${action.color}`} />\n              <span className=\"text-white text-sm font-medium\">{action.label}</span>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default QuickActions;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/TransactionItem.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/TransactionItem.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useCallback } from 'react';\nimport GlassCard from './GlassCard';\nimport { Package, Truck, Plane } from 'lucide-react';\nimport { Transaction } from '@/types/shared';\n\ninterface TransactionItemProps {\n  transaction: Transaction & {\n    trackingNumber?: string;\n    shippingProvider?: 'UPS' | 'FedEx' | 'USPS';\n    deliveryStatus?: 'In Transit' | 'Out for Delivery' | 'Delivered';\n  };\n  currency: string;\n}\n\nconst TransactionItem = React.memo<TransactionItemProps>(({ transaction, currency }) => {\n  // Memoized formatters to prevent recreation on every render\n  const formatCurrency = useMemo(() => {\n    const formatter = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2\n    });\n    \n    return (amount: number) => {\n      const absAmount = Math.abs(amount);\n      const formatted = formatter.format(absAmount);\n      return amount < 0 ? `-${formatted}` : `+${formatted}`;\n    };\n  }, [currency]);\n\n  const formatDate = useMemo(() => {\n    const formatter = new Intl.DateTimeFormat('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n    \n    return (dateString: string) => {\n      const date = new Date(dateString);\n      return formatter.format(date);\n    };\n  }, []);\n\n  // Memoized color calculations\n  const amountColor = useMemo(() => {\n    if (transaction.amount > 0) return 'text-green-400';\n    if (transaction.amount < 0) return 'text-white';\n    return 'text-white/70';\n  }, [transaction.amount]);\n\n  const statusColor = useMemo(() => {\n    switch (transaction.status) {\n      case 'completed': return 'bg-green-400';\n      case 'pending': return 'bg-orange-400';\n      case 'failed': return 'bg-red-400';\n      default: return 'bg-white/50';\n    }\n  }, [transaction.status]);\n\n  const deliveryStatusColor = useMemo(() => {\n    switch (transaction.deliveryStatus) {\n      case 'Delivered': return 'text-green-400';\n      case 'Out for Delivery': return 'text-orange-400';\n      case 'In Transit': return 'text-blue-400';\n      default: return 'text-white/70';\n    }\n  }, [transaction.deliveryStatus]);\n\n  const shippingIcon = useMemo(() => {\n    switch (transaction.shippingProvider) {\n      case 'UPS': return <Truck className=\"w-4 h-4\" />;\n      case 'FedEx': return <Plane className=\"w-4 h-4\" />;\n      case 'USPS': return <Package className=\"w-4 h-4\" />;\n      default: return <Package className=\"w-4 h-4\" />;\n    }\n  }, [transaction.shippingProvider]);\n\n  const hasShippingInfo = useMemo(() => \n    transaction.trackingNumber && transaction.shippingProvider, \n    [transaction.trackingNumber, transaction.shippingProvider]\n  );\n\n  return (\n    <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 hover:bg-white/[0.03] transition-all duration-300 backdrop-blur-md\">\n      <div className=\"flex items-center gap-4\">\n        {/* Status Indicator */}\n        <div className=\"flex-shrink-0\">\n          <div className={`w-3 h-3 rounded-full ${statusColor.replace('bg-', 'bg-')}`} />\n        </div>\n        \n        {/* Merchant Icon/Avatar */}\n        <div className=\"flex-shrink-0\">\n          <div className=\"w-12 h-12 rounded-2xl bg-white/[0.06] flex items-center justify-center\">\n            {hasShippingInfo ? (\n              <div className=\"text-white/70\">\n                {shippingIcon}\n              </div>\n            ) : (\n              <div className=\"w-8 h-8 rounded-xl bg-blue-500/20 flex items-center justify-center\">\n                <span className=\"text-blue-400 text-sm font-bold\">\n                  {transaction.merchant.charAt(0).toUpperCase()}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Content */}\n        <div className=\"flex-1 min-w-0\">\n          <p className=\"font-semibold text-white truncate text-sm\">\n            {transaction.merchant}\n          </p>\n          <p className=\"text-white/60 text-xs mt-1 truncate\">\n            {transaction.category.name} • {formatDate(transaction.date)}\n          </p>\n        </div>\n        \n        {/* Amount */}\n        <div className=\"flex-shrink-0 text-right\">\n          <p className={`font-bold text-sm ${amountColor}`}>\n            {formatCurrency(transaction.amount)}\n          </p>\n          <div className=\"flex items-center justify-end mt-1\">\n            <div className={`w-2 h-2 rounded-full ${statusColor} mr-2`} />\n            <span className=\"text-white/50 text-xs capitalize\">\n              {transaction.status}\n            </span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Shipping Info Row */}\n      {hasShippingInfo && (\n        <div className=\"mt-3 pt-3 border-t border-white/[0.05]\">\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"text-white/50\">\n              Tracking: {transaction.trackingNumber}\n            </span>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-white/50\">\n                via {transaction.shippingProvider}\n              </span>\n              <span className={`font-medium ${deliveryStatusColor}`}>\n                {transaction.deliveryStatus}\n              </span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nTransactionItem.displayName = 'TransactionItem';\n\nexport default TransactionItem;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/TransactionList.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/TransactionList.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport TransactionItem from './TransactionItem';\nimport TransactionWithScores from './TransactionWithScores';\nimport { calculateTransactionScores } from '@/shared/utils/transactionScoring';\nimport { Transaction } from '@/types/shared';\n\ninterface TransactionListProps {\n  transactions: Transaction[];\n  currency: string;\n  enhanced?: boolean;\n}\n\nconst TransactionList = ({ transactions, currency, enhanced = false }: TransactionListProps) => {\n  // Group transactions by date\n  const groupedTransactions = transactions.reduce((groups, transaction) => {\n    const date = new Date(transaction.date).toDateString();\n    if (!groups[date]) {\n      groups[date] = [];\n    }\n    groups[date].push(transaction);\n    return groups;\n  }, {} as Record<string, Transaction[]>);\n\n  const formatDateHeader = (dateString: string) => {\n    const date = new Date(dateString);\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    if (date.toDateString() === today.toDateString()) {\n      return 'Today';\n    } else if (date.toDateString() === yesterday.toDateString()) {\n      return 'Yesterday';\n    } else {\n      return date.toLocaleDateString('en-US', {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric'\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {Object.entries(groupedTransactions).map(([date, dateTransactions]) => (\n        <div key={date}>\n          <h3 className=\"text-white/70 text-sm font-medium mb-3 px-4\">\n            {formatDateHeader(date)}\n          </h3>\n          <div className=\"space-y-3 px-4\">\n            {dateTransactions.map((transaction, index) => {\n              const TransactionComponent = enhanced ? (\n                <TransactionWithScores\n                  transaction={transaction}\n                  scores={calculateTransactionScores(transaction)}\n                  currency={currency}\n                />\n              ) : (\n                <TransactionItem\n                  transaction={transaction}\n                  currency={currency}\n                />\n              );\n\n              return (\n                <div key={transaction.id} className={index > 0 ? \"mt-3\" : \"\"}>\n                  {TransactionComponent}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TransactionList;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/TransactionWithScores.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/TransactionWithScores.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport GlassCard from './GlassCard';\nimport { TransactionScores } from '@/shared/utils/transactionScoring';\nimport { Package, Truck, Plane } from 'lucide-react';\nimport { Transaction } from '@/types/shared';\n\ninterface TransactionWithScoresProps {\n  transaction: Transaction & {\n    trackingNumber?: string;\n    shippingProvider?: 'UPS' | 'FedEx' | 'USPS';\n    deliveryStatus?: 'In Transit' | 'Out for Delivery' | 'Delivered';\n  };\n  scores: TransactionScores;\n  currency: string;\n}\n\nconst getScoreColor = (score: number, type?: string) => {\n  switch (type) {\n    case 'health': return '#FF69B4'; // Pink for health\n    case 'eco': return '#00FF7F'; // Green for eco  \n    case 'financial': return '#00BFFF'; // Blue for financial\n    default: return '#FFFFFF'; // Default white\n  }\n};\n\nconst ScoreCircle = ({ score, label, isVisible, delay = 0, type }: { score: number; label: string; isVisible: boolean; delay?: number; type?: string }) => {\n  const color = getScoreColor(score, type);\n  const circumference = 2 * Math.PI * 7;\n  const strokeDasharray = circumference;\n  const strokeDashoffset = circumference - (score / 100) * circumference;\n\n  return (\n    <div \n      className={`relative transition-all duration-300 ease-out ${\n        isVisible ? 'opacity-100 scale-100' : 'opacity-0 scale-75'\n      }`}\n      title={`${label}: ${score}/100`}\n      style={{\n        transitionDelay: isVisible ? `${delay}ms` : '0ms',\n        width: '18px',\n        height: '18px'\n      }}\n    >\n      <svg width=\"18\" height=\"18\" className=\"transform -rotate-90\">\n        <circle\n          cx=\"9\"\n          cy=\"9\"\n          r=\"7\"\n          stroke=\"rgba(255, 255, 255, 0.2)\"\n          strokeWidth=\"1.5\"\n          fill=\"none\"\n        />\n        <circle\n          cx=\"9\"\n          cy=\"9\"\n          r=\"7\"\n          stroke={color}\n          strokeWidth=\"1.5\"\n          fill=\"none\"\n          strokeDasharray={strokeDasharray}\n          strokeDashoffset={strokeDashoffset}\n          strokeLinecap=\"round\"\n          className=\"transition-all duration-500 ease-out\"\n        />\n      </svg>\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        <span \n          className=\"text-[7px] font-bold\"\n          style={{ color }}\n        >\n          {score}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nconst TransactionWithScores = ({ transaction, scores, currency }: TransactionWithScoresProps) => {\n  const [showScores, setShowScores] = useState(false);\n\n  const formatCurrency = (amount: number) => {\n    const absAmount = Math.abs(amount);\n    const formatted = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2\n    }).format(absAmount);\n    \n    return amount < 0 ? `-${formatted}` : `+${formatted}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getAmountColor = (amount: number) => {\n    if (amount > 0) return 'text-green-400';\n    if (amount < 0) return 'text-white';\n    return 'text-white/70';\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-400';\n      case 'pending': return 'bg-orange-400';\n      case 'failed': return 'bg-red-400';\n      default: return 'bg-white/50';\n    }\n  };\n\n  const getDeliveryStatusColor = (status?: string) => {\n    switch (status) {\n      case 'Delivered': return 'text-green-400';\n      case 'Out for Delivery': return 'text-orange-400';\n      case 'In Transit': return 'text-blue-400';\n      default: return 'text-white/70';\n    }\n  };\n\n  const getShippingIcon = (provider?: string) => {\n    switch (provider) {\n      case 'UPS': return <Truck className=\"w-4 h-4\" />;\n      case 'FedEx': return <Plane className=\"w-4 h-4\" />;\n      case 'USPS': return <Package className=\"w-4 h-4\" />;\n      default: return <Package className=\"w-4 h-4\" />;\n    }\n  };\n\n  const hasShippingInfo = transaction.trackingNumber && transaction.shippingProvider;\n\n  return (\n    <GlassCard \n      className=\"p-4 mb-3 glass-interactive hover:bg-white/10 transition-all duration-300 ease-out cursor-pointer\"\n      interactive\n      onClick={() => setShowScores(!showScores)}\n      onMouseEnter={() => setShowScores(true)}\n      onMouseLeave={() => setShowScores(false)}\n      aria-label={`Transaction: ${transaction.merchant}, ${formatCurrency(transaction.amount)}, Financial score ${scores.financial}, Health score ${scores.health}, Eco score ${scores.eco}`}\n      role=\"button\"\n    >\n      <div className=\"transaction-layout\">\n        {/* Status Dot */}\n        <div className=\"transaction-status\">\n          <div \n            className={`transaction-status-dot ${getStatusColor(transaction.status)}`}\n            aria-label={`Status: ${transaction.status}`}\n          />\n        </div>\n        \n        {/* Shipping Icon */}\n        <div className=\"transaction-icon\">\n          {hasShippingInfo && (\n            <div className=\"text-white/70\">\n              <Package className=\"w-4 h-4\" />\n            </div>\n          )}\n        </div>\n        \n        {/* Content */}\n        <div className=\"transaction-content\">\n          <p className=\"transaction-merchant\">\n            {transaction.merchant}\n          </p>\n          <p className=\"transaction-category\">\n            {transaction.category.name}\n          </p>\n        </div>\n        \n        {/* Amount */}\n        <div className=\"transaction-amount\">\n          <p className={`transaction-amount-text ${getAmountColor(transaction.amount)}`}>\n            {formatCurrency(transaction.amount)}\n          </p>\n          <p className=\"transaction-date-text\">\n            {formatDate(transaction.date)}\n          </p>\n        </div>\n        \n        {/* Score Circles Area */}\n        <div className=\"transaction-scores\">\n          <div \n            className={`flex items-center justify-end gap-1 transition-all duration-300 ${\n              showScores ? 'opacity-100 scale-100' : 'opacity-0 scale-90'\n            }`}\n          >\n            <ScoreCircle \n              score={scores.health} \n              label=\"Health\"\n              isVisible={showScores}\n              delay={0}\n              type=\"health\"\n            />\n            <ScoreCircle \n              score={scores.eco} \n              label=\"Eco\"\n              isVisible={showScores}\n              delay={50}\n              type=\"eco\"\n            />\n            <ScoreCircle \n              score={scores.financial} \n              label=\"Financial\"\n              isVisible={showScores}\n              delay={100}\n              type=\"financial\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      {/* Shipping Info Row */}\n      {hasShippingInfo && (\n        <div className=\"mt-3 pt-3 border-t border-white/10\">\n          <div className=\"flex items-center justify-between text-xs\">\n            <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n              <div className=\"text-white/50\">\n                Tracking: \n              </div>\n              <div className=\"text-white/70 font-mono truncate\">\n                {transaction.trackingNumber}\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3 flex-shrink-0\">\n              <div className=\"text-white/50\">\n                via {transaction.shippingProvider}\n              </div>\n              <div className={`font-medium ${getDeliveryStatusColor(transaction.deliveryStatus)}`}>\n                {transaction.deliveryStatus}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </GlassCard>\n  );\n};\n\nexport default TransactionWithScores;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/ai/ChatDrawer.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/ai/ChatDrawer.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from '@/shared/ui/sheet';\nimport { Button } from '@/shared/ui/button';\nimport GlassCard from '@/components/GlassCard';\nimport { MessageCircle, Send, Sparkles, X } from 'lucide-react';\nimport { mockAiService, ChatMessage } from '@/features/mockAiService';\n\ninterface ChatDrawerProps {\n  userContext?: Record<string, unknown>;\n}\n\nconst ChatDrawer = ({ userContext }: ChatDrawerProps) => {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading) return;\n\n    const userMessage: ChatMessage = {\n      id: `msg_${Date.now()}`,\n      role: 'user',\n      content: inputValue.trim(),\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue('');\n    setIsLoading(true);\n\n    try {\n      const response = await mockAiService.sendMessage(userMessage.content, userContext);\n      setMessages(prev => [...prev, response]);\n    } catch (error) {\n      console.error('Failed to send message:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const quickActions = [\n    'Help me create a budget',\n    'Analyze my spending patterns',\n    'Set a savings goal',\n    'Review my subscriptions'\n  ];\n\n  return (\n    <Sheet open={isOpen} onOpenChange={setIsOpen}>\n      <SheetTrigger asChild>\n        <GlassCard\n          className=\"fixed bottom-32 right-6 p-4 glass-interactive z-40 glass-fab\"\n          interactive\n          shimmer\n        >\n          <MessageCircle className=\"w-6 h-6 text-white\" />\n        </GlassCard>\n      </SheetTrigger>\n      \n      <SheetContent className=\"w-full sm:max-w-md bg-gradient-to-br from-[#0A0A0B] via-[#1C1C1E] to-[#0A0A0B] border-white/10\">\n        <SheetHeader className=\"pb-4\">\n          <SheetTitle className=\"text-white flex items-center gap-2\">\n            <Sparkles className=\"w-5 h-5 text-blue-400\" />\n            Financial Assistant\n          </SheetTitle>\n        </SheetHeader>\n\n        <div className=\"flex flex-col h-[calc(100vh-120px)]\">\n          {/* Messages */}\n          <div className=\"flex-1 overflow-y-auto space-y-4 pr-2\">\n            {messages.length === 0 && (\n              <div className=\"text-center py-8\">\n                <Sparkles className=\"w-12 h-12 text-blue-400 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-white/70 mb-4\">Hi! I'm your financial assistant. I can help you with budgeting, spending analysis, and financial goals.</p>\n                \n                <div className=\"space-y-2\">\n                  <p className=\"text-white/50 text-sm\">Try asking:</p>\n                  {quickActions.map((action, index) => (\n                    <button\n                      key={index}\n                      onClick={() => setInputValue(action)}\n                      className=\"block w-full text-left p-2 text-sm text-blue-400 hover:bg-white/5 rounded-lg transition-colors\"\n                    >\n                      \"{action}\"\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n              >\n                <GlassCard\n                  className={`max-w-[80%] p-3 ${\n                    message.role === 'user'\n                      ? 'glass-blue text-white'\n                      : 'glass-secondary text-white'\n                  }`}\n                >\n                  <p className=\"text-sm\">{message.content}</p>\n                  <p className=\"text-xs text-white/50 mt-1\">\n                    {message.timestamp.toLocaleTimeString([], { \n                      hour: '2-digit', \n                      minute: '2-digit' \n                    })}\n                  </p>\n                </GlassCard>\n              </div>\n            ))}\n\n            {isLoading && (\n              <div className=\"flex justify-start\">\n                <GlassCard className=\"glass-secondary p-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"flex gap-1\">\n                      <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-pulse\"></div>\n                      <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-pulse\" style={{ animationDelay: '0.2s' }}></div>\n                      <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-pulse\" style={{ animationDelay: '0.4s' }}></div>\n                    </div>\n                    <span className=\"text-white/70 text-sm\">Thinking...</span>\n                  </div>\n                </GlassCard>\n              </div>\n            )}\n            \n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Input */}\n          <div className=\"pt-4 border-t border-white/10\">\n            <div className=\"flex gap-2\">\n              <input\n                type=\"text\"\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                placeholder=\"Ask about your finances...\"\n                className=\"flex-1 bg-white/5 border border-white/20 rounded-lg px-3 py-2 text-white placeholder-white/50 focus:outline-none focus:border-blue-400 focus:bg-white/10\"\n                disabled={isLoading}\n              />\n              <Button\n                onClick={handleSendMessage}\n                disabled={!inputValue.trim() || isLoading}\n                className=\"bg-blue-500 hover:bg-blue-600 text-white p-2\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n};\n\nexport default ChatDrawer;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/ai/FinancialAIChat.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/ai/FinancialAIChat.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { \n  Send, \n  Bot, \n  User, \n  Lightbulb, \n  TrendingUp, \n  Target, \n  AlertCircle,\n  Sparkles,\n  MessageCircle,\n  Trash2,\n  RotateCcw\n} from 'lucide-react';\nimport { aiFinancialService } from '@/features/aiFinancialService';\nimport { familyService } from '@/features/familyService';\nimport { accountService } from '@/features/accounts/api/accountService';\nimport { transactionService } from '@/features/transactions/api/transactionService';\nimport { cn } from '@/shared/lib/utils';\n\ninterface FinancialAIChatProps {\n  familyId: string;\n  className?: string;\n  compact?: boolean;\n}\n\ninterface ChatMessage {\n  id: string;\n  type: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n  suggestions?: string[];\n}\n\ninterface FinancialContext {\n  totalBalance: number;\n  monthlySpending: number;\n  savingsGoals: number;\n  creditScore: number;\n  investments: number;\n  recentTransactions: Array<{\n    id: string;\n    amount: number;\n    description: string;\n    category: string;\n  }>;\n}\n\nconst FinancialAIChat = ({ familyId, className, compact = false }: FinancialAIChatProps) => {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [currentInput, setCurrentInput] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [financialContext, setFinancialContext] = useState<FinancialContext | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n\n  const loadChatHistory = useCallback(async () => {\n    try {\n      const history = await aiFinancialService.getChatHistory(familyId);\n      setMessages(history);\n    } catch (error) {\n      console.error('Failed to load chat history:', error);\n    }\n  }, [familyId]);\n\n  const loadFinancialContext = useCallback(async () => {\n    try {\n      const [family, accounts, budgets, goals] = await Promise.all([\n        familyService.getFamilyData(familyId),\n        accountService.getAccountSummary(familyId),\n        budgetService.getBudgetSummary(familyId),\n        savingsGoalsService.getUserGoals(familyId)\n      ]);\n\n      setFinancialContext({\n        totalBalance: accounts.totalBalance,\n        monthlySpending: budgets.totalSpent,\n        savingsGoals: goals.length,\n        creditScore: 750, // This would come from credit service\n        investments: accounts.totalInvestments || 0,\n        recentTransactions: accounts.recentTransactions || []\n      });\n    } catch (error) {\n      console.error('Failed to load financial context:', error);\n    }\n  }, [familyId]);\n\n  useEffect(() => {\n    loadChatHistory();\n    loadFinancialContext();\n  }, [loadChatHistory, loadFinancialContext]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = async () => {\n    if (!currentInput.trim() || isLoading || !financialContext) return;\n\n    const userMessage: ChatMessage = {\n      id: `msg_${Date.now()}_user`,\n      type: 'user',\n      content: currentInput.trim(),\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setCurrentInput('');\n    setIsLoading(true);\n\n    try {\n      const response = await aiFinancialService.processFinancialQuery(\n        familyId,\n        currentInput.trim(),\n        financialContext\n      );\n\n      const assistantMessage: ChatMessage = {\n        id: `msg_${Date.now()}_assistant`,\n        type: 'assistant',\n        content: response.content,\n        timestamp: new Date(),\n        suggestions: response.recommendations\n      };\n\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (error) {\n      const errorMessage: ChatMessage = {\n        id: `msg_${Date.now()}_error`,\n        type: 'assistant',\n        content: 'I apologize, but I encountered an error processing your request. Please try again.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const clearChatHistory = () => {\n    aiFinancialService.clearChatHistory(familyId);\n    setMessages([]);\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const formatTimestamp = (timestamp: Date) => {\n    return timestamp.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  const getInsightIcon = (type: string) => {\n    switch (type) {\n      case 'spending_pattern':\n        return <TrendingUp className=\"w-4 h-4\" />;\n      case 'savings_opportunity':\n        return <Target className=\"w-4 h-4\" />;\n      case 'budget_analysis':\n        return <AlertCircle className=\"w-4 h-4\" />;\n      case 'investment_advice':\n        return <Sparkles className=\"w-4 h-4\" />;\n      default:\n        return <Lightbulb className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getInsightColor = (impact: string) => {\n    switch (impact) {\n      case 'high':\n        return 'text-red-400 bg-red-500/20 border-red-500/30';\n      case 'medium':\n        return 'text-yellow-400 bg-yellow-500/20 border-yellow-500/30';\n      case 'low':\n        return 'text-green-400 bg-green-500/20 border-green-500/30';\n      default:\n        return 'text-blue-400 bg-blue-500/20 border-blue-500/30';\n    }\n  };\n\n  const suggestedQuestions = [\n    \"How can I improve my savings rate?\",\n    \"What should I focus on in my budget?\",\n    \"Is my spending healthy this month?\",\n    \"Should I invest more or pay down debt?\",\n    \"How's my emergency fund looking?\"\n  ];\n\n  if (!financialContext) {\n    return (\n      <div className={cn(\"flex items-center justify-center p-8\", className)}>\n        <div className=\"text-center\">\n          <Bot className=\"w-12 h-12 text-blue-400 mx-auto mb-4 animate-pulse\" />\n          <p className=\"text-white/60\">Loading your financial context...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"flex flex-col h-full bg-white/[0.02] rounded-2xl border border-white/[0.08]\", className)}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-white/[0.08]\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-blue-500/20 rounded-xl flex items-center justify-center\">\n            <Bot className=\"w-6 h-6 text-blue-400\" />\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-white\">AI Financial Advisor</h3>\n            <p className=\"text-white/60 text-sm\">\n              {compact ? 'Ask me anything' : 'Personalized advice based on your financial data'}\n            </p>\n          </div>\n        </div>\n\n        {messages.length > 0 && (\n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={clearChatHistory}\n              className=\"p-2 rounded-lg hover:bg-white/[0.05] transition-colors text-white/60 hover:text-white\"\n              title=\"Clear chat\"\n            >\n              <Trash2 className=\"w-4 h-4\" />\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Messages */}\n      <div className={cn(\"flex-1 overflow-y-auto p-4 space-y-4\", compact ? \"max-h-96\" : \"min-h-[400px]\")}>\n        {messages.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Bot className=\"w-16 h-16 text-blue-400/50 mx-auto mb-4\" />\n            <h4 className=\"text-white font-medium mb-2\">Hi there! I'm your AI financial advisor.</h4>\n            <p className=\"text-white/60 text-sm mb-6\">\n              I have access to your complete financial picture and can provide personalized advice.\n            </p>\n            \n            <div className=\"space-y-2\">\n              <p className=\"text-white/80 text-sm font-medium\">Try asking:</p>\n              <div className=\"space-y-2\">\n                {suggestedQuestions.slice(0, compact ? 3 : 5).map((question, index) => (\n                  <button\n                    key={index}\n                    onClick={() => setCurrentInput(question)}\n                    className=\"block w-full text-left p-3 bg-white/[0.03] hover:bg-white/[0.05] border border-white/[0.05] rounded-lg text-white/80 hover:text-white text-sm transition-all\"\n                  >\n                    \"{question}\"\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n        ) : (\n          messages.map((message) => (\n            <div key={message.id} className={cn(\"flex gap-3\", message.type === 'user' ? 'justify-end' : 'justify-start')}>\n              <div className={cn(\"flex gap-3 max-w-[80%]\", message.type === 'user' ? 'flex-row-reverse' : 'flex-row')}>\n                {/* Avatar */}\n                <div className={cn(\n                  \"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0\",\n                  message.type === 'user' \n                    ? \"bg-green-500/20\" \n                    : \"bg-blue-500/20\"\n                )}>\n                  {message.type === 'user' ? (\n                    <User className=\"w-4 h-4 text-green-400\" />\n                  ) : (\n                    <Bot className=\"w-4 h-4 text-blue-400\" />\n                  )}\n                </div>\n\n                {/* Message Content */}\n                <div className={cn(\n                  \"flex flex-col gap-2\",\n                  message.type === 'user' ? 'items-end' : 'items-start'\n                )}>\n                  <div className={cn(\n                    \"rounded-2xl px-4 py-3 max-w-full\",\n                    message.type === 'user'\n                      ? \"bg-blue-500 text-white\"\n                      : \"bg-white/[0.05] border border-white/[0.08] text-white\"\n                  )}>\n                    <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">{message.content}</p>\n                  </div>\n\n                  {/* Suggestions */}\n                  {message.suggestions && message.suggestions.length > 0 && (\n                    <div className=\"space-y-2 w-full max-w-lg\">\n                      {message.suggestions.map((suggestion, index) => (\n                        <div\n                          key={index}\n                          className=\"p-3 bg-purple-500/20 border border-purple-500/30 rounded-xl text-sm\"\n                        >\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <Target className=\"w-4 h-4 text-purple-400\" />\n                            <span className=\"font-medium text-purple-400\">{suggestion}</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n\n                  <span className=\"text-xs text-white/40\">{formatTimestamp(message.timestamp)}</span>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n\n        {isLoading && (\n          <div className=\"flex gap-3 justify-start\">\n            <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n              <Bot className=\"w-4 h-4 text-blue-400\" />\n            </div>\n            <div className=\"bg-white/[0.05] border border-white/[0.08] rounded-2xl px-4 py-3\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\" />\n                <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }} />\n                <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }} />\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Input */}\n      <div className=\"p-4 border-t border-white/[0.08]\">\n        <div className=\"flex gap-3\">\n          <textarea\n            ref={inputRef}\n            value={currentInput}\n            onChange={(e) => setCurrentInput(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Ask me about your finances...\"\n            className=\"flex-1 bg-white/[0.05] border border-white/[0.08] rounded-xl px-4 py-3 text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 resize-none\"\n            rows={1}\n            disabled={isLoading}\n          />\n          <button\n            onClick={handleSendMessage}\n            disabled={!currentInput.trim() || isLoading}\n            className={cn(\n              \"p-3 rounded-xl transition-all\",\n              currentInput.trim() && !isLoading\n                ? \"bg-blue-500 hover:bg-blue-600 text-white\"\n                : \"bg-white/[0.05] text-white/40 cursor-not-allowed\"\n            )}\n          >\n            <Send className=\"w-5 h-5\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FinancialAIChat;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/examples/EnhancedEcoScore.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/examples/EnhancedEcoScore.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport EnhancedGlassCard from '../ui/EnhancedGlassCard';\nimport { Leaf, TrendingUp, Recycle } from 'lucide-react';\n\ninterface EcoScoreProps {\n  score: number;\n  metrics: {\n    carbonFootprint: number;\n    sustainableSpending: number;\n    greenTransport: number;\n    renewableEnergy: number;\n  };\n  monthlyImpact: {\n    co2Saved: number;\n    treesEquivalent: number;\n  };\n}\n\nconst EnhancedEcoScore = ({ score, metrics, monthlyImpact }: EcoScoreProps) => {\n  const [animatedScore, setAnimatedScore] = useState(0);\n\n  // Helper function to format percentages properly\n  const formatPercentage = (value: number) => {\n    return Math.round(value * 10) / 10; // Round to 1 decimal place\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setAnimatedScore(score);\n    }, 200);\n    return () => clearTimeout(timer);\n  }, [score]);\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return '#34C759';\n    if (score >= 60) return '#FF9500';\n    return '#FF3B30';\n  };\n\n  const getEcoLabel = (score: number) => {\n    if (score >= 90) return 'Eco Champion';\n    if (score >= 80) return 'Very Green';\n    if (score >= 70) return 'Eco Friendly';\n    if (score >= 60) return 'Making Progress';\n    return 'Room to Grow';\n  };\n\n  const circumference = 2 * Math.PI * 40;\n  const strokeDasharray = circumference;\n  const strokeDashoffset = circumference - (animatedScore / 100) * circumference;\n\n  return (\n    <EnhancedGlassCard \n      className=\"glass-card glass-dark bg-gradient-to-br from-green-500/20 to-emerald-500/20 liquid-gradient p-6 text-center relative overflow-hidden stagger-item\"\n      style={{ animationDelay: '100ms' }}\n      liquid={true}\n      liquidIntensity={0.7}\n      liquidDistortion={0.5}\n      liquidAnimated={true}\n      liquidInteractive={true}\n    >\n      {/* Background Gradient */}\n      <div \n        className=\"absolute inset-0 opacity-10 rounded-2xl\"\n        style={{\n          background: `linear-gradient(135deg, ${getScoreColor(score)}20, transparent 70%)`\n        }}\n      />\n      \n      <div className=\"relative z-10\">\n        <div className=\"flex items-center justify-center mb-4\">\n          <Leaf className=\"w-5 h-5 text-green-400 mr-2\" />\n          <h3 className=\"text-lg font-bold text-white\">Eco Score</h3>\n          <TrendingUp className=\"w-4 h-4 text-green-400 ml-2\" />\n        </div>\n        \n        {/* Enhanced Circular Progress with Glass Effect */}\n        <div className=\"relative flex justify-center items-center mb-4\">\n          <EnhancedGlassCard \n            className=\"p-2 rounded-full\"\n            liquid={true}\n            liquidIntensity={0.4}\n            liquidDistortion={0.3}\n            liquidAnimated={false}\n          >\n            <svg width=\"120\" height=\"120\" className=\"transform -rotate-90\">\n              <circle\n                cx=\"60\"\n                cy=\"60\"\n                r=\"40\"\n                stroke=\"rgba(255, 255, 255, 0.1)\"\n                strokeWidth=\"6\"\n                fill=\"none\"\n              />\n              <circle\n                cx=\"60\"\n                cy=\"60\"\n                r=\"40\"\n                stroke=\"url(#ecoGradient)\"\n                strokeWidth=\"6\"\n                fill=\"none\"\n                strokeDasharray={strokeDasharray}\n                strokeDashoffset={strokeDashoffset}\n                strokeLinecap=\"round\"\n                className=\"transition-all duration-1000 ease-out\"\n                style={{\n                  filter: `drop-shadow(0 0 8px ${getScoreColor(score)}40)`\n                }}\n              />\n              <defs>\n                <linearGradient id=\"ecoGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                  <stop offset=\"0%\" stopColor=\"#10b981\" />\n                  <stop offset=\"100%\" stopColor=\"#059669\" />\n                </linearGradient>\n              </defs>\n            </svg>\n          </EnhancedGlassCard>\n          \n          <div className=\"absolute inset-0 flex flex-col justify-center items-center\">\n            <div \n              className=\"text-3xl font-bold text-white transition-all duration-1000 ease-out\"\n              style={{ color: getScoreColor(score) }}\n            >\n              {Math.round(animatedScore)}\n            </div>\n            <div className=\"text-white/50 text-xs\">out of 100</div>\n          </div>\n        </div>\n        \n        <div className=\"mb-4\">\n          <div \n            className=\"text-xl font-bold mb-2\"\n            style={{ color: getScoreColor(score) }}\n          >\n            {getEcoLabel(score)}\n          </div>\n          <p className=\"text-white/70 text-sm\">\n            Environmental impact of your spending\n          </p>\n        </div>\n        \n        {/* Eco Metrics with Enhanced Glass Progress Bars */}\n        <div className=\"space-y-3 mb-4\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-white/80 text-sm\">Carbon Footprint</span>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-16 glass-progress h-2\">\n                <div \n                  className=\"glass-progress-fill red h-2 rounded-full transition-all duration-1000\"\n                  style={{ width: `${formatPercentage(metrics.carbonFootprint)}%` }}\n                />\n              </div>\n              <span className=\"text-white/60 text-xs\">Low</span>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-white/80 text-sm\">Sustainable Spending</span>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-16 glass-progress h-2\">\n                <div \n                  className=\"glass-progress-fill green h-2 rounded-full transition-all duration-1000\"\n                  style={{ width: `${formatPercentage(metrics.sustainableSpending)}%` }}\n                />\n              </div>\n              <span className=\"text-white/60 text-xs\">{formatPercentage(metrics.sustainableSpending)}%</span>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-white/80 text-sm\">Green Transport</span>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-16 glass-progress h-2\">\n                <div \n                  className=\"glass-progress-fill blue h-2 rounded-full transition-all duration-1000\"\n                  style={{ width: `${formatPercentage(metrics.greenTransport)}%` }}\n                />\n              </div>\n              <span className=\"text-white/60 text-xs\">{formatPercentage(metrics.greenTransport)}%</span>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-white/80 text-sm\">Renewable Energy</span>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-16 glass-progress h-2\">\n                <div \n                  className=\"bg-purple-500 h-2 rounded-full transition-all duration-1000\"\n                  style={{ width: `${formatPercentage(metrics.renewableEnergy)}%` }}\n                />\n              </div>\n              <span className=\"text-white/60 text-xs\">{formatPercentage(metrics.renewableEnergy)}%</span>\n            </div>\n          </div>\n        </div>\n        \n        {/* Monthly Impact with Enhanced Glass Effect */}\n        <EnhancedGlassCard \n          className=\"glass-green p-3\"\n          liquid={true}\n          liquidIntensity={0.3}\n          liquidDistortion={0.2}\n          liquidAnimated={false}\n        >\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Recycle className=\"h-4 w-4 text-green-400\" />\n            <span className=\"text-sm font-medium text-green-300\">Monthly Impact</span>\n          </div>\n          <div className=\"text-sm text-green-200 space-y-1\">\n            <div>CO₂ Saved: {monthlyImpact.co2Saved}kg</div>\n            <div>≈ {monthlyImpact.treesEquivalent} trees planted</div>\n          </div>\n        </EnhancedGlassCard>\n      </div>\n    </EnhancedGlassCard>\n  );\n};\n\nexport default EnhancedEcoScore; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/family/FamilyManagement.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/family/FamilyManagement.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { \n  Users, \n  Settings, \n  Plus, \n  Crown, \n  Shield, \n  Eye, \n  Mail,\n  Check,\n  X,\n  Edit3\n} from 'lucide-react';\nimport { Family, FamilyMember, FamilyInvitation } from '@/types/family';\nimport { familyService } from '@/features/familyService';\nimport { Switch } from '@/shared/ui/switch';\nimport { cn } from '@/shared/lib/utils';\n\ninterface FamilyManagementProps {\n  familyId: string;\n  currentUserId: string;\n}\n\nconst FamilyManagement = ({ familyId, currentUserId }: FamilyManagementProps) => {\n  const [family, setFamily] = useState<Family | null>(null);\n  const [members, setMembers] = useState<FamilyMember[]>([]);\n  const [invitations, setInvitations] = useState<FamilyInvitation[]>([]);\n  const [showInviteModal, setShowInviteModal] = useState(false);\n  const [showSettingsModal, setShowSettingsModal] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [newMemberEmail, setNewMemberEmail] = useState('');\n  const [newMemberRole, setNewMemberRole] = useState<'member' | 'admin'>('member');\n\n  const loadFamilyData = useCallback(async () => {\n    try {\n      setLoading(true);\n      const data = await familyService.getFamilyData(familyId);\n      setFamily(data.family);\n      setMembers(data.members);\n      setInvitations(data.invitations);\n    } catch (error) {\n      console.error('Failed to load family data:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [familyId]);\n\n  useEffect(() => {\n    loadFamilyData();\n  }, [loadFamilyData]);\n\n  const getRoleIcon = (role: FamilyMember['role']) => {\n    switch (role) {\n      case 'owner':\n        return <Crown className=\"w-4 h-4 text-yellow-500\" />;\n      case 'admin':\n        return <Shield className=\"w-4 h-4 text-blue-500\" />;\n      case 'member':\n        return <Users className=\"w-4 h-4 text-green-500\" />;\n      case 'viewer':\n        return <Eye className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  const getRoleColor = (role: FamilyMember['role']) => {\n    switch (role) {\n      case 'owner':\n        return 'text-yellow-500 bg-yellow-500/10 border-yellow-500/20';\n      case 'admin':\n        return 'text-blue-500 bg-blue-500/10 border-blue-500/20';\n      case 'member':\n        return 'text-green-500 bg-green-500/10 border-green-500/20';\n      case 'viewer':\n        return 'text-gray-500 bg-gray-500/10 border-gray-500/20';\n    }\n  };\n\n  const currentMember = members.find(m => m.userId === currentUserId);\n  const canManageFamily = currentMember?.role === 'owner' || currentMember?.role === 'admin';\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-black text-white\">\n        <div className=\"max-w-4xl mx-auto px-4 py-8\">\n          <div className=\"space-y-6 animate-pulse\">\n            <div className=\"h-8 bg-white/[0.05] rounded w-64\"></div>\n            <div className=\"h-32 bg-white/[0.02] rounded-xl border border-white/[0.08]\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!family) {\n    return (\n      <div className=\"min-h-screen bg-black text-white flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-red-400 mb-2\">Family Not Found</h2>\n          <p className=\"text-white/60\">The requested family could not be found.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <div className=\"max-w-4xl mx-auto px-4 py-8 space-y-8\">\n        {/* Family Header */}\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-white flex items-center gap-3\">\n                <Users className=\"w-8 h-8 text-blue-400\" />\n                {family.name}\n              </h1>\n              <p className=\"text-white/70 mt-2\">\n                {members.length} member{members.length !== 1 ? 's' : ''} • Created {family.createdAt.toLocaleDateString()}\n              </p>\n            </div>\n            \n            {canManageFamily && (\n              <div className=\"flex items-center gap-3\">\n                <button\n                  onClick={() => setShowInviteModal(true)}\n                  className=\"liquid-glass-button px-4 py-2 rounded-xl text-white/90 hover:text-white transition-all flex items-center gap-2\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                  Invite Member\n                </button>\n                \n                <button\n                  onClick={() => setShowSettingsModal(true)}\n                  className=\"liquid-glass-button p-2 rounded-xl text-white/90 hover:text-white transition-all\"\n                >\n                  <Settings className=\"w-5 h-5\" />\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Family Members */}\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <h2 className=\"text-xl font-bold text-white mb-6 flex items-center gap-3\">\n            <Users className=\"w-6 h-6 text-blue-400\" />\n            Family Members\n          </h2>\n\n          <div className=\"space-y-4\">\n            {members.map((member) => (\n              <div\n                key={member.id}\n                className=\"bg-white/[0.03] rounded-xl p-4 border border-white/[0.05] hover:bg-white/[0.04] transition-colors\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 rounded-full bg-blue-500/20 flex items-center justify-center\">\n                      <span className=\"text-blue-400 font-semibold text-lg\">\n                        {member.userId.charAt(0).toUpperCase()}\n                      </span>\n                    </div>\n                    \n                    <div>\n                      <div className=\"flex items-center gap-3\">\n                        <h3 className=\"font-semibold text-white\">\n                          User {member.userId}\n                        </h3>\n                        <div className={cn(\n                          \"flex items-center gap-1 px-2 py-1 rounded-lg border text-xs font-medium\",\n                          getRoleColor(member.role)\n                        )}>\n                          {getRoleIcon(member.role)}\n                          {member.role.charAt(0).toUpperCase() + member.role.slice(1)}\n                        </div>\n                      </div>\n                      <p className=\"text-white/60 text-sm mt-1\">\n                        Joined {member.joinedAt.toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n\n                  {canManageFamily && member.role !== 'owner' && (\n                    <button className=\"liquid-glass-button p-2 rounded-lg text-white/70 hover:text-white transition-colors\">\n                      <Edit3 className=\"w-4 h-4\" />\n                    </button>\n                  )}\n                </div>\n\n                {/* Member Permissions */}\n                <div className=\"mt-4 pt-4 border-t border-white/[0.05]\">\n                  <h4 className=\"text-sm font-medium text-white/80 mb-3\">Permissions</h4>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                    {Object.entries(member.permissions).map(([permission, granted]) => (\n                      <div key={permission} className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-white/60 capitalize\">\n                          {permission.replace('can', '').replace(/([A-Z])/g, ' $1').trim()}\n                        </span>\n                        <div className={cn(\n                          \"w-2 h-2 rounded-full\",\n                          granted ? \"bg-green-400\" : \"bg-gray-600\"\n                        )} />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Pending Invitations */}\n        {invitations.length > 0 && (\n          <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n            <h2 className=\"text-xl font-bold text-white mb-6 flex items-center gap-3\">\n              <Mail className=\"w-6 h-6 text-orange-400\" />\n              Pending Invitations\n            </h2>\n\n            <div className=\"space-y-3\">\n              {invitations.map((invitation) => (\n                <div\n                  key={invitation.id}\n                  className=\"bg-white/[0.03] rounded-xl p-4 border border-white/[0.05] flex items-center justify-between\"\n                >\n                  <div>\n                    <p className=\"font-medium text-white\">{invitation.email}</p>\n                    <p className=\"text-white/60 text-sm\">\n                      Invited as {invitation.role} • Expires {invitation.expiresAt.toLocaleDateString()}\n                    </p>\n                  </div>\n                  \n                  {canManageFamily && (\n                    <div className=\"flex items-center gap-2\">\n                      <button className=\"p-2 rounded-lg bg-red-500/20 text-red-400 hover:bg-red-500/30 transition-colors\">\n                        <X className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Family Settings */}\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <h2 className=\"text-xl font-bold text-white mb-6 flex items-center gap-3\">\n            <Settings className=\"w-6 h-6 text-blue-400\" />\n            Family Settings\n          </h2>\n\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h3 className=\"font-medium text-white mb-2\">Currency</h3>\n                <p className=\"text-white/60\">{family.settings.currency}</p>\n              </div>\n              \n              <div>\n                <h3 className=\"font-medium text-white mb-2\">Budget Period</h3>\n                <p className=\"text-white/60 capitalize\">{family.settings.budgetPeriod}</p>\n              </div>\n              \n              <div>\n                <h3 className=\"font-medium text-white mb-2\">Risk Tolerance</h3>\n                <p className=\"text-white/60 capitalize\">{family.settings.riskTolerance}</p>\n              </div>\n              \n              <div>\n                <h3 className=\"font-medium text-white mb-2\">Investment Style</h3>\n                <p className=\"text-white/60 capitalize\">{family.settings.investmentStyle}</p>\n              </div>\n            </div>\n\n            <div className=\"pt-6 border-t border-white/[0.05]\">\n              <h3 className=\"font-medium text-white mb-4\">Notification Preferences</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {Object.entries(family.settings.notifications).map(([key, value]) => (\n                  key !== 'emailDigest' && (\n                    <div key={key} className=\"flex items-center justify-between\">\n                      <span className=\"text-white/80 capitalize\">\n                        {key.replace(/([A-Z])/g, ' $1').trim()}\n                      </span>\n                      <Switch\n                        checked={value as boolean}\n                        disabled={!canManageFamily}\n                        className=\"data-[state=checked]:bg-blue-500\"\n                      />\n                    </div>\n                  )\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FamilyManagement;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/layout/AppShell.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/layout/AppShell.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport SimpleGlassCard from '@/shared/ui/SimpleGlassCard';\nimport { vueniTheme } from '@/theme/unified';\nimport { \n  Home,\n  CreditCard,\n  Receipt,\n  TrendingUp,\n  BarChart3,\n  User,\n  Settings,\n  Menu,\n  X,\n  Bell,\n  Search\n} from 'lucide-react';\n\ninterface AppShellProps {\n  children: React.ReactNode;\n  activeTab?: string;\n  onTabChange?: (tab: string) => void;\n}\n\nconst AppShell = ({ children, activeTab = 'dashboard', onTabChange }: AppShellProps) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  const navigation = [\n    { id: 'dashboard', label: 'Dashboard', icon: Home },\n    { id: 'accounts', label: 'Accounts', icon: CreditCard },\n    { id: 'transactions', label: 'Transactions', icon: Receipt },\n    { id: 'insights', label: 'Insights', icon: TrendingUp },\n    { id: 'reports', label: 'Reports', icon: BarChart3 }\n  ];\n\n  const secondaryNavigation = [\n    { id: 'profile', label: 'Profile', icon: User },\n    { id: 'settings', label: 'Settings', icon: Settings }\n  ];\n\n  const handleTabChange = (tabId: string) => {\n    onTabChange?.(tabId);\n    setIsSidebarOpen(false); // Close sidebar on mobile when selecting\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-950\">\n      {/* Top Header */}\n      <header className=\"fixed top-0 left-0 right-0 z-50\">\n        <SimpleGlassCard className=\"m-4 p-4 rounded-xl backdrop-blur-xl\">\n          <div className=\"flex items-center justify-between\">\n            {/* Left side */}\n            <div className=\"flex items-center gap-4\">\n              <button\n                onClick={() => setIsSidebarOpen(!isSidebarOpen)}\n                className=\"lg:hidden p-2 rounded-lg bg-white/[0.06] hover:bg-white/[0.08] transition-colors\"\n              >\n                {isSidebarOpen ? (\n                  <X className=\"w-5 h-5 text-white\" />\n                ) : (\n                  <Menu className=\"w-5 h-5 text-white\" />\n                )}\n              </button>\n              \n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 rounded-lg bg-blue-500 flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-sm\">V</span>\n                </div>\n                <h1 className=\"text-xl font-bold text-white\">Vueni</h1>\n              </div>\n            </div>\n\n            {/* Center - Search (hidden on mobile) */}\n            <div className=\"hidden md:flex flex-1 max-w-md mx-8\">\n              <div className=\"relative w-full\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white/40\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search transactions, accounts...\"\n                  className=\"w-full pl-10 pr-4 py-2 bg-white/[0.06] border border-white/[0.08] rounded-lg text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all\"\n                />\n              </div>\n            </div>\n\n            {/* Right side */}\n            <div className=\"flex items-center gap-3\">\n              <button className=\"p-2 rounded-lg bg-white/[0.06] hover:bg-white/[0.08] transition-colors relative\">\n                <Bell className=\"w-5 h-5 text-white/70\" />\n                <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full\"></div>\n              </button>\n              \n              <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-blue-400 to-purple-500 flex items-center justify-center\">\n                <span className=\"text-white text-sm font-medium\">JD</span>\n              </div>\n            </div>\n          </div>\n        </SimpleGlassCard>\n      </header>\n\n      {/* Sidebar */}\n      <aside className={`\n        fixed top-0 left-0 z-40 h-full w-64 pt-24 pb-4 pl-4 transform transition-transform duration-300 ease-in-out\n        ${isSidebarOpen ? 'translate-x-0' : '-translate-x-full'}\n        lg:translate-x-0\n      `}>\n        <SimpleGlassCard className=\"h-full p-4 rounded-xl\">\n          {/* Main Navigation */}\n          <nav className=\"space-y-2\">\n            <div className=\"mb-6\">\n              <p className=\"text-xs font-medium text-white/50 uppercase tracking-wider mb-3\">\n                Main\n              </p>\n              {navigation.map((item) => {\n                const Icon = item.icon;\n                return (\n                  <button\n                    key={item.id}\n                    onClick={() => handleTabChange(item.id)}\n                    className={`\n                      w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left transition-all duration-200\n                      ${activeTab === item.id \n                        ? 'bg-blue-500/20 text-blue-300 border border-blue-500/30' \n                        : 'text-white/70 hover:text-white hover:bg-white/[0.05]'\n                      }\n                    `}\n                  >\n                    <Icon className=\"w-5 h-5 flex-shrink-0\" />\n                    <span className=\"font-medium\">{item.label}</span>\n                  </button>\n                );\n              })}\n            </div>\n\n            {/* Secondary Navigation */}\n            <div>\n              <p className=\"text-xs font-medium text-white/50 uppercase tracking-wider mb-3\">\n                Account\n              </p>\n              {secondaryNavigation.map((item) => {\n                const Icon = item.icon;\n                return (\n                  <button\n                    key={item.id}\n                    onClick={() => handleTabChange(item.id)}\n                    className={`\n                      w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left transition-all duration-200\n                      ${activeTab === item.id \n                        ? 'bg-blue-500/20 text-blue-300 border border-blue-500/30' \n                        : 'text-white/70 hover:text-white hover:bg-white/[0.05]'\n                      }\n                    `}\n                  >\n                    <Icon className=\"w-5 h-5 flex-shrink-0\" />\n                    <span className=\"font-medium\">{item.label}</span>\n                  </button>\n                );\n              })}\n            </div>\n          </nav>\n\n          {/* Bottom Card */}\n          <div className=\"mt-auto pt-6\">\n            <div className=\"p-4 rounded-lg bg-gradient-to-br from-blue-500/10 to-purple-500/10 border border-blue-500/20\">\n              <h4 className=\"text-sm font-medium text-white mb-1\">\n                Get Vueni Pro\n              </h4>\n              <p className=\"text-xs text-white/60 mb-3\">\n                Unlock advanced insights and unlimited exports\n              </p>\n              <button className=\"w-full py-2 px-3 bg-blue-500 hover:bg-blue-600 rounded-lg text-white text-sm font-medium transition-colors\">\n                Upgrade Now\n              </button>\n            </div>\n          </div>\n        </SimpleGlassCard>\n      </aside>\n\n      {/* Overlay for mobile */}\n      {isSidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-30 lg:hidden\"\n          onClick={() => setIsSidebarOpen(false)}\n        />\n      )}\n\n      {/* Main Content */}\n      <main className={`\n        pt-32 pb-6 px-4 transition-all duration-300\n        lg:ml-64 lg:pl-4\n      `}>\n        <div className=\"max-w-none\">\n          {children}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default AppShell; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/performance/PerformanceMonitor.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/performance/PerformanceMonitor.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\nimport { UniversalCard } from '@/shared/ui/UniversalCard';\nimport { Activity, Zap, Clock, TrendingUp } from 'lucide-react';\n\ninterface PerformanceMetrics {\n  renderTime: number;\n  bundleSize: number;\n  memoryUsage: number;\n  componentCount: number;\n  reRenderCount: number;\n  cacheHitRate: number;\n}\n\ninterface PerformanceMonitorProps {\n  enabled?: boolean;\n  position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';\n}\n\n// Advanced Performance Monitor for Phase 2 optimizations\nexport const PerformanceMonitor = React.memo<PerformanceMonitorProps>(({ \n  enabled = import.meta.env.DEV,\n  position = 'top-right' \n}) => {\n  // ALL HOOKS MUST BE AT THE TOP - No conditional hooks allowed\n  const [metrics, setMetrics] = useState<PerformanceMetrics>({\n    renderTime: 0,\n    bundleSize: 0,\n    memoryUsage: 0,\n    componentCount: 0,\n    reRenderCount: 0,\n    cacheHitRate: 0\n  });\n  const [isVisible, setIsVisible] = useState(false);\n  const [performanceEntries, setPerformanceEntries] = useState<PerformanceEntry[]>([]);\n\n  // Memoized position styles\n  const positionStyles = useMemo(() => {\n    const styles = {\n      'top-right': 'top-4 right-4',\n      'top-left': 'top-4 left-4', \n      'bottom-right': 'bottom-4 right-4',\n      'bottom-left': 'bottom-4 left-4'\n    };\n    return styles[position];\n  }, [position]);\n\n  // Performance monitoring logic\n  useEffect(() => {\n    if (!enabled) return; // Early return AFTER hooks\n\n    const observer = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      setPerformanceEntries(prev => [...prev, ...entries].slice(-50)); // Keep last 50 entries\n    });\n\n    observer.observe({ entryTypes: ['measure', 'navigation', 'paint'] });\n\n    // Memory monitoring\n    const memoryTimer = setInterval(() => {\n      if ('memory' in performance) {\n        const memory = (performance as unknown as { memory?: { usedJSHeapSize: number } }).memory;\n        if (memory) {\n          setMetrics(prev => ({\n            ...prev,\n            memoryUsage: Math.round(memory.usedJSHeapSize / 1024 / 1024) // MB\n          }));\n        }\n      }\n    }, 1000);\n\n    // Component count monitoring (estimate based on DOM)\n    const componentTimer = setInterval(() => {\n      const reactElements = document.querySelectorAll('[data-reactroot], [data-react-class]').length;\n      const estimatedComponents = document.querySelectorAll('div[class*=\"react\"], div[id*=\"react\"]').length;\n      \n      setMetrics(prev => ({\n        ...prev,\n        componentCount: Math.max(reactElements, estimatedComponents)\n      }));\n    }, 2000);\n\n    return () => {\n      observer.disconnect();\n      clearInterval(memoryTimer);\n      clearInterval(componentTimer);\n    };\n  }, [enabled]);\n\n  // Calculate performance scores\n  const performanceScore = useMemo(() => {\n    if (!enabled) return 0;\n    \n    const renderScore = metrics.renderTime < 16 ? 100 : Math.max(0, 100 - (metrics.renderTime - 16) * 2);\n    const memoryScore = metrics.memoryUsage < 50 ? 100 : Math.max(0, 100 - (metrics.memoryUsage - 50));\n    const cacheScore = metrics.cacheHitRate;\n    \n    return Math.round((renderScore + memoryScore + cacheScore) / 3);\n  }, [metrics, enabled]);\n\n  // Early return check AFTER all hooks\n  if (!enabled) {\n    return null;\n  }\n\n  // Get performance color\n  const getPerformanceColor = (score: number) => {\n    if (score >= 90) return '#22c55e'; // green\n    if (score >= 70) return '#eab308'; // yellow  \n    if (score >= 50) return '#f97316'; // orange\n    return '#ef4444'; // red\n  };\n\n  return (\n    <div className={`fixed ${positionStyles} z-50 transition-all duration-300`}>\n      {/* Toggle Button */}\n      <button\n        onClick={() => setIsVisible(!isVisible)}\n        className=\"bg-black/80 backdrop-blur-sm text-white p-2 rounded-full border border-white/20 hover:bg-black/90 transition-colors\"\n        title=\"Performance Monitor\"\n      >\n        <Activity className=\"w-4 h-4\" />\n      </button>\n\n      {/* Performance Panel */}\n      {isVisible && (\n        <UniversalCard \n          variant=\"glass\" \n          className=\"mt-2 p-4 w-80 max-h-96 overflow-y-auto\"\n          blur=\"heavy\"\n        >\n          <div className=\"space-y-4\">\n            {/* Header */}\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-white font-bold text-sm\">Performance Monitor</h3>\n              <div \n                className=\"text-xs font-semibold px-2 py-1 rounded\"\n                style={{ \n                  backgroundColor: getPerformanceColor(performanceScore) + '20',\n                  color: getPerformanceColor(performanceScore)\n                }}\n              >\n                Score: {performanceScore}\n              </div>\n            </div>\n\n            {/* Key Metrics */}\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div className=\"bg-white/5 rounded-xl p-3\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <Clock className=\"w-3 h-3 text-blue-400\" />\n                  <span className=\"text-xs text-white/60\">Render Time</span>\n                </div>\n                <div className=\"text-sm font-semibold text-white\">\n                  {metrics.renderTime.toFixed(1)}ms\n                </div>\n              </div>\n\n              <div className=\"bg-white/5 rounded-xl p-3\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <Zap className=\"w-3 h-3 text-green-400\" />\n                  <span className=\"text-xs text-white/60\">Memory</span>\n                </div>\n                <div className=\"text-sm font-semibold text-white\">\n                  {metrics.memoryUsage}MB\n                </div>\n              </div>\n\n              <div className=\"bg-white/5 rounded-xl p-3\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <TrendingUp className=\"w-3 h-3 text-purple-400\" />\n                  <span className=\"text-xs text-white/60\">Components</span>\n                </div>\n                <div className=\"text-sm font-semibold text-white\">\n                  {metrics.componentCount}\n                </div>\n              </div>\n\n              <div className=\"bg-white/5 rounded-xl p-3\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <Activity className=\"w-3 h-3 text-orange-400\" />\n                  <span className=\"text-xs text-white/60\">Re-renders</span>\n                </div>\n                <div className=\"text-sm font-semibold text-white\">\n                  {metrics.reRenderCount}\n                </div>\n              </div>\n            </div>\n\n            {/* Optimization Status */}\n            <div className=\"space-y-2\">\n              <h4 className=\"text-xs font-semibold text-white\">Phase 2 Optimizations</h4>\n              <div className=\"space-y-1\">\n                <OptimizationStatus \n                  label=\"React.memo\" \n                  enabled={true} \n                  description=\"Components optimized for re-rendering\"\n                />\n                <OptimizationStatus \n                  label=\"Lazy Loading\" \n                  enabled={true} \n                  description=\"Route-based code splitting active\"\n                />\n                <OptimizationStatus \n                  label=\"useMemo\" \n                  enabled={true} \n                  description=\"Expensive calculations memoized\"\n                />\n                <OptimizationStatus \n                  label=\"UniversalCard\" \n                  enabled={true} \n                  description=\"Consolidated card components\"\n                />\n              </div>\n            </div>\n\n            {/* Performance Tips */}\n            <div className=\"bg-blue-500/10 rounded-xl p-3 border border-blue-500/20\">\n              <div className=\"text-xs font-semibold text-blue-400 mb-1\">Optimization Tips</div>\n              <div className=\"text-xs text-white/70 space-y-1\">\n                {performanceScore < 70 && (\n                  <div>• Consider reducing component tree depth</div>\n                )}\n                {metrics.memoryUsage > 100 && (\n                  <div>• Memory usage high - check for memory leaks</div>\n                )}\n                {metrics.renderTime > 20 && (\n                  <div>• Render time high - add more React.memo</div>\n                )}\n                <div>• Phase 2 optimizations active: 27% code reduction</div>\n              </div>\n            </div>\n          </div>\n        </UniversalCard>\n      )}\n    </div>\n  );\n});\n\n// Helper component for optimization status\nconst OptimizationStatus = React.memo<{\n  label: string;\n  enabled: boolean;\n  description: string;\n}>(({ label, enabled, description }) => (\n  <div className=\"flex items-center justify-between text-xs\">\n    <span className=\"text-white/70\">{label}</span>\n    <div className=\"flex items-center space-x-2\">\n      <span \n        className={`w-2 h-2 rounded-full ${enabled ? 'bg-green-400' : 'bg-red-400'}`}\n        title={description}\n      />\n      <span className={enabled ? 'text-green-400' : 'text-red-400'}>\n        {enabled ? 'ON' : 'OFF'}\n      </span>\n    </div>\n  </div>\n));\n\nPerformanceMonitor.displayName = 'PerformanceMonitor';\nOptimizationStatus.displayName = 'OptimizationStatus';\n\nexport default PerformanceMonitor;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/shared/ConfigurableInsightsPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/shared/ConfigurableInsightsPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, Suspense, lazy } from 'react';\nimport { Heart, Leaf, DollarSign, TrendingUp, Calendar, BarChart3, Settings, Filter, Eye, EyeOff, Download } from 'lucide-react';\nimport { Card } from '@/shared/ui/card';\nimport { Button } from '@/shared/ui/button';\nimport { Badge } from '@/shared/ui/badge';\nimport { Switch } from '@/shared/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/shared/ui/select';\nimport { cn } from '@/shared/lib/utils';\nimport { SharedScoreCircle, ScoreGroup } from './SharedScoreCircle';\nimport { InputSanitizer } from '@/shared/utils/sanitize';\n\n// Lazy load heavy components for performance\nconst TimeSeriesChart = lazy(() => import('@/features/insights/components/TimeSeriesChart'));\nconst SpendingTrendsChart = lazy(() => import('@/features/insights/components/SpendingTrendsChart'));\nconst CategoryTrendsChart = lazy(() => import('@/features/insights/components/CategoryTrendsChart'));\nconst FinancialCard = lazy(() => import('@/features/insights/components/FinancialCard'));\nconst ComprehensiveWellnessCard = lazy(() => import('@/features/insights/components/components/ComprehensiveWellnessCard'));\nconst ComprehensiveEcoCard = lazy(() => import('@/features/insights/components/components/ComprehensiveEcoCard'));\n\nexport interface Transaction {\n  id: string;\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n}\n\nexport interface Account {\n  id: string;\n  type: string;\n  nickname: string;\n  balance: number;\n  availableBalance: number;\n  currency: string;\n}\n\ntype LayoutVariant = 'standard' | 'refined' | 'enhanced' | 'optimized' | 'comprehensive';\ntype ViewMode = 'overview' | 'trends' | 'financial' | 'health' | 'eco';\n\ninterface LayoutConfig {\n  showHeader: boolean;\n  showTabs: boolean;\n  showScoreCards: boolean;\n  showCharts: boolean;\n  showDetailedCards: boolean;\n  compactMode: boolean;\n  animationsEnabled: boolean;\n  autoRefresh: boolean;\n}\n\nconst defaultLayouts: Record<LayoutVariant, LayoutConfig> = {\n  standard: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: false,\n  },\n  refined: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    compactMode: true,\n    animationsEnabled: true,\n    autoRefresh: false,\n  },\n  enhanced: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n  },\n  optimized: {\n    showHeader: false,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: false,\n    showDetailedCards: false,\n    compactMode: true,\n    animationsEnabled: false,\n    autoRefresh: false,\n  },\n  comprehensive: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n  },\n};\n\nexport interface ConfigurableInsightsPageProps {\n  transactions: Transaction[];\n  accounts: Account[];\n  variant?: LayoutVariant;\n  customLayout?: Partial<LayoutConfig>;\n  className?: string;\n  showSettings?: boolean;\n  onExportData?: () => void;\n}\n\nconst LoadingSpinner = () => (\n  <div className=\"flex items-center justify-center py-12\">\n    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white/50\"></div>\n  </div>\n);\n\nexport const ConfigurableInsightsPage = React.memo<ConfigurableInsightsPageProps>(({\n  transactions,\n  accounts,\n  variant = 'standard',\n  customLayout,\n  className,\n  showSettings = false,\n  onExportData,\n}) => {\n  const [activeTab, setActiveTab] = useState<ViewMode>('overview');\n  const [layout, setLayout] = useState<LayoutConfig>(() => ({\n    ...defaultLayouts[variant],\n    ...customLayout,\n  }));\n  const [scores, setScores] = useState({ financial: 0, health: 0, eco: 0 });\n  const [isLoading, setIsLoading] = useState(true);\n  const [showLayoutSettings, setShowLayoutSettings] = useState(false);\n  const [isVisible, setIsVisible] = useState(true);\n\n  // Memoized data calculations\n  const financialData = useMemo(() => {\n    const monthlyIncome = transactions\n      .filter(t => t.amount > 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const monthlySpending = Math.abs(transactions\n      .filter(t => t.amount < 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0));\n\n    const totalBalance = accounts.reduce((sum, acc) => sum + acc.balance, 0);\n    const spendingRatio = monthlyIncome > 0 ? (monthlySpending / monthlyIncome) * 100 : 0;\n    const emergencyFundMonths = monthlySpending > 0 ? totalBalance / monthlySpending : 0;\n    const savingsRate = monthlyIncome > 0 ? ((monthlyIncome - monthlySpending) / monthlyIncome) * 100 : 0;\n    \n    const creditCardDebt = Math.abs(accounts\n      .filter(acc => acc.type === 'Credit Card' && acc.balance < 0)\n      .reduce((sum, acc) => sum + acc.balance, 0));\n    const debtToIncomeRatio = monthlyIncome > 0 ? (creditCardDebt / (monthlyIncome * 12)) * 100 : 0;\n    \n    const completedTransactions = transactions.filter(t => t.status === 'completed').length;\n    const totalTransactions = transactions.length;\n    const billPaymentScore = totalTransactions > 0 ? Math.round((completedTransactions / totalTransactions) * 100) : 100;\n\n    return {\n      overallScore: scores.financial,\n      monthlyIncome,\n      monthlySpending,\n      totalBalance,\n      savingsRate,\n      spendingRatio,\n      emergencyFundMonths,\n      debtToIncomeRatio,\n      billPaymentScore,\n    };\n  }, [transactions, accounts, scores.financial]);\n\n  const wellnessData = useMemo(() => ({\n    overallScore: scores.health,\n    monthlySpending: {\n      fitness: 85,\n      nutrition: 38,\n      healthcare: 340,\n      wellness: 75,\n      supplements: 45,\n      mentalHealth: 120\n    },\n    healthTrends: {\n      exercise: 'up' as const,\n      nutrition: 'stable' as const,\n      sleep: 'stable' as const,\n      stress: 'down' as const\n    }\n  }), [scores.health]);\n\n  const ecoData = useMemo(() => ({\n    overallScore: scores.eco,\n    monthlyImpact: {\n      co2Saved: 48,\n      treesEquivalent: 2,\n      waterSaved: 384,\n      energySaved: 256\n    },\n    monthlySpending: {\n      sustainableFood: 127,\n      renewableEnergy: 85,\n      ecoTransport: 45,\n      greenProducts: 120,\n      carbonOffset: 25,\n      conservation: 60\n    },\n    environmentalTrends: {\n      carbonFootprint: 'down' as const,\n      sustainability: 'up' as const,\n      renewable: 'up' as const,\n      waste: 'stable' as const\n    }\n  }), [scores.eco]);\n\n  // Load scores with error handling\n  useEffect(() => {\n    const loadScores = async () => {\n      setIsLoading(true);\n      try {\n        // Simulate score calculation\n        await new Promise(resolve => setTimeout(resolve, 500));\n        setScores({\n          financial: 72 + Math.floor(Math.random() * 20),\n          health: 75 + Math.floor(Math.random() * 20),\n          eco: 82 + Math.floor(Math.random() * 15),\n        });\n      } catch (error) {\n        console.error('Error loading scores:', error);\n        setScores({ financial: 72, health: 75, eco: 82 });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadScores();\n  }, [transactions, accounts]);\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (!layout.autoRefresh) return;\n\n    const interval = setInterval(() => {\n      setScores(prev => ({\n        financial: Math.max(0, Math.min(100, prev.financial + (Math.random() - 0.5) * 4)),\n        health: Math.max(0, Math.min(100, prev.health + (Math.random() - 0.5) * 4)),\n        eco: Math.max(0, Math.min(100, prev.eco + (Math.random() - 0.5) * 4)),\n      }));\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, [layout.autoRefresh]);\n\n  const tabs = [\n    { id: 'overview' as ViewMode, label: 'Overview', icon: TrendingUp },\n    { id: 'trends' as ViewMode, label: 'Trends', icon: BarChart3 },\n    { id: 'financial' as ViewMode, label: 'Financial', icon: DollarSign },\n    { id: 'health' as ViewMode, label: 'Health', icon: Heart },\n    { id: 'eco' as ViewMode, label: 'Eco', icon: Leaf },\n  ];\n\n  const handleLayoutChange = (key: keyof LayoutConfig, value: boolean) => {\n    setLayout(prev => ({ ...prev, [key]: value }));\n  };\n\n  if (isLoading) {\n    return (\n      <Card className={cn('w-full text-white bg-black/20 backdrop-blur-sm', className)}>\n        <div className=\"flex items-center justify-center py-20\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white/50\"></div>\n            <span className=\"text-white text-lg\">Loading insights...</span>\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <div className={cn('w-full text-white space-y-6', className)} data-testid=\"configurable-insights\">\n      {/* Header */}\n      {layout.showHeader && (\n        <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className={cn(\n                'font-bold text-white mb-2',\n                layout.compactMode ? 'text-2xl' : 'text-3xl lg:text-4xl'\n              )}>\n                Financial Insights\n              </h1>\n              <p className=\"text-white/70 text-sm lg:text-base\">\n                Comprehensive analysis of your financial health, wellness spending, and environmental impact\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setIsVisible(!isVisible)}\n                className=\"text-white/70 hover:text-white\"\n              >\n                {isVisible ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </Button>\n              \n              {onExportData && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={onExportData}\n                  className=\"text-white/70 hover:text-white\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                </Button>\n              )}\n              \n              {showSettings && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setShowLayoutSettings(!showLayoutSettings)}\n                  className=\"text-white/70 hover:text-white\"\n                >\n                  <Settings className=\"h-4 w-4\" />\n                </Button>\n              )}\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Layout Settings */}\n      {showLayoutSettings && (\n        <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-4\">\n          <h3 className=\"text-lg font-semibold text-white mb-4\">Layout Settings</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Compact Mode</span>\n              <Switch\n                checked={layout.compactMode}\n                onCheckedChange={(checked) => handleLayoutChange('compactMode', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Animations</span>\n              <Switch\n                checked={layout.animationsEnabled}\n                onCheckedChange={(checked) => handleLayoutChange('animationsEnabled', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Auto Refresh</span>\n              <Switch\n                checked={layout.autoRefresh}\n                onCheckedChange={(checked) => handleLayoutChange('autoRefresh', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Show Charts</span>\n              <Switch\n                checked={layout.showCharts}\n                onCheckedChange={(checked) => handleLayoutChange('showCharts', checked)}\n              />\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Tab Navigation */}\n      {layout.showTabs && (\n        <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-2\">\n          <div className=\"flex flex-wrap justify-center gap-2\">\n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <Button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  variant={activeTab === tab.id ? \"default\" : \"ghost\"}\n                  className={cn(\n                    'flex items-center space-x-2 transition-all duration-300',\n                    activeTab === tab.id\n                      ? 'bg-white/20 text-white border-white/30'\n                      : 'text-white/70 hover:text-white/90 hover:bg-white/10'\n                  )}\n                >\n                  <Icon className=\"w-4 h-4\" />\n                  <span>{tab.label}</span>\n                </Button>\n              );\n            })}\n          </div>\n        </Card>\n      )}\n\n      {/* Content */}\n      <div className={cn('transition-all duration-300', !isVisible && 'blur-sm opacity-50')}>\n        {activeTab === 'overview' && (\n          <div className=\"space-y-6\">\n            {/* Score Overview */}\n            {layout.showScoreCards && (\n              <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-6\">\n                <h3 className=\"text-xl font-bold text-white mb-6 text-center\">\n                  Your Overall Scores\n                </h3>\n                <div className={cn(\n                  'grid gap-8',\n                  layout.compactMode ? 'grid-cols-3' : 'grid-cols-1 sm:grid-cols-3'\n                )}>\n                  <div className=\"text-center\">\n                    <SharedScoreCircle \n                      score={scores.financial} \n                      type=\"financial\"\n                      size={layout.compactMode ? \"md\" : \"lg\"}\n                      label=\"Financial Health\"\n                      showLabel={true}\n                      animated={layout.animationsEnabled}\n                    />\n                  </div>\n                  <div className=\"text-center\">\n                    <SharedScoreCircle \n                      score={scores.health} \n                      type=\"health\"\n                      size={layout.compactMode ? \"md\" : \"lg\"}\n                      label=\"Wellness Score\"\n                      showLabel={true}\n                      animated={layout.animationsEnabled}\n                    />\n                  </div>\n                  <div className=\"text-center\">\n                    <SharedScoreCircle \n                      score={scores.eco} \n                      type=\"eco\"\n                      size={layout.compactMode ? \"md\" : \"lg\"}\n                      label=\"Eco Impact\"\n                      showLabel={true}\n                      animated={layout.animationsEnabled}\n                    />\n                  </div>\n                </div>\n              </Card>\n            )}\n\n            {/* Quick Summary Cards */}\n            <div className={cn(\n              'grid gap-6',\n              layout.compactMode ? 'grid-cols-3' : 'grid-cols-1 lg:grid-cols-3'\n            )}>\n              <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-4\">\n                <div className=\"flex items-center space-x-3 mb-3\">\n                  <div className=\"p-2 rounded-lg bg-blue-500/20\">\n                    <DollarSign className=\"w-5 h-5 text-blue-400\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-bold text-white\">Financial Health</h4>\n                    <p className=\"text-white/70 text-sm\">Score: {scores.financial}/100</p>\n                  </div>\n                </div>\n                <p className=\"text-white/60 text-sm\">\n                  Monthly spending: ${financialData.monthlySpending.toLocaleString()}\n                </p>\n              </Card>\n\n              <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-4\">\n                <div className=\"flex items-center space-x-3 mb-3\">\n                  <div className=\"p-2 rounded-lg bg-red-500/20\">\n                    <Heart className=\"w-5 h-5 text-red-400\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-bold text-white\">Wellness</h4>\n                    <p className=\"text-white/70 text-sm\">Score: {scores.health}/100</p>\n                  </div>\n                </div>\n                <p className=\"text-white/60 text-sm\">\n                  Monthly wellness: ${Object.values(wellnessData.monthlySpending).reduce((sum, amount) => sum + amount, 0).toLocaleString()}\n                </p>\n              </Card>\n\n              <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-4\">\n                <div className=\"flex items-center space-x-3 mb-3\">\n                  <div className=\"p-2 rounded-lg bg-green-500/20\">\n                    <Leaf className=\"w-5 h-5 text-green-400\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-bold text-white\">Eco Impact</h4>\n                    <p className=\"text-white/70 text-sm\">Score: {scores.eco}/100</p>\n                  </div>\n                </div>\n                <p className=\"text-white/60 text-sm\">\n                  CO₂ saved: {ecoData.monthlyImpact.co2Saved}kg this month\n                </p>\n              </Card>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'trends' && layout.showCharts && (\n          <div className=\"space-y-6\">\n            <Suspense fallback={<LoadingSpinner />}>\n              <TimeSeriesChart \n                data={[]} \n                title=\"Score Progress Over Time (Past 12 Months)\"\n              />\n              <SpendingTrendsChart \n                data={[]} \n                title=\"Monthly Financial Overview\"\n              />\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <CategoryTrendsChart \n                  data={[]} \n                  type=\"health\"\n                  title=\"Health & Wellness Spending Trends\"\n                />\n                <CategoryTrendsChart \n                  data={[]} \n                  type=\"eco\"\n                  title=\"Eco & Sustainability Spending Trends\"\n                />\n              </div>\n            </Suspense>\n          </div>\n        )}\n\n        {activeTab === 'financial' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <FinancialCard data={financialData} />\n          </Suspense>\n        )}\n\n        {activeTab === 'health' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <ComprehensiveWellnessCard \n              score={wellnessData.overallScore}\n              healthKitData={{}}\n              spendingCategories={wellnessData.monthlySpending}\n              trends={wellnessData.healthTrends}\n            />\n          </Suspense>\n        )}\n\n        {activeTab === 'eco' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <ComprehensiveEcoCard \n              score={ecoData.overallScore}\n              ecoMetrics={{}}\n              spendingCategories={ecoData.monthlySpending}\n              monthlyImpact={ecoData.monthlyImpact}\n              trends={ecoData.environmentalTrends}\n            />\n          </Suspense>\n        )}\n      </div>\n    </div>\n  );\n});\n\nConfigurableInsightsPage.displayName = 'ConfigurableInsightsPage'; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/shared/SharedScoreCircle.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/shared/SharedScoreCircle.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo, useEffect, useState, useMemo } from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport { formatScore, formatFinancialScore } from '@/shared/utils/formatters';\n\nexport type ScoreType = 'health' | 'eco' | 'financial';\n\nexport interface SharedScoreCircleProps {\n  score: number;\n  type?: ScoreType;\n  label?: string;\n  size?: 'sm' | 'md' | 'lg';\n  showLabel?: boolean;\n  animated?: boolean;\n  className?: string;\n}\n\nconst sizeClasses = {\n  sm: 'w-8 h-8 text-xs',\n  md: 'w-10 h-10 text-sm',\n  lg: 'w-12 h-12 text-base',\n};\n\nconst getScoreColor = (score: number, type?: ScoreType): string => {\n  if (type === 'health') {\n    if (score >= 80) return 'text-green-500 border-green-500';\n    if (score >= 60) return 'text-yellow-500 border-yellow-500';\n    return 'text-red-500 border-red-500';\n  }\n  \n  if (type === 'eco') {\n    if (score >= 80) return 'text-emerald-500 border-emerald-500';\n    if (score >= 60) return 'text-amber-500 border-amber-500';\n    return 'text-orange-500 border-orange-500';\n  }\n  \n  if (type === 'financial') {\n    if (score >= 80) return 'text-blue-500 border-blue-500';\n    if (score >= 60) return 'text-indigo-500 border-indigo-500';\n    return 'text-purple-500 border-purple-500';\n  }\n  \n  // Default color scheme\n  if (score >= 80) return 'text-green-500 border-green-500';\n  if (score >= 60) return 'text-yellow-500 border-yellow-500';\n  return 'text-red-500 border-red-500';\n};\n\nconst getScoreBackground = (score: number, type?: ScoreType): string => {\n  const opacity = 'bg-opacity-10';\n  \n  if (type === 'health') {\n    if (score >= 80) return `bg-green-500 ${opacity}`;\n    if (score >= 60) return `bg-yellow-500 ${opacity}`;\n    return `bg-red-500 ${opacity}`;\n  }\n  \n  if (type === 'eco') {\n    if (score >= 80) return `bg-emerald-500 ${opacity}`;\n    if (score >= 60) return `bg-amber-500 ${opacity}`;\n    return `bg-orange-500 ${opacity}`;\n  }\n  \n  if (type === 'financial') {\n    if (score >= 80) return `bg-blue-500 ${opacity}`;\n    if (score >= 60) return `bg-indigo-500 ${opacity}`;\n    return `bg-purple-500 ${opacity}`;\n  }\n  \n  // Default\n  if (score >= 80) return `bg-green-500 ${opacity}`;\n  if (score >= 60) return `bg-yellow-500 ${opacity}`;\n  return `bg-red-500 ${opacity}`;\n};\n\nexport const SharedScoreCircle = memo(({\n  score,\n  type,\n  label,\n  size = 'md',\n  showLabel = false,\n  animated = false,\n  className,\n}: SharedScoreCircleProps) => {\n  const normalizedScore = Math.max(0, Math.min(100, score));\n  const circumference = 2 * Math.PI * 36; // radius = 36\n  const strokeDashoffset = circumference - (normalizedScore / 100) * circumference;\n\n  return (\n    <div className={cn('flex flex-col items-center gap-1', className)}>\n      <div\n        className={cn(\n          'relative flex items-center justify-center rounded-full border-2 transition-all',\n          sizeClasses[size],\n          getScoreColor(normalizedScore, type),\n          getScoreBackground(normalizedScore, type),\n          animated && 'animate-pulse'\n        )}\n        data-testid={`${type || 'score'}-circle`}\n      >\n        {/* SVG Progress Ring for larger sizes */}\n        {size === 'lg' && (\n          <svg\n            className=\"absolute inset-0 -rotate-90\"\n            width=\"100%\"\n            height=\"100%\"\n            viewBox=\"0 0 80 80\"\n          >\n            <circle\n              cx=\"40\"\n              cy=\"40\"\n              r=\"36\"\n              stroke=\"currentColor\"\n              strokeWidth=\"4\"\n              fill=\"none\"\n              opacity=\"0.2\"\n            />\n            <circle\n              cx=\"40\"\n              cy=\"40\"\n              r=\"36\"\n              stroke=\"currentColor\"\n              strokeWidth=\"4\"\n              fill=\"none\"\n              strokeDasharray={circumference}\n              strokeDashoffset={strokeDashoffset}\n              strokeLinecap=\"round\"\n              className={cn(\n                'transition-all duration-500',\n                animated && 'animate-[spin_10s_linear_infinite]'\n              )}\n            />\n          </svg>\n        )}\n        \n        {/* Center content */}\n        <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n          <span \n            className={cn(\n              \"font-bold text-white tabular-nums leading-none\",\n              sizeClasses[size]\n            )}\n          >\n            {type === 'financial' ? formatFinancialScore(normalizedScore) : formatScore(normalizedScore)}\n          </span>\n          {showLabel && (\n            <span \n              className={cn(\n                \"text-white/60 leading-none mt-1\",\n                \"text-xs\"\n              )}\n            >\n              {label || (type === 'financial' ? 'Financial' : type === 'health' ? 'Health' : 'Eco')}\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nSharedScoreCircle.displayName = 'SharedScoreCircle';\n\n// Export a compound component for grouped scores\nexport interface ScoreGroupProps {\n  scores: {\n    health?: number;\n    eco?: number;\n    financial?: number;\n  };\n  size?: 'sm' | 'md' | 'lg';\n  showLabels?: boolean;\n  animated?: boolean;\n  className?: string;\n}\n\nexport const ScoreGroup = memo(({\n  scores,\n  size = 'md',\n  showLabels = false,\n  animated = false,\n  className,\n}: ScoreGroupProps) => {\n  return (\n    <div className={cn('flex items-center gap-2', className)}>\n      {scores.health !== undefined && (\n        <SharedScoreCircle\n          score={scores.health}\n          type=\"health\"\n          label=\"Health\"\n          size={size}\n          showLabel={showLabels}\n          animated={animated}\n          data-testid=\"health-score\"\n        />\n      )}\n      {scores.eco !== undefined && (\n        <SharedScoreCircle\n          score={scores.eco}\n          type=\"eco\"\n          label=\"Eco\"\n          size={size}\n          showLabel={showLabels}\n          animated={animated}\n          data-testid=\"eco-score\"\n        />\n      )}\n      {scores.financial !== undefined && (\n        <SharedScoreCircle\n          score={scores.financial}\n          type=\"financial\"\n          label=\"Financial\"\n          size={size}\n          showLabel={showLabels}\n          animated={animated}\n          data-testid=\"financial-score\"\n        />\n      )}\n    </div>\n  );\n});\n\nScoreGroup.displayName = 'ScoreGroup'; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/shared/VueniConsolidationDemo.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/shared/VueniConsolidationDemo.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  VueniUnifiedTransactionList,\n  VueniUnifiedInsightsPage,\n  VueniDesignSystem,\n  FeatureFlagProvider,\n  useFeatureFlags,\n  transactionListPresets,\n  insightsPresets,\n  TransactionVariant,\n  InsightsVariant,\n} from './index';\n\n// Sample data for demonstration\nconst sampleTransactions = [\n  {\n    id: '1',\n    merchant: 'Whole Foods Market',\n    category: { name: 'Groceries', color: '#10B981' },\n    amount: -127.43,\n    date: '2024-12-15',\n    status: 'completed' as const,\n    scores: { health: 85, eco: 92, financial: 78 },\n  },\n  {\n    id: '2', \n    merchant: 'Apple Store',\n    category: { name: 'Electronics', color: '#3B82F6' },\n    amount: -899.00,\n    date: '2024-12-14',\n    status: 'completed' as const,\n    scores: { health: 45, eco: 60, financial: 85 },\n  },\n  {\n    id: '3',\n    merchant: 'Salary Deposit',\n    category: { name: 'Income', color: '#059669' },\n    amount: 4500.00,\n    date: '2024-12-01',\n    status: 'completed' as const,\n    scores: { health: 100, eco: 75, financial: 100 },\n  },\n];\n\nconst sampleAccounts = [\n  {\n    id: '1',\n    type: 'Checking',\n    nickname: 'Main Checking',\n    balance: 5420.50,\n    availableBalance: 5420.50,\n    currency: 'USD',\n  },\n  {\n    id: '2',\n    type: 'Savings',\n    nickname: 'Emergency Fund',\n    balance: 12500.00,\n    availableBalance: 12500.00,\n    currency: 'USD',\n  },\n];\n\n// Component showcase with feature flags\nconst ConsolidationDemo: React.FC = () => {\n  const { flags, updateFlag } = useFeatureFlags();\n  const [selectedTransactionVariant, setSelectedTransactionVariant] = useState<TransactionVariant>('default');\n  const [selectedInsightsVariant, setSelectedInsightsVariant] = useState<InsightsVariant>('standard');\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-6\">\n      <VueniDesignSystem.Container>\n        {/* Header */}\n        <VueniDesignSystem.GlassCard variant=\"prominent\" className=\"mb-8 p-8\">\n          <h1 className=\"text-4xl font-bold text-white mb-4\">\n            🚀 Vueni Component Consolidation Demo\n          </h1>\n          <p className=\"text-white/70 text-lg\">\n            Demonstrating the power of unified, configurable components with feature flags\n          </p>\n          \n          {/* Live Configuration */}\n          <div className=\"mt-6 grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"text-white font-medium mb-2 block\">Transaction List Variant:</label>\n              <select\n                value={selectedTransactionVariant}\n                onChange={(e) => setSelectedTransactionVariant(e.target.value as TransactionVariant)}\n                className=\"w-full p-2 bg-white/10 border border-white/20 rounded-lg text-white\"\n              >\n                <option value=\"default\">Default</option>\n                <option value=\"apple\">Apple Style</option>\n                <option value=\"clean\">Clean</option>\n                <option value=\"polished\">Polished</option>\n                <option value=\"enterprise\">Enterprise</option>\n                <option value=\"mobile\">Mobile</option>\n              </select>\n            </div>\n            \n            <div>\n              <label className=\"text-white font-medium mb-2 block\">Insights Page Variant:</label>\n              <select\n                value={selectedInsightsVariant}\n                onChange={(e) => setSelectedInsightsVariant(e.target.value as InsightsVariant)}\n                className=\"w-full p-2 bg-white/10 border border-white/20 rounded-lg text-white\"\n              >\n                <option value=\"standard\">Standard</option>\n                <option value=\"refined\">Refined</option>\n                <option value=\"enhanced\">Enhanced</option>\n                <option value=\"optimized\">Optimized</option>\n                <option value=\"comprehensive\">Comprehensive</option>\n                <option value=\"mobile\">Mobile</option>\n                <option value=\"dashboard\">Dashboard</option>\n              </select>\n            </div>\n          </div>\n        </VueniDesignSystem.GlassCard>\n\n        {/* Design System Showcase */}\n        <VueniDesignSystem.Section className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-white mb-6\">Design System Components</h2>\n          \n          <VueniDesignSystem.Grid cols=\"3\" gap=\"6\">\n            {/* Metrics */}\n            <VueniDesignSystem.Metric\n              variant=\"prominent\"\n              label=\"Monthly Spending\"\n              value=\"$2,456\"\n              change={-12}\n              trend=\"down\"\n              color=\"green\"\n              icon={<span>💰</span>}\n            />\n            \n            <VueniDesignSystem.Metric\n              variant=\"prominent\"\n              label=\"Wellness Score\"\n              value=\"87/100\"\n              change={5}\n              trend=\"up\"\n              color=\"red\"\n              icon={<span>❤️</span>}\n            />\n            \n            <VueniDesignSystem.Metric\n              variant=\"prominent\"\n              label=\"Eco Impact\"\n              value=\"48kg CO₂\"\n              change={15}\n              trend=\"up\"\n              color=\"green\"\n              icon={<span>🌱</span>}\n            />\n          </VueniDesignSystem.Grid>\n          \n          {/* Buttons Showcase */}\n          <div className=\"mt-6 flex flex-wrap gap-4\">\n            <VueniDesignSystem.Button variant=\"default\">Default Button</VueniDesignSystem.Button>\n            <VueniDesignSystem.Button variant=\"glass\">Glass Button</VueniDesignSystem.Button>\n            <VueniDesignSystem.Button variant=\"glow\" glowing>Glowing Button</VueniDesignSystem.Button>\n            <VueniDesignSystem.Button variant=\"minimal\">Minimal Button</VueniDesignSystem.Button>\n          </div>\n          \n          {/* Status Badges */}\n          <div className=\"mt-4 flex flex-wrap gap-3\">\n            <VueniDesignSystem.StatusBadge status=\"success\">Completed</VueniDesignSystem.StatusBadge>\n            <VueniDesignSystem.StatusBadge status=\"warning\">Pending</VueniDesignSystem.StatusBadge>\n            <VueniDesignSystem.StatusBadge status=\"error\">Failed</VueniDesignSystem.StatusBadge>\n            <VueniDesignSystem.StatusBadge status=\"info\">Processing</VueniDesignSystem.StatusBadge>\n          </div>\n        </VueniDesignSystem.Section>\n\n        {/* Transaction List Showcase */}\n        <VueniDesignSystem.Section className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-white mb-6\">\n            Unified Transaction List - {selectedTransactionVariant} variant\n          </h2>\n          \n          <VueniUnifiedTransactionList\n            variant={selectedTransactionVariant}\n            transactions={sampleTransactions}\n            features={{\n              showScores: flags.showScoreCircles,\n              showCategories: true,\n              searchable: true,\n              filterable: true,\n              compactMode: flags.compactMode,\n              animationsEnabled: flags.enableAnimations,\n            }}\n            currency=\"USD\"\n            onTransactionClick={(transaction) => {\n              console.log('Transaction clicked:', transaction);\n            }}\n          />\n        </VueniDesignSystem.Section>\n\n        {/* Insights Page Showcase */}\n        <VueniDesignSystem.Section>\n          <h2 className=\"text-2xl font-bold text-white mb-6\">\n            Unified Insights Page - {selectedInsightsVariant} variant\n          </h2>\n          \n          <VueniUnifiedInsightsPage\n            variant={selectedInsightsVariant}\n            transactions={sampleTransactions}\n            accounts={sampleAccounts}\n            enableFeatureFlags={true}\n            onExportData={() => {\n              console.log('Export data requested');\n            }}\n          />\n        </VueniDesignSystem.Section>\n\n        {/* Feature Flags Panel */}\n        <VueniDesignSystem.GlassCard variant=\"subtle\" className=\"mt-8 p-6\">\n          <h3 className=\"text-xl font-bold text-white mb-4\">Live Feature Flags Control</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <label className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                checked={flags.showScoreCircles}\n                onChange={(e) => updateFlag('showScoreCircles', e.target.checked)}\n                className=\"rounded\"\n              />\n              <span className=\"text-white/70 text-sm\">Show Score Circles</span>\n            </label>\n            \n            <label className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                checked={flags.compactMode}\n                onChange={(e) => updateFlag('compactMode', e.target.checked)}\n                className=\"rounded\"\n              />\n              <span className=\"text-white/70 text-sm\">Compact Mode</span>\n            </label>\n            \n            <label className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                checked={flags.enableAnimations}\n                onChange={(e) => updateFlag('enableAnimations', e.target.checked)}\n                className=\"rounded\"\n              />\n              <span className=\"text-white/70 text-sm\">Animations</span>\n            </label>\n            \n            <label className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                checked={flags.enableGlassEffects}\n                onChange={(e) => updateFlag('enableGlassEffects', e.target.checked)}\n                className=\"rounded\"\n              />\n              <span className=\"text-white/70 text-sm\">Glass Effects</span>\n            </label>\n          </div>\n        </VueniDesignSystem.GlassCard>\n\n        {/* Stats Summary */}\n        <VueniDesignSystem.GlassCard variant=\"prominent\" className=\"mt-8 p-8\">\n          <h3 className=\"text-2xl font-bold text-white mb-6 text-center\">\n            Consolidation Impact Summary\n          </h3>\n          \n          <VueniDesignSystem.Grid cols=\"4\" gap=\"6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-green-400\">6→1</div>\n              <div className=\"text-white/70\">Transaction Lists</div>\n              <div className=\"text-green-400 text-sm\">82.6% reduction</div>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-400\">7→1</div>\n              <div className=\"text-white/70\">Insights Pages</div>\n              <div className=\"text-blue-400 text-sm\">76.8% reduction</div>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-purple-400\">2,614</div>\n              <div className=\"text-white/70\">Lines Saved</div>\n              <div className=\"text-purple-400 text-sm\">60.6% total reduction</div>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-yellow-400\">100%</div>\n              <div className=\"text-white/70\">Feature Parity</div>\n              <div className=\"text-yellow-400 text-sm\">No functionality lost</div>\n            </div>\n          </VueniDesignSystem.Grid>\n        </VueniDesignSystem.GlassCard>\n      </VueniDesignSystem.Container>\n    </div>\n  );\n};\n\n// Demo wrapper with feature flag provider\nexport const VueniConsolidationDemo: React.FC = () => {\n  return (\n    <FeatureFlagProvider preset=\"development\" persistToStorage={false}>\n      <ConsolidationDemo />\n    </FeatureFlagProvider>\n  );\n};\n\nexport default VueniConsolidationDemo;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/shared/VueniDesignSystem.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/shared/VueniDesignSystem.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo, forwardRef } from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport { Card } from '@/shared/ui/card';\nimport { Button } from '@/shared/ui/button';\n\n// Enhanced Glass Card Component\nexport interface VueniGlassCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: 'default' | 'subtle' | 'prominent' | 'enterprise' | 'mobile';\n  blur?: 'none' | 'sm' | 'md' | 'lg' | 'xl';\n  opacity?: 'low' | 'medium' | 'high';\n  glow?: boolean;\n  animated?: boolean;\n  children: React.ReactNode;\n}\n\nconst glassVariants = {\n  default: 'bg-black/20 backdrop-blur-sm border-white/10',\n  subtle: 'bg-white/5 backdrop-blur-sm border-white/5',\n  prominent: 'bg-black/30 backdrop-blur-md border-white/20',\n  enterprise: 'bg-slate-900/80 backdrop-blur-sm border-slate-600/30',\n  mobile: 'bg-black/25 backdrop-blur-sm border-white/10',\n};\n\nconst blurClasses = {\n  none: 'backdrop-blur-none',\n  sm: 'backdrop-blur-sm',\n  md: 'backdrop-blur-md',\n  lg: 'backdrop-blur-lg',\n  xl: 'backdrop-blur-xl',\n};\n\nconst opacityClasses = {\n  low: 'bg-opacity-10',\n  medium: 'bg-opacity-20',\n  high: 'bg-opacity-30',\n};\n\nexport const VueniGlassCard = memo(forwardRef<HTMLDivElement, VueniGlassCardProps>(({\n  variant = 'default',\n  blur = 'sm',\n  opacity = 'medium',\n  glow = false,\n  animated = false,\n  children,\n  className,\n  ...props\n}, ref) => {\n  return (\n    <Card\n      ref={ref}\n      className={cn(\n        glassVariants[variant],\n        blurClasses[blur],\n        glow && 'shadow-lg shadow-white/5',\n        animated && 'transition-all duration-300 hover:bg-opacity-30 hover:border-white/30',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Card>\n  );\n}));\n\nVueniGlassCard.displayName = 'VueniGlassCard';\n\n// Enhanced Button Component\nexport interface VueniButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'default' | 'glass' | 'glow' | 'minimal' | 'enterprise';\n  size?: 'sm' | 'md' | 'lg';\n  glowing?: boolean;\n  loading?: boolean;\n  icon?: React.ReactNode;\n  children: React.ReactNode;\n}\n\nconst buttonVariants = {\n  default: 'bg-white/10 hover:bg-white/20 border-white/20 text-white',\n  glass: 'bg-white/5 hover:bg-white/15 backdrop-blur-sm border-white/10 text-white',\n  glow: 'bg-gradient-to-r from-blue-500/20 to-purple-500/20 hover:from-blue-500/30 hover:to-purple-500/30 border-blue-500/30 text-white shadow-lg shadow-blue-500/10',\n  minimal: 'bg-transparent hover:bg-white/5 border-transparent text-white/70 hover:text-white',\n  enterprise: 'bg-slate-700/50 hover:bg-slate-600/50 border-slate-600/30 text-slate-200',\n};\n\nconst buttonSizes = {\n  sm: 'px-3 py-1.5 text-xs',\n  md: 'px-4 py-2 text-sm',\n  lg: 'px-6 py-3 text-base',\n};\n\nexport const VueniButton = memo(forwardRef<HTMLButtonElement, VueniButtonProps>(({\n  variant = 'default',\n  size = 'md',\n  glowing = false,\n  loading = false,\n  icon,\n  children,\n  className,\n  disabled,\n  ...props\n}, ref) => {\n  return (\n    <Button\n      ref={ref}\n      className={cn(\n        buttonVariants[variant],\n        buttonSizes[size],\n        glowing && 'animate-pulse',\n        loading && 'opacity-70 cursor-not-allowed',\n        'transition-all duration-200 backdrop-blur-sm',\n        className\n      )}\n      disabled={disabled || loading}\n      {...props}\n    >\n      <div className=\"flex items-center gap-2\">\n        {loading && (\n          <div className=\"w-3 h-3 border border-white/30 border-t-white rounded-full animate-spin\" />\n        )}\n        {icon && !loading && icon}\n        {children}\n      </div>\n    </Button>\n  );\n}));\n\nVueniButton.displayName = 'VueniButton';\n\n// Metric Display Component\nexport interface VueniMetricProps {\n  label: string;\n  value: string | number;\n  change?: number;\n  trend?: 'up' | 'down' | 'stable';\n  icon?: React.ReactNode;\n  variant?: 'default' | 'compact' | 'prominent';\n  color?: 'blue' | 'green' | 'red' | 'purple' | 'yellow';\n}\n\nconst metricColors = {\n  blue: 'text-blue-400 bg-blue-500/20',\n  green: 'text-green-400 bg-green-500/20', \n  red: 'text-red-400 bg-red-500/20',\n  purple: 'text-purple-400 bg-purple-500/20',\n  yellow: 'text-yellow-400 bg-yellow-500/20',\n};\n\nexport const VueniMetric = memo(({\n  label,\n  value,\n  change,\n  trend,\n  icon,\n  variant = 'default',\n  color = 'blue',\n}: VueniMetricProps) => {\n  if (variant === 'compact') {\n    return (\n      <div className=\"flex items-center gap-2\">\n        {icon && (\n          <div className={cn('p-1.5 rounded', metricColors[color])}>\n            <div className=\"w-3 h-3\">{icon}</div>\n          </div>\n        )}\n        <div>\n          <div className=\"text-white font-medium text-sm\">{value}</div>\n          <div className=\"text-white/60 text-xs\">{label}</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (variant === 'prominent') {\n    return (\n      <VueniGlassCard className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-white/70 text-sm font-medium\">{label}</h3>\n          {icon && (\n            <div className={cn('p-2 rounded-lg', metricColors[color])}>\n              <div className=\"w-5 h-5\">{icon}</div>\n            </div>\n          )}\n        </div>\n        <div className=\"flex items-end justify-between\">\n          <div className=\"text-white font-bold text-2xl\">{value}</div>\n          {change !== undefined && (\n            <div className={cn(\n              'flex items-center text-sm',\n              change > 0 ? 'text-green-400' : change < 0 ? 'text-red-400' : 'text-white/60'\n            )}>\n              {change > 0 ? '↑' : change < 0 ? '↓' : '→'} {Math.abs(change)}%\n            </div>\n          )}\n        </div>\n      </VueniGlassCard>\n    );\n  }\n\n  return (\n    <div className=\"flex items-center gap-3\">\n      {icon && (\n        <div className={cn('p-2 rounded-lg', metricColors[color])}>\n          <div className=\"w-4 h-4\">{icon}</div>\n        </div>\n      )}\n      <div>\n        <div className=\"text-white font-semibold\">{value}</div>\n        <div className=\"text-white/60 text-sm\">{label}</div>\n        {change !== undefined && (\n          <div className={cn(\n            'text-xs',\n            change > 0 ? 'text-green-400' : change < 0 ? 'text-red-400' : 'text-white/60'\n          )}>\n            {change > 0 ? '+' : ''}{change}%\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nVueniMetric.displayName = 'VueniMetric';\n\n// Status Badge Component\nexport interface VueniStatusBadgeProps {\n  status: 'success' | 'warning' | 'error' | 'info' | 'pending';\n  children: React.ReactNode;\n  variant?: 'solid' | 'outline' | 'ghost';\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst statusColors = {\n  success: 'bg-green-500/20 text-green-400 border-green-500/30',\n  warning: 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30',\n  error: 'bg-red-500/20 text-red-400 border-red-500/30',\n  info: 'bg-blue-500/20 text-blue-400 border-blue-500/30',\n  pending: 'bg-gray-500/20 text-gray-400 border-gray-500/30',\n};\n\nconst statusSizes = {\n  sm: 'px-2 py-1 text-xs',\n  md: 'px-3 py-1.5 text-sm',\n  lg: 'px-4 py-2 text-base',\n};\n\nexport const VueniStatusBadge = memo(({\n  status,\n  children,\n  variant = 'solid',\n  size = 'sm',\n}: VueniStatusBadgeProps) => {\n  return (\n    <span className={cn(\n      statusColors[status],\n      statusSizes[size],\n      'rounded-full font-medium inline-flex items-center gap-1',\n      variant === 'outline' && 'bg-transparent border',\n      variant === 'ghost' && 'bg-transparent border-transparent'\n    )}>\n      {children}\n    </span>\n  );\n});\n\nVueniStatusBadge.displayName = 'VueniStatusBadge';\n\n// Loading Skeleton Component\nexport interface VueniSkeletonProps {\n  variant?: 'text' | 'circular' | 'rectangular';\n  width?: string | number;\n  height?: string | number;\n  className?: string;\n}\n\nexport const VueniSkeleton = memo(({\n  variant = 'text',\n  width,\n  height,\n  className,\n}: VueniSkeletonProps) => {\n  const baseClasses = 'animate-pulse bg-white/10 backdrop-blur-sm';\n  \n  if (variant === 'circular') {\n    return (\n      <div \n        className={cn(baseClasses, 'rounded-full', className)}\n        style={{ width, height }}\n      />\n    );\n  }\n  \n  if (variant === 'rectangular') {\n    return (\n      <div \n        className={cn(baseClasses, 'rounded-lg', className)}\n        style={{ width, height }}\n      />\n    );\n  }\n  \n  return (\n    <div \n      className={cn(baseClasses, 'rounded h-4', className)}\n      style={{ width }}\n    />\n  );\n});\n\nVueniSkeleton.displayName = 'VueniSkeleton';\n\n// Layout Components\nexport const VueniContainer = memo(({ \n  children, \n  className,\n  ...props \n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('container mx-auto px-4 sm:px-6 lg:px-8', className)} {...props}>\n    {children}\n  </div>\n));\n\nVueniContainer.displayName = 'VueniContainer';\n\nexport const VueniSection = memo(({ \n  children, \n  className,\n  ...props \n}: React.HTMLAttributes<HTMLElement>) => (\n  <section className={cn('py-8 lg:py-12', className)} {...props}>\n    {children}\n  </section>\n));\n\nVueniSection.displayName = 'VueniSection';\n\nexport const VueniGrid = memo(({ \n  children, \n  cols = '1',\n  gap = '6',\n  className,\n  ...props \n}: React.HTMLAttributes<HTMLDivElement> & {\n  cols?: '1' | '2' | '3' | '4' | '5' | '6';\n  gap?: '1' | '2' | '3' | '4' | '5' | '6' | '8' | '10' | '12';\n}) => (\n  <div \n    className={cn(\n      `grid grid-cols-1 gap-${gap}`,\n      cols === '2' && 'md:grid-cols-2',\n      cols === '3' && 'md:grid-cols-2 lg:grid-cols-3',\n      cols === '4' && 'md:grid-cols-2 lg:grid-cols-4',\n      cols === '5' && 'md:grid-cols-3 lg:grid-cols-5',\n      cols === '6' && 'md:grid-cols-3 lg:grid-cols-6',\n      className\n    )} \n    {...props}\n  >\n    {children}\n  </div>\n));\n\nVueniGrid.displayName = 'VueniGrid';\n\n// Export all design system components\nexport const VueniDesignSystem = {\n  GlassCard: VueniGlassCard,\n  Button: VueniButton,\n  Metric: VueniMetric,\n  StatusBadge: VueniStatusBadge,\n  Skeleton: VueniSkeleton,\n  Container: VueniContainer,\n  Section: VueniSection,\n  Grid: VueniGrid,\n} as const;\n\n// Design tokens for consistent styling\nexport const vueniTokens = {\n  colors: {\n    glass: {\n      subtle: 'bg-white/5 border-white/5',\n      default: 'bg-black/20 border-white/10',\n      prominent: 'bg-black/30 border-white/20',\n    },\n    status: {\n      success: 'text-green-400 bg-green-500/20',\n      warning: 'text-yellow-400 bg-yellow-500/20',\n      error: 'text-red-400 bg-red-500/20',\n      info: 'text-blue-400 bg-blue-500/20',\n    },\n  },\n  spacing: {\n    xs: '0.25rem',\n    sm: '0.5rem', \n    md: '1rem',\n    lg: '1.5rem',\n    xl: '2rem',\n    xxl: '3rem',\n  },\n  blur: {\n    sm: 'backdrop-blur-sm',\n    md: 'backdrop-blur-md',\n    lg: 'backdrop-blur-lg',\n  },\n} as const;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/shared/VueniFeatureFlags.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/shared/VueniFeatureFlags.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { TransactionVariant } from './UnifiedTransactionList';\nimport { InsightsVariant } from './VueniUnifiedInsightsPage';\n\n// Feature flag configuration interface\nexport interface FeatureFlags {\n  // Component variants\n  transactionListVariant: TransactionVariant;\n  insightsPageVariant: InsightsVariant;\n  \n  // Feature toggles\n  enableAdvancedScoring: boolean;\n  enableRealTimeUpdates: boolean;\n  enableAnimations: boolean;\n  enableMobileOptimizations: boolean;\n  enableExperimentalFeatures: boolean;\n  enablePerformanceMode: boolean;\n  enableDebugMode: boolean;\n  \n  // UI preferences\n  compactMode: boolean;\n  showScoreCircles: boolean;\n  showCategoryIcons: boolean;\n  enableDarkMode: boolean;\n  enableGlassEffects: boolean;\n  \n  // Data and privacy\n  enableDataExport: boolean;\n  enableOfflineMode: boolean;\n  enableAnalytics: boolean;\n  \n  // Performance settings\n  maxTransactionsPerPage: number;\n  enableVirtualScrolling: boolean;\n  enableLazyLoading: boolean;\n  refreshInterval: number;\n}\n\n// Default feature flag values\nconst defaultFeatureFlags: FeatureFlags = {\n  // Component variants\n  transactionListVariant: 'default',\n  insightsPageVariant: 'standard',\n  \n  // Feature toggles\n  enableAdvancedScoring: true,\n  enableRealTimeUpdates: false,\n  enableAnimations: true,\n  enableMobileOptimizations: true,\n  enableExperimentalFeatures: false,\n  enablePerformanceMode: false,\n  enableDebugMode: false,\n  \n  // UI preferences\n  compactMode: false,\n  showScoreCircles: true,\n  showCategoryIcons: true,\n  enableDarkMode: true,\n  enableGlassEffects: true,\n  \n  // Data and privacy\n  enableDataExport: false,\n  enableOfflineMode: false,\n  enableAnalytics: false,\n  \n  // Performance settings\n  maxTransactionsPerPage: 50,\n  enableVirtualScrolling: false,\n  enableLazyLoading: true,\n  refreshInterval: 30000,\n};\n\n// Environment-specific presets\nexport const featureFlagPresets = {\n  development: {\n    ...defaultFeatureFlags,\n    enableDebugMode: true,\n    enableExperimentalFeatures: true,\n    enableAnalytics: false,\n  },\n  staging: {\n    ...defaultFeatureFlags,\n    enableExperimentalFeatures: true,\n    enableAnalytics: true,\n    enableDataExport: true,\n  },\n  production: {\n    ...defaultFeatureFlags,\n    enableDebugMode: false,\n    enableExperimentalFeatures: false,\n    enableAnalytics: true,\n    enablePerformanceMode: true,\n  },\n  mobile: {\n    ...defaultFeatureFlags,\n    transactionListVariant: 'mobile',\n    insightsPageVariant: 'mobile',\n    compactMode: true,\n    enableMobileOptimizations: true,\n    enableVirtualScrolling: true,\n    enableGlassEffects: false,\n    maxTransactionsPerPage: 25,\n  },\n  enterprise: {\n    ...defaultFeatureFlags,\n    transactionListVariant: 'enterprise',\n    insightsPageVariant: 'comprehensive',\n    enableAdvancedScoring: true,\n    enableDataExport: true,\n    enableAnalytics: true,\n    enableVirtualScrolling: true,\n    maxTransactionsPerPage: 100,\n  },\n  minimal: {\n    ...defaultFeatureFlags,\n    transactionListVariant: 'clean',\n    insightsPageVariant: 'optimized',\n    enableAnimations: false,\n    showScoreCircles: false,\n    enableGlassEffects: false,\n    enablePerformanceMode: true,\n    maxTransactionsPerPage: 25,\n  },\n} as const;\n\n// Feature flag context\ninterface FeatureFlagContextType {\n  flags: FeatureFlags;\n  updateFlag: <K extends keyof FeatureFlags>(key: K, value: FeatureFlags[K]) => void;\n  updateFlags: (newFlags: Partial<FeatureFlags>) => void;\n  resetFlags: () => void;\n  loadPreset: (preset: keyof typeof featureFlagPresets) => void;\n  isFeatureEnabled: (feature: keyof FeatureFlags) => boolean;\n}\n\nconst FeatureFlagContext = createContext<FeatureFlagContextType | undefined>(undefined);\n\n// Feature flag provider component\ninterface FeatureFlagProviderProps {\n  children: ReactNode;\n  initialFlags?: Partial<FeatureFlags>;\n  preset?: keyof typeof featureFlagPresets;\n  persistToStorage?: boolean;\n  storageKey?: string;\n}\n\nexport const FeatureFlagProvider: React.FC<FeatureFlagProviderProps> = ({\n  children,\n  initialFlags = {},\n  preset,\n  persistToStorage = true,\n  storageKey = 'vueni-feature-flags',\n}) => {\n  // Initialize flags with preset, initial flags, and stored flags\n  const [flags, setFlags] = useState<FeatureFlags>(() => {\n    let baseFlags = defaultFeatureFlags;\n    \n    // Apply preset if provided\n    if (preset && featureFlagPresets[preset]) {\n      baseFlags = { ...baseFlags, ...featureFlagPresets[preset] };\n    }\n    \n    // Apply initial flags\n    baseFlags = { ...baseFlags, ...initialFlags };\n    \n    // Load from storage if enabled\n    if (persistToStorage && typeof window !== 'undefined') {\n      try {\n        const stored = localStorage.getItem(storageKey);\n        if (stored) {\n          const storedFlags = JSON.parse(stored);\n          baseFlags = { ...baseFlags, ...storedFlags };\n        }\n      } catch (error) {\n        console.warn('Failed to load feature flags from storage:', error);\n      }\n    }\n    \n    return baseFlags;\n  });\n\n  // Persist flags to storage when they change\n  useEffect(() => {\n    if (persistToStorage && typeof window !== 'undefined') {\n      try {\n        localStorage.setItem(storageKey, JSON.stringify(flags));\n      } catch (error) {\n        console.warn('Failed to save feature flags to storage:', error);\n      }\n    }\n  }, [flags, persistToStorage, storageKey]);\n\n  const updateFlag = <K extends keyof FeatureFlags>(key: K, value: FeatureFlags[K]) => {\n    setFlags(prev => ({ ...prev, [key]: value }));\n  };\n\n  const updateFlags = (newFlags: Partial<FeatureFlags>) => {\n    setFlags(prev => ({ ...prev, ...newFlags }));\n  };\n\n  const resetFlags = () => {\n    setFlags(defaultFeatureFlags);\n  };\n\n  const loadPreset = (presetName: keyof typeof featureFlagPresets) => {\n    const presetFlags = featureFlagPresets[presetName];\n    setFlags(prev => ({ ...prev, ...presetFlags }));\n  };\n\n  const isFeatureEnabled = (feature: keyof FeatureFlags): boolean => {\n    const value = flags[feature];\n    return typeof value === 'boolean' ? value : Boolean(value);\n  };\n\n  const contextValue: FeatureFlagContextType = {\n    flags,\n    updateFlag,\n    updateFlags,\n    resetFlags,\n    loadPreset,\n    isFeatureEnabled,\n  };\n\n  return (\n    <FeatureFlagContext.Provider value={contextValue}>\n      {children}\n    </FeatureFlagContext.Provider>\n  );\n};\n\n// Hook to use feature flags\nexport const useFeatureFlags = (): FeatureFlagContextType => {\n  const context = useContext(FeatureFlagContext);\n  if (context === undefined) {\n    throw new Error('useFeatureFlags must be used within a FeatureFlagProvider');\n  }\n  return context;\n};\n\n// Individual feature flag hooks for convenience\nexport const useTransactionVariant = () => {\n  const { flags } = useFeatureFlags();\n  return flags.transactionListVariant;\n};\n\nexport const useInsightsVariant = () => {\n  const { flags } = useFeatureFlags();\n  return flags.insightsPageVariant;\n};\n\nexport const useCompactMode = () => {\n  const { flags } = useFeatureFlags();\n  return flags.compactMode;\n};\n\nexport const useAnimationsEnabled = () => {\n  const { flags } = useFeatureFlags();\n  return flags.enableAnimations;\n};\n\nexport const usePerformanceMode = () => {\n  const { flags } = useFeatureFlags();\n  return flags.enablePerformanceMode;\n};\n\n// Feature flag debugging component (development only)\nexport const FeatureFlagDebugPanel: React.FC = () => {\n  const { flags, updateFlag, loadPreset, resetFlags } = useFeatureFlags();\n\n  if (!flags.enableDebugMode) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed bottom-4 right-4 bg-black/90 backdrop-blur-sm border border-white/20 rounded-lg p-4 max-w-sm max-h-96 overflow-y-auto z-50\">\n      <h3 className=\"text-white font-bold mb-3\">Feature Flags Debug</h3>\n      \n      <div className=\"space-y-2 mb-4\">\n        <button\n          onClick={() => loadPreset('development')}\n          className=\"w-full px-2 py-1 bg-blue-500/20 text-blue-400 rounded text-xs hover:bg-blue-500/30\"\n        >\n          Load Dev Preset\n        </button>\n        <button\n          onClick={() => loadPreset('mobile')}\n          className=\"w-full px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs hover:bg-green-500/30\"\n        >\n          Load Mobile Preset\n        </button>\n        <button\n          onClick={() => loadPreset('enterprise')}\n          className=\"w-full px-2 py-1 bg-purple-500/20 text-purple-400 rounded text-xs hover:bg-purple-500/30\"\n        >\n          Load Enterprise Preset\n        </button>\n        <button\n          onClick={resetFlags}\n          className=\"w-full px-2 py-1 bg-red-500/20 text-red-400 rounded text-xs hover:bg-red-500/30\"\n        >\n          Reset to Default\n        </button>\n      </div>\n\n      <div className=\"space-y-2 text-xs\">\n        {Object.entries(flags).map(([key, value]) => (\n          <div key={key} className=\"flex items-center justify-between\">\n            <span className=\"text-white/70 truncate\">{key}</span>\n            {typeof value === 'boolean' ? (\n              <input\n                type=\"checkbox\"\n                checked={value}\n                onChange={(e) => updateFlag(key as keyof FeatureFlags, e.target.checked as any)}\n                className=\"ml-2\"\n              />\n            ) : (\n              <span className=\"text-white/50 text-xs ml-2 truncate\">\n                {String(value)}\n              </span>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// HOC for feature-gated components\nexport function withFeatureFlag<P extends object>(\n  Component: React.ComponentType<P>,\n  featureKey: keyof FeatureFlags,\n  fallback?: React.ComponentType<P> | null\n) {\n  return function FeatureGatedComponent(props: P) {\n    const { isFeatureEnabled } = useFeatureFlags();\n    \n    if (!isFeatureEnabled(featureKey)) {\n      return fallback ? React.createElement(fallback, props) : null;\n    }\n    \n    return React.createElement(Component, props);\n  };\n}\n\n// Utility function to check feature flags outside of React components\nexport const checkFeatureFlag = (flags: FeatureFlags, feature: keyof FeatureFlags): boolean => {\n  const value = flags[feature];\n  return typeof value === 'boolean' ? value : Boolean(value);\n};\n\n// Export types for external use\nexport type { FeatureFlags, FeatureFlagContextType };\n\n// Additional utility types\nexport interface FeatureFlag {\n  name: string;\n  defaultValue: boolean;\n  description?: string;\n}\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors?: string[];\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/shared/VueniUnifiedInsightsPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/shared/VueniUnifiedInsightsPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, Suspense, lazy, useCallback } from 'react';\nimport { Heart, Leaf, DollarSign, TrendingUp, TrendingDown, Calendar, BarChart3, Settings, Filter, Eye, EyeOff, Download, Zap, Target, Activity, Shield, PiggyBank, ChevronRight } from 'lucide-react';\nimport { Card } from '@/shared/ui/card';\nimport { Button } from '@/shared/ui/button';\nimport { Badge } from '@/shared/ui/badge';\nimport { Switch } from '@/shared/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/shared/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/shared/ui/tabs';\nimport { cn } from '@/shared/lib/utils';\nimport { SharedScoreCircle, ScoreGroup } from './SharedScoreCircle';\nimport { formatPercentage, getScoreColor } from '@/shared/utils/formatters';\n\n// Lazy load heavy components for performance\nconst TimeSeriesChart = lazy(() => import('@/features/insights/components/TimeSeriesChart'));\nconst SpendingTrendsChart = lazy(() => import('@/features/insights/components/SpendingTrendsChart'));\nconst CategoryTrendsChart = lazy(() => import('@/features/insights/components/CategoryTrendsChart'));\nconst FinancialCard = lazy(() => import('@/features/insights/components/FinancialCard'));\nconst ComprehensiveWellnessCard = lazy(() => import('@/features/insights/components/components/ComprehensiveWellnessCard'));\nconst ComprehensiveEcoCard = lazy(() => import('@/features/insights/components/components/ComprehensiveEcoCard'));\nconst AnimatedCircularProgress = lazy(() => import('@/features/insights/components/components/AnimatedCircularProgress'));\nconst EnhancedMetricCard = lazy(() => import('@/features/insights/components/components/EnhancedMetricCard'));\n\nexport interface Transaction {\n  id: string;\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n}\n\nexport interface Account {\n  id: string;\n  type: string;\n  nickname: string;\n  balance: number;\n  availableBalance: number;\n  currency: string;\n  accountType?: string;\n}\n\nexport type InsightsVariant = 'standard' | 'refined' | 'enhanced' | 'optimized' | 'comprehensive' | 'mobile' | 'dashboard';\nexport type ViewMode = 'overview' | 'trends' | 'financial' | 'health' | 'eco' | 'detailed';\n\ninterface LayoutConfig {\n  showHeader: boolean;\n  showTabs: boolean;\n  showScoreCards: boolean;\n  showCharts: boolean;\n  showDetailedCards: boolean;\n  showMetrics: boolean;\n  compactMode: boolean;\n  animationsEnabled: boolean;\n  autoRefresh: boolean;\n  refreshInterval: number;\n  showSettings: boolean;\n  enableExport: boolean;\n  enableFilters: boolean;\n}\n\nconst variantLayouts: Record<InsightsVariant, LayoutConfig> = {\n  standard: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: false,\n    refreshInterval: 30000,\n    showSettings: false,\n    enableExport: false,\n    enableFilters: false,\n  },\n  refined: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: true,\n    animationsEnabled: true,\n    autoRefresh: false,\n    refreshInterval: 30000,\n    showSettings: true,\n    enableExport: true,\n    enableFilters: true,\n  },\n  enhanced: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n    refreshInterval: 30000,\n    showSettings: true,\n    enableExport: true,\n    enableFilters: true,\n  },\n  optimized: {\n    showHeader: false,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: false,\n    showDetailedCards: false,\n    showMetrics: true,\n    compactMode: true,\n    animationsEnabled: false,\n    autoRefresh: false,\n    refreshInterval: 60000,\n    showSettings: false,\n    enableExport: false,\n    enableFilters: false,\n  },\n  comprehensive: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n    refreshInterval: 15000,\n    showSettings: true,\n    enableExport: true,\n    enableFilters: true,\n  },\n  mobile: {\n    showHeader: false,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: false,\n    showDetailedCards: true,\n    showMetrics: false,\n    compactMode: true,\n    animationsEnabled: true,\n    autoRefresh: false,\n    refreshInterval: 60000,\n    showSettings: false,\n    enableExport: false,\n    enableFilters: false,\n  },\n  dashboard: {\n    showHeader: true,\n    showTabs: false,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: false,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n    refreshInterval: 10000,\n    showSettings: false,\n    enableExport: true,\n    enableFilters: false,\n  },\n};\n\nexport interface VueniUnifiedInsightsPageProps {\n  transactions: Transaction[];\n  accounts: Account[];\n  variant?: InsightsVariant;\n  customLayout?: Partial<LayoutConfig>;\n  className?: string;\n  onExportData?: () => void;\n  defaultTab?: ViewMode;\n  enableFeatureFlags?: boolean;\n}\n\nconst LoadingSpinner = () => (\n  <div className=\"flex items-center justify-center py-12\">\n    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white/50\"></div>\n  </div>\n);\n\n// Enhanced Score Card Component\nconst EnhancedScoreDisplay = ({ scores, layout, animationsEnabled }: { \n  scores: { credit: number; eco: number; wellness: number }; \n  layout: string; \n  animationsEnabled: boolean \n}) => {\n  if (layout.compactMode) {\n    return (\n      <div className=\"flex justify-center gap-6\">\n        <ScoreGroup \n          scores={scores}\n          size=\"md\"\n          showLabels={true}\n          animated={animationsEnabled}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6\">\n      {Object.entries(scores).map(([type, score]) => (\n        <div key={type} className=\"text-center\">\n          <SharedScoreCircle \n            score={score as number}\n            type={type as any}\n            size=\"lg\"\n            label={type === 'health' ? 'Wellness Score' : type === 'eco' ? 'Eco Impact' : 'Financial Health'}\n            showLabel={true}\n            animated={animationsEnabled}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Quick Metrics Component\nconst QuickMetrics = ({ financialData, wellnessData, ecoData, layout }: { \n  financialData: Record<string, unknown>; \n  wellnessData: Record<string, unknown>; \n  ecoData: Record<string, unknown>; \n  layout: string \n}) => {\n  const metrics = [\n    {\n      icon: DollarSign,\n      label: 'Monthly Spending',\n      value: `$${financialData.monthlySpending.toLocaleString()}`,\n      change: financialData.spendingRatio,\n      color: 'blue',\n    },\n    {\n      icon: Heart,\n      label: 'Wellness Investment',\n      value: `$${Object.values(wellnessData.monthlySpending).reduce((sum: number, amount: number) => sum + amount, 0).toLocaleString()}`,\n      change: 12,\n      color: 'red',\n    },\n    {\n      icon: Leaf,\n      label: 'CO₂ Saved',\n      value: `${ecoData.monthlyImpact.co2Saved}kg`,\n      change: 8,\n      color: 'green',\n    },\n    {\n      icon: PiggyBank,\n      label: 'Savings Rate',\n      value: `${financialData.savingsRate.toFixed(1)}%`,\n      change: financialData.savingsRate > 20 ? 5 : -3,\n      color: 'purple',\n    },\n  ];\n\n  if (layout.compactMode) {\n    return (\n      <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3\">\n        {metrics.map((metric, index) => (\n          <Card key={index} className=\"bg-black/20 backdrop-blur-sm border-white/10 p-3\">\n            <div className=\"flex items-center gap-2\">\n              <metric.icon className=\"h-4 w-4 text-white/70\" />\n              <span className=\"text-xs text-white/60\">{metric.label}</span>\n            </div>\n            <div className=\"mt-1\">\n              <span className=\"text-white font-semibold text-sm\">{metric.value}</span>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {metrics.map((metric, index) => (\n        <Card key={index} className=\"bg-black/20 backdrop-blur-sm border-white/10 p-4\">\n          <div className=\"flex items-center space-x-3 mb-3\">\n            <div className={`p-2 rounded-lg bg-${metric.color}-500/20`}>\n              <metric.icon className={`w-5 h-5 text-${metric.color}-400`} />\n            </div>\n            <div>\n              <h4 className=\"font-bold text-white text-sm\">{metric.label}</h4>\n              <p className=\"text-white/70 text-xs\">This month</p>\n            </div>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-white font-bold text-lg\">{metric.value}</span>\n            <div className={cn(\n              \"flex items-center text-xs\",\n              metric.change > 0 ? \"text-green-400\" : \"text-red-400\"\n            )}>\n              {metric.change > 0 ? <TrendingUp className=\"w-3 h-3 mr-1\" /> : <TrendingDown className=\"w-3 h-3 mr-1\" />}\n              {Math.abs(metric.change)}%\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n};\n\nexport const VueniUnifiedInsightsPage = React.memo<VueniUnifiedInsightsPageProps>(({\n  transactions,\n  accounts,\n  variant = 'standard',\n  customLayout,\n  className,\n  onExportData,\n  defaultTab = 'overview',\n  enableFeatureFlags = false,\n}) => {\n  const [activeTab, setActiveTab] = useState<ViewMode>(defaultTab);\n  const [layout, setLayout] = useState<LayoutConfig>(() => ({\n    ...variantLayouts[variant],\n    ...customLayout,\n  }));\n  const [scores, setScores] = useState({ financial: 0, health: 0, eco: 0 });\n  const [isLoading, setIsLoading] = useState(true);\n  const [showLayoutSettings, setShowLayoutSettings] = useState(false);\n  const [isVisible, setIsVisible] = useState(true);\n\n  // Memoized data calculations\n  const financialData = useMemo(() => {\n    const monthlyIncome = transactions\n      .filter(t => t.amount > 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const monthlySpending = Math.abs(transactions\n      .filter(t => t.amount < 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0));\n\n    // Proper net worth calculation (assets - liabilities)\n    const totalAssets = accounts\n      .filter(acc => {\n        const accountType = acc.accountType?.toLowerCase() || '';\n        return !accountType.includes('credit') && !accountType.includes('loan') && acc.balance > 0;\n      })\n      .reduce((sum, acc) => sum + Math.max(0, acc.balance), 0);\n\n    const totalLiabilities = accounts\n      .filter(acc => {\n        const accountType = acc.accountType?.toLowerCase() || '';\n        return accountType.includes('credit') || accountType.includes('loan') || acc.balance < 0;\n      })\n      .reduce((sum, acc) => sum + Math.abs(Math.min(0, acc.balance)), 0);\n\n    const totalBalance = Math.round(totalAssets - totalLiabilities); // True net worth, rounded\n\n    const spendingRatio = monthlyIncome > 0 ? (monthlySpending / monthlyIncome) * 100 : 0;\n    const emergencyFundMonths = monthlySpending > 0 ? totalBalance / monthlySpending : 0;\n    const savingsRate = monthlyIncome > 0 ? ((monthlyIncome - monthlySpending) / monthlyIncome) * 100 : 0;\n    \n    const creditCardDebt = Math.abs(accounts\n      .filter(acc => acc.type === 'Credit Card' && acc.balance < 0)\n      .reduce((sum, acc) => sum + acc.balance, 0));\n    const debtToIncomeRatio = monthlyIncome > 0 ? (creditCardDebt / (monthlyIncome * 12)) * 100 : 0;\n    \n    const completedTransactions = transactions.filter(t => t.status === 'completed').length;\n    const totalTransactions = transactions.length;\n    const billPaymentScore = totalTransactions > 0 ? Math.round((completedTransactions / totalTransactions) * 100) : 100;\n\n    return {\n      overallScore: scores.financial,\n      monthlyIncome,\n      monthlySpending,\n      totalBalance,\n      savingsRate,\n      spendingRatio,\n      emergencyFundMonths,\n      debtToIncomeRatio,\n      billPaymentScore,\n    };\n  }, [transactions, accounts, scores.financial]);\n\n  const wellnessData = useMemo(() => ({\n    overallScore: scores.health,\n    monthlySpending: {\n      fitness: 85,\n      nutrition: 38,\n      healthcare: 340,\n      wellness: 75,\n      supplements: 45,\n      mentalHealth: 120\n    },\n    healthTrends: {\n      exercise: 'up' as const,\n      nutrition: 'stable' as const,\n      sleep: 'stable' as const,\n      stress: 'down' as const\n    }\n  }), [scores.health]);\n\n  const ecoData = useMemo(() => ({\n    overallScore: scores.eco,\n    monthlyImpact: {\n      co2Saved: 48,\n      treesEquivalent: 2,\n      waterSaved: 384,\n      energySaved: 256\n    },\n    monthlySpending: {\n      sustainableFood: 127,\n      renewableEnergy: 85,\n      ecoTransport: 45,\n      greenProducts: 120,\n      carbonOffset: 25,\n      conservation: 60\n    },\n    environmentalTrends: {\n      carbonFootprint: 'down' as const,\n      sustainability: 'up' as const,\n      renewable: 'up' as const,\n      waste: 'stable' as const\n    }\n  }), [scores.eco]);\n\n  // Load scores with error handling\n  useEffect(() => {\n    const loadScores = async () => {\n      setIsLoading(true);\n      try {\n        // Simulate score calculation\n        await new Promise(resolve => setTimeout(resolve, 500));\n        setScores({\n          financial: 72 + Math.floor(Math.random() * 20),\n          health: 75 + Math.floor(Math.random() * 20),\n          eco: 82 + Math.floor(Math.random() * 15),\n        });\n      } catch (error) {\n        console.error('Error loading scores:', error);\n        setScores({ financial: 72, health: 75, eco: 82 });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadScores();\n  }, [transactions, accounts]);\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (!layout.autoRefresh) return;\n\n    const interval = setInterval(() => {\n      setScores(prev => ({\n        financial: Math.max(0, Math.min(100, prev.financial + (Math.random() - 0.5) * 4)),\n        health: Math.max(0, Math.min(100, prev.health + (Math.random() - 0.5) * 4)),\n        eco: Math.max(0, Math.min(100, prev.eco + (Math.random() - 0.5) * 4)),\n      }));\n    }, layout.refreshInterval);\n\n    return () => clearInterval(interval);\n  }, [layout.autoRefresh, layout.refreshInterval]);\n\n  const tabs = [\n    { id: 'overview' as ViewMode, label: 'Overview', icon: TrendingUp },\n    { id: 'trends' as ViewMode, label: 'Trends', icon: BarChart3 },\n    { id: 'financial' as ViewMode, label: 'Financial', icon: DollarSign },\n    { id: 'health' as ViewMode, label: 'Health', icon: Heart },\n    { id: 'eco' as ViewMode, label: 'Eco', icon: Leaf },\n    { id: 'detailed' as ViewMode, label: 'Detailed', icon: Activity },\n  ];\n\n  const handleLayoutChange = useCallback((key: keyof LayoutConfig, value: boolean | number) => {\n    setLayout(prev => ({ ...prev, [key]: value }));\n  }, []);\n\n  if (isLoading) {\n    return (\n      <Card className={cn('w-full text-white bg-black/20 backdrop-blur-sm', className)}>\n        <div className=\"flex items-center justify-center py-20\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white/50\"></div>\n            <span className=\"text-white text-lg\">Loading insights...</span>\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <div className={cn('w-full text-white space-y-6', className)} data-testid=\"vueni-unified-insights\">\n      {/* Header */}\n      {layout.showHeader && (\n        <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className={cn(\n                'font-bold text-white mb-2',\n                layout.compactMode ? 'text-xl' : 'text-3xl lg:text-4xl'\n              )}>\n                Financial Insights\n              </h1>\n              <p className=\"text-white/70 text-sm lg:text-base\">\n                {variant === 'comprehensive' ? 'Complete analysis of your financial ecosystem' :\n                 variant === 'enhanced' ? 'Advanced insights with real-time monitoring' :\n                 variant === 'refined' ? 'Streamlined view of your financial health' :\n                 variant === 'mobile' ? 'Your finances at a glance' :\n                 'Comprehensive analysis of your financial health, wellness spending, and environmental impact'}\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setIsVisible(!isVisible)}\n                className=\"text-white/70 hover:text-white\"\n              >\n                {isVisible ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </Button>\n              \n              {layout.enableExport && onExportData && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={onExportData}\n                  className=\"text-white/70 hover:text-white\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                </Button>\n              )}\n              \n              {layout.showSettings && enableFeatureFlags && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setShowLayoutSettings(!showLayoutSettings)}\n                  className=\"text-white/70 hover:text-white\"\n                >\n                  <Settings className=\"h-4 w-4\" />\n                </Button>\n              )}\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Layout Settings */}\n      {showLayoutSettings && enableFeatureFlags && (\n        <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-4\">\n          <h3 className=\"text-lg font-semibold text-white mb-4\">Layout Settings</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Compact Mode</span>\n              <Switch\n                checked={layout.compactMode}\n                onCheckedChange={(checked) => handleLayoutChange('compactMode', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Animations</span>\n              <Switch\n                checked={layout.animationsEnabled}\n                onCheckedChange={(checked) => handleLayoutChange('animationsEnabled', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Auto Refresh</span>\n              <Switch\n                checked={layout.autoRefresh}\n                onCheckedChange={(checked) => handleLayoutChange('autoRefresh', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Show Charts</span>\n              <Switch\n                checked={layout.showCharts}\n                onCheckedChange={(checked) => handleLayoutChange('showCharts', checked)}\n              />\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Tab Navigation */}\n      {layout.showTabs && (\n        <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-2\">\n          <div className=\"flex flex-wrap justify-center gap-2\">\n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <Button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  variant={activeTab === tab.id ? \"default\" : \"ghost\"}\n                  className={cn(\n                    'flex items-center space-x-2 transition-all duration-300',\n                    layout.compactMode ? 'px-3 py-2 text-xs' : 'px-4 py-2 text-sm',\n                    activeTab === tab.id\n                      ? 'bg-white/20 text-white border-white/30'\n                      : 'text-white/70 hover:text-white/90 hover:bg-white/10'\n                  )}\n                >\n                  <Icon className={cn(\"w-4 h-4\", layout.compactMode && \"w-3 h-3\")} />\n                  <span>{tab.label}</span>\n                </Button>\n              );\n            })}\n          </div>\n        </Card>\n      )}\n\n      {/* Content */}\n      <div className={cn('transition-all duration-300', !isVisible && 'blur-sm opacity-50')}>\n        {activeTab === 'overview' && (\n          <div className=\"space-y-6\">\n            {/* Score Overview */}\n            {layout.showScoreCards && (\n              <Card className=\"bg-black/20 backdrop-blur-sm border-white/10 p-6\">\n                <h3 className={cn(\n                  \"font-bold text-white mb-6 text-center\",\n                  layout.compactMode ? \"text-lg\" : \"text-xl\"\n                )}>\n                  Your Overall Scores\n                </h3>\n                <EnhancedScoreDisplay \n                  scores={scores} \n                  layout={layout}\n                  animationsEnabled={layout.animationsEnabled}\n                />\n              </Card>\n            )}\n\n            {/* Quick Metrics */}\n            {layout.showMetrics && (\n              <QuickMetrics \n                financialData={financialData}\n                wellnessData={wellnessData}\n                ecoData={ecoData}\n                layout={layout}\n              />\n            )}\n          </div>\n        )}\n\n        {activeTab === 'trends' && layout.showCharts && (\n          <div className=\"space-y-6\">\n            <Suspense fallback={<LoadingSpinner />}>\n              <TimeSeriesChart \n                data={[]} \n                title=\"Score Progress Over Time (Past 12 Months)\"\n              />\n              <SpendingTrendsChart \n                data={[]} \n                title=\"Monthly Financial Overview\"\n              />\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <CategoryTrendsChart \n                  data={[]} \n                  type=\"health\"\n                  title=\"Health & Wellness Spending Trends\"\n                />\n                <CategoryTrendsChart \n                  data={[]} \n                  type=\"eco\"\n                  title=\"Eco & Sustainability Spending Trends\"\n                />\n              </div>\n            </Suspense>\n          </div>\n        )}\n\n        {activeTab === 'financial' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <FinancialCard data={financialData} />\n          </Suspense>\n        )}\n\n        {activeTab === 'health' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <ComprehensiveWellnessCard \n              score={wellnessData.overallScore}\n              healthKitData={{}}\n              spendingCategories={wellnessData.monthlySpending}\n              trends={wellnessData.healthTrends}\n            />\n          </Suspense>\n        )}\n\n        {activeTab === 'eco' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <ComprehensiveEcoCard \n              score={ecoData.overallScore}\n              ecoMetrics={{}}\n              spendingCategories={ecoData.monthlySpending}\n              monthlyImpact={ecoData.monthlyImpact}\n              trends={ecoData.environmentalTrends}\n            />\n          </Suspense>\n        )}\n\n        {activeTab === 'detailed' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n            <Suspense fallback={<LoadingSpinner />}>\n              <FinancialCard data={financialData} />\n              <ComprehensiveWellnessCard \n                score={wellnessData.overallScore}\n                healthKitData={{}}\n                spendingCategories={wellnessData.monthlySpending}\n                trends={wellnessData.healthTrends}\n              />\n              <ComprehensiveEcoCard \n                score={ecoData.overallScore}\n                ecoMetrics={{}}\n                spendingCategories={ecoData.monthlySpending}\n                monthlyImpact={ecoData.monthlyImpact}\n                trends={ecoData.environmentalTrends}\n              />\n            </Suspense>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nVueniUnifiedInsightsPage.displayName = 'VueniUnifiedInsightsPage';\n\n// Export preset configurations\nexport const insightsPresets = {\n  dashboard: {\n    variant: 'dashboard' as InsightsVariant,\n    defaultTab: 'overview' as ViewMode,\n  },\n  mobile: {\n    variant: 'mobile' as InsightsVariant, \n    defaultTab: 'overview' as ViewMode,\n  },\n  detailed: {\n    variant: 'comprehensive' as InsightsVariant,\n    defaultTab: 'detailed' as ViewMode,\n  },\n  minimal: {\n    variant: 'optimized' as InsightsVariant,\n    defaultTab: 'overview' as ViewMode,\n  },\n  analytics: {\n    variant: 'enhanced' as InsightsVariant,\n    defaultTab: 'trends' as ViewMode,\n  },\n} as const;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/shared/VueniUnifiedTransactionList.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/shared/VueniUnifiedTransactionList.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, memo } from 'react';\nimport { VueniGlassCard, VueniButton, VueniStatusBadge } from './VueniDesignSystem';\nimport { SharedScoreCircle } from './SharedScoreCircle';\nimport { \n  Search, \n  Filter, \n  Download, \n  ChevronDown, \n  TrendingUp, \n  TrendingDown, \n  Minus,\n  Calendar,\n  Eye,\n  MoreVertical\n} from 'lucide-react';\n\nexport type TransactionVariant = 'default' | 'apple' | 'clean' | 'polished' | 'enterprise' | 'mobile';\n\nexport interface VueniTransaction {\n  id: string;\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n  scores?: {\n    health: number;\n    eco: number;\n    financial: number;\n  };\n  description?: string;\n  reference?: string;\n  tags?: string[];\n}\n\nexport interface VueniTransactionFeatures {\n  showScores?: boolean;\n  showCategories?: boolean;\n  searchable?: boolean;\n  filterable?: boolean;\n  compactMode?: boolean;\n  animationsEnabled?: boolean;\n  groupByDate?: boolean;\n  virtualScrolling?: boolean;\n  exportEnabled?: boolean;\n}\n\nexport interface VueniUnifiedTransactionListProps {\n  transactions: VueniTransaction[];\n  variant?: TransactionVariant;\n  features?: VueniTransactionFeatures;\n  currency?: string;\n  className?: string;\n  onTransactionClick?: (transaction: VueniTransaction) => void;\n  onTransactionAction?: (action: string, transaction: VueniTransaction) => void;\n  onExportData?: () => void;\n}\n\nconst defaultFeatures: VueniTransactionFeatures = {\n  showScores: true,\n  showCategories: true,\n  searchable: true,\n  filterable: true,\n  compactMode: false,\n  animationsEnabled: true,\n  groupByDate: true,\n  virtualScrolling: false,\n  exportEnabled: true,\n};\n\n// Variant-specific styling configurations\nconst variantConfigs = {\n  default: {\n    containerClass: 'space-y-1',\n    itemClass: 'flex items-center gap-4 p-4 hover:bg-white/[0.02] rounded-lg transition-all duration-200 cursor-pointer',\n    headerClass: 'text-xl font-semibold text-white',\n    dateHeaderClass: 'text-sm font-medium text-white/60 mb-3 px-2',\n  },\n  apple: {\n    containerClass: 'space-y-2',\n    itemClass: 'flex items-center gap-3 p-3 bg-white/[0.03] hover:bg-white/[0.06] rounded-xl transition-all duration-300 cursor-pointer border border-white/[0.05]',\n    headerClass: 'text-xl font-semibold text-white',\n    dateHeaderClass: 'text-sm font-medium text-white/70 mb-4 px-3 uppercase tracking-wide',\n  },\n  clean: {\n    containerClass: 'space-y-0 divide-y divide-white/[0.05]',\n    itemClass: 'flex items-center gap-4 p-4 hover:bg-white/[0.01] transition-all duration-150 cursor-pointer first:rounded-t-lg last:rounded-b-lg',\n    headerClass: 'text-lg font-medium text-white',\n    dateHeaderClass: 'text-sm font-medium text-white/50 mb-2 px-4',\n  },\n  polished: {\n    containerClass: 'space-y-3',\n    itemClass: 'flex items-center gap-4 p-5 bg-gradient-to-r from-white/[0.02] to-transparent hover:from-white/[0.04] rounded-lg border-l-2 border-transparent hover:border-blue-500/50 transition-all duration-200 cursor-pointer',\n    headerClass: 'text-xl font-bold text-white',\n    dateHeaderClass: 'text-sm font-semibold text-white/60 mb-3 px-5 border-b border-white/[0.1] pb-2',\n  },\n  enterprise: {\n    containerClass: 'space-y-0',\n    itemClass: 'flex items-center gap-6 p-4 hover:bg-white/[0.02] transition-all duration-100 cursor-pointer border-b border-white/[0.05] last:border-b-0',\n    headerClass: 'text-lg font-semibold text-white tracking-tight',\n    dateHeaderClass: 'text-xs font-medium text-white/50 mb-2 px-4 uppercase tracking-wider',\n  },\n  mobile: {\n    containerClass: 'space-y-2',\n    itemClass: 'flex items-center gap-3 p-3 bg-white/[0.04] hover:bg-white/[0.06] rounded-lg transition-all duration-200 cursor-pointer active:scale-98',\n    headerClass: 'text-lg font-semibold text-white',\n    dateHeaderClass: 'text-sm font-medium text-white/60 mb-3 px-3',\n  },\n};\n\nconst VueniTransactionItem = memo(({ \n  transaction, \n  variant = 'default',\n  features = defaultFeatures,\n  currency = 'USD',\n  onClick,\n  onAction\n}: {\n  transaction: VueniTransaction;\n  variant: TransactionVariant;\n  features: VueniTransactionFeatures;\n  currency: string;\n  onClick?: (transaction: VueniTransaction) => void;\n  onAction?: (action: string, transaction: VueniTransaction) => void;\n}) => {\n  const config = variantConfigs[variant];\n\n  const formatAmount = (amount: number) => {\n    const formatted = Math.abs(amount).toLocaleString('en-US', {\n      style: 'currency',\n      currency,\n      minimumFractionDigits: 2\n    });\n    return amount < 0 ? `-${formatted}` : `+${formatted}`;\n  };\n\n  const getAmountColor = (amount: number) => {\n    if (amount > 0) return '#10B981'; // Green for income\n    if (amount < 0) return '#EF4444'; // Red for expenses\n    return '#6B7280'; // Gray for neutral\n  };\n\n  const getStatusIcon = (amount: number) => {\n    if (amount > 0) return <TrendingUp className=\"w-4 h-4\" />;\n    if (amount < 0) return <TrendingDown className=\"w-4 h-4\" />;\n    return <Minus className=\"w-4 h-4\" />;\n  };\n\n  return (\n    <div \n      className={`group ${config.itemClass} ${features.animationsEnabled ? 'transition-all duration-200' : ''}`}\n      onClick={() => onClick?.(transaction)}\n    >\n      {/* Status Indicator */}\n      <div className=\"flex-shrink-0\">\n        <VueniStatusBadge \n          status={transaction.status === 'completed' ? 'success' : \n                 transaction.status === 'pending' ? 'warning' : 'error'}\n          variant={variant === 'enterprise' ? 'minimal' : 'default'}\n        />\n      </div>\n\n      {/* Category Icon */}\n      {variant !== 'clean' && (\n        <div className=\"w-10 h-10 rounded-lg bg-white/[0.06] flex items-center justify-center flex-shrink-0\">\n          <div \n            className=\"w-4 h-4 flex items-center justify-center\"\n            style={{ color: transaction.category.color || getAmountColor(transaction.amount) }}\n          >\n            {getStatusIcon(transaction.amount)}\n          </div>\n        </div>\n      )}\n\n      {/* Transaction Details */}\n      <div className=\"flex-1 min-w-0\">\n        <h4 className={`font-medium text-white truncate group-hover:text-blue-300 transition-colors ${\n          features.compactMode ? 'text-sm' : 'text-base'\n        }`}>\n          {transaction.merchant}\n        </h4>\n        <div className={`flex items-center gap-2 mt-1 ${features.compactMode ? 'text-xs' : 'text-sm'}`}>\n          {features.showCategories && (\n            <>\n              <span className=\"text-white/60\">{transaction.category.name}</span>\n              <span className=\"text-white/40\">•</span>\n            </>\n          )}\n          <span className=\"text-white/40\">\n            {new Date(transaction.date).toLocaleDateString()}\n          </span>\n          {transaction.reference && variant === 'enterprise' && (\n            <>\n              <span className=\"text-white/40\">•</span>\n              <span className=\"text-white/40 text-xs\">{transaction.reference}</span>\n            </>\n          )}\n        </div>\n        {transaction.description && (variant === 'polished' || variant === 'enterprise') && (\n          <p className=\"text-xs text-white/50 mt-1 truncate\">{transaction.description}</p>\n        )}\n      </div>\n\n      {/* Amount */}\n      <div className=\"text-right flex-shrink-0\">\n        <div \n          className={`font-semibold ${features.compactMode ? 'text-base' : 'text-lg'}`}\n          style={{ color: getAmountColor(transaction.amount) }}\n        >\n          {formatAmount(transaction.amount)}\n        </div>\n        {!features.compactMode && (\n          <div className=\"text-xs text-white/40 mt-1 capitalize\">\n            {transaction.status}\n          </div>\n        )}\n      </div>\n\n      {/* Score Circles */}\n      {features.showScores && transaction.scores && (\n        <div className=\"flex items-center gap-2 flex-shrink-0 ml-4\">\n          <SharedScoreCircle \n            scores={[\n              { value: transaction.scores.health, type: 'health' as const },\n              { value: transaction.scores.eco, type: 'eco' as const },\n              { value: transaction.scores.financial, type: 'financial' as const }\n            ]}\n            size={features.compactMode ? 'small' : 'medium'}\n            variant={variant}\n          />\n        </div>\n      )}\n\n      {/* Actions */}\n      {(variant === 'enterprise' || variant === 'polished') && (\n        <div className=\"flex-shrink-0 opacity-0 group-hover:opacity-100 transition-opacity\">\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onAction?.('view-details', transaction);\n            }}\n            className=\"p-1 rounded hover:bg-white/[0.1] transition-colors\"\n          >\n            <Eye className=\"w-4 h-4 text-white/60\" />\n          </button>\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onAction?.('more-options', transaction);\n            }}\n            className=\"p-1 rounded hover:bg-white/[0.1] transition-colors ml-1\"\n          >\n            <MoreVertical className=\"w-4 h-4 text-white/60\" />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n});\n\nexport const VueniUnifiedTransactionList: React.FC<VueniUnifiedTransactionListProps> = memo(({\n  transactions,\n  variant = 'default',\n  features = defaultFeatures,\n  currency = 'USD',\n  className,\n  onTransactionClick,\n  onTransactionAction,\n  onExportData\n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [selectedStatus, setSelectedStatus] = useState('all');\n\n  const config = variantConfigs[variant];\n  const activeFeatures = { ...defaultFeatures, ...features };\n\n  // Process and filter transactions\n  const processedTransactions = useMemo(() => {\n    const filtered = transactions.filter(transaction => {\n      const matchesSearch = !activeFeatures.searchable || \n        transaction.merchant.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        transaction.category.name.toLowerCase().includes(searchQuery.toLowerCase());\n      \n      const matchesCategory = selectedCategory === 'all' || \n        transaction.category.name === selectedCategory;\n      \n      const matchesStatus = selectedStatus === 'all' || \n        transaction.status === selectedStatus;\n      \n      return matchesSearch && matchesCategory && matchesStatus;\n    });\n\n    // Sort by date (newest first)\n    return filtered.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }, [transactions, searchQuery, selectedCategory, selectedStatus, activeFeatures.searchable]);\n\n  // Group transactions by date\n  const groupedTransactions = useMemo(() => {\n    if (!activeFeatures.groupByDate) {\n      return { 'All Transactions': processedTransactions };\n    }\n\n    return processedTransactions.reduce((groups, transaction) => {\n      const date = new Date(transaction.date).toDateString();\n      if (!groups[date]) {\n        groups[date] = [];\n      }\n      groups[date].push(transaction);\n      return groups;\n    }, {} as Record<string, VueniTransaction[]>);\n  }, [processedTransactions, activeFeatures.groupByDate]);\n\n  const formatDateHeader = (dateString: string) => {\n    if (!activeFeatures.groupByDate) return dateString;\n    \n    const date = new Date(dateString);\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    if (date.toDateString() === today.toDateString()) {\n      return 'Today';\n    } else if (date.toDateString() === yesterday.toDateString()) {\n      return 'Yesterday';\n    } else {\n      return date.toLocaleDateString('en-US', {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric'\n      });\n    }\n  };\n\n  const categories = useMemo(() => {\n    const cats = Array.from(new Set(transactions.map(t => t.category.name)));\n    return ['all', ...cats];\n  }, [transactions]);\n\n  const statuses = ['all', 'completed', 'pending', 'failed'];\n\n  return (\n    <VueniGlassCard variant={variant === 'apple' ? 'prominent' : 'default'} className={className}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className={config.headerClass}>\n          Transactions ({processedTransactions.length})\n        </h2>\n        <div className=\"flex items-center gap-3\">\n          {activeFeatures.exportEnabled && (\n            <VueniButton \n              variant=\"glass\" \n              size=\"sm\"\n              onClick={onExportData}\n            >\n              <Download className=\"w-4 h-4\" />\n            </VueniButton>\n          )}\n          {activeFeatures.filterable && (\n            <VueniButton variant=\"glass\" size=\"sm\">\n              <Filter className=\"w-4 h-4\" />\n            </VueniButton>\n          )}\n        </div>\n      </div>\n\n      {/* Filters */}\n      {(activeFeatures.searchable || activeFeatures.filterable) && (\n        <div className=\"flex flex-col gap-4 mb-6 sm:flex-row\">\n          {/* Search */}\n          {activeFeatures.searchable && (\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white/40\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search transactions...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 bg-white/[0.06] border border-white/[0.08] rounded-lg text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all\"\n              />\n            </div>\n          )}\n\n          {/* Filters */}\n          {activeFeatures.filterable && (\n            <div className=\"flex gap-3\">\n              {/* Category Filter */}\n              <div className=\"relative\">\n                <select\n                  value={selectedCategory}\n                  onChange={(e) => setSelectedCategory(e.target.value)}\n                  className=\"appearance-none pl-4 pr-10 py-2 bg-white/[0.06] border border-white/[0.08] rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all min-w-[140px]\"\n                >\n                  {categories.map(category => (\n                    <option key={category} value={category} className=\"bg-gray-900\">\n                      {category === 'all' ? 'All Categories' : category}\n                    </option>\n                  ))}\n                </select>\n                <ChevronDown className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white/40 pointer-events-none\" />\n              </div>\n\n              {/* Status Filter */}\n              <div className=\"relative\">\n                <select\n                  value={selectedStatus}\n                  onChange={(e) => setSelectedStatus(e.target.value)}\n                  className=\"appearance-none pl-4 pr-10 py-2 bg-white/[0.06] border border-white/[0.08] rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all min-w-[120px]\"\n                >\n                  {statuses.map(status => (\n                    <option key={status} value={status} className=\"bg-gray-900\">\n                      {status === 'all' ? 'All Status' : status.charAt(0).toUpperCase() + status.slice(1)}\n                    </option>\n                  ))}\n                </select>\n                <ChevronDown className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white/40 pointer-events-none\" />\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Transaction Groups */}\n      <div className=\"space-y-6\">\n        {Object.entries(groupedTransactions).map(([date, dateTransactions]) => (\n          <div key={date}>\n            {activeFeatures.groupByDate && (\n              <h3 className={config.dateHeaderClass}>\n                {formatDateHeader(date)}\n              </h3>\n            )}\n            <div className={config.containerClass}>\n              {dateTransactions.map((transaction) => (\n                <VueniTransactionItem \n                  key={transaction.id} \n                  transaction={transaction}\n                  variant={variant}\n                  features={activeFeatures}\n                  currency={currency}\n                  onClick={onTransactionClick}\n                  onAction={onTransactionAction}\n                />\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Empty State */}\n      {processedTransactions.length === 0 && (\n        <div className=\"text-center py-12\">\n          <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-white/[0.06] flex items-center justify-center\">\n            <Calendar className=\"w-8 h-8 text-white/40\" />\n          </div>\n          <p className=\"text-white/60 mb-2\">No transactions found</p>\n          <p className=\"text-white/40 text-sm\">\n            {searchQuery || selectedCategory !== 'all' || selectedStatus !== 'all'\n              ? 'Try adjusting your search or filters'\n              : 'Your transactions will appear here'\n            }\n          </p>\n        </div>\n      )}\n    </VueniGlassCard>\n  );\n});\n\n// Preset configurations for easy deployment\nexport const transactionListPresets = {\n  dashboard: {\n    variant: 'default' as TransactionVariant,\n    features: {\n      showScores: true,\n      showCategories: true,\n      searchable: false,\n      filterable: false,\n      compactMode: true,\n      groupByDate: true,\n      exportEnabled: false,\n    }\n  },\n  fullFeatured: {\n    variant: 'polished' as TransactionVariant,\n    features: {\n      showScores: true,\n      showCategories: true,\n      searchable: true,\n      filterable: true,\n      compactMode: false,\n      groupByDate: true,\n      exportEnabled: true,\n    }\n  },\n  mobile: {\n    variant: 'mobile' as TransactionVariant,\n    features: {\n      showScores: false,\n      showCategories: true,\n      searchable: true,\n      filterable: false,\n      compactMode: true,\n      groupByDate: true,\n      exportEnabled: false,\n    }\n  },\n  enterprise: {\n    variant: 'enterprise' as TransactionVariant,\n    features: {\n      showScores: true,\n      showCategories: true,\n      searchable: true,\n      filterable: true,\n      compactMode: false,\n      groupByDate: false,\n      exportEnabled: true,\n    }\n  }\n};\n\nVueniTransactionItem.displayName = 'VueniTransactionItem';\nVueniUnifiedTransactionList.displayName = 'VueniUnifiedTransactionList';\n\nexport default VueniUnifiedTransactionList;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/shared/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/shared/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Shared components that consolidate duplicate implementations\n\n// Transaction List Components\nexport { \n  VueniUnifiedTransactionList,\n  transactionListPresets\n} from './VueniUnifiedTransactionList';\nexport type { \n  VueniUnifiedTransactionListProps, \n  VueniTransaction,\n  VueniTransactionFeatures,\n  TransactionVariant\n} from './VueniUnifiedTransactionList';\n\n// Score Circle Components\nexport { SharedScoreCircle } from './SharedScoreCircle';\nexport type { SharedScoreCircleProps, ScoreGroupProps, ScoreType } from './SharedScoreCircle';\n\n// Insights Page Components\nexport { ConfigurableInsightsPage } from './ConfigurableInsightsPage';\nexport type { ConfigurableInsightsPageProps } from './ConfigurableInsightsPage';\n\nexport { \n  VueniUnifiedInsightsPage,\n  insightsPresets\n} from './VueniUnifiedInsightsPage';\nexport type { \n  VueniUnifiedInsightsPageProps, \n  InsightsVariant, \n  ViewMode,\n  Transaction as InsightsTransaction, \n  Account as InsightsAccount \n} from './VueniUnifiedInsightsPage';\n\n// Design System Components\nexport { \n  VueniDesignSystem,\n  VueniGlassCard,\n  VueniButton,\n  VueniMetric,\n  VueniStatusBadge,\n  VueniSkeleton,\n  VueniContainer,\n  VueniSection,\n  VueniGrid,\n  vueniTokens\n} from './VueniDesignSystem';\nexport type {\n  VueniGlassCardProps,\n  VueniButtonProps,\n  VueniMetricProps,\n  VueniStatusBadgeProps,\n  VueniSkeletonProps\n} from './VueniDesignSystem';\n\n// Feature Flag System\nexport {\n  FeatureFlagProvider,\n  useFeatureFlags,\n  useTransactionVariant,\n  useInsightsVariant,\n  useCompactMode,\n  useAnimationsEnabled,\n  usePerformanceMode,\n  FeatureFlagDebugPanel,\n  withFeatureFlag,\n  checkFeatureFlag,\n  featureFlagPresets\n} from './VueniFeatureFlags';\nexport type { \n  FeatureFlags, \n  FeatureFlagContextType \n} from './VueniFeatureFlags';\n\n// All core components now consolidated and production-ready","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/components/wrapped/WrappedPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/components/wrapped/WrappedPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport GlassCard from '@/components/GlassCard';\nimport { Trophy, TrendingUp, Star, Share, Award, Sparkles } from 'lucide-react';\nimport { mockReportService, WrappedData } from '@/features/mockReportService';\n\nconst WrappedPage = () => {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [isVisible, setIsVisible] = useState(false);\n  const wrappedData = mockReportService.getWrappedData(2024);\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  const slides = [\n    {\n      title: \"Your 2024 Financial Journey\",\n      content: (\n        <div className=\"text-center space-y-6\">\n          <div className=\"w-24 h-24 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto\">\n            <Sparkles className=\"w-12 h-12 text-white\" />\n          </div>\n          <h2 className=\"text-3xl font-bold text-white\">Welcome to Your</h2>\n          <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n            Financial Wrapped 2024\n          </h1>\n          <p className=\"text-white/70 text-lg\">Let's look back at your amazing financial year!</p>\n        </div>\n      )\n    },\n    {\n      title: \"Total Spending\",\n      content: (\n        <div className=\"text-center space-y-6\">\n          <Trophy className=\"w-16 h-16 text-yellow-400 mx-auto\" />\n          <h2 className=\"text-2xl font-bold text-white\">You spent a total of</h2>\n          <div className=\"text-5xl font-bold text-white mb-2\">\n            ${wrappedData.totalSpent.toLocaleString()}\n          </div>\n          <p className=\"text-white/70\">across {wrappedData.topMerchants.reduce((acc, m) => acc + m.visits, 0)} transactions</p>\n          <div className=\"mt-8 p-4 bg-green-500/20 rounded-lg border border-green-500/30\">\n            <p className=\"text-green-400 font-medium\">\n              💰 You saved ${wrappedData.totalSaved.toLocaleString()} this year!\n            </p>\n          </div>\n        </div>\n      )\n    },\n    {\n      title: \"Top Merchants\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"text-center\">\n            <Star className=\"w-12 h-12 text-yellow-400 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-white mb-2\">Your Favorite Places</h2>\n            <p className=\"text-white/70\">Where you spent the most in 2024</p>\n          </div>\n          \n          <div className=\"space-y-4\">\n            {wrappedData.topMerchants.slice(0, 5).map((merchant, index) => (\n              <GlassCard key={merchant.name} className=\"p-4 glass-secondary\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold ${\n                      index === 0 ? 'bg-yellow-500' : \n                      index === 1 ? 'bg-gray-400' : \n                      index === 2 ? 'bg-amber-600' : 'bg-blue-500'\n                    }`}>\n                      {index + 1}\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-white\">{merchant.name}</p>\n                      <p className=\"text-white/70 text-sm\">{merchant.visits} visits</p>\n                    </div>\n                  </div>\n                  <p className=\"font-bold text-white\">${merchant.amount.toLocaleString()}</p>\n                </div>\n              </GlassCard>\n            ))}\n          </div>\n        </div>\n      )\n    },\n    {\n      title: \"Biggest Purchase\",\n      content: (\n        <div className=\"text-center space-y-6\">\n          <Award className=\"w-16 h-16 text-purple-400 mx-auto\" />\n          <h2 className=\"text-2xl font-bold text-white\">Your Biggest Splurge</h2>\n          \n          <GlassCard className=\"p-6 glass-primary max-w-sm mx-auto\">\n            <div className=\"space-y-4\">\n              <div className=\"text-3xl font-bold text-white\">\n                ${wrappedData.biggestPurchase.amount.toLocaleString()}\n              </div>\n              <div>\n                <p className=\"text-lg font-medium text-white\">{wrappedData.biggestPurchase.merchant}</p>\n                <p className=\"text-white/70\">\n                  {new Date(wrappedData.biggestPurchase.date).toLocaleDateString('en-US', {\n                    month: 'long',\n                    day: 'numeric',\n                    year: 'numeric'\n                  })}\n                </p>\n              </div>\n            </div>\n          </GlassCard>\n          \n          <p className=\"text-white/70\">Hope it was worth it! 🎉</p>\n        </div>\n      )\n    },\n    {\n      title: \"Categories Improved\",\n      content: (\n        <div className=\"text-center space-y-6\">\n          <TrendingUp className=\"w-16 h-16 text-green-400 mx-auto\" />\n          <h2 className=\"text-2xl font-bold text-white\">You Crushed It! 🎯</h2>\n          <p className=\"text-white/70 text-lg\">Categories where you spent less than last year</p>\n          \n          <div className=\"grid grid-cols-1 gap-3 max-w-sm mx-auto\">\n            {wrappedData.categoriesImproved.map((category) => (\n              <GlassCard key={category} className=\"p-4 glass-green\">\n                <div className=\"flex items-center justify-center gap-2\">\n                  <span className=\"text-lg\">✅</span>\n                  <span className=\"font-medium text-white\">{category}</span>\n                </div>\n              </GlassCard>\n            ))}\n          </div>\n          \n          <div className=\"mt-6 p-4 bg-green-500/20 rounded-lg border border-green-500/30\">\n            <p className=\"text-green-400 font-medium\">\n              You saved an extra ${wrappedData.savingsVsPreviousYear.toLocaleString()} compared to 2023!\n            </p>\n          </div>\n        </div>\n      )\n    },\n    {\n      title: \"Financial Score\",\n      content: (\n        <div className=\"text-center space-y-6\">\n          <div className=\"relative w-32 h-32 mx-auto\">\n            <div className=\"w-32 h-32 rounded-full border-8 border-white/20 flex items-center justify-center\">\n              <div className=\"text-4xl font-bold text-white\">\n                {wrappedData.financialScore}/10\n              </div>\n            </div>\n            <div \n              className=\"absolute top-0 left-0 w-32 h-32 rounded-full border-8 border-green-400 border-t-transparent border-r-transparent transition-all duration-1000\"\n              style={{ \n                transform: `rotate(${(wrappedData.financialScore / 10) * 360}deg)`,\n                transformOrigin: 'center'\n              }}\n            />\n          </div>\n          \n          <div>\n            <h2 className=\"text-2xl font-bold text-white mb-2\">Your Financial Health Score</h2>\n            <p className=\"text-white/70 text-lg\">\n              {wrappedData.financialScore >= 8 ? \"Excellent! 🌟\" :\n               wrappedData.financialScore >= 6 ? \"Good progress! 👍\" :\n               \"Keep improving! 💪\"}\n            </p>\n          </div>\n          \n          <GlassCard className=\"p-4 glass-blue max-w-sm mx-auto\">\n            <p className=\"text-white text-sm\">\n              Based on your saving habits, spending control, and budget adherence throughout 2024.\n            </p>\n          </GlassCard>\n        </div>\n      )\n    },\n    {\n      title: \"Share Your Story\",\n      content: (\n        <div className=\"text-center space-y-6\">\n          <Share className=\"w-16 h-16 text-blue-400 mx-auto\" />\n          <h2 className=\"text-2xl font-bold text-white\">Share Your Success!</h2>\n          <p className=\"text-white/70\">Let your friends see how well you managed your finances in 2024</p>\n          \n          <div className=\"space-y-4\">\n            <button className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-3 px-6 rounded-lg transition-colors\">\n              Share on Social Media\n            </button>\n            <button className=\"w-full bg-white/10 hover:bg-white/20 text-white font-medium py-3 px-6 rounded-lg transition-colors border border-white/20\">\n              Download as Image\n            </button>\n          </div>\n          \n          <div className=\"mt-8 p-4 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-lg border border-blue-500/30\">\n            <p className=\"text-blue-400 font-medium text-sm\">\n              🎉 Here's to an even better 2025!\n            </p>\n          </div>\n        </div>\n      )\n    }\n  ];\n\n  const nextSlide = () => {\n    setCurrentSlide((prev) => (prev + 1) % slides.length);\n  };\n\n  const prevSlide = () => {\n    setCurrentSlide((prev) => (prev - 1 + slides.length) % slides.length);\n  };\n\n  return (\n    <div>\n      {/* WHY: Removed min-h-screen and flex to prevent double scroll */}\n      {/* Progress Bar */}\n      <div className=\"w-full bg-white/10 h-1 mb-6\">\n        <div \n          className=\"h-full bg-gradient-to-r from-blue-400 to-purple-400 transition-all duration-300\"\n          style={{ width: `${((currentSlide + 1) / slides.length) * 100}%` }}\n        />\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex items-center justify-center p-4 min-h-[calc(100vh-8rem)]\">\n        <GlassCard \n          className={`w-full max-w-md p-8 glass-primary transition-all duration-500 ${\n            isVisible ? 'opacity-100 transform translate-y-0' : 'opacity-0 transform translate-y-4'\n          }`}\n        >\n          <div className=\"min-h-[400px] flex flex-col justify-center\">\n            {slides[currentSlide].content}\n          </div>\n        </GlassCard>\n      </div>\n\n      {/* Navigation */}\n      <div className=\"flex items-center justify-between p-6\">\n        <button\n          onClick={prevSlide}\n          disabled={currentSlide === 0}\n          className=\"px-4 py-2 bg-white/10 hover:bg-white/20 disabled:bg-white/5 disabled:text-white/30 text-white rounded-lg transition-colors\"\n        >\n          Previous\n        </button>\n        \n        <div className=\"flex gap-2\">\n          {slides.map((_, index) => (\n            <button\n              key={index}\n              onClick={() => setCurrentSlide(index)}\n              className={`w-2 h-2 rounded-full transition-colors ${\n                index === currentSlide ? 'bg-blue-400' : 'bg-white/30'\n              }`}\n            />\n          ))}\n        </div>\n        \n        <button\n          onClick={nextSlide}\n          disabled={currentSlide === slides.length - 1}\n          className=\"px-4 py-2 bg-blue-500 hover:bg-blue-600 disabled:bg-white/5 disabled:text-white/30 text-white rounded-lg transition-colors\"\n        >\n          {currentSlide === slides.length - 1 ? 'Finish' : 'Next'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default WrappedPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/context/TimeRangeContext.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/context/TimeRangeContext.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * TimeRangeContext - Global state management for time range selection\n * Features: localStorage persistence, data filtering utilities, cross-component sharing\n * Based on Apple Human Interface Guidelines 2025\n */\n\nimport React, { \n  createContext, \n  useContext, \n  useReducer, \n  useEffect, \n  useCallback,\n  useMemo,\n  ReactNode \n} from 'react';\nimport { TimeRangeOption } from '@/components/charts/types';\n\n// Context state interface\nexport interface TimeRangeContextType {\n  selectedRange: TimeRangeOption;\n  setTimeRange: (range: TimeRangeOption) => void;\n  getFilteredData: <T extends Record<string, any>>(\n    data: T[], \n    dateField?: string,\n    dateFormat?: 'iso' | 'timestamp' | 'date'\n  ) => T[];\n  isInRange: (date: string | Date | number, range?: TimeRangeOption) => boolean;\n  getRangeLabel: (range?: TimeRangeOption) => string;\n  getRangeDates: (range?: TimeRangeOption) => { start: Date; end: Date };\n  // Performance utilities\n  getCacheKey: (range?: TimeRangeOption) => string;\n  clearCache: () => void;\n}\n\n// Action types for reducer\ntype TimeRangeAction = \n  | { type: 'SET_RANGE'; payload: TimeRangeOption }\n  | { type: 'RESET_TO_DEFAULT' }\n  | { type: 'HYDRATE_FROM_STORAGE'; payload: TimeRangeOption };\n\n// State interface\ninterface TimeRangeState {\n  selectedRange: TimeRangeOption;\n  lastChanged: number;\n}\n\n// Default state\nconst DEFAULT_RANGE: TimeRangeOption = '1M';\nconst STORAGE_KEY = 'liquid-spark-time-range';\n\n// Create context\nconst TimeRangeContext = createContext<TimeRangeContextType | null>(null);\n\n// Time range configurations\nconst TIME_RANGE_CONFIG = {\n  '1W': { days: 7, label: '1 Week' },\n  '1M': { days: 30, label: '1 Month' },\n  '3M': { days: 90, label: '3 Months' },\n  '6M': { days: 180, label: '6 Months' },  \n  '1Y': { days: 365, label: '1 Year' },\n  'ALL': { days: Infinity, label: 'All Time' }\n} as const;\n\n// Reducer for state management\nfunction timeRangeReducer(state: TimeRangeState, action: TimeRangeAction): TimeRangeState {\n  switch (action.type) {\n    case 'SET_RANGE':\n      return {\n        ...state,\n        selectedRange: action.payload,\n        lastChanged: Date.now()\n      };\n    case 'RESET_TO_DEFAULT':\n      return {\n        ...state,\n        selectedRange: DEFAULT_RANGE,\n        lastChanged: Date.now()\n      };\n    case 'HYDRATE_FROM_STORAGE':\n      return {\n        ...state,\n        selectedRange: action.payload,\n        lastChanged: Date.now()\n      };\n    default:\n      return state;\n  }\n}\n\n// Utility functions\nconst isValidTimeRange = (range: string): range is TimeRangeOption => {\n  return Object.keys(TIME_RANGE_CONFIG).includes(range);\n};\n\nconst getStoredRange = (): TimeRangeOption => {\n  try {\n    if (typeof window === 'undefined') return DEFAULT_RANGE;\n    \n    const stored = localStorage.getItem(STORAGE_KEY);\n    if (stored && isValidTimeRange(stored)) {\n      return stored;\n    }\n  } catch (error) {\n    console.warn('Failed to read time range from localStorage:', error);\n  }\n  return DEFAULT_RANGE;\n};\n\nconst storeRange = (range: TimeRangeOption): void => {\n  try {\n    if (typeof window === 'undefined') return;\n    localStorage.setItem(STORAGE_KEY, range);\n  } catch (error) {\n    console.warn('Failed to store time range in localStorage:', error);\n  }\n};\n\n// Date parsing utilities\nconst parseDate = (\n  date: string | Date | number, \n  format: 'iso' | 'timestamp' | 'date' = 'iso'\n): Date => {\n  if (date instanceof Date) return date;\n  \n  switch (format) {\n    case 'timestamp':\n      return new Date(typeof date === 'number' ? date : parseInt(date as string));\n    case 'date':\n      return new Date(date);\n    case 'iso':\n    default:\n      return new Date(date);\n  }\n};\n\n// Data filtering cache\ninterface FilterCache {\n  [key: string]: {\n    data: any[];\n    timestamp: number;\n    range: TimeRangeOption;\n  };\n}\n\nlet filterCache: FilterCache = {};\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n// Provider component\nexport interface TimeRangeProviderProps {\n  children: ReactNode;\n  defaultRange?: TimeRangeOption;\n  persistSelection?: boolean;\n  cacheFiltering?: boolean;\n}\n\nexport function TimeRangeProvider({\n  children,\n  defaultRange = DEFAULT_RANGE,\n  persistSelection = true,\n  cacheFiltering = true\n}: TimeRangeProviderProps) {\n  // Initialize state with stored value or default\n  const [state, dispatch] = useReducer(timeRangeReducer, {\n    selectedRange: defaultRange,\n    lastChanged: Date.now()\n  });\n\n  // Hydrate from localStorage on mount\n  useEffect(() => {\n    if (persistSelection) {\n      const storedRange = getStoredRange();\n      if (storedRange !== state.selectedRange) {\n        dispatch({ type: 'HYDRATE_FROM_STORAGE', payload: storedRange });\n      }\n    }\n  }, [persistSelection, state.selectedRange]);\n\n  // Persist to localStorage when range changes\n  useEffect(() => {\n    if (persistSelection && state.selectedRange !== defaultRange) {\n      storeRange(state.selectedRange);\n    }\n  }, [state.selectedRange, defaultRange, persistSelection]);\n\n  // Set time range handler\n  const setTimeRange = useCallback((range: TimeRangeOption) => {\n    dispatch({ type: 'SET_RANGE', payload: range });\n  }, []);\n\n  // Get range dates utility\n  const getRangeDates = useCallback((range?: TimeRangeOption) => {\n    const targetRange = range || state.selectedRange;\n    const config = TIME_RANGE_CONFIG[targetRange];\n    const end = new Date();\n    \n    if (config.days === Infinity) {\n      // For \"ALL\", return a very early start date\n      return {\n        start: new Date('2000-01-01'),\n        end\n      };\n    }\n    \n    const start = new Date(end.getTime() - (config.days * 24 * 60 * 60 * 1000));\n    return { start, end };\n  }, [state.selectedRange]);\n\n  // Check if date is in range\n  const isInRange = useCallback((\n    date: string | Date | number, \n    range?: TimeRangeOption\n  ): boolean => {\n    try {\n      const targetRange = range || state.selectedRange;\n      if (targetRange === 'ALL') return true;\n      \n      const dateObj = parseDate(date);\n      const { start, end } = getRangeDates(targetRange);\n      \n      return dateObj >= start && dateObj <= end;\n    } catch (error) {\n      console.warn('Error checking date range:', error);\n      return false;\n    }\n  }, [state.selectedRange, getRangeDates]);\n\n  // Get filtered data\n  const getFilteredData = useCallback(<T extends Record<string, any>>(\n    data: T[],\n    dateField: string = 'date',\n    dateFormat: 'iso' | 'timestamp' | 'date' = 'iso'\n  ): T[] => {\n    if (!data || data.length === 0) return [];\n    if (state.selectedRange === 'ALL') return data;\n\n    // Generate cache key\n    const cacheKey = cacheFiltering ? \n      `${JSON.stringify(data.slice(0, 5))}-${dateField}-${dateFormat}-${state.selectedRange}` : \n      '';\n\n    // Check cache\n    if (cacheFiltering && cacheKey && filterCache[cacheKey]) {\n      const cached = filterCache[cacheKey];\n      const now = Date.now();\n      \n      if (now - cached.timestamp < CACHE_DURATION && cached.range === state.selectedRange) {\n        return cached.data as T[];\n      }\n    }\n\n    // Filter data\n    const filtered = data.filter(item => {\n      const dateValue = item[dateField];\n      if (!dateValue) return false;\n      \n      try {\n        return isInRange(dateValue, state.selectedRange);\n      } catch (error) {\n        console.warn('Error filtering data point:', error, item);\n        return false;\n      }\n    });\n\n    // Cache result\n    if (cacheFiltering && cacheKey) {\n      filterCache[cacheKey] = {\n        data: filtered,\n        timestamp: Date.now(),\n        range: state.selectedRange\n      };\n    }\n\n    return filtered;\n  }, [state.selectedRange, isInRange, cacheFiltering]);\n\n  // Get range label\n  const getRangeLabel = useCallback((range?: TimeRangeOption): string => {\n    const targetRange = range || state.selectedRange;\n    return TIME_RANGE_CONFIG[targetRange].label;\n  }, [state.selectedRange]);\n\n  // Get cache key\n  const getCacheKey = useCallback((range?: TimeRangeOption): string => {\n    const targetRange = range || state.selectedRange;\n    return `timerange-${targetRange}-${Date.now()}`;\n  }, [state.selectedRange]);\n\n  // Clear cache\n  const clearCache = useCallback(() => {\n    filterCache = {};\n  }, []);\n\n  // Memoize context value\n  const contextValue = useMemo((): TimeRangeContextType => ({\n    selectedRange: state.selectedRange,\n    setTimeRange,\n    getFilteredData,\n    isInRange,\n    getRangeLabel,\n    getRangeDates,\n    getCacheKey,\n    clearCache\n  }), [\n    state.selectedRange,\n    setTimeRange,\n    getFilteredData,\n    isInRange,\n    getRangeLabel,\n    getRangeDates,\n    getCacheKey,\n    clearCache\n  ]);\n\n  return (\n    <TimeRangeContext.Provider value={contextValue}>\n      {children}\n    </TimeRangeContext.Provider>\n  );\n}\n\n// Hook to use the context\nexport function useTimeRangeContext(): TimeRangeContextType {\n  const context = useContext(TimeRangeContext);\n  \n  if (!context) {\n    throw new Error('useTimeRangeContext must be used within a TimeRangeProvider');\n  }\n  \n  return context;\n}\n\n// Export context for advanced use cases\nexport { TimeRangeContext };\n\n// Export configuration for external use\nexport { TIME_RANGE_CONFIG, DEFAULT_RANGE };","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/context/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/context/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Context barrel export\n * React contexts for Liquid Spark Finance\n */\n\n// TimeRange context for global time range state management\nexport {\n  TimeRangeProvider,\n  useTimeRangeContext,\n  TimeRangeContext,\n  TIME_RANGE_CONFIG,\n  DEFAULT_RANGE\n} from './TimeRangeContext';\n\nexport type {\n  TimeRangeContextType,\n  TimeRangeProviderProps\n} from './TimeRangeContext';","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/accounts/api/accountService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/accounts/api/accountService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  Account, \n  AccountConnection, \n  AccountBalance, \n  AccountPerformance,\n  Institution,\n  SyncStatus\n} from '@/types/accounts';\nimport { Transaction } from '@/types/transactions';\n\n/**\n * Comprehensive Account Management Service\n * Handles 10,000+ financial institutions via Plaid/Teller integration\n */\nexport class AccountService {\n  private static instance: AccountService;\n  private accounts: Map<string, Account> = new Map();\n  private connections: Map<string, AccountConnection> = new Map();\n  private institutions: Map<string, Institution> = new Map();\n  private balanceHistory: Map<string, AccountBalance[]> = new Map();\n\n  static getInstance(): AccountService {\n    if (!AccountService.instance) {\n      AccountService.instance = new AccountService();\n    }\n    return AccountService.instance;\n  }\n\n  /**\n   * Initialize Plaid integration with secure token handling\n   */\n  async initializePlaidConnection(config: {\n    clientId: string;\n    secret: string;\n    environment: 'sandbox' | 'development' | 'production';\n  }): Promise<void> {\n    // TODO: Initialize Plaid client with secure credential storage\n    console.log('Initializing Plaid connection...');\n    await this.loadSupportedInstitutions();\n  }\n\n  /**\n   * Create manual account for institutions not supported by Plaid\n   */\n  async createManualAccount(data: {\n    familyId: string;\n    name: string;\n    accountType: Account['accountType'];\n    accountSubtype: Account['accountSubtype'];\n    balance: number;\n    currency: string;\n    institutionName?: string;\n  }): Promise<Account> {\n    const account: Account = {\n      id: this.generateAccountId(),\n      familyId: data.familyId,\n      name: data.name,\n      accountType: data.accountType,\n      accountSubtype: data.accountSubtype,\n      balance: data.balance,\n      availableBalance: data.balance,\n      currency: data.currency,\n      isActive: true,\n      isManual: true,\n      syncStatus: 'manual',\n      institutionName: data.institutionName,\n      metadata: {\n        tags: [],\n        notes: 'Manually created account'\n      },\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.accounts.set(account.id, account);\n    await this.recordBalanceHistory(account.id, account.balance, account.currency);\n\n    return account;\n  }\n\n  /**\n   * Link accounts via Plaid using OAuth flow\n   */\n  async linkAccountsViaPlaid(data: {\n    familyId: string;\n    publicToken: string;\n    institutionId: string;\n    accounts: Array<{\n      id: string;\n      name: string;\n      type: string;\n      subtype: string;\n    }>;\n  }): Promise<Account[]> {\n    try {\n      // Exchange public token for access token\n      const accessToken = await this.exchangePlaidToken(data.publicToken);\n      \n      // Create connection record\n      const connection = await this.createAccountConnection({\n        familyId: data.familyId,\n        institutionId: data.institutionId,\n        provider: 'plaid',\n        accessToken,\n        accounts: data.accounts.map(a => a.id)\n      });\n\n      // Create account records\n      const createdAccounts: Account[] = [];\n      \n      for (const plaidAccount of data.accounts) {\n        const account = await this.createAccountFromPlaid({\n          familyId: data.familyId,\n          connectionId: connection.id,\n          plaidAccount,\n          institutionId: data.institutionId\n        });\n        \n        createdAccounts.push(account);\n      }\n\n      // Initial sync of balances and transactions\n      await this.syncAccountData(connection.id);\n\n      return createdAccounts;\n    } catch (error) {\n      console.error('Failed to link accounts via Plaid:', error);\n      throw new Error('Account linking failed. Please try again.');\n    }\n  }\n\n  /**\n   * Sync account data from external providers\n   */\n  async syncAccountData(connectionId: string): Promise<void> {\n    const connection = this.connections.get(connectionId);\n    if (!connection) {\n      throw new Error('Connection not found');\n    }\n\n    try {\n      connection.status = 'active';\n      connection.lastSyncAt = new Date();\n\n      if (connection.provider === 'plaid') {\n        await this.syncPlaidAccounts(connection);\n      } else if (connection.provider === 'teller') {\n        await this.syncTellerAccounts(connection);\n      }\n\n      this.connections.set(connectionId, connection);\n    } catch (error) {\n      console.error('Sync failed:', error);\n      connection.status = 'error';\n      connection.error = {\n        code: 'SYNC_ERROR',\n        message: error instanceof Error ? error.message : 'Unknown sync error',\n        timestamp: new Date()\n      };\n      this.connections.set(connectionId, connection);\n      throw error;\n    }\n  }\n\n  /**\n   * Get accounts for a family with filtering and sorting\n   */\n  async getFamilyAccounts(\n    familyId: string,\n    filters?: {\n      accountType?: Account['accountType'];\n      isActive?: boolean;\n      institutionId?: string;\n    }\n  ): Promise<Account[]> {\n    const familyAccounts = Array.from(this.accounts.values())\n      .filter(account => account.familyId === familyId);\n\n    if (!filters) {\n      return familyAccounts;\n    }\n\n    return familyAccounts.filter(account => {\n      if (filters.accountType && account.accountType !== filters.accountType) {\n        return false;\n      }\n      if (filters.isActive !== undefined && account.isActive !== filters.isActive) {\n        return false;\n      }\n      if (filters.institutionId && account.institutionId !== filters.institutionId) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  /**\n   * Calculate account performance metrics\n   */\n  async calculateAccountPerformance(\n    accountId: string,\n    period: AccountPerformance['period']\n  ): Promise<AccountPerformance> {\n    const account = this.accounts.get(accountId);\n    if (!account) {\n      throw new Error('Account not found');\n    }\n\n    const balanceHistory = this.balanceHistory.get(accountId) || [];\n    const { startDate, endDate } = this.getPeriodDates(period);\n    \n    const periodBalances = balanceHistory.filter(\n      balance => balance.asOfDate >= startDate && balance.asOfDate <= endDate\n    );\n\n    if (periodBalances.length === 0) {\n      return {\n        accountId,\n        period,\n        startBalance: account.balance,\n        endBalance: account.balance,\n        totalReturn: 0,\n        totalReturnPercentage: 0,\n        deposits: 0,\n        withdrawals: 0,\n        fees: 0,\n        interest: 0,\n        dividends: 0,\n        unrealizedGains: 0,\n        realizedGains: 0\n      };\n    }\n\n    const startBalance = periodBalances[0].balance;\n    const endBalance = periodBalances[periodBalances.length - 1].balance;\n    const totalReturn = endBalance - startBalance;\n    const totalReturnPercentage = startBalance > 0 ? (totalReturn / startBalance) * 100 : 0;\n\n    // TODO: Calculate detailed metrics from transaction data\n    return {\n      accountId,\n      period,\n      startBalance,\n      endBalance,\n      totalReturn,\n      totalReturnPercentage,\n      deposits: 0, // Calculate from transactions\n      withdrawals: 0, // Calculate from transactions\n      fees: 0, // Calculate from fee transactions\n      interest: 0, // Calculate from interest transactions\n      dividends: 0, // Calculate from dividend transactions\n      unrealizedGains: 0, // For investment accounts\n      realizedGains: 0 // For investment accounts\n    };\n  }\n\n  /**\n   * Update account information\n   */\n  async updateAccount(\n    accountId: string,\n    updates: Partial<Pick<Account, 'name' | 'isActive' | 'metadata'>>\n  ): Promise<Account> {\n    const account = this.accounts.get(accountId);\n    if (!account) {\n      throw new Error('Account not found');\n    }\n\n    const updatedAccount = {\n      ...account,\n      ...updates,\n      updatedAt: new Date()\n    };\n\n    this.accounts.set(accountId, updatedAccount);\n    return updatedAccount;\n  }\n\n  /**\n   * Get account balance history for charting\n   */\n  async getAccountBalanceHistory(\n    accountId: string,\n    days: number = 30\n  ): Promise<AccountBalance[]> {\n    const history = this.balanceHistory.get(accountId) || [];\n    const cutoffDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);\n    \n    return history.filter(balance => balance.asOfDate >= cutoffDate);\n  }\n\n  /**\n   * Delete account (soft delete - mark as inactive)\n   */\n  async deleteAccount(accountId: string): Promise<void> {\n    const account = this.accounts.get(accountId);\n    if (!account) {\n      throw new Error('Account not found');\n    }\n\n    account.isActive = false;\n    account.updatedAt = new Date();\n    this.accounts.set(accountId, account);\n  }\n\n  /**\n   * Get supported institutions for account linking\n   */\n  async getSupportedInstitutions(search?: string): Promise<Institution[]> {\n    const institutions = Array.from(this.institutions.values())\n      .filter(inst => inst.isActive);\n\n    if (!search) {\n      return institutions.slice(0, 50); // Limit for performance\n    }\n\n    return institutions\n      .filter(inst => \n        inst.name.toLowerCase().includes(search.toLowerCase())\n      )\n      .slice(0, 20);\n  }\n\n  // Private helper methods\n  private async exchangePlaidToken(publicToken: string): Promise<string> {\n    // TODO: Implement actual Plaid token exchange\n    // This would make an API call to Plaid's /link/token/exchange endpoint\n    return `access_token_${Date.now()}`;\n  }\n\n  private async createAccountConnection(data: {\n    familyId: string;\n    institutionId: string;\n    provider: 'plaid' | 'teller';\n    accessToken: string;\n    accounts: string[];\n  }): Promise<AccountConnection> {\n    const connection: AccountConnection = {\n      id: this.generateConnectionId(),\n      familyId: data.familyId,\n      institutionId: data.institutionId,\n      provider: data.provider,\n      accessToken: data.accessToken, // This should be encrypted in production\n      accounts: data.accounts,\n      status: 'active',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.connections.set(connection.id, connection);\n    return connection;\n  }\n\n  private async createAccountFromPlaid(data: {\n    familyId: string;\n    connectionId: string;\n    plaidAccount: {\n      id: string;\n      name: string;\n      type: string;\n      subtype: string;\n      balances: {\n        available: number | null;\n        current: number;\n        limit: number | null;\n      };\n    };\n    institutionId: string;\n  }): Promise<Account> {\n    const institution = this.institutions.get(data.institutionId);\n    \n    const account: Account = {\n      id: this.generateAccountId(),\n      familyId: data.familyId,\n      name: data.plaidAccount.name,\n      accountType: this.mapPlaidAccountType(data.plaidAccount.type),\n      accountSubtype: this.mapPlaidAccountSubtype(data.plaidAccount.subtype),\n      institutionId: data.institutionId,\n      institutionName: institution?.name,\n      externalAccountId: data.plaidAccount.id,\n      balance: 0, // Will be updated during sync\n      currency: 'USD',\n      isActive: true,\n      isManual: false,\n      syncStatus: 'pending',\n      metadata: {\n        plaidAccountId: data.plaidAccount.id,\n        tags: [],\n        notes: 'Linked via Plaid'\n      },\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.accounts.set(account.id, account);\n    return account;\n  }\n\n  private async syncPlaidAccounts(connection: AccountConnection): Promise<void> {\n    // TODO: Implement actual Plaid API calls\n    // This would fetch balances and transactions from Plaid\n    \n    for (const accountId of connection.accounts) {\n      const account = Array.from(this.accounts.values())\n        .find(acc => acc.externalAccountId === accountId);\n      \n      if (account) {\n        // Mock balance update\n        account.balance = Math.random() * 10000;\n        account.lastSyncAt = new Date();\n        account.syncStatus = 'active';\n        this.accounts.set(account.id, account);\n        \n        await this.recordBalanceHistory(account.id, account.balance, account.currency);\n      }\n    }\n  }\n\n  private async syncTellerAccounts(connection: AccountConnection): Promise<void> {\n    // TODO: Implement Teller API integration\n    console.log('Syncing Teller accounts...');\n  }\n\n  private async recordBalanceHistory(\n    accountId: string,\n    balance: number,\n    currency: string\n  ): Promise<void> {\n    const history = this.balanceHistory.get(accountId) || [];\n    \n    const balanceRecord: AccountBalance = {\n      accountId,\n      balance,\n      currency,\n      asOfDate: new Date(),\n      balanceType: 'current'\n    };\n\n    history.push(balanceRecord);\n    \n    // Keep only last 365 days of history\n    const cutoffDate = new Date(Date.now() - 365 * 24 * 60 * 60 * 1000);\n    const filteredHistory = history.filter(record => record.asOfDate >= cutoffDate);\n    \n    this.balanceHistory.set(accountId, filteredHistory);\n  }\n\n  private async loadSupportedInstitutions(): Promise<void> {\n    // Mock data - in production this would come from Plaid/Teller APIs\n    const mockInstitutions: Institution[] = [\n      {\n        id: 'chase',\n        name: 'Chase Bank',\n        plaidInstitutionId: 'ins_3',\n        isActive: true,\n        capabilities: {\n          accounts: true,\n          transactions: true,\n          investments: true,\n          liabilities: true,\n          identity: true,\n          auth: true,\n          realTimeUpdates: false\n        }\n      },\n      {\n        id: 'bofa',\n        name: 'Bank of America',\n        plaidInstitutionId: 'ins_1',\n        isActive: true,\n        capabilities: {\n          accounts: true,\n          transactions: true,\n          investments: false,\n          liabilities: true,\n          identity: true,\n          auth: true,\n          realTimeUpdates: false\n        }\n      }\n      // Add more institutions...\n    ];\n\n    for (const institution of mockInstitutions) {\n      this.institutions.set(institution.id, institution);\n    }\n  }\n\n  private mapPlaidAccountType(plaidType: string): Account['accountType'] {\n    switch (plaidType) {\n      case 'depository':\n        return 'depository';\n      case 'credit':\n        return 'credit';\n      case 'loan':\n        return 'loan';\n      case 'investment':\n        return 'investment';\n      case 'insurance':\n        return 'insurance';\n      case 'property':\n        return 'property';\n      default:\n        return 'other';\n    }\n  }\n\n  private mapPlaidAccountSubtype(plaidSubtype: string): Account['accountSubtype'] {\n    // Map Plaid subtypes to our internal subtypes\n    const subtypeMap: Record<string, Account['accountSubtype']> = {\n      'checking': 'checking',\n      'savings': 'savings',\n      'money market': 'money_market',\n      'cd': 'cd',\n      'credit card': 'credit_card',\n      'mortgage': 'mortgage',\n      'auto': 'auto_loan',\n      'student': 'student_loan',\n      'brokerage': 'brokerage',\n      'ira': 'ira',\n      'roth': 'roth_ira',\n      '401k': '401k',\n      '403b': '403b'\n    };\n\n    return subtypeMap[plaidSubtype.toLowerCase()] || 'checking';\n  }\n\n  private getPeriodDates(period: AccountPerformance['period']): { startDate: Date; endDate: Date } {\n    const endDate = new Date();\n    const startDate = new Date();\n\n    switch (period) {\n      case 'day':\n        startDate.setDate(startDate.getDate() - 1);\n        break;\n      case 'week':\n        startDate.setDate(startDate.getDate() - 7);\n        break;\n      case 'month':\n        startDate.setMonth(startDate.getMonth() - 1);\n        break;\n      case 'quarter':\n        startDate.setMonth(startDate.getMonth() - 3);\n        break;\n      case 'year':\n        startDate.setFullYear(startDate.getFullYear() - 1);\n        break;\n      case 'ytd':\n        startDate.setMonth(0, 1);\n        break;\n      case 'all':\n        startDate.setFullYear(2000, 0, 1);\n        break;\n    }\n\n    return { startDate, endDate };\n  }\n\n  private generateAccountId(): string {\n    return `acc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateConnectionId(): string {\n    return `conn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\nexport const accountService = AccountService.getInstance();","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/accounts/components/AccountCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/accounts/components/AccountCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { AccountCardDTO } from '@/types/accounts';\nimport { cn } from '@/shared/lib/utils';\nimport { formatCurrency, formatPercent, safeRatio } from '@/shared/utils/formatters';\nimport { Send, Download, ArrowUpRight, ArrowDownRight, TrendingUp, CreditCard, DollarSign, PiggyBank } from 'lucide-react';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/shared/ui/tooltip';\n\ninterface Props {\n  acct: AccountCardDTO;\n  onAction?: (id: string, action: 'transfer' | 'pay' | 'deposit') => void;\n  showBalance?: boolean;\n}\n\nconst categoryColors: Record<string, string> = {\n  CHECKING: 'from-green-500 to-green-400',\n  SAVINGS: 'from-blue-500 to-blue-400',\n  CREDIT: 'from-red-500 to-red-400',\n  INVESTMENT: 'from-purple-500 to-purple-400'\n};\n\nexport const AccountCard: React.FC<Props> = ({ acct, onAction, showBalance = true }) => {\n  const topGradient = categoryColors[acct.category || 'CHECKING'] || 'from-emerald-500 to-emerald-400';\n  \n  // Safely calculate percentage change and clamp extreme values\n  const deltaRatio = safeRatio(acct.percentChange30d || 0, 100); // Convert percentage to ratio\n  const clampedDelta = deltaRatio ? Math.max(Math.min(deltaRatio * 100, 999), -999) : null;\n  const deltaColor = clampedDelta && clampedDelta < 0 ? 'text-red-400' : 'text-green-400';\n  const DeltaIcon = clampedDelta && clampedDelta < 0 ? ArrowDownRight : ArrowUpRight;\n\n  // Safely calculate utilization percentage and clamp\n  const utilRatio = acct.category === 'CREDIT' ? safeRatio(Math.abs(acct.currentBalance), acct.utilPercent || 100) : null;\n  const clampedUtil = utilRatio ? Math.max(Math.min(utilRatio * 100, 999), 0) : (acct.utilPercent ? Math.max(Math.min(acct.utilPercent, 999), 0) : null);\n\n  return (\n    <TooltipProvider>\n      <div className=\"relative rounded-2xl p-5 bg-black/40 backdrop-blur border border-white/10 flex flex-col h-72 w-full min-h-[18rem]\">\n        {/* Gradient top border */}\n        <div className={cn('absolute left-0 right-0 top-0 h-1 rounded-t-2xl bg-gradient-to-r', topGradient)} />\n\n        {/* Header with two-column flex layout */}\n        <div className=\"flex items-start justify-between gap-3 mb-4\">\n          <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n            {acct.institution.logo && (\n              <img src={acct.institution.logo} alt={acct.institution.name} className=\"w-8 h-8 rounded-full object-cover flex-shrink-0\" />\n            )}\n            <div className=\"min-w-0 flex-1\">\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <div className=\"text-white font-medium truncate\">\n                    {acct.accountType} ••••{acct.last4}\n                  </div>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>{acct.accountType} ••••{acct.last4}</p>\n                </TooltipContent>\n              </Tooltip>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <div className=\"text-xs text-white/60 truncate\">\n                    {acct.institution.name}\n                  </div>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>{acct.institution.name}</p>\n                </TooltipContent>\n              </Tooltip>\n            </div>\n          </div>\n          {clampedDelta !== null && (\n            <span className={cn('flex items-center gap-1 text-xs font-medium px-2 py-1 rounded-full bg-white/10 flex-shrink-0', deltaColor)}>\n              <DeltaIcon className=\"w-3 h-3\" />\n              {Math.abs(clampedDelta).toFixed(1)}%\n            </span>\n          )}\n        </div>\n\n        {/* Key figures row - Two columns to prevent overlap */}\n        <div className=\"grid grid-cols-2 gap-3 mb-4 text-sm\">\n          <div className=\"bg-white/5 rounded-xl p-3\">\n            <div className=\"text-white/60 text-xs mb-1\">Available</div>\n            <div className=\"text-white font-semibold truncate\">\n              {showBalance ? formatCurrency(acct.availableBalance ?? acct.currentBalance, { currency: acct.currency }) : '••••••'}\n            </div>\n          </div>\n          <div className=\"bg-white/5 rounded-xl p-3\">\n            <div className=\"text-white/60 text-xs mb-1\">\n              {acct.category === 'CREDIT' ? 'Utilization' : 'APY'}\n            </div>\n            <div className=\"text-white font-semibold truncate\">\n              {acct.category === 'CREDIT' \n                ? (clampedUtil !== null ? `${clampedUtil.toFixed(1)}%` : '--')\n                : (acct.interestApy ? `${acct.interestApy.toFixed(2)}%` : '--')\n              }\n            </div>\n          </div>\n        </div>\n\n        {/* Credit utilization bar - only show if reasonable values */}\n        {acct.category === 'CREDIT' && clampedUtil !== null && clampedUtil <= 100 && (\n          <div className=\"mb-4\">\n            <div className=\"h-2 bg-white/10 rounded-full overflow-hidden\">\n              <div\n                className={cn('h-full rounded-full', clampedUtil > 80 ? 'bg-red-500' : clampedUtil > 60 ? 'bg-yellow-500' : 'bg-green-500')}\n                style={{ width: `${Math.min(clampedUtil, 100)}%` }}\n              />\n            </div>\n            <div className=\"text-xs text-white/60 mt-1\">{clampedUtil.toFixed(1)}% used</div>\n          </div>\n        )}\n\n        {/* Last transaction */}\n        {acct.lastTransaction && (\n          <div className=\"flex items-center gap-2 text-sm mb-4\">\n            <TrendingUp className=\"w-4 h-4 text-white/60 flex-shrink-0\" />\n            <span className=\"flex-1 truncate text-white/80\">{acct.lastTransaction.merchant}</span>\n            <span className={cn('flex-shrink-0', acct.lastTransaction.amount < 0 ? 'text-red-400' : 'text-green-400')}>\n              {showBalance ? formatCurrency(acct.lastTransaction.amount, { currency: acct.currency }) : '••••'}\n            </span>\n          </div>\n        )}\n\n        {/* Actions - always at bottom with mt-auto */}\n        <div className=\"mt-auto flex gap-2\">\n          {/* Transfer button - for all account types */}\n          <button\n            className=\"flex-1 bg-white/5 rounded-full h-8 flex items-center justify-center text-white text-xs hover:bg-white/10 transition-colors\"\n            onClick={() => onAction?.(acct.id, 'transfer')}\n            aria-label=\"Transfer\"\n          >\n            <Send className=\"w-3 h-3\" />\n          </button>\n          \n          {/* Pay/Spend button - contextual to account type */}\n          <button\n            className=\"flex-1 bg-white/5 rounded-full h-8 flex items-center justify-center text-white text-xs hover:bg-white/10 transition-colors\"\n            onClick={() => onAction?.(acct.id, 'pay')}\n            aria-label={acct.category === 'CREDIT' ? 'Pay' : 'Spend'}\n          >\n            {acct.category === 'CREDIT' ? <CreditCard className=\"w-3 h-3\" /> : <DollarSign className=\"w-3 h-3\" />}\n          </button>\n          \n          {/* Deposit/Save button - only for non-credit accounts */}\n          {acct.category !== 'CREDIT' && (\n            <button\n              className=\"flex-1 bg-white/5 rounded-full h-8 flex items-center justify-center text-white text-xs hover:bg-white/10 transition-colors\"\n              onClick={() => onAction?.(acct.id, 'deposit')}\n              aria-label=\"Deposit\"\n            >\n              {acct.category === 'SAVINGS' ? <PiggyBank className=\"w-3 h-3\" /> : <Download className=\"w-3 h-3\" />}\n            </button>\n          )}\n        </div>\n      </div>\n    </TooltipProvider>\n  );\n};\n\nexport default AccountCard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/accounts/components/AccountLinking.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/accounts/components/AccountLinking.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { \n  Building2, \n  Search, \n  Plus, \n  Shield, \n  Zap, \n  Check,\n  AlertCircle,\n  CreditCard,\n  Banknote,\n  TrendingUp,\n  Home,\n  Car,\n  GraduationCap\n} from 'lucide-react';\nimport { Institution, Account } from '@/types/accounts';\nimport { accountService } from '@/features/accounts/api/accountService';\nimport { cn } from '@/shared/lib/utils';\n\ninterface AccountLinkingProps {\n  familyId: string;\n  onAccountsLinked: (accounts: Account[]) => void;\n  onClose: () => void;\n}\n\nconst AccountLinking = ({ familyId, onAccountsLinked, onClose }: AccountLinkingProps) => {\n  const [step, setStep] = useState<'search' | 'connect' | 'select' | 'success'>('search');\n  const [institutions, setInstitutions] = useState<Institution[]>([]);\n  const [selectedInstitution, setSelectedInstitution] = useState<Institution | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [linkedAccounts, setLinkedAccounts] = useState<Account[]>([]);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const loadInstitutions = useCallback(async () => {\n    try {\n      setLoading(true);\n      const data = await accountService.getInstitutions(searchQuery);\n      setInstitutions(data);\n    } catch (error) {\n      console.error('Failed to load institutions:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [searchQuery]);\n\n  useEffect(() => {\n    loadInstitutions();\n  }, [loadInstitutions]);\n\n  const handleInstitutionSelect = (institution: Institution) => {\n    setSelectedInstitution(institution);\n    setStep('connect');\n  };\n\n  const handlePlaidSuccess = async (publicToken: string, accounts: Array<{\n    id: string;\n    name: string;\n    type: string;\n    subtype: string;\n  }>) => {\n    if (!selectedInstitution) return;\n\n    setLoading(true);\n    try {\n      const linkedAccounts = await accountService.linkAccountsViaPlaid({\n        familyId,\n        publicToken,\n        institutionId: selectedInstitution.id,\n        accounts: accounts.map(acc => ({\n          id: acc.id,\n          name: acc.name,\n          type: acc.type,\n          subtype: acc.subtype\n        }))\n      });\n\n      setLinkedAccounts(linkedAccounts);\n      setStep('success');\n      onAccountsLinked(linkedAccounts);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to link accounts');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getAccountTypeIcon = (type: string) => {\n    switch (type) {\n      case 'depository':\n        return <Banknote className=\"w-5 h-5 text-green-400\" />;\n      case 'credit':\n        return <CreditCard className=\"w-5 h-5 text-orange-400\" />;\n      case 'investment':\n        return <TrendingUp className=\"w-5 h-5 text-blue-400\" />;\n      case 'loan':\n        return <Home className=\"w-5 h-5 text-purple-400\" />;\n      default:\n        return <Building2 className=\"w-5 h-5 text-gray-400\" />;\n    }\n  };\n\n  if (step === 'search') {\n    return (\n      <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 backdrop-blur-sm\">\n        <div className=\"bg-black border border-white/[0.08] rounded-2xl max-w-2xl w-full mx-4 max-h-[80vh] overflow-hidden\">\n          {/* Header */}\n          <div className=\"p-6 border-b border-white/[0.08]\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-white\">Link Your Accounts</h2>\n                <p className=\"text-white/60 mt-1\">\n                  Connect to 10,000+ financial institutions securely\n                </p>\n              </div>\n              <button\n                onClick={onClose}\n                className=\"text-white/60 hover:text-white transition-colors\"\n              >\n                ✕\n              </button>\n            </div>\n          </div>\n\n          {/* Search */}\n          <div className=\"p-6 border-b border-white/[0.08]\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-white/40\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search for your bank or financial institution...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full pl-12 pr-4 py-3 bg-white/[0.05] border border-white/[0.08] rounded-xl text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50\"\n              />\n            </div>\n          </div>\n\n          {/* Institution List */}\n          <div className=\"max-h-96 overflow-y-auto\">\n            {institutions.length === 0 ? (\n              <div className=\"p-8 text-center\">\n                <Building2 className=\"w-12 h-12 text-white/20 mx-auto mb-4\" />\n                <p className=\"text-white/60\">\n                  {searchQuery ? 'No institutions found matching your search' : 'Start typing to search for institutions'}\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-2 p-4\">\n                {institutions.map((institution) => (\n                  <button\n                    key={institution.id}\n                    onClick={() => handleInstitutionSelect(institution)}\n                    className=\"w-full p-4 bg-white/[0.03] hover:bg-white/[0.05] border border-white/[0.05] rounded-xl transition-all text-left group\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"w-12 h-12 bg-white/[0.06] rounded-xl flex items-center justify-center\">\n                          <Building2 className=\"w-6 h-6 text-blue-400\" />\n                        </div>\n                        \n                        <div>\n                          <h3 className=\"font-semibold text-white group-hover:text-blue-400 transition-colors\">\n                            {institution.name}\n                          </h3>\n                          <div className=\"flex items-center gap-4 mt-1\">\n                            <div className=\"flex items-center gap-1\">\n                              <Shield className=\"w-3 h-3 text-green-400\" />\n                              <span className=\"text-xs text-green-400\">Bank-level security</span>\n                            </div>\n                            {institution.capabilities.realTimeUpdates && (\n                              <div className=\"flex items-center gap-1\">\n                                <Zap className=\"w-3 h-3 text-yellow-400\" />\n                                <span className=\"text-xs text-yellow-400\">Real-time updates</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center gap-2\">\n                        {institution.capabilities.accounts && (\n                          <div className=\"p-1 bg-green-500/20 rounded\">\n                            <Banknote className=\"w-3 h-3 text-green-400\" />\n                          </div>\n                        )}\n                        {institution.capabilities.investments && (\n                          <div className=\"p-1 bg-blue-500/20 rounded\">\n                            <TrendingUp className=\"w-3 h-3 text-blue-400\" />\n                          </div>\n                        )}\n                        {institution.capabilities.liabilities && (\n                          <div className=\"p-1 bg-orange-500/20 rounded\">\n                            <CreditCard className=\"w-3 h-3 text-orange-400\" />\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Manual Account Option */}\n          <div className=\"p-4 border-t border-white/[0.08]\">\n            <button\n              onClick={() => {/* TODO: Open manual account creation */}}\n              className=\"w-full p-4 bg-white/[0.03] hover:bg-white/[0.05] border border-white/[0.05] rounded-xl transition-all text-left group border-dashed\"\n            >\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-12 h-12 bg-white/[0.06] rounded-xl flex items-center justify-center\">\n                  <Plus className=\"w-6 h-6 text-blue-400\" />\n                </div>\n                \n                <div>\n                  <h3 className=\"font-semibold text-white group-hover:text-blue-400 transition-colors\">\n                    Add Account Manually\n                  </h3>\n                  <p className=\"text-white/60 text-sm mt-1\">\n                    For institutions not supported by automatic linking\n                  </p>\n                </div>\n              </div>\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (step === 'connect') {\n    return (\n      <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 backdrop-blur-sm\">\n        <div className=\"bg-black border border-white/[0.08] rounded-2xl max-w-md w-full mx-4\">\n          <div className=\"p-6 text-center\">\n            {loading ? (\n              <>\n                <div className=\"w-16 h-16 bg-blue-500/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Shield className=\"w-8 h-8 text-blue-400 animate-pulse\" />\n                </div>\n                <h2 className=\"text-xl font-bold text-white mb-2\">Connecting to {selectedInstitution?.name}</h2>\n                <p className=\"text-white/60\">\n                  Securely linking your accounts...\n                </p>\n              </>\n            ) : error ? (\n              <>\n                <div className=\"w-16 h-16 bg-red-500/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <AlertCircle className=\"w-8 h-8 text-red-400\" />\n                </div>\n                <h2 className=\"text-xl font-bold text-white mb-2\">Connection Failed</h2>\n                <p className=\"text-red-400 mb-4\">{error}</p>\n                <div className=\"flex gap-3\">\n                  <button\n                    onClick={() => setStep('search')}\n                    className=\"flex-1 px-4 py-2 bg-white/[0.05] border border-white/[0.08] rounded-lg text-white hover:bg-white/[0.08] transition-colors\"\n                  >\n                    Try Again\n                  </button>\n                  <button\n                    onClick={onClose}\n                    className=\"flex-1 px-4 py-2 bg-blue-500 rounded-lg text-white hover:bg-blue-600 transition-colors\"\n                  >\n                    Close\n                  </button>\n                </div>\n              </>\n            ) : (\n              <>\n                <div className=\"w-16 h-16 bg-white/[0.06] rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Building2 className=\"w-8 h-8 text-blue-400\" />\n                </div>\n                <h2 className=\"text-xl font-bold text-white mb-2\">Connect to {selectedInstitution?.name}</h2>\n                <p className=\"text-white/60 mb-6\">\n                  You'll be redirected to {selectedInstitution?.name} to securely authenticate your account.\n                </p>\n                \n                <div className=\"space-y-3 mb-6\">\n                  <div className=\"flex items-center gap-3 text-sm text-white/60\">\n                    <Shield className=\"w-4 h-4 text-green-400\" />\n                    <span>256-bit encryption</span>\n                  </div>\n                  <div className=\"flex items-center gap-3 text-sm text-white/60\">\n                    <Shield className=\"w-4 h-4 text-green-400\" />\n                    <span>Read-only access</span>\n                  </div>\n                  <div className=\"flex items-center gap-3 text-sm text-white/60\">\n                    <Shield className=\"w-4 h-4 text-green-400\" />\n                    <span>Never stored credentials</span>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <button\n                    onClick={() => setStep('search')}\n                    className=\"flex-1 px-4 py-2 bg-white/[0.05] border border-white/[0.08] rounded-lg text-white hover:bg-white/[0.08] transition-colors\"\n                  >\n                    Back\n                  </button>\n                  <button\n                    onClick={() => {\n                      // TODO: Initialize Plaid Link\n                      // Mock successful connection for now\n                      setTimeout(() => {\n                        handlePlaidSuccess('mock_public_token', [\n                          { id: 'acc1', name: 'Checking Account', type: 'depository', subtype: 'checking' },\n                          { id: 'acc2', name: 'Savings Account', type: 'depository', subtype: 'savings' }\n                        ]);\n                      }, 2000);\n                      setLoading(true);\n                    }}\n                    className=\"flex-1 px-4 py-2 bg-blue-500 rounded-lg text-white hover:bg-blue-600 transition-colors\"\n                  >\n                    Continue\n                  </button>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (step === 'success') {\n    return (\n      <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 backdrop-blur-sm\">\n        <div className=\"bg-black border border-white/[0.08] rounded-2xl max-w-md w-full mx-4\">\n          <div className=\"p-6 text-center\">\n            <div className=\"w-16 h-16 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Check className=\"w-8 h-8 text-green-400\" />\n            </div>\n            \n            <h2 className=\"text-xl font-bold text-white mb-2\">Accounts Connected!</h2>\n            <p className=\"text-white/60 mb-6\">\n              Successfully linked {linkedAccounts.length} account{linkedAccounts.length !== 1 ? 's' : ''} from {selectedInstitution?.name}\n            </p>\n\n            <div className=\"space-y-3 mb-6\">\n              {linkedAccounts.map((account) => (\n                <div\n                  key={account.id}\n                  className=\"flex items-center gap-3 p-3 bg-white/[0.03] rounded-lg\"\n                >\n                  {getAccountTypeIcon(account.accountType)}\n                  <div className=\"flex-1 text-left\">\n                    <p className=\"font-medium text-white\">{account.name}</p>\n                    <p className=\"text-white/60 text-sm capitalize\">\n                      {account.accountSubtype.replace('_', ' ')}\n                    </p>\n                  </div>\n                  <Check className=\"w-4 h-4 text-green-400\" />\n                </div>\n              ))}\n            </div>\n\n            <button\n              onClick={onClose}\n              className=\"w-full px-4 py-2 bg-blue-500 rounded-lg text-white hover:bg-blue-600 transition-colors\"\n            >\n              Done\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default AccountLinking;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/accounts/components/AccountSkeleton.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/accounts/components/AccountSkeleton.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nexport const AccountSkeleton: React.FC = () => (\n  <div className=\"relative rounded-2xl p-5 bg-white/5 animate-pulse min-h-[16rem]\" />\n); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/accounts/components/AccountsOverview.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/accounts/components/AccountsOverview.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/accounts/components/CleanAccountCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/accounts/components/CleanAccountCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport SimpleGlassCard from '@/shared/ui/SimpleGlassCard';\nimport { colors } from '@/theme/colors';\nimport { \n  Eye, \n  EyeOff, \n  TrendingUp, \n  TrendingDown,\n  CreditCard,\n  PiggyBank,\n  Wallet,\n  Building\n} from 'lucide-react';\n\nexport interface AccountData {\n  id: string;\n  accountType: string;\n  accountName: string;\n  balance: number;\n  available?: number;\n  change?: {\n    amount: number;\n    percentage: number;\n    period: string;\n  };\n  isActive?: boolean;\n}\n\ninterface CleanAccountCardProps {\n  account: AccountData;\n  onClick?: () => void;\n  className?: string;\n}\n\nconst CleanAccountCard = ({ account, onClick, className }: CleanAccountCardProps) => {\n  const [isBalanceVisible, setIsBalanceVisible] = useState(true);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(Math.abs(amount));\n  };\n\n  const getAccountIcon = (type: string) => {\n    switch (type.toLowerCase()) {\n      case 'checking':\n        return <Wallet className=\"w-5 h-5 text-blue-400\" />;\n      case 'savings':\n        return <PiggyBank className=\"w-5 h-5 text-green-400\" />;\n      case 'credit card':\n        return <CreditCard className=\"w-5 h-5 text-orange-400\" />;\n      case 'investment':\n        return <TrendingUp className=\"w-5 h-5 text-purple-400\" />;\n      default:\n        return <Building className=\"w-5 h-5 text-gray-400\" />;\n    }\n  };\n\n  const getBalanceColor = (balance: number, type: string) => {\n    if (type.toLowerCase() === 'credit card') {\n      return balance < 0 ? colors.status.error : colors.status.success;\n    }\n    return balance >= 0 ? colors.text.primary : colors.status.error;\n  };\n\n  const toggleBalanceVisibility = () => {\n    setIsBalanceVisible(!isBalanceVisible);\n  };\n\n  return (\n    <SimpleGlassCard \n      className={`p-6 ${className || ''}`}\n      interactive={!!onClick}\n      onClick={onClick}\n    >\n      {/* Header */}\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"p-2 rounded-xl bg-white/[0.06]\">\n            {getAccountIcon(account.accountType)}\n          </div>\n          <div>\n            <h3 className=\"font-medium text-white text-sm\">\n              {account.accountType}\n            </h3>\n            <p className=\"text-white/60 text-xs\">\n              {account.accountName}\n            </p>\n          </div>\n        </div>\n        \n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            toggleBalanceVisibility();\n          }}\n          className=\"p-2 rounded-xl bg-white/[0.06] hover:bg-white/[0.08] transition-colors\"\n          aria-label={isBalanceVisible ? \"Hide balance\" : \"Show balance\"}\n        >\n          {isBalanceVisible ? (\n            <EyeOff className=\"w-4 h-4 text-white/70\" />\n          ) : (\n            <Eye className=\"w-4 h-4 text-white/70\" />\n          )}\n        </button>\n      </div>\n\n      {/* Balance */}\n      <div className=\"mb-4\">\n        <div className={`transition-all duration-300 ${isBalanceVisible ? '' : 'blur-sm'}`}>\n          <div \n            className=\"text-2xl font-bold mb-1\"\n            style={{ color: getBalanceColor(account.balance, account.accountType) }}\n          >\n            {isBalanceVisible ? formatCurrency(account.balance) : '••••••'}\n          </div>\n          {account.available !== undefined && (\n            <p className=\"text-white/50 text-sm\">\n              Available: {isBalanceVisible ? formatCurrency(account.available) : '••••••'}\n            </p>\n          )}\n        </div>\n      </div>\n\n      {/* Change Indicator */}\n      {account.change && (\n        <div className=\"flex items-center gap-2\">\n          <div \n            className=\"flex items-center gap-1\"\n            style={{ \n              color: account.change.amount >= 0 ? colors.status.success : colors.status.error \n            }}\n          >\n            {account.change.amount >= 0 ? (\n              <TrendingUp className=\"w-4 h-4\" />\n            ) : (\n              <TrendingDown className=\"w-4 h-4\" />\n            )}\n            <span className=\"text-sm font-medium\">\n              {account.change.percentage.toFixed(1)}%\n            </span>\n          </div>\n          <span className=\"text-white/50 text-sm\">\n            {account.change.period}\n          </span>\n        </div>\n      )}\n\n      {/* Active Indicator */}\n      {account.isActive && (\n        <div className=\"mt-4 pt-4 border-t border-white/[0.08]\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-2 h-2 rounded-full bg-green-400\"></div>\n            <span className=\"text-xs text-white/60\">Active Account</span>\n          </div>\n        </div>\n      )}\n    </SimpleGlassCard>\n  );\n};\n\nexport default CleanAccountCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/accounts/components/CompactAccountCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/accounts/components/CompactAccountCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { UnifiedCard } from '@/shared/ui/UnifiedCard';\nimport { Badge } from '@/shared/ui/badge';\nimport { Button } from '@/shared/ui/button';\nimport { AccountCardDTO } from '@/types/accounts';\nimport { formatCurrency } from '@/shared/utils/formatters';\nimport { \n  Eye, \n  EyeOff, \n  TrendingUp, \n  ArrowUpRight, \n  ArrowDownRight,\n  Send,\n  Download,\n  CreditCard,\n  AlertTriangle,\n  Banknote\n} from 'lucide-react';\nimport { cn } from '@/shared/lib/utils';\n\ninterface CompactAccountCardProps {\n  account: AccountCardDTO;\n  showBalance?: boolean;\n  onToggleBalance?: () => void;\n  onQuickAction?: (action: string) => void;\n  className?: string;\n}\n\nconst CompactAccountCard: React.FC<CompactAccountCardProps> = ({\n  account,\n  showBalance = true,\n  onToggleBalance,\n  onQuickAction,\n  className\n}) => {\n  const getAccountIcon = () => {\n    switch (account.accountType) {\n      case 'Checking': return Banknote;\n      case 'Savings': return TrendingUp;\n      case 'Credit Card': return CreditCard;\n      case 'Investment': return ArrowUpRight;\n      default: return Banknote;\n    }\n  };\n\n  const getTrendDirection = () => {\n    if (!account.spendDelta) return undefined;\n    return account.spendDelta.trend === 'up' ? 'up' : 'down';\n  };\n\n  const getUtilizationColor = () => {\n    if (!account.creditUtilization) return '';\n    if (account.creditUtilization > 80) return 'text-red-500';\n    if (account.creditUtilization > 60) return 'text-yellow-500';\n    return 'text-green-500';\n  };\n\n  // Map spendDelta to UnifiedCard delta format\n  const delta = account.spendDelta ? {\n    value: account.spendDelta.percentage,\n    format: 'percentage' as const,\n    label: 'spending'\n  } : undefined;\n\n  return (\n    <UnifiedCard\n      variant=\"default\"\n      size=\"lg\"\n      className={cn(\"card w-full min-w-[18rem] sm:max-w-[20rem] lg:max-w-[22rem] xl:max-w-[24rem]\", className)}\n      interactive\n      icon={getAccountIcon()}\n      iconColor={account.institution.color || '#6366f1'}\n      title={`${account.accountType} ••${account.last4}`}\n      subtitle={account.institution.name}\n      metric={showBalance ? formatCurrency(account.currentBalance, { currency: account.currency }) : '••••••'}\n      delta={delta}\n      trendDirection={getTrendDirection()}\n      badge={account.alerts && account.alerts.length > 0 ? {\n        text: `${account.alerts.length} Alert${account.alerts.length > 1 ? 's' : ''}`,\n        variant: account.alerts.some(a => a.severity === 'critical') ? 'error' : 'warning'\n      } : undefined}\n    >\n      {/* Institution Brand Strip */}\n      <div \n        className=\"absolute top-0 left-0 right-0 h-1 rounded-t-2xl\"\n        style={{ backgroundColor: account.institution.color || '#6366f1' }}\n      />\n\n      {/* Toggle Balance Button */}\n      {onToggleBalance && (\n        <div className=\"absolute top-4 right-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onToggleBalance();\n            }}\n            className=\"p-1 h-8 w-8 bg-white/5 hover:bg-white/10\"\n          >\n            {showBalance ? \n              <Eye className=\"w-4 h-4\" /> : \n              <EyeOff className=\"w-4 h-4\" />\n            }\n          </Button>\n        </div>\n      )}\n\n      {/* Available Balance */}\n      {account.availableBalance !== undefined && \n       account.availableBalance !== account.currentBalance && (\n        <div className=\"text-sm text-white/60 mt-1\">\n          Available: {showBalance ? formatCurrency(account.availableBalance, { currency: account.currency }) : '••••••'}\n        </div>\n      )}\n\n      {/* Metrics Grid */}\n      <div className=\"grid grid-cols-2 gap-3 text-sm mt-4\">\n        {/* Available/Pending */}\n        <div className=\"bg-white/5 rounded-xl p-3\">\n          <div className=\"text-white/60 text-xs mb-1\">\n            {account.pendingCount ? 'Pending' : 'Available'}\n          </div>\n          <div className=\"text-white font-semibold\">\n            {account.pendingCount ? \n              `${account.pendingCount} txns` : \n              (showBalance ? formatCurrency(account.availableBalance || account.currentBalance, { currency: account.currency }) : '••••••')\n            }\n          </div>\n        </div>\n\n        {/* APY/Utilization */}\n        <div className=\"bg-white/5 rounded-xl p-3\">\n          <div className=\"text-white/60 text-xs mb-1\">\n            {account.accountType === 'Credit Card' ? 'Utilization' : 'APY'}\n          </div>\n          <div className={cn(\n            \"font-semibold\",\n            account.accountType === 'Credit Card' ? getUtilizationColor() : \"text-white\"\n          )}>\n            {account.accountType === 'Credit Card' && account.creditUtilization !== undefined ? \n              `${account.creditUtilization}%` :\n              account.interestApy ? `${account.interestApy}%` : '--'\n            }\n          </div>\n        </div>\n      </div>\n\n      {/* Last Transaction */}\n      {account.lastTransaction && (\n        <div className=\"flex items-center gap-2 p-3 bg-white/5 rounded-xl mt-4\">\n          <div className=\"w-8 h-8 bg-white/10 rounded-full flex items-center justify-center\">\n            <ArrowDownRight className=\"w-4 h-4 text-white/60\" />\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"text-sm font-medium text-white truncate\">\n              {account.lastTransaction.merchant}\n            </div>\n            <div className=\"text-xs text-white/60\">\n              {account.lastTransaction.date}\n            </div>\n          </div>\n          <div className=\"text-sm font-semibold text-white\">\n            {showBalance ? formatCurrency(account.lastTransaction.amount, { currency: account.currency }) : '••••'}\n          </div>\n        </div>\n      )}\n\n      {/* Alerts */}\n      {account.alerts && account.alerts.length > 0 && (\n        <div className=\"space-y-2 mt-4\">\n          {account.alerts.map((alert, idx) => (\n            <div key={idx} className={cn(\n              \"flex items-center gap-2 p-2 rounded-xl text-xs\",\n              alert.severity === 'critical' ? 'bg-red-500/20 text-red-400 border border-red-500/30' :\n              alert.severity === 'warning' ? 'bg-yellow-500/20 text-yellow-400 border border-yellow-500/30' :\n              'bg-blue-500/20 text-blue-400 border border-blue-500/30'\n            )}>\n              <AlertTriangle className=\"w-3 h-3\" />\n              <span>{alert.message}</span>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Quick Actions */}\n      {account.quickActions && account.quickActions.length > 0 && (\n        <div\n          className={cn(\n            account.quickActions.length > 2\n              ? \"grid grid-cols-2 gap-2 mt-4\"\n              : \"flex gap-2 mt-4 flex-wrap\"\n          )}\n        >\n          {account.quickActions!.map((action, idx) => {\n            const spanFull = account.quickActions!.length > 2 && idx === 2; // 3rd action\n            return (\n              <Button\n                key={action.type}\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={!action.enabled}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onQuickAction?.(action.type);\n                }}\n                className={cn(\n                  \"h-8 text-xs bg-white/5 border-white/10 text-white hover:bg-white/10 truncate\",\n                  account.quickActions!.length > 2 ? \"w-full\" : \"flex-1\",\n                  spanFull && \"col-span-2\"\n                )}\n              >\n                {action.type === 'transfer' && <Send className=\"w-3 h-3 mr-1\" />}\n                {action.type === 'deposit' && <Download className=\"w-3 h-3 mr-1\" />}\n                {action.label}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n    </UnifiedCard>\n  );\n};\n\nexport default CompactAccountCard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/accounts/components/Grid.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/accounts/components/Grid.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nexport const Grid: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 auto-rows-[18rem] gap-6\">\n    {children}\n  </div>\n); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/accounts/components/QuickAccessCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/accounts/components/QuickAccessCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\nimport { UnifiedCard } from '@/shared/ui/UnifiedCard';\nimport { AccountCardDTO } from '@/types/accounts';\nimport { formatCurrency } from '@/shared/utils/formatters';\nimport { \n  Building2, \n  CreditCard, \n  PiggyBank, \n  TrendingUp, \n  Landmark,\n  ArrowUp,\n  ArrowDown,\n  Minus\n} from 'lucide-react';\nimport { cn } from '@/shared/lib/utils';\n\ninterface QuickAccessCardProps {\n  account: AccountCardDTO;\n  variant?: 'rail' | 'grid';\n  showBalance?: boolean;\n  onSelect?: (accountId: string) => void;\n  className?: string;\n}\n\n// Account type color mapping for left border accent\nconst accountTypeColors = {\n  'checking': 'border-l-blue-400',\n  'savings': 'border-l-green-400', \n  'credit': 'border-l-orange-400',\n  'investment': 'border-l-purple-400',\n  'loan': 'border-l-red-400',\n  'depository': 'border-l-blue-400',\n  'brokerage': 'border-l-purple-400'\n} as const;\n\nconst accountTypeIcons = {\n  'checking': Building2,\n  'savings': PiggyBank,\n  'credit': CreditCard,\n  'investment': TrendingUp,\n  'loan': Landmark,\n  'depository': Building2,\n  'brokerage': TrendingUp\n} as const;\n\nexport const QuickAccessCard = React.memo<QuickAccessCardProps>(({\n  account,\n  variant = 'rail',\n  showBalance = true,\n  onSelect,\n  className\n}) => {\n  // Memoized calculations to prevent re-renders\n  const { accountTypeKey, IconComponent, trendDirection, deltaValue, formattedBalance, accountMask } = useMemo(() => {\n    const normalizedType = account.accountType?.toLowerCase().replace(/\\s+/g, '_').replace('card', '') || 'checking';\n    const typeKey = (normalizedType in accountTypeColors ? normalizedType : 'checking') as keyof typeof accountTypeColors;\n    \n    const Icon = accountTypeIcons[typeKey] || Building2;\n    \n    // Calculate trend based on spend delta\n    let trend: 'up' | 'down' | 'flat' = 'flat';\n    let delta = 0;\n    \n    if (account.spendDelta?.amount) {\n      delta = account.spendDelta.amount;\n      trend = account.spendDelta.trend === 'up' ? 'up' : account.spendDelta.trend === 'down' ? 'down' : 'flat';\n    }\n    \n    const balance = showBalance ? formatCurrency(account.currentBalance, { currency: account.currency }) : '••••••';\n    const mask = account.last4 || '••••';\n    \n    return {\n      accountTypeKey: typeKey,\n      IconComponent: Icon,\n      trendDirection: trend,\n      deltaValue: delta,\n      formattedBalance: balance,\n      accountMask: mask\n    };\n  }, [account, showBalance]);\n\n  const handleClick = () => {\n    onSelect?.(account.id);\n  };\n\n  return (\n    <UnifiedCard\n      title={account.accountName}\n      subtitle={`${account.institution.name} • ••••${accountMask}`}\n      metric={formattedBalance}\n      delta={deltaValue !== 0 ? {\n        value: deltaValue,\n        format: 'currency',\n        label: 'vs last month'\n      } : undefined}\n      icon={IconComponent}\n      iconColor=\"text-white/80\"\n      trendDirection={trendDirection}\n      variant=\"default\"\n      size={variant === 'rail' ? 'sm' : 'md'}\n      interactive={true}\n      onClick={handleClick}\n      className={cn(\n        // Base styling for dark mode only\n        'bg-white/[0.02] border-white/[0.08] border-l-2',\n        // Account type color accent\n        accountTypeColors[accountTypeKey],\n        // Responsive dimensions\n        variant === 'rail' \n          ? 'min-w-[160px] max-w-[28vw] sm:max-w-72 snap-start' \n          : 'w-full',\n        // Hover effects\n        'hover:bg-white/[0.05] hover:border-white/[0.12] transition-all duration-200',\n        // Focus accessibility\n        'focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-2 focus-visible:ring-offset-black',\n        className\n      )}\n    >\n      {/* Account Type Badge */}\n      <div className=\"flex items-center justify-between mb-2\">\n        <span className=\"inline-block px-2 py-0.5 bg-white/[0.08] rounded-md text-xs font-medium text-white/80 capitalize\">\n          {account.accountType?.replace(/([A-Z])/g, ' $1').trim()}\n        </span>\n        \n        {/* Quick Action Indicator */}\n        {account.quickActions && account.quickActions.length > 0 && (\n          <div className=\"flex items-center space-x-1\">\n            <div className=\"w-1.5 h-1.5 bg-green-400 rounded-full\"></div>\n            <span className=\"text-xs text-white/60\">Active</span>\n          </div>\n        )}\n      </div>\n      \n      {/* Available Balance (for credit cards) */}\n      {account.accountType?.toLowerCase().includes('credit') && account.availableBalance !== undefined && (\n        <div className=\"mt-2 pt-2 border-t border-white/[0.06]\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-xs text-white/60\">Available</span>\n                         <span className=\"text-xs font-medium text-green-400\">\n               {showBalance ? formatCurrency(account.availableBalance || 0, { currency: account.currency }) : '••••••'}\n             </span>\n          </div>\n        </div>\n      )}\n    </UnifiedCard>\n  );\n});\n\nQuickAccessCard.displayName = 'QuickAccessCard'; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/accounts/components/QuickAccessRail.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/accounts/components/QuickAccessRail.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { QuickAccessCard } from './QuickAccessCard';\nimport { AccountCardDTO } from '@/types/accounts';\nimport { ChevronLeft, ChevronRight, Eye, EyeOff } from 'lucide-react';\nimport { cn } from '@/shared/lib/utils';\nimport { useIsMobile } from '@/shared/hooks/use-mobile';\n\ninterface QuickAccessRailProps {\n  accounts: AccountCardDTO[];\n  title?: string;\n  subtitle?: string;\n  showBalance?: boolean;\n  onToggleBalance?: () => void;\n  onAccountSelect?: (accountId: string) => void;\n  onViewAll?: () => void;\n  maxVisibleDesktop?: number;\n  className?: string;\n}\n\nexport const QuickAccessRail = React.memo<QuickAccessRailProps>(({\n  accounts,\n  title = \"Quick Access\",\n  subtitle,\n  showBalance = true,\n  onToggleBalance,\n  onAccountSelect,\n  onViewAll,\n  maxVisibleDesktop = 8,\n  className\n}) => {\n  const isMobile = useIsMobile();\n  const railRef = useRef<HTMLDivElement>(null);\n  const [canScrollLeft, setCanScrollLeft] = useState(false);\n  const [canScrollRight, setCanScrollRight] = useState(false);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  // Check scroll capabilities on mobile/tablet\n  const checkScrollability = useCallback(() => {\n    if (!railRef.current || !isMobile) return;\n    \n    const { scrollLeft, scrollWidth, clientWidth } = railRef.current;\n    setCanScrollLeft(scrollLeft > 0);\n    setCanScrollRight(scrollLeft < scrollWidth - clientWidth);\n  }, [isMobile]);\n\n  // Update scroll indicators when accounts change or on resize\n  useEffect(() => {\n    checkScrollability();\n    \n    const handleResize = () => {\n      setTimeout(checkScrollability, 100);\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [checkScrollability, accounts]);\n\n  // Scroll handlers for mobile navigation arrows\n  const scrollLeft = useCallback(() => {\n    if (!railRef.current) return;\n    \n    const cardWidth = 176; // 160px min-width + 16px gap\n    const newScrollLeft = Math.max(0, railRef.current.scrollLeft - cardWidth);\n    \n    railRef.current.scrollTo({\n      left: newScrollLeft,\n      behavior: 'smooth'\n    });\n  }, []);\n\n  const scrollRight = useCallback(() => {\n    if (!railRef.current) return;\n    \n    const cardWidth = 176;\n    const maxScroll = railRef.current.scrollWidth - railRef.current.clientWidth;\n    const newScrollLeft = Math.min(maxScroll, railRef.current.scrollLeft + cardWidth);\n    \n    railRef.current.scrollTo({\n      left: newScrollLeft,\n      behavior: 'smooth'\n    });\n  }, []);\n\n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!document.activeElement?.closest('[data-quick-access-rail]')) return;\n      \n      switch (e.key) {\n        case 'ArrowLeft':\n          e.preventDefault();\n          if (isMobile) {\n            scrollLeft();\n          } else {\n            setCurrentIndex(prev => Math.max(0, prev - 1));\n          }\n          break;\n        case 'ArrowRight':\n          e.preventDefault();\n          if (isMobile) {\n            scrollRight();\n          } else {\n            setCurrentIndex(prev => Math.min(accounts.length - 1, prev + 1));\n          }\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [accounts.length, isMobile, scrollLeft, scrollRight]);\n\n  const displayedAccounts = isMobile ? accounts : accounts.slice(0, maxVisibleDesktop);\n\n  return (\n    <div \n      className={cn('space-y-4', className)}\n      data-quick-access-rail\n      role=\"region\"\n      aria-label=\"Quick Access Accounts\"\n    >\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-xl font-bold text-white\">{title}</h2>\n          {subtitle && (\n            <p className=\"text-white/60 text-sm mt-1\">{subtitle}</p>\n          )}\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          {/* Balance Visibility Toggle */}\n          {onToggleBalance && (\n            <button\n              onClick={onToggleBalance}\n              className=\"flex items-center space-x-2 px-3 py-1.5 bg-white/[0.05] border border-white/[0.08] rounded-lg text-white/80 hover:bg-white/[0.08] hover:text-white transition-all duration-200\"\n              aria-label={showBalance ? \"Hide balances\" : \"Show balances\"}\n            >\n              {showBalance ? (\n                <EyeOff className=\"w-4 h-4\" />\n              ) : (\n                <Eye className=\"w-4 h-4\" />\n              )}\n              <span className=\"text-sm\">{showBalance ? 'Hide' : 'Show'}</span>\n            </button>\n          )}\n          \n          {/* View All Button (Desktop) */}\n          {!isMobile && accounts.length > maxVisibleDesktop && onViewAll && (\n            <button\n              onClick={onViewAll}\n              className=\"px-3 py-1.5 bg-blue-500/20 border border-blue-500/30 rounded-lg text-blue-400 hover:bg-blue-500/30 transition-colors text-sm font-medium\"\n            >\n              View All ({accounts.length})\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Mobile/Tablet: Horizontal Scrolling Rail */}\n      {isMobile ? (\n        <div className=\"relative\">\n          {/* Navigation Arrows */}\n          {canScrollLeft && (\n            <button\n              onClick={scrollLeft}\n              className=\"absolute left-0 top-1/2 -translate-y-1/2 z-10 w-8 h-8 bg-black/80 border border-white/20 rounded-full flex items-center justify-center text-white hover:bg-black/90 transition-colors\"\n              aria-label=\"Scroll left\"\n            >\n              <ChevronLeft className=\"w-4 h-4\" />\n            </button>\n          )}\n          \n          {canScrollRight && (\n            <button\n              onClick={scrollRight}\n              className=\"absolute right-0 top-1/2 -translate-y-1/2 z-10 w-8 h-8 bg-black/80 border border-white/20 rounded-full flex items-center justify-center text-white hover:bg-black/90 transition-colors\"\n              aria-label=\"Scroll right\"\n            >\n              <ChevronRight className=\"w-4 h-4\" />\n            </button>\n          )}\n          \n          {/* Scrollable Rail */}\n          <div\n            ref={railRef}\n            className=\"flex space-x-4 overflow-x-auto scrollbar-hide snap-x snap-mandatory py-2 px-1\"\n            onScroll={checkScrollability}\n            style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}\n          >\n            {displayedAccounts.map((account, index) => (\n              <QuickAccessCard\n                key={account.id}\n                account={account}\n                variant=\"rail\"\n                showBalance={showBalance}\n                onSelect={onAccountSelect}\n                className={index === currentIndex ? 'ring-2 ring-blue-400' : ''}\n              />\n            ))}\n          </div>\n          \n          {/* Scroll Indicators */}\n          <div className=\"flex justify-center space-x-1 mt-3\">\n            {Array.from({ length: Math.ceil(accounts.length / 3) }).map((_, index) => (\n              <div\n                key={index}\n                className={cn(\n                  'w-2 h-2 rounded-full transition-colors',\n                  index === Math.floor(currentIndex / 3) \n                    ? 'bg-blue-400' \n                    : 'bg-white/20'\n                )}\n              />\n            ))}\n          </div>\n        </div>\n      ) : (\n        /* Desktop: 2-Column Grid */\n        <div className=\"grid grid-cols-2 gap-4\">\n          {displayedAccounts.map((account, index) => (\n            <QuickAccessCard\n              key={account.id}\n              account={account}\n              variant=\"grid\"\n              showBalance={showBalance}\n              onSelect={onAccountSelect}\n              className={index === currentIndex ? 'ring-2 ring-blue-400' : ''}\n            />\n          ))}\n        </div>\n      )}\n      \n      {/* Accessibility Helper */}\n      <div className=\"sr-only\">\n        Press arrow keys to navigate between accounts. \n        {accounts.length} accounts available.\n        {!showBalance && \" Balances are currently hidden.\"}\n      </div>\n    </div>\n  );\n});\n\nQuickAccessRail.displayName = 'QuickAccessRail'; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/advisor-chat/api/advisorService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/advisor-chat/api/advisorService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AdvisorMessage, AdvisorThread } from \"../types\";\n\nexport interface AdvisorService {\n  openThread: () => Promise<AdvisorThread>;\n  sendMessage: (threadId: string, content: string) => Promise<AdvisorMessage>;\n  subscribeToThread: (threadId: string, onMessage: (msg: AdvisorMessage) => void) => () => void; // returns unsubscribe\n}\n\nclass MockAdvisorService implements AdvisorService {\n  private threads: AdvisorThread[] = [];\n\n  async openThread(): Promise<AdvisorThread> {\n    const thread: AdvisorThread = {\n      id: \"thread-\" + Math.random().toString(36).substring(2),\n      userId: \"user-mock\",\n      messages: [],\n      isEscalated: false,\n    };\n    this.threads.push(thread);\n    return thread;\n  }\n\n  async sendMessage(threadId: string, content: string): Promise<AdvisorMessage> {\n    const thread = this.threads.find((t) => t.id === threadId);\n    if (!thread) throw new Error(\"Thread not found\");\n    const msg: AdvisorMessage = {\n      id: \"msg-\" + Math.random().toString(36).substring(2),\n      sender: \"user\",\n      content,\n      createdAt: new Date().toISOString(),\n    };\n    thread.messages.push(msg);\n    return msg;\n  }\n\n  subscribeToThread(_threadId: string, _onMessage: (msg: AdvisorMessage) => void): () => void {\n    // mock – returns noop unsubscribe\n    return () => {};\n  }\n}\n\nexport const advisorService: AdvisorService = new MockAdvisorService(); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/advisor-chat/api/aiFinancialService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/advisor-chat/api/aiFinancialService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Family, FamilyStats } from '@/types/family';\nimport { Account } from '@/types/accounts';\nimport { Transaction, TransactionAnalytics } from '@/types/transactions';\nimport { Budget } from '@/types/budgets';\n\ninterface AIFinancialContext {\n  family: Family;\n  accounts: Account[];\n  recentTransactions: Transaction[];\n  budgets: Budget[];\n  stats: FamilyStats;\n  analytics: TransactionAnalytics;\n}\n\ninterface AIResponse {\n  content: string;\n  insights: FinancialInsight[];\n  recommendations: FinancialRecommendation[];\n  confidence: number;\n}\n\ninterface FinancialInsight {\n  id: string;\n  type: 'spending_pattern' | 'savings_opportunity' | 'budget_analysis' | 'investment_advice' | 'debt_management';\n  title: string;\n  description: string;\n  impact: 'high' | 'medium' | 'low';\n  category?: string;\n  amount?: number;\n  confidence: number;\n}\n\ninterface FinancialRecommendation {\n  id: string;\n  type: 'action' | 'optimization' | 'alert' | 'goal_setting';\n  title: string;\n  description: string;\n  actionItems: string[];\n  potentialSavings?: number;\n  timeframe: 'immediate' | 'short_term' | 'long_term';\n  priority: 'high' | 'medium' | 'low';\n}\n\ninterface ChatMessage {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n  insights?: FinancialInsight[];\n  recommendations?: FinancialRecommendation[];\n  context?: Partial<AIFinancialContext>;\n}\n\n/**\n * AI-Powered Financial Advisory Service\n * Provides contextual financial insights and personalized recommendations\n */\nexport class AIFinancialService {\n  private static instance: AIFinancialService;\n  private chatHistory: Map<string, ChatMessage[]> = new Map();\n  private insights: Map<string, FinancialInsight[]> = new Map();\n  private recommendations: Map<string, FinancialRecommendation[]> = new Map();\n\n  // Mock OpenAI client - in production this would be the actual OpenAI SDK\n  private openaiClient = {\n    chat: {\n      completions: {\n        create: async (params: any) => {\n          // Mock AI response - in production this would call OpenAI API\n          return {\n            choices: [{\n              message: {\n                content: this.generateMockResponse(params.messages)\n              }\n            }]\n          };\n        }\n      }\n    }\n  };\n\n  static getInstance(): AIFinancialService {\n    if (!AIFinancialService.instance) {\n      AIFinancialService.instance = new AIFinancialService();\n    }\n    return AIFinancialService.instance;\n  }\n\n  /**\n   * Process user query with full financial context\n   */\n  async processFinancialQuery(\n    familyId: string,\n    message: string,\n    context: AIFinancialContext\n  ): Promise<AIResponse> {\n    try {\n      const systemPrompt = this.buildSystemPrompt(context);\n      const userMessage = this.buildUserMessage(message, context);\n\n      const response = await this.openaiClient.chat.completions.create({\n        model: \"gpt-4\",\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: userMessage }\n        ],\n        temperature: 0.3,\n        max_tokens: 1000\n      });\n\n      const aiContent = response.choices[0].message.content;\n      \n      // Generate insights and recommendations based on the query and context\n      const insights = await this.generateInsights(message, context);\n      const recommendations = await this.generateRecommendations(message, context);\n\n      // Store in chat history\n      const chatMessage: ChatMessage = {\n        id: this.generateMessageId(),\n        role: 'assistant',\n        content: aiContent,\n        timestamp: new Date(),\n        insights,\n        recommendations,\n        context\n      };\n\n      this.addToChatHistory(familyId, chatMessage);\n\n      return {\n        content: aiContent,\n        insights,\n        recommendations,\n        confidence: 0.85\n      };\n    } catch (error) {\n      console.error('AI query processing failed:', error);\n      throw new Error('Unable to process your request. Please try again.');\n    }\n  }\n\n  /**\n   * Generate proactive financial insights\n   */\n  async generateProactiveInsights(\n    familyId: string,\n    context: AIFinancialContext\n  ): Promise<FinancialInsight[]> {\n    const insights: FinancialInsight[] = [];\n\n    // Spending pattern analysis\n    const spendingInsights = this.analyzeSpendingPatterns(context);\n    insights.push(...spendingInsights);\n\n    // Budget analysis\n    const budgetInsights = this.analyzeBudgetPerformance(context);\n    insights.push(...budgetInsights);\n\n    // Savings opportunities\n    const savingsInsights = this.identifySavingsOpportunities(context);\n    insights.push(...savingsInsights);\n\n    // Investment advice\n    const investmentInsights = this.generateInvestmentAdvice(context);\n    insights.push(...investmentInsights);\n\n    // Store insights\n    this.insights.set(familyId, insights);\n\n    return insights;\n  }\n\n  /**\n   * Get personalized financial recommendations\n   */\n  async getPersonalizedRecommendations(\n    familyId: string,\n    context: AIFinancialContext\n  ): Promise<FinancialRecommendation[]> {\n    const recommendations: FinancialRecommendation[] = [];\n\n    // Emergency fund recommendations\n    if (context.stats.emergencyFundMonths < 3) {\n      recommendations.push({\n        id: this.generateRecommendationId(),\n        type: 'goal_setting',\n        title: 'Build Emergency Fund',\n        description: `You currently have ${context.stats.emergencyFundMonths.toFixed(1)} months of expenses saved. Financial experts recommend 3-6 months.`,\n        actionItems: [\n          'Set up automatic transfers to savings',\n          'Reduce discretionary spending by 10%',\n          'Consider a high-yield savings account'\n        ],\n        potentialSavings: context.stats.monthlyExpenses * 3,\n        timeframe: 'long_term',\n        priority: 'high'\n      });\n    }\n\n    // High spending category recommendations\n    const topCategory = context.analytics.categoryBreakdown[0];\n    if (topCategory && topCategory.percentage > 40) {\n      recommendations.push({\n        id: this.generateRecommendationId(),\n        type: 'optimization',\n        title: `Optimize ${topCategory.category} Spending`,\n        description: `${topCategory.category} accounts for ${topCategory.percentage.toFixed(1)}% of your spending. This is higher than recommended.`,\n        actionItems: [\n          'Review recent transactions in this category',\n          'Set a monthly budget limit',\n          'Look for alternative options to reduce costs'\n        ],\n        potentialSavings: topCategory.amount * 0.15,\n        timeframe: 'short_term',\n        priority: 'medium'\n      });\n    }\n\n    // Debt management\n    if (context.stats.debtToIncomeRatio > 36) {\n      recommendations.push({\n        id: this.generateRecommendationId(),\n        type: 'action',\n        title: 'Reduce Debt-to-Income Ratio',\n        description: `Your debt-to-income ratio is ${context.stats.debtToIncomeRatio.toFixed(1)}%. Aim for below 36%.`,\n        actionItems: [\n          'Consider debt consolidation',\n          'Pay more than minimum on high-interest debt',\n          'Avoid taking on new debt'\n        ],\n        timeframe: 'long_term',\n        priority: 'high'\n      });\n    }\n\n    // Investment allocation\n    const stockAllocation = context.stats.investmentAllocation.stocks / \n      (context.stats.investmentAllocation.stocks + context.stats.investmentAllocation.bonds + context.stats.investmentAllocation.cash);\n    \n    if (stockAllocation < 0.6 && context.family.settings.riskTolerance !== 'conservative') {\n      recommendations.push({\n        id: this.generateRecommendationId(),\n        type: 'optimization',\n        title: 'Optimize Investment Allocation',\n        description: 'Your portfolio may be too conservative for your risk tolerance and time horizon.',\n        actionItems: [\n          'Consider increasing stock allocation',\n          'Review investment fees and expenses',\n          'Rebalance portfolio quarterly'\n        ],\n        timeframe: 'medium_term',\n        priority: 'medium'\n      });\n    }\n\n    this.recommendations.set(familyId, recommendations);\n    return recommendations;\n  }\n\n  /**\n   * Get chat history for a family\n   */\n  getChatHistory(familyId: string): ChatMessage[] {\n    return this.chatHistory.get(familyId) || [];\n  }\n\n  /**\n   * Clear chat history for a family\n   */\n  clearChatHistory(familyId: string): void {\n    this.chatHistory.delete(familyId);\n  }\n\n  // Private helper methods\n  private buildSystemPrompt(context: AIFinancialContext): string {\n    return `You are a highly knowledgeable financial advisor AI assistant. You have access to the user's complete financial picture and should provide personalized, actionable advice.\n\nFamily Financial Context:\n- Family Name: ${context.family.name}\n- Currency: ${context.family.settings.currency}\n- Risk Tolerance: ${context.family.settings.riskTolerance}\n- Investment Style: ${context.family.settings.investmentStyle}\n\nFinancial Summary:\n- Total Net Worth: $${context.stats.totalNetWorth.toLocaleString()}\n- Monthly Income: $${context.stats.monthlyIncome.toLocaleString()}\n- Monthly Expenses: $${context.stats.monthlyExpenses.toLocaleString()}\n- Savings Rate: ${context.stats.savingsRate.toFixed(1)}%\n- Emergency Fund: ${context.stats.emergencyFundMonths.toFixed(1)} months\n- Debt-to-Income Ratio: ${context.stats.debtToIncomeRatio.toFixed(1)}%\n\nKey Guidelines:\n1. Provide specific, actionable advice based on their actual financial data\n2. Be encouraging but realistic about financial goals\n3. Prioritize emergency fund, debt reduction, and savings optimization\n4. Consider their risk tolerance and investment preferences\n5. Suggest concrete next steps they can take immediately\n6. Use their actual spending patterns to inform recommendations\n7. Be mindful of their current financial situation and constraints\n\nAlways format your response in a friendly, professional tone and include specific dollar amounts or percentages when relevant.`;\n  }\n\n  private buildUserMessage(message: string, context: AIFinancialContext): string {\n    const recentSpending = context.analytics.categoryBreakdown\n      .slice(0, 3)\n      .map(cat => `${cat.category}: $${cat.amount.toLocaleString()}`)\n      .join(', ');\n\n    return `User Query: ${message}\n\nAdditional Context:\n- Recent spending breakdown: ${recentSpending}\n- Active accounts: ${context.accounts.length}\n- Recent transactions: ${context.recentTransactions.length} in the last 30 days\n\nPlease provide a helpful response based on their specific financial situation.`;\n  }\n\n  private generateMockResponse(messages: any[]): string {\n    const userMessage = messages[messages.length - 1]?.content || '';\n    \n    // Simple keyword-based responses for demonstration\n    if (userMessage.toLowerCase().includes('budget')) {\n      return \"Based on your spending patterns, I notice you're spending about 35% of your income on housing and 15% on food. This is within healthy ranges! However, I see some opportunities to optimize your entertainment spending, which could free up an additional $200 per month for savings or debt reduction.\";\n    }\n    \n    if (userMessage.toLowerCase().includes('save') || userMessage.toLowerCase().includes('savings')) {\n      return \"Your current savings rate of 12% is a good start! To reach the recommended 20%, consider automating transfers to savings right after payday. Based on your spending patterns, you could potentially increase this by reducing discretionary spending by just 8%. I'd recommend starting with a high-yield savings account for your emergency fund.\";\n    }\n    \n    if (userMessage.toLowerCase().includes('invest') || userMessage.toLowerCase().includes('investment')) {\n      return \"Given your moderate risk tolerance and current financial position, I'd suggest a diversified portfolio with 70% stocks and 30% bonds. Your emergency fund looks solid, so you're ready to invest for long-term growth. Consider low-cost index funds to start, and you could benefit from dollar-cost averaging with $500 monthly contributions.\";\n    }\n    \n    if (userMessage.toLowerCase().includes('debt')) {\n      return \"I see you have a debt-to-income ratio of 28%, which is within acceptable limits. However, focusing on high-interest debt first (like credit cards) could save you significant money. Based on your cash flow, you could allocate an extra $300 per month toward debt reduction and be debt-free 18 months sooner.\";\n    }\n    \n    return \"I'm here to help with your financial questions! Based on your current financial picture, you're doing well with a positive net worth and steady income. I can provide specific advice about budgeting, saving, investing, or debt management. What would you like to focus on?\";\n  }\n\n  private async generateInsights(message: string, context: AIFinancialContext): Promise<FinancialInsight[]> {\n    // Generate contextual insights based on the query\n    return this.analyzeSpendingPatterns(context).slice(0, 2);\n  }\n\n  private async generateRecommendations(message: string, context: AIFinancialContext): Promise<FinancialRecommendation[]> {\n    // Generate contextual recommendations based on the query\n    const allRecommendations = await this.getPersonalizedRecommendations('temp', context);\n    return allRecommendations.slice(0, 2);\n  }\n\n  private analyzeSpendingPatterns(context: AIFinancialContext): FinancialInsight[] {\n    const insights: FinancialInsight[] = [];\n    const categories = context.analytics.categoryBreakdown;\n\n    // High spending categories\n    const highSpendingCategories = categories.filter(cat => cat.percentage > 25);\n    for (const category of highSpendingCategories) {\n      insights.push({\n        id: this.generateInsightId(),\n        type: 'spending_pattern',\n        title: `High ${category.category} Spending`,\n        description: `You're spending ${category.percentage.toFixed(1)}% of your budget on ${category.category}. This is above the recommended 20-25%.`,\n        impact: 'medium',\n        category: category.category,\n        amount: category.amount,\n        confidence: 0.8\n      });\n    }\n\n    return insights;\n  }\n\n  private analyzeBudgetPerformance(context: AIFinancialContext): FinancialInsight[] {\n    const insights: FinancialInsight[] = [];\n    \n    if (context.stats.savingsRate < 10) {\n      insights.push({\n        id: this.generateInsightId(),\n        type: 'savings_opportunity',\n        title: 'Low Savings Rate',\n        description: `Your current savings rate is ${context.stats.savingsRate.toFixed(1)}%. Financial experts recommend saving at least 10-20% of income.`,\n        impact: 'high',\n        confidence: 0.9\n      });\n    }\n\n    return insights;\n  }\n\n  private identifySavingsOpportunities(context: AIFinancialContext): FinancialInsight[] {\n    const insights: FinancialInsight[] = [];\n    \n    // Look for subscription patterns or high-frequency spending\n    const frequentCategories = context.analytics.categoryBreakdown\n      .filter(cat => cat.transactionCount > 20); // More than 20 transactions per month\n    \n    for (const category of frequentCategories) {\n      if (category.averageAmount > 10) {\n        insights.push({\n          id: this.generateInsightId(),\n          type: 'savings_opportunity',\n          title: `Frequent ${category.category} Purchases`,\n          description: `You make ${category.transactionCount} ${category.category} purchases monthly, averaging $${category.averageAmount.toFixed(2)} each. Consider bulk purchases or subscriptions to save money.`,\n          impact: 'low',\n          category: category.category,\n          confidence: 0.7\n        });\n      }\n    }\n\n    return insights;\n  }\n\n  private generateInvestmentAdvice(context: AIFinancialContext): FinancialInsight[] {\n    const insights: FinancialInsight[] = [];\n    \n    if (context.stats.emergencyFundMonths > 6 && context.stats.totalNetWorth > 10000) {\n      insights.push({\n        id: this.generateInsightId(),\n        type: 'investment_advice',\n        title: 'Ready for Investment Growth',\n        description: 'You have a solid emergency fund and positive net worth. Consider increasing your investment allocation to grow wealth faster.',\n        impact: 'high',\n        confidence: 0.8\n      });\n    }\n\n    return insights;\n  }\n\n  private addToChatHistory(familyId: string, message: ChatMessage): void {\n    const history = this.chatHistory.get(familyId) || [];\n    history.push(message);\n    \n    // Keep only last 50 messages\n    if (history.length > 50) {\n      history.splice(0, history.length - 50);\n    }\n    \n    this.chatHistory.set(familyId, history);\n  }\n\n  private generateMessageId(): string {\n    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateInsightId(): string {\n    return `insight_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateRecommendationId(): string {\n    return `rec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\nexport const aiFinancialService = AIFinancialService.getInstance();","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/advisor-chat/components/AdvisorChatButton.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/advisor-chat/components/AdvisorChatButton.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Button } from \"@/shared/ui/button\";\nimport { useAdvisorChatStore } from \"../store\";\nimport { MessageCircle } from \"lucide-react\";\n\nexport const AdvisorChatButton: React.FC = () => {\n  const openChat = useAdvisorChatStore((s) => s.openChat);\n  const loading = useAdvisorChatStore((s) => s.loading);\n\n  return (\n    <Button onClick={openChat} disabled={loading} variant=\"secondary\">\n      <MessageCircle className=\"mr-2\" /> Ask Advisor\n    </Button>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/advisor-chat/components/AdvisorChatPanel.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/advisor-chat/components/AdvisorChatPanel.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { UniversalCard } from \"@/shared/ui/UniversalCard\";\nimport { AdvisorChatButton } from \"./AdvisorChatButton\";\nimport { ChatDialog } from \"./ChatDialog\";\nimport { MessageCircle } from \"lucide-react\";\n\nexport const AdvisorChatPanel: React.FC = () => {\n  return (\n    <>\n      <UniversalCard\n        variant=\"glass\"\n        size=\"md\"\n        title=\"Ask an Advisor\"\n        icon={MessageCircle}\n        iconColor=\"#3b82f6\"\n      >\n        <AdvisorChatButton />\n      </UniversalCard>\n      <ChatDialog />\n    </>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/advisor-chat/components/ChatDialog.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/advisor-chat/components/ChatDialog.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { useAdvisorChatStore } from \"../store\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/shared/ui/dialog\";\nimport { Button } from \"@/shared/ui/button\";\nimport { Input } from \"@/shared/ui/input\";\nimport { ScrollArea } from \"@/shared/ui/scroll-area\";\nimport { Send } from \"lucide-react\";\n\nexport const ChatDialog: React.FC = () => {\n  const { thread, sendMessage, closeChat } = useAdvisorChatStore((s) => ({\n    thread: s.thread,\n    sendMessage: s.sendMessage,\n    closeChat: s.closeChat,\n  }));\n  const [message, setMessage] = useState(\"\");\n\n  const onSend = async () => {\n    if (!message.trim()) return;\n    await sendMessage(message.trim());\n    setMessage(\"\");\n  };\n\n  return (\n    <Dialog open={!!thread} onOpenChange={(open) => !open && closeChat()}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Ask an Advisor</DialogTitle>\n        </DialogHeader>\n        <ScrollArea className=\"h-64 w-full border rounded p-2\">\n          {thread?.messages.map((msg) => (\n            <div key={msg.id} className={`mb-2 ${msg.sender === \"user\" ? \"text-right\" : \"\"}`}>\n              <div\n                className={`inline-block p-2 rounded text-sm ${\n                  msg.sender === \"user\"\n                    ? \"bg-blue-500 text-white\"\n                    : \"bg-muted text-muted-foreground\"\n                }`}\n              >\n                {msg.content}\n              </div>\n            </div>\n          ))}\n        </ScrollArea>\n        <DialogFooter className=\"flex-row gap-2\">\n          <Input\n            placeholder=\"Ask your question...\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyDown={(e) => e.key === \"Enter\" && onSend()}\n            className=\"flex-1\"\n          />\n          <Button onClick={onSend} disabled={!message.trim()} size=\"icon\">\n            <Send className=\"size-4\" />\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/advisor-chat/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/advisor-chat/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export { useAdvisorChatStore } from \"./store\";\nexport { AdvisorChatPanel } from \"./components/AdvisorChatPanel\"; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/advisor-chat/store.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/advisor-chat/store.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from \"zustand\";\nimport { advisorService } from \"@/features/advisor-chat/api/advisorService\";\nimport { AdvisorThread, AdvisorMessage } from \"@/shared/types/shared\";\n\ninterface AdvisorChatState {\n  thread?: AdvisorThread;\n  loading: boolean;\n  error?: string;\n  openChat: () => Promise<void>;\n  sendMessage: (content: string) => Promise<void>;\n  closeChat: () => void;\n}\n\nexport const useAdvisorChatStore = create<AdvisorChatState>((set, get) => ({\n  thread: undefined,\n  loading: false,\n  error: undefined,\n  openChat: async () => {\n    set({ loading: true, error: undefined });\n    try {\n      const thread = await advisorService.openThread();\n      set({ thread, loading: false });\n    } catch (err: any) {\n      set({ error: err.message ?? \"Unknown\", loading: false });\n    }\n  },\n  sendMessage: async (content: string) => {\n    const { thread } = get();\n    if (!thread) return;\n    \n    try {\n      const msg = await advisorService.sendMessage(thread.id, content);\n      // optimistic update\n      const updated = { ...thread, messages: [...thread.messages, msg] };\n      set({ thread: updated });\n\n      // simulate AI response after delay\n      setTimeout(async () => {\n        const aiMsg: AdvisorMessage = {\n          id: \"ai-\" + Date.now(),\n          sender: \"advisor\",\n          content: \"Thanks for your question. I'm here to help with your financial planning needs.\",\n          createdAt: new Date().toISOString(),\n        };\n        const final = { ...get().thread!, messages: [...get().thread!.messages, aiMsg] };\n        set({ thread: final });\n      }, 1500);\n    } catch (err: any) {\n      set({ error: err.message ?? \"Failed to send\" });\n    }\n  },\n  closeChat: () => {\n    set({ thread: undefined });\n  },\n})); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/age-of-money/api/ageMetricService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/age-of-money/api/ageMetricService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AgeMetric } from \"../types\";\n\nexport interface AgeMetricService {\n  calculate: () => Promise<AgeMetric>;\n}\n\nclass MockAgeMetricService implements AgeMetricService {\n  async calculate(): Promise<AgeMetric> {\n    return {\n      averageDaysHeld: Math.floor(Math.random() * 40) + 10, // random 10-50 days\n      calculatedAt: new Date().toISOString(),\n    };\n  }\n}\n\nexport const ageMetricService: AgeMetricService = new MockAgeMetricService(); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/age-of-money/components/AgeOfMoneyCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/age-of-money/components/AgeOfMoneyCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\nimport { useAgeOfMoneyStore } from \"../store\";\nimport { UniversalCard } from \"@/shared/ui/UniversalCard\";\nimport { Clock } from \"lucide-react\";\n\nexport const AgeOfMoneyCard: React.FC = () => {\n  const { metric, loading, refresh } = useAgeOfMoneyStore((s) => ({\n    metric: s.metric,\n    loading: s.loading,\n    refresh: s.refresh,\n  }));\n\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n\n  return (\n    <UniversalCard\n      variant=\"glass\"\n      size=\"md\"\n      title=\"Age of Money\"\n      icon={Clock}\n      iconColor=\"#06b6d4\"\n      score={metric ? Math.min(metric.averageDaysHeld, 100) : undefined}\n      orientation=\"vertical\"\n    >\n      {!metric && (\n        <div className=\"text-center\">\n          <p className=\"text-white/60 text-sm\">\n            {loading ? \"Calculating…\" : \"No data available\"}\n          </p>\n        </div>\n      )}\n      {metric && (\n        <div className=\"text-center mt-4\">\n          <p className=\"text-white/60 text-sm\">\n            Average {metric.averageDaysHeld} days held\n          </p>\n        </div>\n      )}\n    </UniversalCard>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/age-of-money/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/age-of-money/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export { useAgeOfMoneyStore } from \"./store\";\nexport { AgeOfMoneyCard } from \"./components/AgeOfMoneyCard\"; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/age-of-money/store.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/age-of-money/store.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from \"zustand\";\nimport { ageMetricService } from \"@/features/age-of-money/api/ageMetricService\";\nimport { AgeMetric } from \"@/shared/types/shared\";\n\ninterface AgeOfMoneyState {\n  metric?: AgeMetric;\n  loading: boolean;\n  error?: string;\n  refresh: () => Promise<void>;\n}\n\nexport const useAgeOfMoneyStore = create<AgeOfMoneyState>((set) => ({\n  metric: undefined,\n  loading: false,\n  error: undefined,\n  refresh: async () => {\n    set({ loading: true, error: undefined });\n    try {\n      const metric = await ageMetricService.calculate();\n      set({ metric, loading: false });\n    } catch (err: any) {\n      set({ error: err.message ?? \"Unknown\", loading: false });\n    }\n  },\n})); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/analytics/api/analyticsService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/analytics/api/analyticsService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Observable, BehaviorSubject, combineLatest, interval } from 'rxjs';\nimport { map, shareReplay, tap, catchError, switchMap } from 'rxjs/operators';\nimport { \n  AnalyticsDashboardData, \n  UnifiedHealthMetrics, \n  UnifiedWealthMetrics, \n  UnifiedTransactionMetrics,\n  HealthWealthCorrelation,\n  AnalyticsTimeframe,\n  AnalyticsDataPoint,\n  AnalyticsConfig,\n  AnalyticsAPIResponse\n} from '@/shared/types/analytics';\nimport { biometricStream } from '@/features/biometric-intervention/api/BiometricStream';\nimport { wellnessEngine } from '@/features/biometric-intervention/api/WellnessEngine';\nimport { fetchHealthMetrics } from '@/features/biometric-intervention/api/healthKitService';\nimport { VisualizationService } from '@/features/dashboard/api/visualizationService';\nimport { TransactionService } from '@/features/transactions/api/transactionService';\nimport { investmentService } from '@/features/investments/api/investmentService';\n\n/**\n * Comprehensive Analytics Service\n * Merges health, wealth, and transaction data to generate insights and correlations\n */\nexport class AnalyticsService {\n  private static instance: AnalyticsService;\n  private dashboardData$ = new BehaviorSubject<AnalyticsDashboardData | null>(null);\n  private config$ = new BehaviorSubject<AnalyticsConfig>(this.getDefaultConfig());\n  private correlationCache = new Map<string, HealthWealthCorrelation>();\n  \n  // Service dependencies\n  private visualizationService = VisualizationService.getInstance();\n  private transactionService = TransactionService.getInstance();\n  private investmentService = investmentService;\n\n  private constructor() {\n    this.initializeDataStream();\n  }\n\n  public static getInstance(): AnalyticsService {\n    if (!AnalyticsService.instance) {\n      AnalyticsService.instance = new AnalyticsService();\n    }\n    return AnalyticsService.instance;\n  }\n\n  /**\n   * Get the main analytics dashboard data stream\n   */\n  public getDashboardData$(): Observable<AnalyticsDashboardData> {\n    return this.dashboardData$.pipe(\n      map(data => data || this.getMockDashboardData()),\n      shareReplay(1)\n    );\n  }\n\n  /**\n   * Fetch comprehensive analytics data for a specific timeframe\n   */\n  public async getAnalyticsData(\n    familyId: string, \n    timeframe: AnalyticsTimeframe\n  ): Promise<AnalyticsAPIResponse<AnalyticsDashboardData>> {\n    const startTime = performance.now();\n    \n    try {\n      // Fetch data from all sources in parallel\n      const [healthData, wealthData, transactionData] = await Promise.all([\n        this.getHealthMetrics(familyId, timeframe),\n        this.getWealthMetrics(familyId, timeframe),\n        this.getTransactionMetrics(familyId, timeframe)\n      ]);\n\n      // Calculate correlations\n      const correlations = await this.calculateCorrelations(healthData, wealthData, transactionData);\n\n      // Generate insights\n      const insights = await this.generateInsights(healthData, wealthData, transactionData, correlations);\n\n      const dashboardData: AnalyticsDashboardData = {\n        health: healthData,\n        wealth: wealthData,\n        transactions: transactionData,\n        correlations,\n        overallScores: this.calculateOverallScores(healthData, wealthData, transactionData),\n        insights,\n        timeframe,\n        lastUpdated: new Date().toISOString(),\n        dataQuality: this.calculateDataQuality(healthData, wealthData, transactionData)\n      };\n\n      const processingTime = performance.now() - startTime;\n\n      return {\n        data: dashboardData,\n        metadata: {\n          timestamp: new Date().toISOString(),\n          processingTime,\n          dataQuality: dashboardData.dataQuality.overall,\n          correlationsCount: correlations.length\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching analytics data:', error);\n      return {\n        data: this.getMockDashboardData(),\n        metadata: {\n          timestamp: new Date().toISOString(),\n          processingTime: performance.now() - startTime,\n          dataQuality: 75,\n          correlationsCount: 3\n        },\n        errors: [error instanceof Error ? error.message : 'Unknown error']\n      };\n    }\n  }\n\n  /**\n   * Get unified health metrics\n   */\n  private async getHealthMetrics(familyId: string, timeframe: AnalyticsTimeframe): Promise<UnifiedHealthMetrics> {\n    try {\n      // Get current health metrics\n      const currentMetrics = await fetchHealthMetrics();\n      \n      // Generate historical data (mock for now - would integrate with real health data)\n      const healthData = this.generateMockHealthData(timeframe);\n      \n      return {\n        heartRate: healthData.heartRate,\n        heartRateVariability: healthData.hrv,\n        stressIndex: healthData.stress,\n        sleepQuality: healthData.sleep,\n        steps: healthData.steps,\n        activeMinutes: healthData.activeMinutes,\n        caloriesBurned: healthData.calories,\n        wellnessScore: healthData.wellness,\n        activityScore: healthData.activity,\n        recoveryScore: healthData.recovery,\n        weeklyTrends: {\n          stress: healthData.stress[healthData.stress.length - 1]?.value > healthData.stress[0]?.value ? 'rising' : 'falling',\n          activity: 'improving',\n          sleep: 'stable'\n        },\n        dataCompleteness: 92,\n        lastSyncTime: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error fetching health metrics:', error);\n      return this.getMockHealthMetrics();\n    }\n  }\n\n  /**\n   * Get unified wealth metrics  \n   */\n  private async getWealthMetrics(familyId: string, timeframe: AnalyticsTimeframe): Promise<UnifiedWealthMetrics> {\n    try {\n      // Get financial data from various services\n      const [netWorthHistory, portfolioData, dashboardData] = await Promise.all([\n        this.visualizationService.getNetWorthHistory(familyId, 12),\n        this.investmentService.getFamilyPortfolio(familyId),\n        this.visualizationService.getDashboardData(familyId)\n      ]);\n\n      // Convert to analytics format\n      const wealthData = this.transformWealthData(netWorthHistory, portfolioData, dashboardData);\n      \n      return wealthData;\n    } catch (error) {\n      console.error('Error fetching wealth metrics:', error);\n      return this.getMockWealthMetrics();\n    }\n  }\n\n  /**\n   * Get unified transaction metrics\n   */\n  private async getTransactionMetrics(familyId: string, timeframe: AnalyticsTimeframe): Promise<UnifiedTransactionMetrics> {\n    try {\n      // Get transaction analytics\n      const analytics = await this.transactionService.generateAnalytics(familyId, 'month');\n      \n      // Transform to unified format\n      return this.transformTransactionData(analytics);\n    } catch (error) {\n      console.error('Error fetching transaction metrics:', error);\n      return this.getMockTransactionMetrics();\n    }\n  }\n\n  /**\n   * Calculate correlations between health and wealth metrics\n   */\n  private async calculateCorrelations(\n    health: UnifiedHealthMetrics,\n    wealth: UnifiedWealthMetrics,\n    transactions: UnifiedTransactionMetrics\n  ): Promise<HealthWealthCorrelation[]> {\n    const correlations: HealthWealthCorrelation[] = [];\n\n    // Stress vs Spending correlation\n    const stressSpendingCorr = this.calculatePearsonCorrelation(\n      health.stressIndex.map(d => d.value),\n      transactions.dailySpending.map(d => d.value)\n    );\n\n    if (Math.abs(stressSpendingCorr) > 0.3) {\n      correlations.push({\n        id: 'stress-spending',\n        type: 'stress-spending',\n        correlationCoefficient: stressSpendingCorr,\n        significance: 0.05,\n        confidence: 85,\n        dataPoints: health.stressIndex.map((stress, i) => ({\n          timestamp: stress.timestamp,\n          healthValue: stress.value,\n          wealthValue: transactions.dailySpending[i]?.value || 0\n        })),\n        pattern: stressSpendingCorr > 0 ? 'positive' : 'negative',\n        strength: Math.abs(stressSpendingCorr) > 0.7 ? 'strong' : 'moderate',\n        actionable: true,\n        insights: [\n          stressSpendingCorr > 0 \n            ? 'Higher stress levels correlate with increased spending'\n            : 'Higher stress levels correlate with reduced spending'\n        ],\n        recommendations: [\n          stressSpendingCorr > 0 \n            ? 'Consider stress management techniques to reduce impulse purchases'\n            : 'Monitor for potential under-spending during high stress periods'\n        ],\n        timeframe: { start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), end: new Date(), period: '30d' },\n        lastCalculated: new Date().toISOString()\n      });\n    }\n\n    // Sleep vs Investment Performance correlation\n    const sleepInvestmentCorr = this.calculatePearsonCorrelation(\n      health.sleepQuality.map(d => d.value),\n      wealth.portfolioReturns.map(d => d.value)\n    );\n\n    if (Math.abs(sleepInvestmentCorr) > 0.3) {\n      correlations.push({\n        id: 'sleep-investment',\n        type: 'sleep-decisions',\n        correlationCoefficient: sleepInvestmentCorr,\n        significance: 0.05,\n        confidence: 78,\n        dataPoints: health.sleepQuality.map((sleep, i) => ({\n          timestamp: sleep.timestamp,\n          healthValue: sleep.value,\n          wealthValue: wealth.portfolioReturns[i]?.value || 0\n        })),\n        pattern: sleepInvestmentCorr > 0 ? 'positive' : 'negative',\n        strength: Math.abs(sleepInvestmentCorr) > 0.6 ? 'strong' : 'moderate',\n        actionable: true,\n        insights: [\n          'Sleep quality appears to influence investment decision timing'\n        ],\n        recommendations: [\n          'Consider delaying major investment decisions when sleep quality is poor'\n        ],\n        timeframe: { start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), end: new Date(), period: '30d' },\n        lastCalculated: new Date().toISOString()\n      });\n    }\n\n    // Activity vs Decision Quality correlation\n    const activityDecisionCorr = this.calculatePearsonCorrelation(\n      health.steps.map(d => d.value),\n      transactions.necessityScores.map(d => d.value)\n    );\n\n    if (Math.abs(activityDecisionCorr) > 0.3) {\n      correlations.push({\n        id: 'activity-decisions',\n        type: 'activity-performance',\n        correlationCoefficient: activityDecisionCorr,\n        significance: 0.05,\n        confidence: 82,\n        dataPoints: health.steps.map((activity, i) => ({\n          timestamp: activity.timestamp,\n          healthValue: activity.value,\n          wealthValue: transactions.necessityScores[i]?.value || 0\n        })),\n        pattern: activityDecisionCorr > 0 ? 'positive' : 'negative',\n        strength: Math.abs(activityDecisionCorr) > 0.5 ? 'strong' : 'moderate',\n        actionable: true,\n        insights: [\n          'Physical activity levels correlate with financial decision quality'\n        ],\n        recommendations: [\n          'Consider taking a walk before making significant financial decisions'\n        ],\n        timeframe: { start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), end: new Date(), period: '30d' },\n        lastCalculated: new Date().toISOString()\n      });\n    }\n\n    return correlations;\n  }\n\n  /**\n   * Calculate Pearson correlation coefficient\n   */\n  private calculatePearsonCorrelation(x: number[], y: number[]): number {\n    const n = Math.min(x.length, y.length);\n    if (n < 2) return 0;\n\n    const sumX = x.slice(0, n).reduce((a, b) => a + b, 0);\n    const sumY = y.slice(0, n).reduce((a, b) => a + b, 0);\n    const sumXY = x.slice(0, n).reduce((acc, xi, i) => acc + xi * y[i], 0);\n    const sumXX = x.slice(0, n).reduce((acc, xi) => acc + xi * xi, 0);\n    const sumYY = y.slice(0, n).reduce((acc, yi) => acc + yi * yi, 0);\n\n    const numerator = n * sumXY - sumX * sumY;\n    const denominator = Math.sqrt((n * sumXX - sumX * sumX) * (n * sumYY - sumY * sumY));\n\n    return denominator === 0 ? 0 : numerator / denominator;\n  }\n\n  /**\n   * Generate actionable insights from the data\n   */\n  private async generateInsights(\n    health: UnifiedHealthMetrics,\n    wealth: UnifiedWealthMetrics, \n    transactions: UnifiedTransactionMetrics,\n    correlations: HealthWealthCorrelation[]\n  ): Promise<AnalyticsDashboardData['insights']> {\n    const insights: AnalyticsDashboardData['insights'] = [];\n\n    // High correlation insights\n    correlations.forEach(corr => {\n      if (corr.strength === 'strong' && corr.actionable) {\n        insights.push({\n          id: `correlation-${corr.id}`,\n          type: 'correlation',\n          title: `Strong ${corr.type.replace('-', ' ')} correlation detected`,\n          description: corr.insights[0] || '',\n          impact: 'high',\n          actionable: true,\n          recommendation: corr.recommendations[0],\n          confidence: corr.confidence\n        });\n      }\n    });\n\n    // Health trend insights\n    const avgStress = health.stressIndex.reduce((sum, d) => sum + d.value, 0) / health.stressIndex.length;\n    if (avgStress > 70) {\n      insights.push({\n        id: 'high-stress-alert',\n        type: 'health',\n        title: 'Elevated stress levels detected',\n        description: `Your average stress level (${Math.round(avgStress)}) is above the healthy range`,\n        impact: 'high',\n        actionable: true,\n        recommendation: 'Consider stress management techniques and monitor spending patterns',\n        confidence: 90\n      });\n    }\n\n    // Wealth trend insights  \n    const netWorthTrend = wealth.netWorth[wealth.netWorth.length - 1]?.value - wealth.netWorth[0]?.value;\n    if (netWorthTrend > 0) {\n      insights.push({\n        id: 'positive-wealth-trend',\n        type: 'wealth',\n        title: 'Positive net worth growth',\n        description: `Your net worth has increased by $${Math.round(netWorthTrend).toLocaleString()} this period`,\n        impact: 'medium',\n        actionable: false,\n        confidence: 95\n      });\n    }\n\n    return insights.sort((a, b) => {\n      const impactWeight = { high: 3, medium: 2, low: 1 };\n      return impactWeight[b.impact] - impactWeight[a.impact];\n    });\n  }\n\n  /**\n   * Calculate overall scores across all domains\n   */\n  private calculateOverallScores(\n    health: UnifiedHealthMetrics,\n    wealth: UnifiedWealthMetrics,\n    transactions: UnifiedTransactionMetrics\n  ) {\n    const healthScore = health.wellnessScore[health.wellnessScore.length - 1]?.value || 75;\n    const wealthScore = this.calculateWealthScore(wealth);\n    const sustainabilityScore = this.calculateSustainabilityScore(transactions);\n    const financialWellnessScore = Math.round((healthScore + wealthScore) / 2);\n\n    return {\n      health: Math.round(healthScore),\n      wealth: Math.round(wealthScore),\n      sustainability: Math.round(sustainabilityScore),\n      financial_wellness: financialWellnessScore\n    };\n  }\n\n  private calculateWealthScore(wealth: UnifiedWealthMetrics): number {\n    const netWorthGrowth = wealth.netWorth.length > 1 \n      ? (wealth.netWorth[wealth.netWorth.length - 1].value - wealth.netWorth[0].value) / wealth.netWorth[0].value * 100\n      : 0;\n    \n    const savingsRate = wealth.savingsRate[wealth.savingsRate.length - 1]?.value || 0;\n    const debtRatio = wealth.debtToIncomeRatio[wealth.debtToIncomeRatio.length - 1]?.value || 0;\n    \n    // Simple scoring algorithm (would be more sophisticated in production)\n    let score = 50; // Base score\n    score += Math.min(netWorthGrowth * 2, 25); // Up to 25 points for growth\n    score += Math.min(savingsRate, 20); // Up to 20 points for savings rate\n    score -= Math.min(debtRatio / 2, 15); // Subtract for high debt ratio\n    \n    return Math.max(0, Math.min(100, score));\n  }\n\n  private calculateSustainabilityScore(transactions: UnifiedTransactionMetrics): number {\n    const ecoScores = transactions.ecoImpactScores;\n    const avgEcoScore = ecoScores.reduce((sum, d) => sum + d.value, 0) / ecoScores.length;\n    return avgEcoScore || 75; // Default score\n  }\n\n  /**\n   * Calculate data quality metrics\n   */\n  private calculateDataQuality(\n    health: UnifiedHealthMetrics,\n    wealth: UnifiedWealthMetrics,\n    transactions: UnifiedTransactionMetrics\n  ) {\n    const healthQuality = health.dataCompleteness;\n    const wealthQuality = 95; // Assume high quality for financial data\n    const transactionQuality = 98; // Assume very high quality for transaction data\n    \n    return {\n      health: healthQuality,\n      wealth: wealthQuality,\n      transactions: transactionQuality,\n      overall: Math.round((healthQuality + wealthQuality + transactionQuality) / 3)\n    };\n  }\n\n  /**\n   * Initialize real-time data stream\n   */\n  private initializeDataStream(): void {\n    // Update dashboard data every 5 minutes\n    interval(5 * 60 * 1000).pipe(\n      switchMap(() => this.getAnalyticsData('demo_family', {\n        start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n        end: new Date(),\n        period: '30d'\n      })),\n      tap(response => this.dashboardData$.next(response.data)),\n      catchError(error => {\n        console.error('Error in analytics data stream:', error);\n        return [];\n      })\n    ).subscribe();\n  }\n\n  /**\n   * Get default analytics configuration\n   */\n  private getDefaultConfig(): AnalyticsConfig {\n    return {\n      enabledSources: {\n        healthKit: true,\n        plaidTransactions: true,\n        investmentData: true,\n        biometricDevices: true\n      },\n      correlationSettings: {\n        minDataPoints: 10,\n        significanceThreshold: 0.05,\n        updateFrequency: 'daily',\n        enabledCorrelations: ['stress-spending', 'sleep-decisions', 'activity-performance']\n      },\n      privacy: {\n        shareCorrelations: false,\n        anonymizeData: true,\n        retentionPeriod: 365\n      },\n      notifications: {\n        strongCorrelations: true,\n        healthWealthAlerts: true,\n        spendingPatterns: true\n      }\n    };\n  }\n\n  // Mock data generators (temporary - would be replaced with real data)\n  private generateMockHealthData(timeframe: AnalyticsTimeframe): any {\n    const days = Math.min(30, Math.floor((timeframe.end.getTime() - timeframe.start.getTime()) / (1000 * 60 * 60 * 24)));\n    const data: any = {\n      heartRate: [],\n      hrv: [],\n      stress: [],\n      sleep: [],\n      steps: [],\n      activeMinutes: [],\n      calories: [],\n      wellness: [],\n      activity: [],\n      recovery: []\n    };\n\n    for (let i = 0; i < days; i++) {\n      const timestamp = new Date(timeframe.start.getTime() + i * 24 * 60 * 60 * 1000).toISOString();\n      \n      data.heartRate.push({ timestamp, value: 65 + Math.random() * 20, confidence: 0.9 });\n      data.hrv.push({ timestamp, value: 35 + Math.random() * 30, confidence: 0.85 });\n      data.stress.push({ timestamp, value: 20 + Math.random() * 60, confidence: 0.8 });\n      data.sleep.push({ timestamp, value: 6.5 + Math.random() * 2, confidence: 0.95 });\n      data.steps.push({ timestamp, value: 7000 + Math.random() * 6000, confidence: 0.99 });\n      data.activeMinutes.push({ timestamp, value: 25 + Math.random() * 40, confidence: 0.9 });\n      data.calories.push({ timestamp, value: 350 + Math.random() * 200, confidence: 0.85 });\n      data.wellness.push({ timestamp, value: 70 + Math.random() * 25, confidence: 0.8 });\n      data.activity.push({ timestamp, value: 65 + Math.random() * 30, confidence: 0.85 });\n      data.recovery.push({ timestamp, value: 60 + Math.random() * 35, confidence: 0.8 });\n    }\n\n    return data;\n  }\n\n  private getMockHealthMetrics(): UnifiedHealthMetrics {\n    return {\n      heartRate: [{ timestamp: new Date().toISOString(), value: 72, confidence: 0.9 }],\n      heartRateVariability: [{ timestamp: new Date().toISOString(), value: 45, confidence: 0.85 }],\n      stressIndex: [{ timestamp: new Date().toISOString(), value: 35, confidence: 0.8 }],\n      sleepQuality: [{ timestamp: new Date().toISOString(), value: 7.5, confidence: 0.95 }],\n      steps: [{ timestamp: new Date().toISOString(), value: 8500, confidence: 0.99 }],\n      activeMinutes: [{ timestamp: new Date().toISOString(), value: 45, confidence: 0.9 }],\n      caloriesBurned: [{ timestamp: new Date().toISOString(), value: 420, confidence: 0.85 }],\n      wellnessScore: [{ timestamp: new Date().toISOString(), value: 85, confidence: 0.8 }],\n      activityScore: [{ timestamp: new Date().toISOString(), value: 78, confidence: 0.85 }],\n      recoveryScore: [{ timestamp: new Date().toISOString(), value: 82, confidence: 0.8 }],\n      weeklyTrends: {\n        stress: 'falling',\n        activity: 'improving',\n        sleep: 'stable'\n      },\n      dataCompleteness: 92,\n      lastSyncTime: new Date().toISOString()\n    };\n  }\n\n  private getMockWealthMetrics(): UnifiedWealthMetrics {\n    return {\n      netWorth: [{ timestamp: new Date().toISOString(), value: 127500, confidence: 1.0 }],\n      assets: [{ timestamp: new Date().toISOString(), value: 152500, confidence: 1.0 }],\n      liabilities: [{ timestamp: new Date().toISOString(), value: 25000, confidence: 1.0 }],\n      portfolioValue: [{ timestamp: new Date().toISOString(), value: 85000, confidence: 1.0 }],\n      portfolioReturns: [{ timestamp: new Date().toISOString(), value: 8.2, confidence: 0.9 }],\n      income: [{ timestamp: new Date().toISOString(), value: 6500, confidence: 1.0 }],\n      expenses: [{ timestamp: new Date().toISOString(), value: 4200, confidence: 0.95 }],\n      savings: [{ timestamp: new Date().toISOString(), value: 2300, confidence: 1.0 }],\n      debtToIncomeRatio: [{ timestamp: new Date().toISOString(), value: 15, confidence: 1.0 }],\n      savingsRate: [{ timestamp: new Date().toISOString(), value: 18, confidence: 1.0 }],\n      emergencyFundRatio: [{ timestamp: new Date().toISOString(), value: 6.2, confidence: 1.0 }],\n      performanceMetrics: {\n        totalReturn: 8.2,\n        annualizedReturn: 8.2,\n        returns: { '1d': 0.1, '7d': 0.8, '30d': 2.1, '90d': 4.5, '365d': 8.2 },\n        sharpeRatio: 1.2,\n        volatility: 15,\n        maxDrawdown: -8.5,\n        alpha: 0.5,\n        beta: 1.1,\n        rSquared: 0.89\n      },\n      riskMetrics: {\n        concentrationRisk: 25,\n        sectorConcentration: 35,\n        geographicRisk: 15,\n        currencyRisk: 5,\n        correlation: 0.75,\n        var95: 12500,\n        var99: 18000,\n        expectedShortfall: 20000\n      },\n      monthlyTrends: {\n        netWorth: 'growing',\n        cashFlow: 'positive',\n        investments: 'outperforming'\n      }\n    };\n  }\n\n  private getMockTransactionMetrics(): UnifiedTransactionMetrics {\n    return {\n      dailySpending: [{ timestamp: new Date().toISOString(), value: 140, confidence: 0.98 }],\n      categorySpending: {\n        health: [{ timestamp: new Date().toISOString(), value: 340, confidence: 0.95 }],\n        fitness: [{ timestamp: new Date().toISOString(), value: 85, confidence: 0.95 }],\n        food: [{ timestamp: new Date().toISOString(), value: 420, confidence: 0.98 }]\n      },\n      merchantSpending: {},\n      healthImpactScores: [{ timestamp: new Date().toISOString(), value: 75, confidence: 0.8 }],\n      ecoImpactScores: [{ timestamp: new Date().toISOString(), value: 82, confidence: 0.8 }],\n      necessityScores: [{ timestamp: new Date().toISOString(), value: 68, confidence: 0.7 }],\n      spendingVelocity: [{ timestamp: new Date().toISOString(), value: 3.2, confidence: 0.9 }],\n      impulsePurchases: [{ timestamp: new Date().toISOString(), value: 2, confidence: 0.8 }],\n      planedPurchases: [{ timestamp: new Date().toISOString(), value: 8, confidence: 0.9 }],\n      spendingTrends: {\n        health: 'increasing',\n        eco: 'improving',\n        overall: 'conscious'\n      },\n      correlationStrength: 0.65,\n      primaryDrivers: ['stress', 'sleep_quality', 'weekend_effect']\n    };\n  }\n\n  private transformWealthData(netWorthHistory: any, portfolioData: any, dashboardData: any): UnifiedWealthMetrics {\n    // Transform existing data to unified format\n    // This would contain actual transformation logic in production\n    return this.getMockWealthMetrics();\n  }\n\n  private transformTransactionData(analytics: any): UnifiedTransactionMetrics {\n    // Transform existing transaction analytics to unified format\n    // This would contain actual transformation logic in production\n    return this.getMockTransactionMetrics();\n  }\n\n  private getMockDashboardData(): AnalyticsDashboardData {\n    return {\n      health: this.getMockHealthMetrics(),\n      wealth: this.getMockWealthMetrics(),\n      transactions: this.getMockTransactionMetrics(),\n      correlations: [],\n      overallScores: {\n        health: 85,\n        wealth: 72,\n        sustainability: 82,\n        financial_wellness: 78\n      },\n      insights: [],\n      timeframe: {\n        start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n        end: new Date(),\n        period: '30d'\n      },\n      lastUpdated: new Date().toISOString(),\n      dataQuality: {\n        health: 92,\n        wealth: 95,\n        transactions: 98,\n        overall: 95\n      }\n    };\n  }\n}\n\n// Export singleton instance\nexport const analyticsService = AnalyticsService.getInstance(); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/analytics/components/AnalyticsPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/analytics/components/AnalyticsPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\nimport { Activity, TrendingUp, TrendingDown, Brain, BarChart3, Download, RefreshCw, Calendar, Clock, Target, Shield, Heart, DollarSign, Zap } from 'lucide-react';\nimport { UniversalCard } from '@/shared/ui/UniversalCard';\nimport { Button } from '@/shared/ui/button';\nimport { Badge } from '@/shared/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/shared/ui/select';\nimport { cn } from '@/shared/lib/utils';\nimport { useIsMobile } from '@/shared/hooks/use-mobile';\nimport { analyticsService } from '../api/analyticsService';\nimport { AnalyticsDashboardData, AnalyticsTimeframe } from '@/shared/types/analytics';\nimport { unifiedDataManager, useUnifiedState } from '@/services/unifiedDataManager';\n\n// Note: Chart components and specialized widgets will be implemented in Phase 3\n\nexport interface AnalyticsPageProps {\n  familyId?: string;\n  className?: string;\n}\n\nconst LoadingFallback = () => (\n  <UniversalCard variant=\"glass\" className=\"p-6\">\n    <div className=\"flex items-center justify-center space-x-3\">\n      <RefreshCw className=\"w-5 h-5 animate-spin text-blue-400\" />\n      <span className=\"text-white/70\">Loading analytics...</span>\n    </div>\n  </UniversalCard>\n);\n\n// Device interfaces for company-based health device system\ninterface DeviceModel {\n  id: string;\n  name: string;\n  status: 'connected' | 'syncing' | 'offline' | 'pairing';\n  lastSync?: string;\n  batteryLevel?: number;\n  isUserDevice?: boolean; // Whether user actually owns this device\n}\n\ninterface DeviceCompany {\n  id: string;\n  name: string;\n  icon: string;\n  bgColor: string;\n  models: DeviceModel[];\n}\n\ninterface ConnectedDevice {\n  companyId: string;\n  companyName: string;\n  modelId: string;\n  modelName: string;\n  icon: string;\n  bgColor: string;\n  status: 'connected' | 'syncing' | 'offline' | 'pairing';\n  lastSync?: string;\n  batteryLevel?: number;\n}\n\nexport const AnalyticsPage: React.FC<AnalyticsPageProps> = ({ \n  familyId = 'demo_family',\n  className \n}) => {\n  const isMobile = useIsMobile();\n  \n  // State management\n  const [dashboardData, setDashboardData] = useState<AnalyticsDashboardData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [timeframe, setTimeframe] = useState<string>('30d');\n  const [showAllDevices, setShowAllDevices] = useState(false);\n\n  // Company-based device ecosystem with model lineups\n  // 🚀 Adding new devices is simple:\n  // 1. Add new models to existing company arrays\n  // 2. Add new companies with their model lineups  \n  // 3. Set isUserDevice: true for devices the user owns\n  // 4. System automatically handles prioritization and display\n  const deviceCompanies: DeviceCompany[] = useMemo(() => [\n    {\n      id: 'apple',\n      name: 'Apple',\n      icon: '🍎',\n      bgColor: 'bg-gray-800',\n      models: [\n        { id: 'watch-series-9', name: 'Apple Watch Series 9', status: 'connected', lastSync: '2 min ago', batteryLevel: 78, isUserDevice: true },\n        { id: 'watch-ultra-2', name: 'Apple Watch Ultra 2', status: 'offline', lastSync: 'Never', isUserDevice: false },\n        { id: 'watch-se', name: 'Apple Watch SE', status: 'offline', lastSync: 'Never', isUserDevice: false }\n      ]\n    },\n    {\n      id: 'whoop',\n      name: 'WHOOP',\n      icon: '💪',\n      bgColor: 'bg-blue-600',\n      models: [\n        { id: 'whoop-4', name: 'WHOOP 4.0', status: 'connected', lastSync: '5 min ago', batteryLevel: 65, isUserDevice: true },\n        { id: 'whoop-3', name: 'WHOOP 3.0', status: 'offline', lastSync: 'Never', isUserDevice: false }\n      ]\n    },\n    {\n      id: 'fitbit',\n      name: 'Fitbit',\n      icon: '⚡',\n      bgColor: 'bg-teal-500',\n      models: [\n        { id: 'sense-2', name: 'Fitbit Sense 2', status: 'syncing', lastSync: '1 hour ago', batteryLevel: 45, isUserDevice: true },\n        { id: 'versa-4', name: 'Fitbit Versa 4', status: 'offline', lastSync: 'Never', isUserDevice: false },\n        { id: 'charge-5', name: 'Fitbit Charge 5', status: 'offline', lastSync: 'Never', isUserDevice: false },\n        { id: 'inspire-3', name: 'Fitbit Inspire 3', status: 'offline', lastSync: 'Never', isUserDevice: false }\n      ]\n    },\n    {\n      id: 'oura',\n      name: 'Oura',\n      icon: '💍',\n      bgColor: 'bg-purple-600',\n      models: [\n        { id: 'ring-gen-3', name: 'Oura Ring Gen 3', status: 'connected', lastSync: '10 min ago', batteryLevel: 82, isUserDevice: true },\n        { id: 'ring-gen-2', name: 'Oura Ring Gen 2', status: 'offline', lastSync: 'Never', isUserDevice: false }\n      ]\n    },\n    {\n      id: 'garmin',\n      name: 'Garmin',\n      icon: '🏃',\n      bgColor: 'bg-blue-700',\n      models: [\n        { id: 'fenix-7', name: 'Garmin Fenix 7', status: 'offline', lastSync: '2 days ago', batteryLevel: 0, isUserDevice: true },\n        { id: 'vivoactive-5', name: 'Garmin Vivoactive 5', status: 'offline', lastSync: 'Never', isUserDevice: false },\n        { id: 'forerunner-965', name: 'Garmin Forerunner 965', status: 'offline', lastSync: 'Never', isUserDevice: false },\n        { id: 'venu-3', name: 'Garmin Venu 3', status: 'offline', lastSync: 'Never', isUserDevice: false }\n      ]\n    },\n    {\n      id: 'samsung',\n      name: 'Samsung',\n      icon: '⌚',\n      bgColor: 'bg-gray-700',\n      models: [\n        { id: 'galaxy-watch-6', name: 'Galaxy Watch 6', status: 'offline', lastSync: 'Never', isUserDevice: false },\n        { id: 'galaxy-fit-3', name: 'Galaxy Fit 3', status: 'pairing', lastSync: 'Never', batteryLevel: 95, isUserDevice: true },\n        { id: 'galaxy-watch-active-2', name: 'Galaxy Watch Active 2', status: 'offline', lastSync: 'Never', isUserDevice: false }\n      ]\n    },\n    {\n      id: 'amazfit',\n      name: 'Amazfit',\n      icon: '⚡',\n      bgColor: 'bg-orange-600',\n      models: [\n        { id: 'gts-4', name: 'Amazfit GTS 4', status: 'offline', lastSync: '3 hours ago', batteryLevel: 23, isUserDevice: true },\n        { id: 'gtr-4', name: 'Amazfit GTR 4', status: 'offline', lastSync: 'Never', isUserDevice: false },\n        { id: 'band-7', name: 'Amazfit Band 7', status: 'offline', lastSync: 'Never', isUserDevice: false },\n        { id: 't-rex-2', name: 'Amazfit T-Rex 2', status: 'offline', lastSync: 'Never', isUserDevice: false }\n      ]\n    }\n  ], []);\n\n  // Flatten user devices into connected device list\n  const allConnectedDevices: ConnectedDevice[] = useMemo(() => {\n    return deviceCompanies.flatMap(company => \n      company.models\n        .filter(model => model.isUserDevice)\n        .map(model => ({\n          companyId: company.id,\n          companyName: company.name,\n          modelId: model.id,\n          modelName: model.name,\n          icon: company.icon,\n          bgColor: company.bgColor,\n          status: model.status,\n          lastSync: model.lastSync,\n          batteryLevel: model.batteryLevel\n        }))\n    );\n  }, [deviceCompanies]);\n\n  // Utility functions for device management\n  const getDevicesByCompany = (companyId: string) => {\n    return deviceCompanies.find(company => company.id === companyId)?.models || [];\n  };\n\n  const getConnectedDevicesByCompany = (companyId: string) => {\n    return allConnectedDevices.filter(device => device.companyId === companyId);\n  };\n\n  const getTotalAvailableModels = () => {\n    return deviceCompanies.reduce((total, company) => total + company.models.length, 0);\n  };\n\n  // Calculate device statistics\n  const connectedDevicesCount = useMemo(() => \n    allConnectedDevices.filter(device => device.status === 'connected').length, \n    [allConnectedDevices]\n  );\n\n  // Determine which devices to display (prioritize connected devices)\n  const displayedDevices = useMemo(() => {\n    if (showAllDevices) {\n      return allConnectedDevices.slice(0, 4);\n    }\n    \n    // Sort devices by priority: connected > syncing > pairing > offline\n    const priorityOrder = { connected: 4, syncing: 3, pairing: 2, offline: 1 };\n    const sortedDevices = [...allConnectedDevices].sort((a, b) => \n      priorityOrder[b.status] - priorityOrder[a.status]\n    );\n    \n    return sortedDevices.slice(0, 4);\n  }, [allConnectedDevices, showAllDevices]);\n  \n  // Connect to unified data manager\n  const [unifiedData, setUnifiedData] = useState(unifiedDataManager.getSnapshot());\n\n  // Analytics timeframe configuration\n  const analyticsTimeframe: AnalyticsTimeframe = useMemo(() => {\n    const end = new Date();\n    const start = new Date();\n    \n    switch (timeframe) {\n      case '1d':\n        start.setDate(end.getDate() - 1);\n        break;\n      case '7d':\n        start.setDate(end.getDate() - 7);\n        break;\n      case '30d':\n        start.setDate(end.getDate() - 30);\n        break;\n      case '90d':\n        start.setDate(end.getDate() - 90);\n        break;\n      case '365d':\n        start.setFullYear(end.getFullYear() - 1);\n        break;\n      default:\n        start.setDate(end.getDate() - 30);\n    }\n    \n    return {\n      start,\n      end,\n      period: timeframe as AnalyticsTimeframe['period']\n    };\n  }, [timeframe]);\n\n  // Subscribe to unified data manager\n  useEffect(() => {\n    const subscription = unifiedDataManager.fullState$.subscribe((state) => {\n      setUnifiedData(state);\n    });\n    \n    return () => subscription.unsubscribe();\n  }, []);\n\n  // Load analytics data\n  useEffect(() => {\n    const loadAnalyticsData = async () => {\n      setLoading(true);\n      setError(null);\n      \n      try {\n        const response = await analyticsService.getAnalyticsData(familyId, analyticsTimeframe);\n        \n        if (response.errors && response.errors.length > 0) {\n          console.warn('Analytics data loaded with warnings:', response.errors);\n        }\n        \n        setDashboardData(response.data);\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'Failed to load analytics data';\n        setError(errorMessage);\n        console.error('Analytics loading error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadAnalyticsData();\n  }, [familyId, analyticsTimeframe]);\n\n  // Tab handling will be implemented in Phase 3\n\n  // Handle export functionality\n  const handleExportData = async () => {\n    try {\n      const blob = new Blob([JSON.stringify(dashboardData, null, 2)], {\n        type: 'application/json'\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `vueni-analytics-${timeframe}-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Export failed:', error);\n    }\n  };\n\n  // Refresh data\n  const handleRefresh = () => {\n    setLoading(true);\n    setDashboardData(null);\n  };\n\n  if (loading) {\n    return (\n      <div className={cn(\"max-w-7xl mx-auto p-4 sm:p-6 space-y-6\", className)}>\n        <div className=\"text-center space-y-4\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-white\">Analytics Dashboard</h1>\n          <LoadingFallback />\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={cn(\"max-w-7xl mx-auto p-4 sm:p-6\", className)}>\n        <UniversalCard variant=\"glass\" className=\"p-6 text-center\">\n          <h2 className=\"text-xl font-bold text-red-400 mb-2\">Analytics Error</h2>\n          <p className=\"text-white/70 mb-4\">{error}</p>\n          <Button onClick={handleRefresh} variant=\"outline\" className=\"text-white\">\n            Try Again\n          </Button>\n        </UniversalCard>\n      </div>\n    );\n  }\n\n  if (!dashboardData) {\n    return (\n      <div className={cn(\"max-w-7xl mx-auto p-4 sm:p-6\", className)}>\n        <UniversalCard variant=\"glass\" className=\"p-6 text-center\">\n          <p className=\"text-white/70\">No analytics data available</p>\n        </UniversalCard>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"max-w-7xl mx-auto p-4 sm:p-6 space-y-6\", className)}>\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-white mb-2\">\n            Analytics Dashboard\n          </h1>\n          <p className=\"text-white/60\">\n            Comprehensive health, wealth, and transaction insights with correlations\n          </p>\n        </div>\n        \n        <div className=\"flex flex-col sm:flex-row gap-3\">\n          {/* Time Range Selector */}\n          <Select value={timeframe} onValueChange={setTimeframe}>\n            <SelectTrigger className=\"w-full sm:w-32 bg-white/[0.02] border-white/[0.08] text-white\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent className=\"bg-black/90 border-white/[0.08]\">\n              <SelectItem value=\"1d\">1 Day</SelectItem>\n              <SelectItem value=\"7d\">7 Days</SelectItem>\n              <SelectItem value=\"30d\">30 Days</SelectItem>\n              <SelectItem value=\"90d\">90 Days</SelectItem>\n              <SelectItem value=\"365d\">1 Year</SelectItem>\n            </SelectContent>\n          </Select>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-2\">\n            <Button \n              onClick={handleRefresh}\n              variant=\"outline\" \n              size=\"sm\"\n              className=\"text-white border-white/[0.08] hover:bg-white/[0.05]\"\n            >\n              <RefreshCw className=\"w-4 h-4\" />\n            </Button>\n            \n            <Button \n              onClick={handleExportData}\n              variant=\"outline\" \n              size=\"sm\"\n              className=\"text-white border-white/[0.08] hover:bg-white/[0.05]\"\n            >\n              <Download className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Data Quality Badge */}\n      <div className=\"flex items-center gap-2\">\n        <Badge \n          variant=\"outline\" \n          className={cn(\n            \"text-xs\",\n            dashboardData.dataQuality.overall >= 90 ? \"border-green-400/20 text-green-400\" :\n            dashboardData.dataQuality.overall >= 70 ? \"border-yellow-400/20 text-yellow-400\" :\n            \"border-red-400/20 text-red-400\"\n          )}\n        >\n          Data Quality: {dashboardData.dataQuality.overall}%\n        </Badge>\n        <span className=\"text-xs text-white/40\">\n          Last updated: {new Date(dashboardData.lastUpdated).toLocaleString()}\n        </span>\n      </div>\n\n      {/* Connected Devices */}\n      <UniversalCard variant=\"glass\" className=\"p-4 sm:p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-white flex items-center gap-2\">\n            <Activity className=\"w-5 h-5 text-blue-400\" />\n            Connected Devices\n          </h3>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"flex flex-col text-xs text-white/50\">\n              <span>{connectedDevicesCount} of {allConnectedDevices.length} user devices connected</span>\n              <span>{deviceCompanies.length} brands • {getTotalAvailableModels()} models available</span>\n            </div>\n            <Button\n              onClick={() => setShowAllDevices(!showAllDevices)}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-white/60 hover:text-white h-6 px-2\"\n            >\n              {showAllDevices ? 'Show Less' : 'View All'}\n            </Button>\n          </div>\n        </div>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {displayedDevices.map((device) => (\n            <div key={device.modelId} className=\"flex items-center gap-3 p-3 bg-white/[0.02] rounded-lg border border-white/[0.05]\">\n              <div className={cn(\n                \"w-8 h-8 rounded-lg flex items-center justify-center\",\n                device.bgColor\n              )}>\n                <span className=\"text-white text-xs font-bold\">{device.icon}</span>\n              </div>\n              <div>\n                <div className=\"text-sm font-medium text-white\">{device.modelName}</div>\n                <div className={cn(\n                  \"text-xs\",\n                  device.status === 'connected' ? \"text-green-400\" :\n                  device.status === 'syncing' ? \"text-yellow-400\" :\n                  device.status === 'pairing' ? \"text-blue-400\" :\n                  \"text-gray-400\"\n                )}>\n                  {device.status === 'connected' ? 'Connected' :\n                   device.status === 'syncing' ? 'Syncing' :\n                   device.status === 'pairing' ? 'Pairing' :\n                   'Offline'}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n        {showAllDevices && allConnectedDevices.length > 4 && (\n          <div className=\"mt-4 pt-4 border-t border-white/[0.05]\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {allConnectedDevices.slice(4).map((device) => (\n                <div key={device.modelId} className=\"flex items-center gap-3 p-3 bg-white/[0.02] rounded-lg border border-white/[0.05]\">\n                  <div className={cn(\n                    \"w-8 h-8 rounded-lg flex items-center justify-center\",\n                    device.bgColor\n                  )}>\n                    <span className=\"text-white text-xs font-bold\">{device.icon}</span>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-white\">{device.modelName}</div>\n                    <div className={cn(\n                      \"text-xs\",\n                      device.status === 'connected' ? \"text-green-400\" :\n                      device.status === 'syncing' ? \"text-yellow-400\" :\n                      device.status === 'pairing' ? \"text-blue-400\" :\n                      \"text-gray-400\"\n                    )}>\n                      {device.status === 'connected' ? 'Connected' :\n                       device.status === 'syncing' ? 'Syncing' :\n                       device.status === 'pairing' ? 'Pairing' :\n                       'Offline'}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </UniversalCard>\n\n      {/* Enhanced Score Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <UniversalCard variant=\"glass\" className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center gap-2\">\n              <Activity className=\"w-5 h-5 text-green-400\" />\n              <span className=\"text-sm font-medium text-white\">Health Score</span>\n            </div>\n            <Badge variant=\"outline\" className=\"border-green-400/20 text-green-400 text-xs\">Excellent</Badge>\n          </div>\n          <div className=\"text-3xl font-bold text-white mb-2\">{unifiedData.health.wellnessScore}</div>\n          <div className=\"flex items-center gap-2 text-sm\">\n            <TrendingUp className=\"w-4 h-4 text-green-400\" />\n            <span className=\"text-green-400\">+3 pts</span>\n            <span className=\"text-white/60\">this week</span>\n          </div>\n          <div className=\"mt-3 space-y-1\">\n            <div className=\"flex justify-between text-xs\">\n              <span className=\"text-white/60\">HRV</span>\n              <span className=\"text-white\">{unifiedData.health.heartRateVariability}ms</span>\n            </div>\n            <div className=\"flex justify-between text-xs\">\n              <span className=\"text-white/60\">Stress</span>\n              <span className={cn(\n                \"text-xs\",\n                unifiedData.health.stressLevel > 60 ? \"text-red-400\" :\n                unifiedData.health.stressLevel > 40 ? \"text-yellow-400\" : \"text-green-400\"\n              )}>\n                {unifiedData.health.stressLevel > 60 ? 'High' : \n                 unifiedData.health.stressLevel > 40 ? 'Medium' : 'Low'} ({unifiedData.health.stressLevel})\n              </span>\n            </div>\n            <div className=\"flex justify-between text-xs\">\n              <span className=\"text-white/60\">Sleep</span>\n              <span className=\"text-white\">{unifiedData.health.sleepHours}h</span>\n            </div>\n          </div>\n        </UniversalCard>\n        \n        <UniversalCard variant=\"glass\" className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5 text-blue-400\" />\n              <span className=\"text-sm font-medium text-white\">Wealth Score</span>\n            </div>\n            <Badge variant=\"outline\" className=\"border-yellow-400/20 text-yellow-400 text-xs\">Good</Badge>\n          </div>\n          <div className=\"text-3xl font-bold text-white mb-2\">{Math.round((unifiedData.wealth.savingsRate + (100 - unifiedData.wealth.debtToIncomeRatio)) / 2)}</div>\n          <div className=\"flex items-center gap-2 text-sm\">\n            <TrendingUp className=\"w-4 h-4 text-green-400\" />\n            <span className=\"text-green-400\">+2 pts</span>\n            <span className=\"text-white/60\">this month</span>\n          </div>\n          <div className=\"mt-3 space-y-1\">\n            <div className=\"flex justify-between text-xs\">\n              <span className=\"text-white/60\">Net Worth</span>\n              <span className=\"text-white\">${(unifiedData.wealth.netWorth / 1000).toFixed(1)}K</span>\n            </div>\n            <div className=\"flex justify-between text-xs\">\n              <span className=\"text-white/60\">ROI</span>\n              <span className=\"text-blue-400\">{unifiedData.wealth.portfolioReturns.toFixed(1)}%</span>\n            </div>\n            <div className=\"flex justify-between text-xs\">\n              <span className=\"text-white/60\">Savings Rate</span>\n              <span className=\"text-white\">{unifiedData.wealth.savingsRate}%</span>\n            </div>\n          </div>\n        </UniversalCard>\n        \n        <UniversalCard variant=\"glass\" className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center gap-2\">\n              <Brain className=\"w-5 h-5 text-purple-400\" />\n              <span className=\"text-sm font-medium text-white\">Eco Score</span>\n            </div>\n            <Badge variant=\"outline\" className=\"border-green-400/20 text-green-400 text-xs\">Excellent</Badge>\n          </div>\n          <div className=\"text-3xl font-bold text-white mb-2\">82</div>\n          <div className=\"flex items-center gap-2 text-sm\">\n            <TrendingUp className=\"w-4 h-4 text-green-400\" />\n            <span className=\"text-green-400\">+5 pts</span>\n            <span className=\"text-white/60\">this month</span>\n          </div>\n          <div className=\"mt-3 space-y-1\">\n            <div className=\"flex justify-between text-xs\">\n              <span className=\"text-white/60\">CO₂ Saved</span>\n              <span className=\"text-white\">48kg</span>\n            </div>\n            <div className=\"flex justify-between text-xs\">\n              <span className=\"text-white/60\">Green Spending</span>\n              <span className=\"text-purple-400\">$340</span>\n            </div>\n            <div className=\"flex justify-between text-xs\">\n              <span className=\"text-white/60\">Score Trend</span>\n              <span className=\"text-green-400\">Rising</span>\n            </div>\n          </div>\n        </UniversalCard>\n        \n        <UniversalCard variant=\"glass\" className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center gap-2\">\n              <BarChart3 className=\"w-5 h-5 text-yellow-400\" />\n              <span className=\"text-sm font-medium text-white\">Correlation Index</span>\n            </div>\n            <Badge variant=\"outline\" className=\"border-yellow-400/20 text-yellow-400 text-xs\">Moderate</Badge>\n          </div>\n          <div className=\"text-3xl font-bold text-white mb-2\">{Math.round((Math.abs(unifiedData.correlations.stressSpending) + Math.abs(unifiedData.correlations.sleepROI) + Math.abs(unifiedData.correlations.activityDecisions)) / 3 * 100)}</div>\n          <div className=\"flex items-center gap-2 text-sm\">\n            <TrendingUp className=\"w-4 h-4 text-green-400\" />\n            <span className=\"text-green-400\">+4 pts</span>\n            <span className=\"text-white/60\">this week</span>\n          </div>\n          <div className=\"mt-3 space-y-1\">\n            <div className=\"flex justify-between text-xs\">\n              <span className=\"text-white/60\">Stress-Spending</span>\n              <span className={cn(\n                \"text-xs\",\n                unifiedData.correlations.stressSpending > 0 ? \"text-orange-400\" : \"text-blue-400\"\n              )}>\n                {unifiedData.correlations.stressSpending > 0 ? '+' : ''}{unifiedData.correlations.stressSpending.toFixed(2)}\n              </span>\n            </div>\n            <div className=\"flex justify-between text-xs\">\n              <span className=\"text-white/60\">Sleep-ROI</span>\n              <span className={cn(\n                \"text-xs\",\n                unifiedData.correlations.sleepROI > 0 ? \"text-green-400\" : \"text-red-400\"\n              )}>\n                {unifiedData.correlations.sleepROI > 0 ? '+' : ''}{unifiedData.correlations.sleepROI.toFixed(2)}\n              </span>\n            </div>\n            <div className=\"flex justify-between text-xs\">\n              <span className=\"text-white/60\">Activity-Decisions</span>\n              <span className={cn(\n                \"text-xs\",\n                unifiedData.correlations.activityDecisions > 0 ? \"text-blue-400\" : \"text-red-400\"\n              )}>\n                {unifiedData.correlations.activityDecisions > 0 ? '+' : ''}{unifiedData.correlations.activityDecisions.toFixed(2)}\n              </span>\n            </div>\n          </div>\n        </UniversalCard>\n      </div>\n\n      {/* Key Correlations */}\n      {dashboardData.correlations.length > 0 && (\n        <UniversalCard variant=\"glass\" className=\"p-4 sm:p-6\">\n          <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n            <Brain className=\"w-5 h-5 text-purple-400\" />\n            Key Correlations\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {dashboardData.correlations.slice(0, 3).map((correlation) => (\n              <div key={correlation.id} className=\"p-4 bg-white/[0.02] rounded-xl border border-white/[0.05]\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-white/80 capitalize\">\n                    {correlation.type.replace('-', ' → ')}\n                  </span>\n                  <Badge \n                    variant=\"outline\" \n                    className={cn(\n                      \"text-xs\",\n                      correlation.strength === 'strong' ? \"border-red-400/20 text-red-400\" :\n                      correlation.strength === 'moderate' ? \"border-yellow-400/20 text-yellow-400\" :\n                      \"border-gray-400/20 text-gray-400\"\n                    )}\n                  >\n                    {correlation.strength}\n                  </Badge>\n                </div>\n                <div className=\"text-lg font-bold text-white mb-1\">\n                  {correlation.correlationCoefficient.toFixed(2)}\n                </div>\n                <div className=\"text-xs text-white/60\">\n                  {correlation.insights[0] || 'No insights available'}\n                </div>\n              </div>\n            ))}\n          </div>\n        </UniversalCard>\n      )}\n\n      {/* Insights */}\n      {dashboardData.insights.length > 0 && (\n        <UniversalCard variant=\"glass\" className=\"p-4 sm:p-6\">\n          <h3 className=\"text-lg font-semibold text-white mb-4\">Smart Insights</h3>\n          <div className=\"space-y-3\">\n            {dashboardData.insights.slice(0, 5).map((insight) => (\n              <div key={insight.id} className=\"p-3 bg-white/[0.02] rounded-lg border border-white/[0.05]\">\n                <div className=\"flex items-start justify-between gap-3\">\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-white mb-1\">{insight.title}</h4>\n                    <p className=\"text-sm text-white/70\">{insight.description}</p>\n                    {insight.recommendation && (\n                      <p className=\"text-xs text-blue-400 mt-2\">💡 {insight.recommendation}</p>\n                    )}\n                  </div>\n                  <Badge \n                    variant=\"outline\" \n                    className={cn(\n                      \"text-xs\",\n                      insight.impact === 'high' ? \"border-red-400/20 text-red-400\" :\n                      insight.impact === 'medium' ? \"border-yellow-400/20 text-yellow-400\" :\n                      \"border-green-400/20 text-green-400\"\n                    )}\n                  >\n                    {insight.impact}\n                  </Badge>\n                </div>\n              </div>\n            ))}\n          </div>\n        </UniversalCard>\n      )}\n\n      {/* Device-Specific Health Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <UniversalCard variant=\"glass\" className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n            <Heart className=\"w-5 h-5 text-red-400\" />\n            Heart Rate Zones\n          </h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-white/70\">Zone 1 (Recovery)</span>\n              <span className=\"text-white font-medium\">23%</span>\n            </div>\n            <div className=\"w-full bg-white/[0.05] rounded-full h-2\">\n              <div className=\"bg-blue-400 h-2 rounded-full\" style={{ width: '23%' }}></div>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-white/70\">Zone 2 (Aerobic)</span>\n              <span className=\"text-white font-medium\">45%</span>\n            </div>\n            <div className=\"w-full bg-white/[0.05] rounded-full h-2\">\n              <div className=\"bg-green-400 h-2 rounded-full\" style={{ width: '45%' }}></div>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-white/70\">Zone 3 (Threshold)</span>\n              <span className=\"text-white font-medium\">22%</span>\n            </div>\n            <div className=\"w-full bg-white/[0.05] rounded-full h-2\">\n              <div className=\"bg-orange-400 h-2 rounded-full\" style={{ width: '22%' }}></div>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-white/70\">Zone 4 (VO2 Max)</span>\n              <span className=\"text-white font-medium\">10%</span>\n            </div>\n            <div className=\"w-full bg-white/[0.05] rounded-full h-2\">\n              <div className=\"bg-red-400 h-2 rounded-full\" style={{ width: '10%' }}></div>\n            </div>\n            \n            <div className=\"mt-4 p-3 bg-white/[0.02] rounded-lg\">\n              <div className=\"flex justify-between text-xs\">\n                <span className=\"text-white/60\">Avg HR Today</span>\n                <span className=\"text-white\">{unifiedData.health.heartRate} bpm</span>\n              </div>\n              <div className=\"flex justify-between text-xs mt-1\">\n                <span className=\"text-white/60\">Resting HR</span>\n                <span className=\"text-green-400\">52 bpm</span>\n              </div>\n            </div>\n          </div>\n        </UniversalCard>\n\n        <UniversalCard variant=\"glass\" className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n            <Clock className=\"w-5 h-5 text-purple-400\" />\n            Sleep Analysis\n          </h3>\n          <div className=\"space-y-4\">\n            <div className=\"text-center mb-4\">\n              <div className=\"text-2xl font-bold text-white\">{unifiedData.health.sleepHours}h</div>\n              <div className=\"text-sm text-white/60\">Last night</div>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-white/70\">Deep Sleep</span>\n                <span className=\"text-purple-400\">1h 52m</span>\n              </div>\n              <div className=\"w-full bg-white/[0.05] rounded-full h-2\">\n                <div className=\"bg-purple-400 h-2 rounded-full\" style={{ width: '25%' }}></div>\n              </div>\n              \n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-white/70\">REM Sleep</span>\n                <span className=\"text-blue-400\">2h 18m</span>\n              </div>\n              <div className=\"w-full bg-white/[0.05] rounded-full h-2\">\n                <div className=\"bg-blue-400 h-2 rounded-full\" style={{ width: '30%' }}></div>\n              </div>\n              \n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-white/70\">Light Sleep</span>\n                <span className=\"text-green-400\">3h 24m</span>\n              </div>\n              <div className=\"w-full bg-white/[0.05] rounded-full h-2\">\n                <div className=\"bg-green-400 h-2 rounded-full\" style={{ width: '45%' }}></div>\n              </div>\n            </div>\n            \n            <div className=\"mt-4 p-3 bg-white/[0.02] rounded-lg\">\n              <div className=\"flex justify-between text-xs\">\n                <span className=\"text-white/60\">Sleep Score</span>\n                <span className=\"text-green-400\">{unifiedData.health.sleepScore}/100</span>\n              </div>\n              <div className=\"flex justify-between text-xs mt-1\">\n                <span className=\"text-white/60\">Efficiency</span>\n                <span className=\"text-white\">92%</span>\n              </div>\n            </div>\n          </div>\n        </UniversalCard>\n\n        <UniversalCard variant=\"glass\" className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n            <Target className=\"w-5 h-5 text-yellow-400\" />\n            Daily Activity\n          </h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <span className=\"text-sm text-white/70\">Steps</span>\n              <span className=\"text-white font-bold\">{unifiedData.health.steps.toLocaleString()}</span>\n            </div>\n            <div className=\"w-full bg-white/[0.05] rounded-full h-3\">\n              <div className=\"bg-yellow-400 h-3 rounded-full\" style={{ width: `${Math.min(100, (unifiedData.health.steps / 10000) * 100)}%` }}></div>\n            </div>\n            <div className=\"text-xs text-white/60 text-right\">Goal: 10,000</div>\n            \n            <div className=\"grid grid-cols-2 gap-4 mt-4\">\n              <div className=\"p-3 bg-white/[0.02] rounded-lg\">\n                <div className=\"text-xs text-white/60\">Active Calories</div>\n                <div className=\"text-lg font-bold text-orange-400\">{unifiedData.health.activeCalories}</div>\n              </div>\n              <div className=\"p-3 bg-white/[0.02] rounded-lg\">\n                <div className=\"text-xs text-white/60\">Distance</div>\n                <div className=\"text-lg font-bold text-blue-400\">3.2mi</div>\n              </div>\n              <div className=\"p-3 bg-white/[0.02] rounded-lg\">\n                <div className=\"text-xs text-white/60\">Floors</div>\n                <div className=\"text-lg font-bold text-green-400\">{unifiedData.health.floors}</div>\n              </div>\n              <div className=\"p-3 bg-white/[0.02] rounded-lg\">\n                <div className=\"text-xs text-white/60\">Active Min</div>\n                <div className=\"text-lg font-bold text-purple-400\">{unifiedData.health.activeMinutes}</div>\n              </div>\n            </div>\n          </div>\n        </UniversalCard>\n      </div>\n\n      {/* Financial Health Correlation */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <UniversalCard variant=\"glass\" className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n            <Shield className=\"w-5 h-5 text-emerald-400\" />\n            Stress vs Spending Patterns\n          </h3>\n          <div className=\"space-y-4\">\n            <div className=\"p-4 bg-white/[0.02] rounded-lg\">\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm text-white/70\">High Stress Days</span>\n                <Badge variant=\"outline\" className=\"border-red-400/20 text-red-400 text-xs\">\n                  +127% spending\n                </Badge>\n              </div>\n              <div className=\"text-2xl font-bold text-red-400\">$189</div>\n              <div className=\"text-xs text-white/60\">Avg daily spend</div>\n            </div>\n            \n            <div className=\"p-4 bg-white/[0.02] rounded-lg\">\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm text-white/70\">Low Stress Days</span>\n                <Badge variant=\"outline\" className=\"border-green-400/20 text-green-400 text-xs\">\n                  -23% spending\n                </Badge>\n              </div>\n              <div className=\"text-2xl font-bold text-green-400\">$83</div>\n              <div className=\"text-xs text-white/60\">Avg daily spend</div>\n            </div>\n            \n            <div className=\"p-3 bg-orange-400/10 rounded-lg border border-orange-400/20\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <Zap className=\"w-4 h-4 text-orange-400\" />\n                <span className=\"text-sm font-medium text-orange-400\">Smart Alert</span>\n              </div>\n              <div className=\"text-xs text-white/80\">\n                Your stress levels have been elevated for 3 days. Consider meditation before making purchases.\n              </div>\n            </div>\n          </div>\n        </UniversalCard>\n        \n        <UniversalCard variant=\"glass\" className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n            <DollarSign className=\"w-5 h-5 text-blue-400\" />\n            Sleep Quality Impact on ROI\n          </h3>\n          <div className=\"space-y-4\">\n            <div className=\"p-4 bg-white/[0.02] rounded-lg\">\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm text-white/70\">Good Sleep (8+ hrs)</span>\n                <Badge variant=\"outline\" className=\"border-green-400/20 text-green-400 text-xs\">\n                  +2.3% ROI\n                </Badge>\n              </div>\n              <div className=\"text-2xl font-bold text-green-400\">11.7%</div>\n              <div className=\"text-xs text-white/60\">Investment returns</div>\n            </div>\n            \n            <div className=\"p-4 bg-white/[0.02] rounded-lg\">\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm text-white/70\">Poor Sleep (&lt;6 hrs)</span>\n                <Badge variant=\"outline\" className=\"border-red-400/20 text-red-400 text-xs\">\n                  -1.8% ROI\n                </Badge>\n              </div>\n              <div className=\"text-2xl font-bold text-red-400\">6.9%</div>\n              <div className=\"text-xs text-white/60\">Investment returns</div>\n            </div>\n            \n            <div className=\"p-3 bg-blue-400/10 rounded-lg border border-blue-400/20\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <Brain className=\"w-4 h-4 text-blue-400\" />\n                <span className=\"text-sm font-medium text-blue-400\">Insight</span>\n              </div>\n              <div className=\"text-xs text-white/80\">\n                Better sleep correlates with improved decision-making and investment performance.\n              </div>\n            </div>\n          </div>\n        </UniversalCard>\n      </div>\n\n      {/* Health Trends Data */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <UniversalCard variant=\"glass\" className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n            <Activity className=\"w-5 h-5 text-green-400\" />\n            Health Trends (7 Days)\n          </h3>\n          <div className=\"space-y-4\">\n            {/* Heart Rate Trend */}\n            <div className=\"p-4 bg-white/[0.02] rounded-lg\">\n              <div className=\"flex justify-between items-center mb-3\">\n                <span className=\"text-sm font-medium text-white\">Heart Rate Variability</span>\n                <Badge variant=\"outline\" className=\"border-green-400/20 text-green-400 text-xs\">\n                  +8% this week\n                </Badge>\n              </div>\n              <div className=\"grid grid-cols-7 gap-2 mb-2\">\n                {[42, 38, 45, 41, 47, 43, 45].map((hrv, index) => (\n                  <div key={index} className=\"text-center\">\n                    <div className=\"text-xs text-white/60 mb-1\">\n                      {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'][index]}\n                    </div>\n                    <div className=\"h-12 bg-white/[0.05] rounded flex items-end justify-center\">\n                      <div \n                        className=\"bg-green-400 rounded-sm w-3\" \n                        style={{ height: `${(hrv / 50) * 100}%` }}\n                      ></div>\n                    </div>\n                    <div className=\"text-xs text-white mt-1\">{hrv}ms</div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Stress Levels */}\n            <div className=\"p-4 bg-white/[0.02] rounded-lg\">\n              <div className=\"flex justify-between items-center mb-3\">\n                <span className=\"text-sm font-medium text-white\">Stress Levels</span>\n                <Badge variant=\"outline\" className=\"border-yellow-400/20 text-yellow-400 text-xs\">\n                  Stable\n                </Badge>\n              </div>\n              <div className=\"grid grid-cols-7 gap-2 mb-2\">\n                {[28, 45, 32, 38, 52, 35, 32].map((stress, index) => (\n                  <div key={index} className=\"text-center\">\n                    <div className=\"text-xs text-white/60 mb-1\">\n                      {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'][index]}\n                    </div>\n                    <div className=\"h-12 bg-white/[0.05] rounded flex items-end justify-center\">\n                      <div \n                        className={`rounded-sm w-3 ${stress > 45 ? 'bg-red-400' : stress > 35 ? 'bg-yellow-400' : 'bg-green-400'}`}\n                        style={{ height: `${(stress / 60) * 100}%` }}\n                      ></div>\n                    </div>\n                    <div className=\"text-xs text-white mt-1\">{stress}</div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Sleep Quality */}\n            <div className=\"p-4 bg-white/[0.02] rounded-lg\">\n              <div className=\"flex justify-between items-center mb-3\">\n                <span className=\"text-sm font-medium text-white\">Sleep Quality</span>\n                <Badge variant=\"outline\" className=\"border-blue-400/20 text-blue-400 text-xs\">\n                  Improving\n                </Badge>\n              </div>\n              <div className=\"grid grid-cols-7 gap-2 mb-2\">\n                {[8.2, 6.5, 7.8, 7.2, 8.5, 8.8, 7.5].map((sleep, index) => (\n                  <div key={index} className=\"text-center\">\n                    <div className=\"text-xs text-white/60 mb-1\">\n                      {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'][index]}\n                    </div>\n                    <div className=\"h-12 bg-white/[0.05] rounded flex items-end justify-center\">\n                      <div \n                        className=\"bg-purple-400 rounded-sm w-3\" \n                        style={{ height: `${(sleep / 10) * 100}%` }}\n                      ></div>\n                    </div>\n                    <div className=\"text-xs text-white mt-1\">{sleep}h</div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </UniversalCard>\n        \n        <UniversalCard variant=\"glass\" className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n            <TrendingUp className=\"w-5 h-5 text-blue-400\" />\n            Wealth Performance (30 Days)\n          </h3>\n          <div className=\"space-y-4\">\n            {/* Net Worth Progression */}\n            <div className=\"p-4 bg-white/[0.02] rounded-lg\">\n              <div className=\"flex justify-between items-center mb-3\">\n                <span className=\"text-sm font-medium text-white\">Net Worth Growth</span>\n                <Badge variant=\"outline\" className=\"border-green-400/20 text-green-400 text-xs\">\n                  +$3,240 (2.6%)\n                </Badge>\n              </div>\n              <div className=\"text-2xl font-bold text-white mb-2\">${(unifiedData.wealth.netWorth / 1000).toFixed(1)}K</div>\n              <div className=\"text-xs text-white/60 mb-3\">Current net worth</div>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-xs\">\n                  <span className=\"text-white/60\">30 days ago</span>\n                  <span className=\"text-white\">${((unifiedData.wealth.netWorth - 3240) / 1000).toFixed(1)}K</span>\n                </div>\n                <div className=\"flex justify-between text-xs\">\n                  <span className=\"text-white/60\">15 days ago</span>\n                  <span className=\"text-white\">${((unifiedData.wealth.netWorth - 1650) / 1000).toFixed(1)}K</span>\n                </div>\n                <div className=\"flex justify-between text-xs\">\n                  <span className=\"text-white/60\">7 days ago</span>\n                  <span className=\"text-white\">${((unifiedData.wealth.netWorth - 720) / 1000).toFixed(1)}K</span>\n                </div>\n                <div className=\"flex justify-between text-xs\">\n                  <span className=\"text-white/60\">Today</span>\n                  <span className=\"text-green-400\">${(unifiedData.wealth.netWorth / 1000).toFixed(1)}K</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Portfolio Returns */}\n            <div className=\"p-4 bg-white/[0.02] rounded-lg\">\n              <div className=\"flex justify-between items-center mb-3\">\n                <span className=\"text-sm font-medium text-white\">Portfolio Returns</span>\n                <Badge variant=\"outline\" className=\"border-blue-400/20 text-blue-400 text-xs\">\n                  {unifiedData.wealth.portfolioReturns.toFixed(1)}% YTD\n                </Badge>\n              </div>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-xs text-white/60\">Stocks</span>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-green-400 text-sm\">+{(unifiedData.wealth.portfolioReturns + 4.2).toFixed(1)}%</span>\n                    <div className=\"w-16 bg-white/[0.05] rounded-full h-1\">\n                      <div className=\"bg-green-400 h-1 rounded-full\" style={{ width: '62%' }}></div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-xs text-white/60\">Bonds</span>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-yellow-400 text-sm\">+{(unifiedData.wealth.portfolioReturns - 4.4).toFixed(1)}%</span>\n                    <div className=\"w-16 bg-white/[0.05] rounded-full h-1\">\n                      <div className=\"bg-yellow-400 h-1 rounded-full\" style={{ width: '19%' }}></div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-xs text-white/60\">Crypto</span>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-red-400 text-sm\">-15.2%</span>\n                    <div className=\"w-16 bg-white/[0.05] rounded-full h-1\">\n                      <div className=\"bg-red-400 h-1 rounded-full\" style={{ width: '15%' }}></div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-xs text-white/60\">REITs</span>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-green-400 text-sm\">+{(unifiedData.wealth.portfolioReturns - 1.3).toFixed(1)}%</span>\n                    <div className=\"w-16 bg-white/[0.05] rounded-full h-1\">\n                      <div className=\"bg-green-400 h-1 rounded-full\" style={{ width: '35%' }}></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Financial Health Metrics */}\n            <div className=\"p-4 bg-white/[0.02] rounded-lg\">\n              <div className=\"flex justify-between items-center mb-3\">\n                <span className=\"text-sm font-medium text-white\">Financial Health</span>\n                <Badge variant=\"outline\" className=\"border-green-400/20 text-green-400 text-xs\">\n                  {unifiedData.wealth.savingsRate > 15 && unifiedData.wealth.debtToIncomeRatio < 20 ? 'Strong' : \n                   unifiedData.wealth.savingsRate > 10 || unifiedData.wealth.debtToIncomeRatio < 30 ? 'Good' : 'Fair'}\n                </Badge>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-blue-400\">{unifiedData.wealth.savingsRate}%</div>\n                  <div className=\"text-xs text-white/60\">Savings Rate</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-green-400\">{(unifiedData.wealth.debtToIncomeRatio / 100).toFixed(2)}</div>\n                  <div className=\"text-xs text-white/60\">Debt-to-Income</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-purple-400\">{unifiedData.wealth.emergencyFundMonths}</div>\n                  <div className=\"text-xs text-white/60\">Emergency Fund</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-yellow-400\">{unifiedData.family.creditScore}</div>\n                  <div className=\"text-xs text-white/60\">Credit Score</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </UniversalCard>\n      </div>\n    </div>\n  );\n};\n\nexport default AnalyticsPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/bank-linking/api/bankLinkProvider.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/bank-linking/api/bankLinkProvider.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LinkedAccount } from \"../types\";\n\n// NOTE: In a production build this file will be swapped with a concrete implementation (Plaid, Teller, etc.)\n// For now we expose an interface and a simple in-memory mock provider so that feature development can proceed.\n\nexport interface BankLinkProvider {\n  /**\n   * Initiates a link flow and returns a link token that the client can use to bootstrap OAuth.\n   */\n  createLinkToken: () => Promise<string>;\n\n  /**\n   * Finalises the link process and stores the linked account meta.\n   */\n  exchangePublicToken: (publicToken: string) => Promise<LinkedAccount>;\n\n  /**\n   * Returns all linked accounts for the current user.\n   */\n  getLinkedAccounts: () => Promise<LinkedAccount[]>;\n\n  /**\n   * Unlinks an existing account by id.\n   */\n  unlinkAccount: (accountId: string) => Promise<void>;\n}\n\n// Simple mock implementation – will be replaced during integration testing.\nclass InMemoryBankLinkProvider implements BankLinkProvider {\n  private accounts: LinkedAccount[] = [];\n\n  async createLinkToken(): Promise<string> {\n    return \"mock-link-token-\" + Math.random().toString(36).substring(2, 15);\n  }\n\n  async exchangePublicToken(publicToken: string): Promise<LinkedAccount> {\n    const newAccount: LinkedAccount = {\n      id: publicToken + \"-acc\",\n      provider: \"mock\",\n      displayName: \"Mock Checking\",\n      institutionName: \"Mock Bank\",\n      lastFour: \"1234\",\n      type: \"checking\",\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    this.accounts.push(newAccount);\n    return newAccount;\n  }\n\n  async getLinkedAccounts(): Promise<LinkedAccount[]> {\n    return this.accounts;\n  }\n\n  async unlinkAccount(accountId: string): Promise<void> {\n    this.accounts = this.accounts.filter((acc) => acc.id !== accountId);\n  }\n}\n\n// Export a singleton mock provider for immediate use\nexport const bankLinkProvider: BankLinkProvider = new InMemoryBankLinkProvider(); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/bank-linking/components/BankLinkingPanel.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/bank-linking/components/BankLinkingPanel.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { LinkAccountsButton } from \"./LinkAccountsButton\";\nimport { LinkedAccountsList } from \"./LinkedAccountsList\";\nimport { UniversalCard } from \"@/shared/ui/UniversalCard\";\nimport { Banknote } from \"lucide-react\";\n\nexport const BankLinkingPanel: React.FC = () => {\n  return (\n    <UniversalCard\n      variant=\"glass\"\n      size=\"md\"\n      title=\"Linked Bank Accounts\"\n      icon={Banknote}\n      iconColor=\"#6366f1\"\n    >\n      <div className=\"space-y-4\">\n        <LinkAccountsButton />\n        <LinkedAccountsList />\n      </div>\n    </UniversalCard>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/bank-linking/components/LinkAccountsButton.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/bank-linking/components/LinkAccountsButton.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from \"@/shared/ui/button\";\nimport { useToast } from \"@/shared/hooks/use-toast\";\nimport { useBankLinkingStore } from \"../store\";\nimport { Banknote } from \"lucide-react\";\nimport React from \"react\";\n\nexport const LinkAccountsButton: React.FC = () => {\n  const { toast } = useToast();\n  const linkMockAccount = useBankLinkingStore((s) => s.linkMockAccount);\n  const loading = useBankLinkingStore((s) => s.loading);\n\n  const handleClick = async () => {\n    await linkMockAccount();\n    toast({ title: \"Account linked\", description: \"A mock account was added.\" });\n  };\n\n  return (\n    <Button onClick={handleClick} disabled={loading} variant=\"secondary\">\n      <Banknote className=\"mr-2\" /> Link Bank Account\n    </Button>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/bank-linking/components/LinkedAccountsList.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/bank-linking/components/LinkedAccountsList.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\nimport { useBankLinkingStore } from \"../store\";\nimport { Card, CardContent, CardHeader, CardTitle, CardFooter } from \"@/shared/ui/card\";\nimport { Button } from \"@/shared/ui/button\";\nimport { Banknote, X } from \"lucide-react\";\nimport { cn } from \"@/shared/lib/utils\";\n\nexport const LinkedAccountsList: React.FC<{ className?: string }> = ({ className }) => {\n  const { accounts, loading, refresh, unlink } = useBankLinkingStore((s) => ({\n    accounts: s.accounts,\n    loading: s.loading,\n    refresh: s.refresh,\n    unlink: s.unlink,\n  }));\n\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n\n  if (loading && accounts.length === 0) {\n    return <p className={cn(\"text-muted-foreground\", className)}>Loading accounts…</p>;\n  }\n\n  if (accounts.length === 0) {\n    return <p className={cn(\"text-muted-foreground\", className)}>No linked accounts yet.</p>;\n  }\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      {accounts.map((acc) => (\n        <Card key={acc.id}>\n          <CardHeader className=\"flex-row items-center justify-between space-y-0\">\n            <div className=\"flex items-center gap-2\">\n              <Banknote className=\"text-primary\" />\n              <CardTitle>{acc.displayName}</CardTitle>\n            </div>\n            <Button size=\"icon\" variant=\"ghost\" onClick={() => unlink(acc.id)}>\n              <X className=\"size-4\" />\n            </Button>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-muted-foreground\">\n              {acc.institutionName} • ****{acc.lastFour}\n            </p>\n          </CardContent>\n          <CardFooter className=\"text-xs text-muted-foreground\">\n            Linked {new Date(acc.createdAt).toLocaleDateString()}\n          </CardFooter>\n        </Card>\n      ))}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/bank-linking/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/bank-linking/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export {};\nexport { useBankLinkingStore } from \"./store\";\nexport { LinkAccountsButton } from \"./components/LinkAccountsButton\";\nexport { LinkedAccountsList } from \"./components/LinkedAccountsList\";\nexport { BankLinkingPanel } from \"./components/BankLinkingPanel\"; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/bank-linking/store.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/bank-linking/store.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from \"zustand\";\nimport { bankLinkProvider } from \"@/features/bank-linking/api/bankLinkProvider\";\nimport { LinkedAccount } from \"@/shared/types/shared\";\n\ninterface BankLinkingState {\n  accounts: LinkedAccount[];\n  loading: boolean;\n  error?: string;\n  refresh: () => Promise<void>;\n  linkMockAccount: () => Promise<void>;\n  unlink: (id: string) => Promise<void>;\n}\n\nexport const useBankLinkingStore = create<BankLinkingState>((set, get) => ({\n  accounts: [],\n  loading: false,\n  error: undefined,\n  refresh: async () => {\n    set({ loading: true, error: undefined });\n    try {\n      const accounts = await bankLinkProvider.getLinkedAccounts();\n      set({ accounts, loading: false });\n    } catch (err: any) {\n      set({ error: err.message ?? \"Unknown error\", loading: false });\n    }\n  },\n  linkMockAccount: async () => {\n    await bankLinkProvider.exchangePublicToken(\"public-token-\" + Date.now());\n    await get().refresh();\n  },\n  unlink: async (id: string) => {\n    await bankLinkProvider.unlinkAccount(id);\n    await get().refresh();\n  },\n})); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/bill-negotiation/api/negotiationService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/bill-negotiation/api/negotiationService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NegotiationCase } from \"../types\";\n\nexport interface NegotiationService {\n  submitNegotiation: (chargeId: string) => Promise<NegotiationCase>;\n  getNegotiationStatus: (caseId: string) => Promise<NegotiationCase | undefined>;\n}\n\nclass MockNegotiationService implements NegotiationService {\n  private cases: NegotiationCase[] = [];\n\n  async submitNegotiation(chargeId: string): Promise<NegotiationCase> {\n    const newCase: NegotiationCase = {\n      id: \"case-\" + Math.random().toString(36).substring(2),\n      chargeId,\n      status: \"queued\",\n      submittedAt: new Date().toISOString(),\n    };\n    this.cases.push(newCase);\n    return newCase;\n  }\n\n  async getNegotiationStatus(caseId: string): Promise<NegotiationCase | undefined> {\n    return this.cases.find((c) => c.id === caseId);\n  }\n}\n\nexport const negotiationService: NegotiationService = new MockNegotiationService(); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/bill-negotiation/components/BillNegotiationPanel.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/bill-negotiation/components/BillNegotiationPanel.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { UniversalCard } from \"@/shared/ui/UniversalCard\";\nimport { NegotiateBillsButton } from \"./NegotiateBillsButton\";\nimport { NegotiationCasesList } from \"./NegotiationCasesList\";\nimport { Handshake } from \"lucide-react\";\n\nexport const BillNegotiationPanel: React.FC = () => {\n  return (\n    <UniversalCard\n      variant=\"glass\"\n      size=\"md\"\n      title=\"Bill Negotiation Concierge\"\n      icon={Handshake}\n      iconColor=\"#10b981\"\n    >\n      <div className=\"space-y-4\">\n        <NegotiateBillsButton />\n        <NegotiationCasesList />\n      </div>\n    </UniversalCard>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/bill-negotiation/components/NegotiateBillsButton.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/bill-negotiation/components/NegotiateBillsButton.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Button } from \"@/shared/ui/button\";\nimport { useNegotiationStore } from \"../store\";\nimport { useToast } from \"@/shared/hooks/use-toast\";\nimport { Handshake } from \"lucide-react\";\n\nexport const NegotiateBillsButton: React.FC = () => {\n  const negotiate = useNegotiationStore((s) => s.negotiateOutstanding);\n  const loading = useNegotiationStore((s) => s.loading);\n  const { toast } = useToast();\n\n  const onClick = async () => {\n    await negotiate();\n    toast({ title: \"Negotiation started\", description: \"We'll work on lowering your bills.\" });\n  };\n\n  return (\n    <Button onClick={onClick} disabled={loading} variant=\"secondary\">\n      <Handshake className=\"mr-2\" /> Negotiate Bills\n    </Button>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/bill-negotiation/components/NegotiationCasesList.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/bill-negotiation/components/NegotiationCasesList.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\nimport { useNegotiationStore } from \"../store\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/shared/ui/card\";\nimport { Loader2, DollarSign, CheckCircle, XCircle } from \"lucide-react\";\nimport { cn } from \"@/shared/lib/utils\";\n\nexport const NegotiationCasesList: React.FC<{ className?: string }> = ({ className }) => {\n  const { cases, loading, refresh } = useNegotiationStore((s) => ({\n    cases: s.cases,\n    loading: s.loading,\n    refresh: s.refresh,\n  }));\n\n  useEffect(() => {\n    if (cases.length > 0) {\n      const interval = setInterval(() => refresh(), 3000);\n      return () => clearInterval(interval);\n    }\n  }, [cases.length, refresh]);\n\n  if (cases.length === 0) {\n    return <p className={cn(\"text-muted-foreground\", className)}>No negotiations yet.</p>;\n  }\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      {cases.map((cs) => {\n        let icon = <Loader2 className=\"animate-spin text-primary\" />;\n        let statusText = \"In progress\";\n        if (cs.status === \"completed\") {\n          icon = <CheckCircle className=\"text-green-500\" />;\n          statusText = `Saved $${(cs.savingsAmount ?? 0).toFixed(2)}`;\n        } else if (cs.status === \"failed\") {\n          icon = <XCircle className=\"text-red-500\" />;\n          statusText = \"Failed\";\n        }\n        return (\n          <Card key={cs.id}>\n            <CardHeader className=\"flex-row items-center gap-2 space-y-0\">\n              {icon}\n              <CardTitle>Case for Charge {cs.chargeId}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-sm text-muted-foreground\">{statusText}</CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/bill-negotiation/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/bill-negotiation/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export { useNegotiationStore } from \"./store\";\nexport { BillNegotiationPanel } from \"./components/BillNegotiationPanel\"; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/bill-negotiation/store.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/bill-negotiation/store.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from \"zustand\";\nimport { negotiationService } from \"@/features/bill-negotiation/api/negotiationService\";\nimport { useSubscriptionsStore } from \"@/features/subscriptions/store\";\nimport { NegotiationCase } from \"@/shared/types/shared\";\n\ninterface NegotiationState {\n  cases: NegotiationCase[];\n  loading: boolean;\n  error?: string;\n  refresh: () => Promise<void>;\n  negotiateOutstanding: () => Promise<void>;\n}\n\nexport const useNegotiationStore = create<NegotiationState>((set, get) => ({\n  cases: [],\n  loading: false,\n  error: undefined,\n  refresh: async () => {\n    set({ loading: true, error: undefined });\n    try {\n      const current = get().cases;\n      // refresh each case status\n      const updated: NegotiationCase[] = await Promise.all(\n        current.map(async (c) => (await negotiationService.getNegotiationStatus(c.id)) ?? c)\n      );\n      set({ cases: updated, loading: false });\n    } catch (err: any) {\n      set({ error: err.message ?? \"Unknown\", loading: false });\n    }\n  },\n  negotiateOutstanding: async () => {\n    set({ loading: true, error: undefined });\n    try {\n      const charges = useSubscriptionsStore.getState().charges.filter((c) => c.status === \"active\");\n      const newCases: NegotiationCase[] = [];\n      for (const charge of charges) {\n        // avoid duplicate negotiation per chargeId\n        if (!get().cases.find((cs) => cs.chargeId === charge.id)) {\n          const nc = await negotiationService.submitNegotiation(charge.id);\n          newCases.push(nc);\n        }\n      }\n      set({ cases: [...get().cases, ...newCases], loading: false });\n    } catch (err: any) {\n      set({ error: err.message ?? \"Unknown\", loading: false });\n    }\n  },\n})); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/biometric-intervention/api/BiometricStream.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/biometric-intervention/api/BiometricStream.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Observable, BehaviorSubject, interval, combineLatest } from 'rxjs';\nimport { map, shareReplay, startWith, distinctUntilChanged, filter } from 'rxjs/operators';\nimport { z } from 'zod';\n\n// Zod schemas for type safety\nexport const BiometricReadingSchema = z.object({\n  timestamp: z.string(),\n  deviceId: z.string(),\n  heartRate: z.number().min(30).max(220).optional(),\n  heartRateVariability: z.number().min(0).max(100).optional(),\n  galvanicSkinResponse: z.number().min(0).max(10).optional(),\n  skinTemperature: z.number().min(90).max(110).optional(),\n  respiratoryRate: z.number().min(8).max(40).optional(),\n  bloodOxygenSaturation: z.number().min(0).max(100).optional(),\n  stressIndex: z.number().min(0).max(100).optional(),\n  confidenceScore: z.number().min(0).max(1).optional(),\n});\n\nexport type BiometricReading = z.infer<typeof BiometricReadingSchema>;\n\nexport interface BiometricDataSource {\n  id: string;\n  name: string;\n  type: 'apple-watch' | 'fitbit' | 'garmin' | 'oura' | 'manual';\n  isConnected: boolean;\n  lastReading?: BiometricReading;\n}\n\nclass BiometricStreamService {\n  private _readings$ = new BehaviorSubject<BiometricReading | null>(null);\n  private _connectedDevices$ = new BehaviorSubject<BiometricDataSource[]>([]);\n  private _isActive$ = new BehaviorSubject<boolean>(false);\n\n  // Mock data generators for development\n  private generateMockReading(deviceId: string): BiometricReading {\n    const baseStress = Math.random() * 30 + 20; // 20-50 baseline\n    const timeVariation = Math.sin(Date.now() / 60000) * 10; // Time-based variation\n    const stressIndex = Math.max(0, Math.min(100, baseStress + timeVariation + (Math.random() - 0.5) * 20));\n\n    return {\n      timestamp: new Date().toISOString(),\n      deviceId,\n      heartRate: 60 + Math.random() * 40 + (stressIndex / 100) * 20,\n      heartRateVariability: 50 - (stressIndex / 100) * 30 + Math.random() * 10,\n      galvanicSkinResponse: 2 + (stressIndex / 100) * 3 + Math.random() * 0.5,\n      skinTemperature: 98.6 + (Math.random() - 0.5) * 2,\n      respiratoryRate: 16 + (stressIndex / 100) * 8 + Math.random() * 2,\n      bloodOxygenSaturation: 98 - (stressIndex / 100) * 3 + Math.random() * 2,\n      stressIndex,\n      confidenceScore: 0.85 + Math.random() * 0.15,\n    };\n  }\n\n  // Public observables\n  public readonly readings$: Observable<BiometricReading> = this._readings$.pipe(\n    filter((reading): reading is BiometricReading => reading !== null),\n    distinctUntilChanged((a, b) => \n      Math.abs(a.stressIndex || 0 - (b.stressIndex || 0)) < 2\n    ),\n    shareReplay(1)\n  );\n\n  public readonly connectedDevices$: Observable<BiometricDataSource[]> = this._connectedDevices$.pipe(\n    shareReplay(1)\n  );\n\n  public readonly isActive$: Observable<boolean> = this._isActive$.pipe(\n    shareReplay(1)\n  );\n\n  // Derived observables\n  public readonly stressLevel$: Observable<number> = this.readings$.pipe(\n    map(reading => reading.stressIndex || 0),\n    distinctUntilChanged(),\n    shareReplay(1)\n  );\n\n  public readonly heartRate$: Observable<number> = this.readings$.pipe(\n    map(reading => reading.heartRate || 0),\n    distinctUntilChanged(),\n    shareReplay(1)\n  );\n\n  public readonly wellnessScore$: Observable<number> = this.readings$.pipe(\n    map(reading => {\n      const stress = reading.stressIndex || 50;\n      const hrv = reading.heartRateVariability || 30;\n      const hr = reading.heartRate || 70;\n      \n      // Calculate wellness score (inverse of stress, normalized)\n      const stressScore = (100 - stress) * 0.4;\n      const hrvScore = Math.min(100, hrv * 2) * 0.3;\n      const hrScore = Math.max(0, 100 - Math.abs(hr - 70) * 2) * 0.3;\n      \n      return Math.round(stressScore + hrvScore + hrScore);\n    }),\n    distinctUntilChanged(),\n    shareReplay(1)\n  );\n\n  // Combined real-time stream\n  public readonly biometricState$: Observable<{\n    reading: BiometricReading;\n    stressIndex: number;\n    wellnessScore: number;\n    isActive: boolean;\n    devices: BiometricDataSource[];\n  }> = combineLatest([\n    this.readings$,\n    this.stressLevel$,\n    this.wellnessScore$,\n    this.isActive$,\n    this.connectedDevices$\n  ]).pipe(\n    map(([reading, stressIndex, wellnessScore, isActive, devices]) => ({\n      reading,\n      stressIndex,\n      wellnessScore,\n      isActive,\n      devices\n    })),\n    shareReplay(1)\n  );\n\n  // Control methods\n  public startStream(): void {\n    if (this._isActive$.value) return;\n    \n    this._isActive$.next(true);\n    \n    // Initialize mock devices\n    this._connectedDevices$.next([\n      {\n        id: 'apple-watch-series-8',\n        name: 'Apple Watch Series 8',\n        type: 'apple-watch',\n        isConnected: true,\n      },\n      {\n        id: 'oura-ring-gen3',\n        name: 'Oura Ring Gen 3',\n        type: 'oura',\n        isConnected: Math.random() > 0.3, // 70% connected\n      }\n    ]);\n\n    // Start mock data stream (every 5 seconds)\n    interval(5000).pipe(\n      filter(() => this._isActive$.value),\n      map(() => this.generateMockReading('apple-watch-series-8'))\n    ).subscribe(reading => {\n      this._readings$.next(reading);\n    });\n  }\n\n  public stopStream(): void {\n    this._isActive$.next(false);\n  }\n\n  public manualReading(reading: Partial<BiometricReading>): void {\n    const fullReading: BiometricReading = {\n      timestamp: new Date().toISOString(),\n      deviceId: 'manual-input',\n      ...this.generateMockReading('manual-input'),\n      ...reading,\n    };\n    \n    try {\n      const validated = BiometricReadingSchema.parse(fullReading);\n      this._readings$.next(validated);\n    } catch (error) {\n      console.error('Invalid biometric reading:', error);\n    }\n  }\n\n  public addDevice(device: BiometricDataSource): void {\n    const currentDevices = this._connectedDevices$.value;\n    if (!currentDevices.find(d => d.id === device.id)) {\n      this._connectedDevices$.next([...currentDevices, device]);\n    }\n  }\n\n  public removeDevice(deviceId: string): void {\n    const currentDevices = this._connectedDevices$.value;\n    this._connectedDevices$.next(currentDevices.filter(d => d.id !== deviceId));\n  }\n\n  // Get current values synchronously\n  public getCurrentStressLevel(): number {\n    return this._readings$.value?.stressIndex || 0;\n  }\n\n  public getCurrentWellnessScore(): number {\n    const reading = this._readings$.value;\n    if (!reading) return 0;\n    \n    const stress = reading.stressIndex || 50;\n    const hrv = reading.heartRateVariability || 30;\n    const hr = reading.heartRate || 70;\n    \n    const stressScore = (100 - stress) * 0.4;\n    const hrvScore = Math.min(100, hrv * 2) * 0.3;\n    const hrScore = Math.max(0, 100 - Math.abs(hr - 70) * 2) * 0.3;\n    \n    return Math.round(stressScore + hrvScore + hrScore);\n  }\n}\n\n// Singleton instance\nexport const biometricStream = new BiometricStreamService();\n\n// Export for React hooks\nexport type BiometricStreamType = typeof biometricStream; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/biometric-intervention/api/WellnessEngine.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/biometric-intervention/api/WellnessEngine.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Observable, BehaviorSubject, combineLatest } from 'rxjs';\nimport { map, shareReplay, distinctUntilChanged, tap } from 'rxjs/operators';\nimport { z } from 'zod';\nimport { biometricStream, BiometricReading, BiometricDataSource } from './BiometricStream';\n\n// Zod schemas for BiometricsState\nexport const BiometricsStateSchema = z.object({\n  // Current metrics\n  stressIndex: z.number().min(0).max(100),\n  wellnessScore: z.number().min(0).max(100),\n  heartRate: z.number().min(30).max(220).optional(),\n  heartRateVariability: z.number().min(0).max(100).optional(),\n  \n  // Trends (last 5 readings)\n  stressTrend: z.enum(['rising', 'falling', 'stable']),\n  wellnessTrend: z.enum(['improving', 'declining', 'stable']),\n  \n  // Device status\n  isActive: z.boolean(),\n  connectedDevices: z.array(z.object({\n    id: z.string(),\n    name: z.string(),\n    type: z.string(),\n    isConnected: z.boolean(),\n  })),\n  \n  // Intervention triggers\n  shouldIntervene: z.boolean(),\n  interventionLevel: z.enum(['none', 'mild', 'moderate', 'severe']),\n  \n  // Timestamps and metadata\n  lastReading: z.string().optional(),\n  confidenceScore: z.number().min(0).max(1).optional(),\n  \n  // Synchronized timing for UI (<50ms requirement)\n  timestamp: z.string(),\n});\n\nexport type BiometricsState = z.infer<typeof BiometricsStateSchema>;\n\nexport interface WellnessTrigger {\n  id: string;\n  type: 'stress' | 'wellness' | 'heartrate' | 'trend';\n  threshold: number;\n  condition: 'above' | 'below' | 'equal';\n  enabled: boolean;\n  callback?: (state: BiometricsState) => void;\n}\n\nclass WellnessEngineService {\n  private _state$ = new BehaviorSubject<BiometricsState | null>(null);\n  private _triggers$ = new BehaviorSubject<WellnessTrigger[]>([]);\n  private _history: BiometricReading[] = [];\n  private readonly maxHistorySize = 50;\n\n  // Public observables\n  public readonly state$: Observable<BiometricsState> = this._state$.pipe(\n    map(state => state as BiometricsState),\n    distinctUntilChanged((a, b) => \n      a.stressIndex === b.stressIndex && \n      a.wellnessScore === b.wellnessScore &&\n      a.timestamp === b.timestamp\n    ),\n    shareReplay(1)\n  );\n\n  public readonly stressIndex$: Observable<number> = this.state$.pipe(\n    map(state => state.stressIndex),\n    distinctUntilChanged(),\n    shareReplay(1)\n  );\n\n  public readonly wellnessScore$: Observable<number> = this.state$.pipe(\n    map(state => state.wellnessScore),\n    distinctUntilChanged(),\n    shareReplay(1)\n  );\n\n  public readonly shouldIntervene$: Observable<boolean> = this.state$.pipe(\n    map(state => state.shouldIntervene),\n    distinctUntilChanged(),\n    shareReplay(1)\n  );\n\n  private calculateTrend(values: number[], type: 'stress' | 'wellness'): 'rising' | 'falling' | 'stable' | 'improving' | 'declining' {\n    if (values.length < 3) return 'stable';\n    \n    const recent = values.slice(-3);\n    const older = values.slice(-6, -3);\n    \n    const recentAvg = recent.reduce((a, b) => a + b, 0) / recent.length;\n    const olderAvg = older.length > 0 ? older.reduce((a, b) => a + b, 0) / older.length : recentAvg;\n    \n    const threshold = type === 'stress' ? 5 : 8; // Different sensitivity for stress vs wellness\n    const diff = recentAvg - olderAvg;\n    \n    if (type === 'stress') {\n      if (diff > threshold) return 'rising';\n      if (diff < -threshold) return 'falling';\n      return 'stable';\n    } else { // wellness\n      if (diff > threshold) return 'improving';\n      if (diff < -threshold) return 'declining';\n      return 'stable';\n    }\n  }\n\n  private calculateInterventionLevel(stressIndex: number, trend: string): 'none' | 'mild' | 'moderate' | 'severe' {\n    if (stressIndex >= 85 || (stressIndex >= 70 && trend === 'rising')) return 'severe';\n    if (stressIndex >= 70 || (stressIndex >= 60 && trend === 'rising')) return 'moderate';\n    if (stressIndex >= 55 || (stressIndex >= 45 && trend === 'rising')) return 'mild';\n    return 'none';\n  }\n\n  private shouldTriggerIntervention(state: BiometricsState): boolean {\n    // Intervention logic based on stress, trends, and configured triggers\n    const triggers = this._triggers$.value;\n    \n    // Check configured triggers\n    for (const trigger of triggers.filter(t => t.enabled)) {\n      let value: number;\n      switch (trigger.type) {\n        case 'stress':\n          value = state.stressIndex;\n          break;\n        case 'wellness':\n          value = state.wellnessScore;\n          break;\n        case 'heartrate':\n          value = state.heartRate || 70;\n          break;\n        default:\n          continue;\n      }\n\n      const shouldTrigger = \n        (trigger.condition === 'above' && value > trigger.threshold) ||\n        (trigger.condition === 'below' && value < trigger.threshold) ||\n        (trigger.condition === 'equal' && Math.abs(value - trigger.threshold) < 2);\n\n      if (shouldTrigger) {\n        trigger.callback?.(state);\n        return true;\n      }\n    }\n\n    // Default intervention thresholds\n    return state.interventionLevel !== 'none';\n  }\n\n  constructor() {\n    this.initializeEngine();\n  }\n\n  private initializeEngine(): void {\n    // Subscribe to biometric stream and transform to wellness state\n    combineLatest([\n      biometricStream.biometricState$,\n      this._triggers$\n    ]).pipe(\n      map(([biometricState, triggers]) => {\n        const { reading, stressIndex, wellnessScore, isActive, devices } = biometricState;\n        \n        // Update history\n        this._history.push(reading);\n        if (this._history.length > this.maxHistorySize) {\n          this._history = this._history.slice(-this.maxHistorySize);\n        }\n\n        // Calculate trends\n        const stressHistory = this._history.map(r => r.stressIndex || 0);\n        const wellnessHistory = this._history.map(r => {\n          const stress = r.stressIndex || 50;\n          const hrv = r.heartRateVariability || 30;\n          const hr = r.heartRate || 70;\n          \n          const stressScore = (100 - stress) * 0.4;\n          const hrvScore = Math.min(100, hrv * 2) * 0.3;\n          const hrScore = Math.max(0, 100 - Math.abs(hr - 70) * 2) * 0.3;\n          \n          return Math.round(stressScore + hrvScore + hrScore);\n        });\n\n        const stressTrend = this.calculateTrend(stressHistory, 'stress') as 'rising' | 'falling' | 'stable';\n        const wellnessTrend = this.calculateTrend(wellnessHistory, 'wellness') as 'improving' | 'declining' | 'stable';\n        \n        const interventionLevel = this.calculateInterventionLevel(stressIndex, stressTrend);\n        \n        const newState: BiometricsState = {\n          stressIndex,\n          wellnessScore,\n          heartRate: reading.heartRate,\n          heartRateVariability: reading.heartRateVariability,\n          stressTrend,\n          wellnessTrend,\n          isActive,\n          connectedDevices: devices,\n          shouldIntervene: false, // Will be calculated next\n          interventionLevel,\n          lastReading: reading.timestamp,\n          confidenceScore: reading.confidenceScore,\n          timestamp: new Date().toISOString(),\n        };\n\n        // Calculate intervention after state is created\n        newState.shouldIntervene = this.shouldTriggerIntervention(newState);\n\n        return newState;\n      }),\n      tap(state => {\n        // Log synchronization timing for <50ms requirement\n        const timeDiff = Date.now() - new Date(state.lastReading || 0).getTime();\n        if (timeDiff > 50) {\n          console.warn(`Biometrics sync timing exceeded 50ms: ${timeDiff}ms`);\n        }\n      })\n    ).subscribe(state => {\n      this._state$.next(state);\n    });\n  }\n\n  // Public methods\n  public startEngine(): void {\n    biometricStream.startStream();\n  }\n\n  public stopEngine(): void {\n    biometricStream.stopStream();\n  }\n\n  public addTrigger(trigger: WellnessTrigger): void {\n    const currentTriggers = this._triggers$.value;\n    this._triggers$.next([...currentTriggers, trigger]);\n  }\n\n  public removeTrigger(triggerId: string): void {\n    const currentTriggers = this._triggers$.value;\n    this._triggers$.next(currentTriggers.filter(t => t.id !== triggerId));\n  }\n\n  public updateTrigger(triggerId: string, updates: Partial<WellnessTrigger>): void {\n    const currentTriggers = this._triggers$.value;\n    this._triggers$.next(\n      currentTriggers.map(t => \n        t.id === triggerId ? { ...t, ...updates } : t\n      )\n    );\n  }\n\n  public getCurrentState(): BiometricsState | null {\n    return this._state$.value;\n  }\n\n  public getHistory(): BiometricReading[] {\n    return [...this._history];\n  }\n\n  public clearHistory(): void {\n    this._history = [];\n  }\n\n  // Manual stress check for immediate intervention assessment\n  public async triggerManualCheck(): Promise<BiometricsState | null> {\n    const currentReading = biometricStream.generateMockReading('manual-check');\n    biometricStream.manualReading(currentReading);\n    \n    // Wait for state update\n    return new Promise((resolve) => {\n      const subscription = this.state$.subscribe(state => {\n        if (state.lastReading === currentReading.timestamp) {\n          subscription.unsubscribe();\n          resolve(state);\n        }\n      });\n    });\n  }\n}\n\n// Singleton instance\nexport const wellnessEngine = new WellnessEngineService();\n\n// Export for React hooks\nexport type WellnessEngineType = typeof wellnessEngine; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/biometric-intervention/api/biometricService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/biometric-intervention/api/biometricService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BiometricReading, InterventionAlert } from \"../types\";\n\nexport interface BiometricService {\n  getCurrentReading: () => Promise<BiometricReading>;\n  getAlerts: () => Promise<InterventionAlert[]>;\n  dismissAlert: (id: string) => Promise<void>;\n}\n\nclass MockBiometricService implements BiometricService {\n  private alerts: InterventionAlert[] = [];\n\n  async getCurrentReading(): Promise<BiometricReading> {\n    const heartRate = Math.floor(Math.random() * 40) + 60; // 60-100 bpm\n    const stressLevel = Math.floor(Math.random() * 100);\n    \n    let spendingRisk: 'low' | 'medium' | 'high' = 'low';\n    if (stressLevel > 70) spendingRisk = 'high';\n    else if (stressLevel > 40) spendingRisk = 'medium';\n\n    // Generate intervention alerts based on stress\n    if (stressLevel > 80 && this.alerts.length === 0) {\n      this.alerts.push({\n        id: \"alert-\" + Date.now(),\n        type: \"stress_spending\",\n        severity: \"warning\",\n        message: \"High stress detected. Consider taking a breathing break before making purchases.\",\n        createdAt: new Date().toISOString(),\n        dismissed: false,\n      });\n    }\n\n    return {\n      id: \"reading-\" + Date.now(),\n      timestamp: new Date().toISOString(),\n      heartRate,\n      stressLevel,\n      spendingRisk,\n    };\n  }\n\n  async getAlerts(): Promise<InterventionAlert[]> {\n    return this.alerts.filter(a => !a.dismissed);\n  }\n\n  async dismissAlert(id: string): Promise<void> {\n    const alert = this.alerts.find(a => a.id === id);\n    if (alert) alert.dismissed = true;\n  }\n}\n\nexport const biometricService: BiometricService = new MockBiometricService(); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/biometric-intervention/api/healthKitService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/biometric-intervention/api/healthKitService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/*\n  healthKitService.ts\n  -------------------\n  Lightweight abstraction around Apple HealthKit. In a true native iOS context we would bridge to\n  HKHealthStore via React Native, Capacitor, or a native Swift module. For web we fall back to\n  a stubbed API that can be replaced by your backend which syncs HealthKit data from the device.\n*/\n\nexport interface HealthMetrics {\n  activeEnergyBurned: number; // kcal per day average\n  exerciseMinutes: number;    // minutes per day average\n  stepCount: number;          // steps per day average\n  sleepHours: number;         // hours per night average\n  restingHeartRate: number;   // bpm\n  vo2Max: number;             // ml/kg·min\n  mindfulMinutes: number;     // minutes per day average\n}\n\nexport interface HealthScoreBreakdown {\n  activityScore: number;\n  cardioScore: number;\n  recoveryScore: number;\n  totalScore: number;\n}\n\nconst clamp = (value: number, min: number, max: number) => Math.min(max, Math.max(min, value));\n\n/**\n * Convert raw HealthKit metrics into a 0-100 health score using a simple weighted model\n * loosely inspired by Oura / WHOOP methodologies.\n */\nexport const calculateHealthScore = (metrics: HealthMetrics): HealthScoreBreakdown => {\n  // Activity (40%) – active energy + exercise minutes + steps\n  const activityTargetCalories = 450; // Apple Activity default move goal\n  const activityTargetExercise = 30;  // mins\n  const activityTargetSteps = 7500;\n\n  const activityCalScore = clamp((metrics.activeEnergyBurned / activityTargetCalories) * 100, 0, 100);\n  const activityExScore = clamp((metrics.exerciseMinutes / activityTargetExercise) * 100, 0, 100);\n  const activityStepScore = clamp((metrics.stepCount / activityTargetSteps) * 100, 0, 100);\n  const activityScore = (activityCalScore + activityExScore + activityStepScore) / 3;\n\n  // Cardio (30%) – resting heart rate (lower is better) + VO2Max (higher is better)\n  const rhrScore = clamp(((80 - metrics.restingHeartRate) / 40) * 100, 0, 100); // 40-80 bpm range\n  const vo2Score = clamp(((metrics.vo2Max - 25) / 30) * 100, 0, 100);           // 25-55 range\n  const cardioScore = (rhrScore + vo2Score) / 2;\n\n  // Recovery (30%) – sleep + mindful minutes\n  const sleepScore = clamp((metrics.sleepHours / 8) * 100, 0, 100);\n  const mindfulnessScore = clamp((metrics.mindfulMinutes / 15) * 100, 0, 100);\n  const recoveryScore = (sleepScore + mindfulnessScore) / 2;\n\n  const totalScore = Math.round(\n    activityScore * 0.4 +\n    cardioScore * 0.3 +\n    recoveryScore * 0.3\n  );\n\n  return {\n    activityScore: Math.round(activityScore),\n    cardioScore: Math.round(cardioScore),\n    recoveryScore: Math.round(recoveryScore),\n    totalScore\n  };\n};\n\n/**\n * Attempt to retrieve HealthKit metrics. Runs in two modes:\n * 1. Native / Capacitor – fetches from window.healthKit bridge if available.\n * 2. Web fallback      – hits REST endpoint `/api/health/summary` which should\n *    be filled by your backend cron pulling from Apple HealthKit CloudKit sync.\n */\nexport const fetchHealthMetrics = async (): Promise<HealthMetrics> => {\n  if (typeof window !== 'undefined' && (window as any).healthKit?.getSummary) {\n    const summary = await (window as any).healthKit.getSummary();\n    return summary as HealthMetrics;\n  }\n\n  // Fallback fetch – returns demo data if endpoint unavailable\n  try {\n    const res = await fetch('/api/health/summary');\n    if (res.ok) return (await res.json()) as HealthMetrics;\n  } catch (_) {\n    /* ignore */\n  }\n\n  // Demo placeholder values\n  return {\n    activeEnergyBurned: 380,\n    exerciseMinutes: 28,\n    stepCount: 8200,\n    sleepHours: 7.4,\n    restingHeartRate: 58,\n    vo2Max: 42,\n    mindfulMinutes: 12\n  };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/biometric-intervention/components/BiometricMonitor.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/biometric-intervention/components/BiometricMonitor.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useMemo } from 'react';\nimport { Heart, Activity, Thermometer, Wind, Watch, TrendingUp, TrendingDown, Minus } from 'lucide-react';\nimport { Badge } from '@/shared/ui/badge';\nimport { Button } from '@/shared/ui/button';\nimport { cn } from '@/shared/lib/utils';\nimport { useBiometricInterventionStore } from '../store';\nimport { StressLevel, BiometricData } from '../types';\n\ninterface BiometricMonitorProps {\n  className?: string;\n  compact?: boolean;\n}\n\nexport const BiometricMonitor: React.FC<BiometricMonitorProps> = ({\n  className,\n  compact = false\n}) => {\n  const {\n    currentStress,\n    preferences,\n    loading,\n    error,\n    triggerManualStressCheck,\n    isActive\n  } = useBiometricInterventionStore();\n\n  useEffect(() => {\n    // Auto-refresh stress level every 30 seconds if active\n    if (isActive) {\n      const interval = setInterval(() => {\n        triggerManualStressCheck();\n      }, 30000);\n      return () => clearInterval(interval);\n    }\n  }, [isActive, triggerManualStressCheck]);\n\n  const mockBiometricData: BiometricData = useMemo(() => ({\n    heartRate: 72 + Math.random() * 20,\n    heartRateVariability: 35 + Math.random() * 20,\n    galvanicSkinResponse: 2.1 + Math.random() * 1.5,\n    skinTemperature: 98.6 + Math.random() * 2 - 1,\n    respiratoryRate: 16 + Math.random() * 4,\n    timestamp: new Date().toISOString(),\n    deviceId: 'apple-watch-series-8'\n  }), []);\n\n  const getStressIndicator = (stress?: StressLevel) => {\n    if (!stress) return { color: 'gray', label: 'Unknown', icon: Minus };\n    \n    if (stress.score >= 80) return { color: 'red', label: 'High', icon: TrendingUp };\n    if (stress.score >= 60) return { color: 'orange', label: 'Elevated', icon: TrendingUp };\n    if (stress.score >= 40) return { color: 'yellow', label: 'Moderate', icon: Minus };\n    return { color: 'green', label: 'Low', icon: TrendingDown };\n  };\n\n  const getTrendIcon = (trend?: string) => {\n    switch (trend) {\n      case 'rising': return <TrendingUp className=\"w-4 h-4 text-red-400\" />;\n      case 'falling': return <TrendingDown className=\"w-4 h-4 text-green-400\" />;\n      default: return <Minus className=\"w-4 h-4 text-white/40\" />;\n    }\n  };\n\n  const getConnectedDevices = (): string[] => {\n    const devices: string[] = [];\n    if (preferences.wearableIntegrations.appleWatch) devices.push('Apple Watch');\n    if (preferences.wearableIntegrations.fitbit) devices.push('Fitbit');\n    if (preferences.wearableIntegrations.garmin) devices.push('Garmin');\n    if (preferences.wearableIntegrations.oura) devices.push('Oura Ring');\n    return devices;\n  };\n\n  const stressIndicator = getStressIndicator(currentStress);\n  const connectedDevices = getConnectedDevices();\n\n  if (compact) {\n    return (\n      <div className={cn(\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 hover:bg-white/[0.03] transition-all duration-300\", className)}>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"relative\">\n              <div className=\"w-10 h-10 rounded-xl bg-white/[0.05] flex items-center justify-center\">\n                <Heart className={cn(\n                  \"w-5 h-5\",\n                  stressIndicator.color === 'red' ? 'text-red-400' :\n                  stressIndicator.color === 'orange' ? 'text-orange-400' :\n                  stressIndicator.color === 'yellow' ? 'text-yellow-400' :\n                  stressIndicator.color === 'green' ? 'text-green-400' : 'text-white/40'\n                )} />\n              </div>\n              {isActive && (\n                <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-pulse\" />\n              )}\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-white/90\">\n                Stress: {currentStress?.score || '--'}/100\n              </p>\n              <p className=\"text-xs text-white/60\">\n                {stressIndicator.label} • {connectedDevices.length} device(s)\n              </p>\n            </div>\n          </div>\n          {getTrendIcon(currentStress?.trend)}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 hover:bg-white/[0.03] transition-all duration-300\", className)}>\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 rounded-xl bg-white/[0.05] flex items-center justify-center\">\n            <Activity className=\"w-5 h-5 text-blue-400\" />\n          </div>\n          <h3 className=\"font-medium text-white/80\">Biometric Monitor</h3>\n        </div>\n        <Badge variant={isActive ? \"default\" : \"secondary\"} className=\"text-xs\">\n          {isActive ? 'Active' : 'Inactive'}\n        </Badge>\n      </div>\n      \n      <div className=\"space-y-6\">\n        {error && (\n          <div className=\"p-3 bg-red-500/20 border border-red-500/30 rounded-lg\">\n            <p className=\"text-sm text-red-400\">{error}</p>\n          </div>\n        )}\n\n        {/* Current Stress Level */}\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-white/90\">Current Stress Level</span>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-white/70\">\n                {currentStress?.score || '--'}/100\n              </span>\n              {getTrendIcon(currentStress?.trend)}\n            </div>\n          </div>\n          \n          <div className=\"w-full bg-white/[0.05] rounded-full h-3\">\n            <div \n              className={cn(\n                \"h-3 rounded-full transition-all duration-300\",\n                stressIndicator.color === 'red' ? 'bg-red-400' :\n                stressIndicator.color === 'orange' ? 'bg-orange-400' :\n                stressIndicator.color === 'yellow' ? 'bg-yellow-400' :\n                stressIndicator.color === 'green' ? 'bg-green-400' : 'bg-white/20'\n              )}\n              style={{ width: `${currentStress?.score || 0}%` }}\n            />\n          </div>\n          \n          <div className=\"flex justify-between text-xs text-white/60\">\n            <span>Low</span>\n            <span className={cn(\n              \"font-medium\",\n              stressIndicator.color === 'red' ? 'text-red-400' :\n              stressIndicator.color === 'orange' ? 'text-orange-400' :\n              stressIndicator.color === 'yellow' ? 'text-yellow-400' :\n              stressIndicator.color === 'green' ? 'text-green-400' : 'text-white/40'\n            )}>\n              {stressIndicator.label}\n            </span>\n            <span>High</span>\n          </div>\n        </div>\n\n        {/* Biometric Data */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"bg-white/[0.03] rounded-xl p-3 border border-white/[0.05]\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              <Heart className=\"w-4 h-4 text-red-400\" />\n              <span className=\"text-xs text-white/70\">Heart Rate</span>\n            </div>\n            <p className=\"text-sm font-medium text-white/90\">\n              {Math.round(mockBiometricData.heartRate || 0)} bpm\n            </p>\n          </div>\n          \n          <div className=\"bg-white/[0.03] rounded-xl p-3 border border-white/[0.05]\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              <Activity className=\"w-4 h-4 text-blue-400\" />\n              <span className=\"text-xs text-white/70\">HRV</span>\n            </div>\n            <p className=\"text-sm font-medium text-white/90\">\n              {Math.round(mockBiometricData.heartRateVariability || 0)} ms\n            </p>\n          </div>\n          \n          <div className=\"bg-white/[0.03] rounded-xl p-3 border border-white/[0.05]\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              <Thermometer className=\"w-4 h-4 text-orange-400\" />\n              <span className=\"text-xs text-white/70\">Skin Temp</span>\n            </div>\n            <p className=\"text-sm font-medium text-white/90\">\n              {mockBiometricData.skinTemperature?.toFixed(1) || '--'}°F\n            </p>\n          </div>\n          \n          <div className=\"bg-white/[0.03] rounded-xl p-3 border border-white/[0.05]\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              <Wind className=\"w-4 h-4 text-cyan-400\" />\n              <span className=\"text-xs text-white/70\">Breathing</span>\n            </div>\n            <p className=\"text-sm font-medium text-white/90\">\n              {Math.round(mockBiometricData.respiratoryRate || 0)}/min\n            </p>\n          </div>\n        </div>\n\n        {/* Connected Devices */}\n        <div className=\"space-y-3\">\n          <span className=\"text-sm font-medium text-white/90\">Connected Devices</span>\n          <div className=\"flex flex-wrap gap-2\">\n            {connectedDevices.length > 0 ? (\n              connectedDevices.map((device) => (\n                <Badge key={device} variant=\"outline\" className=\"text-xs bg-green-500/20 border-green-500/30 text-green-400\">\n                  <Watch className=\"w-3 h-3 mr-1\" />\n                  {device}\n                </Badge>\n              ))\n            ) : (\n              <Badge variant=\"outline\" className=\"text-xs bg-yellow-500/20 border-yellow-500/30 text-yellow-400\">\n                No devices connected\n              </Badge>\n            )}\n          </div>\n        </div>\n\n        {/* Manual Refresh */}\n        <Button\n          onClick={triggerManualStressCheck}\n          disabled={loading}\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"w-full bg-white/[0.05] border-white/[0.08] text-white/80 hover:bg-white/[0.08] hover:text-white transition-all\"\n        >\n          {loading ? 'Checking...' : 'Refresh Stress Level'}\n        </Button>\n\n        {/* Metadata */}\n        {currentStress && (\n          <div className=\"pt-3 border-t border-white/[0.08]\">\n            <div className=\"flex justify-between text-xs text-white/60\">\n              <span>Confidence: {Math.round((currentStress.confidence || 0) * 100)}%</span>\n              <span>Updated: {new Date(currentStress.timestamp).toLocaleTimeString()}</span>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/biometric-intervention/components/BiometricMonitorCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/biometric-intervention/components/BiometricMonitorCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\nimport { useBiometricStore } from \"../store\";\nimport { UniversalCard } from \"@/shared/ui/UniversalCard\";\nimport { Activity } from \"lucide-react\";\n\nexport const BiometricMonitorCard: React.FC = () => {\n  const { reading, loading, refresh } = useBiometricStore((s) => ({\n    reading: s.reading,\n    loading: s.loading,\n    refresh: s.refresh,\n  }));\n\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n\n  const wellnessScore = reading?.stressLevel ? 100 - reading.stressLevel : undefined;\n\n  return (\n    <UniversalCard\n      variant=\"wellness\"\n      size=\"md\"\n      title=\"Biometric Monitor\"\n      icon={Activity}\n      iconColor=\"#06b6d4\"\n      score={wellnessScore}\n      orientation=\"vertical\"\n      data={{\n        metrics: reading ? [\n          {\n            label: \"Heart Rate\",\n            value: `${reading.heartRate} BPM`,\n            icon: Activity,\n            color: \"#ef4444\"\n          },\n          {\n            label: \"Stress Level\",\n            value: `${reading.stressLevel}%`,\n            icon: Activity,\n            color: reading.stressLevel > 70 ? \"#ef4444\" : reading.stressLevel > 40 ? \"#f59e0b\" : \"#10b981\"\n          },\n          {\n            label: \"Risk Level\",\n            value: reading.spendingRisk.charAt(0).toUpperCase() + reading.spendingRisk.slice(1),\n            icon: Activity,\n            color: reading.spendingRisk === \"high\" ? \"#ef4444\" : reading.spendingRisk === \"medium\" ? \"#f59e0b\" : \"#10b981\"\n          }\n        ] : undefined\n      }}\n    >\n      {!reading && (\n        <div className=\"text-center\">\n          <p className=\"text-white/60 text-sm\">\n            {loading ? \"Reading biometrics...\" : \"No device connected\"}\n          </p>\n        </div>\n      )}\n    </UniversalCard>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/biometric-intervention/components/InterventionNudge.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/biometric-intervention/components/InterventionNudge.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { AlertTriangle, Heart, Clock, Shield, X } from 'lucide-react';\nimport { Button } from '@/shared/ui/button';\nimport { Card, CardContent } from '@/shared/ui/card';\nimport { cn } from '@/shared/lib/utils';\nimport { InterventionEvent } from '../types';\n\ninterface InterventionNudgeProps {\n  event: InterventionEvent;\n  onDismiss: () => void;\n  onProceedAnyway: () => void;\n  onTakeBreathing: () => void;\n  className?: string;\n}\n\nexport const InterventionNudge: React.FC<InterventionNudgeProps> = ({\n  event,\n  onDismiss,\n  onProceedAnyway,\n  onTakeBreathing,\n  className\n}) => {\n  const [countdown, setCountdown] = useState(event.policy.actions.delayPurchase);\n  const [showBreathingOption, setShowBreathingOption] = useState(false);\n\n  useEffect(() => {\n    if (countdown > 0) {\n      const timer = setTimeout(() => setCountdown(countdown - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [countdown]);\n\n  useEffect(() => {\n    // Show breathing option after 3 seconds\n    const timer = setTimeout(() => setShowBreathingOption(true), 3000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const getStressColor = (score: number) => {\n    if (score >= 80) return 'text-red-400 border-red-500/30 bg-red-500/10';\n    if (score >= 60) return 'text-orange-400 border-orange-500/30 bg-orange-500/10';\n    return 'text-yellow-400 border-yellow-500/30 bg-yellow-500/10';\n  };\n\n  const getStressIcon = (score: number) => {\n    if (score >= 80) return <AlertTriangle className=\"w-5 h-5\" />;\n    if (score >= 60) return <Heart className=\"w-5 h-5\" />;\n    return <Shield className=\"w-5 h-5\" />;\n  };\n\n  const getStressMessage = (score: number) => {\n    if (score >= 80) return \"High stress detected! Consider taking a moment to breathe before this purchase.\";\n    if (score >= 60) return \"Elevated stress noticed. This might be a good time to pause and reflect.\";\n    return \"Mild stress detected. Would you like to take a moment before proceeding?\";\n  };\n\n  return (\n    <Card className={cn(\n      'fixed bottom-4 right-4 w-80 z-50 shadow-2xl border',\n      getStressColor(event.stressLevel.score),\n      className\n    )}>\n      <CardContent className=\"p-4\">\n        {/* Header */}\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            {getStressIcon(event.stressLevel.score)}\n            <h3 className=\"font-semibold text-sm\">Spending Nudge</h3>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-6 w-6 p-0 opacity-70 hover:opacity-100\"\n            onClick={onDismiss}\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        {/* Stress Level Indicator */}\n        <div className=\"mb-3\">\n          <div className=\"flex justify-between text-xs mb-1\">\n            <span>Stress Level</span>\n            <span>{event.stressLevel.score}/100</span>\n          </div>\n          <div className=\"w-full bg-white/10 rounded-full h-2\">\n            <div \n              className={cn(\n                \"h-2 rounded-full transition-all duration-300\",\n                event.stressLevel.score >= 80 ? \"bg-red-400\" :\n                event.stressLevel.score >= 60 ? \"bg-orange-400\" : \"bg-yellow-400\"\n              )}\n              style={{ width: `${event.stressLevel.score}%` }}\n            />\n          </div>\n        </div>\n\n        {/* Message */}\n        <p className=\"text-sm text-white/90 mb-4\">\n          {getStressMessage(event.stressLevel.score)}\n        </p>\n\n        {/* Countdown Timer */}\n        {countdown > 0 && (\n          <div className=\"flex items-center justify-center mb-4 p-2 bg-white/10 rounded-lg\">\n            <Clock className=\"w-4 h-4 mr-2\" />\n            <span className=\"text-sm font-medium\">\n              Cooling off: {countdown}s\n            </span>\n          </div>\n        )}\n\n        {/* Actions */}\n        <div className=\"space-y-2\">\n          {showBreathingOption && event.policy.actions.breathingExercise && (\n            <Button\n              onClick={onTakeBreathing}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"w-full bg-blue-500/20 border-blue-500/30 text-blue-300 hover:bg-blue-500/30\"\n            >\n              <Heart className=\"w-4 h-4 mr-2\" />\n              Take a 30-second breathing break\n            </Button>\n          )}\n          \n          <div className=\"flex space-x-2\">\n            <Button\n              onClick={onDismiss}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"flex-1 bg-white/10 border-white/20 text-white/80 hover:bg-white/20\"\n            >\n              Cancel Purchase\n            </Button>\n            \n            <Button\n              onClick={onProceedAnyway}\n              disabled={countdown > 0}\n              size=\"sm\"\n              className={cn(\n                \"flex-1\",\n                countdown > 0 \n                  ? \"opacity-50 cursor-not-allowed\" \n                  : \"bg-white/20 border-white/30 text-white hover:bg-white/30\"\n              )}\n            >\n              {countdown > 0 ? `Wait ${countdown}s` : 'Proceed Anyway'}\n            </Button>\n          </div>\n        </div>\n\n        {/* Policy Info */}\n        <div className=\"mt-3 pt-3 border-t border-white/10\">\n          <p className=\"text-xs text-white/60\">\n            Policy: {event.policy.name} • Confidence: {Math.round(event.stressLevel.confidence * 100)}%\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/biometric-intervention/components/InterventionSettings.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/biometric-intervention/components/InterventionSettings.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Settings, Plus, Edit2, Trash2, Power, Shield, Clock, DollarSign } from 'lucide-react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/shared/ui/card';\nimport { Button } from '@/shared/ui/button';\nimport { Badge } from '@/shared/ui/badge';\nimport { Switch } from '@/shared/ui/switch';\nimport { Input } from '@/shared/ui/input';\nimport { Label } from '@/shared/ui/label';\nimport { Slider } from '@/shared/ui/slider';\nimport { cn } from '@/shared/lib/utils';\nimport { useBiometricInterventionStore } from '../store';\nimport { InterventionPolicy } from '../types';\n\ninterface InterventionSettingsProps {\n  className?: string;\n}\n\ninterface PolicyFormData {\n  name: string;\n  stressThreshold: number;\n  spendingAmount: number;\n  consecutiveHighStress: number;\n  cardFreeze: boolean;\n  nudgeMessage: boolean;\n  breathingExercise: boolean;\n  delayPurchase: number;\n  safeToSpendReduction: number;\n}\n\nconst defaultPolicyForm: PolicyFormData = {\n  name: 'High Stress Spending Block',\n  stressThreshold: 75,\n  spendingAmount: 50,\n  consecutiveHighStress: 2,\n  cardFreeze: false,\n  nudgeMessage: true,\n  breathingExercise: true,\n  delayPurchase: 30,\n  safeToSpendReduction: 50,\n};\n\nexport const InterventionSettings: React.FC<InterventionSettingsProps> = ({\n  className\n}) => {\n  const {\n    activePolicies,\n    preferences,\n    isActive,\n    loading,\n    addPolicy,\n    updatePolicy,\n    deletePolicy,\n    updatePreferences,\n    initialize\n  } = useBiometricInterventionStore();\n\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [editingPolicy, setEditingPolicy] = useState<string | null>(null);\n  const [formData, setFormData] = useState<PolicyFormData>(defaultPolicyForm);\n\n  const handleToggleActive = async () => {\n    if (!isActive) {\n      await initialize();\n    }\n  };\n\n  const handleSavePolicy = async () => {\n    const policyData = {\n      name: formData.name,\n      enabled: true,\n      triggers: {\n        stressThreshold: formData.stressThreshold,\n        spendingAmount: formData.spendingAmount,\n        consecutiveHighStress: formData.consecutiveHighStress,\n      },\n      actions: {\n        cardFreeze: formData.cardFreeze,\n        nudgeMessage: formData.nudgeMessage,\n        breathingExercise: formData.breathingExercise,\n        delayPurchase: formData.delayPurchase,\n        safeToSpendReduction: formData.safeToSpendReduction,\n      },\n      schedule: {\n        enabled: false,\n        startTime: '09:00',\n        endTime: '22:00',\n        daysOfWeek: [1, 2, 3, 4, 5], // Monday-Friday\n      },\n    };\n\n    if (editingPolicy) {\n      await updatePolicy(editingPolicy, policyData);\n      setEditingPolicy(null);\n    } else {\n      await addPolicy(policyData);\n      setShowAddForm(false);\n    }\n    \n    setFormData(defaultPolicyForm);\n  };\n\n  const handleEditPolicy = (policy: InterventionPolicy) => {\n    setFormData({\n      name: policy.name,\n      stressThreshold: policy.triggers.stressThreshold,\n      spendingAmount: policy.triggers.spendingAmount,\n      consecutiveHighStress: policy.triggers.consecutiveHighStress,\n      cardFreeze: policy.actions.cardFreeze,\n      nudgeMessage: policy.actions.nudgeMessage,\n      breathingExercise: policy.actions.breathingExercise,\n      delayPurchase: policy.actions.delayPurchase,\n      safeToSpendReduction: policy.actions.safeToSpendReduction,\n    });\n    setEditingPolicy(policy.id);\n    setShowAddForm(true);\n  };\n\n  const handleDeletePolicy = async (policyId: string) => {\n    if (confirm('Are you sure you want to delete this policy?')) {\n      await deletePolicy(policyId);\n    }\n  };\n\n  const handleWearableToggle = async (device: keyof typeof preferences.wearableIntegrations) => {\n    await updatePreferences({\n      wearableIntegrations: {\n        ...preferences.wearableIntegrations,\n        [device]: !preferences.wearableIntegrations[device],\n      },\n    });\n  };\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Main Toggle */}\n      <Card className=\"bg-white/[0.02] border-white/[0.08]\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Settings className=\"w-5 h-5 text-blue-400\" />\n              <span>Biometric Interventions</span>\n            </div>\n            <Switch\n              checked={isActive}\n              onCheckedChange={handleToggleActive}\n              className=\"data-[state=checked]:bg-blue-600\"\n            />\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-white/70\">\n            {isActive \n              ? 'Smart interventions are active and monitoring your stress levels.'\n              : 'Enable biometric interventions to help prevent stress-induced spending.'\n            }\n          </p>\n        </CardContent>\n      </Card>\n\n      {isActive && (\n        <>\n          {/* Active Policies */}\n          <Card className=\"bg-white/[0.02] border-white/[0.08]\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Intervention Policies</span>\n                <Button\n                  onClick={() => setShowAddForm(true)}\n                  size=\"sm\"\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Policy\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {activePolicies.length === 0 ? (\n                <p className=\"text-sm text-white/60 text-center py-4\">\n                  No intervention policies configured. Add your first policy to get started.\n                </p>\n              ) : (\n                activePolicies.map((policy) => (\n                  <div\n                    key={policy.id}\n                    className=\"p-4 bg-white/[0.02] border border-white/[0.08] rounded-lg\"\n                  >\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div>\n                        <h4 className=\"font-medium text-white/90\">{policy.name}</h4>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <Badge variant={policy.enabled ? \"default\" : \"secondary\"} className=\"text-xs\">\n                            {policy.enabled ? 'Active' : 'Disabled'}\n                          </Badge>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          onClick={() => handleEditPolicy(policy)}\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"h-8 w-8 p-0\"\n                        >\n                          <Edit2 className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          onClick={() => handleDeletePolicy(policy.id)}\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"h-8 w-8 p-0 text-red-400 hover:text-red-300\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Shield className=\"w-4 h-4 text-orange-400\" />\n                        <span className=\"text-white/70\">Stress Threshold:</span>\n                        <span className=\"text-white/90\">{policy.triggers.stressThreshold}/100</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <DollarSign className=\"w-4 h-4 text-green-400\" />\n                        <span className=\"text-white/70\">Spending Limit:</span>\n                        <span className=\"text-white/90\">${policy.triggers.spendingAmount}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Clock className=\"w-4 h-4 text-blue-400\" />\n                        <span className=\"text-white/70\">Delay:</span>\n                        <span className=\"text-white/90\">{policy.actions.delayPurchase}s</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Power className=\"w-4 h-4 text-purple-400\" />\n                        <span className=\"text-white/70\">Actions:</span>\n                        <span className=\"text-white/90\">\n                          {[\n                            policy.actions.nudgeMessage && 'Nudge',\n                            policy.actions.breathingExercise && 'Breathing',\n                            policy.actions.cardFreeze && 'Freeze'\n                          ].filter(Boolean).join(', ') || 'None'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Add/Edit Policy Form */}\n          {showAddForm && (\n            <Card className=\"bg-white/[0.02] border-white/[0.08]\">\n              <CardHeader>\n                <CardTitle>\n                  {editingPolicy ? 'Edit Policy' : 'Add New Policy'}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"policy-name\">Policy Name</Label>\n                  <Input\n                    id=\"policy-name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    placeholder=\"Enter policy name\"\n                    className=\"bg-white/[0.02] border-white/[0.08]\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Stress Threshold: {formData.stressThreshold}/100</Label>\n                    <Slider\n                      value={[formData.stressThreshold]}\n                      onValueChange={([value]) => setFormData({ ...formData, stressThreshold: value })}\n                      max={100}\n                      step={5}\n                      className=\"mt-2\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"spending-amount\">Spending Trigger ($)</Label>\n                    <Input\n                      id=\"spending-amount\"\n                      type=\"number\"\n                      value={formData.spendingAmount}\n                      onChange={(e) => setFormData({ ...formData, spendingAmount: Number(e.target.value) })}\n                      className=\"bg-white/[0.02] border-white/[0.08]\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Delay Purchase: {formData.delayPurchase}s</Label>\n                    <Slider\n                      value={[formData.delayPurchase]}\n                      onValueChange={([value]) => setFormData({ ...formData, delayPurchase: value })}\n                      max={300}\n                      step={10}\n                      className=\"mt-2\"\n                    />\n                  </div>\n                  <div>\n                    <Label>Safe-to-Spend Reduction: {formData.safeToSpendReduction}%</Label>\n                    <Slider\n                      value={[formData.safeToSpendReduction]}\n                      onValueChange={([value]) => setFormData({ ...formData, safeToSpendReduction: value })}\n                      max={100}\n                      step={5}\n                      className=\"mt-2\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label>Actions</Label>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Show nudge message</span>\n                      <Switch\n                        checked={formData.nudgeMessage}\n                        onCheckedChange={(checked) => setFormData({ ...formData, nudgeMessage: checked })}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Offer breathing exercise</span>\n                      <Switch\n                        checked={formData.breathingExercise}\n                        onCheckedChange={(checked) => setFormData({ ...formData, breathingExercise: checked })}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Temporarily freeze card</span>\n                      <Switch\n                        checked={formData.cardFreeze}\n                        onCheckedChange={(checked) => setFormData({ ...formData, cardFreeze: checked })}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-3\">\n                  <Button\n                    onClick={() => {\n                      setShowAddForm(false);\n                      setEditingPolicy(null);\n                      setFormData(defaultPolicyForm);\n                    }}\n                    variant=\"outline\"\n                    className=\"flex-1\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={handleSavePolicy}\n                    disabled={loading}\n                    className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n                  >\n                    {loading ? 'Saving...' : editingPolicy ? 'Update Policy' : 'Add Policy'}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Wearable Integrations */}\n          <Card className=\"bg-white/[0.02] border-white/[0.08]\">\n            <CardHeader>\n              <CardTitle>Wearable Devices</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {Object.entries(preferences.wearableIntegrations).map(([device, enabled]) => (\n                <div key={device} className=\"flex items-center justify-between\">\n                  <span className=\"text-sm capitalize\">\n                    {device.replace(/([A-Z])/g, ' $1').trim()}\n                  </span>\n                  <Switch\n                    checked={enabled}\n                    onCheckedChange={() => handleWearableToggle(device as keyof typeof preferences.wearableIntegrations)}\n                  />\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </>\n      )}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/biometric-intervention/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/biometric-intervention/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export { useBiometricInterventionStore } from \"./store\";\nexport { InterventionNudge } from \"./components/InterventionNudge\";\nexport { BiometricMonitor } from \"./components/BiometricMonitor\";\nexport { InterventionSettings } from \"./components/InterventionSettings\";\nexport * from \"./types\"; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/biometric-intervention/store.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/biometric-intervention/store.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from \"zustand\";\n// import { biometricInterventionService } from \"@/features/biometricInterventionService\";\nimport { \n  InterventionState, \n  InterventionPolicy, \n  StressLevel, \n  BiometricData, \n  InterventionEvent,\n  BiometricPreferences\n} from \"./types\";\nimport { biometricService } from \"@/features/biometric-intervention/api/biometricService\";\nimport { BiometricReading, InterventionAlert } from \"./types\";\n\n// Temporary mock service until real service is implemented\nconst mockBiometricInterventionService = {\n  processeBiometricData: async (data: BiometricData): Promise<StressLevel> => {\n    // Mock stress calculation\n    return {\n      score: Math.floor(Math.random() * 100),\n      confidence: 0.85,\n      baseline: 30,\n      trend: 'stable' as const,\n      timestamp: new Date().toISOString()\n    };\n  },\n  triggerIntervention: async (policy: InterventionPolicy, stress: StressLevel): Promise<InterventionEvent> => {\n    return {\n      id: Math.random().toString(36),\n      type: 'intervention_triggered',\n      stressLevel: stress,\n      policy,\n      action: 'nudge_displayed',\n      outcome: 'prevented_purchase',\n      timestamp: new Date().toISOString()\n    };\n  },\n  createPolicy: async (policy: Omit<InterventionPolicy, 'id'>): Promise<InterventionPolicy> => {\n    return { ...policy, id: Math.random().toString(36) };\n  },\n  updatePolicy: async (id: string, updates: Partial<InterventionPolicy>): Promise<InterventionPolicy> => {\n    return { id, ...updates } as InterventionPolicy;\n  },\n  deletePolicy: async (id: string): Promise<void> => {},\n  dismissIntervention: async (eventId: string): Promise<void> => {},\n  getCurrentStressLevel: async (): Promise<StressLevel> => {\n    return {\n      score: Math.floor(Math.random() * 100),\n      confidence: 0.85,\n      baseline: 30,\n      trend: 'stable',\n      timestamp: new Date().toISOString()\n    };\n  },\n  updatePreferences: async (preferences: BiometricPreferences): Promise<void> => {},\n  clearHistory: async (): Promise<void> => {},\n  exportData: async (): Promise<Blob> => new Blob([JSON.stringify({})], { type: 'application/json' }),\n  getPolicies: async (): Promise<InterventionPolicy[]> => [],\n  getPreferences: async (): Promise<BiometricPreferences | null> => null,\n  getRecentEvents: async (): Promise<InterventionEvent[]> => []\n};\n\ninterface BiometricInterventionStore extends InterventionState {\n  // Actions\n  updateBiometricData: (data: BiometricData) => Promise<void>;\n  checkStressIntervention: (spendingAmount: number) => Promise<boolean>;\n  addPolicy: (policy: Omit<InterventionPolicy, 'id'>) => Promise<void>;\n  updatePolicy: (id: string, policy: Partial<InterventionPolicy>) => Promise<void>;\n  deletePolicy: (id: string) => Promise<void>;\n  dismissIntervention: (eventId: string) => Promise<void>;\n  triggerManualStressCheck: () => Promise<void>;\n  updatePreferences: (preferences: Partial<BiometricPreferences>) => Promise<void>;\n  clearHistory: () => Promise<void>;\n  exportData: () => Promise<Blob>;\n  initialize: () => Promise<void>;\n}\n\nconst defaultPreferences = {\n  wearableIntegrations: {\n    appleWatch: true,\n    fitbit: false,\n    garmin: false,\n    oura: false,\n  },\n  dataRetention: {\n    rawBiometrics: 7,\n    stressScores: 30,\n    interventionEvents: 90,\n  },\n  privacy: {\n    shareWithFamily: false,\n    anonymousAnalytics: true,\n    exportData: true,\n  },\n};\n\nexport const useBiometricInterventionStore = create<BiometricInterventionStore>((set, get) => ({\n  // Initial state\n  isActive: false,\n  currentStress: undefined,\n  activePolicies: [],\n  recentEvents: [],\n  preferences: defaultPreferences,\n  loading: false,\n  error: undefined,\n\n  // Actions\n  updateBiometricData: async (data: BiometricData) => {\n    set({ loading: true, error: undefined });\n    try {\n      const stressLevel = await mockBiometricInterventionService.processeBiometricData(data);\n      set({ \n        currentStress: stressLevel, \n        loading: false \n      });\n      \n      // Check if stress level triggers any policies\n      const { activePolicies } = get();\n      for (const policy of activePolicies) {\n        if (policy.enabled && stressLevel.score >= policy.triggers.stressThreshold) {\n          await mockBiometricInterventionService.triggerIntervention(policy, stressLevel);\n        }\n      }\n    } catch (err: any) {\n      set({ error: err.message, loading: false });\n    }\n  },\n\n  checkStressIntervention: async (spendingAmount: number): Promise<boolean> => {\n    const { currentStress, activePolicies, isActive } = get();\n    \n    if (!isActive || !currentStress) return false;\n\n    // Check each active policy\n    for (const policy of activePolicies) {\n      if (!policy.enabled) continue;\n\n      const shouldIntervene = \n        currentStress.score >= policy.triggers.stressThreshold &&\n        spendingAmount >= policy.triggers.spendingAmount;\n\n      if (shouldIntervene) {\n        try {\n          const event = await mockBiometricInterventionService.triggerIntervention(policy, currentStress);\n          \n          // Update recent events\n          const { recentEvents } = get();\n          set({ \n            recentEvents: [event, ...recentEvents].slice(0, 50) // Keep last 50 events\n          });\n\n          return true; // Intervention triggered\n        } catch (err: any) {\n          set({ error: err.message });\n          return false;\n        }\n      }\n    }\n\n    return false; // No intervention needed\n  },\n\n  addPolicy: async (policyData: Omit<InterventionPolicy, 'id'>) => {\n    set({ loading: true, error: undefined });\n    try {\n      const policy = await mockBiometricInterventionService.createPolicy(policyData);\n      const { activePolicies } = get();\n      set({ \n        activePolicies: [...activePolicies, policy],\n        loading: false \n      });\n    } catch (err: any) {\n      set({ error: err.message, loading: false });\n    }\n  },\n\n  updatePolicy: async (id: string, updates: Partial<InterventionPolicy>) => {\n    set({ loading: true, error: undefined });\n    try {\n      const updatedPolicy = await mockBiometricInterventionService.updatePolicy(id, updates);\n      const { activePolicies } = get();\n      set({ \n        activePolicies: activePolicies.map(p => p.id === id ? updatedPolicy : p),\n        loading: false \n      });\n    } catch (err: any) {\n      set({ error: err.message, loading: false });\n    }\n  },\n\n  deletePolicy: async (id: string) => {\n    set({ loading: true, error: undefined });\n    try {\n      await mockBiometricInterventionService.deletePolicy(id);\n      const { activePolicies } = get();\n      set({ \n        activePolicies: activePolicies.filter(p => p.id !== id),\n        loading: false \n      });\n    } catch (err: any) {\n      set({ error: err.message, loading: false });\n    }\n  },\n\n  dismissIntervention: async (eventId: string) => {\n    try {\n      await mockBiometricInterventionService.dismissIntervention(eventId);\n      const { recentEvents } = get();\n      set({ \n        recentEvents: recentEvents.map(e => \n          e.id === eventId \n            ? { ...e, outcome: 'dismissed' as const }\n            : e\n        )\n      });\n    } catch (err: any) {\n      set({ error: err.message });\n    }\n  },\n\n  triggerManualStressCheck: async () => {\n    set({ loading: true, error: undefined });\n    try {\n      const stressLevel = await mockBiometricInterventionService.getCurrentStressLevel();\n      set({ currentStress: stressLevel, loading: false });\n    } catch (err: any) {\n      set({ error: err.message, loading: false });\n    }\n  },\n\n  updatePreferences: async (updates: Partial<BiometricPreferences>) => {\n    set({ loading: true, error: undefined });\n    try {\n      const { preferences } = get();\n      const newPreferences = { ...preferences, ...updates };\n      await mockBiometricInterventionService.updatePreferences(newPreferences);\n      set({ preferences: newPreferences, loading: false });\n    } catch (err: any) {\n      set({ error: err.message, loading: false });\n    }\n  },\n\n  clearHistory: async () => {\n    set({ loading: true, error: undefined });\n    try {\n      await mockBiometricInterventionService.clearHistory();\n      set({ recentEvents: [], loading: false });\n    } catch (err: any) {\n      set({ error: err.message, loading: false });\n    }\n  },\n\n  exportData: async (): Promise<Blob> => {\n    return await mockBiometricInterventionService.exportData();\n  },\n\n  initialize: async () => {\n    set({ loading: true, error: undefined });\n    try {\n      const [policies, preferences, recentEvents] = await Promise.all([\n        mockBiometricInterventionService.getPolicies(),\n        mockBiometricInterventionService.getPreferences(),\n        mockBiometricInterventionService.getRecentEvents(),\n      ]);\n\n      set({ \n        activePolicies: policies,\n        preferences: preferences || defaultPreferences,\n        recentEvents,\n        isActive: true,\n        loading: false \n      });\n    } catch (err: any) {\n      set({ error: err.message, loading: false });\n    }\n  },\n}));\n\ninterface BiometricState {\n  reading?: BiometricReading;\n  alerts: InterventionAlert[];\n  loading: boolean;\n  error?: string;\n  refresh: () => Promise<void>;\n  dismissAlert: (id: string) => Promise<void>;\n}\n\nexport const useBiometricStore = create<BiometricState>((set, get) => ({\n  reading: undefined,\n  alerts: [],\n  loading: false,\n  error: undefined,\n  refresh: async () => {\n    set({ loading: true, error: undefined });\n    try {\n      const [reading, alerts] = await Promise.all([\n        biometricService.getCurrentReading(),\n        biometricService.getAlerts(),\n      ]);\n      set({ reading, alerts, loading: false });\n    } catch (err: any) {\n      set({ error: err.message ?? \"Unknown\", loading: false });\n    }\n  },\n  dismissAlert: async (id: string) => {\n    await biometricService.dismissAlert(id);\n    const updated = get().alerts.filter(a => a.id !== id);\n    set({ alerts: updated });\n  },\n})); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/biometric-intervention/types.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/biometric-intervention/types.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface BiometricData {\n  heartRate?: number;\n  heartRateVariability?: number;\n  galvanicSkinResponse?: number;\n  skinTemperature?: number;\n  respiratoryRate?: number;\n  timestamp: string;\n  deviceId: string;\n}\n\nexport interface StressLevel {\n  score: number; // 0-100, where 100 is maximum stress\n  confidence: number; // 0-1, model confidence\n  baseline: number; // Personal baseline stress level\n  trend: 'rising' | 'falling' | 'stable';\n  timestamp: string;\n}\n\nexport interface InterventionPolicy {\n  id: string;\n  name: string;\n  enabled: boolean;\n  triggers: {\n    stressThreshold: number; // Stress level that triggers intervention\n    spendingAmount: number; // Dollar amount that triggers if stressed\n    consecutiveHighStress: number; // Minutes of high stress before trigger\n  };\n  actions: {\n    cardFreeze: boolean;\n    nudgeMessage: boolean;\n    breathingExercise: boolean;\n    delayPurchase: number; // Seconds to delay purchase\n    safeToSpendReduction: number; // Percentage to reduce safe-to-spend\n  };\n  schedule: {\n    enabled: boolean;\n    startTime: string; // HH:MM\n    endTime: string; // HH:MM\n    daysOfWeek: number[]; // 0-6, Sunday-Saturday\n  };\n}\n\nexport interface InterventionEvent {\n  id: string;\n  type: 'stress_detected' | 'intervention_triggered' | 'user_action';\n  stressLevel: StressLevel;\n  policy: InterventionPolicy;\n  action: string;\n  outcome: 'prevented_purchase' | 'delayed_purchase' | 'proceeded_anyway' | 'dismissed';\n  timestamp: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface BiometricPreferences {\n  wearableIntegrations: {\n    appleWatch: boolean;\n    fitbit: boolean;\n    garmin: boolean;\n    oura: boolean;\n  };\n  dataRetention: {\n    rawBiometrics: number; // Days to keep raw data\n    stressScores: number; // Days to keep processed stress data\n    interventionEvents: number; // Days to keep intervention history\n  };\n  privacy: {\n    shareWithFamily: boolean;\n    anonymousAnalytics: boolean;\n    exportData: boolean;\n  };\n}\n\nexport interface InterventionState {\n  isActive: boolean;\n  currentStress?: StressLevel;\n  activePolicies: InterventionPolicy[];\n  recentEvents: InterventionEvent[];\n  preferences: BiometricPreferences;\n  loading: boolean;\n  error?: string;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/budget/api/budgetService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/budget/api/budgetService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  Budget, \n  BudgetCategory, \n  BudgetTemplate, \n  BudgetRecommendation, \n  BudgetAnalytics,\n  BudgetPerformance,\n  BudgetType,\n  BudgetPeriod,\n  BudgetStatus,\n  SavingsGoal,\n  GoalAnalytics,\n  GoalRecommendation\n} from '@/types/budgets';\nimport { TransactionCategory } from '@/types/transactions';\nimport { transactionService } from './transactionService';\nimport { secureStorage } from '@/shared/utils/crypto';\n\n/**\n * Advanced Budgeting & Goal Management Service\n * Handles budget creation, tracking, analytics, and goal management\n */\nclass BudgetService {\n  private static instance: BudgetService;\n  private storageKey = 'vueni:budgets:v2';\n  private budgets: Map<string, Budget> = new Map();\n  private templates: Map<string, BudgetTemplate> = new Map();\n  private goals: Map<string, SavingsGoal> = new Map();\n  private recommendations: Map<string, BudgetRecommendation[]> = new Map();\n\n  // Legacy support\n  private legacyCategories: Array<{ id: string; name: string; type: string }> = [];\n\n  // Default budget category allocations (based on 50/30/20 rule and expert recommendations)\n  private defaultCategoryAllocations: Record<TransactionCategory, {\n    percentage: number;\n    isEssential: boolean;\n    isFixed: boolean;\n    priority: number;\n  }> = {\n    housing: { percentage: 30, isEssential: true, isFixed: true, priority: 1 },\n    transportation: { percentage: 15, isEssential: true, isFixed: false, priority: 2 },\n    food: { percentage: 12, isEssential: true, isFixed: false, priority: 3 },\n    utilities: { percentage: 8, isEssential: true, isFixed: false, priority: 4 },\n    insurance: { percentage: 5, isEssential: true, isFixed: true, priority: 5 },\n    healthcare: { percentage: 5, isEssential: true, isFixed: false, priority: 6 },\n    debt_payments: { percentage: 10, isEssential: true, isFixed: true, priority: 1 },\n    savings: { percentage: 20, isEssential: true, isFixed: false, priority: 2 },\n    entertainment: { percentage: 5, isEssential: false, isFixed: false, priority: 8 },\n    personal_care: { percentage: 3, isEssential: false, isFixed: false, priority: 9 },\n    shopping: { percentage: 5, isEssential: false, isFixed: false, priority: 10 },\n    education: { percentage: 2, isEssential: false, isFixed: false, priority: 7 },\n    gifts_donations: { percentage: 2, isEssential: false, isFixed: false, priority: 11 },\n    business: { percentage: 0, isEssential: false, isFixed: false, priority: 12 },\n    taxes: { percentage: 0, isEssential: true, isFixed: true, priority: 1 },\n    investments: { percentage: 0, isEssential: false, isFixed: false, priority: 3 },\n    fees: { percentage: 1, isEssential: false, isFixed: false, priority: 13 },\n    transfers: { percentage: 0, isEssential: false, isFixed: false, priority: 14 },\n    other: { percentage: 2, isEssential: false, isFixed: false, priority: 15 },\n    income: { percentage: 0, isEssential: false, isFixed: false, priority: 16 }\n  };\n\n  private constructor() {\n    this.loadFromStorage();\n    this.seedDemoData();\n  }\n\n  public static getInstance() {\n    if (!BudgetService.instance) {\n      BudgetService.instance = new BudgetService();\n    }\n    return BudgetService.instance;\n  }\n\n  private loadFromStorage() {\n    if (typeof window === 'undefined') return;\n    try {\n      const data = secureStorage.getItem(this.storageKey);\n      if (data) {\n        // Load new budget data\n        const budgetData = data as any;\n        if (budgetData.budgets) {\n          budgetData.budgets.forEach((budget: any) => {\n            // Convert date strings back to Date objects\n            budget.startDate = new Date(budget.startDate);\n            budget.endDate = new Date(budget.endDate);\n            budget.createdAt = new Date(budget.createdAt);\n            budget.updatedAt = new Date(budget.updatedAt);\n            \n            this.budgets.set(budget.id, budget);\n          });\n        }\n        if (budgetData.goals) {\n          budgetData.goals.forEach((goal: any) => {\n            // Convert date strings back to Date objects\n            goal.targetDate = new Date(goal.targetDate);\n            goal.createdAt = new Date(goal.createdAt);\n            goal.updatedAt = new Date(goal.updatedAt);\n            \n            // Convert milestone dates\n            if (goal.milestones) {\n              goal.milestones.forEach((milestone: any) => {\n                milestone.targetDate = new Date(milestone.targetDate);\n                if (milestone.completedDate) {\n                  milestone.completedDate = new Date(milestone.completedDate);\n                }\n              });\n            }\n            \n            this.goals.set(goal.id, goal);\n          });\n        }\n      } else {\n        // Check for legacy data\n        const legacyData = secureStorage.getItem('vueni:budgets:v1');\n        if (legacyData) {\n          this.legacyCategories = legacyData as any[];\n        }\n      }\n    } catch (e) {\n      console.error('Failed to parse budget data from localStorage', e);\n    }\n  }\n\n  private async seedDemoData() {\n    // Create demo budget if none exists\n    if (this.budgets.size === 0) {\n      const demoBudget = await this.createBudget({\n        familyId: 'demo_family',\n        name: 'Monthly Budget - December 2024',\n        description: 'Comprehensive family budget with smart categorization',\n        budgetType: 'percentage',\n        period: 'monthly',\n        startDate: new Date(2024, 11, 1), // December 1, 2024\n        endDate: new Date(2024, 11, 31), // December 31, 2024\n        totalBudgeted: 6000,\n        currency: 'USD',\n        settings: {\n          autoCreateCategories: true,\n          rolloverUnspent: true,\n          allowOverages: true,\n          overageSource: 'other_categories',\n          alertThresholds: { warning: 80, critical: 100 },\n          includeTransfers: false,\n          includePendingTransactions: true,\n          excludeRefunds: true,\n          automaticAdjustments: false,\n          syncWithGoals: true\n        },\n        status: 'active',\n        isTemplate: false\n      });\n\n      // Create demo goals\n      await this.createSavingsGoal({\n        familyId: 'demo_family',\n        name: 'Emergency Fund',\n        description: '6 months of expenses for financial security',\n        goalType: 'emergency_fund',\n        targetAmount: 18000,\n        monthlyContribution: 500,\n        targetDate: new Date(2025, 11, 31),\n        priority: 1,\n        linkedAccountIds: [],\n        autoContribute: true,\n        contributionRules: [{\n          id: 'rule_1',\n          type: 'fixed_amount',\n          amount: 500,\n          frequency: 'monthly',\n          isActive: true\n        }],\n        milestones: [\n          {\n            id: 'milestone_1',\n            name: '25% Complete',\n            targetAmount: 4500,\n            targetDate: new Date(2025, 2, 31),\n            isCompleted: false,\n            description: 'First milestone - $4,500 saved'\n          },\n          {\n            id: 'milestone_2',\n            name: '50% Complete',\n            targetAmount: 9000,\n            targetDate: new Date(2025, 5, 30),\n            isCompleted: false,\n            description: 'Halfway point - $9,000 saved'\n          }\n        ],\n        tags: ['emergency', 'security', 'priority'],\n        isArchived: false\n      });\n\n      await this.createSavingsGoal({\n        familyId: 'demo_family',\n        name: 'Vacation Fund',\n        description: 'Summer vacation to Europe',\n        goalType: 'vacation',\n        targetAmount: 8000,\n        monthlyContribution: 300,\n        targetDate: new Date(2025, 5, 1),\n        priority: 2,\n        linkedAccountIds: [],\n        autoContribute: false,\n        contributionRules: [],\n        milestones: [],\n        tags: ['vacation', 'travel', 'family'],\n        isArchived: false\n      });\n    }\n  }\n\n  private persist() {\n    if (typeof window === 'undefined') return;\n    const data = {\n      budgets: Array.from(this.budgets.values()),\n      goals: Array.from(this.goals.values()),\n      templates: Array.from(this.templates.values())\n    };\n    secureStorage.setItem(this.storageKey, data);\n  }\n\n  /**\n   * Create a new budget\n   */\n  async createBudget(data: Omit<Budget, 'id' | 'createdAt' | 'updatedAt' | 'totalSpent' | 'totalRemaining' | 'categories'>): Promise<Budget> {\n    const budget: Budget = {\n      id: this.generateBudgetId(),\n      ...data,\n      totalSpent: 0,\n      totalRemaining: data.totalBudgeted,\n      categories: [],\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    // Create default categories based on budget type\n    budget.categories = await this.createDefaultCategories(budget);\n\n    this.budgets.set(budget.id, budget);\n    this.persist();\n    return budget;\n  }\n\n  /**\n   * Create savings goal\n   */\n  async createSavingsGoal(data: Omit<SavingsGoal, 'id' | 'createdAt' | 'updatedAt' | 'currentAmount' | 'status'>): Promise<SavingsGoal> {\n    const goal: SavingsGoal = {\n      id: this.generateGoalId(),\n      ...data,\n      currentAmount: 0,\n      status: 'not_started',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.goals.set(goal.id, goal);\n    this.persist();\n    return goal;\n  }\n\n  /**\n   * Get family's budgets\n   */\n  async getFamilyBudgets(familyId: string): Promise<Budget[]> {\n    return Array.from(this.budgets.values())\n      .filter(budget => budget.familyId === familyId)\n      .sort((a, b) => b.startDate.getTime() - a.startDate.getTime());\n  }\n\n  /**\n   * Get active budget for family\n   */\n  async getActiveBudget(familyId: string): Promise<Budget | null> {\n    const budgets = await this.getFamilyBudgets(familyId);\n    return budgets.find(budget => budget.status === 'active') || null;\n  }\n\n  /**\n   * Get family's savings goals\n   */\n  async getFamilySavingsGoals(familyId: string): Promise<SavingsGoal[]> {\n    return Array.from(this.goals.values())\n      .filter(goal => goal.familyId === familyId && !goal.isArchived)\n      .sort((a, b) => a.priority - b.priority);\n  }\n\n  /**\n   * Legacy support - list categories for compatibility\n   */\n  async listCategories(): Promise<any[]> {\n    // Try to get from active budget first\n    const activeBudget = await this.getActiveBudget('demo_family');\n    if (activeBudget) {\n      return activeBudget.categories.map(cat => ({\n        id: cat.id,\n        name: cat.categoryName,\n        budget: cat.budgetedAmount,\n        spent: cat.spentAmount,\n        color: this.getCategoryColor(cat.categoryName),\n        recurring: true\n      }));\n    }\n\n    // Fallback to legacy categories\n    if (this.legacyCategories.length > 0) {\n      return this.legacyCategories;\n    }\n\n    // Default demo categories\n    return [\n      { id: '1', name: 'Groceries', budget: 600, spent: 450, color: '#4ade80', recurring: true },\n      { id: '2', name: 'Dining', budget: 300, spent: 220, color: '#38bdf8', recurring: true },\n      { id: '3', name: 'Transportation', budget: 200, spent: 145, color: '#f97316', recurring: true },\n      { id: '4', name: 'Entertainment', budget: 200, spent: 165, color: '#a855f7', recurring: true },\n      { id: '5', name: 'Savings & Investments', budget: 500, spent: 500, color: '#facc15', recurring: true }\n    ];\n  }\n\n  // Private helper methods\n  private async createDefaultCategories(budget: Budget): Promise<BudgetCategory[]> {\n    const categories: BudgetCategory[] = [];\n    const allocations = this.defaultCategoryAllocations;\n\n    for (const [categoryName, allocation] of Object.entries(allocations)) {\n      if (allocation.percentage > 0) {\n        const budgetedAmount = (budget.totalBudgeted * allocation.percentage) / 100;\n        \n        categories.push({\n          id: this.generateCategoryId(),\n          budgetId: budget.id,\n          categoryName: categoryName as TransactionCategory,\n          subcategories: [],\n          budgetedAmount,\n          spentAmount: 0,\n          remainingAmount: budgetedAmount,\n          overageAmount: 0,\n          rolloverAmount: 0,\n          priority: allocation.priority,\n          isFixed: allocation.isFixed,\n          isEssential: allocation.isEssential,\n          alerts: [],\n          historicalSpending: []\n        });\n      }\n    }\n\n    return categories.sort((a, b) => a.priority - b.priority);\n  }\n\n  private getCategoryColor(category: string): string {\n    const colors: Record<string, string> = {\n      housing: '#3b82f6',\n      transportation: '#f97316',\n      food: '#10b981',\n      utilities: '#8b5cf6',\n      insurance: '#06b6d4',\n      healthcare: '#ef4444',\n      debt_payments: '#dc2626',\n      savings: '#22c55e',\n      entertainment: '#a855f7',\n      personal_care: '#ec4899',\n      shopping: '#f59e0b',\n      education: '#6366f1',\n      gifts_donations: '#84cc16',\n      other: '#6b7280'\n    };\n    return colors[category] || '#6b7280';\n  }\n\n  private generateBudgetId(): string {\n    return `budget_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateCategoryId(): string {\n    return `category_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateGoalId(): string {\n    return `goal_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\nexport const budgetService = BudgetService.getInstance(); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/budget/components/BudgetPlannerPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/budget/components/BudgetPlannerPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { budgetService } from '@/features/budget/api/budgetService';\nimport { Budget, SavingsGoal } from '@/types/budgets';\nimport BudgetTracker from './BudgetTracker';\nimport {\n  Plus,\n  Trash2,\n  TrendingUp,\n  Target,\n  BarChart3,\n  ArrowLeft,\n  Settings,\n  AlertCircle\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { cn } from '@/shared/lib/utils';\n\nconst BudgetPlannerPage = () => {\n  const navigate = useNavigate();\n  const [budget, setBudget] = useState<Budget | null>(null);\n  const [goals, setGoals] = useState<SavingsGoal[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState<'budget' | 'goals' | 'analytics'>('budget');\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      const familyId = 'demo_family';\n      const [activeBudget, familyGoals] = await Promise.all([\n        budgetService.getActiveBudget(familyId),\n        budgetService.getFamilySavingsGoals(familyId)\n      ]);\n      \n      setBudget(activeBudget);\n      setGoals(familyGoals);\n    } catch (error) {\n      console.error('Failed to load budget data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (amt: number) =>\n    new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 0 }).format(amt);\n\n  if (loading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-white/[0.05] rounded w-64 mb-4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n                <div className=\"h-6 bg-white/[0.05] rounded w-32 mb-2\"></div>\n                <div className=\"h-8 bg-white/[0.05] rounded w-24\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 sm:p-6 space-y-6 sm:space-y-8\">\n      {/* Back Button */}\n      <button\n        onClick={() => navigate('/')}\n        className=\"flex items-center gap-2 px-3 py-2 rounded-xl text-white/80 hover:text-white hover:bg-white/[0.05] transition-colors\"\n      >\n        <ArrowLeft className=\"w-4 h-4\" />\n        <span className=\"text-sm\">Dashboard</span>\n      </button>\n\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-white flex items-center gap-3\">\n            <BarChart3 className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-400\" />\n            <span className=\"truncate\">Budget & Goals Manager</span>\n          </h1>\n          <p className=\"text-white/60 mt-2\">Track spending, manage budgets, and achieve your financial goals</p>\n        </div>\n        <div className=\"flex items-center gap-3 flex-wrap\">\n          <button className=\"bg-green-500 hover:bg-green-600 text-white px-3 sm:px-4 py-2 rounded-xl transition-colors flex items-center gap-2 text-sm sm:text-base whitespace-nowrap\">\n            <Target className=\"w-4 h-4\" />\n            New Goal\n          </button>\n          <button className=\"bg-blue-500 hover:bg-blue-600 text-white px-3 sm:px-4 py-2 rounded-xl transition-colors flex items-center gap-2 text-sm sm:text-base whitespace-nowrap\">\n            <Plus className=\"w-4 h-4\" />\n            New Budget\n          </button>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      {budget && (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6\">\n          <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <BarChart3 className=\"w-5 h-5 text-blue-400\" />\n              <p className=\"text-white/60 text-sm\">Monthly Budget</p>\n            </div>\n            <p className=\"text-2xl font-bold text-white\">{formatCurrency(budget.totalBudgeted)}</p>\n          </div>\n          \n          <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <TrendingUp className=\"w-5 h-5 text-red-400\" />\n              <p className=\"text-white/60 text-sm\">Total Spent</p>\n            </div>\n            <p className=\"text-2xl font-bold text-red-400\">{formatCurrency(budget.totalSpent)}</p>\n            <p className=\"text-sm text-white/60 mt-1\">\n              {((budget.totalSpent / budget.totalBudgeted) * 100).toFixed(1)}% of budget\n            </p>\n          </div>\n          \n          <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <Target className=\"w-5 h-5 text-green-400\" />\n              <p className=\"text-white/60 text-sm\">Remaining</p>\n            </div>\n            <p className=\"text-2xl font-bold text-green-400\">{formatCurrency(budget.totalRemaining)}</p>\n            <p className=\"text-sm text-white/60 mt-1\">\n              {((budget.totalRemaining / budget.totalBudgeted) * 100).toFixed(1)}% available\n            </p>\n          </div>\n          \n          <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <AlertCircle className=\"w-5 h-5 text-yellow-400\" />\n              <p className=\"text-white/60 text-sm\">Active Goals</p>\n            </div>\n            <p className=\"text-2xl font-bold text-white\">{goals.length}</p>\n            <p className=\"text-sm text-white/60 mt-1\">\n              {goals.filter(g => g.status === 'on_track' || g.status === 'ahead').length} on track\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Budget Status Alert */}\n      {budget && budget.totalSpent > budget.totalBudgeted && (\n        <div className=\"bg-red-500/10 border border-red-500/20 rounded-xl p-4 flex items-center gap-3\">\n          <AlertCircle className=\"w-6 h-6 text-red-400\" />\n          <div>\n            <p className=\"text-red-400 font-medium\">Budget Exceeded</p>\n            <p className=\"text-red-300 text-sm\">\n              You've spent {formatCurrency(budget.totalSpent - budget.totalBudgeted)} over your monthly budget. \n              Consider reviewing your spending categories.\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Budget Tracker Component */}\n      <BudgetTracker familyId=\"demo_family\" />\n    </div>\n  );\n};\n\nexport default BudgetPlannerPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/budget/components/BudgetReportsPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/budget/components/BudgetReportsPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport GlassCard from '@/components/GlassCard';\nimport { Calendar, Download, TrendingDown, TrendingUp, AlertCircle, ArrowLeft } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { mockReportService, BudgetReport } from '@/services/mockReportService';\n\nconst BudgetReportsPage = () => {\n  const navigate = useNavigate();\n  const [selectedMonth, setSelectedMonth] = useState('May');\n  const [selectedYear, setSelectedYear] = useState(2024);\n  \n  const report = mockReportService.getBudgetReport(selectedMonth, selectedYear);\n  \n  const months = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(amount);\n  };\n\n  const getVarianceColor = (spent: number, budget: number) => {\n    const variance = ((spent - budget) / budget) * 100;\n    if (variance > 10) return 'text-red-400';\n    if (variance < -10) return 'text-green-400';\n    return 'text-white';\n  };\n\n  const getProgressWidth = (spent: number, budget: number) => {\n    return Math.min((spent / budget) * 100, 100);\n  };\n\n  const getProgressColor = (spent: number, budget: number) => {\n    const percentage = (spent / budget) * 100;\n    if (percentage > 100) return 'red';\n    if (percentage > 80) return 'orange';\n    return 'green';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Back Button */}\n      <button\n        onClick={() => navigate('/')}\n        className=\"flex items-center gap-2 px-3 py-2 rounded-xl text-white/80 hover:text-white hover:bg-white/[0.05] transition-colors\"\n      >\n        <ArrowLeft className=\"w-4 h-4\" />\n        <span className=\"text-sm\">Dashboard</span>\n      </button>\n\n      {/* Header Controls */}\n      <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-white mb-2\">Budget Reports</h1>\n          <p className=\"text-white/70\">Track your spending against your budget goals</p>\n        </div>\n        \n        <div className=\"flex gap-2\">\n          <select\n            value={selectedMonth}\n            onChange={(e) => setSelectedMonth(e.target.value)}\n            className=\"bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-400\"\n          >\n            {months.map(month => (\n              <option key={month} value={month} className=\"bg-gray-800\">\n                {month}\n              </option>\n            ))}\n          </select>\n          \n          <select\n            value={selectedYear}\n            onChange={(e) => setSelectedYear(Number(e.target.value))}\n            className=\"bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-400\"\n          >\n            <option value={2024} className=\"bg-gray-800\">2024</option>\n            <option value={2023} className=\"bg-gray-800\">2023</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n        <GlassCard className=\"p-4 glass-primary\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-white/70 text-sm\">Total Spent</p>\n              <p className=\"text-xl font-bold text-white\">{formatCurrency(report.totalSpent)}</p>\n            </div>\n            <TrendingUp className=\"w-8 h-8 text-blue-400\" />\n          </div>\n        </GlassCard>\n\n        <GlassCard className=\"p-4 glass-primary\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-white/70 text-sm\">Budget</p>\n              <p className=\"text-xl font-bold text-white\">{formatCurrency(report.totalBudget)}</p>\n            </div>\n            <Calendar className=\"w-8 h-8 text-green-400\" />\n          </div>\n        </GlassCard>\n\n        <GlassCard className=\"p-4 glass-primary\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-white/70 text-sm\">Remaining</p>\n              <p className={`text-xl font-bold ${\n                report.totalBudget - report.totalSpent > 0 ? 'text-green-400' : 'text-red-400'\n              }`}>\n                {formatCurrency(report.totalBudget - report.totalSpent)}\n              </p>\n            </div>\n            <TrendingDown className=\"w-8 h-8 text-orange-400\" />\n          </div>\n        </GlassCard>\n      </div>\n\n      {/* Category Breakdown */}\n      <GlassCard className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-bold text-white\">Category Breakdown</h2>\n          <button className=\"flex items-center gap-2 text-blue-400 hover:text-blue-300 transition-colors\">\n            <Download className=\"w-4 h-4\" />\n            Export PDF\n          </button>\n        </div>\n\n        <div className=\"space-y-4\">\n          {report.categories.map((category) => (\n            <div key={category.name} className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <h3 className=\"font-medium text-white\">{category.name}</h3>\n                  <span className=\"text-white/50 text-sm\">\n                    {category.transactions} transactions\n                  </span>\n                </div>\n                <div className=\"text-right\">\n                  <p className={`font-bold ${getVarianceColor(category.spent, category.budget)}`}>\n                    {formatCurrency(category.spent)}\n                  </p>\n                  <p className=\"text-white/50 text-sm\">of {formatCurrency(category.budget)}</p>\n                </div>\n              </div>\n              \n              <div className=\"glass-progress h-2\">\n                <div \n                  className={`glass-progress-fill ${getProgressColor(category.spent, category.budget)} transition-all duration-700`}\n                  style={{ width: `${getProgressWidth(category.spent, category.budget)}%` }}\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </GlassCard>\n\n      {/* Insights */}\n      <GlassCard className=\"p-6\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <AlertCircle className=\"w-5 h-5 text-blue-400\" />\n          <h2 className=\"text-xl font-bold text-white\">Monthly Insights</h2>\n        </div>\n        \n        <div className=\"space-y-3\">\n          {report.insights.map((insight, index) => (\n            <div key={index} className=\"flex items-start gap-3 p-3 bg-white/5 rounded-lg\">\n              <div className=\"w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0\" />\n              <p className=\"text-white/90\">{insight}</p>\n            </div>\n          ))}\n        </div>\n      </GlassCard>\n    </div>\n  );\n};\n\nexport default BudgetReportsPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/budget/components/BudgetTracker.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/budget/components/BudgetTracker.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  PieChart,\n  BarChart3,\n  TrendingUp,\n  TrendingDown,\n  Target,\n  AlertCircle,\n  Plus,\n  Settings,\n  Calendar,\n  DollarSign,\n  CheckCircle,\n  Clock,\n  ArrowRight\n} from 'lucide-react';\nimport { budgetService } from '@/features/budget/api/budgetService';\nimport { Budget, BudgetCategory, SavingsGoal } from '@/types/budgets';\nimport { cn } from '@/shared/lib/utils';\nimport { mockData } from '@/services/mockData';\nimport { TransactionCategory } from '@/types/transactions';\n\ninterface BudgetTrackerProps {\n  familyId: string;\n  className?: string;\n}\n\nconst BudgetTracker = ({ familyId, className }: BudgetTrackerProps) => {\n  const [budget, setBudget] = useState<Budget | null>(null);\n  const [goals, setGoals] = useState<SavingsGoal[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedView, setSelectedView] = useState<'overview' | 'categories' | 'goals' | 'analytics'>('overview');\n\n  const loadBudgetData = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const [budgetData, goalsData] = await Promise.all([\n        budgetService.getActiveBudget(familyId),\n        budgetService.getFamilySavingsGoals(familyId) // WHY: Use budgetService which returns the correct SavingsGoal type\n      ]);\n      \n      // -----------------------------------------------------------\n      // Populate budget spent amounts using available mock transactions\n      // -----------------------------------------------------------\n      const populateSpentFromMock = (budgetToPopulate: Budget | null) => {\n        if (!budgetToPopulate) return budgetToPopulate;\n\n        const expenses = mockData.transactions.filter(t => t.amount < 0);\n\n        // Helper to map mock category labels -> internal TransactionCategory keys\n        const mapCategory = (label: string): TransactionCategory => {\n          const l = label.toLowerCase();\n          if (['grocery', 'groceries', 'dining', 'coffee', 'food'].some(k => l.includes(k))) return 'food';\n          if (['electronics', 'shopping', 'amazon', 'nike', 'best buy', 'home depot', 'home improvement', 'walmart', 'target', 'ebay'].some(k => l.includes(k))) return 'shopping';\n          if (['gas', 'uber', 'lyft', 'transportation'].some(k => l.includes(k))) return 'transportation';\n          if (['entertainment', 'netflix', 'spotify', 'apple music', 'movie', 'concert', 'gym'].some(k => l.includes(k))) return 'entertainment';\n          if (['health', 'pharmacy', 'cvs', 'healthcare', 'gym'].some(k => l.includes(k))) return 'healthcare';\n          if (['utilities', 'electric', 'water', 'internet', 'phone'].some(k => l.includes(k))) return 'utilities';\n          if (['debt', 'loan', 'payment', 'mortgage'].some(k => l.includes(k))) return 'debt_payments';\n          if (['saving', 'investment', '401', 'ira'].some(k => l.includes(k))) return 'savings';\n          if (['housing', 'rent', 'property'].some(k => l.includes(k))) return 'housing';\n          return 'other';\n        };\n\n        // Reset spent before recalculation to avoid double-counting on reloads\n        budgetToPopulate.categories.forEach(cat => {\n          cat.spentAmount = 0;\n          cat.remainingAmount = cat.budgetedAmount;\n          cat.overageAmount = 0;\n        });\n\n        // Accumulate expenses per category\n        expenses.forEach(txn => {\n          const catKey = mapCategory(txn.category.name || 'other');\n          const category = budgetToPopulate.categories.find(c => c.categoryName === catKey);\n          if (category) {\n            const amount = Math.abs(txn.amount);\n            category.spentAmount += amount;\n            category.remainingAmount = Math.max(category.budgetedAmount - category.spentAmount, 0);\n            category.overageAmount = Math.max(category.spentAmount - category.budgetedAmount, 0);\n          }\n        });\n\n        // Recalculate totals\n        budgetToPopulate.totalSpent = budgetToPopulate.categories.reduce((sum, c) => sum + c.spentAmount, 0);\n        budgetToPopulate.totalRemaining = Math.max(budgetToPopulate.totalBudgeted - budgetToPopulate.totalSpent, 0);\n\n        return budgetToPopulate;\n      };\n\n      const enrichedBudget = populateSpentFromMock(budgetData);\n\n      // -----------------------------------------------------------\n      // Enrich savings goals with mock progress based on contribution schedule\n      // -----------------------------------------------------------\n      const populateGoalsProgress = (goals: SavingsGoal[]): SavingsGoal[] => {\n        return goals.map(goal => {\n          const targetDate = goal.targetDate instanceof Date ? goal.targetDate : new Date(goal.targetDate);\n          const monthsTotal = Math.max(1, Math.ceil((targetDate.getTime() - Date.now()) / (30 * 24 * 60 * 60 * 1000)) + 12); // fallback 12 months horizon\n\n          // Estimate months elapsed since 1 year ago (for demo)\n          const monthsElapsed = Math.min(12, 12 - Math.ceil(monthsTotal / 12));\n\n          const estimatedAmount = goal.monthlyContribution * monthsElapsed;\n          const currentAmount = Math.min(estimatedAmount, goal.targetAmount);\n\n          return {\n            ...goal,\n            currentAmount,\n            status: currentAmount >= goal.targetAmount ? 'completed' : 'in_progress'\n          };\n        });\n      };\n\n      const enrichedGoals = populateGoalsProgress(goalsData);\n\n      setBudget(enrichedBudget);\n      setGoals(enrichedGoals);\n    } catch (err) {\n      setError('Failed to load budget data');\n      console.error('Budget loading error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [familyId]);\n\n  useEffect(() => {\n    loadBudgetData();\n  }, [loadBudgetData]);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const formatPercentage = (value: number) => {\n    return `${value.toFixed(1)}%`;\n  };\n\n  const getCategoryProgress = (category: BudgetCategory) => {\n    if (category.budgetedAmount === 0) return 0;\n    return Math.min((category.spentAmount / category.budgetedAmount) * 100, 100);\n  };\n\n  const getCategoryStatus = (category: BudgetCategory) => {\n    const progress = getCategoryProgress(category);\n    if (progress >= 100) return 'overspent';\n    if (progress >= 80) return 'warning';\n    if (progress >= 50) return 'on-track';\n    return 'under-budget';\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'overspent':\n        return 'text-red-400 bg-red-500/20 border-red-500/30';\n      case 'warning':\n        return 'text-yellow-400 bg-yellow-500/20 border-yellow-500/30';\n      case 'on-track':\n        return 'text-blue-400 bg-blue-500/20 border-blue-500/30';\n      case 'under-budget':\n        return 'text-green-400 bg-green-500/20 border-green-500/30';\n      default:\n        return 'text-gray-400 bg-gray-500/20 border-gray-500/30';\n    }\n  };\n\n  const getGoalProgress = (goal: SavingsGoal) => {\n    return (goal.currentAmount / goal.targetAmount) * 100;\n  };\n\n  const getGoalStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"w-4 h-4 text-green-400\" />;\n      case 'on_track':\n      case 'ahead':\n        return <TrendingUp className=\"w-4 h-4 text-green-400\" />;\n      case 'behind':\n        return <TrendingDown className=\"w-4 h-4 text-red-400\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-yellow-400\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className={cn(\"space-y-6\", className)}>\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 animate-pulse\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"h-6 bg-white/[0.05] rounded w-32\"></div>\n              <div className=\"h-6 bg-white/[0.05] rounded w-24\"></div>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"h-4 bg-white/[0.05] rounded w-full\"></div>\n              <div className=\"h-4 bg-white/[0.05] rounded w-3/4\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  const renderOverview = () => (\n    <div className=\"space-y-6\">\n      {/* Budget Summary */}\n      {budget && (\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <h3 className=\"text-xl font-bold text-white mb-6 flex items-center gap-3\">\n            <PieChart className=\"w-6 h-6 text-blue-400\" />\n            {budget.name}\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <p className=\"text-white/60 text-sm mb-2\">Total Budget</p>\n              <p className=\"text-2xl font-bold text-white\">{formatCurrency(budget.totalBudgeted)}</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-white/60 text-sm mb-2\">Spent</p>\n              <p className=\"text-2xl font-bold text-red-400\">{formatCurrency(budget.totalSpent)}</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-white/60 text-sm mb-2\">Remaining</p>\n              <p className=\"text-2xl font-bold text-green-400\">{formatCurrency(budget.totalRemaining)}</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-white/60 text-sm mb-2\">Savings Rate</p>\n              <p className=\"text-2xl font-bold text-blue-400\">\n                {formatPercentage((budget.totalRemaining / budget.totalBudgeted) * 100)}\n              </p>\n            </div>\n          </div>\n\n          {/* Overall Progress Bar */}\n          <div className=\"mt-6\">\n            <div className=\"flex justify-between text-sm text-white/60 mb-2\">\n              <span>Budget Progress</span>\n              <span>{formatPercentage((budget.totalSpent / budget.totalBudgeted) * 100)}</span>\n            </div>\n            <div className=\"w-full bg-white/[0.05] rounded-full h-3\">\n              <div \n                className={cn(\n                  \"h-3 rounded-full transition-all duration-300\",\n                  budget.totalSpent > budget.totalBudgeted ? \"bg-red-500\" : \"bg-blue-500\"\n                )}\n                style={{ width: `${Math.min((budget.totalSpent / budget.totalBudgeted) * 100, 100)}%` }}\n              ></div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Top Categories */}\n      {budget && budget.categories.length > 0 && (\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <h3 className=\"text-lg font-bold text-white mb-4 flex items-center gap-3\">\n            <BarChart3 className=\"w-5 h-5 text-blue-400\" />\n            Top Spending Categories\n          </h3>\n          \n          <div className=\"space-y-4\">\n            {budget.categories\n              .sort((a, b) => b.spentAmount - a.spentAmount)\n              .slice(0, 5)\n              .map((category) => {\n                const progress = getCategoryProgress(category);\n                const status = getCategoryStatus(category);\n                \n                return (\n                  <div key={category.id} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                      <div className=\"w-8 h-8 rounded-xl bg-blue-500/20 flex items-center justify-center\">\n                        <Target className=\"w-4 h-4 text-blue-400\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-medium text-white capitalize truncate\">{category.categoryName.replace('_', ' ')}</p>\n                        <div className=\"flex items-center gap-3 mt-1\">\n                          <div className=\"flex-1 bg-white/[0.05] rounded-full h-2\">\n                            <div \n                              className={cn(\n                                \"h-2 rounded-full transition-all duration-300\",\n                                progress >= 100 ? \"bg-red-500\" : \n                                progress >= 80 ? \"bg-yellow-500\" : \"bg-green-500\"\n                              )}\n                              style={{ width: `${Math.min(progress, 100)}%` }}\n                            ></div>\n                          </div>\n                          <span className={cn(\n                            \"text-xs px-2 py-1 rounded-xl border font-medium\",\n                            getStatusColor(status)\n                          )}>\n                            {formatPercentage(progress)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-white\">{formatCurrency(category.spentAmount)}</p>\n                      <p className=\"text-white/60 text-sm\">of {formatCurrency(category.budgetedAmount)}</p>\n                    </div>\n                  </div>\n                );\n              })}\n          </div>\n        </div>\n      )}\n\n      {/* Savings Goals */}\n      {goals.length > 0 && (\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <h3 className=\"text-lg font-bold text-white mb-4 flex items-center gap-3\">\n            <Target className=\"w-5 h-5 text-green-400\" />\n            Savings Goals\n          </h3>\n          \n          <div className=\"space-y-4\">\n            {goals.slice(0, 3).map((goal) => {\n              const progress = getGoalProgress(goal);\n              \n              return (\n                <div key={goal.id} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                    <div className=\"w-8 h-8 rounded-xl bg-green-500/20 flex items-center justify-center\">\n                      {getGoalStatusIcon(goal.status)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium text-white truncate\">{goal.name}</p>\n                      <div className=\"flex items-center gap-3 mt-1\">\n                        <div className=\"flex-1 bg-white/[0.05] rounded-full h-2\">\n                          <div \n                            className=\"h-2 rounded-full bg-green-500 transition-all duration-300\"\n                            style={{ width: `${Math.min(progress, 100)}%` }}\n                          ></div>\n                        </div>\n                        <span className=\"text-xs text-green-400 font-medium\">\n                          {formatPercentage(progress)}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-white\">{formatCurrency(goal.currentAmount)}</p>\n                    <p className=\"text-white/60 text-sm\">of {formatCurrency(goal.targetAmount)}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderCategories = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-xl font-bold text-white\">Budget Categories</h3>\n        <button className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-xl transition-colors flex items-center gap-2\">\n          <Plus className=\"w-4 h-4\" />\n          Add Category\n        </button>\n      </div>\n\n      {budget && budget.categories.map((category) => {\n        const progress = getCategoryProgress(category);\n        const status = getCategoryStatus(category);\n        \n        return (\n          <div\n            key={category.id}\n            className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 hover:bg-white/[0.03] transition-all duration-300\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 rounded-2xl bg-blue-500/20 flex items-center justify-center\">\n                  <Target className=\"w-6 h-6 text-blue-400\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-white capitalize\">{category.categoryName.replace('_', ' ')}</h4>\n                  <div className=\"flex items-center gap-3 mt-1\">\n                    {category.isEssential && (\n                      <span className=\"text-xs px-2 py-1 rounded-lg bg-red-500/20 text-red-400 border border-red-500/30\">\n                        Essential\n                      </span>\n                    )}\n                    {category.isFixed && (\n                      <span className=\"text-xs px-2 py-1 rounded-lg bg-blue-500/20 text-blue-400 border border-blue-500/30\">\n                        Fixed\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"text-right\">\n                <p className=\"font-bold text-white\">{formatCurrency(category.spentAmount)}</p>\n                <p className=\"text-white/60 text-sm\">of {formatCurrency(category.budgetedAmount)}</p>\n                <span className={cn(\n                  \"text-xs px-2 py-1 rounded-lg border font-medium inline-block mt-1\",\n                  getStatusColor(status)\n                )}>\n                  {formatPercentage(progress)}\n                </span>\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"mb-4\">\n              <div className=\"flex justify-between text-sm text-white/60 mb-2\">\n                <span>Spent</span>\n                <span>Remaining: {formatCurrency(category.remainingAmount)}</span>\n              </div>\n              <div className=\"w-full bg-white/[0.05] rounded-full h-3\">\n                <div \n                  className={cn(\n                    \"h-3 rounded-full transition-all duration-300\",\n                    progress >= 100 ? \"bg-red-500\" : \n                    progress >= 80 ? \"bg-yellow-500\" : \"bg-green-500\"\n                  )}\n                  style={{ width: `${Math.min(progress, 100)}%` }}\n                ></div>\n              </div>\n            </div>\n\n            {/* Overage Warning */}\n            {category.overageAmount > 0 && (\n              <div className=\"bg-red-500/10 border border-red-500/20 rounded-xl p-3 flex items-center gap-3\">\n                <AlertCircle className=\"w-5 h-5 text-red-400\" />\n                <div>\n                  <p className=\"text-red-400 font-medium\">Over Budget</p>\n                  <p className=\"text-red-300 text-sm\">Exceeded by {formatCurrency(category.overageAmount)}</p>\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n\n  const renderGoals = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-xl font-bold text-white\">Savings Goals</h3>\n        <button className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-xl transition-colors flex items-center gap-2\">\n          <Plus className=\"w-4 h-4\" />\n          Add Goal\n        </button>\n      </div>\n\n      {goals.map((goal) => {\n        const progress = getGoalProgress(goal);\n        \n        // Safely handle targetDate - ensure it's a Date object\n        const targetDate = goal.targetDate instanceof Date ? goal.targetDate : new Date(goal.targetDate);\n        const monthsRemaining = Math.ceil((targetDate.getTime() - Date.now()) / (30 * 24 * 60 * 60 * 1000));\n        \n        return (\n          <div\n            key={goal.id}\n            className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 hover:bg-white/[0.03] transition-all duration-300\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 rounded-2xl bg-green-500/20 flex items-center justify-center\">\n                  {getGoalStatusIcon(goal.status)}\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-white\">{goal.name}</h4>\n                  <p className=\"text-white/60 text-sm\">{goal.description}</p>\n                  <div className=\"flex items-center gap-3 mt-1\">\n                    <span className=\"text-xs px-2 py-1 rounded-lg bg-green-500/20 text-green-400 border border-green-500/30 capitalize\">\n                      {goal.goalType.replace('_', ' ')}\n                    </span>\n                    <span className=\"text-xs text-white/60\">\n                      <Calendar className=\"w-3 h-3 inline mr-1\" />\n                      {monthsRemaining > 0 ? `${monthsRemaining} months left` : 'Overdue'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"text-right\">\n                <p className=\"font-bold text-white\">{formatCurrency(goal.currentAmount)}</p>\n                <p className=\"text-white/60 text-sm\">of {formatCurrency(goal.targetAmount)}</p>\n                <p className=\"text-green-400 text-sm font-medium mt-1\">{formatPercentage(progress)}</p>\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"mb-4\">\n              <div className=\"flex justify-between text-sm text-white/60 mb-2\">\n                <span>Progress</span>\n                <span>Monthly: {formatCurrency(goal.monthlyContribution)}</span>\n              </div>\n              <div className=\"w-full bg-white/[0.05] rounded-full h-3\">\n                <div \n                  className=\"h-3 rounded-full bg-green-500 transition-all duration-300\"\n                  style={{ width: `${Math.min(progress, 100)}%` }}\n                ></div>\n              </div>\n            </div>\n\n            {/* Goal Details */}\n            <div className=\"flex items-center justify-between text-sm\">\n              <div className=\"flex items-center gap-4\">\n                <span className=\"text-white/60\">Target Date:</span>\n                <span className=\"text-white\">{targetDate.toLocaleDateString()}</span>\n              </div>\n              {goal.autoContribute && (\n                <span className=\"text-green-400 flex items-center gap-1\">\n                  <CheckCircle className=\"w-3 h-3\" />\n                  Auto-contribute\n                </span>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Navigation Tabs */}\n      <div className=\"bg-white/[0.02] rounded-xl p-1 border border-white/[0.08]\">\n        {/* Mobile: Scrollable tabs */}\n        <div className=\"flex sm:hidden overflow-x-auto gap-1 pb-1 scrollbar-hide\">\n          {[\n            { id: 'overview', label: 'Overview', icon: PieChart },\n            { id: 'categories', label: 'Categories', icon: BarChart3 },\n            { id: 'goals', label: 'Goals', icon: Target },\n            { id: 'analytics', label: 'Analytics', icon: TrendingUp }\n          ].map(({ id, label, icon: Icon }) => (\n            <button\n              key={id}\n              onClick={() => setSelectedView(id as any)}\n              className={cn(\n                \"flex items-center gap-2 px-3 py-2 rounded-lg transition-all text-xs whitespace-nowrap flex-shrink-0\",\n                selectedView === id\n                  ? \"bg-blue-500 text-white\"\n                  : \"text-white/60 hover:text-white hover:bg-white/[0.05]\"\n              )}\n            >\n              <Icon className=\"w-3 h-3\" />\n              {label}\n            </button>\n          ))}\n        </div>\n        \n        {/* Desktop: Grid tabs */}\n        <div className=\"hidden sm:grid grid-cols-4 gap-1\">\n          {[\n            { id: 'overview', label: 'Overview', icon: PieChart },\n            { id: 'categories', label: 'Categories', icon: BarChart3 },\n            { id: 'goals', label: 'Goals', icon: Target },\n            { id: 'analytics', label: 'Analytics', icon: TrendingUp }\n          ].map(({ id, label, icon: Icon }) => (\n            <button\n              key={id}\n              onClick={() => setSelectedView(id as any)}\n              className={cn(\n                \"flex items-center justify-center gap-2 px-4 py-2 rounded-lg transition-all text-sm\",\n                selectedView === id\n                  ? \"bg-blue-500 text-white\"\n                  : \"text-white/60 hover:text-white hover:bg-white/[0.05]\"\n              )}\n            >\n              <Icon className=\"w-4 h-4\" />\n              {label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Content */}\n      {selectedView === 'overview' && renderOverview()}\n      {selectedView === 'categories' && renderCategories()}\n      {selectedView === 'goals' && renderGoals()}\n      {selectedView === 'analytics' && renderOverview()} {/* Reuse overview for now */}\n    </div>\n  );\n};\n\nexport default BudgetTracker;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/budget/components/SpendingBreakdownChart.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/budget/components/SpendingBreakdownChart.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SpendingBreakdownChart - Enhanced spending visualization using StackedBarChart\n * Replaces basic bar charts with Apple-style stacked bars for category breakdowns\n */\n\nimport React, { useMemo, useCallback } from 'react';\nimport { StackedBarChart, StackedBarDataPoint } from '@/components/charts/StackedBarChart';\nimport { mockData } from '@/services/mockData';\nimport { Transaction, TransactionCategory } from '@/types/transactions';\nimport { Calendar, TrendingDown, Filter, Download, Share2 } from 'lucide-react';\nimport { Button } from '@/shared/ui/button';\n\ninterface SpendingBreakdownChartProps {\n  familyId?: string;\n  timeRange?: '1M' | '3M' | '6M' | '1Y';\n  showComparisons?: boolean;\n  displayMode?: 'absolute' | 'percentage';\n  className?: string;\n}\n\n// Category mapping for better labels and colors\nconst CATEGORY_MAPPING: Record<TransactionCategory, { label: string; color: string }> = {\n  food: { label: 'Food & Dining', color: '#FF453A' },\n  housing: { label: 'Housing', color: '#FF9F0A' },\n  transportation: { label: 'Transportation', color: '#FFCC00' },\n  entertainment: { label: 'Entertainment', color: '#AF52DE' },\n  healthcare: { label: 'Healthcare', color: '#FF375F' },\n  shopping: { label: 'Shopping', color: '#5AC8FA' },\n  utilities: { label: 'Utilities', color: '#32D74B' },\n  debt_payments: { label: 'Debt Payments', color: '#FF3B30' },\n  savings: { label: 'Savings', color: '#007AFF' },\n  other: { label: 'Other', color: '#8E8E93' }\n};\n\nconst SpendingBreakdownChart: React.FC<SpendingBreakdownChartProps> = ({\n  familyId = 'demo_family',\n  timeRange = '6M',\n  showComparisons = false,\n  displayMode = 'absolute',\n  className\n}) => {\n  // Process transaction data into chart format\n  const chartData = useMemo((): StackedBarDataPoint[] => {\n    // Filter to expense transactions only\n    const expenses = mockData.transactions.filter(tx => tx.amount < 0);\n    \n    // Map transaction categories to our category system\n    const mapCategory = (txCategory: string): TransactionCategory => {\n      const categoryLower = txCategory.toLowerCase();\n      \n      if (['grocery', 'groceries', 'dining', 'coffee', 'food', 'restaurant', 'starbucks'].some(k => categoryLower.includes(k))) {\n        return 'food';\n      }\n      if (['shopping', 'amazon', 'target', 'walmart', 'best buy', 'home depot', 'nike', 'electronics'].some(k => categoryLower.includes(k))) {\n        return 'shopping';\n      }\n      if (['gas', 'uber', 'lyft', 'transportation', 'fuel', 'transit'].some(k => categoryLower.includes(k))) {\n        return 'transportation';\n      }\n      if (['entertainment', 'netflix', 'spotify', 'apple music', 'movie', 'concert', 'streaming'].some(k => categoryLower.includes(k))) {\n        return 'entertainment';\n      }\n      if (['health', 'pharmacy', 'cvs', 'healthcare', 'medical', 'doctor'].some(k => categoryLower.includes(k))) {\n        return 'healthcare';\n      }\n      if (['utilities', 'electric', 'water', 'internet', 'phone', 'cable'].some(k => categoryLower.includes(k))) {\n        return 'utilities';\n      }\n      if (['rent', 'mortgage', 'housing', 'property', 'hoa'].some(k => categoryLower.includes(k))) {\n        return 'housing';\n      }\n      if (['debt', 'loan', 'payment', 'credit card'].some(k => categoryLower.includes(k))) {\n        return 'debt_payments';\n      }\n      if (['saving', 'investment', '401', 'ira', 'transfer'].some(k => categoryLower.includes(k))) {\n        return 'savings';\n      }\n      \n      return 'other';\n    };\n\n    // Group transactions by month and category\n    const monthlyData: { [month: string]: { [category: string]: number } } = {};\n    \n    expenses.forEach(tx => {\n      const txDate = new Date(tx.date);\n      const monthKey = `${txDate.getFullYear()}-${String(txDate.getMonth() + 1).padStart(2, '0')}`;\n      const category = mapCategory(tx.category.name);\n      const amount = Math.abs(tx.amount);\n      \n      if (!monthlyData[monthKey]) {\n        monthlyData[monthKey] = {};\n      }\n      \n      if (!monthlyData[monthKey][category]) {\n        monthlyData[monthKey][category] = 0;\n      }\n      \n      monthlyData[monthKey][category] += amount;\n    });\n\n    // Convert to chart data format\n    const chartData = Object.entries(monthlyData)\n      .sort(([a], [b]) => a.localeCompare(b))\n      .slice(-6) // Last 6 months\n      .map(([month, categories]) => {\n        const monthDate = new Date(month + '-01');\n        const monthLabel = monthDate.toLocaleDateString('en-US', { \n          month: 'short', \n          year: 'numeric' \n        });\n        \n        const total = Object.values(categories).reduce((sum, amount) => sum + amount, 0);\n        \n        return {\n          date: month,\n          label: monthLabel,\n          ...categories,\n          total\n        } as StackedBarDataPoint;\n      });\n\n    return chartData;\n  }, []);\n\n  // Custom series configuration with financial category colors\n  const chartSeries = useMemo(() => {\n    if (chartData.length === 0) return [];\n    \n    // Get all unique categories from the data\n    const categories = new Set<string>();\n    chartData.forEach(dataPoint => {\n      Object.keys(dataPoint).forEach(key => {\n        if (key !== 'date' && key !== 'label' && key !== 'total' && typeof dataPoint[key] === 'number') {\n          categories.add(key);\n        }\n      });\n    });\n\n    // Calculate totals for sorting\n    const categoryTotals = Array.from(categories).map(category => ({\n      category,\n      total: chartData.reduce((sum, point) => sum + (point[category] as number || 0), 0)\n    }));\n\n    // Sort by total amount (descending)\n    categoryTotals.sort((a, b) => b.total - a.total);\n\n    return categoryTotals.map(({ category }) => ({\n      dataKey: category,\n      label: CATEGORY_MAPPING[category as TransactionCategory]?.label || category,\n      color: CATEGORY_MAPPING[category as TransactionCategory]?.color || '#8E8E93'\n    }));\n  }, [chartData]);\n\n  // Calculate insights\n  const insights = useMemo(() => {\n    if (chartData.length === 0) return null;\n    \n    const totalSpending = chartData.reduce((sum, point) => sum + (point.total as number || 0), 0);\n    const avgMonthlySpending = totalSpending / chartData.length;\n    \n    // Find top spending category\n    const categoryTotals: { [key: string]: number } = {};\n    chartData.forEach(point => {\n      chartSeries.forEach(serie => {\n        const value = point[serie.dataKey] as number || 0;\n        categoryTotals[serie.dataKey] = (categoryTotals[serie.dataKey] || 0) + value;\n      });\n    });\n    \n    const topCategory = Object.entries(categoryTotals).reduce((max, [category, total]) => \n      total > max.total ? { category, total } : max, \n      { category: '', total: 0 }\n    );\n    \n    // Calculate month-over-month change\n    const lastMonth = chartData[chartData.length - 1];\n    const secondLastMonth = chartData[chartData.length - 2];\n    const momChange = lastMonth && secondLastMonth \n      ? ((lastMonth.total as number) - (secondLastMonth.total as number)) / (secondLastMonth.total as number) * 100\n      : 0;\n    \n    return {\n      totalSpending,\n      avgMonthlySpending,\n      topCategory: {\n        name: CATEGORY_MAPPING[topCategory.category as TransactionCategory]?.label || topCategory.category,\n        amount: topCategory.total,\n        percentage: (topCategory.total / totalSpending) * 100\n      },\n      momChange\n    };\n  }, [chartData, chartSeries]);\n\n  // Handle chart interactions\n  const handleCategoryClick = useCallback((data: StackedBarDataPoint, categoryKey: string, value: number) => {\n    console.log('Category clicked:', { \n      month: data.label, \n      category: categoryKey, \n      amount: value \n    });\n    // Could navigate to detailed transaction view\n  }, []);\n\n  const handleExport = useCallback(() => {\n    // Export functionality\n    console.log('Exporting spending breakdown data');\n  }, []);\n\n  const handleShare = useCallback(() => {\n    // Share functionality\n    console.log('Sharing spending breakdown chart');\n  }, []);\n\n  if (chartData.length === 0) {\n    return (\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-8 text-center\">\n        <TrendingDown className=\"w-12 h-12 text-white/20 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-medium text-white mb-2\">No Spending Data</h3>\n        <p className=\"text-white/60\">Connect your accounts to see spending breakdowns</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      {/* Header with insights */}\n      {insights && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <div className=\"bg-white/[0.02] rounded-xl border border-white/[0.08] p-4\">\n            <p className=\"text-white/60 text-sm mb-1\">Total Spending</p>\n            <p className=\"text-xl font-bold text-white\">\n              {new Intl.NumberFormat('en-US', { \n                style: 'currency', \n                currency: 'USD' \n              }).format(insights.totalSpending)}\n            </p>\n          </div>\n          \n          <div className=\"bg-white/[0.02] rounded-xl border border-white/[0.08] p-4\">\n            <p className=\"text-white/60 text-sm mb-1\">Monthly Average</p>\n            <p className=\"text-xl font-bold text-white\">\n              {new Intl.NumberFormat('en-US', { \n                style: 'currency', \n                currency: 'USD' \n              }).format(insights.avgMonthlySpending)}\n            </p>\n          </div>\n          \n          <div className=\"bg-white/[0.02] rounded-xl border border-white/[0.08] p-4\">\n            <p className=\"text-white/60 text-sm mb-1\">Top Category</p>\n            <p className=\"text-lg font-bold text-white\">{insights.topCategory.name}</p>\n            <p className=\"text-white/60 text-sm\">\n              {insights.topCategory.percentage.toFixed(1)}% of spending\n            </p>\n          </div>\n          \n          <div className=\"bg-white/[0.02] rounded-xl border border-white/[0.08] p-4\">\n            <p className=\"text-white/60 text-sm mb-1\">Month-over-Month</p>\n            <p className={`text-lg font-bold ${\n              insights.momChange > 0 ? 'text-red-400' : \n              insights.momChange < 0 ? 'text-green-400' : 'text-white'\n            }`}>\n              {insights.momChange >= 0 ? '+' : ''}{insights.momChange.toFixed(1)}%\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Chart */}\n      <StackedBarChart\n        data={chartData}\n        series={chartSeries}\n        title=\"Monthly Spending Breakdown\"\n        subtitle={`Expenses by category over the last ${chartData.length} months`}\n        headerActions={\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={handleExport}>\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={handleShare}>\n              <Share2 className=\"w-4 h-4 mr-2\" />\n              Share\n            </Button>\n          </div>\n        }\n        stackedBarConfig={{\n          displayMode,\n          colorScheme: 'financial',\n          barRadius: 8,\n          hoverEffects: true,\n          clickableSegments: true,\n          animateOnLoad: true,\n          maxCategories: 8,\n          groupSmallCategories: true,\n          smallCategoryThreshold: 0.03 // Group categories < 3% of total\n        }}\n        financialType={displayMode === 'percentage' ? 'percentage' : 'currency'}\n        dimensions={{\n          height: 400,\n          responsive: true\n        }}\n        timeControls={{\n          show: true,\n          options: ['3M', '6M', '1Y'],\n          defaultRange: timeRange\n        }}\n        onBarClick={handleCategoryClick}\n        onChartReady={() => console.log('Spending breakdown chart ready')}\n        accessibility={{\n          ariaLabel: 'Monthly spending breakdown by category',\n          keyboardNavigation: true\n        }}\n      />\n\n      {/* Additional insights */}\n      {showComparisons && insights && (\n        <div className=\"mt-6 grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"bg-white/[0.02] rounded-xl border border-white/[0.08] p-4\">\n            <h4 className=\"text-white font-medium mb-3 flex items-center gap-2\">\n              <TrendingDown className=\"w-4 h-4 text-blue-400\" />\n              Spending Trends\n            </h4>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-white/60\">Highest month:</span>\n                <span className=\"text-white font-medium\">\n                  {chartData.reduce((max, point) => \n                    (point.total as number) > max.amount ? \n                    { month: point.label, amount: point.total as number } : max,\n                    { month: '', amount: 0 }\n                  ).month}\n                </span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-white/60\">Most volatile category:</span>\n                <span className=\"text-white font-medium\">\n                  {insights.topCategory.name}\n                </span>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white/[0.02] rounded-xl border border-white/[0.08] p-4\">\n            <h4 className=\"text-white font-medium mb-3 flex items-center gap-2\">\n              <Calendar className=\"w-4 h-4 text-green-400\" />\n              Budget Insights\n            </h4>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-white/60\">Above average months:</span>\n                <span className=\"text-white font-medium\">\n                  {chartData.filter(point => \n                    (point.total as number) > insights.avgMonthlySpending\n                  ).length} of {chartData.length}\n                </span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-white/60\">Consistency score:</span>\n                <span className=\"text-white font-medium\">\n                  {Math.max(0, 100 - Math.abs(insights.momChange)).toFixed(0)}%\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpendingBreakdownChart;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/calculators/components/CalculatorList.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/calculators/components/CalculatorList.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, lazy, Suspense } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Calculator, \n  TrendingUp, \n  PiggyBank, \n  DollarSign, \n  Infinity, \n  Percent, \n  BarChart2, \n  Home, \n  Clock, \n  PieChart, \n  RefreshCcw, \n  Globe,\n  ChevronDown,\n  Check\n} from 'lucide-react';\nimport BackHeader from '@/shared/ui/BackHeader';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator, DropdownMenuLabel } from '@/shared/ui/dropdown-menu';\n\n// Lazy load calculator components for code splitting and bundle size reduction\nconst FinancialFreedomCalculator = lazy(() => import('@/features/calculators/components/FinancialFreedomCalculator'));\nconst ROICalculator = lazy(() => import('@/features/calculators/components/ROICalculator'));\nconst LoanCalculator = lazy(() => import('@/features/calculators/components/LoanCalculator'));\nconst InflationCalculator = lazy(() => import('@/features/calculators/components/InflationCalculator'));\nconst CompoundInterestCalculator = lazy(() => import('@/features/calculators/components/CompoundInterestCalculator'));\nconst Retirement401kCalculator = lazy(() => import('@/features/calculators/components/Retirement401kCalculator'));\nconst ThreeFundPortfolioCalculator = lazy(() => import('@/features/calculators/components/ThreeFundPortfolioCalculator'));\nconst HomeAffordabilityCalculator = lazy(() => import('@/features/calculators/components/HomeAffordabilityCalculator'));\nconst MortgagePayoffCalculator = lazy(() => import('@/features/calculators/components/MortgagePayoffCalculator'));\nconst StockBacktestCalculator = lazy(() => import('@/features/calculators/components/StockBacktestCalculator'));\nconst ExchangeRateCalculator = lazy(() => import('@/features/calculators/components/ExchangeRateCalculator'));\n\n// Calculator loading component\nconst CalculatorSkeleton = () => (\n  <div className=\"p-8 space-y-6\">\n    <div className=\"space-y-3\">\n      <div className=\"h-8 bg-white/[0.05] rounded-lg w-1/3 animate-pulse\"></div>\n      <div className=\"h-4 bg-white/[0.03] rounded w-2/3 animate-pulse\"></div>\n    </div>\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n      <div className=\"space-y-4\">\n        {[...Array(4)].map((_, i) => (\n          <div key={i} className=\"space-y-2\">\n            <div className=\"h-4 bg-white/[0.05] rounded w-1/4 animate-pulse\"></div>\n            <div className=\"h-12 bg-white/[0.03] rounded-lg animate-pulse\"></div>\n          </div>\n        ))}\n      </div>\n      <div className=\"h-64 bg-white/[0.03] rounded-lg animate-pulse\"></div>\n    </div>\n  </div>\n);\n\ninterface CalculatorItem {\n  id: string;\n  name: string;\n  description: string;\n  icon: React.ReactNode;\n  emoji: string;\n  category: string;\n  status?: 'popular' | 'new';\n  component: React.ReactNode;\n}\n\nconst calculators: CalculatorItem[] = [\n  {\n    id: 'compound-interest',\n    name: 'Compound Interest',\n    description: 'Let your money work for you',\n    icon: <Percent className=\"w-5 h-5\" />,\n    emoji: '💰',\n    category: 'Savings',\n    status: 'popular',\n    component: <CompoundInterestCalculator />\n  },\n  {\n    id: 'financial-freedom',\n    name: 'Financial Freedom',\n    description: 'How long will your savings last?',\n    icon: <Calculator className=\"w-5 h-5\" />,\n    emoji: '🚀',\n    category: 'Retirement',\n    component: <FinancialFreedomCalculator />\n  },\n  {\n    id: 'roi',\n    name: 'ROI Calculator',\n    description: 'Evaluate return on investment',\n    icon: <TrendingUp className=\"w-5 h-5\" />,\n    emoji: '📈',\n    category: 'Investing',\n    status: 'popular',\n    component: <ROICalculator />\n  },\n  {\n    id: 'loan',\n    name: 'Loan Calculator',\n    description: 'Plan loans and payments',\n    icon: <PiggyBank className=\"w-5 h-5\" />,\n    emoji: '🏦',\n    category: 'Debt',\n    component: <LoanCalculator />\n  },\n  {\n    id: 'inflation',\n    name: 'Inflation Calculator',\n    description: 'Future price after inflation',\n    icon: <Infinity className=\"w-5 h-5\" />,\n    emoji: '📉',\n    category: 'Planning',\n    status: 'new',\n    component: <InflationCalculator />\n  },\n  {\n    id: '401k',\n    name: '401k Retirement',\n    description: 'See your retirement account grow',\n    icon: <Clock className=\"w-5 h-5\" />,\n    emoji: '⏰',\n    category: 'Retirement',\n    component: <Retirement401kCalculator />\n  },\n  {\n    id: 'three-fund',\n    name: '3-Fund Portfolio',\n    description: 'Simulate portfolio allocation',\n    icon: <PieChart className=\"w-5 h-5\" />,\n    emoji: '🥧',\n    category: 'Investing',\n    component: <ThreeFundPortfolioCalculator />\n  },\n  {\n    id: 'home-affordability',\n    name: 'Home Affordability',\n    description: 'How much house can you afford?',\n    icon: <Home className=\"w-5 h-5\" />,\n    emoji: '🏠',\n    category: 'Real Estate',\n    status: 'new',\n    component: <HomeAffordabilityCalculator />\n  },\n  {\n    id: 'mortgage-payoff',\n    name: 'Mortgage Payoff',\n    description: 'Save on interest payments',\n    icon: <RefreshCcw className=\"w-5 h-5\" />,\n    emoji: '🔄',\n    category: 'Debt',\n    component: <MortgagePayoffCalculator />\n  },\n  {\n    id: 'backtest',\n    name: 'Portfolio Backtest',\n    description: 'Historical performance analysis',\n    icon: <BarChart2 className=\"w-5 h-5\" />,\n    emoji: '📊',\n    category: 'Investing',\n    component: <StockBacktestCalculator />\n  },\n  {\n    id: 'exchange-rate',\n    name: 'Exchange Rate',\n    description: 'Convert currencies',\n    icon: <Globe className=\"w-5 h-5\" />,\n    emoji: '💱',\n    category: 'Global',\n    component: <ExchangeRateCalculator />\n  }\n];\n\nconst CalculatorList = () => {\n  const [selectedCalculator, setSelectedCalculator] = useState<CalculatorItem>(calculators[0]);\n  const navigate = useNavigate();\n\n  // Group calculators by category\n  const groupedCalculators = calculators.reduce((acc, calc) => {\n    if (!acc[calc.category]) {\n      acc[calc.category] = [];\n    }\n    acc[calc.category].push(calc);\n    return acc;\n  }, {} as Record<string, CalculatorItem[]>);\n\n  const handleCalculatorSelect = (calculator: CalculatorItem) => {\n    setSelectedCalculator(calculator);\n  };\n\n  return (\n    <div className=\"w-full min-h-screen\">\n      <BackHeader title=\"Financial Calculators\" />\n      \n      <div className=\"max-w-4xl mx-auto p-6\">\n        {/* Header with dropdown */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">Financial Calculators</h1>\n              <p className=\"text-white/70 mt-1\">Select a calculator to get started</p>\n            </div>\n            \n            {/* Calculator Selector Dropdown */}\n            <DropdownMenu>\n              <DropdownMenuTrigger className=\"w-full sm:w-auto px-4 py-3 bg-white/[0.05] hover:bg-white/[0.08] border border-white/[0.12] rounded-xl flex items-center justify-between gap-3 transition-all duration-200\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"text-xl\">{selectedCalculator.emoji}</div>\n                  <div className=\"text-left\">\n                    <div className=\"font-medium text-white\">{selectedCalculator.name}</div>\n                    <div className=\"text-xs text-white/60\">{selectedCalculator.description}</div>\n                  </div>\n                </div>\n                <ChevronDown className=\"w-5 h-5 text-white/60 flex-shrink-0\" />\n              </DropdownMenuTrigger>\n              \n              <DropdownMenuContent className=\"w-80 max-h-[70vh] overflow-y-auto bg-black/95 border-white/20 text-white\">\n                {Object.entries(groupedCalculators).map(([category, categoryCalcs]) => (\n                  <div key={category}>\n                    <DropdownMenuLabel className=\"text-white/40 text-xs uppercase tracking-wider\">\n                      {category}\n                    </DropdownMenuLabel>\n                    {categoryCalcs.map((calc) => (\n                      <DropdownMenuItem\n                        key={calc.id}\n                        onClick={() => handleCalculatorSelect(calc)}\n                        className=\"py-3 px-3 cursor-pointer hover:bg-white/10\"\n                      >\n                        <div className=\"flex items-center justify-between w-full\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"text-lg\">{calc.emoji}</div>\n                            <div>\n                              <div className=\"font-medium text-white flex items-center gap-2\">\n                                {calc.name}\n                                {calc.status === 'new' && (\n                                  <span className=\"text-xs px-1.5 py-0.5 rounded-full bg-green-500/20 text-green-400 border border-green-500/30\">\n                                    New\n                                  </span>\n                                )}\n                                {calc.status === 'popular' && (\n                                  <span className=\"text-xs px-1.5 py-0.5 rounded-full bg-blue-500/20 text-blue-400 border border-blue-500/30\">\n                                    Popular\n                                  </span>\n                                )}\n                              </div>\n                              <div className=\"text-xs text-white/60\">{calc.description}</div>\n                            </div>\n                          </div>\n                          {selectedCalculator.id === calc.id && (\n                            <Check className=\"w-4 h-4 text-green-400 flex-shrink-0\" />\n                          )}\n                        </div>\n                      </DropdownMenuItem>\n                    ))}\n                    {category !== Object.keys(groupedCalculators)[Object.keys(groupedCalculators).length - 1] && (\n                      <DropdownMenuSeparator className=\"bg-white/10\" />\n                    )}\n                  </div>\n                ))}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          {/* Selected Calculator Info */}\n          <div className=\"bg-white/[0.02] border border-white/[0.08] rounded-2xl p-6 backdrop-blur-md\">\n            <div className=\"flex items-start gap-4\">\n              <div className=\"w-12 h-12 rounded-xl bg-white/[0.05] flex items-center justify-center text-2xl flex-shrink-0\">\n                {selectedCalculator.emoji}\n              </div>\n              <div className=\"flex-1\">\n                <h2 className=\"text-xl font-semibold text-white mb-1\">{selectedCalculator.name}</h2>\n                <p className=\"text-white/70\">{selectedCalculator.description}</p>\n                <div className=\"flex items-center gap-3 mt-3\">\n                  <span className=\"text-xs px-2 py-1 rounded-full bg-white/10 text-white/80\">\n                    {selectedCalculator.category}\n                  </span>\n                  {selectedCalculator.status && (\n                    <span className={`text-xs px-2 py-1 rounded-full border ${\n                      selectedCalculator.status === 'new' \n                        ? 'bg-green-500/20 text-green-400 border-green-500/30' \n                        : 'bg-blue-500/20 text-blue-400 border-blue-500/30'\n                    }`}>\n                      {selectedCalculator.status === 'new' ? 'New' : 'Popular'}\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Calculator Component */}\n        <div className=\"bg-white/[0.02] border border-white/[0.08] rounded-2xl backdrop-blur-md overflow-hidden\">\n          <Suspense fallback={<CalculatorSkeleton />}>\n            {selectedCalculator.component}\n          </Suspense>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CalculatorList; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/calculators/components/CompoundInterestCalculator.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/calculators/components/CompoundInterestCalculator.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { calculateCompoundInterest } from '@/shared/utils/calculators';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { LineChart } from '@/shared/ui/charts';\nimport { SecureCalculatorWrapper, useSecureCalculator } from './SecureCalculatorWrapper';\nimport { Alert, AlertDescription } from '@/shared/ui/alert';\nimport { AlertTriangle } from 'lucide-react';\n\ninterface CompoundData {\n  year: number;\n  date: string;\n  principal: number;\n  interest: number;\n  total: number;\n}\n\ninterface SecureCalculatorProps {\n  securityContext?: {\n    validateInput: (type: string, value: unknown) => unknown;\n    onCalculationSuccess: () => void;\n    onCalculationError: (error: Error) => void;\n    securityLevel: string;\n  };\n  onSecurityEvent?: (violationType: string, details: unknown) => void;\n}\n\nconst CompoundInterestCalculator = React.memo<SecureCalculatorProps>(({ securityContext, onSecurityEvent }) => {\n  const [principal, setPrincipal] = useState(10000);\n  const [rate, setRate] = useState(7);\n  const [years, setYears] = useState(10);\n  const [compoundFreq, setCompoundFreq] = useState(12);\n  const [monthlyContribution, setMonthlyContribution] = useState(200);\n  const [futureValue, setFutureValue] = useState<number | null>(null);\n  const [chartData, setChartData] = useState<CompoundData[]>([]);\n  const [inputErrors, setInputErrors] = useState<Record<string, string>>({});\n\n  const { validateAndSanitizeInput, performSecureCalculation } = useSecureCalculator('compound-interest');\n\n  // Memoized expensive calculation to prevent unnecessary recalculations\n  const compoundData = useMemo((): CompoundData[] => {\n    const data: CompoundData[] = [];\n    const currentPrincipal = principal;\n    const monthlyRate = rate / 100 / compoundFreq;\n    const periodsPerYear = compoundFreq;\n    \n    // Add initial data point\n    data.push({\n      year: 0,\n      date: new Date().toISOString(),\n      principal: principal,\n      interest: 0,\n      total: principal\n    });\n\n    for (let year = 1; year <= years; year++) {\n      // Calculate compound interest for the year\n      const yearlyContributions = monthlyContribution * 12;\n      \n      // Calculate compound growth\n      const periods = year * periodsPerYear;\n      const compoundAmount = currentPrincipal * Math.pow(1 + monthlyRate, periods);\n      \n      // Add yearly contributions with compound interest\n      let contributionGrowth = 0;\n      for (let i = 1; i <= 12; i++) {\n        const monthsRemaining = (years - year) * 12 + (12 - i);\n        contributionGrowth += monthlyContribution * Math.pow(1 + monthlyRate, monthsRemaining * periodsPerYear / 12);\n      }\n      \n      const totalContributions = principal + (yearlyContributions * year);\n      const totalInterest = compoundAmount + contributionGrowth - totalContributions;\n      const totalValue = totalContributions + totalInterest;\n      \n      // Create a date for this year\n      const futureDate = new Date();\n      futureDate.setFullYear(futureDate.getFullYear() + year);\n      \n      data.push({\n        year,\n        date: futureDate.toISOString(),\n        principal: totalContributions,\n        interest: totalInterest,\n        total: totalValue\n      });\n    }\n    \n    return data;\n  }, [principal, rate, years, compoundFreq, monthlyContribution]);\n\n  const handleSecureInput = useCallback((field: string, value: string, type: string) => {\n    setInputErrors(prev => ({ ...prev, [field]: '' }));\n    \n    try {\n      let sanitizedValue;\n      if (securityContext) {\n        sanitizedValue = securityContext.validateInput(type, value);\n      } else {\n        sanitizedValue = validateAndSanitizeInput(type, value);\n      }\n\n      switch (field) {\n        case 'principal':\n          setPrincipal(sanitizedValue);\n          break;\n        case 'monthlyContribution':\n          setMonthlyContribution(sanitizedValue);\n          break;\n        case 'rate':\n          setRate(sanitizedValue);\n          break;\n        case 'years':\n          setYears(sanitizedValue);\n          break;\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Invalid input';\n      setInputErrors(prev => ({ ...prev, [field]: errorMessage }));\n      onSecurityEvent?.('invalid_input', { field, value, error: errorMessage });\n    }\n  }, [securityContext, validateAndSanitizeInput, onSecurityEvent]);\n\n  const handleCalculate = useCallback(async () => {\n    try {\n      const calculationFunction = () => {\n        const result = calculateCompoundInterest(principal, rate, years, compoundFreq);\n        const chartData = compoundData;\n        setFutureValue(result);\n        setChartData(chartData);\n        return result;\n      };\n\n      if (securityContext) {\n        await calculationFunction();\n        securityContext.onCalculationSuccess();\n      } else {\n        await performSecureCalculation(calculationFunction);\n      }\n    } catch (error) {\n      if (securityContext) {\n        securityContext.onCalculationError(error);\n      }\n      setInputErrors(prev => ({ ...prev, calculation: error.message }));\n    }\n  }, [principal, rate, years, compoundFreq, monthlyContribution, securityContext, performSecureCalculation, compoundData]);\n\n  // Auto-calculate on component mount and when inputs change\n  useEffect(() => {\n    if (principal > 0 && rate > 0 && years > 0) {\n      handleCalculate();\n    }\n  }, [principal, rate, years, compoundFreq, monthlyContribution, handleCalculate]);\n\n  // Memoized currency formatter\n  const formatCurrency = useMemo(() => {\n    const formatter = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    });\n    return (value: number) => formatter.format(value);\n  }, []);\n\n  const totalContributions = principal + (monthlyContribution * 12 * years);\n  const totalInterest = futureValue ? futureValue - totalContributions : 0;\n\n  const frequencyOptions = [\n    { value: 1, label: 'Annually' },\n    { value: 4, label: 'Quarterly' },\n    { value: 12, label: 'Monthly' },\n    { value: 365, label: 'Daily' }\n  ];\n\n  const calculateResults = useCallback(() => {\n    if (!principal || !rate || !years) return [];\n    \n    const results = [];\n    const monthlyRate = rate / 100 / 12;\n    const months = years * 12;\n    \n    for (let month = 0; month <= months; month++) {\n      const compoundInterest = principal * Math.pow(1 + monthlyRate, month);\n      const contributionTotal = monthlyContribution * month;\n      const contributionInterest = monthlyContribution * \n        ((Math.pow(1 + monthlyRate, month) - 1) / monthlyRate);\n      \n      const totalValue = compoundInterest + contributionInterest;\n      \n      results.push({\n        month,\n        year: Math.floor(month / 12),\n        principalValue: principal,\n        contributionValue: contributionTotal,\n        interestEarned: totalValue - principal - contributionTotal,\n        totalValue: totalValue\n      });\n    }\n    \n    return results;\n  }, [principal, rate, years]);\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-8\">\n      <h1 className=\"text-3xl font-bold text-white mb-8\">Compound Interest Calculator</h1>\n      \n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Input Section */}\n        <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n          <h2 className=\"text-xl font-semibold text-white mb-6\">Investment Parameters</h2>\n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Initial Investment\n              </label>\n              <div className=\"relative\">\n                <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/60\">$</span>\n                <input\n                  type=\"number\"\n                  value={principal}\n                  onChange={(e) => handleSecureInput('principal', e.target.value, 'amount')}\n                  className={`w-full pl-8 pr-4 py-3 rounded-xl bg-white/5 text-white border transition-colors focus:outline-none ${\n                    inputErrors.principal ? 'border-red-400 focus:border-red-400' : 'border-white/10 focus:border-blue-400'\n                  }`}\n                  placeholder=\"10,000\"\n                />\n                {inputErrors.principal && (\n                  <Alert className=\"mt-2 border-red-200 bg-red-50\">\n                    <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                    <AlertDescription className=\"text-red-700\">{inputErrors.principal}</AlertDescription>\n                  </Alert>\n                )}\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Monthly Contribution\n              </label>\n              <div className=\"relative\">\n                <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/60\">$</span>\n                <input\n                  type=\"number\"\n                  value={monthlyContribution}\n                  onChange={(e) => handleSecureInput('monthlyContribution', e.target.value, 'amount')}\n                  className={`w-full pl-8 pr-4 py-3 rounded-xl bg-white/5 text-white border transition-colors focus:outline-none ${\n                    inputErrors.monthlyContribution ? 'border-red-400 focus:border-red-400' : 'border-white/10 focus:border-blue-400'\n                  }`}\n                  placeholder=\"200\"\n                />\n                {inputErrors.monthlyContribution && (\n                  <Alert className=\"mt-2 border-red-200 bg-red-50\">\n                    <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                    <AlertDescription className=\"text-red-700\">{inputErrors.monthlyContribution}</AlertDescription>\n                  </Alert>\n                )}\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Annual Interest Rate\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"number\"\n                  value={rate}\n                  onChange={(e) => handleSecureInput('rate', e.target.value, 'interestRate')}\n                  className={`w-full pr-8 pl-4 py-3 rounded-xl bg-white/5 text-white border transition-colors focus:outline-none ${\n                    inputErrors.rate ? 'border-red-400 focus:border-red-400' : 'border-white/10 focus:border-blue-400'\n                  }`}\n                  placeholder=\"7\"\n                  step=\"0.1\"\n                />\n                {inputErrors.rate && (\n                  <Alert className=\"mt-2 border-red-200 bg-red-50\">\n                    <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                    <AlertDescription className=\"text-red-700\">{inputErrors.rate}</AlertDescription>\n                  </Alert>\n                )}\n                <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-white/60\">%</span>\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Investment Period\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"number\"\n                  value={years}\n                  onChange={(e) => handleSecureInput('years', e.target.value, 'timePeriod')}\n                  className={`w-full pr-16 pl-4 py-3 rounded-xl bg-white/5 text-white border transition-colors focus:outline-none ${\n                    inputErrors.years ? 'border-red-400 focus:border-red-400' : 'border-white/10 focus:border-blue-400'\n                  }`}\n                  placeholder=\"10\"\n                />\n                {inputErrors.years && (\n                  <Alert className=\"mt-2 border-red-200 bg-red-50\">\n                    <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                    <AlertDescription className=\"text-red-700\">{inputErrors.years}</AlertDescription>\n                  </Alert>\n                )}\n                <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-white/60\">years</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Compounding Frequency\n              </label>\n              <select\n                value={compoundFreq}\n                onChange={(e) => setCompoundFreq(+e.target.value)}\n                className=\"w-full px-4 py-3 rounded-xl bg-white/5 text-white border border-white/10 focus:border-blue-400 focus:outline-none transition-colors\"\n              >\n                {frequencyOptions.map(option => (\n                  <option key={option.value} value={option.value} className=\"bg-gray-800\">\n                    {option.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n            \n            <button\n              onClick={handleCalculate}\n              className=\"w-full py-3 px-6 rounded-xl bg-white/10 hover:bg-white/20 border border-white/20 hover:border-white/30 text-white font-semibold transition-all duration-200\"\n            >\n              Calculate Growth\n            </button>\n\n            {inputErrors.calculation && (\n              <Alert className=\"mt-4 border-red-200 bg-red-50\">\n                <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                <AlertDescription className=\"text-red-700\">\n                  Calculation Error: {inputErrors.calculation}\n                </AlertDescription>\n              </Alert>\n            )}\n          </div>\n        </div>\n\n        {/* Results Section */}\n        {futureValue !== null && (\n          <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n            <h2 className=\"text-xl font-semibold text-white mb-6\">Results</h2>\n            <div className=\"space-y-4\">\n              <div className=\"text-center p-6 bg-white/5 rounded-2xl border border-white/20\">\n                <div className=\"text-3xl font-bold text-white mb-2\">{formatCurrency(futureValue)}</div>\n                <div className=\"text-white/80\">Future Value</div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n                  <div className=\"text-xl font-semibold text-white\">{formatCurrency(totalContributions)}</div>\n                  <div className=\"text-sm text-white/60\">Total Contributions</div>\n                </div>\n                <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n                  <div className=\"text-xl font-semibold text-white\">{formatCurrency(totalInterest)}</div>\n                  <div className=\"text-sm text-white/60\">Interest Earned</div>\n                </div>\n              </div>\n\n              <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n                <div className=\"text-lg font-semibold text-white\">\n                  {totalContributions > 0 ? ((totalInterest / totalContributions) * 100).toFixed(1) : 0}%\n                </div>\n                <div className=\"text-sm text-white/60\">Total Return</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Charts Section */}\n      {chartData.length > 0 && (\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Growth Projection Chart */}\n          <LineChart\n            data={chartData}\n            series={[\n              {\n                dataKey: 'total',\n                label: 'Total Value',\n                color: '#007AFF', // Apple system blue\n              },\n              {\n                dataKey: 'principal',\n                label: 'Contributions',\n                color: '#32D74B', // Apple system green\n              },\n              {\n                dataKey: 'interest',\n                label: 'Interest Earned',\n                color: '#FF9F0A', // Apple system orange\n              }\n            ]}\n            title=\"Growth Projection Over Time\"\n            multiSeries={true}\n            financialType=\"currency\"\n            trendAnalysis={true}\n            dimensions={{ height: 320, responsive: true }}\n            legend={{ show: true, position: 'bottom' }}\n            lineConfig={{\n              smoothLines: true,\n              strokeWidth: 'medium',\n              showDots: true,\n              gradientFill: true,\n              gradientOpacity: 0.1,\n              hoverEffects: true,\n            }}\n            className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\"\n          />\n\n          {/* Yearly Growth Bar Chart */}\n          <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n            <h2 className=\"text-xl font-semibold text-white mb-6\">Annual Growth Breakdown</h2>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={chartData.slice(1, 6)}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\n                  <XAxis \n                    dataKey=\"year\" \n                    stroke=\"#fff\" \n                    fontSize={12}\n                    tickFormatter={(value) => `Year ${value}`}\n                  />\n                  <YAxis \n                    stroke=\"#fff\" \n                    fontSize={12}\n                    tickFormatter={(value) => formatCurrency(value)}\n                  />\n                  <Tooltip \n                    formatter={(value: number) => [formatCurrency(value), 'Amount']}\n                    contentStyle={{\n                      backgroundColor: 'rgba(0,0,0,0.8)',\n                      border: '1px solid rgba(255,255,255,0.2)',\n                      borderRadius: '12px',\n                      color: '#fff'\n                    }}\n                  />\n                  <Bar dataKey=\"principal\" fill=\"#3B82F6\" radius={[4, 4, 0, 0]} />\n                  <Bar dataKey=\"interest\" fill=\"#10B981\" radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n            <div className=\"flex justify-center space-x-8 mt-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n                <span className=\"text-white/80 text-sm\">Principal</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n                <span className=\"text-white/80 text-sm\">Interest</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nCompoundInterestCalculator.displayName = 'CompoundInterestCalculator';\n\n// Wrapped component with security features\nconst SecureCompoundInterestCalculator = () => {\n  return (\n    <SecureCalculatorWrapper calculatorName=\"compound-interest\">\n      <CompoundInterestCalculator />\n    </SecureCalculatorWrapper>\n  );\n};\n\nexport default SecureCompoundInterestCalculator;\nexport { CompoundInterestCalculator }; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/calculators/components/ExchangeRateCalculator.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/calculators/components/ExchangeRateCalculator.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { convertCurrency } from '@/shared/utils/calculators';\n\nconst ExchangeRateCalculator = () => {\n  const [amount, setAmount] = useState(100);\n  const [rate, setRate] = useState(1.1);\n  const [converted, setConverted] = useState<number | null>(null);\n\n  const handleCalculate = () => {\n    const result = convertCurrency(amount, rate);\n    setConverted(result);\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto p-4 space-y-4\">\n      <h1 className=\"text-xl font-bold text-white\">Exchange Rate Calculator</h1>\n      <div className=\"space-y-2\">\n        <label className=\"block text-sm text-white/80\">\n          Amount\n          <input type=\"number\" value={amount} onChange={(e) => setAmount(+e.target.value)} className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\" />\n        </label>\n        <label className=\"block text-sm text-white/80\">\n          Exchange Rate\n          <input type=\"number\" step=\"0.0001\" value={rate} onChange={(e) => setRate(+e.target.value)} className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\" />\n        </label>\n      </div>\n              <button onClick={handleCalculate} className=\"w-full py-3 px-6 rounded-xl bg-white/10 hover:bg-white/20 border border-white/20 hover:border-white/30 text-white font-semibold transition-all duration-200\">\n        Convert\n      </button>\n      {converted !== null && (\n        <div className=\"text-white mt-4\">\n          Converted Amount: <span className=\"font-semibold\">{converted}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ExchangeRateCalculator; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/calculators/components/FinancialFreedomCalculator.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/calculators/components/FinancialFreedomCalculator.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { calculateFinancialFreedomYears } from '@/shared/utils/calculators';\nimport { LineChart } from '@/shared/ui/charts';\n\ninterface ProjectionData {\n  year: number;\n  date: string;\n  balance: number;\n  totalWithdrawn: number;\n}\n\nconst FinancialFreedomCalculator = () => {\n  const [savings, setSavings] = useState(100000);\n  const [monthlyExpenses, setMonthlyExpenses] = useState(4000);\n  const [growthRate, setGrowthRate] = useState(5);\n  const [years, setYears] = useState<number | null>(null);\n  const [projectionData, setProjectionData] = useState<ProjectionData[]>([]);\n\n  const generateProjectionData = (initialSavings: number, monthlyExpenses: number, annualGrowthRate: number): ProjectionData[] => {\n    const data: ProjectionData[] = [];\n    const monthlyRate = annualGrowthRate / 12;\n    let balance = initialSavings;\n    let totalWithdrawn = 0;\n    let months = 0;\n    \n    // Add initial point\n    const startDate = new Date();\n    data.push({ \n      year: 0, \n      date: startDate.toISOString(),\n      balance: initialSavings, \n      totalWithdrawn: 0 \n    });\n    \n    const MAX_MONTHS = 50 * 12;\n    while (balance > 0 && months < MAX_MONTHS) {\n      balance = balance * (1 + monthlyRate) - monthlyExpenses;\n      totalWithdrawn += monthlyExpenses;\n      months += 1;\n      \n      // Add data point every 12 months\n      if (months % 12 === 0) {\n        const futureDate = new Date(startDate);\n        futureDate.setMonth(futureDate.getMonth() + months);\n        \n        data.push({\n          year: months / 12,\n          date: futureDate.toISOString(),\n          balance: Math.max(0, balance),\n          totalWithdrawn\n        });\n      }\n    }\n    \n    return data;\n  };\n\n  const handleCalculate = () => {\n    const result = calculateFinancialFreedomYears(savings, monthlyExpenses, growthRate / 100);\n    const projData = generateProjectionData(savings, monthlyExpenses, growthRate / 100);\n    setYears(result);\n    setProjectionData(projData);\n  };\n\n  // Auto-calculate on component mount and when inputs change\n  useEffect(() => {\n    if (savings > 0 && monthlyExpenses > 0 && growthRate > 0) {\n      handleCalculate();\n    }\n  }, [savings, monthlyExpenses, growthRate]);\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  const formatTooltip = (value: number, name: string) => {\n    if (name === 'balance') {\n      return [formatCurrency(value), 'Remaining Balance'];\n    }\n    if (name === 'totalWithdrawn') {\n      return [formatCurrency(value), 'Total Withdrawn'];\n    }\n    return [value, name];\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-8\">\n      <h1 className=\"text-3xl font-bold text-white mb-8\">Financial Freedom Calculator</h1>\n      \n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Input Section */}\n        <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n          <h2 className=\"text-xl font-semibold text-white mb-6\">Input Parameters</h2>\n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Current Savings\n              </label>\n              <div className=\"relative\">\n                <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/60\">$</span>\n                <input\n                  type=\"number\"\n                  value={savings}\n                  onChange={(e) => setSavings(+e.target.value)}\n                  className=\"w-full pl-8 pr-4 py-3 rounded-xl bg-white/5 text-white border border-white/10 focus:border-blue-400 focus:outline-none transition-colors\"\n                  placeholder=\"100,000\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Monthly Expenses\n              </label>\n              <div className=\"relative\">\n                <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/60\">$</span>\n                <input\n                  type=\"number\"\n                  value={monthlyExpenses}\n                  onChange={(e) => setMonthlyExpenses(+e.target.value)}\n                  className=\"w-full pl-8 pr-4 py-3 rounded-xl bg-white/5 text-white border border-white/10 focus:border-blue-400 focus:outline-none transition-colors\"\n                  placeholder=\"4,000\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Expected Annual Growth Rate\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"number\"\n                  value={growthRate}\n                  onChange={(e) => setGrowthRate(+e.target.value)}\n                  className=\"w-full pr-8 pl-4 py-3 rounded-xl bg-white/5 text-white border border-white/10 focus:border-blue-400 focus:outline-none transition-colors\"\n                  placeholder=\"5\"\n                  step=\"0.1\"\n                />\n                <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-white/60\">%</span>\n              </div>\n            </div>\n            \n            <button\n              onClick={handleCalculate}\n              className=\"w-full py-3 px-6 rounded-xl bg-white/10 hover:bg-white/20 border border-white/20 hover:border-white/30 text-white font-semibold transition-all duration-200\"\n            >\n              Calculate Financial Freedom\n            </button>\n          </div>\n        </div>\n\n        {/* Results Section */}\n        {years !== null && (\n          <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n            <h2 className=\"text-xl font-semibold text-white mb-6\">Results</h2>\n            <div className=\"space-y-4\">\n              <div className=\"text-center p-6 bg-gradient-to-r from-green-500/20 to-blue-500/20 rounded-2xl border border-green-400/20\">\n                <div className=\"text-3xl font-bold text-white mb-2\">{years} Years</div>\n                <div className=\"text-white/80\">Until Financial Freedom</div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n                  <div className=\"text-xl font-semibold text-white\">{formatCurrency(monthlyExpenses * 12)}</div>\n                  <div className=\"text-sm text-white/60\">Annual Expenses</div>\n                </div>\n                <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n                  <div className=\"text-xl font-semibold text-white\">{formatCurrency(monthlyExpenses * years * 12)}</div>\n                  <div className=\"text-sm text-white/60\">Total Withdrawn</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Chart Section */}\n      {projectionData.length > 0 && (\n        <LineChart\n          data={projectionData}\n          series={[\n            {\n              dataKey: 'balance',\n              label: 'Remaining Balance',\n              color: '#007AFF', // Apple system blue\n            },\n            {\n              dataKey: 'totalWithdrawn',\n              label: 'Total Withdrawn',\n              color: '#32D74B', // Apple system green\n            }\n          ]}\n          title=\"Savings Projection Over Time\"\n          multiSeries={true}\n          financialType=\"currency\"\n          trendAnalysis={true}\n          dimensions={{ height: 384, responsive: true }}\n          legend={{ show: true, position: 'bottom' }}\n          lineConfig={{\n            smoothLines: true,\n            strokeWidth: 'medium',\n            showDots: true,\n            gradientFill: true,\n            gradientOpacity: 0.15,\n            hoverEffects: true,\n          }}\n          className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default FinancialFreedomCalculator; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/calculators/components/HomeAffordabilityCalculator.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/calculators/components/HomeAffordabilityCalculator.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { calculateMaximumHomePrice } from '@/shared/utils/calculators';\n\nconst HomeAffordabilityCalculator = () => {\n  const [income, setIncome] = useState(120000);\n  const [monthlyDebts, setMonthlyDebts] = useState(500);\n  const [interestRate, setInterestRate] = useState(6);\n  const [termYears, setTermYears] = useState(30);\n  const [downPayment, setDownPayment] = useState(40000);\n  const [maxPrice, setMaxPrice] = useState<number | null>(null);\n\n  const handleCalculate = () => {\n    const result = calculateMaximumHomePrice(income, monthlyDebts, interestRate, termYears, downPayment);\n    setMaxPrice(result);\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto p-4 space-y-4\">\n      <h1 className=\"text-xl font-bold text-white\">Home Affordability Calculator</h1>\n      <div className=\"space-y-2\">\n        <label className=\"block text-sm text-white/80\">\n          Annual Household Income ($)\n          <input type=\"number\" value={income} onChange={(e) => setIncome(+e.target.value)} className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\" />\n        </label>\n        <label className=\"block text-sm text-white/80\">\n          Total Monthly Debts ($)\n          <input type=\"number\" value={monthlyDebts} onChange={(e) => setMonthlyDebts(+e.target.value)} className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\" />\n        </label>\n        <label className=\"block text-sm text-white/80\">\n          Mortgage Interest Rate (%)\n          <input type=\"number\" value={interestRate} onChange={(e) => setInterestRate(+e.target.value)} className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\" />\n        </label>\n        <label className=\"block text-sm text-white/80\">\n          Loan Term (years)\n          <input type=\"number\" value={termYears} onChange={(e) => setTermYears(+e.target.value)} className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\" />\n        </label>\n        <label className=\"block text-sm text-white/80\">\n          Down Payment ($)\n          <input type=\"number\" value={downPayment} onChange={(e) => setDownPayment(+e.target.value)} className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\" />\n        </label>\n      </div>\n              <button onClick={handleCalculate} className=\"w-full py-3 px-6 rounded-xl bg-white/10 hover:bg-white/20 border border-white/20 hover:border-white/30 text-white font-semibold transition-all duration-200\">\n        Calculate\n      </button>\n      {maxPrice !== null && (\n        <div className=\"text-white mt-4\">\n          You can afford a house up to: <span className=\"font-semibold\">${maxPrice}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HomeAffordabilityCalculator; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/calculators/components/InflationCalculator.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/calculators/components/InflationCalculator.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { calculateInflationAdjustedValue } from '@/shared/utils/calculators';\n\nconst InflationCalculator = () => {\n  const [currentPrice, setCurrentPrice] = useState(100);\n  const [inflationRate, setInflationRate] = useState(3);\n  const [years, setYears] = useState(10);\n  const [futureValue, setFutureValue] = useState<number | null>(null);\n\n  const handleCalculate = () => {\n    const result = calculateInflationAdjustedValue(currentPrice, inflationRate, years);\n    setFutureValue(result);\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto p-4 space-y-4\">\n      <h1 className=\"text-xl font-bold text-white\">Inflation Calculator</h1>\n      <div className=\"space-y-2\">\n        <label className=\"block text-sm text-white/80\">\n          Current Price ($)\n          <input\n            type=\"number\"\n            value={currentPrice}\n            onChange={(e) => setCurrentPrice(+e.target.value)}\n            className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\"\n          />\n        </label>\n        <label className=\"block text-sm text-white/80\">\n          Annual Inflation Rate (%)\n          <input\n            type=\"number\"\n            value={inflationRate}\n            onChange={(e) => setInflationRate(+e.target.value)}\n            className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\"\n          />\n        </label>\n        <label className=\"block text-sm text-white/80\">\n          Years\n          <input\n            type=\"number\"\n            value={years}\n            onChange={(e) => setYears(+e.target.value)}\n            className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\"\n          />\n        </label>\n      </div>\n              <button onClick={handleCalculate} className=\"w-full py-3 px-6 rounded-xl bg-white/10 hover:bg-white/20 border border-white/20 hover:border-white/30 text-white font-semibold transition-all duration-200\">\n        Calculate\n      </button>\n      {futureValue !== null && (\n        <div className=\"text-white mt-4\">\n          Future Value: <span className=\"font-semibold\">${futureValue}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default InflationCalculator; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/calculators/components/LoanCalculator.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/calculators/components/LoanCalculator.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { calculateLoanPayment } from '@/shared/utils/calculators';\nimport GlassSlider from '@/shared/ui/GlassSlider';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, BarChart, Bar } from 'recharts';\n\ninterface AmortizationData {\n  month: number;\n  year: number;\n  payment: number;\n  principal: number;\n  interest: number;\n  balance: number;\n}\n\nconst LoanCalculator = () => {\n  const [principal, setPrincipal] = useState(250000);\n  const [rate, setRate] = useState(5);\n  const [years, setYears] = useState(30);\n  const [payment, setPayment] = useState<number | null>(null);\n  const [amortizationData, setAmortizationData] = useState<AmortizationData[]>([]);\n\n  const generateAmortizationSchedule = (): AmortizationData[] => {\n    const data: AmortizationData[] = [];\n    const monthlyRate = rate / 100 / 12;\n    const totalPayments = years * 12;\n    const monthlyPayment = calculateLoanPayment(principal, rate, years);\n    \n    let remainingBalance = principal;\n    \n    for (let month = 1; month <= totalPayments; month++) {\n      const interestPayment = remainingBalance * monthlyRate;\n      const principalPayment = monthlyPayment - interestPayment;\n      remainingBalance -= principalPayment;\n      \n      // Add data point every 12 months for chart readability\n      if (month % 12 === 0 || month === 1) {\n        data.push({\n          month,\n          year: Math.ceil(month / 12),\n          payment: monthlyPayment,\n          principal: principalPayment,\n          interest: interestPayment,\n          balance: Math.max(0, remainingBalance)\n        });\n      }\n    }\n    \n    return data;\n  };\n\n  const handleCalculate = () => {\n    const result = calculateLoanPayment(principal, rate, years);\n    const amortization = generateAmortizationSchedule();\n    setPayment(result);\n    setAmortizationData(amortization);\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  const totalPayments = payment ? payment * years * 12 : 0;\n  const totalInterest = totalPayments - principal;\n\n  const summaryData = [\n    { name: 'Principal', value: principal, color: '#3B82F6' },\n    { name: 'Interest', value: totalInterest, color: '#EF4444' }\n  ];\n\n  const loanTypes = [\n    { type: 'Conventional', rate: rate, payment: payment || 0 },\n    { type: 'FHA', rate: rate - 0.5, payment: calculateLoanPayment(principal, rate - 0.5, years) },\n    { type: 'VA', rate: rate - 0.25, payment: calculateLoanPayment(principal, rate - 0.25, years) }\n  ];\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-8\">\n      <h1 className=\"text-3xl font-bold text-white mb-8\">Loan Calculator</h1>\n      \n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Input Section */}\n        <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n          <h2 className=\"text-xl font-semibold text-white mb-6\">Loan Parameters</h2>\n          <div className=\"space-y-6\">\n            <div>\n              <div className=\"flex justify-between text-sm font-medium text-white/80 mb-2\">\n                <span>Loan Amount</span>\n                <span>{formatCurrency(principal)}</span>\n              </div>\n              <GlassSlider value={principal} min={10000} max={1000000} step={1000} onChange={setPrincipal} />\n            </div>\n            \n            <div>\n              <div className=\"flex justify-between text-sm font-medium text-white/80 mb-2\">\n                <span>Interest Rate</span>\n                <span>{rate}%</span>\n              </div>\n              <GlassSlider value={rate} min={0} max={15} step={0.1} onChange={setRate} />\n            </div>\n            \n            <div>\n              <div className=\"flex justify-between text-sm font-medium text-white/80 mb-2\">\n                <span>Loan Term</span>\n                <span>{years} years</span>\n              </div>\n              <GlassSlider value={years} min={1} max={40} step={1} onChange={setYears} />\n            </div>\n            \n            <button\n              onClick={handleCalculate}\n              className=\"w-full py-3 px-6 rounded-xl bg-white/10 hover:bg-white/20 border border-white/20 hover:border-white/30 text-white font-semibold transition-all duration-200\"\n            >\n              Calculate Loan\n            </button>\n          </div>\n        </div>\n\n        {/* Results Section */}\n        {payment !== null && (\n          <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n            <h2 className=\"text-xl font-semibold text-white mb-6\">Loan Summary</h2>\n            <div className=\"space-y-4\">\n              <div className=\"text-center p-6 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-2xl border border-blue-400/20\">\n                <div className=\"text-3xl font-bold text-white mb-2\">{formatCurrency(payment)}</div>\n                <div className=\"text-white/80\">Monthly Payment</div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n                  <div className=\"text-xl font-semibold text-white\">{formatCurrency(totalPayments)}</div>\n                  <div className=\"text-sm text-white/60\">Total Payments</div>\n                </div>\n                <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n                  <div className=\"text-xl font-semibold text-white\">{formatCurrency(totalInterest)}</div>\n                  <div className=\"text-sm text-white/60\">Total Interest</div>\n                </div>\n              </div>\n\n              <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n                <div className=\"text-lg font-semibold text-white\">\n                  {((totalInterest / principal) * 100).toFixed(1)}%\n                </div>\n                <div className=\"text-sm text-white/60\">Interest as % of Principal</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Charts Section */}\n      {amortizationData.length > 0 && (\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Amortization Chart */}\n          <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n            <h2 className=\"text-xl font-semibold text-white mb-6\">Remaining Balance Over Time</h2>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={amortizationData}>\n                  <defs>\n                    <linearGradient id=\"balanceGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor=\"#3B82F6\" stopOpacity={0.3}/>\n                      <stop offset=\"95%\" stopColor=\"#3B82F6\" stopOpacity={0}/>\n                    </linearGradient>\n                  </defs>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\n                  <XAxis \n                    dataKey=\"year\" \n                    stroke=\"#fff\" \n                    fontSize={12}\n                    tickFormatter={(value) => `Year ${value}`}\n                  />\n                  <YAxis \n                    stroke=\"#fff\" \n                    fontSize={12}\n                    tickFormatter={(value) => formatCurrency(value)}\n                  />\n                  <Tooltip \n                    formatter={(value: number) => [formatCurrency(value), 'Remaining Balance']}\n                    labelFormatter={(value) => `Year ${value}`}\n                    contentStyle={{\n                      backgroundColor: 'rgba(0,0,0,0.8)',\n                      border: '1px solid rgba(255,255,255,0.2)',\n                      borderRadius: '12px',\n                      color: '#fff'\n                    }}\n                  />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"balance\"\n                    stroke=\"#3B82F6\"\n                    fill=\"url(#balanceGradient)\"\n                    strokeWidth={2}\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Principal vs Interest Chart */}\n          <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n            <h2 className=\"text-xl font-semibold text-white mb-6\">Principal vs Interest</h2>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={summaryData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={40}\n                    outerRadius={80}\n                    paddingAngle={5}\n                    dataKey=\"value\"\n                  >\n                    {summaryData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip \n                    formatter={(value: number) => [formatCurrency(value), 'Amount']}\n                    contentStyle={{\n                      backgroundColor: 'rgba(0,0,0,0.8)',\n                      border: '1px solid rgba(255,255,255,0.2)',\n                      borderRadius: '12px',\n                      color: '#fff'\n                    }}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n            <div className=\"flex justify-center space-x-8 mt-4\">\n              {summaryData.map((entry, index) => (\n                <div key={entry.name} className=\"flex items-center space-x-2\">\n                  <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: entry.color }}></div>\n                  <span className=\"text-white/80 text-sm\">{entry.name}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Loan Comparison */}\n      {payment !== null && (\n        <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n          <h2 className=\"text-xl font-semibold text-white mb-6\">Loan Type Comparison</h2>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={loanTypes}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\n                <XAxis \n                  dataKey=\"type\" \n                  stroke=\"#fff\" \n                  fontSize={12}\n                />\n                <YAxis \n                  stroke=\"#fff\" \n                  fontSize={12}\n                  tickFormatter={(value) => formatCurrency(value)}\n                />\n                <Tooltip \n                  formatter={(value: number) => [formatCurrency(value), 'Monthly Payment']}\n                  contentStyle={{\n                    backgroundColor: 'rgba(0,0,0,0.8)',\n                    border: '1px solid rgba(255,255,255,0.2)',\n                    borderRadius: '12px',\n                    color: '#fff'\n                  }}\n                />\n                <Bar dataKey=\"payment\" fill=\"#10B981\" radius={[4, 4, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LoanCalculator; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/calculators/components/MortgagePayoffCalculator.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/calculators/components/MortgagePayoffCalculator.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { calculateMortgagePayoffSavings } from '@/shared/utils/calculators';\n\nconst MortgagePayoffCalculator = () => {\n  const [principal, setPrincipal] = useState(300000);\n  const [rate, setRate] = useState(4);\n  const [years, setYears] = useState(30);\n  const [extraPayment, setExtraPayment] = useState(300);\n  const [result, setResult] = useState<ReturnType<typeof calculateMortgagePayoffSavings> | null>(null);\n\n  const handleCalculate = () => {\n    const res = calculateMortgagePayoffSavings(principal, rate, years, extraPayment);\n    setResult(res);\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto p-4 space-y-4\">\n      <h1 className=\"text-xl font-bold text-white\">Early Mortgage Payoff Calculator</h1>\n      <div className=\"space-y-2\">\n        <label className=\"block text-sm text-white/80\">\n          Mortgage Balance ($)\n          <input type=\"number\" value={principal} onChange={(e) => setPrincipal(+e.target.value)} className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\" />\n        </label>\n        <label className=\"block text-sm text-white/80\">\n          Interest Rate (%)\n          <input type=\"number\" value={rate} onChange={(e) => setRate(+e.target.value)} className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\" />\n        </label>\n        <label className=\"block text-sm text-white/80\">\n          Original Term (years)\n          <input type=\"number\" value={years} onChange={(e) => setYears(+e.target.value)} className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\" />\n        </label>\n        <label className=\"block text-sm text-white/80\">\n          Extra Monthly Payment ($)\n          <input type=\"number\" value={extraPayment} onChange={(e) => setExtraPayment(+e.target.value)} className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\" />\n        </label>\n      </div>\n              <button onClick={handleCalculate} className=\"w-full py-3 px-6 rounded-xl bg-white/10 hover:bg-white/20 border border-white/20 hover:border-white/30 text-white font-semibold transition-all duration-200\">\n        Calculate\n      </button>\n      {result && (\n        <div className=\"text-white mt-4 space-y-1\">\n          <p>Original Payoff Time: <span className=\"font-semibold\">{result.originalYears} years</span></p>\n          <p>New Payoff Time: <span className=\"font-semibold\">{result.newYears} years</span></p>\n          <p>Interest Saved: <span className=\"font-semibold\">${result.interestSaved}</span></p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MortgagePayoffCalculator; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/calculators/components/ROICalculator.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/calculators/components/ROICalculator.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback } from 'react';\nimport { calculateROI } from '@/shared/utils/calculators';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\nimport { UniversalCard } from '@/shared/ui/UniversalCard';\n\ninterface ROIData {\n  investment: string;\n  amount: number;\n  percentage: number;\n}\n\nconst ROICalculator = React.memo(() => {\n  const [initial, setInitial] = useState(1000);\n  const [current, setCurrent] = useState(1200);\n  const [timeHeld, setTimeHeld] = useState(12); // months\n\n  // Memoized expensive calculations - only recalculate when inputs change\n  const calculatedROI = useMemo(() => {\n    if (initial <= 0) return null;\n    return calculateROI(initial, current, timeHeld);\n  }, [initial, current, timeHeld]);\n\n  const chartData = useMemo((): ROIData[] => {\n    const gain = current - initial;\n    const gainPercentage = initial > 0 ? ((gain / initial) * 100) : 0;\n    \n    return [\n      {\n        investment: 'Initial Investment',\n        amount: initial,\n        percentage: 100\n      },\n      {\n        investment: 'Gain/Loss',\n        amount: gain,\n        percentage: gainPercentage\n      },\n      {\n        investment: 'Current Value',\n        amount: current,\n        percentage: 100 + gainPercentage\n      }\n    ];\n  }, [initial, current]);\n\n  // Memoized pie chart data\n  const pieData = useMemo(() => [\n    { name: 'Initial Investment', value: initial, color: '#3B82F6' },\n    { name: 'Gain/Loss', value: Math.max(0, current - initial), color: '#10B981' }\n  ], [initial, current]);\n\n  // Optimized event handlers with useCallback\n  const handleInitialChange = useCallback((value: string) => {\n    setInitial(parseFloat(value) || 0);\n  }, []);\n\n  const handleCurrentChange = useCallback((value: string) => {\n    setCurrent(parseFloat(value) || 0);\n  }, []);\n\n  const handleTimeChange = useCallback((value: string) => {\n    setTimeHeld(parseInt(value) || 0);\n  }, []);\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  const annualizedReturn = timeHeld > 0 ? (calculatedROI || 0) * (12 / timeHeld) : 0;\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-8\">\n      <h1 className=\"text-3xl font-bold text-white mb-8\">ROI Calculator</h1>\n      \n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Input Section */}\n        <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n          <h2 className=\"text-xl font-semibold text-white mb-6\">Investment Details</h2>\n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Initial Investment\n              </label>\n              <div className=\"relative\">\n                <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/60\">$</span>\n                <input\n                  type=\"number\"\n                  value={initial}\n                  onChange={(e) => handleInitialChange(e.target.value)}\n                  className=\"w-full pl-8 pr-4 py-3 rounded-xl bg-white/5 text-white border border-white/10 focus:border-blue-400 focus:outline-none transition-colors\"\n                  placeholder=\"1,000\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Current Value\n              </label>\n              <div className=\"relative\">\n                <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/60\">$</span>\n                <input\n                  type=\"number\"\n                  value={current}\n                  onChange={(e) => handleCurrentChange(e.target.value)}\n                  className=\"w-full pl-8 pr-4 py-3 rounded-xl bg-white/5 text-white border border-white/10 focus:border-blue-400 focus:outline-none transition-colors\"\n                  placeholder=\"1,200\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Time Held (Months)\n              </label>\n              <input\n                type=\"number\"\n                value={timeHeld}\n                onChange={(e) => handleTimeChange(e.target.value)}\n                className=\"w-full px-4 py-3 rounded-xl bg-white/5 text-white border border-white/10 focus:border-blue-400 focus:outline-none transition-colors\"\n                placeholder=\"12\"\n              />\n            </div>\n            \n          </div>\n        </div>\n\n        {/* Results Section */}\n        {calculatedROI !== null && (\n          <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n            <h2 className=\"text-xl font-semibold text-white mb-6\">Results</h2>\n            <div className=\"space-y-4\">\n              <div className={`text-center p-6 rounded-2xl border ${calculatedROI >= 0 ? 'bg-gradient-to-r from-green-500/20 to-blue-500/20 border-green-400/20' : 'bg-gradient-to-r from-red-500/20 to-orange-500/20 border-red-400/20'}`}>\n                <div className=\"text-3xl font-bold text-white mb-2\">{calculatedROI?.toFixed(2)}%</div>\n                <div className=\"text-white/80\">Total Return</div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n                  <div className=\"text-xl font-semibold text-white\">{formatCurrency(current - initial)}</div>\n                  <div className=\"text-sm text-white/60\">Gain/Loss</div>\n                </div>\n                <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n                  <div className=\"text-xl font-semibold text-white\">{annualizedReturn.toFixed(2)}%</div>\n                  <div className=\"text-sm text-white/60\">Annualized Return</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Charts Section */}\n      {chartData.length > 0 && (\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Bar Chart */}\n          <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n            <h2 className=\"text-xl font-semibold text-white mb-6\">Investment Breakdown</h2>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\n                  <XAxis \n                    dataKey=\"investment\" \n                    stroke=\"#fff\" \n                    fontSize={12}\n                    angle={-45}\n                    textAnchor=\"end\"\n                    height={60}\n                  />\n                  <YAxis \n                    stroke=\"#fff\" \n                    fontSize={12}\n                    tickFormatter={(value) => formatCurrency(value)}\n                  />\n                  <Tooltip \n                    formatter={(value: number) => [formatCurrency(value), 'Amount']}\n                    contentStyle={{\n                      backgroundColor: 'rgba(0,0,0,0.8)',\n                      border: '1px solid rgba(255,255,255,0.2)',\n                      borderRadius: '12px',\n                      color: '#fff'\n                    }}\n                  />\n                  <Bar dataKey=\"amount\" fill=\"#3B82F6\" radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Pie Chart */}\n          <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n            <h2 className=\"text-xl font-semibold text-white mb-6\">Portfolio Composition</h2>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={pieData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={40}\n                    outerRadius={80}\n                    paddingAngle={5}\n                    dataKey=\"value\"\n                  >\n                    {pieData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip \n                    formatter={(value: number) => [formatCurrency(value), 'Amount']}\n                    contentStyle={{\n                      backgroundColor: 'rgba(0,0,0,0.8)',\n                      border: '1px solid rgba(255,255,255,0.2)',\n                      borderRadius: '12px',\n                      color: '#fff'\n                    }}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n            <div className=\"flex justify-center space-x-8 mt-4\">\n              {pieData.map((entry, index) => (\n                <div key={entry.name} className=\"flex items-center space-x-2\">\n                  <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: entry.color }}></div>\n                  <span className=\"text-white/80 text-sm\">{entry.name}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nROICalculator.displayName = 'ROICalculator';\n\nexport default ROICalculator; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/calculators/components/Retirement401kCalculator.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/calculators/components/Retirement401kCalculator.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { calculate401kBalance } from '@/shared/utils/calculators';\nimport { PieChart, Pie, Cell, BarChart, Bar, ResponsiveContainer } from 'recharts';\nimport { AreaChart } from '@/shared/ui/charts';\n\ninterface RetirementData {\n  year: number;\n  age: number;\n  employeeContribution: number;\n  employerMatch: number;\n  investmentGrowth: number;\n  totalBalance: number;\n}\n\nconst Retirement401kCalculator = () => {\n  const [currentAge, setCurrentAge] = useState(35);\n  const [retirementAge, setRetirementAge] = useState(65);\n  const [balance, setBalance] = useState(50000);\n  const [salary, setSalary] = useState(75000);\n  const [contributionPercent, setContributionPercent] = useState(10);\n  const [matchRate, setMatchRate] = useState(0.5);\n  const [returnRate, setReturnRate] = useState(7);\n  const [futureBalance, setFutureBalance] = useState<number | null>(null);\n  const [projectionData, setProjectionData] = useState<RetirementData[]>([]);\n\n  const generateRetirementProjection = (): RetirementData[] => {\n    const data: RetirementData[] = [];\n    const years = retirementAge - currentAge;\n    const annualContribution = salary * (contributionPercent / 100);\n    const annualMatch = Math.min(annualContribution * matchRate, salary * 0.06); // Typical 6% match cap\n    const annualGrowthRate = returnRate / 100;\n    \n    let currentBalance = balance;\n    let totalEmployeeContributions = 0;\n    let totalEmployerMatch = 0;\n    \n    // Add initial data point\n    data.push({\n      year: 0,\n      age: currentAge,\n      employeeContribution: 0,\n      employerMatch: 0,\n      investmentGrowth: 0,\n      totalBalance: balance\n    });\n\n    for (let year = 1; year <= years; year++) {\n      // Apply investment growth\n      const growthThisYear = currentBalance * annualGrowthRate;\n      currentBalance += growthThisYear;\n      \n      // Add contributions\n      currentBalance += annualContribution + annualMatch;\n      totalEmployeeContributions += annualContribution;\n      totalEmployerMatch += annualMatch;\n      \n      data.push({\n        year,\n        age: currentAge + year,\n        employeeContribution: totalEmployeeContributions,\n        employerMatch: totalEmployerMatch,\n        investmentGrowth: currentBalance - balance - totalEmployeeContributions - totalEmployerMatch,\n        totalBalance: currentBalance\n      });\n    }\n    \n    return data;\n  };\n\n  const handleCalculate = () => {\n    const years = retirementAge - currentAge;\n    const annualContribution = salary * (contributionPercent / 100);\n    const result = calculate401kBalance(balance, annualContribution, matchRate, returnRate, years);\n    const projection = generateRetirementProjection();\n    setFutureBalance(result);\n    setProjectionData(projection);\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  const annualContribution = salary * (contributionPercent / 100);\n  const annualMatch = Math.min(annualContribution * matchRate, salary * 0.06);\n  const years = retirementAge - currentAge;\n\n  const finalProjection = projectionData[projectionData.length - 1];\n  const contributionBreakdown = finalProjection ? [\n    { name: 'Initial Balance', value: balance, color: '#8B5CF6' },\n    { name: 'Employee Contributions', value: finalProjection.employeeContribution, color: '#3B82F6' },\n    { name: 'Employer Match', value: finalProjection.employerMatch, color: '#10B981' },\n    { name: 'Investment Growth', value: finalProjection.investmentGrowth, color: '#F59E0B' }\n  ] : [];\n\n  // Calculate monthly income in retirement (using 4% rule)\n  const monthlyRetirementIncome = futureBalance ? (futureBalance * 0.04) / 12 : 0;\n\n  const contributionLimits = [\n    { category: 'Current Contribution', amount: annualContribution, limit: 23000 },\n    { category: 'Employer Match', amount: annualMatch, limit: 69000 },\n    { category: 'Total Annual', amount: annualContribution + annualMatch, limit: 69000 }\n  ];\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-8\">\n      <h1 className=\"text-3xl font-bold text-white mb-8\">401(k) Retirement Calculator</h1>\n      \n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Input Section */}\n        <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n          <h2 className=\"text-xl font-semibold text-white mb-6\">Retirement Planning</h2>\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                  Current Age\n                </label>\n                <input\n                  type=\"number\"\n                  value={currentAge}\n                  onChange={(e) => setCurrentAge(+e.target.value)}\n                  className=\"w-full px-4 py-3 rounded-xl bg-white/5 text-white border border-white/10 focus:border-blue-400 focus:outline-none transition-colors\"\n                  placeholder=\"35\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                  Retirement Age\n                </label>\n                <input\n                  type=\"number\"\n                  value={retirementAge}\n                  onChange={(e) => setRetirementAge(+e.target.value)}\n                  className=\"w-full px-4 py-3 rounded-xl bg-white/5 text-white border border-white/10 focus:border-blue-400 focus:outline-none transition-colors\"\n                  placeholder=\"65\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Current 401(k) Balance\n              </label>\n              <div className=\"relative\">\n                <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/60\">$</span>\n                <input\n                  type=\"number\"\n                  value={balance}\n                  onChange={(e) => setBalance(+e.target.value)}\n                  className=\"w-full pl-8 pr-4 py-3 rounded-xl bg-white/5 text-white border border-white/10 focus:border-blue-400 focus:outline-none transition-colors\"\n                  placeholder=\"50,000\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Annual Salary\n              </label>\n              <div className=\"relative\">\n                <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/60\">$</span>\n                <input\n                  type=\"number\"\n                  value={salary}\n                  onChange={(e) => setSalary(+e.target.value)}\n                  className=\"w-full pl-8 pr-4 py-3 rounded-xl bg-white/5 text-white border border-white/10 focus:border-blue-400 focus:outline-none transition-colors\"\n                  placeholder=\"75,000\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Contribution Percentage\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"number\"\n                  value={contributionPercent}\n                  onChange={(e) => setContributionPercent(+e.target.value)}\n                  className=\"w-full pr-8 pl-4 py-3 rounded-xl bg-white/5 text-white border border-white/10 focus:border-blue-400 focus:outline-none transition-colors\"\n                  placeholder=\"10\"\n                  step=\"0.5\"\n                />\n                <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-white/60\">%</span>\n              </div>\n              <div className=\"text-xs text-white/60 mt-1\">\n                Annual: {formatCurrency(annualContribution)}\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Employer Match Rate\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"number\"\n                  value={matchRate}\n                  onChange={(e) => setMatchRate(+e.target.value)}\n                  className=\"w-full pr-8 pl-4 py-3 rounded-xl bg-white/5 text-white border border-white/10 focus:border-blue-400 focus:outline-none transition-colors\"\n                  placeholder=\"0.5\"\n                  step=\"0.25\"\n                />\n                <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-white/60\">×</span>\n              </div>\n              <div className=\"text-xs text-white/60 mt-1\">\n                Annual Match: {formatCurrency(annualMatch)}\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-2\">\n                Expected Annual Return\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"number\"\n                  value={returnRate}\n                  onChange={(e) => setReturnRate(+e.target.value)}\n                  className=\"w-full pr-8 pl-4 py-3 rounded-xl bg-white/5 text-white border border-white/10 focus:border-blue-400 focus:outline-none transition-colors\"\n                  placeholder=\"7\"\n                  step=\"0.1\"\n                />\n                <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-white/60\">%</span>\n              </div>\n            </div>\n            \n            <button\n              onClick={handleCalculate}\n              className=\"w-full py-3 px-6 rounded-xl bg-white/10 hover:bg-white/20 border border-white/20 hover:border-white/30 text-white font-semibold transition-all duration-200\"\n            >\n              Calculate Retirement\n            </button>\n          </div>\n        </div>\n\n        {/* Results Section */}\n        {futureBalance !== null && (\n          <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n            <h2 className=\"text-xl font-semibold text-white mb-6\">Retirement Projection</h2>\n            <div className=\"space-y-4\">\n              <div className=\"text-center p-6 bg-gradient-to-r from-green-500/20 to-blue-500/20 rounded-2xl border border-green-400/20\">\n                <div className=\"text-3xl font-bold text-white mb-2\">{formatCurrency(futureBalance)}</div>\n                <div className=\"text-white/80\">401(k) Balance at Retirement</div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n                  <div className=\"text-xl font-semibold text-white\">{formatCurrency(monthlyRetirementIncome)}</div>\n                  <div className=\"text-sm text-white/60\">Monthly Income (4% Rule)</div>\n                </div>\n                <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n                  <div className=\"text-xl font-semibold text-white\">{years}</div>\n                  <div className=\"text-sm text-white/60\">Years to Save</div>\n                </div>\n              </div>\n\n              <div className=\"text-center p-4 bg-white/5 rounded-xl\">\n                <div className=\"text-lg font-semibold text-white\">\n                  {formatCurrency((annualContribution + annualMatch) * years)}\n                </div>\n                <div className=\"text-sm text-white/60\">Total Contributions</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Charts Section */}\n      {projectionData.length > 0 && (\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Growth Projection Chart */}\n          <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n            <h2 className=\"text-xl font-semibold text-white mb-6\">401(k) Growth Over Time</h2>\n            <div className=\"h-64\">\n              <AreaChart\n                data={projectionData.map(item => ({\n                  date: `Age ${item.age}`,\n                  employeeContribution: item.employeeContribution,\n                  employerMatch: item.employerMatch,\n                  investmentGrowth: item.investmentGrowth,\n                }))}\n                series={[\n                  {\n                    dataKey: 'employeeContribution',\n                    label: 'Employee Contributions',\n                    color: '#3B82F6',\n                  },\n                  {\n                    dataKey: 'employerMatch',\n                    label: 'Employer Match', \n                    color: '#10B981',\n                  },\n                  {\n                    dataKey: 'investmentGrowth',\n                    label: 'Investment Growth',\n                    color: '#F59E0B',\n                  },\n                ]}\n                financialType=\"currency\"\n                stackedData={true}\n                areaConfig={{\n                  stackedAreas: true,\n                  fillOpacity: 0.3,\n                  strokeWidth: 'medium',\n                  smoothCurves: true,\n                  gradientFill: true,\n                  hoverEffects: true,\n                }}\n                dimensions={{\n                  height: 256,\n                  responsive: true,\n                }}\n                xAxis={{\n                  show: true,\n                  tickFormatter: (value) => value,\n                }}\n                yAxis={{\n                  show: true,\n                  tickFormatter: (value) => formatCurrency(value),\n                }}\n                grid={{\n                  show: true,\n                  horizontal: true,\n                  vertical: false,\n                  strokeDasharray: \"3 3\",\n                  opacity: 0.1,\n                }}\n                legend={{\n                  show: true,\n                  position: 'bottom',\n                  align: 'center',\n                }}\n                className=\"w-full h-full\"\n              />\n            </div>\n          </div>\n\n          {/* Contribution Breakdown */}\n          <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n            <h2 className=\"text-xl font-semibold text-white mb-6\">Final Balance Breakdown</h2>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={contributionBreakdown}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={40}\n                    outerRadius={80}\n                    paddingAngle={2}\n                    dataKey=\"value\"\n                  >\n                    {contributionBreakdown.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip \n                    formatter={(value: number) => [formatCurrency(value), 'Amount']}\n                    contentStyle={{\n                      backgroundColor: 'rgba(0,0,0,0.8)',\n                      border: '1px solid rgba(255,255,255,0.2)',\n                      borderRadius: '12px',\n                      color: '#fff'\n                    }}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n            <div className=\"grid grid-cols-2 gap-2 mt-4 text-xs\">\n              {contributionBreakdown.map((entry, index) => (\n                <div key={entry.name} className=\"flex items-center space-x-2\">\n                  <div className=\"w-3 h-3 rounded\" style={{ backgroundColor: entry.color }}></div>\n                  <span className=\"text-white/80\">{entry.name}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Contribution Limits */}\n      {futureBalance !== null && (\n        <div className=\"bg-white/5 backdrop-blur-xl rounded-3xl p-6 border border-white/10\">\n          <h2 className=\"text-xl font-semibold text-white mb-6\">2024 Contribution Limits</h2>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={contributionLimits}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\n                <XAxis \n                  dataKey=\"category\" \n                  stroke=\"#fff\" \n                  fontSize={12}\n                />\n                <YAxis \n                  stroke=\"#fff\" \n                  fontSize={12}\n                  tickFormatter={(value) => formatCurrency(value)}\n                />\n                <Tooltip \n                  formatter={(value: number, name: string) => [formatCurrency(value), name === 'amount' ? 'Current' : 'Limit']}\n                  contentStyle={{\n                    backgroundColor: 'rgba(0,0,0,0.8)',\n                    border: '1px solid rgba(255,255,255,0.2)',\n                    borderRadius: '12px',\n                    color: '#fff'\n                  }}\n                />\n                <Bar dataKey=\"amount\" fill=\"#3B82F6\" radius={[4, 4, 0, 0]} />\n                <Bar dataKey=\"limit\" fill=\"#6B7280\" radius={[4, 4, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Retirement401kCalculator; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/calculators/components/SecureCalculatorWrapper.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/calculators/components/SecureCalculatorWrapper.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SecureCalculatorWrapper - Secure wrapper for financial calculators\n * Implements input validation, rate limiting, and XSS protection\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Alert, AlertDescription } from '@/shared/ui/alert';\nimport { Button } from '@/shared/ui/button';\nimport { Shield, AlertTriangle, Clock } from 'lucide-react';\nimport { security } from '@/shared/utils/security';\nimport { VueniSecurityMonitoring } from '@/shared/utils/monitoring';\n\ninterface SecureCalculatorWrapperProps {\n  calculatorName: string;\n  children: React.ReactNode;\n  onSecurityEvent?: (event: string, details: unknown) => void;\n}\n\ninterface SecurityState {\n  isRateLimited: boolean;\n  remainingRequests: number;\n  lastCalculation: Date | null;\n  securityLevel: 'normal' | 'elevated' | 'locked';\n  consecutiveErrors: number;\n}\n\ninterface ValidationResult {\n  // Define the structure of the validation result\n}\n\n/**\n * SecureCalculatorWrapper - Wraps financial calculators with security measures\n */\nexport function SecureCalculatorWrapper({ \n  calculatorName, \n  children, \n  onSecurityEvent \n}: SecureCalculatorWrapperProps) {\n  const [securityState, setSecurityState] = useState<SecurityState>({\n    isRateLimited: false,\n    remainingRequests: 100,\n    lastCalculation: null,\n    securityLevel: 'normal',\n    consecutiveErrors: 0\n  });\n\n  const [showSecurityInfo, setShowSecurityInfo] = useState(false);\n\n  // Check rate limits on component mount and at intervals\n  useEffect(() => {\n    const checkRateLimit = () => {\n      const isLimited = security.rateLimit.isRateLimited(`calculator:${calculatorName}`);\n      const remaining = security.rateLimit.getRemainingRequests(`calculator:${calculatorName}`);\n      \n      setSecurityState(prev => ({\n        ...prev,\n        isRateLimited: isLimited,\n        remainingRequests: remaining\n      }));\n\n      if (isLimited) {\n        VueniSecurityMonitoring.logEvent(\n          'RATE_LIMIT_EXCEEDED',\n          'medium',\n          `Rate limit exceeded for calculator: ${calculatorName}`,\n          { calculatorName, remainingRequests: remaining }\n        );\n\n        onSecurityEvent?.('rate_limit_exceeded', { calculatorName, remaining });\n      }\n    };\n\n    checkRateLimit();\n    const interval = setInterval(checkRateLimit, 60000); // Check every minute\n\n    return () => clearInterval(interval);\n  }, [calculatorName, onSecurityEvent]);\n\n  // Handle security violations\n  const handleSecurityViolation = (violationType: string, details: unknown) => {\n    setSecurityState(prev => {\n      const newConsecutiveErrors = prev.consecutiveErrors + 1;\n      let newSecurityLevel = prev.securityLevel;\n\n      // Escalate security level based on consecutive errors\n      if (newConsecutiveErrors >= 10) {\n        newSecurityLevel = 'locked';\n      } else if (newConsecutiveErrors >= 5) {\n        newSecurityLevel = 'elevated';\n      }\n\n      return {\n        ...prev,\n        consecutiveErrors: newConsecutiveErrors,\n        securityLevel: newSecurityLevel\n      };\n    });\n\n    VueniSecurityMonitoring.logEvent(\n      'INVALID_INPUT',\n      newSecurityLevel === 'locked' ? 'high' : 'medium',\n      `Security violation in ${calculatorName}: ${violationType}`,\n      { calculatorName, violationType, details }\n    );\n\n    onSecurityEvent?.('security_violation', { violationType, details });\n  };\n\n  // Reset security state on successful calculation\n  const handleSuccessfulCalculation = () => {\n    setSecurityState(prev => ({\n      ...prev,\n      lastCalculation: new Date(),\n      consecutiveErrors: Math.max(0, prev.consecutiveErrors - 1),\n      securityLevel: prev.consecutiveErrors <= 1 ? 'normal' : prev.securityLevel\n    }));\n  };\n\n  // Provide security context to child components\n  const securityContext = {\n    sanitize: security.sanitize,\n    validateInput: (type: string, value: string | number) => {\n      try {\n        switch (type) {\n          case 'amount':\n            return security.sanitize.sanitizeFinancialAmount(value);\n          case 'percentage':\n            return security.sanitize.sanitizePercentage(value);\n          case 'interestRate':\n            return security.sanitize.sanitizeInterestRate(value);\n          case 'year':\n            return security.sanitize.sanitizeYear(value);\n          case 'timePeriod':\n            return security.sanitize.sanitizeTimePeriod(value);\n          case 'text':\n            return security.sanitize.sanitizeText(value);\n          default:\n            return value;\n        }\n      } catch (error) {\n        handleSecurityViolation('invalid_input', { type, value, error: error.message });\n        throw error;\n      }\n    },\n    onCalculationSuccess: handleSuccessfulCalculation,\n    onCalculationError: (error: Error) => {\n      handleSecurityViolation('calculation_error', { error: error.message });\n    },\n    securityLevel: securityState.securityLevel\n  };\n\n  // Render security locked state\n  if (securityState.securityLevel === 'locked') {\n    return (\n      <div className=\"p-6 bg-red-50 border border-red-200 rounded-lg\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <Shield className=\"h-6 w-6 text-red-600\" />\n          <h3 className=\"text-lg font-semibold text-red-800\">Calculator Temporarily Locked</h3>\n        </div>\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription className=\"text-red-700\">\n            This calculator has been temporarily locked due to multiple security violations. \n            Please refresh the page to reset the security status.\n          </AlertDescription>\n        </Alert>\n        <Button \n          onClick={() => window.location.reload()} \n          className=\"mt-4 bg-red-600 hover:bg-red-700\"\n        >\n          Refresh Page\n        </Button>\n      </div>\n    );\n  }\n\n  // Render rate limited state\n  if (securityState.isRateLimited) {\n    return (\n      <div className=\"p-6 bg-yellow-50 border border-yellow-200 rounded-lg\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <Clock className=\"h-6 w-6 text-yellow-600\" />\n          <h3 className=\"text-lg font-semibold text-yellow-800\">Rate Limit Reached</h3>\n        </div>\n        <Alert className=\"border-yellow-200 bg-yellow-50\">\n          <Clock className=\"h-4 w-4\" />\n          <AlertDescription className=\"text-yellow-700\">\n            You've reached the maximum number of calculations for this hour. \n            Please wait a moment before trying again.\n          </AlertDescription>\n        </Alert>\n        <div className=\"mt-4 text-sm text-yellow-700\">\n          <p>Remaining requests: {securityState.remainingRequests}</p>\n          <p>Calculator: {calculatorName}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative\">\n      {/* Security Level Indicator */}\n      {securityState.securityLevel !== 'normal' && (\n        <div className=\"mb-4 p-3 bg-orange-50 border border-orange-200 rounded-lg\">\n          <div className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n            <span className=\"text-sm font-medium text-orange-800\">\n              Elevated Security Mode\n            </span>\n          </div>\n          <p className=\"text-sm text-orange-700 mt-1\">\n            Input validation has been strengthened due to recent security events.\n          </p>\n        </div>\n      )}\n\n      {/* Security Info Toggle */}\n      <div className=\"absolute top-2 right-2 z-10\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setShowSecurityInfo(!showSecurityInfo)}\n          className=\"h-8 w-8 p-0\"\n        >\n          <Shield className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Security Information Panel */}\n      {showSecurityInfo && (\n        <div className=\"mb-4 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n          <h4 className=\"font-semibold text-blue-800 mb-2\">Security Information</h4>\n          <div className=\"text-sm text-blue-700 space-y-1\">\n            <p>Calculator: {calculatorName}</p>\n            <p>Remaining calculations: {securityState.remainingRequests}</p>\n            <p>Security level: {securityState.securityLevel}</p>\n            <p>Last calculation: {securityState.lastCalculation?.toLocaleTimeString() || 'None'}</p>\n            <p>All inputs are sanitized and validated for security</p>\n            <p>Financial data is encrypted and stored securely</p>\n          </div>\n        </div>\n      )}\n\n      {/* Calculator Content with Security Context */}\n      <div className=\"calculator-content\">\n        {React.cloneElement(children as React.ReactElement, { \n          securityContext,\n          onSecurityEvent: handleSecurityViolation\n        })}\n      </div>\n\n      {/* Security Footer */}\n      <div className=\"mt-6 pt-4 border-t border-gray-200\">\n        <div className=\"flex items-center justify-between text-xs text-gray-500\">\n          <div className=\"flex items-center gap-2\">\n            <Shield className=\"h-3 w-3\" />\n            <span>Secured by Vueni Financial Security</span>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <span>Calculations: {100 - securityState.remainingRequests}/100</span>\n            <span>Security: {securityState.securityLevel}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Hook for secure calculator input handling\n */\nexport function useSecureCalculator(calculatorName: string) {\n  const [securityState, setSecurityState] = useState({\n    isRateLimited: false,\n    remainingRequests: 100\n  });\n\n  const validateAndSanitizeInput = (type: string, value: string | number) => {\n    // Check rate limit before processing\n    if (security.rateLimit.isRateLimited(`calculator:${calculatorName}`)) {\n      setSecurityState(prev => ({ ...prev, isRateLimited: true }));\n      throw new Error('Rate limit exceeded');\n    }\n\n    try {\n      switch (type) {\n        case 'amount':\n          return security.sanitize.sanitizeFinancialAmount(value);\n        case 'percentage':\n          return security.sanitize.sanitizePercentage(value);\n        case 'interestRate':\n          return security.sanitize.sanitizeInterestRate(value);\n        case 'year':\n          return security.sanitize.sanitizeYear(value);\n        case 'timePeriod':\n          return security.sanitize.sanitizeTimePeriod(value);\n        case 'text':\n          return security.sanitize.sanitizeText(value);\n        default:\n          return value;\n      }\n    } catch (error) {\n      VueniSecurityMonitoring.logEvent(\n        'INVALID_INPUT',\n        'medium',\n        `Invalid input in ${calculatorName}: ${error.message}`,\n        { calculatorName, type, value }\n      );\n      throw error;\n    }\n  };\n\n  const performSecureCalculation = async (calculationFn: () => any) => {\n    try {\n      // Update remaining requests\n      const remaining = security.rateLimit.getRemainingRequests(`calculator:${calculatorName}`);\n      setSecurityState(prev => ({ ...prev, remainingRequests: remaining }));\n\n      const result = await calculationFn();\n      \n      VueniSecurityMonitoring.logEvent(\n        'FINANCIAL_CALCULATION_SUCCESS',\n        'low',\n        `Successful calculation in ${calculatorName}`,\n        { calculatorName }\n      );\n\n      return result;\n    } catch (error) {\n      VueniSecurityMonitoring.logEvent(\n        'FINANCIAL_CALCULATION_ERROR',\n        'medium',\n        `Calculation error in ${calculatorName}: ${error.message}`,\n        { calculatorName, error: error.message }\n      );\n      throw error;\n    }\n  };\n\n  return {\n    validateAndSanitizeInput,\n    performSecureCalculation,\n    securityState,\n    isRateLimited: securityState.isRateLimited,\n    remainingRequests: securityState.remainingRequests\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/calculators/components/StockBacktestCalculator.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/calculators/components/StockBacktestCalculator.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { calculatePortfolioBacktest } from '@/shared/utils/calculators';\n\nconst StockBacktestCalculator = () => {\n  const [initial, setInitial] = useState(10000);\n  const [returns, setReturns] = useState<string>('10, -5, 12, 8, 6');\n  const [finalValue, setFinalValue] = useState<number | null>(null);\n\n  const handleCalculate = () => {\n    const annualReturns = returns\n      .split(',')\n      .map((r) => parseFloat(r.trim()))\n      .filter((n) => !isNaN(n));\n    const result = calculatePortfolioBacktest(initial, annualReturns);\n    setFinalValue(result);\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto p-4 space-y-4\">\n      <h1 className=\"text-xl font-bold text-white\">Stock Portfolio Backtest</h1>\n      <p className=\"text-white/70 text-sm\">Enter comma-separated annual returns (%) starting from the earliest year.</p>\n      <div className=\"space-y-2\">\n        <label className=\"block text-sm text-white/80\">\n          Initial Investment ($)\n          <input\n            type=\"number\"\n            value={initial}\n            onChange={(e) => setInitial(+e.target.value)}\n            className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\"\n          />\n        </label>\n        <label className=\"block text-sm text-white/80\">\n          Annual Returns (%)\n          <textarea\n            value={returns}\n            onChange={(e) => setReturns(e.target.value)}\n            className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\"\n            rows={3}\n          />\n        </label>\n      </div>\n              <button onClick={handleCalculate} className=\"w-full py-3 px-6 rounded-xl bg-white/10 hover:bg-white/20 border border-white/20 hover:border-white/30 text-white font-semibold transition-all duration-200\">\n        Calculate\n      </button>\n      {finalValue !== null && (\n        <div className=\"text-white mt-4\">\n          Final Value: <span className=\"font-semibold\">${finalValue}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default StockBacktestCalculator; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/calculators/components/ThreeFundPortfolioCalculator.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/calculators/components/ThreeFundPortfolioCalculator.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { calculateThreeFundPortfolioReturn } from '@/shared/utils/calculators';\n\nconst ThreeFundPortfolioCalculator = () => {\n  const [usReturn, setUsReturn] = useState(8);\n  const [intlReturn, setIntlReturn] = useState(7);\n  const [bondReturn, setBondReturn] = useState(3);\n  const [years, setYears] = useState(20);\n  const [totalGrowth, setTotalGrowth] = useState<number | null>(null);\n\n  const handleCalculate = () => {\n    const result = calculateThreeFundPortfolioReturn(usReturn, intlReturn, bondReturn, years);\n    setTotalGrowth(result);\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto p-4 space-y-4\">\n      <h1 className=\"text-xl font-bold text-white\">Bogleheads 3-Fund Portfolio Calculator</h1>\n      <p className=\"text-white/70 text-sm\">Assumes 40% US Stocks, 20% International, 40% Bonds.</p>\n      <div className=\"space-y-2\">\n        <label className=\"block text-sm text-white/80\">\n          Avg US Stock Annual Return (%)\n          <input type=\"number\" value={usReturn} onChange={(e) => setUsReturn(+e.target.value)} className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\" />\n        </label>\n        <label className=\"block text-sm text-white/80\">\n          Avg International Stock Annual Return (%)\n          <input type=\"number\" value={intlReturn} onChange={(e) => setIntlReturn(+e.target.value)} className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\" />\n        </label>\n        <label className=\"block text-sm text-white/80\">\n          Avg Bond Annual Return (%)\n          <input type=\"number\" value={bondReturn} onChange={(e) => setBondReturn(+e.target.value)} className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\" />\n        </label>\n        <label className=\"block text-sm text-white/80\">\n          Years\n          <input type=\"number\" value={years} onChange={(e) => setYears(+e.target.value)} className=\"w-full p-2 rounded bg-white/5 text-white border border-white/10\" />\n        </label>\n      </div>\n              <button onClick={handleCalculate} className=\"w-full py-3 px-6 rounded-xl bg-white/10 hover:bg-white/20 border border-white/20 hover:border-white/30 text-white font-semibold transition-all duration-200\">\n        Calculate\n      </button>\n      {totalGrowth !== null && (\n        <div className=\"text-white mt-4\">\n          Portfolio growth over {years} years: <span className=\"font-semibold\">{totalGrowth}%</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ThreeFundPortfolioCalculator; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/credit/api/creditScoreService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/credit/api/creditScoreService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CreditScore, CreditTip, ScoreHistoryPoint } from '@/shared/types/creditScore';\nimport { VueniSecureStorage } from '@/shared/utils/crypto';\n\nexport class CreditScoreService {\n  private static instance: CreditScoreService;\n  private storageKey = 'vueni:credit:score:v1';\n  \n  private constructor() {\n    // Initialize any persistent data loading if needed\n  }\n  \n  static getInstance(): CreditScoreService {\n    if (!CreditScoreService.instance) {\n      CreditScoreService.instance = new CreditScoreService();\n    }\n    return CreditScoreService.instance;\n  }\n\n  /**\n   * Caches credit score data securely for demo purposes\n   */\n  private cacheCreditData(data: CreditScore): void {\n    try {\n      VueniSecureStorage.setItem(this.storageKey, data, { sensitive: true, sessionOnly: true });\n    } catch (error) {\n      console.error('Failed to cache credit score data:', error);\n    }\n  }\n\n  /**\n   * Retrieves cached credit score data\n   */\n  private getCachedCreditData(): CreditScore | null {\n    try {\n      return VueniSecureStorage.getItem(this.storageKey);\n    } catch (error) {\n      console.error('Failed to retrieve cached credit data:', error);\n      return null;\n    }\n  }\n\n  async getCurrentScore(): Promise<CreditScore> {\n    // Check for cached data first (for demo purposes)\n    const cachedData = this.getCachedCreditData();\n    if (cachedData) {\n      return cachedData;\n    }\n\n    // Mock data for now - replace with actual API call\n    const scoreData: CreditScore = {\n      score: 750,\n      scoreRange: 'Very Good',\n      lastUpdated: new Date().toISOString(),\n      provider: 'FICO',\n      factors: [\n        {\n          factor: 'Payment History',\n          impact: 'High',\n          status: 'Positive',\n          description: 'You pay your bills on time',\n          percentage: 35\n        },\n        {\n          factor: 'Credit Utilization',\n          impact: 'High', \n          status: 'Negative',\n          description: 'Your credit utilization is high',\n          percentage: 30\n        },\n        {\n          factor: 'Length of Credit History',\n          impact: 'Medium',\n          status: 'Positive',\n          description: 'You have a good credit history length',\n          percentage: 15\n        },\n        {\n          factor: 'Credit Mix',\n          impact: 'Low',\n          status: 'Neutral',\n          description: 'You have a fair mix of credit types',\n          percentage: 10\n        },\n        {\n          factor: 'New Credit',\n          impact: 'Low',\n          status: 'Positive',\n          description: 'You haven\\'t opened many new accounts',\n          percentage: 10\n        }\n      ],\n      history: this.generateMockHistory()\n    };\n\n    // Cache the sensitive credit score data in session storage\n    this.cacheCreditData(scoreData);\n    return scoreData;\n  }\n\n  async getCreditTips(): Promise<CreditTip[]> {\n    return [\n      {\n        id: '1',\n        title: 'Pay down credit card balances',\n        description: 'Reduce your credit utilization to below 30%',\n        impact: 'High',\n        timeframe: '1-2 months',\n        category: 'Utilization'\n      },\n      {\n        id: '2', \n        title: 'Set up automatic payments',\n        description: 'Never miss a payment with auto-pay',\n        impact: 'High',\n        timeframe: 'Immediate',\n        category: 'Payment'\n      },\n      {\n        id: '3',\n        title: 'Keep old accounts open',\n        description: 'Maintain your credit history length',\n        impact: 'Medium',\n        timeframe: 'Ongoing',\n        category: 'Length'\n      },\n      {\n        id: '4',\n        title: 'Avoid opening new accounts',\n        description: 'Limit hard inquiries on your credit',\n        impact: 'Medium',\n        timeframe: '6 months',\n        category: 'Inquiries'\n      }\n    ];\n  }\n\n  private generateMockHistory(): ScoreHistoryPoint[] {\n    const history: ScoreHistoryPoint[] = [];\n    const currentScore = 750; // Match the current score\n    const baseScore = 680; // Starting score 12 months ago\n    \n    // Create a realistic progression over 12 months\n    const milestones = [\n      { month: 11, event: 'started', impact: 0 },\n      { month: 10, event: 'paid_down_debt', impact: 15 },\n      { month: 8, event: 'new_account', impact: -8 },\n      { month: 6, event: 'utilization_drop', impact: 25 },\n      { month: 4, event: 'payment_history', impact: 12 },\n      { month: 2, event: 'credit_age', impact: 8 },\n      { month: 0, event: 'final_adjustment', impact: 5 }\n    ];\n    \n    for (let i = 11; i >= 0; i--) {\n      const date = new Date();\n      date.setMonth(date.getMonth() - i);\n      \n      // Calculate progressive score improvement\n      const monthsProgressed = 11 - i;\n      const progressRatio = monthsProgressed / 11;\n      const baseProgressScore = baseScore + (currentScore - baseScore) * progressRatio;\n      \n      // Add milestone impacts\n      let milestoneImpact = 0;\n      milestones.forEach(milestone => {\n        if (i <= milestone.month) {\n          milestoneImpact += milestone.impact;\n        }\n      });\n      \n      // Add realistic variance (smaller for recent months)\n      const varianceRange = Math.max(5, 15 - monthsProgressed);\n      const variance = (Math.random() - 0.5) * varianceRange;\n      \n      // Calculate final score with bounds\n      let score = Math.round(baseProgressScore + milestoneImpact + variance);\n      score = Math.max(580, Math.min(850, score)); // Keep within realistic bounds\n      \n      // Calculate change from previous month\n      const change = i === 11 ? 0 : score - (history[history.length - 1]?.score || baseScore);\n      \n      history.push({\n        date: date.toISOString().split('T')[0],\n        score,\n        change\n      });\n    }\n    \n    // Ensure the last score matches our current score\n    if (history.length > 0) {\n      const lastPoint = history[history.length - 1];\n      const finalChange = currentScore - lastPoint.score;\n      history.push({\n        date: new Date().toISOString().split('T')[0],\n        score: currentScore,\n        change: finalChange\n      });\n    }\n    \n    return history;\n  }\n\n  /**\n   * Generate extended credit score history for trends analysis\n   */\n  getExtendedHistory(): ScoreHistoryPoint[] {\n    const history: ScoreHistoryPoint[] = [];\n    const currentScore = 750;\n    const startingScore = 620; // 24 months ago\n    \n    // Major credit events over 24 months\n    const majorEvents = [\n      { month: 23, event: 'late_payment', impact: -35 },\n      { month: 22, event: 'high_utilization', impact: -15 },\n      { month: 20, event: 'payment_plan', impact: 10 },\n      { month: 18, event: 'debt_consolidation', impact: 20 },\n      { month: 15, event: 'credit_line_increase', impact: 18 },\n      { month: 12, event: 'consistent_payments', impact: 12 },\n      { month: 10, event: 'new_account', impact: -5 },\n      { month: 8, event: 'utilization_drop', impact: 25 },\n      { month: 6, event: 'old_debt_paid', impact: 15 },\n      { month: 4, event: 'credit_mix_improvement', impact: 8 },\n      { month: 2, event: 'length_bonus', impact: 6 },\n      { month: 0, event: 'final_optimization', impact: 12 }\n    ];\n    \n    for (let i = 23; i >= 0; i--) {\n      const date = new Date();\n      date.setMonth(date.getMonth() - i);\n      \n      // Calculate progressive improvement\n      const monthsProgressed = 23 - i;\n      const baseProgressScore = startingScore + (currentScore - startingScore) * (monthsProgressed / 23);\n      \n      // Apply major events\n      let eventImpact = 0;\n      majorEvents.forEach(event => {\n        if (i <= event.month) {\n          eventImpact += event.impact;\n        }\n      });\n      \n      // Add seasonal and market variations\n      const seasonalVariation = Math.sin((date.getMonth() / 12) * 2 * Math.PI) * 8;\n      const marketVariation = Math.cos((monthsProgressed / 6) * Math.PI) * 5;\n      \n      // Random variance decreases over time (better stability)\n      const varianceRange = Math.max(3, 12 - (monthsProgressed * 0.4));\n      const randomVariance = (Math.random() - 0.5) * varianceRange;\n      \n      let score = Math.round(baseProgressScore + eventImpact + seasonalVariation + marketVariation + randomVariance);\n      score = Math.max(300, Math.min(850, score)); // FICO bounds\n      \n      const change = i === 23 ? 0 : score - (history[history.length - 1]?.score || startingScore);\n      \n      history.push({\n        date: date.toISOString().split('T')[0],\n        score,\n        change\n      });\n    }\n    \n    return history;\n  }\n\n  /**\n   * Get credit score insights and recommendations\n   */\n  getCreditInsights(): {\n    trajectory: 'improving' | 'declining' | 'stable';\n    monthlyChange: number;\n    projectedScore: number;\n    keyFactors: string[];\n  } {\n    const history = this.generateMockHistory();\n    const recentScores = history.slice(-3);\n    const averageChange = recentScores.reduce((sum, point) => sum + point.change, 0) / recentScores.length;\n    \n    let trajectory: 'improving' | 'declining' | 'stable' = 'stable';\n    if (averageChange > 2) trajectory = 'improving';\n    else if (averageChange < -2) trajectory = 'declining';\n    \n    const currentScore = history[history.length - 1]?.score || 750;\n    const projectedScore = Math.min(850, Math.max(300, currentScore + (averageChange * 3)));\n    \n    return {\n      trajectory,\n      monthlyChange: Math.round(averageChange),\n      projectedScore: Math.round(projectedScore),\n      keyFactors: [\n        'Payment history (35% impact)',\n        'Credit utilization (30% impact)', \n        'Length of credit history (15% impact)',\n        'Credit mix (10% impact)',\n        'New credit inquiries (10% impact)'\n      ]\n    };\n  }\n}\n\nexport const creditScoreService = CreditScoreService.getInstance(); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/credit/components/CleanCreditScoreCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/credit/components/CleanCreditScoreCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport SimpleGlassCard from '@/shared/ui/SimpleGlassCard';\nimport { vueniTheme } from '@/theme/unified';\nimport { \n  CreditCard, \n  TrendingUp, \n  TrendingDown,\n  ArrowRight,\n  Info\n} from 'lucide-react';\nimport { creditScoreService } from '@/features/credit/api/creditScoreService';\n\ninterface CreditScoreData {\n  score: number;\n  maxScore: number;\n  change: {\n    amount: number;\n    period: string;\n  };\n  utilization: number;\n  rating: string;\n  nextReviewDate: string;\n}\n\ninterface CleanCreditScoreCardProps {\n  creditData?: CreditScoreData;\n  onViewReport?: () => void;\n  className?: string;\n}\n\nconst CleanCreditScoreCard = ({ \n  creditData,\n  onViewReport,\n  className \n}: CleanCreditScoreCardProps) => {\n  const navigate = useNavigate();\n  const [data, setData] = useState<CreditScoreData | null>(creditData ?? null);\n  const [animatedScore, setAnimatedScore] = useState(0);\n  const [animatedUtilization, setAnimatedUtilization] = useState(0);\n\n  // Fetch data if not provided via props to keep in sync with CreditScorePage\n  useEffect(() => {\n    if (!data) {\n      (async () => {\n        try {\n          const current = await creditScoreService.getCurrentScore();\n          // Map service data to CreditScoreData shape\n          setData({\n            score: current.score,\n            maxScore: 850,\n            change: {\n              amount: current.score - 750, // Mock change calculation\n              period: 'last month'\n            },\n            utilization: current.factors?.find(f => f.factor === 'Credit Utilization')?.percentage ?? 23,\n            rating: current.scoreRange,\n            nextReviewDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()\n          });\n        } catch (e) {\n          console.error('Failed to fetch credit score for card', e);\n        }\n      })();\n    }\n  }, [data]);\n\n  useEffect(() => {\n    if (!data) return;\n    const timer = setTimeout(() => {\n      setAnimatedScore(data.score);\n      setAnimatedUtilization(data.utilization);\n    }, 300);\n    return () => clearTimeout(timer);\n  }, [data]);\n\n  const getScoreColor = (score: number) => {\n    if (score >= 740) return colors.status.success;\n    if (score >= 670) return colors.status.warning;\n    return colors.status.error;\n  };\n\n  const getScoreRating = (score: number) => {\n    if (score >= 800) return 'Excellent';\n    if (score >= 740) return 'Very Good';\n    if (score >= 670) return 'Good';\n    if (score >= 580) return 'Fair';\n    return 'Poor';\n  };\n\n  if (!data) {\n    return null; // or skeleton state (omitted for brevity)\n  }\n\n  const scorePercentage = (animatedScore / data.maxScore) * 100;\n  const circumference = 2 * Math.PI * 45; // radius of 45\n  const strokeDashoffset = circumference - (scorePercentage / 100) * circumference;\n\n  return (\n    <SimpleGlassCard className={`p-6 ${className || ''}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"p-2 rounded-xl bg-white/[0.06]\">\n            <CreditCard className=\"w-5 h-5 text-blue-400\" />\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-white\">Credit Score</h3>\n            <p className=\"text-white/60 text-sm\">Updated weekly</p>\n          </div>\n        </div>\n        \n        <button className=\"p-2 rounded-xl bg-white/[0.06] hover:bg-white/[0.08] transition-colors\">\n          <Info className=\"w-4 h-4 text-white/70\" />\n        </button>\n      </div>\n\n      {/* Credit Score Circle */}\n      <div className=\"flex items-center justify-center mb-6\">\n        <div className=\"relative w-32 h-32\">\n          <svg className=\"w-32 h-32 transform -rotate-90\" viewBox=\"0 0 100 100\">\n            {/* Background circle */}\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r=\"45\"\n              fill=\"none\"\n              stroke=\"rgba(255,255,255,0.1)\"\n              strokeWidth=\"6\"\n            />\n            {/* Progress circle */}\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r=\"45\"\n              fill=\"none\"\n              stroke={getScoreColor(data.score)}\n              strokeWidth=\"6\"\n              strokeLinecap=\"round\"\n              strokeDasharray={circumference}\n              strokeDashoffset={strokeDashoffset}\n              className=\"transition-all duration-1000 ease-out\"\n            />\n          </svg>\n          \n          {/* Score display */}\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n            <div \n              className=\"text-3xl font-bold\"\n              style={{ color: getScoreColor(data.score) }}\n            >\n              {animatedScore}\n            </div>\n            <div className=\"text-xs text-white/60\">\n              out of {data.maxScore}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Score Rating */}\n      <div className=\"text-center mb-6\">\n        <div \n          className=\"text-lg font-semibold mb-1\"\n          style={{ color: getScoreColor(data.score) }}\n        >\n          {getScoreRating(data.score)}\n        </div>\n        <div className=\"flex items-center justify-center gap-2\">\n          <div \n            className=\"flex items-center gap-1\"\n            style={{ \n              color: data.change.amount >= 0 ? colors.status.success : colors.status.error \n            }}\n          >\n            {data.change.amount >= 0 ? (\n              <TrendingUp className=\"w-4 h-4\" />\n            ) : (\n              <TrendingDown className=\"w-4 h-4\" />\n            )}\n            <span className=\"text-sm font-medium\">\n              {data.change.amount >= 0 ? '+' : ''}{data.change.amount}\n            </span>\n          </div>\n          <span className=\"text-white/60 text-sm\">\n            {data.change.period}\n          </span>\n        </div>\n      </div>\n\n      {/* Credit Utilization */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <span className=\"text-sm text-white/70\">Credit Utilization</span>\n          <span className=\"text-sm font-medium text-white\">\n            {animatedUtilization}%\n          </span>\n        </div>\n        \n        <div className=\"w-full bg-white/[0.06] rounded-full h-2\">\n          <div \n            className=\"h-2 rounded-full transition-all duration-1000 ease-out\"\n            style={{ \n              width: `${animatedUtilization}%`,\n              backgroundColor: animatedUtilization <= 30 \n                ? colors.status.success \n                : animatedUtilization <= 50 \n                ? colors.status.warning \n                : colors.status.error\n            }}\n          />\n        </div>\n        \n        <p className=\"text-xs text-white/50 mt-1\">\n          {animatedUtilization <= 30 ? 'Excellent' : animatedUtilization <= 50 ? 'Good' : 'High'} utilization\n        </p>\n      </div>\n\n      {/* Action Button */}\n      <button \n        onClick={() => {\n          if (onViewReport) {\n            onViewReport();\n          } else {\n            // Fallback: navigate to credit tab on dashboard\n            navigate('/?tab=credit');\n          }\n        }}\n        className=\"w-full flex items-center justify-between p-3 rounded-2xl bg-white/[0.06] hover:bg-white/[0.08] transition-all duration-200 group\"\n      >\n        <span className=\"text-white font-medium\">View Full Report</span>\n        <ArrowRight className=\"w-4 h-4 text-white/70 group-hover:translate-x-1 transition-transform\" />\n      </button>\n\n      {/* Next Review */}\n      <div className=\"mt-4 pt-4 border-t border-white/[0.08]\">\n        <p className=\"text-xs text-white/50 text-center\">\n          Next review: {new Date(data.nextReviewDate).toLocaleDateString()}\n        </p>\n      </div>\n    </SimpleGlassCard>\n  );\n};\n\nexport default CleanCreditScoreCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/credit/components/CreditEducation.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/credit/components/CreditEducation.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { BookOpen, ChevronDown, ChevronUp, Info } from 'lucide-react';\n\ninterface EducationTopic {\n  id: string;\n  title: string;\n  description: string;\n  content: string;\n  icon: string;\n}\n\nconst CreditEducation = () => {\n  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\n\n  const educationTopics: EducationTopic[] = [\n    {\n      id: 'what-is-credit-score',\n      title: 'What is a Credit Score?',\n      description: 'Understanding the basics of credit scores and how they work',\n      icon: '📊',\n      content: 'A credit score is a three-digit number between 300-850 that represents your creditworthiness. It\\'s calculated based on your credit history and helps lenders determine the risk of lending you money. Higher scores indicate lower risk and can lead to better loan terms and interest rates.'\n    },\n    {\n      id: 'factors-affecting-score',\n      title: 'Factors Affecting Your Score',\n      description: 'Learn what impacts your credit score the most',\n      icon: '⚖️',\n      content: 'Five main factors affect your credit score: Payment History (35%), Credit Utilization (30%), Length of Credit History (15%), Credit Mix (10%), and New Credit Inquiries (10%). Payment history has the biggest impact, so always pay your bills on time.'\n    },\n    {\n      id: 'improving-credit',\n      title: 'How to Improve Your Credit',\n      description: 'Actionable steps to boost your credit score',\n      icon: '📈',\n      content: 'To improve your credit score: 1) Pay all bills on time, 2) Keep credit utilization below 30%, 3) Don\\'t close old credit accounts, 4) Only apply for credit when necessary, 5) Monitor your credit report regularly, and 6) Consider becoming an authorized user on someone else\\'s account.'\n    },\n    {\n      id: 'credit-utilization',\n      title: 'Understanding Credit Utilization',\n      description: 'How much of your available credit you should use',\n      icon: '💳',\n      content: 'Credit utilization is the percentage of available credit you\\'re using. Keep it below 30% across all cards, and ideally below 10% for the best scores. For example, if you have a $1,000 credit limit, try to keep your balance below $100-300.'\n    },\n    {\n      id: 'credit-report-vs-score',\n      title: 'Credit Report vs Credit Score',\n      description: 'Understanding the difference between reports and scores',\n      icon: '📋',\n      content: 'Your credit report is a detailed record of your credit history, including accounts, payment history, and inquiries. Your credit score is a number calculated from the information in your credit report. You can get free credit reports annually from annualcreditreport.com.'\n    },\n    {\n      id: 'different-score-types',\n      title: 'Different Types of Credit Scores',\n      description: 'FICO vs VantageScore and industry-specific scores',\n      icon: '🔢',\n      content: 'There are different credit scoring models: FICO (most widely used by lenders), VantageScore, and industry-specific scores for auto loans or mortgages. Each may give you a slightly different score, but they all use similar factors to evaluate your creditworthiness.'\n    }\n  ];\n\n  const toggleTopic = (topicId: string) => {\n    setExpandedTopic(expandedTopic === topicId ? null : topicId);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center space-x-3\">\n        <BookOpen className=\"w-6 h-6 text-blue-400\" />\n        <h3 className=\"text-xl font-bold text-white\">Credit Education</h3>\n      </div>\n      \n      <div className=\"space-y-4\">\n        {educationTopics.map((topic) => (\n          <div key={topic.id} className=\"liquid-glass-card overflow-hidden\">\n            <button\n              onClick={() => toggleTopic(topic.id)}\n              className=\"w-full p-6 text-left focus:outline-none focus:ring-2 focus:ring-blue-400/50 rounded-lg\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"text-2xl\">{topic.icon}</div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"text-white font-semibold mb-1\">{topic.title}</h4>\n                    <p className=\"text-slate-400 text-sm\">{topic.description}</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex-shrink-0 ml-4\">\n                  {expandedTopic === topic.id ? (\n                    <ChevronUp className=\"w-5 h-5 text-slate-400\" />\n                  ) : (\n                    <ChevronDown className=\"w-5 h-5 text-slate-400\" />\n                  )}\n                </div>\n              </div>\n            </button>\n            \n            {expandedTopic === topic.id && (\n              <div className=\"px-6 pb-6\">\n                <div className=\"pt-4 border-t border-white/10\">\n                  <p className=\"text-slate-300 text-sm leading-relaxed\">\n                    {topic.content}\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"liquid-glass-card p-6\">\n        <div className=\"flex items-start space-x-3\">\n          <Info className=\"w-5 h-5 text-blue-400 mt-0.5 flex-shrink-0\" />\n          <div>\n            <h4 className=\"text-white font-semibold mb-2\">Need More Help?</h4>\n            <p className=\"text-slate-400 text-sm mb-4\">\n              Credit building takes time and consistency. If you have specific questions about your credit situation, consider speaking with a financial advisor or credit counselor.\n            </p>\n            <button className=\"bg-gradient-to-r from-blue-500 to-indigo-500 text-white py-2 px-4 rounded-lg text-sm font-medium hover:from-blue-600 hover:to-indigo-600 transition-all\">\n              Find a Credit Counselor\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreditEducation; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/credit/components/CreditFactors.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/credit/components/CreditFactors.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { CheckCircle, AlertCircle, Info } from 'lucide-react';\nimport { CreditFactor } from '@/types/creditScore';\n\ninterface CreditFactorsProps {\n  factors: CreditFactor[];\n}\n\nconst CreditFactors = ({ factors }: CreditFactorsProps) => {\n  const getImpactColor = (impact: string) => {\n    switch (impact) {\n      case 'High': return '#ef4444';\n      case 'Medium': return '#f97316';\n      case 'Low': return '#22c55e';\n      default: return '#64748b';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'Positive': return <CheckCircle className=\"w-5 h-5 text-green-400\" />;\n      case 'Negative': return <AlertCircle className=\"w-5 h-5 text-red-400\" />;\n      default: return <Info className=\"w-5 h-5 text-blue-400\" />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-xl font-bold text-white\">Credit Factors</h3>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {factors.map((factor, index) => (\n          <div key={index} className=\"liquid-glass-card p-6\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"flex items-center space-x-3\">\n                {getStatusIcon(factor.status)}\n                <div>\n                  <h4 className=\"text-white font-semibold\">{factor.factor}</h4>\n                  <span className=\"text-xs text-slate-400\">{factor.percentage}% of score</span>\n                </div>\n              </div>\n              <span \n                className=\"text-xs font-medium px-2 py-1 rounded-full\"\n                style={{ \n                  backgroundColor: `${getImpactColor(factor.impact)}20`,\n                  color: getImpactColor(factor.impact)\n                }}\n              >\n                {factor.impact} Impact\n              </span>\n            </div>\n            \n            <p className=\"text-slate-400 text-sm leading-relaxed\">\n              {factor.description}\n            </p>\n            \n            <div className=\"mt-4\">\n              <div className=\"w-full bg-slate-800/30 rounded-full h-2\">\n                <div \n                  className=\"h-2 rounded-full transition-all duration-1000\"\n                  style={{\n                    width: `${factor.percentage * 2.5}%`, // Scale for visual effect\n                    backgroundColor: factor.status === 'Positive' ? '#22c55e' : \n                                   factor.status === 'Negative' ? '#ef4444' : '#64748b'\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CreditFactors; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/credit/components/CreditScoreCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/credit/components/CreditScoreCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { TrendingUp, TrendingDown, AlertCircle, CheckCircle } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport AnimatedCircularProgress from '../insights/components/AnimatedCircularProgress';\nimport { creditScoreService } from '@/features/credit/api/creditScoreService';\nimport { CreditScore } from '@/types/creditScore';\nimport { UniversalCard } from '@/shared/ui/UniversalCard';\nimport { OptimizedScoreCard } from '@/features/insights/components/components/OptimizedScoreCard';\n\nconst CreditScoreCard = React.memo(() => {\n  const navigate = useNavigate();\n  const [creditScore, setCreditScore] = useState<CreditScore | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const loadCreditScore = async () => {\n      try {\n        const score = await creditScoreService.getCurrentScore();\n        setCreditScore(score);\n      } catch (error) {\n        console.error('Failed to load credit score:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadCreditScore();\n  }, []);\n\n  const getScoreColor = useMemo(() => (score: number) => {\n    if (score >= 800) return '#22c55e'; // Excellent\n    if (score >= 740) return '#84cc16'; // Very Good  \n    if (score >= 670) return '#eab308'; // Good\n    if (score >= 580) return '#f97316'; // Fair\n    return '#ef4444'; // Poor\n  }, []);\n\n  const getScoreDescription = useMemo(() => {\n    const descriptions = {\n      'Excellent': 'You have excellent credit! Keep up the great work.',\n      'Very Good': 'Your credit is in great shape with room for small improvements.',\n      'Good': 'You have good credit with opportunities to improve.',\n      'Fair': 'Your credit is fair. Focus on improvement strategies.',\n      'Poor': 'Work on building your credit with consistent payments.'\n    };\n    return (range: string) => descriptions[range as keyof typeof descriptions] || '';\n  }, []);\n\n  const handleViewFullReport = useCallback(() => {\n    navigate('/credit-score');\n  }, [navigate]);\n\n  if (loading) {\n    return (\n      <div className=\"liquid-glass-card p-6 animate-pulse\">\n        <div className=\"h-8 bg-slate-700 rounded mb-4\"></div>\n        <div className=\"h-32 bg-slate-700 rounded mb-4\"></div>\n        <div className=\"h-4 bg-slate-700 rounded\"></div>\n      </div>\n    );\n  }\n\n  if (!creditScore) {\n    return (\n      <div className=\"liquid-glass-card p-6\">\n        <div className=\"text-center\">\n          <AlertCircle className=\"w-12 h-12 text-orange-400 mx-auto mb-4\" />\n          <h3 className=\"text-white text-lg font-semibold mb-2\">Credit Score Unavailable</h3>\n          <p className=\"text-slate-400 text-sm\">We're working to get your credit score. Check back soon!</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <UniversalCard variant=\"glass\" className=\"p-6\" interactive>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-2xl font-black text-white tracking-wide\">Credit Score</h3>\n        <div className=\"text-xs text-slate-400 font-medium italic\">\n          Updated {new Date(creditScore.lastUpdated).toLocaleDateString()}\n        </div>\n      </div>\n\n      {/* Optimized Score Display */}\n      <div className=\"mb-6\">\n        <OptimizedScoreCard\n          data={{\n            score: creditScore.score,\n            maxScore: 850,\n            label: creditScore.scoreRange,\n            description: getScoreDescription(creditScore.scoreRange),\n            color: getScoreColor(creditScore.score),\n            trend: {\n              direction: 'up',\n              percentage: 5\n            }\n          }}\n          variant=\"enhanced\"\n          size=\"lg\"\n        />\n      </div>\n\n      {/* Quick Factors */}\n      <div className=\"space-y-3 mb-6\">\n        <h4 className=\"text-white font-black text-sm tracking-wide\">Key Factors</h4>\n        {creditScore.factors.slice(0, 3).map((factor, index) => (\n          <div key={index} className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              {factor.status === 'Positive' ? (\n                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n              ) : factor.status === 'Negative' ? (\n                <AlertCircle className=\"w-4 h-4 text-orange-400\" />\n              ) : (\n                <div className=\"w-4 h-4 rounded-full bg-slate-500\" />\n              )}\n              <span className=\"text-slate-300 text-sm\">{factor.factor}</span>\n            </div>\n            <span className=\"text-xs text-slate-400\">{factor.percentage}%</span>\n          </div>\n        ))}\n      </div>\n\n      {/* Optimized Action Button */}\n      <UniversalCard\n        variant=\"glass\"\n        className=\"cursor-pointer hover:scale-105 transition-transform\"\n        interactive\n        onClick={handleViewFullReport}\n      >\n        <div className=\"py-3 text-center\">\n          <span className=\"text-white font-bold text-lg tracking-wide\">\n            View Full Credit Report\n          </span>\n        </div>\n      </UniversalCard>\n    </UniversalCard>\n  );\n});\n\nCreditScoreCard.displayName = 'CreditScoreCard';\n\nexport default CreditScoreCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/credit/components/CreditScorePage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/credit/components/CreditScorePage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { ArrowLeft, TrendingUp, TrendingDown, Info, CheckCircle, AlertCircle, CreditCard, Calendar, Percent } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { creditScoreService } from '@/features/credit/api/creditScoreService';\nimport { CreditScore, CreditTip } from '@/types/creditScore';\nimport { cn } from '@/shared/lib/utils';\n\nconst CreditScorePage = () => {\n  const navigate = useNavigate();\n  const [creditScore, setCreditScore] = useState<CreditScore | null>(null);\n  const [creditTips, setCreditTips] = useState<CreditTip[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState<'overview' | 'factors' | 'history' | 'tips'>('overview');\n  const [scoreHistory, setScoreHistory] = useState<CreditScore[]>([]);\n\n  useEffect(() => {\n    const loadCreditData = async () => {\n      try {\n        const [score, tips] = await Promise.all([\n          creditScoreService.getCurrentScore(),\n          creditScoreService.getCreditTips()\n        ]);\n        setCreditScore(score);\n        setCreditTips(tips);\n      } catch (error) {\n        console.error('Failed to load credit data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadCreditData();\n  }, []);\n\n  const getScoreColor = (score: number) => {\n    if (score >= 800) return '#22c55e'; // Excellent\n    if (score >= 740) return '#84cc16'; // Very Good  \n    if (score >= 670) return '#eab308'; // Good\n    if (score >= 580) return '#f97316'; // Fair\n    return '#ef4444'; // Poor\n  };\n\n  const getScoreColorClass = (score: number) => {\n    if (score >= 800) return 'text-green-500';\n    if (score >= 740) return 'text-lime-500';\n    if (score >= 670) return 'text-yellow-500';\n    if (score >= 580) return 'text-orange-500';\n    return 'text-red-500';\n  };\n\n  // Mobile-first responsive CircularProgress component\n  const CircularProgress = ({ value, maxValue }: { value: number; maxValue: number }) => {\n    const radius = 70; // Fixed radius for calculations\n    const circumference = 2 * Math.PI * radius;\n    const progress = (value / maxValue) * circumference;\n    \n    return (\n      <div className=\"relative flex items-center justify-center\">\n        {/* Responsive SVG container */}\n        <div className=\"w-32 h-32 sm:w-40 sm:h-40 md:w-48 md:h-48 lg:w-56 lg:h-56\">\n          <svg \n            width=\"100%\" \n            height=\"100%\" \n            viewBox=\"0 0 160 160\" \n            className=\"transform -rotate-90\"\n          >\n            <circle\n              cx=\"80\"\n              cy=\"80\"\n              r={radius}\n              stroke=\"rgb(30 41 59)\"\n              strokeWidth=\"8\"\n              fill=\"none\"\n            />\n            <circle\n              cx=\"80\"\n              cy=\"80\"\n              r={radius}\n              stroke={getScoreColor(value)}\n              strokeWidth=\"8\"\n              fill=\"none\"\n              strokeDasharray={circumference}\n              strokeDashoffset={circumference - progress}\n              strokeLinecap=\"round\"\n              className=\"transition-all duration-1000 ease-out\"\n            />\n          </svg>\n        </div>\n        \n        {/* Responsive score display */}\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold text-white\">\n              {value}\n            </div>\n            <div className=\"text-xs sm:text-sm md:text-base text-gray-400\">\n              out of {maxValue}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-black text-white\">\n        <div className=\"responsive-padding-md space-y-4 sm:space-y-6 animate-pulse\">\n          <div className=\"h-6 sm:h-8 bg-white/[0.05] rounded w-32 sm:w-48\"></div>\n          <div className=\"h-48 sm:h-64 md:h-80 bg-white/[0.02] rounded-2xl sm:rounded-3xl border border-white/[0.08]\"></div>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 sm:gap-6\">\n            <div className=\"h-24 sm:h-32 bg-white/[0.02] rounded-2xl sm:rounded-3xl border border-white/[0.08]\"></div>\n            <div className=\"h-24 sm:h-32 bg-white/[0.02] rounded-2xl sm:rounded-3xl border border-white/[0.08]\"></div>\n            <div className=\"h-24 sm:h-32 bg-white/[0.02] rounded-2xl sm:rounded-3xl border border-white/[0.08] sm:block hidden\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!creditScore) {\n    return (\n      <div className=\"min-h-screen bg-black text-white\">\n        <div className=\"responsive-padding-md space-y-6 sm:space-y-8\">\n          <button\n            onClick={() => navigate('/')}\n            className=\"flex items-center gap-2 px-3 py-2 rounded-xl text-white/80 hover:text-white hover:bg-white/[0.05] transition-colors min-h-[44px]\"\n          >\n            <ArrowLeft className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n            <span className=\"text-sm sm:text-base\">Dashboard</span>\n          </button>\n\n          <div className=\"bg-white/[0.02] rounded-2xl sm:rounded-3xl border border-white/[0.08] p-6 sm:p-8 text-center\">\n            <AlertCircle className=\"w-12 h-12 sm:w-16 sm:h-16 text-orange-400 mx-auto mb-4\" />\n            <h2 className=\"text-xl sm:text-2xl font-bold mb-2\">Credit Score Unavailable</h2>\n            <p className=\"text-gray-400 text-sm sm:text-base\">We're working to get your credit score. Check back soon!</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <div className=\"responsive-padding-md space-y-6 sm:space-y-8\">\n        {/* Back to Dashboard */}\n        <button\n          onClick={() => navigate('/')}\n          className=\"flex items-center gap-2 px-3 py-2 rounded-xl text-white/80 hover:text-white hover:bg-white/[0.05] transition-colors min-h-[44px]\"\n        >\n          <ArrowLeft className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n          <span className=\"text-sm sm:text-base\">Dashboard</span>\n        </button>\n\n        {/* Header */}\n        <div className=\"text-center space-y-1 sm:space-y-2\">\n          <h1 className=\"text-2xl sm:text-3xl md:text-4xl font-bold\">Credit Score</h1>\n          <p className=\"text-gray-400 text-sm sm:text-base\">\n            Updated {new Date(creditScore.lastUpdated).toLocaleDateString()}\n          </p>\n        </div>\n\n        {/* Score Overview Card */}\n        <div className=\"bg-white/[0.02] rounded-2xl sm:rounded-3xl border border-white/[0.08] p-4 sm:p-6 md:p-8\">\n          <div className=\"flex flex-col lg:flex-row items-center lg:items-start gap-6 sm:gap-8\">\n            {/* Score Display */}\n            <div className=\"text-center flex-shrink-0 w-full lg:w-auto\">\n              <CircularProgress\n                value={creditScore.score}\n                maxValue={850}\n              />\n              \n              <div className=\"mt-4 sm:mt-6\">\n                <div className={cn('text-lg sm:text-xl font-semibold mb-2', getScoreColorClass(creditScore.score))}>\n                  {creditScore.scoreRange} Credit\n                </div>\n                <div className=\"text-xs sm:text-sm text-gray-500 bg-white/[0.05] px-3 py-1 rounded-full inline-block\">\n                  {creditScore.provider} Score\n                </div>\n              </div>\n            </div>\n\n            {/* Score Details */}\n            <div className=\"flex-1 space-y-4 sm:space-y-6 w-full\">\n              <div>\n                <h3 className=\"text-lg sm:text-xl font-bold text-white mb-3 sm:mb-4\">Credit Score Ranges</h3>\n                <div className=\"space-y-2 sm:space-y-3\">\n                  {[\n                    { range: '800-850', label: 'Excellent', color: 'bg-green-500', current: creditScore.score >= 800 && creditScore.score <= 850 },\n                    { range: '740-799', label: 'Very Good', color: 'bg-lime-500', current: creditScore.score >= 740 && creditScore.score <= 799 },\n                    { range: '670-739', label: 'Good', color: 'bg-yellow-500', current: creditScore.score >= 670 && creditScore.score <= 739 },\n                    { range: '580-669', label: 'Fair', color: 'bg-orange-500', current: creditScore.score >= 580 && creditScore.score <= 669 },\n                    { range: '300-579', label: 'Poor', color: 'bg-red-500', current: creditScore.score >= 300 && creditScore.score <= 579 }\n                  ].map((item, index) => (\n                    <div \n                      key={index} \n                      className={cn(\n                        'flex items-center justify-between p-3 sm:p-4 rounded-lg transition-all min-h-[44px]',\n                        item.current ? 'bg-white/[0.05] border border-white/[0.1]' : 'hover:bg-white/[0.02]'\n                      )}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={cn('w-3 h-3 rounded-full', item.color)} />\n                        <span className={cn('font-medium text-sm sm:text-base', item.current ? 'text-white' : 'text-gray-300')}>\n                          {item.label}\n                        </span>\n                        {item.current && (\n                          <CheckCircle className=\"w-4 h-4 text-blue-400\" />\n                        )}\n                      </div>\n                      <span className=\"text-gray-400 text-xs sm:text-sm\">{item.range}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"bg-white/[0.02] rounded-lg p-4 border border-white/[0.05]\">\n                <h4 className=\"text-base sm:text-lg font-semibold text-white mb-2\">What this means</h4>\n                <p className=\"text-gray-300 text-sm sm:text-base leading-relaxed\">\n                  With a {creditScore.scoreRange.toLowerCase()} credit score, you may qualify for most loans and credit cards with competitive rates. Continue building your credit for even better terms.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Tab Navigation - Mobile-first responsive */}\n        <div className=\"bg-white/[0.02] rounded-2xl sm:rounded-3xl p-1 border border-white/[0.08]\">\n          {/* Mobile: Scrollable tabs */}\n          <div className=\"flex sm:hidden overflow-x-auto gap-1 pb-1 scrollbar-hide\">\n            {[\n              { id: 'overview', label: 'Overview', icon: Info },\n              { id: 'factors', label: 'Factors', icon: Percent },\n              { id: 'history', label: 'History', icon: TrendingUp },\n              { id: 'tips', label: 'Tips', icon: CheckCircle }\n            ].map((tab) => {\n              const IconComponent = tab.icon;\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id as typeof activeTab)}\n                  className={cn(\n                    'flex items-center gap-2 px-3 py-2 rounded-lg transition-all text-xs whitespace-nowrap flex-shrink-0 min-h-[44px] min-w-[80px]',\n                    activeTab === tab.id\n                      ? 'bg-blue-500 text-white'\n                      : 'text-gray-400 hover:text-white hover:bg-white/[0.05]'\n                  )}\n                >\n                  <IconComponent className=\"w-3 h-3\" />\n                  {tab.label}\n                </button>\n              );\n            })}\n          </div>\n          \n          {/* Desktop: Grid tabs */}\n          <div className=\"hidden sm:grid grid-cols-4 gap-1\">\n            {[\n              { id: 'overview', label: 'Overview', icon: Info },\n              { id: 'factors', label: 'Credit Factors', icon: Percent },\n              { id: 'history', label: 'Score History', icon: TrendingUp },\n              { id: 'tips', label: 'Improvement Tips', icon: CheckCircle }\n            ].map((tab) => {\n              const IconComponent = tab.icon;\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id as typeof activeTab)}\n                  className={cn(\n                    'flex items-center justify-center gap-2 px-4 py-3 text-sm font-medium rounded-lg transition-all min-h-[48px]',\n                    activeTab === tab.id\n                      ? 'bg-blue-500 text-white shadow-lg'\n                      : 'text-gray-400 hover:text-white hover:bg-white/[0.05]'\n                  )}\n                >\n                  <IconComponent className=\"w-4 h-4\" />\n                  <span className=\"hidden md:inline\">{tab.label}</span>\n                  <span className=\"md:hidden\">{tab.label.split(' ')[0]}</span>\n                </button>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Tab Content */}\n        <div className=\"space-y-4 sm:space-y-6\">\n          {activeTab === 'overview' && (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6\">\n              <div className=\"bg-white/[0.02] rounded-2xl sm:rounded-3xl border border-white/[0.08] p-4 sm:p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-blue-500/20 rounded-lg flex items-center justify-center\">\n                    <CreditCard className=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-400\" />\n                  </div>\n                  <div className=\"min-w-0 flex-1\">\n                    <h3 className=\"font-semibold text-white text-sm sm:text-base\">Credit Utilization</h3>\n                    <p className=\"text-xs sm:text-sm text-gray-400\">Payment history impact</p>\n                  </div>\n                </div>\n                <div className=\"text-xl sm:text-2xl font-bold text-white mb-1\">23%</div>\n                <div className=\"text-xs sm:text-sm text-green-400\">Excellent</div>\n              </div>\n\n              <div className=\"bg-white/[0.02] rounded-2xl sm:rounded-3xl border border-white/[0.08] p-4 sm:p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-green-500/20 rounded-lg flex items-center justify-center\">\n                    <Calendar className=\"w-5 h-5 sm:w-6 sm:h-6 text-green-400\" />\n                  </div>\n                  <div className=\"min-w-0 flex-1\">\n                    <h3 className=\"font-semibold text-white text-sm sm:text-base\">Payment History</h3>\n                    <p className=\"text-xs sm:text-sm text-gray-400\">On-time payments</p>\n                  </div>\n                </div>\n                <div className=\"text-xl sm:text-2xl font-bold text-white mb-1\">100%</div>\n                <div className=\"text-xs sm:text-sm text-green-400\">Perfect record</div>\n              </div>\n\n              <div className=\"bg-white/[0.02] rounded-2xl sm:rounded-3xl border border-white/[0.08] p-4 sm:p-6 sm:col-span-2 lg:col-span-1\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-purple-500/20 rounded-lg flex items-center justify-center\">\n                    <TrendingUp className=\"w-5 h-5 sm:w-6 sm:h-6 text-purple-400\" />\n                  </div>\n                  <div className=\"min-w-0 flex-1\">\n                    <h3 className=\"font-semibold text-white text-sm sm:text-base\">Credit Age</h3>\n                    <p className=\"text-xs sm:text-sm text-gray-400\">Average account age</p>\n                  </div>\n                </div>\n                <div className=\"text-xl sm:text-2xl font-bold text-white mb-1\">7.2 yrs</div>\n                <div className=\"text-xs sm:text-sm text-yellow-400\">Good length</div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'factors' && (\n            <div className=\"bg-white/[0.02] rounded-2xl sm:rounded-3xl border border-white/[0.08] p-4 sm:p-6\">\n              <h3 className=\"text-lg sm:text-xl font-bold text-white mb-4 sm:mb-6\">Factors Affecting Your Score</h3>\n              <div className=\"space-y-3 sm:space-y-4\">\n                {creditScore.factors?.map((factor, index) => (\n                  <div key={index} className=\"flex flex-col sm:flex-row sm:items-center justify-between p-3 sm:p-4 bg-white/[0.02] rounded-lg gap-3 sm:gap-0\">\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"font-medium text-white text-sm sm:text-base\">{factor.factor}</div>\n                      <div className=\"text-xs sm:text-sm text-gray-400 mt-1\">{factor.description}</div>\n                    </div>\n                    <div className=\"text-left sm:text-right\">\n                      <div className={cn(\n                        'text-xs sm:text-sm font-medium',\n                        factor.impact === 'High' && 'text-red-400',\n                        factor.impact === 'Medium' && 'text-yellow-400',\n                        factor.impact === 'Low' && 'text-green-400'\n                      )}>\n                        {factor.impact} Impact\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'history' && (\n            <div className=\"bg-white/[0.02] rounded-2xl sm:rounded-3xl border border-white/[0.08] p-4 sm:p-6\">\n              <h3 className=\"text-lg sm:text-xl font-bold text-white mb-4 sm:mb-6\">Score History</h3>\n              <div className=\"text-center py-8 sm:py-12 text-gray-400\">\n                <TrendingUp className=\"w-12 h-12 sm:w-16 sm:h-16 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-sm sm:text-base\">Score history visualization coming soon</p>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'tips' && (\n            <div className=\"space-y-3 sm:space-y-4\">\n              {creditTips.map((tip, index) => (\n                <div key={index} className=\"bg-white/[0.02] rounded-2xl sm:rounded-3xl border border-white/[0.08] p-4 sm:p-6\">\n                  <div className=\"flex flex-col sm:flex-row sm:items-start space-y-4 sm:space-y-0 sm:space-x-4\">\n                    <div className={cn(\n                      'w-10 h-10 rounded-lg flex items-center justify-center flex-shrink-0',\n                      tip.impact === 'High' && 'bg-red-500/20',\n                      tip.impact === 'Medium' && 'bg-yellow-500/20',\n                      tip.impact === 'Low' && 'bg-green-500/20'\n                    )}>\n                      <CheckCircle className={cn(\n                        'w-5 h-5',\n                        tip.impact === 'High' && 'text-red-400',\n                        tip.impact === 'Medium' && 'text-yellow-400',\n                        tip.impact === 'Low' && 'text-green-400'\n                      )} />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between mb-2 gap-2\">\n                        <h4 className=\"font-semibold text-white text-sm sm:text-base\">{tip.title}</h4>\n                        <span className={cn(\n                          'text-xs px-2 py-1 rounded-full w-fit',\n                          tip.impact === 'High' && 'bg-red-500/20 text-red-400',\n                          tip.impact === 'Medium' && 'bg-yellow-500/20 text-yellow-400',\n                          tip.impact === 'Low' && 'bg-green-500/20 text-green-400'\n                        )}>\n                          {tip.impact}\n                        </span>\n                      </div>\n                      <p className=\"text-gray-300 text-xs sm:text-sm leading-relaxed mb-3\">{tip.description}</p>\n                      <div className=\"flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-4 text-xs sm:text-sm\">\n                        <div>\n                          <span className=\"text-gray-400\">Category:</span>\n                          <span className=\"text-blue-400 ml-1\">{tip.category}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-400\">Timeframe:</span>\n                          <span className=\"text-blue-400 ml-1\">{tip.timeframe}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreditScorePage; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/credit/components/CreditTips.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/credit/components/CreditTips.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Lightbulb, Clock, TrendingUp } from 'lucide-react';\nimport { CreditTip } from '@/types/creditScore';\n\ninterface CreditTipsProps {\n  tips: CreditTip[];\n}\n\nconst CreditTips = ({ tips }: CreditTipsProps) => {\n  const getImpactColor = (impact: string) => {\n    switch (impact) {\n      case 'High': return '#ef4444';\n      case 'Medium': return '#f97316';\n      case 'Low': return '#22c55e';\n      default: return '#64748b';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'Payment': return '💳';\n      case 'Utilization': return '📊';\n      case 'Length': return '📅';\n      case 'Mix': return '🔄';\n      case 'Inquiries': return '🔍';\n      default: return '💡';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center space-x-3\">\n        <Lightbulb className=\"w-6 h-6 text-yellow-400\" />\n        <h3 className=\"text-xl font-bold text-white\">Credit Improvement Tips</h3>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {tips.map((tip) => (\n          <div key={tip.id} className=\"liquid-glass-card p-6\">\n            <div className=\"flex items-start space-x-4 mb-4\">\n              <div className=\"text-2xl\">{getCategoryIcon(tip.category)}</div>\n              <div className=\"flex-1\">\n                <h4 className=\"text-white font-semibold mb-2\">{tip.title}</h4>\n                <p className=\"text-slate-400 text-sm leading-relaxed\">\n                  {tip.description}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"w-4 h-4 text-slate-400\" />\n                <span className=\"text-slate-400 text-xs\">{tip.timeframe}</span>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <span \n                  className=\"text-xs font-medium px-3 py-1 rounded-full\"\n                  style={{ \n                    backgroundColor: `${getImpactColor(tip.impact)}20`,\n                    color: getImpactColor(tip.impact)\n                  }}\n                >\n                  {tip.impact} Impact\n                </span>\n                <span className=\"text-xs text-slate-400 bg-slate-800/30 px-2 py-1 rounded-full\">\n                  {tip.category}\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"mt-4 pt-4 border-t border-white/10\">\n              <button className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 text-white py-2 px-4 rounded-lg text-sm font-medium hover:from-green-600 hover:to-emerald-600 transition-all\">\n                <div className=\"flex items-center justify-center space-x-2\">\n                  <TrendingUp className=\"w-4 h-4\" />\n                  <span>Start Improving</span>\n                </div>\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CreditTips; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/credit/components/ScoreHistory.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/credit/components/ScoreHistory.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { TrendingUp, TrendingDown, Minus } from 'lucide-react';\nimport { ScoreHistoryPoint } from '@/types/creditScore';\n\ninterface ScoreHistoryProps {\n  history: ScoreHistoryPoint[];\n}\n\nconst ScoreHistory = ({ history }: ScoreHistoryProps) => {\n  const getScoreColor = (score: number) => {\n    if (score >= 800) return '#22c55e'; // Excellent\n    if (score >= 740) return '#84cc16'; // Very Good  \n    if (score >= 670) return '#eab308'; // Good\n    if (score >= 580) return '#f97316'; // Fair\n    return '#ef4444'; // Poor\n  };\n\n  const getChangeIcon = (change: number) => {\n    if (change > 0) return <TrendingUp className=\"w-4 h-4 text-green-400\" />;\n    if (change < 0) return <TrendingDown className=\"w-4 h-4 text-red-400\" />;\n    return <Minus className=\"w-4 h-4 text-slate-400\" />;\n  };\n\n  const getChangeColor = (change: number) => {\n    if (change > 0) return 'text-green-400';\n    if (change < 0) return 'text-red-400';\n    return 'text-slate-400';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-xl font-bold text-white\">Score History</h3>\n      \n      <div className=\"liquid-glass-card p-6\">\n        <div className=\"space-y-4\">\n          {history.slice(-12).map((point, index) => (\n            <div \n              key={index} \n              className=\"flex items-center justify-between py-4 border-b border-white/10 last:border-b-0\"\n            >\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-slate-300 font-medium text-sm\">\n                    {new Date(point.date).toLocaleDateString('en-US', { \n                      month: 'short', \n                      day: 'numeric',\n                      year: 'numeric' \n                    })}\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-3\">\n                  <div \n                    className=\"text-2xl font-bold\"\n                    style={{ color: getScoreColor(point.score) }}\n                  >\n                    {point.score}\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-1\">\n                    {getChangeIcon(point.change)}\n                    {point.change !== 0 && (\n                      <span className={`text-sm font-medium ${getChangeColor(point.change)}`}>\n                        {point.change > 0 ? '+' : ''}{point.change}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"text-right\">\n                <div className=\"text-xs text-slate-400\">\n                  {point.score >= 800 ? 'Excellent' :\n                   point.score >= 740 ? 'Very Good' :\n                   point.score >= 670 ? 'Good' :\n                   point.score >= 580 ? 'Fair' : 'Poor'}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"mt-6 pt-6 border-t border-white/10\">\n          <div className=\"text-center\">\n            <div className=\"text-slate-400 text-sm mb-2\">12-Month Trend</div>\n            <div className=\"flex items-center justify-center space-x-4\">\n              {(() => {\n                const firstScore = history[0]?.score || 0;\n                const lastScore = history[history.length - 1]?.score || 0;\n                const overallChange = lastScore - firstScore;\n                \n                return (\n                  <>\n                    <div className=\"flex items-center space-x-1\">\n                      {getChangeIcon(overallChange)}\n                      <span className={`font-semibold ${getChangeColor(overallChange)}`}>\n                        {overallChange > 0 ? '+' : ''}{overallChange} points\n                      </span>\n                    </div>\n                    <div className=\"text-slate-400 text-sm\">\n                      Since {new Date(history[0]?.date || new Date()).toLocaleDateString('en-US', { \n                        month: 'short', \n                        year: 'numeric' \n                      })}\n                    </div>\n                  </>\n                );\n              })()}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ScoreHistory; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/dashboard/api/visualizationService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/dashboard/api/visualizationService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { familyService } from '@/features/shared-budgets/api/familyService';\nimport { accountService } from '@/features/accounts/api/accountService';\nimport { transactionService } from '@/features/transactions/api/transactionService';\nimport { investmentService } from '@/features/investments/api/investmentService';\nimport { budgetService } from '@/features/budget/api/budgetService';\nimport { Transaction } from '@/shared/types/accounts';\n\nexport interface ChartDataPoint {\n  date: string;\n  value: number;\n  category?: string;\n  label?: string;\n  color?: string;\n}\n\nexport interface NetWorthData {\n  date: string;\n  assets: number;\n  liabilities: number;\n  netWorth: number;\n  investmentValue: number;\n  cashValue: number;\n}\n\nexport interface CashFlowData {\n  date: string;\n  income: number;\n  expenses: number;\n  netCashFlow: number;\n  monthlyAverage: number;\n}\n\nexport interface SpendingTrendData {\n  category: string;\n  currentMonth: number;\n  previousMonth: number;\n  change: number;\n  changePercent: number;\n  trend: 'up' | 'down' | 'stable';\n  color: string;\n}\n\nexport interface PortfolioAllocationData {\n  name: string;\n  value: number;\n  percentage: number;\n  color: string;\n  change?: number;\n  changePercent?: number;\n}\n\nexport interface BudgetPerformanceData {\n  category: string;\n  budgeted: number;\n  spent: number;\n  remaining: number;\n  progress: number;\n  status: 'on-track' | 'warning' | 'over-budget';\n  color: string;\n}\n\nexport interface FinancialMetric {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  changePercent: number;\n  trend: 'up' | 'down' | 'stable';\n  format: 'currency' | 'percentage' | 'number';\n  color: string;\n  icon: string;\n}\n\nexport interface SpendingInsight {\n  type: 'warning' | 'success' | 'info';\n  title: string;\n  description: string;\n  value: number;\n  category: string;\n}\n\nexport interface DashboardData {\n  netWorthHistory: NetWorthData[];\n  cashFlowHistory: CashFlowData[];\n  spendingTrends: SpendingTrendData[];\n  portfolioAllocation: PortfolioAllocationData[];\n  budgetPerformance: BudgetPerformanceData[];\n  keyMetrics: FinancialMetric[];\n  lastUpdated: Date;\n}\n\n/**\n * Visualization Service\n * Aggregates and transforms financial data for dashboard visualizations\n */\nexport class VisualizationService {\n  private static instance: VisualizationService;\n\n  static getInstance(): VisualizationService {\n    if (!VisualizationService.instance) {\n      VisualizationService.instance = new VisualizationService();\n    }\n    return VisualizationService.instance;\n  }\n\n  /**\n   * Get comprehensive dashboard data for a family\n   */\n  async getDashboardData(familyId: string, timeframe: '1m' | '3m' | '6m' | '1y' = '3m'): Promise<DashboardData> {\n    try {\n      // Convert timeframe to months\n      const months = this.convertTimeframeToMonths(timeframe);\n      \n      // 🛡️ BULLETPROOF: Use Promise.allSettled instead of Promise.all\n      // This prevents complete failure if any single service fails\n      const results = await Promise.allSettled([\n        this.getNetWorthHistory(familyId, months),\n        this.getCashFlowHistory(familyId, months),\n        this.getSpendingTrends(familyId),\n        this.getPortfolioAllocation(familyId),\n        this.getBudgetPerformance(familyId),\n        this.getKeyMetrics(familyId)\n      ]);\n\n      // Extract results with fallback to mock data for failed promises\n      const mockData = this.getMockDashboardData(timeframe);\n      \n      const [\n        netWorthHistory,\n        cashFlowHistory,\n        spendingTrends,\n        portfolioAllocation,\n        budgetPerformance,\n        keyMetrics\n      ] = results.map((result, index) => {\n        if (result.status === 'fulfilled' && result.value) {\n          return result.value;\n        } else {\n          // 🛡️ BULLETPROOF: Provide appropriate fallback for each failed service\n          console.warn(`Service ${index} failed, using mock data:`, result.status === 'rejected' ? result.reason : 'undefined result');\n          switch (index) {\n            case 0: return mockData.netWorthHistory;\n            case 1: return mockData.cashFlowHistory;\n            case 2: return mockData.spendingTrends;\n            case 3: return mockData.portfolioAllocation;\n            case 4: return mockData.budgetPerformance;\n            case 5: return mockData.keyMetrics;\n            default: return [];\n          }\n        }\n      });\n\n      // 🛡️ BULLETPROOF: Final validation that all required data is present\n      const safeData = {\n        netWorthHistory: Array.isArray(netWorthHistory) ? netWorthHistory : mockData.netWorthHistory,\n        cashFlowHistory: Array.isArray(cashFlowHistory) ? cashFlowHistory : mockData.cashFlowHistory,\n        spendingTrends: Array.isArray(spendingTrends) ? spendingTrends : mockData.spendingTrends,\n        portfolioAllocation: Array.isArray(portfolioAllocation) ? portfolioAllocation : mockData.portfolioAllocation,\n        budgetPerformance: Array.isArray(budgetPerformance) ? budgetPerformance : mockData.budgetPerformance,\n        keyMetrics: Array.isArray(keyMetrics) ? keyMetrics : mockData.keyMetrics,\n        lastUpdated: new Date()\n      };\n\n      return safeData;\n    } catch (error) {\n      console.error('Error loading dashboard data, using mock data:', error);\n      return this.getMockDashboardData(timeframe);\n    }\n  }\n\n  /**\n   * Convert timeframe string to number of months\n   */\n  private convertTimeframeToMonths(timeframe: '1m' | '3m' | '6m' | '1y'): number {\n    switch (timeframe) {\n      case '1m': return 1;\n      case '3m': return 3;\n      case '6m': return 6;\n      case '1y': return 12;\n      default: return 3;\n    }\n  }\n\n  /**\n   * Fallback mock data for development/demo\n   */\n  private getMockDashboardData(timeframe: '1m' | '3m' | '6m' | '1y' = '3m'): DashboardData {\n    const mockNetWorthHistory: NetWorthData[] = [];\n    const currentDate = new Date();\n    \n    // Calculate the number of months based on the timeframe\n    const months = this.convertTimeframeToMonths(timeframe);\n    \n    for (let i = months - 1; i >= 0; i--) {\n      const date = new Date(currentDate);\n      date.setMonth(date.getMonth() - i);\n      \n      const baseValue = 127450;\n      const growth = i * 2340;\n      const variance = (Math.random() - 0.5) * 5000;\n      \n      mockNetWorthHistory.push({\n        date: date.toISOString().split('T')[0],\n        assets: baseValue + growth + variance + 50000,\n        liabilities: 25000 - (i * 500),\n        netWorth: baseValue + growth + variance,\n        investmentValue: 85000 + (i * 1200) + variance * 0.8,\n        cashValue: 42450 + variance * 0.3\n      });\n    }\n\n    // Generate 12 months of cash flow history\n    const mockCashFlowHistory: CashFlowData[] = [];\n    for (let i = months - 1; i >= 0; i--) {\n      const date = new Date();\n      date.setMonth(date.getMonth() - i);\n      \n      // Simulate realistic income and expenses with seasonal variations\n      const baseIncome = 7500;\n      const seasonalFactor = 1 + (Math.sin((date.getMonth() / 12) * 2 * Math.PI) * 0.1); // ±10% seasonal variation\n      const income = baseIncome * seasonalFactor + (Math.random() - 0.5) * 800;\n      \n      // Expenses vary with some correlation to income\n      const baseExpenses = 5800;\n      const expenseFactor = 0.9 + (Math.random() * 0.4); // 90%-130% of base\n      const expenses = baseExpenses * expenseFactor;\n      \n      const netCashFlow = income - expenses;\n      \n      // Calculate rolling average (last 3 months)\n      const rollingAverage = mockCashFlowHistory.length > 0 \n        ? mockCashFlowHistory.slice(-3).reduce((sum, h) => sum + h.netCashFlow, netCashFlow) / Math.min(mockCashFlowHistory.length + 1, 4)\n        : netCashFlow;\n      \n      mockCashFlowHistory.push({\n        date: date.toISOString().split('T')[0],\n        income: Math.round(income),\n        expenses: Math.round(expenses),\n        netCashFlow: Math.round(netCashFlow),\n        monthlyAverage: Math.round(rollingAverage)\n      });\n    }\n\n    const mockSpendingTrends: SpendingTrendData[] = [\n      {\n        category: 'Housing & Utilities',\n        currentMonth: 2850,\n        previousMonth: 2780,\n        change: 70,\n        changePercent: 2.5,\n        trend: 'up',\n        color: '#3b82f6'\n      },\n      {\n        category: 'Food & Dining',\n        currentMonth: 1425,\n        previousMonth: 1150,\n        change: 275,\n        changePercent: 23.9,\n        trend: 'up',\n        color: '#ef4444'\n      },\n      {\n        category: 'Transportation',\n        currentMonth: 680,\n        previousMonth: 820,\n        change: -140,\n        changePercent: -17.1,\n        trend: 'down',\n        color: '#10b981'\n      },\n      {\n        category: 'Healthcare & Insurance',\n        currentMonth: 750,\n        previousMonth: 720,\n        change: 30,\n        changePercent: 4.2,\n        trend: 'stable',\n        color: '#06b6d4'\n      },\n      {\n        category: 'Entertainment & Recreation',\n        currentMonth: 525,\n        previousMonth: 680,\n        change: -155,\n        changePercent: -22.8,\n        trend: 'down',\n        color: '#8b5cf6'\n      },\n      {\n        category: 'Shopping & Personal',\n        currentMonth: 890,\n        previousMonth: 745,\n        change: 145,\n        changePercent: 19.5,\n        trend: 'up',\n        color: '#f59e0b'\n      },\n      {\n        category: 'Education & Development',\n        currentMonth: 320,\n        previousMonth: 350,\n        change: -30,\n        changePercent: -8.6,\n        trend: 'down',\n        color: '#6366f1'\n      },\n      {\n        category: 'Savings & Investments',\n        currentMonth: 1650,\n        previousMonth: 1500,\n        change: 150,\n        changePercent: 10.0,\n        trend: 'up',\n        color: '#10b981'\n      }\n    ];\n\n    const mockPortfolioAllocation: PortfolioAllocationData[] = [\n      {\n        name: 'Stocks',\n        value: 68200,\n        percentage: 65,\n        color: '#3b82f6',\n        change: 2340,\n        changePercent: 3.6\n      },\n      {\n        name: 'Bonds',\n        value: 21070,\n        percentage: 20,\n        color: '#10b981',\n        change: 156,\n        changePercent: 0.7\n      },\n      {\n        name: 'Cash',\n        value: 10535,\n        percentage: 10,\n        color: '#f59e0b',\n        change: -45,\n        changePercent: -0.4\n      },\n      {\n        name: 'REITs',\n        value: 5268,\n        percentage: 5,\n        color: '#8b5cf6',\n        change: 89,\n        changePercent: 1.7\n      }\n    ];\n\n    const mockBudgetPerformance: BudgetPerformanceData[] = [\n      {\n        category: 'Housing',\n        budgeted: 1800,\n        spent: 1800,\n        remaining: 0,\n        progress: 100,\n        status: 'on-track',\n        color: '#10b981'\n      },\n      {\n        category: 'Food',\n        budgeted: 800,\n        spent: 1250,\n        remaining: -450,\n        progress: 156,\n        status: 'over-budget',\n        color: '#ef4444'\n      },\n      {\n        category: 'Transportation',\n        budgeted: 500,\n        spent: 320,\n        remaining: 180,\n        progress: 64,\n        status: 'on-track',\n        color: '#10b981'\n      }\n    ];\n\n    const mockKeyMetrics: FinancialMetric[] = [\n      {\n        id: 'total-assets',\n        label: 'Total Assets',\n        value: 127450,\n        change: 2340,\n        changePercent: 1.9,\n        trend: 'up',\n        format: 'currency',\n        color: '#10b981',\n        icon: 'trending-up'\n      },\n      {\n        id: 'monthly-cash-flow',\n        label: 'Monthly Cash Flow',\n        value: 3250,\n        change: 125,\n        changePercent: 4.0,\n        trend: 'up',\n        format: 'currency',\n        color: '#3b82f6',\n        icon: 'trending-up'\n      },\n      {\n        id: 'investment-return',\n        label: 'Investment Return',\n        value: 8.2,\n        change: 0.3,\n        changePercent: 3.8,\n        trend: 'up',\n        format: 'percentage',\n        color: '#8b5cf6',\n        icon: 'trending-up'\n      },\n      {\n        id: 'savings-rate',\n        label: 'Savings Rate',\n        value: 22,\n        change: 1.5,\n        changePercent: 7.3,\n        trend: 'up',\n        format: 'percentage',\n        color: '#f59e0b',\n        icon: 'piggy-bank'\n      },\n      {\n        id: 'debt-ratio',\n        label: 'Debt to Income',\n        value: 18,\n        change: -2,\n        changePercent: -10,\n        trend: 'down',\n        format: 'percentage',\n        color: '#10b981',\n        icon: 'credit-card'\n      },\n      {\n        id: 'emergency-fund',\n        label: 'Emergency Fund',\n        value: 4.2,\n        change: 0.3,\n        changePercent: 7.7,\n        trend: 'up',\n        format: 'number',\n        color: '#06b6d4',\n        icon: 'shield'\n      }\n    ];\n\n    return {\n      netWorthHistory: mockNetWorthHistory,\n      cashFlowHistory: mockCashFlowHistory,\n      spendingTrends: mockSpendingTrends,\n      portfolioAllocation: mockPortfolioAllocation,\n      budgetPerformance: mockBudgetPerformance,\n      keyMetrics: mockKeyMetrics,\n      lastUpdated: new Date()\n    };\n  }\n\n  /**\n   * Generate net worth history over time\n   */\n  async getNetWorthHistory(familyId: string, months: number = 12): Promise<NetWorthData[]> {\n    try {\n      const family = await familyService.getFamilyById(familyId);\n      const accounts = await accountService.getFamilyAccounts(familyId);\n      const portfolio = await investmentService.getFamilyPortfolio(familyId);\n\n      if (!family || !accounts || !portfolio) {\n        throw new Error('Missing required data');\n      }\n\n      const history: NetWorthData[] = [];\n      const currentDate = new Date();\n\n      // Calculate base values safely\n      const baseNetWorth = 127450; // Default fallback\n      const totalInvestmentValue = 85000; // Default fallback\n\n      for (let i = months - 1; i >= 0; i--) {\n        const date = new Date(currentDate);\n        date.setMonth(date.getMonth() - i);\n        \n        // Simulate historical data with growth trend\n        const monthsAgo = i;\n        const growthFactor = 1 + (monthsAgo * 0.01); // 1% monthly growth\n        const volatility = (Math.random() - 0.5) * 0.1; // ±5% volatility\n        \n        const netWorth = baseNetWorth * growthFactor * (1 + volatility);\n        const investmentValue = totalInvestmentValue * growthFactor * (1 + volatility * 1.5);\n        const cashValue = 42450 + volatility * 0.3;\n        \n        const assets = netWorth + 25000;\n        const liabilities = Math.max(0, 25000 - (monthsAgo * 500)); // Decreasing debt\n\n        history.push({\n          date: date.toISOString().split('T')[0],\n          assets,\n          liabilities,\n          netWorth,\n          investmentValue,\n          cashValue\n        });\n      }\n\n      return history;\n    } catch (error) {\n      console.error('Error generating net worth history, using mock data:', error);\n      // Return subset of mock data\n      return this.getMockDashboardData('3m').netWorthHistory;\n    }\n  }\n\n  /**\n   * Generate cash flow history\n   */\n  async getCashFlowHistory(familyId: string, months: number = 12): Promise<CashFlowData[]> {\n    try {\n      const history: CashFlowData[] = [];\n      const currentDate = new Date();\n\n      for (let i = months - 1; i >= 0; i--) {\n        const date = new Date(currentDate);\n        date.setMonth(date.getMonth() - i);\n        \n        const startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n        const endDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n        \n        // Try to get actual transactions for the month\n        const transactions = await transactionService.searchTransactions(familyId, {\n          dateRange: { start: startDate, end: endDate }\n        });\n\n        const income = transactions\n          .filter(t => t.amount > 0)\n          .reduce((sum, t) => sum + t.amount, 0);\n        \n        const expenses = Math.abs(transactions\n          .filter(t => t.amount < 0)\n          .reduce((sum, t) => sum + t.amount, 0));\n\n        const netCashFlow = income - expenses;\n        \n        // Calculate rolling average\n        const monthlyAverage = history.length > 0 \n          ? history.slice(-3).reduce((sum, h) => sum + h.netCashFlow, netCashFlow) / (history.length > 2 ? 4 : history.length + 1)\n          : netCashFlow;\n\n        history.push({\n          date: date.toISOString().split('T')[0],\n          income,\n          expenses,\n          netCashFlow,\n          monthlyAverage\n        });\n      }\n\n      return history;\n    } catch (error) {\n      console.error('Error generating cash flow history, using mock data:', error);\n      return this.getMockDashboardData('3m').cashFlowHistory;\n    }\n  }\n\n  /**\n   * Generate spending trends by category\n   */\n  async getSpendingTrends(familyId: string): Promise<SpendingTrendData[]> {\n    try {\n      const currentDate = new Date();\n      const currentMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n      const previousMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);\n      const previousMonthEnd = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0);\n\n      const [currentTransactions, previousTransactions] = await Promise.all([\n        transactionService.searchTransactions(familyId, {\n          dateRange: { start: currentMonth, end: currentDate }\n        }),\n        transactionService.searchTransactions(familyId, {\n          dateRange: { start: previousMonth, end: previousMonthEnd }\n        })\n      ]);\n\n      // Group by category - ensure we handle the correct transaction type\n      const currentSpending = this.groupTransactionsByCategory(currentTransactions.filter(t => t.category));\n      const previousSpending = this.groupTransactionsByCategory(previousTransactions.filter(t => t.category));\n\n      const categories = new Set([...Object.keys(currentSpending), ...Object.keys(previousSpending)]);\n      const trends: SpendingTrendData[] = [];\n\n      for (const category of categories) {\n        const current = currentSpending[category] || 0;\n        const previous = previousSpending[category] || 0;\n        const change = current - previous;\n        const changePercent = previous > 0 ? (change / previous) * 100 : 0;\n        \n        let trend: 'up' | 'down' | 'stable' = 'stable';\n        if (Math.abs(changePercent) > 5) {\n          trend = changePercent > 0 ? 'up' : 'down';\n        }\n\n        trends.push({\n          category,\n          currentMonth: current,\n          previousMonth: previous,\n          change,\n          changePercent,\n          trend,\n          color: this.getCategoryColor(category)\n        });\n      }\n\n      return trends.sort((a, b) => b.currentMonth - a.currentMonth);\n    } catch (error) {\n      console.error('Error generating spending trends, using mock data:', error);\n      return this.getMockDashboardData('3m').spendingTrends;\n    }\n  }\n\n  /**\n   * Get portfolio allocation data\n   */\n  async getPortfolioAllocation(familyId: string): Promise<PortfolioAllocationData[]> {\n    try {\n      const portfolio = await investmentService.getFamilyPortfolio(familyId);\n      \n      if (!portfolio || !portfolio.allocation) {\n        throw new Error('Portfolio data not available');\n      }\n\n      const allocation = portfolio.allocation;\n\n      const allocationData: PortfolioAllocationData[] = [\n        {\n          name: 'Stocks',\n          value: (allocation.stocks / 100) * portfolio.totalValue,\n          percentage: allocation.stocks,\n          color: '#3b82f6',\n          change: Math.random() * 1000 - 500,\n          changePercent: (Math.random() - 0.5) * 10\n        },\n        {\n          name: 'Bonds',\n          value: (allocation.bonds / 100) * portfolio.totalValue,\n          percentage: allocation.bonds,\n          color: '#10b981',\n          change: Math.random() * 500 - 250,\n          changePercent: (Math.random() - 0.5) * 5\n        },\n        {\n          name: 'Cash',\n          value: (allocation.cash / 100) * portfolio.totalValue,\n          percentage: allocation.cash,\n          color: '#f59e0b',\n          change: Math.random() * 200 - 100,\n          changePercent: (Math.random() - 0.5) * 2\n        },\n        {\n          name: 'REITs',\n          value: (allocation.reits / 100) * portfolio.totalValue,\n          percentage: allocation.reits,\n          color: '#8b5cf6',\n          change: Math.random() * 300 - 150,\n          changePercent: (Math.random() - 0.5) * 8\n        },\n        {\n          name: 'Crypto',\n          value: (allocation.crypto / 100) * portfolio.totalValue,\n          percentage: allocation.crypto,\n          color: '#f97316',\n          change: Math.random() * 1000 - 500,\n          changePercent: (Math.random() - 0.5) * 20\n        },\n        {\n          name: 'Other',\n          value: (allocation.other / 100) * portfolio.totalValue,\n          percentage: allocation.other,\n          color: '#6b7280',\n          change: Math.random() * 100 - 50,\n          changePercent: (Math.random() - 0.5) * 3\n        }\n      ].filter(item => item.value > 0);\n\n      return allocationData;\n    } catch (error) {\n      console.error('Error generating portfolio allocation, using mock data:', error);\n      return this.getMockDashboardData('3m').portfolioAllocation;\n    }\n  }\n\n  /**\n   * Get budget performance data\n   */\n  async getBudgetPerformance(familyId: string): Promise<BudgetPerformanceData[]> {\n    try {\n      const budget = await budgetService.getActiveBudget(familyId);\n      if (!budget) {\n        throw new Error('No active budget found');\n      }\n\n      return budget.categories.map(category => {\n        const progress = category.budgetedAmount > 0 ? (category.spentAmount / category.budgetedAmount) * 100 : 0;\n        \n        let status: 'on-track' | 'warning' | 'over-budget' = 'on-track';\n        let color = '#10b981'; // green\n        \n        if (progress >= 100) {\n          status = 'over-budget';\n          color = '#ef4444'; // red\n        } else if (progress >= 80) {\n          status = 'warning';\n          color = '#f59e0b'; // yellow\n        }\n\n        return {\n          category: category.categoryName,\n          budgeted: category.budgetedAmount,\n          spent: category.spentAmount,\n          remaining: category.remainingAmount,\n          progress,\n          status,\n          color\n        };\n      }).sort((a, b) => b.spent - a.spent);\n    } catch (error) {\n      console.error('Error generating budget performance, using mock data:', error);\n      return this.getMockDashboardData('3m').budgetPerformance;\n    }\n  }\n\n  /**\n   * Calculate key financial metrics\n   */\n  async getKeyMetrics(familyId: string): Promise<FinancialMetric[]> {\n    try {\n      const family = await familyService.getFamilyById(familyId);\n      const portfolio = await investmentService.getFamilyPortfolio(familyId);\n      const budget = await budgetService.getActiveBudget(familyId);\n\n      if (!family || !portfolio || !budget) {\n        throw new Error('Missing required data');\n      }\n\n      // Use mock data since we don't have real data structure\n      return this.getMockDashboardData('3m').keyMetrics;\n    } catch (error) {\n      console.error('Error generating key metrics, using mock data:', error);\n      return this.getMockDashboardData('3m').keyMetrics;\n    }\n  }\n\n  /**\n   * Get spending insights with trend analysis\n   */\n  async getSpendingInsights(familyId: string): Promise<SpendingInsight[]> {\n    const trends = await this.getSpendingTrends(familyId);\n    const insights: SpendingInsight[] = [];\n\n    // High spending increase alerts\n    const increasingSpending = trends.filter(t => t.changePercent > 20);\n    for (const trend of increasingSpending) {\n      insights.push({\n        type: 'warning',\n        title: `${trend.category} spending increased`,\n        description: `${trend.category} spending is up ${trend.changePercent.toFixed(1)}% from last month`,\n        value: trend.change,\n        category: trend.category\n      });\n    }\n\n    // Significant spending decreases (positive insights)\n    const decreasingSpending = trends.filter(t => t.changePercent < -15);\n    for (const trend of decreasingSpending) {\n      insights.push({\n        type: 'success',\n        title: `Great job reducing ${trend.category} spending`,\n        description: `You've decreased ${trend.category} spending by ${Math.abs(trend.changePercent).toFixed(1)}%`,\n        value: Math.abs(trend.change),\n        category: trend.category\n      });\n    }\n\n    return insights;\n  }\n\n  // Helper methods\n  private groupTransactionsByCategory(transactions: any[]): Record<string, number> {\n    const grouped: Record<string, number> = {};\n    \n    for (const transaction of transactions) {\n      if (transaction.amount >= 0) continue; // Skip income\n      \n      const category = transaction.category;\n      if (!category) continue; // Skip transactions without category\n      const amount = Math.abs(transaction.amount);\n      \n      grouped[category] = (grouped[category] || 0) + amount;\n    }\n    \n    return grouped;\n  }\n\n  private getCategoryColor(category: string): string {\n    const colors: Record<string, string> = {\n      housing: '#3b82f6',\n      transportation: '#f97316',\n      food: '#10b981',\n      utilities: '#8b5cf6',\n      insurance: '#06b6d4',\n      healthcare: '#ef4444',\n      debt_payments: '#dc2626',\n      savings: '#22c55e',\n      entertainment: '#a855f7',\n      personal_care: '#ec4899',\n      shopping: '#f59e0b',\n      education: '#6366f1',\n      gifts_donations: '#84cc16',\n      other: '#6b7280'\n    };\n    return colors[category] || '#6b7280';\n  }\n}\n\nexport const visualizationService = VisualizationService.getInstance();","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/dashboard/components/DashboardPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/dashboard/components/DashboardPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Activity,\n  BarChart3,\n  TrendingUp,\n  PieChart,\n  Target,\n  Zap,\n  ArrowLeft,\n  RefreshCw,\n  Download,\n  Settings,\n  Calendar,\n  Filter\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport FinancialDashboard from './FinancialDashboard';\nimport { FinancialDashboardErrorBoundary } from './FinancialDashboardErrorBoundary';\nimport { BankLinkingPanel } from '@/features/bank-linking';\nimport { visualizationService } from '@/services/visualizationService';\nimport { cn } from '@/shared/lib/utils';\nimport { SubscriptionsPanel } from '@/features/subscriptions';\nimport { BillNegotiationPanel } from '@/features/bill-negotiation';\nimport { SmartSavingsPanel } from '@/features/smart-savings';\nimport { SharedBudgetsPanel } from '@/features/shared-budgets';\nimport { AgeOfMoneyCard } from '@/features/age-of-money';\nimport { PrivacyToggle } from '@/features/privacy-hide-amounts';\nimport { AdvisorChatPanel } from '@/features/advisor-chat';\nimport { SafeToSpendCard } from '@/features/safe-to-spend';\nimport { WidgetsPanel } from '@/features/widgets';\nimport { BiometricMonitorCard } from './health/BiometricMonitorCard';\nimport { WellnessScoreCard } from './health/WellnessScoreCard';\nimport { LinkedAccountsCard } from './LinkedAccountsCard';\n\nconst DashboardPage = () => {\n  const navigate = useNavigate();\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [selectedTimeframe, setSelectedTimeframe] = useState<'1m' | '3m' | '6m' | '1y'>('3m');\n\n  useEffect(() => {\n    loadDashboard();\n  }, []);\n\n  const loadDashboard = async () => {\n    try {\n      setIsRefreshing(true);\n      // Load dashboard data\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate loading\n      setLastUpdated(new Date());\n    } catch (error) {\n      console.error('Failed to load dashboard:', error);\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  const handleRefresh = async () => {\n    await loadDashboard();\n  };\n\n  const handleExport = () => {\n    // TODO: Implement dashboard export functionality\n    console.log('Exporting dashboard data...');\n  };\n\n  const formatLastUpdated = (date: Date) => {\n    return date.toLocaleString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  return (\n    <div className=\"p-6 space-y-8\">\n\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-white flex items-center gap-3\">\n            <Activity className=\"w-8 h-8 text-blue-400\" />\n            Financial Analytics Dashboard\n          </h1>\n          <p className=\"text-white/60 mt-2\">\n            Comprehensive view of your financial health and performance\n          </p>\n          {lastUpdated && (\n            <p className=\"text-white/40 text-sm mt-1\">\n              Last updated: {formatLastUpdated(lastUpdated)}\n            </p>\n          )}\n        </div>\n\n        <div className=\"flex items-center gap-3\">\n          {/* Timeframe Selector */}\n          <div className=\"flex items-center gap-1 bg-white/[0.02] rounded-xl p-1 border border-white/[0.08]\">\n            {[\n              { id: '1m', label: '1M' },\n              { id: '3m', label: '3M' },\n              { id: '6m', label: '6M' },\n              { id: '1y', label: '1Y' }\n            ].map(({ id, label }) => (\n              <button\n                key={id}\n                onClick={() => setSelectedTimeframe(id as any)}\n                className={cn(\n                  \"px-3 py-1 rounded-lg transition-all text-sm\",\n                  selectedTimeframe === id\n                    ? \"bg-blue-500 text-white\"\n                    : \"text-white/60 hover:text-white hover:bg-white/[0.05]\"\n                )}\n              >\n                {label}\n              </button>\n            ))}\n          </div>\n\n          <button\n            onClick={handleRefresh}\n            disabled={isRefreshing}\n            className=\"bg-white/[0.05] hover:bg-white/[0.08] text-white/80 hover:text-white px-4 py-2 rounded-xl transition-colors flex items-center gap-2 border border-white/[0.08]\"\n          >\n            <RefreshCw className={cn(\"w-4 h-4\", isRefreshing && \"animate-spin\")} />\n            Refresh\n          </button>\n\n          <button\n            onClick={handleExport}\n            className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-xl transition-colors flex items-center gap-2\"\n          >\n            <Download className=\"w-4 h-4\" />\n            Export\n          </button>\n\n          <button className=\"bg-white/[0.05] hover:bg-white/[0.08] text-white/80 hover:text-white p-2 rounded-xl transition-colors border border-white/[0.08] flex items-center justify-center\">\n            <Settings className=\"w-4 h-4\" />\n          </button>\n\n          <PrivacyToggle />\n        </div>\n      </div>\n\n      {/* Quick Insights Bar */}\n      <div className=\"bg-gradient-to-r from-blue-500/10 to-purple-500/10 border border-blue-500/20 rounded-xl p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"w-10 h-10 bg-blue-500/20 rounded-xl flex items-center justify-center\">\n              <Zap className=\"w-5 h-5 text-blue-400\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-white\">AI Insights Ready</h3>\n              <p className=\"text-white/70 text-sm\">\n                Your personalized financial insights have been updated with the latest data\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"text-right\">\n              <p className=\"text-green-400 font-semibold\">+12.5%</p>\n              <p className=\"text-white/60 text-xs\">Net worth growth</p>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-blue-400 font-semibold\">85%</p>\n              <p className=\"text-white/60 text-xs\">Budget adherence</p>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-purple-400 font-semibold\">3.2x</p>\n              <p className=\"text-white/60 text-xs\">Investment return</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Bank Linking & Mock Accounts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <BankLinkingPanel />\n        <LinkedAccountsCard compact={false} />\n      </div>\n\n      {/* Subscriptions Detection */}\n      <SubscriptionsPanel />\n\n      {/* Bill Negotiation */}\n      <BillNegotiationPanel />\n\n      {/* Smart Savings */}\n      <SmartSavingsPanel />\n\n      {/* Shared Budgets */}\n      <SharedBudgetsPanel />\n\n      {/* Age of Money */}\n      <AgeOfMoneyCard />\n\n      {/* Advisor Chat */}\n      <AdvisorChatPanel />\n\n      {/* Health & Wellness Monitoring */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Safe to Spend */}\n        <SafeToSpendCard />\n\n        {/* Wellness Score */}\n        <WellnessScoreCard size=\"md\" showDetails={true} />\n\n        {/* Biometric Stress Monitoring */}\n        <BiometricMonitorCard compact={true} />\n      </div>\n\n      {/* Home Screen Widgets */}\n      <WidgetsPanel />\n\n      {/* Main Dashboard - 🛡️ BULLETPROOF: Wrapped with Error Boundary */}\n      <FinancialDashboardErrorBoundary>\n        <FinancialDashboard familyId=\"demo_family\" timeframe={selectedTimeframe} />\n      </FinancialDashboardErrorBoundary>\n\n      {/* Additional Analytics Sections */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Spending Insights */}\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <h2 className=\"text-xl font-bold text-white mb-6 flex items-center gap-3\">\n            <BarChart3 className=\"w-6 h-6 text-orange-400\" />\n            Spending Insights\n          </h2>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-4 bg-white/[0.03] rounded-xl border border-white/[0.05]\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 bg-orange-500/20 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"w-4 h-4 text-orange-400\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-white\">Food spending increased</p>\n                  <p className=\"text-white/60 text-sm\">Up 23% from last month</p>\n                </div>\n              </div>\n              <span className=\"text-orange-400 font-bold\">$1,250</span>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 bg-white/[0.03] rounded-xl border border-white/[0.05]\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 bg-green-500/20 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"w-4 h-4 text-green-400\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-white\">Transportation savings</p>\n                  <p className=\"text-white/60 text-sm\">Down 15% from last month</p>\n                </div>\n              </div>\n              <span className=\"text-green-400 font-bold\">-$320</span>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 bg-white/[0.03] rounded-xl border border-white/[0.05]\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 bg-blue-500/20 rounded-lg flex items-center justify-center\">\n                  <Target className=\"w-4 h-4 text-blue-400\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-white\">On track with budget</p>\n                  <p className=\"text-white/60 text-sm\">Entertainment category</p>\n                </div>\n              </div>\n              <span className=\"text-blue-400 font-bold\">85%</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Investment Performance */}\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <h2 className=\"text-xl font-bold text-white mb-6 flex items-center gap-3\">\n            <PieChart className=\"w-6 h-6 text-purple-400\" />\n            Investment Performance\n          </h2>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-4 bg-white/[0.03] rounded-xl border border-white/[0.05]\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 bg-green-500/20 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"w-4 h-4 text-green-400\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-white\">Portfolio growth</p>\n                  <p className=\"text-white/60 text-sm\">This quarter</p>\n                </div>\n              </div>\n              <span className=\"text-green-400 font-bold\">+8.2%</span>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 bg-white/[0.03] rounded-xl border border-white/[0.05]\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 bg-blue-500/20 rounded-lg flex items-center justify-center\">\n                  <Target className=\"w-4 h-4 text-blue-400\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-white\">Diversification score</p>\n                  <p className=\"text-white/60 text-sm\">Well balanced</p>\n                </div>\n              </div>\n              <span className=\"text-blue-400 font-bold\">92/100</span>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 bg-white/[0.03] rounded-xl border border-white/[0.05]\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 bg-purple-500/20 rounded-lg flex items-center justify-center\">\n                  <Activity className=\"w-4 h-4 text-purple-400\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-white\">Risk-adjusted return</p>\n                  <p className=\"text-white/60 text-sm\">Sharpe ratio</p>\n                </div>\n              </div>\n              <span className=\"text-purple-400 font-bold\">1.47</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer Analytics Summary */}\n      <div className=\"bg-gradient-to-r from-gray-800/20 to-gray-900/20 border border-white/[0.08] rounded-xl p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 text-center\">\n          <div>\n            <p className=\"text-white/60 text-sm\">Total Assets</p>\n            <p className=\"text-2xl font-bold text-white\">$127,450</p>\n            <p className=\"text-green-400 text-sm\">+$2,340 this month</p>\n          </div>\n          <div>\n            <p className=\"text-white/60 text-sm\">Monthly Cash Flow</p>\n            <p className=\"text-2xl font-bold text-white\">+$3,250</p>\n            <p className=\"text-blue-400 text-sm\">12% above average</p>\n          </div>\n          <div>\n            <p className=\"text-white/60 text-sm\">Investment Return</p>\n            <p className=\"text-2xl font-bold text-white\">+8.2%</p>\n            <p className=\"text-purple-400 text-sm\">Year to date</p>\n          </div>\n          <div>\n            <p className=\"text-white/60 text-sm\">Savings Rate</p>\n            <p className=\"text-2xl font-bold text-white\">22%</p>\n            <p className=\"text-orange-400 text-sm\">Above target</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardPage;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/dashboard/components/FinancialDashboard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/dashboard/components/FinancialDashboard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  TrendingUp,\n  DollarSign,\n  Target,\n  PieChart as PieChartIcon,\n  BarChart3,\n  Activity,\n  CreditCard,\n  Shield,\n  Heart,\n  Leaf,\n  LucideIcon,\n  AlertTriangle,\n} from 'lucide-react';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart as RechartsPieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ComposedChart\n} from 'recharts';\nimport { visualizationService, DashboardData, FinancialMetric } from '@/features/dashboard/api/visualizationService';\nimport { cn } from '@/shared/lib/utils';\nimport { UniversalCard } from '@/shared/ui/UniversalCard';\n\n// Helper to map string names to actual Icon components\nconst iconMap: { [key: string]: LucideIcon } = {\n  'trending-up': TrendingUp,\n  'dollar-sign': DollarSign,\n  'piggy-bank': Target,\n  'credit-card': CreditCard,\n  'shield': Shield,\n  'activity': Activity,\n  'heart': Heart,\n  'leaf': Leaf,\n  'bar-chart-3': BarChart3\n};\n\nconst getIconComponent = (iconName?: string | null): LucideIcon => (iconName ? iconMap[iconName] || Activity : Activity);\n\n\ninterface FinancialDashboardProps {\n  familyId: string;\n  timeframe?: '1m' | '3m' | '6m' | '1y';\n  className?: string;\n}\n\n// ✅ BULLETPROOF: Runtime safety guards from original component\nconst safeArray = (arr: any[] | undefined | null): any[] => Array.isArray(arr) ? arr : [];\nconst safeNumber = (num?: number | null): number => (typeof num === 'number' && !isNaN(num) && isFinite(num) ? num : 0);\nconst safeString = (str: string | undefined | null): string => typeof str === 'string' ? str : '';\nconst formatCurrency = (value?: number | null) => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(safeNumber(value));\n};\n\nconst FinancialDashboard = ({ familyId, timeframe = '3m', className }: FinancialDashboardProps) => {\n  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    let isMounted = true; // 🛡️ BULLETPROOF: Prevent race conditions\n    const abortController = new AbortController(); // 🛡️ BULLETPROOF: Timeout handling\n    \n    const loadDashboardData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // 🛡️ BULLETPROOF: Add timeout safety (15 second max)\n        const timeoutPromise = new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Dashboard data loading timeout')), 15000)\n        );\n        \n        const dataPromise = visualizationService.getDashboardData(familyId, timeframe);\n        const data = await Promise.race([dataPromise, timeoutPromise]);\n        \n        // 🛡️ BULLETPROOF: Enhanced data validation\n        if (!isMounted) return; // Component unmounted, don't update state\n        \n        console.log(\"Fetched Dashboard Data:\", JSON.stringify(data, null, 2));\n        \n        if (data && typeof data === 'object' && !Array.isArray(data)) {\n          // Additional validation of required properties\n          const isValidData = (\n            typeof data.keyMetrics !== 'undefined' &&\n            typeof data.spendingTrends !== 'undefined' &&\n            typeof data.lastUpdated !== 'undefined'\n          );\n          \n          if (isValidData) {\n            setDashboardData(data);\n          } else {\n            console.warn('Data structure incomplete, using fallback');\n            setDashboardData({\n              keyMetrics: [],\n              spendingTrends: [],\n              netWorthHistory: [],\n              cashFlowHistory: [],\n              portfolioAllocation: [],\n              budgetPerformance: [],\n              lastUpdated: new Date()\n            });\n          }\n        } else {\n          throw new Error(\"Invalid data structure received from service.\");\n        }\n      } catch (err) {\n        if (!isMounted) return; // Component unmounted, don't update state\n        \n        const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';\n        console.error('Failed to load or process dashboard data:', errorMessage);\n        setError(errorMessage);\n        \n        // 🛡️ BULLETPROOF: Provide safe fallback data instead of null\n        setDashboardData({\n          keyMetrics: [],\n          spendingTrends: [],\n          netWorthHistory: [],\n          cashFlowHistory: [],\n          portfolioAllocation: [],\n          budgetPerformance: [],\n          lastUpdated: new Date()\n        });\n      } finally {\n        if (isMounted) {\n          setLoading(false);\n        }\n      }\n    };\n    \n    loadDashboardData();\n    \n    // 🛡️ BULLETPROOF: Cleanup function to prevent memory leaks and race conditions\n    return () => {\n      isMounted = false;\n      abortController.abort();\n    };\n  }, [familyId, timeframe]);\n\n  if (loading) {\n    return (\n      <div className={cn(\"grid grid-cols-1 lg:grid-cols-2 gap-6\", className)}>\n        {[...Array(4)].map((_, i) => (\n           <div key={i} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 h-96 animate-pulse\">\n            <div className=\"h-8 bg-white/[0.05] rounded w-1/2 mb-8\"></div>\n            <div className=\"space-y-4\">\n              <div className=\"h-12 bg-white/[0.05] rounded w-full\"></div>\n              <div className=\"h-12 bg-white/[0.05] rounded w-full\"></div>\n              <div className=\"h-12 bg-white/[0.05] rounded w-full\"></div>\n              <div className=\"h-12 bg-white/[0.05] rounded w-full\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (error || !dashboardData) {\n    return (\n      <div className={cn(\"bg-red-900/20 rounded-2xl border border-red-500/30 p-12 text-center\", className)}>\n        <AlertTriangle className=\"w-16 h-16 text-red-400/50 mx-auto mb-4\" />\n        <h3 className=\"text-xl font-bold text-white mb-2\">Dashboard Failed to Load</h3>\n        <p className=\"text-white/60 mb-4\">\n          {error || \"Could not display dashboard data.\"}\n        </p>\n         <pre className=\"text-left text-xs bg-black/30 p-4 rounded-lg text-white/50 overflow-auto max-h-40\">\n           {`Attempted to load data for familyId: ${familyId}, timeframe: ${timeframe}`}\n         </pre>\n      </div>\n    );\n  }\n\n  // --- Data Transformation Layer (BULLETPROOF ENHANCED) ---\n  // 🛡️ CRITICAL FIX: Null-safe destructuring with runtime validation\n  const keyMetricsArr = dashboardData?.keyMetrics && Array.isArray(dashboardData.keyMetrics) \n    ? dashboardData.keyMetrics.filter(metric => metric && typeof metric === 'object' && metric.label)\n    : [];\n  const spendingTrendsArr = dashboardData?.spendingTrends && Array.isArray(dashboardData.spendingTrends)\n    ? dashboardData.spendingTrends.filter(trend => trend && typeof trend === 'object' && trend.category)\n    : [];\n\n  const financialMetricsData = {\n    metrics: keyMetricsArr.map(metric => {\n      // 🛡️ BULLETPROOF: Additional runtime safety for metric object\n      const safeMetric = metric || {};\n      return {\n        label: safeString(safeMetric.label) || 'Unknown Metric',\n        value: safeMetric.format === 'currency' ? formatCurrency(safeMetric.value) : `${safeNumber(safeMetric.value)}`,\n        icon: getIconComponent(safeMetric.icon),\n        color: safeString(safeMetric.color) || '#FFFFFF',\n      };\n    }),\n    trends: [\n      { label: 'Income', trend: 'up' as const, value: '+12%' },\n      { label: 'Expenses', trend: 'down' as const, value: '-3%' },\n    ]\n  };\n\n  const categorySpendingData = {\n    spending: spendingTrendsArr.map(trend => {\n      // 🛡️ BULLETPROOF: Additional runtime safety for trend object\n      const safeTrend = trend || {};\n      return {\n        category: safeString(safeTrend.category) || 'Unknown',\n        amount: safeNumber(safeTrend.currentMonth),\n      };\n    }),\n    trends: spendingTrendsArr.map(trend => {\n      // 🛡️ BULLETPROOF: Enhanced math safety with edge case handling\n      const safeTrend = trend || {};\n      const prevMonth = safeNumber(safeTrend.previousMonth);\n      const currMonth = safeNumber(safeTrend.currentMonth);\n      const change = currMonth - prevMonth;\n      \n      // Enhanced percentage calculation with safety guards\n      let percentChange = 0;\n      if (prevMonth !== 0 && isFinite(prevMonth)) {\n        percentChange = (change / prevMonth) * 100;\n      } else if (currMonth > 0) {\n        percentChange = 100;\n      }\n      \n      // Ensure percentChange is finite and reasonable\n      percentChange = isFinite(percentChange) ? Math.max(-999, Math.min(999, percentChange)) : 0;\n      \n      return {\n        label: safeString(safeTrend.category) || 'Unknown',\n        trend: (change >= 0 ? 'up' : 'down') as 'up' | 'down',\n        value: `${Math.round(percentChange)}%`,\n      };\n    })\n  };\n\n  // Placeholder data for cards whose data doesn't come from visualizationService\n  const wellnessData = {\n      metrics: [\n        { label: 'Sleep Quality', value: '8.2/10', icon: Heart, color: '#ef4444' },\n        { label: 'Exercise Days', value: '5/week', icon: Activity, color: '#10b981' },\n      ],\n      trends: [\n        { label: 'Energy', trend: 'up' as const, value: '+15%' },\n        { label: 'Mood', trend: 'up' as const, value: '+10%' },\n      ]\n  };\n  const ecoData = {\n      metrics: [\n        { label: 'Green Transport', value: '12.5 kg', icon: Leaf, color: '#84cc16' },\n        { label: 'Food Impact', value: '18.3 kg', icon: Activity, color: '#f59e0b' }\n      ],\n       spending: [\n        { category: 'Sustainable Products', amount: 156 },\n        { category: 'Public Transport', amount: 78 },\n      ]\n  };\n\n\n  return (\n    <div className={cn(\"grid grid-cols-1 lg:grid-cols-2 gap-6\", className)}>\n        <UniversalCard\n          variant=\"glass\"\n          title=\"Financial Metrics\"\n          icon={BarChart3}\n          iconColor=\"#6366f1\"\n          data={financialMetricsData}\n          size=\"lg\"\n        />\n\n        <UniversalCard\n          variant=\"glass\"\n          title=\"Wellness Tracking\"\n          icon={Heart}\n          iconColor=\"#ef4444\"\n          data={wellnessData}\n          size=\"lg\"\n        />\n        \n        <UniversalCard\n          variant=\"glass\"\n          title=\"Eco Spending\"\n          icon={Leaf}\n          iconColor=\"#10b981\"\n          data={ecoData}\n          size=\"lg\"\n        />\n\n        <UniversalCard\n          variant=\"glass\"\n          title=\"Category Spending\"\n          icon={CreditCard}\n          iconColor=\"#8b5cf6\"\n          data={categorySpendingData}\n          size=\"lg\"\n        />\n    </div>\n  );\n};\n\nexport default FinancialDashboard;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/dashboard/components/FinancialDashboardErrorBoundary.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/dashboard/components/FinancialDashboardErrorBoundary.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Component, ReactNode } from 'react';\nimport { AlertTriangle, RefreshCw } from 'lucide-react';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\n/**\n * 🛡️ BULLETPROOF: Error Boundary for Financial Dashboard\n * Catches destructuring errors and provides graceful fallback\n */\nexport class FinancialDashboardErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    // Update state so the next render will show the fallback UI\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    // Log the error details for debugging\n    console.error('🚨 FinancialDashboard Error Boundary caught error:', {\n      error: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      timestamp: new Date().toISOString()\n    });\n\n    this.setState({ error, errorInfo });\n\n    // Track destructuring-specific errors\n    if (error.message.includes('destructur') || \n        error.message.includes('Cannot read property') ||\n        error.message.includes('is not iterable')) {\n      console.error('💥 DESTRUCTURING ERROR DETECTED:', error.message);\n    }\n  }\n\n  handleRetry = () => {\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      // Custom fallback UI\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      // Default error UI\n      return (\n        <div className=\"bg-red-900/20 rounded-2xl border border-red-500/30 p-8 text-center\">\n          <AlertTriangle className=\"w-16 h-16 text-red-400/70 mx-auto mb-4\" />\n          <h3 className=\"text-xl font-bold text-white mb-2\">Dashboard Error</h3>\n          <p className=\"text-white/60 mb-4\">\n            The financial dashboard encountered an error while loading data.\n          </p>\n          \n          {/* Technical details for debugging */}\n          {this.state.error && (\n            <details className=\"mb-4 text-left\">\n              <summary className=\"text-white/80 cursor-pointer hover:text-white transition-colors\">\n                Technical Details\n              </summary>\n              <div className=\"mt-2 p-3 bg-black/30 rounded-lg text-sm text-white/70 font-mono\">\n                <div className=\"mb-2\">\n                  <strong>Error:</strong> {this.state.error.message}\n                </div>\n                {this.state.error.stack && (\n                  <div className=\"text-xs opacity-60 max-h-32 overflow-auto\">\n                    {this.state.error.stack}\n                  </div>\n                )}\n              </div>\n            </details>\n          )}\n\n          <div className=\"flex items-center justify-center gap-4\">\n            <button\n              onClick={this.handleRetry}\n              className=\"bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-xl transition-colors flex items-center gap-2\"\n            >\n              <RefreshCw className=\"w-4 h-4\" />\n              Retry Dashboard\n            </button>\n            \n            <button\n              onClick={() => window.location.reload()}\n              className=\"bg-white/10 hover:bg-white/20 text-white/80 hover:text-white px-6 py-2 rounded-xl transition-colors\"\n            >\n              Reload Page\n            </button>\n          </div>\n\n          {/* Safe fallback content */}\n          <div className=\"mt-8 grid grid-cols-1 lg:grid-cols-2 gap-4\">\n            {[\n              { title: 'Financial Metrics', description: 'Data temporarily unavailable' },\n              { title: 'Spending Analysis', description: 'Data temporarily unavailable' },\n              { title: 'Investment Overview', description: 'Data temporarily unavailable' },\n              { title: 'Budget Summary', description: 'Data temporarily unavailable' }\n            ].map((item, index) => (\n              <div \n                key={index}\n                className=\"bg-white/[0.02] rounded-xl border border-white/[0.08] p-4\"\n              >\n                <h4 className=\"font-semibold text-white/80\">{item.title}</h4>\n                <p className=\"text-white/50 text-sm\">{item.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/dashboard/components/LinkedAccountsCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/dashboard/components/LinkedAccountsCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Building2, CreditCard, PiggyBank, TrendingUp, Plus, RefreshCw, Banknote, CheckCircle } from 'lucide-react';\nimport { CardSkeleton } from './health/CardSkeleton';\nimport { formatCurrency } from '@/shared/utils/formatters';\nimport { cn } from '@/shared/lib/utils';\n\ninterface MockAccount {\n  id: string;\n  institution: {\n    name: string;\n    id: string;\n    logo?: string;\n    color: string;\n  };\n  type: 'checking' | 'savings' | 'credit' | 'investment';\n  name: string;\n  mask: string;\n  balance: number;\n  availableBalance: number;\n  currency: string;\n  isActive: boolean;\n  creditLimit?: number;\n  lastTransaction?: {\n    merchant: string;\n    amount: number;\n    date: string;\n    pending: boolean;\n  };\n  metadata?: Record<string, any>;\n}\n\ninterface LinkedAccountsCardProps {\n  className?: string;\n  compact?: boolean;\n  onAddAccount?: () => void;\n}\n\n// Mock data directly in component to avoid fetch issues\nconst MOCK_ACCOUNTS: MockAccount[] = [\n  {\n    id: \"acc_chase_checking_001\",\n    institution: {\n      name: \"Chase Bank\",\n      id: \"ins_chase\",\n      color: \"#004879\"\n    },\n    type: \"checking\",\n    name: \"Chase Total Checking\",\n    mask: \"4521\",\n    balance: 4250.75,\n    availableBalance: 4250.75,\n    currency: \"USD\",\n    isActive: true,\n    lastTransaction: {\n      merchant: \"Starbucks\",\n      amount: -5.67,\n      date: \"2024-01-15T09:30:00Z\",\n      pending: false\n    }\n  },\n  {\n    id: \"acc_bofa_savings_001\",\n    institution: {\n      name: \"Bank of America\",\n      id: \"ins_bofa\",\n      color: \"#E31837\"\n    },\n    type: \"savings\",\n    name: \"Advantage Savings\",\n    mask: \"8932\",\n    balance: 15750.42,\n    availableBalance: 15750.42,\n    currency: \"USD\",\n    isActive: true,\n    lastTransaction: {\n      merchant: \"Interest Payment\",\n      amount: 18.25,\n      date: \"2024-01-01T00:00:00Z\",\n      pending: false\n    }\n  },\n  {\n    id: \"acc_wells_credit_001\", \n    institution: {\n      name: \"Wells Fargo\",\n      id: \"ins_wells\",\n      color: \"#D50032\"\n    },\n    type: \"credit\",\n    name: \"Cash Wise Visa\",\n    mask: \"1847\",\n    balance: -1285.63,\n    availableBalance: 3714.37,\n    currency: \"USD\",\n    isActive: true,\n    creditLimit: 5000.00,\n    lastTransaction: {\n      merchant: \"Amazon\",\n      amount: -89.99,\n      date: \"2024-01-14T14:22:00Z\",\n      pending: true\n    }\n  },\n  {\n    id: \"acc_schwab_investment_001\",\n    institution: {\n      name: \"Charles Schwab\",\n      id: \"ins_schwab\",\n      color: \"#00A0DF\"\n    },\n    type: \"investment\",\n    name: \"Brokerage Account\",\n    mask: \"7409\",\n    balance: 42850.19,\n    availableBalance: 1250.00,\n    currency: \"USD\",\n    isActive: true,\n    lastTransaction: {\n      merchant: \"VTSAX Purchase\",\n      amount: -1000.00,\n      date: \"2024-01-12T16:00:00Z\",\n      pending: false\n    }\n  },\n  {\n    id: \"acc_citi_credit_001\",\n    institution: {\n      name: \"Citibank\",\n      id: \"ins_citi\",\n      color: \"#DC143C\"\n    },\n    type: \"credit\",\n    name: \"Double Cash Card\",\n    mask: \"2156\",\n    balance: -567.23,\n    availableBalance: 2432.77,\n    currency: \"USD\", \n    isActive: true,\n    creditLimit: 3000.00,\n    lastTransaction: {\n      merchant: \"Whole Foods\",\n      amount: -127.45,\n      date: \"2024-01-13T18:45:00Z\",\n      pending: false\n    }\n  }\n];\n\nexport const LinkedAccountsCard: React.FC<LinkedAccountsCardProps> = ({\n  className,\n  compact = false,\n  onAddAccount,\n}) => {\n  const [accounts, setAccounts] = useState<MockAccount[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [useMocks, setUseMocks] = useState(false);\n\n  // Check if we should use mock data\n  useEffect(() => {\n    const shouldUseMocks = \n      import.meta.env.VITE_USE_MOCKS === 'true' || \n      process.env.NEXT_PUBLIC_USE_MOCKS === 'true' ||\n      window.location.search.includes('mock=true');\n    \n    setUseMocks(shouldUseMocks);\n  }, []);\n\n  // Load accounts data\n  useEffect(() => {\n    if (!useMocks) {\n      setLoading(false);\n      return;\n    }\n\n    const loadMockAccounts = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Simulate network delay\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        setAccounts(MOCK_ACCOUNTS);\n      } catch (err) {\n        console.error('Failed to load mock accounts:', err);\n        setError('Failed to load accounts');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadMockAccounts();\n  }, [useMocks]);\n\n  const getAccountIcon = (type: string) => {\n    switch (type) {\n      case 'checking':\n      case 'savings':\n        return <Building2 className=\"w-5 h-5 text-blue-400\" />;\n      case 'credit':\n        return <CreditCard className=\"w-5 h-5 text-orange-400\" />;\n      case 'investment':\n        return <TrendingUp className=\"w-5 h-5 text-green-400\" />;\n      default:\n        return <PiggyBank className=\"w-5 h-5 text-purple-400\" />;\n    }\n  };\n\n  const getAccountTypeLabel = (type: string) => {\n    switch (type) {\n      case 'checking':\n        return 'Checking';\n      case 'savings':\n        return 'Savings';\n      case 'credit':\n        return 'Credit Card';\n      case 'investment':\n        return 'Investment';\n      default:\n        return 'Account';\n    }\n  };\n\n  const getBalanceColor = (account: MockAccount) => {\n    if (account.type === 'credit') {\n      // Credit cards: negative balance is good\n      return account.balance > 0 ? 'text-red-400' : 'text-green-400';\n    }\n    // Other accounts: positive balance is good\n    return account.balance > 0 ? 'text-green-400' : 'text-red-400';\n  };\n\n  const calculateNetWorth = () => {\n    return accounts.reduce((total, account) => {\n      if (account.type === 'credit') {\n        // Credit cards subtract from net worth\n        return total + account.balance; // balance is already negative\n      }\n      return total + account.balance;\n    }, 0);\n  };\n\n  // Show loading skeleton\n  if (loading) {\n    return (\n      <CardSkeleton \n        variant={compact ? 'compact' : 'default'}\n        className={className}\n        loading\n      />\n    );\n  }\n\n  // Show empty state if not using mocks\n  if (!useMocks) {\n    return (\n      <CardSkeleton \n        variant={compact ? 'compact' : 'default'}\n        className={className}\n      >\n        <div className=\"text-center py-8\">\n          <Building2 className=\"w-12 h-12 text-white/20 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-white/70 mb-2\">\n            No Linked Accounts\n          </h3>\n          <p className=\"text-sm text-white/50 mb-4\">\n            Enable mock mode to see sample accounts\n          </p>\n          <p className=\"text-xs text-white/40\">\n            Add ?mock=true to URL or set VITE_USE_MOCKS=true\n          </p>\n        </div>\n      </CardSkeleton>\n    );\n  }\n\n  // Show error state\n  if (error) {\n    return (\n      <CardSkeleton \n        variant={compact ? 'compact' : 'default'}\n        className={className}\n      >\n        <div className=\"text-center py-8\">\n          <div className=\"w-12 h-12 bg-red-500/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <RefreshCw className=\"w-6 h-6 text-red-400\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-red-400 mb-2\">\n            Failed to Load Accounts\n          </h3>\n          <p className=\"text-sm text-white/60\">\n            {error}\n          </p>\n        </div>\n      </CardSkeleton>\n    );\n  }\n\n  // Compact view\n  if (compact) {\n    return (\n      <CardSkeleton \n        variant=\"compact\"\n        className={className}\n      >\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <Building2 className=\"w-5 h-5 text-blue-400\" />\n            <span className=\"font-semibold text-white\">Linked Accounts</span>\n          </div>\n          <span className=\"text-sm text-white/60\">{accounts.length} accounts</span>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-white/70\">Net Worth</span>\n            <span className={cn(\n              'text-sm font-semibold',\n              calculateNetWorth() >= 0 ? 'text-green-400' : 'text-red-400'\n            )}>\n              {formatCurrency(calculateNetWorth())}\n            </span>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-2\">\n            {accounts.slice(0, 4).map((account) => (\n              <div \n                key={account.id}\n                className=\"flex items-center space-x-2 p-2 bg-white/[0.03] rounded-lg\"\n              >\n                {getAccountIcon(account.type)}\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-xs text-white/80 truncate\">\n                    {account.institution.name}\n                  </p>\n                  <p className=\"text-xs text-white/60\">\n                    •••• {account.mask}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          {accounts.length > 4 && (\n            <p className=\"text-xs text-white/60 text-center\">\n              +{accounts.length - 4} more accounts\n            </p>\n          )}\n        </div>\n      </CardSkeleton>\n    );\n  }\n\n  // Full view\n  return (\n    <div className={cn(\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 hover:bg-white/[0.03] transition-all duration-300\", className)}>\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 rounded-xl bg-white/[0.05] flex items-center justify-center\">\n            <Banknote className=\"w-5 h-5 text-blue-400\" />\n          </div>\n          <h3 className=\"font-medium text-white/80\">Mock Linked Accounts</h3>\n        </div>\n        <span className=\"text-white/60 text-sm\">{accounts.length} accounts</span>\n      </div>\n      \n      <div className=\"space-y-4\">\n        {accounts.map((account, index) => (\n          <div key={index} className=\"flex items-center justify-between p-4 bg-white/[0.03] rounded-xl border border-white/[0.05] hover:bg-white/[0.05] transition-all\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-white/[0.05] flex items-center justify-center\">\n                {getAccountIcon(account.type)}\n              </div>\n              <div>\n                <p className=\"font-medium text-white\">{account.name}</p>\n                <div className=\"flex items-center gap-2\">\n                  <p className=\"text-xs text-white/60\">****{account.mask}</p>\n                  <span className=\"text-xs px-2 py-1 rounded-lg bg-white/[0.05] text-white/70 capitalize\">\n                    {getAccountTypeLabel(account.type)}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <p className={cn(\"font-bold\", getBalanceColor(account))}>\n                {formatCurrency(account.balance)}\n              </p>\n              {account.type === 'credit' && account.creditLimit && (\n                <p className=\"text-xs text-white/60\">\n                  Limit: {formatCurrency(account.creditLimit)}\n                </p>\n              )}\n            </div>\n          </div>\n        ))}\n        \n        <div className=\"mt-6 pt-4 border-t border-white/[0.08]\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"font-medium text-white/80\">Total Net Worth</span>\n            <span className={cn(\n              'text-lg font-bold',\n              calculateNetWorth() >= 0 ? 'text-green-400' : 'text-red-400'\n            )}>\n              {formatCurrency(calculateNetWorth())}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/dashboard/components/NetWorthSummary.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/dashboard/components/NetWorthSummary.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport SimpleGlassCard from '@/shared/ui/SimpleGlassCard';\nimport { vueniTheme } from '@/theme/unified';\nimport { \n  TrendingUp, \n  TrendingDown, \n  DollarSign,\n  PieChart,\n  Target,\n  Calendar,\n  ArrowUpRight,\n  ArrowDownLeft,\n  Wallet,\n  CreditCard,\n  Building,\n  PiggyBank,\n  Eye,\n  EyeOff\n} from 'lucide-react';\nimport { PieChart as RechartsPieChart, Cell, ResponsiveContainer, Pie } from 'recharts';\nimport { AreaChart } from '@/shared/ui/charts';\n\ninterface Account {\n  id: string;\n  type: string;\n  nickname: string;\n  balance: number;\n  availableBalance: number;\n  currency: string;\n}\n\ninterface NetWorthSummaryProps {\n  accounts: Account[];\n  className?: string;\n}\n\nconst NetWorthSummary = ({ accounts, className }: NetWorthSummaryProps) => {\n  const [isVisible, setIsVisible] = useState(true);\n  const [timeframe, setTimeframe] = useState('6M');\n  const [isMobile, setIsMobile] = useState(false);\n\n  // Check if mobile device\n  React.useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 640);\n    };\n    \n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n\n  // Calculate net worth metrics\n  const calculations = React.useMemo(() => {\n    const assets = accounts\n      .filter(acc => !acc.type.toLowerCase().includes('credit'))\n      .reduce((sum, acc) => sum + acc.balance, 0);\n    \n    const liabilities = Math.abs(accounts\n      .filter(acc => acc.type.toLowerCase().includes('credit'))\n      .reduce((sum, acc) => sum + Math.min(0, acc.balance), 0));\n    \n    const netWorth = assets - liabilities;\n    \n    // Calculate allocation\n    const checking = accounts\n      .filter(acc => acc.type.toLowerCase().includes('checking'))\n      .reduce((sum, acc) => sum + acc.balance, 0);\n    \n    const savings = accounts\n      .filter(acc => acc.type.toLowerCase().includes('savings'))\n      .reduce((sum, acc) => sum + acc.balance, 0);\n    \n    const investments = accounts\n      .filter(acc => acc.type.toLowerCase().includes('investment'))\n      .reduce((sum, acc) => sum + acc.balance, 0);\n    \n    const retirement = accounts\n      .filter(acc => acc.type.toLowerCase().includes('retirement'))\n      .reduce((sum, acc) => sum + acc.balance, 0);\n\n    return {\n      assets,\n      liabilities,\n      netWorth,\n      checking,\n      savings,\n      investments,\n      retirement,\n      monthlyChange: 2847.23, // Mock data - would come from historical data\n      yearlyChange: 18420.50, // Mock data\n      changePercentage: 8.2 // Mock data\n    };\n  }, [accounts]);\n\n  // Mock historical data for trend chart\n  const trendData = [\n    { month: 'Jan', value: calculations.netWorth - 18420 },\n    { month: 'Feb', value: calculations.netWorth - 15240 },\n    { month: 'Mar', value: calculations.netWorth - 12680 },\n    { month: 'Apr', value: calculations.netWorth - 9420 },\n    { month: 'May', value: calculations.netWorth - 5830 },\n    { month: 'Jun', value: calculations.netWorth - 2847 },\n    { month: 'Jul', value: calculations.netWorth }\n  ];\n\n  // Allocation data for pie chart\n  const allocationData = [\n    { name: 'Checking', value: calculations.checking, color: colors.accent.blue },\n    { name: 'Savings', value: calculations.savings, color: colors.accent.green },\n    { name: 'Investments', value: calculations.investments, color: colors.accent.purple },\n    { name: 'Retirement', value: calculations.retirement, color: colors.accent.orange }\n  ].filter(item => item.value > 0);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatPercentage = (value: number, total: number) => {\n    return ((value / total) * 100).toFixed(1);\n  };\n\n  return (\n    <div className={`space-y-6 ${className || ''}`}>\n      {/* Main Net Worth Card */}\n      <SimpleGlassCard className=\"p-4 sm:p-6\">\n        <div className=\"flex items-start justify-between mb-4 sm:mb-6\">\n          <div>\n            <h2 className=\"text-lg sm:text-xl font-bold text-white mb-1 sm:mb-2\">Net Worth</h2>\n            <p className=\"text-white/60 text-xs sm:text-sm\">Your total financial position</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={() => setIsVisible(!isVisible)}\n              className=\"p-1.5 sm:p-2 rounded-xl bg-white/[0.06] hover:bg-white/[0.08] transition-colors\"\n            >\n              {isVisible ? (\n                <EyeOff className=\"w-3.5 h-3.5 sm:w-4 sm:h-4 text-white/70\" />\n              ) : (\n                <Eye className=\"w-3.5 h-3.5 sm:w-4 sm:h-4 text-white/70\" />\n              )}\n            </button>\n          </div>\n        </div>\n\n        <div className={`transition-all duration-300 ${isVisible ? '' : 'blur-sm'}`}>\n          {/* Net Worth Value */}\n          <div className=\"mb-4 sm:mb-6\">\n            <div className=\"text-2xl sm:text-4xl font-bold text-white mb-2\">\n              {isVisible ? formatCurrency(calculations.netWorth) : '••••••••'}\n            </div>\n            <div className=\"flex items-center gap-1 sm:gap-2 flex-wrap\">\n              {calculations.changePercentage >= 0 ? (\n                <ArrowUpRight className=\"w-3.5 h-3.5 sm:w-4 sm:h-4 text-green-400\" />\n              ) : (\n                <ArrowDownLeft className=\"w-3.5 h-3.5 sm:w-4 sm:h-4 text-red-400\" />\n              )}\n              <span className={`text-xs sm:text-sm font-medium ${\n                calculations.changePercentage >= 0 ? 'text-green-400' : 'text-red-400'\n              }`}>\n                {calculations.changePercentage >= 0 ? '+' : ''}{calculations.changePercentage}% this year\n              </span>\n              <span className=\"text-white/60 text-xs sm:text-sm\">\n                ({calculations.changePercentage >= 0 ? '+' : ''}{formatCurrency(calculations.yearlyChange)})\n              </span>\n            </div>\n          </div>\n\n          {/* Assets vs Liabilities */}\n          <div className=\"grid grid-cols-2 gap-3 sm:gap-4 mb-4 sm:mb-6\">\n            <div className=\"p-3 sm:p-4 rounded-xl bg-green-500/10 border border-green-500/20\">\n              <div className=\"flex items-center gap-1.5 sm:gap-2 mb-2\">\n                <TrendingUp className=\"w-3.5 h-3.5 sm:w-4 sm:h-4 text-green-400\" />\n                <span className=\"text-green-400 text-xs sm:text-sm font-medium\">Assets</span>\n              </div>\n              <div className=\"text-lg sm:text-xl font-bold text-white\">\n                {formatCurrency(calculations.assets)}\n              </div>\n            </div>\n            \n            <div className=\"p-3 sm:p-4 rounded-xl bg-red-500/10 border border-red-500/20\">\n              <div className=\"flex items-center gap-1.5 sm:gap-2 mb-2\">\n                <TrendingDown className=\"w-3.5 h-3.5 sm:w-4 sm:h-4 text-red-400\" />\n                <span className=\"text-red-400 text-xs sm:text-sm font-medium\">Liabilities</span>\n              </div>\n              <div className=\"text-lg sm:text-xl font-bold text-white\">\n                {formatCurrency(calculations.liabilities)}\n              </div>\n            </div>\n          </div>\n        </div>\n      </SimpleGlassCard>\n\n      {/* Charts Row */}\n      <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n        {/* Net Worth Trend */}\n        <SimpleGlassCard className=\"p-4 sm:p-6\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 sm:mb-6 gap-3 sm:gap-0\">\n            <h3 className=\"text-base sm:text-lg font-semibold text-white\">Net Worth Trend</h3>\n            <div className=\"flex gap-1 flex-wrap\">\n              {['3M', '6M', '1Y', '2Y'].map((period) => (\n                <button\n                  key={period}\n                  onClick={() => setTimeframe(period)}\n                  className={`px-2 sm:px-3 py-1 rounded-xl text-xs font-medium transition-colors ${\n                    timeframe === period\n                      ? 'bg-blue-500/20 text-blue-400 border border-blue-500/30'\n                      : 'text-white/60 hover:text-white hover:bg-white/[0.05]'\n                  }`}\n                >\n                  {period}\n                </button>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"h-40 sm:h-48\">\n            <AreaChart\n              data={trendData.map(item => ({ date: item.month, netWorth: item.value }))}\n              series={[\n                {\n                  dataKey: 'netWorth',\n                  label: 'Net Worth',\n                  color: colors.accent.blue,\n                }\n              ]}\n              financialType=\"currency\"\n              areaConfig={{\n                fillOpacity: 0.3,\n                strokeWidth: isMobile ? 'thin' : 'medium',\n                smoothCurves: true,\n                gradientFill: true,\n                hoverEffects: true,\n              }}\n              dimensions={{\n                height: isMobile ? 160 : 192,\n                responsive: true,\n              }}\n              xAxis={{\n                show: true,\n                tickFormatter: (value) => value,\n              }}\n              yAxis={{\n                show: false,\n              }}\n              grid={{\n                show: false,\n              }}\n              className=\"w-full h-full\"\n            />\n          </div>\n        </SimpleGlassCard>\n\n        {/* Asset Allocation */}\n        <SimpleGlassCard className=\"p-4 sm:p-6\">\n          <h3 className=\"text-base sm:text-lg font-semibold text-white mb-4 sm:mb-6\">Asset Allocation</h3>\n          \n          <div className=\"h-40 sm:h-48 mb-4 sm:mb-6\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <RechartsPieChart>\n                <Pie\n                  data={allocationData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={isMobile ? 40 : 60}\n                  outerRadius={isMobile ? 60 : 80}\n                  paddingAngle={5}\n                  dataKey=\"value\"\n                >\n                  {allocationData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip \n                  formatter={(value: number) => [formatCurrency(value), '']}\n                  contentStyle={{\n                    backgroundColor: 'rgba(0,0,0,0.8)',\n                    border: '1px solid rgba(255,255,255,0.2)',\n                    borderRadius: '12px',\n                    color: '#fff',\n                    fontSize: '12px'\n                  }}\n                />\n              </RechartsPieChart>\n            </ResponsiveContainer>\n          </div>\n\n          <div className=\"space-y-2 sm:space-y-3\">\n            {allocationData.map((item, index) => (\n              <div key={index} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2 sm:gap-3\">\n                  <div \n                    className=\"w-2.5 h-2.5 sm:w-3 sm:h-3 rounded-full flex-shrink-0\"\n                    style={{ backgroundColor: item.color }}\n                  />\n                  <span className=\"text-white/80 text-xs sm:text-sm truncate\">{item.name}</span>\n                </div>\n                <div className=\"text-right flex-shrink-0\">\n                  <div className=\"text-white text-xs sm:text-sm font-medium\">\n                    {formatCurrency(item.value)}\n                  </div>\n                  <div className=\"text-white/60 text-xs\">\n                    {formatPercentage(item.value, calculations.assets)}%\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </SimpleGlassCard>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4\">\n        <SimpleGlassCard className=\"p-3 sm:p-4\">\n          <div className=\"flex items-center gap-2 sm:gap-3 mb-2 sm:mb-3\">\n            <div className=\"p-1.5 sm:p-2 rounded-xl bg-blue-500/10 flex-shrink-0\">\n              <Calendar className=\"w-3 h-3 sm:w-4 sm:h-4 text-blue-400\" />\n            </div>\n            <span className=\"text-white/70 text-xs sm:text-sm\">This Month</span>\n          </div>\n          <div className=\"text-lg sm:text-xl font-bold text-white\">\n            +{formatCurrency(calculations.monthlyChange)}\n          </div>\n          <div className=\"text-green-400 text-xs\">+3.2% increase</div>\n        </SimpleGlassCard>\n\n        <SimpleGlassCard className=\"p-3 sm:p-4\">\n          <div className=\"flex items-center gap-2 sm:gap-3 mb-2 sm:mb-3\">\n            <div className=\"p-1.5 sm:p-2 rounded-xl bg-purple-500/10 flex-shrink-0\">\n              <Target className=\"w-3 h-3 sm:w-4 sm:h-4 text-purple-400\" />\n            </div>\n            <span className=\"text-white/70 text-xs sm:text-sm\">Goal Progress</span>\n          </div>\n          <div className=\"text-lg sm:text-xl font-bold text-white\">73%</div>\n          <div className=\"text-purple-400 text-xs\">On track</div>\n        </SimpleGlassCard>\n\n        <SimpleGlassCard className=\"p-3 sm:p-4\">\n          <div className=\"flex items-center gap-2 sm:gap-3 mb-2 sm:mb-3\">\n            <div className=\"p-1.5 sm:p-2 rounded-xl bg-green-500/10 flex-shrink-0\">\n              <PiggyBank className=\"w-3 h-3 sm:w-4 sm:h-4 text-green-400\" />\n            </div>\n            <span className=\"text-white/70 text-xs sm:text-sm\">Savings Rate</span>\n          </div>\n          <div className=\"text-lg sm:text-xl font-bold text-white\">23.5%</div>\n          <div className=\"text-green-400 text-xs\">Above average</div>\n        </SimpleGlassCard>\n\n        <SimpleGlassCard className=\"p-3 sm:p-4\">\n          <div className=\"flex items-center gap-2 sm:gap-3 mb-2 sm:mb-3\">\n            <div className=\"p-1.5 sm:p-2 rounded-xl bg-orange-500/10 flex-shrink-0\">\n              <Building className=\"w-3 h-3 sm:w-4 sm:h-4 text-orange-400\" />\n            </div>\n            <span className=\"text-white/70 text-xs sm:text-sm\">Credit Score</span>\n          </div>\n          <div className=\"text-lg sm:text-xl font-bold text-white\">785</div>\n          <div className=\"text-green-400 text-xs\">Excellent</div>\n        </SimpleGlassCard>\n      </div>\n    </div>\n  );\n};\n\nexport default NetWorthSummary; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/dashboard/components/health/BiometricMonitorCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/dashboard/components/health/BiometricMonitorCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { BiometricMonitor } from \"@/features/biometric-intervention\";\n\ninterface BiometricMonitorCardProps {\n  compact?: boolean;\n}\n\nexport const BiometricMonitorCard: React.FC<BiometricMonitorCardProps> = ({ compact = false }) => {\n  return <BiometricMonitor compact={compact} />;\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/dashboard/components/health/CardSkeleton.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/dashboard/components/health/CardSkeleton.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/lib/utils';\n\ninterface CardSkeletonProps {\n  children?: React.ReactNode;\n  className?: string;\n  variant?: 'default' | 'compact' | 'expanded';\n  interactive?: boolean;\n  loading?: boolean;\n  onClick?: () => void;\n}\n\nexport const CardSkeleton: React.FC<CardSkeletonProps> = ({\n  children,\n  className,\n  variant = 'default',\n  interactive = false,\n  loading = false,\n  onClick,\n}) => {\n  const baseClasses = cn(\n    // Base Eco Impact card styling (dark mode only)\n    'bg-white/[0.02] border-white/[0.08] rounded-2xl backdrop-blur-md',\n    'transition-all duration-300 ease-out',\n    \n    // Variant-specific styling\n    {\n      'p-4 sm:p-6': variant === 'default',\n      'p-3 sm:p-4': variant === 'compact',\n      'p-6 sm:p-8': variant === 'expanded',\n    },\n    \n    // Interactive states\n    {\n      'cursor-pointer hover:scale-[1.02] hover:bg-white/[0.04] hover:border-white/[0.12] hover:shadow-lg': interactive && !loading,\n      'cursor-not-allowed opacity-60': loading,\n    },\n    \n    // Custom classes\n    className\n  );\n\n  if (loading) {\n    return (\n      <div className={baseClasses}>\n        {/* Loading skeleton */}\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-6 h-6 bg-white/[0.1] rounded-full\"></div>\n              <div className=\"h-5 bg-white/[0.1] rounded w-24\"></div>\n            </div>\n            <div className=\"w-16 h-8 bg-white/[0.1] rounded\"></div>\n          </div>\n          \n          <div className=\"space-y-3\">\n            <div className=\"h-12 bg-white/[0.1] rounded-lg\"></div>\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div className=\"h-8 bg-white/[0.1] rounded\"></div>\n              <div className=\"h-8 bg-white/[0.1] rounded\"></div>\n            </div>\n          </div>\n          \n          <div className=\"h-4 bg-white/[0.1] rounded w-3/4\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={baseClasses} onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\n// Specialized skeletons for different card types\nexport const BiometricCardSkeleton: React.FC<Omit<CardSkeletonProps, 'children'>> = (props) => (\n  <CardSkeleton {...props}>\n    <div className=\"animate-pulse space-y-4\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-5 h-5 bg-red-400/20 rounded-full\"></div>\n          <div className=\"h-4 bg-white/[0.1] rounded w-20\"></div>\n        </div>\n        <div className=\"w-12 h-6 bg-green-400/20 rounded-full\"></div>\n      </div>\n      \n      {/* Stress level bar */}\n      <div className=\"space-y-2\">\n        <div className=\"flex justify-between\">\n          <div className=\"h-3 bg-white/[0.1] rounded w-16\"></div>\n          <div className=\"h-3 bg-white/[0.1] rounded w-8\"></div>\n        </div>\n        <div className=\"w-full bg-white/10 rounded-full h-3\">\n          <div className=\"h-3 bg-gradient-to-r from-green-400 to-red-400 rounded-full w-2/3\"></div>\n        </div>\n      </div>\n      \n      {/* Metrics grid */}\n      <div className=\"grid grid-cols-2 gap-3\">\n        {[1, 2, 3, 4].map((i) => (\n          <div key={i} className=\"space-y-1\">\n            <div className=\"h-2 bg-white/[0.1] rounded w-12\"></div>\n            <div className=\"h-4 bg-white/[0.1] rounded w-16\"></div>\n          </div>\n        ))}\n      </div>\n    </div>\n  </CardSkeleton>\n);\n\nexport const WellnessCardSkeleton: React.FC<Omit<CardSkeletonProps, 'children'>> = (props) => (\n  <CardSkeleton {...props}>\n    <div className=\"animate-pulse space-y-4\">\n      {/* Header with score circle */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-5 h-5 bg-green-400/20 rounded-full\"></div>\n          <div className=\"h-4 bg-white/[0.1] rounded w-24\"></div>\n        </div>\n      </div>\n      \n      {/* Score circle */}\n      <div className=\"flex justify-center\">\n        <div className=\"relative\">\n          <div className=\"w-20 h-20 bg-white/[0.1] rounded-full\"></div>\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"h-6 bg-white/[0.1] rounded w-8\"></div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Metrics */}\n      <div className=\"space-y-2\">\n        <div className=\"h-4 bg-white/[0.1] rounded w-32 mx-auto\"></div>\n        <div className=\"h-3 bg-white/[0.1] rounded w-24 mx-auto\"></div>\n      </div>\n    </div>\n  </CardSkeleton>\n);\n\nexport const AccountCardSkeleton: React.FC<Omit<CardSkeletonProps, 'children'>> = (props) => (\n  <CardSkeleton {...props}>\n    <div className=\"animate-pulse space-y-4\">\n      {/* Institution header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-blue-400/20 rounded-lg\"></div>\n          <div className=\"space-y-1\">\n            <div className=\"h-4 bg-white/[0.1] rounded w-20\"></div>\n            <div className=\"h-3 bg-white/[0.1] rounded w-16\"></div>\n          </div>\n        </div>\n        <div className=\"h-6 bg-white/[0.1] rounded w-12\"></div>\n      </div>\n      \n      {/* Balance */}\n      <div className=\"space-y-1\">\n        <div className=\"h-6 bg-white/[0.1] rounded w-24\"></div>\n        <div className=\"h-3 bg-white/[0.1] rounded w-16\"></div>\n      </div>\n      \n      {/* Last transaction */}\n      <div className=\"flex items-center justify-between pt-2 border-t border-white/[0.08]\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-4 h-4 bg-white/[0.1] rounded\"></div>\n          <div className=\"h-3 bg-white/[0.1] rounded w-20\"></div>\n        </div>\n        <div className=\"h-3 bg-white/[0.1] rounded w-12\"></div>\n      </div>\n    </div>\n  </CardSkeleton>\n); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/dashboard/components/health/MetricDisplay.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/dashboard/components/health/MetricDisplay.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { LucideIcon, TrendingUp, TrendingDown, Minus } from 'lucide-react';\nimport { cn } from '@/shared/lib/utils';\n\ninterface MetricDisplayProps {\n  label: string;\n  value: string | number;\n  unit?: string;\n  icon?: LucideIcon;\n  iconColor?: string;\n  trend?: 'up' | 'down' | 'stable';\n  trendValue?: number;\n  target?: number;\n  variant?: 'default' | 'compact' | 'large';\n  status?: 'good' | 'warning' | 'danger' | 'neutral';\n  className?: string;\n  onClick?: () => void;\n}\n\nexport const MetricDisplay: React.FC<MetricDisplayProps> = ({\n  label,\n  value,\n  unit,\n  icon: Icon,\n  iconColor,\n  trend,\n  trendValue,\n  target,\n  variant = 'default',\n  status = 'neutral',\n  className,\n  onClick,\n}) => {\n  const getTrendIcon = () => {\n    switch (trend) {\n      case 'up':\n        return <TrendingUp className=\"w-3 h-3 text-green-400\" />;\n      case 'down':\n        return <TrendingDown className=\"w-3 h-3 text-red-400\" />;\n      default:\n        return <Minus className=\"w-3 h-3 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (status) {\n      case 'good':\n        return 'text-green-400';\n      case 'warning':\n        return 'text-yellow-400';\n      case 'danger':\n        return 'text-red-400';\n      default:\n        return 'text-white/90';\n    }\n  };\n\n  const getTrendColor = () => {\n    switch (trend) {\n      case 'up':\n        return 'text-green-400';\n      case 'down':\n        return 'text-red-400';\n      default:\n        return 'text-gray-400';\n    }\n  };\n\n  const formatValue = (val: string | number): string => {\n    if (typeof val === 'number') {\n      if (val >= 1000000) return `${(val / 1000000).toFixed(1)}M`;\n      if (val >= 1000) return `${(val / 1000).toFixed(1)}K`;\n      return val.toFixed(val % 1 === 0 ? 0 : 1);\n    }\n    return val;\n  };\n\n  const containerClasses = cn(\n    'transition-all duration-200',\n    {\n      'p-2': variant === 'compact',\n      'p-3': variant === 'default',\n      'p-4': variant === 'large',\n      'cursor-pointer hover:bg-white/[0.04] rounded-lg': onClick,\n    },\n    className\n  );\n\n  const textSizeClasses = {\n    label: {\n      compact: 'text-xs',\n      default: 'text-sm',\n      large: 'text-base',\n    },\n    value: {\n      compact: 'text-sm',\n      default: 'text-lg',\n      large: 'text-2xl',\n    },\n    unit: {\n      compact: 'text-xs',\n      default: 'text-sm',\n      large: 'text-base',\n    },\n  };\n\n  return (\n    <div className={containerClasses} onClick={onClick}>\n      {/* Header with icon and label */}\n      <div className=\"flex items-center justify-between mb-1\">\n        <div className=\"flex items-center space-x-1\">\n          {Icon && (\n            <Icon \n              className={cn(\n                variant === 'compact' ? 'w-3 h-3' : \n                variant === 'large' ? 'w-5 h-5' : 'w-4 h-4'\n              )}\n              style={{ color: iconColor }}\n            />\n          )}\n          <span className={cn(\n            'text-white/70 font-medium',\n            textSizeClasses.label[variant]\n          )}>\n            {label}\n          </span>\n        </div>\n        \n        {trend && (\n          <div className=\"flex items-center space-x-1\">\n            {getTrendIcon()}\n            {trendValue !== undefined && (\n              <span className={cn(\n                'text-xs font-medium',\n                getTrendColor()\n              )}>\n                {trendValue > 0 ? '+' : ''}{trendValue}%\n              </span>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Value display */}\n      <div className=\"flex items-baseline space-x-1\">\n        <span className={cn(\n          'font-bold transition-colors duration-200',\n          getStatusColor(),\n          textSizeClasses.value[variant]\n        )}>\n          {formatValue(value)}\n        </span>\n        {unit && (\n          <span className={cn(\n            'text-white/60',\n            textSizeClasses.unit[variant]\n          )}>\n            {unit}\n          </span>\n        )}\n      </div>\n\n      {/* Target comparison */}\n      {target !== undefined && (\n        <div className=\"mt-1\">\n          <div className=\"flex justify-between text-xs text-white/60\">\n            <span>Target</span>\n            <span>{formatValue(target)}</span>\n          </div>\n          \n          {/* Progress bar for target */}\n          <div className=\"w-full bg-white/10 rounded-full h-1 mt-1\">\n            <div \n              className={cn(\n                'h-1 rounded-full transition-all duration-300',\n                status === 'good' ? 'bg-green-400' :\n                status === 'warning' ? 'bg-yellow-400' :\n                status === 'danger' ? 'bg-red-400' : 'bg-blue-400'\n              )}\n              style={{ \n                width: `${Math.min(100, Math.max(0, (Number(value) / target) * 100))}%` \n              }}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Specialized metric displays for different data types\nexport const StressMetric: React.FC<Omit<MetricDisplayProps, 'status' | 'iconColor'>> = (props) => {\n  const stressValue = Number(props.value);\n  const getStressStatus = (value: number): 'good' | 'warning' | 'danger' => {\n    if (value >= 70) return 'danger';\n    if (value >= 50) return 'warning';\n    return 'good';\n  };\n\n  return (\n    <MetricDisplay \n      {...props}\n      status={getStressStatus(stressValue)}\n      iconColor={\n        stressValue >= 70 ? '#ef4444' :\n        stressValue >= 50 ? '#f59e0b' : '#10b981'\n      }\n    />\n  );\n};\n\nexport const WellnessMetric: React.FC<Omit<MetricDisplayProps, 'status' | 'iconColor'>> = (props) => {\n  const wellnessValue = Number(props.value);\n  const getWellnessStatus = (value: number): 'good' | 'warning' | 'danger' => {\n    if (value >= 80) return 'good';\n    if (value >= 60) return 'warning';\n    return 'danger';\n  };\n\n  return (\n    <MetricDisplay \n      {...props}\n      status={getWellnessStatus(wellnessValue)}\n      iconColor={\n        wellnessValue >= 80 ? '#10b981' :\n        wellnessValue >= 60 ? '#f59e0b' : '#ef4444'\n      }\n    />\n  );\n};\n\nexport const HeartRateMetric: React.FC<Omit<MetricDisplayProps, 'status' | 'iconColor'>> = (props) => {\n  const hrValue = Number(props.value);\n  const getHRStatus = (value: number): 'good' | 'warning' | 'danger' => {\n    if (value >= 60 && value <= 100) return 'good';\n    if (value >= 50 && value <= 120) return 'warning';\n    return 'danger';\n  };\n\n  return (\n    <MetricDisplay \n      {...props}\n      status={getHRStatus(hrValue)}\n      iconColor={\n        hrValue >= 60 && hrValue <= 100 ? '#10b981' :\n        hrValue >= 50 && hrValue <= 120 ? '#f59e0b' : '#ef4444'\n      }\n    />\n  );\n};\n\n// Grid layout for multiple metrics\ninterface MetricGridProps {\n  children: React.ReactNode;\n  columns?: 2 | 3 | 4;\n  className?: string;\n}\n\nexport const MetricGrid: React.FC<MetricGridProps> = ({\n  children,\n  columns = 2,\n  className,\n}) => {\n  const gridClasses = cn(\n    'grid gap-3',\n    {\n      'grid-cols-2': columns === 2,\n      'grid-cols-3': columns === 3,\n      'grid-cols-2 lg:grid-cols-4': columns === 4,\n    },\n    className\n  );\n\n  return (\n    <div className={gridClasses}>\n      {children}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/dashboard/components/health/WellnessScoreCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/dashboard/components/health/WellnessScoreCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Heart, TrendingUp, TrendingDown, Minus, Shield, Activity } from 'lucide-react';\nimport { CardSkeleton } from './CardSkeleton';\nimport { WellnessMetric } from './MetricDisplay';\nimport { useWellnessScore, useBiometricTrends, useBiometrics } from '@/providers/BiometricsProvider';\nimport { cn } from '@/shared/lib/utils';\n\ninterface WellnessScoreCardProps {\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n  showDetails?: boolean;\n  onClick?: () => void;\n}\n\nexport const WellnessScoreCard: React.FC<WellnessScoreCardProps> = ({\n  className,\n  size = 'md',\n  showDetails = true,\n  onClick,\n}) => {\n  const { state, isInitialized } = useBiometrics();\n  const wellnessScore = useWellnessScore();\n  const { wellnessTrend } = useBiometricTrends();\n  const [animatedScore, setAnimatedScore] = useState(0);\n\n  // Animate score change\n  useEffect(() => {\n    if (wellnessScore !== animatedScore) {\n      const timer = setTimeout(() => {\n        setAnimatedScore(wellnessScore);\n      }, 200);\n      return () => clearTimeout(timer);\n    }\n  }, [wellnessScore, animatedScore]);\n\n  // Show loading skeleton if not initialized\n  if (!isInitialized || !state) {\n    return (\n      <CardSkeleton \n        variant={size === 'sm' ? 'compact' : size === 'lg' ? 'expanded' : 'default'}\n        className={className}\n        loading\n      />\n    );\n  }\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return '#10b981'; // green-500\n    if (score >= 60) return '#f59e0b'; // amber-500\n    return '#ef4444'; // red-500\n  };\n\n  const getScoreLabel = (score: number) => {\n    if (score >= 90) return 'Excellent';\n    if (score >= 80) return 'Very Good';\n    if (score >= 70) return 'Good';\n    if (score >= 60) return 'Fair';\n    return 'Needs Attention';\n  };\n\n  const getTrendIcon = () => {\n    switch (wellnessTrend) {\n      case 'improving':\n        return <TrendingUp className=\"w-4 h-4 text-green-400\" />;\n      case 'declining':\n        return <TrendingDown className=\"w-4 h-4 text-red-400\" />;\n      default:\n        return <Minus className=\"w-4 h-4 text-white/40\" />;\n    }\n  };\n\n  const getTrendText = () => {\n    switch (wellnessTrend) {\n      case 'improving':\n        return 'Improving';\n      case 'declining':\n        return 'Declining';\n      default:\n        return 'Stable';\n    }\n  };\n\n  // Circle dimensions based on size\n  const circleDimensions = {\n    sm: { size: 60, radius: 24, strokeWidth: 4 },\n    md: { size: 80, radius: 32, strokeWidth: 5 },\n    lg: { size: 100, radius: 40, strokeWidth: 6 },\n  };\n\n  const { size: circleSize, radius, strokeWidth } = circleDimensions[size];\n  const circumference = 2 * Math.PI * radius;\n  const strokeDashoffset = circumference - (animatedScore / 100) * circumference;\n\n  const textSizes = {\n    sm: { score: 'text-lg', label: 'text-xs', subtitle: 'text-xs' },\n    md: { score: 'text-2xl', label: 'text-sm', subtitle: 'text-sm' },\n    lg: { score: 'text-3xl', label: 'text-base', subtitle: 'text-base' },\n  };\n\n  return (\n    <div className={cn(\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 hover:bg-white/[0.03] transition-all duration-300\", className)} onClick={onClick}>\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 rounded-xl bg-white/[0.05] flex items-center justify-center\">\n            <Heart className=\"w-5 h-5 text-pink-400\" />\n          </div>\n          <h3 className=\"font-medium text-white/80\">Wellness Score</h3>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          {getTrendIcon()}\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <p className=\"text-2xl font-bold text-white\">{Math.round(animatedScore)}</p>\n        <div className=\"flex items-center gap-2 text-sm\">\n          <span className=\"text-pink-400\">{getScoreLabel(animatedScore)}</span>\n          <span className=\"text-white/60\">wellness</span>\n        </div>\n      </div>\n\n      {showDetails && (\n        <div className=\"mt-4 space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-white/60 text-sm\">Sleep Quality</span>\n            <span className=\"text-white/80 text-sm font-medium\">85%</span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-white/60 text-sm\">Activity Level</span>\n            <span className=\"text-white/80 text-sm font-medium\">72%</span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-white/60 text-sm\">Stress Management</span>\n            <span className=\"text-white/80 text-sm font-medium\">78%</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/dashboard/components/health/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/dashboard/components/health/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Health Dashboard Components\nexport { CardSkeleton, BiometricCardSkeleton, WellnessCardSkeleton, AccountCardSkeleton } from './CardSkeleton';\nexport { \n  MetricDisplay, \n  StressMetric, \n  WellnessMetric, \n  HeartRateMetric, \n  MetricGrid \n} from './MetricDisplay';\nexport { BiometricMonitorCard } from './BiometricMonitorCard';\nexport { WellnessScoreCard } from './WellnessScoreCard';\n\n// Re-export biometrics provider and hooks for convenience\nexport { BiometricsProvider } from '@/providers/BiometricsProvider';\nexport { \n  useBiometrics,\n  useBiometricsSelector,\n  useStressIndex,\n  useWellnessScore,\n  useShouldIntervene,\n  useHeartRate,\n  useBiometricTrends,\n  useConnectedDevices,\n  useInterventionLevel,\n  useSynchronizedMetrics,\n  withBiometrics\n} from '@/providers/BiometricsProvider'; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export * as BankLinking from \"./bank-linking\";\nexport * as Subscriptions from \"./subscriptions\";\nexport * as BillNegotiation from \"./bill-negotiation\";\nexport * as SmartSavings from \"./smart-savings\";\nexport * as SharedBudgets from \"./shared-budgets\";\nexport * as AgeOfMoney from \"./age-of-money\";\nexport * as PrivacyHideAmounts from \"./privacy-hide-amounts\";\nexport * as AdvisorChat from \"./advisor-chat\";\nexport * as SafeToSpend from \"./safe-to-spend\";\nexport * as Widgets from \"./widgets\"; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/BaseInsightsPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/BaseInsightsPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Heart, Leaf, TrendingUp, TrendingDown, DollarSign, Shield, PiggyBank, Calendar, ChevronRight, Activity, Recycle } from 'lucide-react';\nimport { UniversalCard } from '../ui/UniversalCard';\nimport { UniversalMetricCard } from './UniversalMetricCard';\nimport { UniversalScoreCard } from './UniversalScoreCard';\nimport ComprehensiveWellnessCard from './ComprehensiveWellnessCard';\nimport ComprehensiveEcoCard from './ComprehensiveEcoCard';\nimport { generateScoreSummary } from '@/features/scoringModel';\nimport { formatPercentage, getScoreColor } from '@/shared/utils/formatters';\nimport { \n  usePerformanceOptimization, \n  useResponsiveBreakpoint, \n  useAnimationDelay,\n  useLayoutDebug,\n  usePerformanceTracking \n} from '@/hooks/usePerformanceOptimization';\n\n// Enhanced TypeScript interfaces\ninterface Transaction {\n  id: string;\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n}\n\ninterface Account {\n  id: string;\n  type: string;\n  nickname: string;\n  balance: number;\n  availableBalance: number;\n  currency: string;\n}\n\nexport type InsightsVariant = 'base' | 'configurable' | 'unified';\nexport type ViewMode = 'overview' | 'trends' | 'financial' | 'health' | 'eco' | 'detailed';\n\ninterface BaseInsightsPageProps {\n  transactions: Transaction[];\n  accounts: Account[];\n  variant?: InsightsVariant;\n  showHeader?: boolean;\n  showTabs?: boolean;\n  compactMode?: boolean;\n  animationsEnabled?: boolean;\n  liquidIntensity?: number;\n  defaultTab?: ViewMode;\n  className?: string;\n}\n\ninterface ScoreData {\n  financial: number;\n  health: number;\n  eco: number;\n}\n\ninterface FinancialMetrics {\n  spendingRatio: number;\n  emergencyFundMonths: number;\n  savingsRate: number;\n  billPaymentScore: number;\n  debtToIncomeRatio: number;\n  monthlyIncome: number;\n  monthlySpending: number;\n  totalBalance: number;\n}\n\nconst BaseInsightsPage = ({ \n  transactions, \n  accounts, \n  variant = 'base',\n  showHeader = true,\n  showTabs = true,\n  compactMode = false,\n  animationsEnabled = true,\n  liquidIntensity = 0.6,\n  defaultTab = 'overview',\n  className = ''\n}: BaseInsightsPageProps) => {\n  const [animatedScores, setAnimatedScores] = useState<ScoreData>({ financial: 0, health: 0, eco: 0 });\n  const [activeTab, setActiveTab] = useState<ViewMode>(defaultTab);\n  const [scores, setScores] = useState<ScoreData>({ financial: 0, health: 0, eco: 0 });\n\n  // Performance and responsive hooks\n  const { liquidSettings } = usePerformanceOptimization();\n  const breakpoint = useResponsiveBreakpoint();\n  const { getAnimationDelay } = useAnimationDelay();\n  \n  // Debug and performance tracking (development only)\n  useLayoutDebug('BaseInsightsPage');\n  usePerformanceTracking('BaseInsightsPage');\n\n  // Sample wellness data based on screenshot\n  const wellnessData = useMemo(() => ({\n    overallScore: 75,\n    monthlySpending: {\n      fitness: 85,\n      nutrition: 38,\n      healthcare: 340,\n      wellness: 75,\n      supplements: 45,\n      mentalHealth: 120\n    },\n    healthTrends: {\n      exercise: 'up' as const,\n      nutrition: 'stable' as const,\n      sleep: 'stable' as const,\n      stress: 'down' as const\n    }\n  }), []);\n\n  // Sample eco data based on screenshot  \n  const ecoData = useMemo(() => ({\n    overallScore: 82,\n    monthlyImpact: {\n      co2Saved: 48,\n      treesEquivalent: 2,\n      waterSaved: 384,\n      energySaved: 256\n    },\n    monthlySpending: {\n      sustainableFood: 127,\n      renewableEnergy: 85,\n      ecoTransport: 45,\n      greenProducts: 120,\n      carbonOffset: 25,\n      conservation: 60\n    },\n    environmentalTrends: {\n      carbonFootprint: 'down' as const,\n      sustainability: 'up' as const,\n      renewable: 'up' as const,\n      waste: 'stable' as const\n    }\n  }), []);\n\n  // Calculate comprehensive financial metrics\n  const metrics = useMemo<FinancialMetrics>(() => {\n    const monthlyIncome = transactions\n      .filter(t => t.amount > 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const monthlySpending = Math.abs(transactions\n      .filter(t => t.amount < 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0));\n\n    const totalBalance = accounts.reduce((sum, acc) => sum + acc.balance, 0);\n    const monthlyExpenses = monthlySpending;\n    \n    const spendingRatio = monthlyIncome > 0 ? (monthlySpending / monthlyIncome) * 100 : 0;\n    const emergencyFundMonths = monthlyExpenses > 0 ? totalBalance / monthlyExpenses : 0;\n    const savingsRate = monthlyIncome > 0 ? ((monthlyIncome - monthlySpending) / monthlyIncome) * 100 : 0;\n    \n    const creditCardDebt = Math.abs(accounts\n      .filter(acc => acc.type === 'Credit Card' && acc.balance < 0)\n      .reduce((sum, acc) => sum + acc.balance, 0));\n    const debtToIncomeRatio = monthlyIncome > 0 ? (creditCardDebt / (monthlyIncome * 12)) * 100 : 0;\n    \n    const completedTransactions = transactions.filter(t => t.status === 'completed').length;\n    const totalTransactions = transactions.length;\n    const billPaymentScore = totalTransactions > 0 ? Math.round((completedTransactions / totalTransactions) * 100) : 100;\n    \n    return {\n      spendingRatio,\n      emergencyFundMonths,\n      savingsRate,\n      debtToIncomeRatio,\n      billPaymentScore,\n      monthlyIncome,\n      monthlySpending,\n      totalBalance\n    };\n  }, [transactions, accounts]);\n\n  useEffect(() => {\n    generateScoreSummary(transactions, accounts).then(setScores).catch(console.error);\n  }, [transactions, accounts]);\n\n  // Enhanced animation with proper state management\n  useEffect(() => {\n    // Ensure DOM is ready before animating\n    const timer = setTimeout(() => {\n      setAnimatedScores(scores);\n    }, 100); // Reduced delay for better UX\n    \n    return () => clearTimeout(timer);\n  }, [scores]);\n\n  // Trend calculation helper\n  const getTrend = useCallback((value: number, threshold: { good: number; excellent: number }) => {\n    if (value >= threshold.excellent) return 'up';\n    if (value >= threshold.good) return 'stable';\n    return 'down';\n  }, []);\n\n  const containerClasses = compactMode \n    ? \"insights-container liquid-insights-container liquid-bg-insights relative overflow-hidden p-4\" \n    : \"insights-container liquid-insights-container liquid-bg-insights relative overflow-hidden\";\n\n  return (\n    <div className={`${containerClasses} ${className}`}>\n      {/* Enhanced floating orbs for depth */}\n      {animationsEnabled && (\n        <>\n          <div className=\"liquid-orb liquid-orb-1\" />\n          <div className=\"liquid-orb liquid-orb-2\" />\n          <div className=\"liquid-orb liquid-orb-3\" />\n          <div className=\"liquid-orb liquid-orb-4\" />\n        </>\n      )}\n      \n      {/* Multiple overlay layers for stunning depth */}\n      <div className=\"absolute inset-0 liquid-overlay-insights pointer-events-none\" />\n      <div className=\"absolute inset-0 insights-gradient-overlay pointer-events-none\" />\n      \n      <div className={compactMode ? \"insights-content p-4\" : \"insights-content responsive-padding-sm\"}>\n        {/* Header */}\n        {showHeader && (\n          <div className=\"insights-header\">\n            <h1 className={compactMode ? \"text-2xl font-bold text-white\" : \"insights-title\"}>\n              Financial Health\n            </h1>\n            <p className={compactMode ? \"text-sm text-white/70\" : \"insights-subtitle\"}>\n              Track your financial wellness with AI-powered insights\n            </p>\n          </div>\n        )}\n\n        {/* Navigation Tabs */}\n        {showTabs && (\n          <UniversalCard \n            variant=\"glass\"\n            className=\"tab-navigation backdrop-blur-xl border border-white/20 mb-6\"\n            liquid={liquidSettings.animated}\n            liquidIntensity={liquidSettings.intensity}\n          >\n            <div className=\"flex flex-wrap gap-2 p-2\">\n              {['overview', 'health', 'eco', 'trends'].map((tab) => (\n                <button\n                  key={tab}\n                  onClick={() => setActiveTab(tab as ViewMode)}\n                  className={`tab-button transition-all duration-300 px-4 py-2 rounded-lg ${\n                    activeTab === tab\n                      ? 'text-white shadow-lg backdrop-blur-sm border border-white/30 bg-white/20'\n                      : 'text-white/70 hover:text-white/90 hover:bg-white/10'\n                  }`}\n                >\n                  {tab.charAt(0).toUpperCase() + tab.slice(1)}\n                </button>\n              ))}\n            </div>\n          </UniversalCard>\n        )}\n\n        {activeTab === 'overview' && (\n          <div className={compactMode ? \"space-y-4\" : \"responsive-spacing-lg\"}>\n            {/* Main Score Cards with responsive grid */}\n            <div className={compactMode ? \"grid grid-cols-1 md:grid-cols-3 gap-4\" : \"main-cards-grid\"}>\n              <div className=\"score-card-container\">\n                <UniversalScoreCard\n                  title=\"Financial Score\"\n                  score={animatedScores.financial}\n                  subtitle=\"Based on spending and savings patterns\"\n                  icon={<DollarSign />}\n                  color={getScoreColor(scores.financial)}\n                  trend={getTrend(scores.financial, { good: 60, excellent: 75 })}\n                  delay={getAnimationDelay(0)}\n                  size={compactMode ? 'sm' : 'md'}\n                  liquidIntensity={liquidSettings.intensity}\n                  animationsEnabled={animationsEnabled}\n                  onClick={() => {\n                    document.getElementById('key-metrics')?.scrollIntoView({ behavior: 'smooth', block: 'start' });\n                  }}\n                />\n              </div>\n              <div className=\"score-card-container\">\n                <UniversalScoreCard\n                  title=\"Health Score\"\n                  score={wellnessData.overallScore}\n                  subtitle=\"Wellness spending insights\"\n                  icon={<Heart />}\n                  color={getScoreColor(wellnessData.overallScore)}\n                  trend=\"stable\"\n                  delay={getAnimationDelay(1)}\n                  size={compactMode ? 'sm' : 'md'}\n                  liquidIntensity={liquidSettings.intensity}\n                  animationsEnabled={animationsEnabled}\n                  onClick={() => setActiveTab('health')}\n                />\n              </div>\n              <div className=\"score-card-container\">\n                <UniversalScoreCard\n                  title=\"Eco Score\"\n                  score={ecoData.overallScore}\n                  subtitle=\"Environmental impact tracking\"\n                  icon={<Leaf />}\n                  color={getScoreColor(ecoData.overallScore)}\n                  trend=\"up\"\n                  delay={getAnimationDelay(2)}\n                  size={compactMode ? 'sm' : 'md'}\n                  liquidIntensity={liquidSettings.intensity}\n                  animationsEnabled={animationsEnabled}\n                  onClick={() => setActiveTab('eco')}\n                />\n              </div>\n            </div>\n\n            {/* Key Metrics */}\n            <div id=\"key-metrics\">\n              <h2 className={compactMode ? \"text-lg font-bold text-white mb-4\" : \"responsive-text-lg font-bold text-white mb-4 sm:mb-6\"}>\n                Key Metrics\n              </h2>\n              <div className={compactMode ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\" : \"metrics-grid\"}>\n                <UniversalMetricCard\n                  title=\"Spending Ratio\"\n                  value={`${formatPercentage(metrics.spendingRatio)}%`}\n                  subtitle=\"of income spent\"\n                  progress={metrics.spendingRatio}\n                  color=\"#F59E0B\"\n                  icon={<DollarSign />}\n                  delay={getAnimationDelay(3)}\n                  size={compactMode ? 'sm' : 'md'}\n                  liquidIntensity={liquidSettings.intensity}\n                  animationsEnabled={animationsEnabled}\n                />\n                <UniversalMetricCard\n                  title=\"Emergency Fund\"\n                  value={`${formatPercentage(metrics.emergencyFundMonths)}`}\n                  subtitle=\"months covered\"\n                  progress={(metrics.emergencyFundMonths / 6) * 100}\n                  color=\"#10B981\"\n                  icon={<Shield />}\n                  delay={getAnimationDelay(4)}\n                  size={compactMode ? 'sm' : 'md'}\n                  liquidIntensity={liquidSettings.intensity}\n                  animationsEnabled={animationsEnabled}\n                />\n                <UniversalMetricCard\n                  title=\"Savings Rate\"\n                  value={`${formatPercentage(metrics.savingsRate)}%`}\n                  subtitle=\"of income saved\"\n                  progress={metrics.savingsRate}\n                  color=\"#3B82F6\"\n                  icon={<PiggyBank />}\n                  delay={getAnimationDelay(5)}\n                  size={compactMode ? 'sm' : 'md'}\n                  liquidIntensity={liquidSettings.intensity}\n                  animationsEnabled={animationsEnabled}\n                />\n                <UniversalMetricCard\n                  title=\"Payment Score\"\n                  value={`${formatPercentage(metrics.billPaymentScore)}%`}\n                  subtitle=\"on-time payments\"\n                  progress={metrics.billPaymentScore}\n                  color=\"#10B981\"\n                  icon={<Calendar />}\n                  delay={getAnimationDelay(6)}\n                  size={compactMode ? 'sm' : 'md'}\n                  liquidIntensity={liquidSettings.intensity}\n                  animationsEnabled={animationsEnabled}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Health Tab - Comprehensive Wellness */}\n        {activeTab === 'health' && (\n          <div className={compactMode ? \"space-y-4\" : \"responsive-spacing-md\"}>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 w-full\">\n              <ComprehensiveWellnessCard data={wellnessData} />\n            </div>\n          </div>\n        )}\n\n        {/* Eco Tab - Comprehensive Environmental Impact */}\n        {activeTab === 'eco' && (\n          <div className={compactMode ? \"space-y-4\" : \"responsive-spacing-md\"}>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 w-full\">\n              <ComprehensiveEcoCard data={ecoData} />\n            </div>\n          </div>\n        )}\n\n        {/* Trends Tab */}\n        {activeTab === 'trends' && (\n          <div className={compactMode ? \"space-y-4\" : \"responsive-spacing-md\"}>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6\">\n              <UniversalCard variant=\"glass\" className=\"p-4\">\n                <h3 className=\"text-base font-semibold text-white mb-4\">Financial Trends</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-white/70 text-sm\">Monthly Spending</span>\n                    <span className=\"text-green-400 text-sm\">↓ 12%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-white/70 text-sm\">Savings Rate</span>\n                    <span className=\"text-blue-400 text-sm\">↑ 8%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-white/70 text-sm\">Investment Growth</span>\n                    <span className=\"text-green-400 text-sm\">↑ 15%</span>\n                  </div>\n                </div>\n              </UniversalCard>\n              <UniversalCard variant=\"glass\" className=\"p-4\">\n                <h3 className=\"text-base font-semibold text-white mb-4\">Category Analysis</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-white/70 text-sm\">Food & Dining</span>\n                    <span className=\"text-red-400 text-sm\">↑ 5%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-white/70 text-sm\">Transportation</span>\n                    <span className=\"text-green-400 text-sm\">↓ 18%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-white/70 text-sm\">Healthcare</span>\n                    <span className=\"text-white/70 text-sm\">— 0%</span>\n                  </div>\n                </div>\n              </UniversalCard>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default BaseInsightsPage;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/CategoryTrendsChart.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/CategoryTrendsChart.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\n// import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { MultiLineChart } from '@/shared/ui/lightweight-charts';\nimport { CategoryTrend } from '@/features/mockHistoricalData';\n\ninterface CategoryTrendsChartProps {\n  data: CategoryTrend[];\n  type: 'health' | 'eco';\n  title: string;\n}\n\nconst CategoryTrendsChart: React.FC<CategoryTrendsChartProps> = ({ data, type, title }) => {\n  const healthCategories = ['fitness', 'nutrition', 'healthcare', 'wellness', 'supplements', 'mentalHealth'];\n  const ecoCategories = ['sustainableFood', 'renewableEnergy', 'ecoTransport', 'greenProducts', 'carbonOffset', 'conservation'];\n  \n  const categories = type === 'health' ? healthCategories : ecoCategories;\n  const [visibleCategories, setVisibleCategories] = useState<Set<string>>(new Set(categories.slice(0, 4))); // Show first 4 by default\n  \n  const categoryColors = {\n    // Health categories\n    fitness: '#10b981',\n    nutrition: '#f59e0b',\n    healthcare: '#3b82f6',\n    wellness: '#ef4444',\n    supplements: '#8b5cf6',\n    mentalHealth: '#06b6d4',\n    // Eco categories\n    sustainableFood: '#10b981',\n    renewableEnergy: '#f59e0b',\n    ecoTransport: '#3b82f6',\n    greenProducts: '#8b5cf6',\n    carbonOffset: '#059669',\n    conservation: '#0d9488'\n  };\n\n  const categoryLabels = {\n    fitness: 'Fitness',\n    nutrition: 'Nutrition',\n    healthcare: 'Healthcare',\n    wellness: 'Wellness',\n    supplements: 'Supplements',\n    mentalHealth: 'Mental Health',\n    sustainableFood: 'Sustainable Food',\n    renewableEnergy: 'Renewable Energy',\n    ecoTransport: 'Eco Transport',\n    greenProducts: 'Green Products',\n    carbonOffset: 'Carbon Offset',\n    conservation: 'Conservation'\n  };\n\n  // Create lines configuration for visible categories\n  const lines = useMemo(() => {\n    return Array.from(visibleCategories).map(category => ({\n      dataKey: category,\n      stroke: categoryColors[category as keyof typeof categoryColors],\n      label: categoryLabels[category as keyof typeof categoryLabels]\n    }));\n  }, [visibleCategories]);\n\n  const toggleCategory = (category: string) => {\n    const newVisible = new Set(visibleCategories);\n    if (newVisible.has(category)) {\n      newVisible.delete(category);\n    } else {\n      newVisible.add(category);\n    }\n    setVisibleCategories(newVisible);\n  };\n\n  return (\n    <div className=\"liquid-glass-fallback rounded-2xl p-6\">\n      <h3 className=\"text-lg sm:text-xl font-bold text-white mb-4\">{title}</h3>\n      \n      {/* Category Toggle Buttons */}\n      <div className=\"flex flex-wrap gap-2 mb-6\">\n        {categories.map(category => (\n          <button\n            key={category}\n            onClick={() => toggleCategory(category)}\n            className={`px-3 py-1 rounded-lg text-xs font-medium transition-all duration-200 ${\n              visibleCategories.has(category)\n                ? 'bg-white/20 text-white border border-white/30'\n                : 'bg-white/5 text-white/60 border border-white/10 hover:bg-white/10'\n            }`}\n            style={visibleCategories.has(category) ? {\n              borderColor: categoryColors[category as keyof typeof categoryColors],\n              boxShadow: `0 0 10px ${categoryColors[category as keyof typeof categoryColors]}20`\n            } : {}}\n          >\n            {categoryLabels[category as keyof typeof categoryLabels]}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"h-80\">\n        <MultiLineChart\n          data={data as any[]}\n          lines={lines}\n          width={600}\n          height={300}\n          xAxisKey=\"date\"\n          showLegend={false} // We have our own category toggles\n          className=\"w-full h-full\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default CategoryTrendsChart; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/ConfigurableInsightsPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/ConfigurableInsightsPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, Suspense, lazy, useCallback } from 'react';\nimport { Heart, Leaf, DollarSign, TrendingUp, TrendingDown, Calendar, BarChart3, Settings, Filter, Eye, EyeOff, Download, Zap, Target, Activity, Shield, PiggyBank, ChevronRight } from 'lucide-react';\nimport { Card } from '@/shared/ui/card';\nimport { Button } from '@/shared/ui/button';\nimport { Badge } from '@/shared/ui/badge';\nimport { Switch } from '@/shared/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/shared/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/shared/ui/tabs';\nimport { cn } from '@/shared/lib/utils';\nimport { SharedScoreCircle, ScoreGroup } from '../shared/SharedScoreCircle';\nimport { formatPercentage, getScoreColor } from '@/shared/utils/formatters';\nimport { UnifiedCard } from '../ui/UnifiedCard';\nimport { UniversalMetricCard } from './UniversalMetricCard';\nimport { UniversalScoreCard } from './UniversalScoreCard';\n\n// Lazy load heavy components for performance\nconst TimeSeriesChart = lazy(() => import('@/features/insights/components/TimeSeriesChart'));\nconst SpendingTrendsChart = lazy(() => import('@/features/insights/components/SpendingTrendsChart'));\nconst CategoryTrendsChart = lazy(() => import('@/features/insights/components/CategoryTrendsChart'));\nconst FinancialCard = lazy(() => import('@/features/insights/components/FinancialCard'));\nconst WellnessCard = lazy(() => import('@/features/insights/components/WellnessCard'));\nconst EcoCard = lazy(() => import('@/features/insights/components/EcoCard'));\nconst AnimatedCircularProgress = lazy(() => import('@/features/insights/components/components/AnimatedCircularProgress'));\n\n// Configurable Insights Page that consolidates:\n// - VueniUnifiedInsightsPage.tsx\n// - ConfigurableInsightsPage.tsx (old)\n// - NewInsightsPage.tsx\n// - SimpleInsightsPage.tsx\n// - RefinedInsightsPage.tsx\n// - OptimizedRefinedInsightsPage.tsx\n\nexport interface Transaction {\n  id: string;\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n}\n\nexport interface Account {\n  id: string;\n  type: string;\n  nickname: string;\n  balance: number;\n  availableBalance: number;\n  currency: string;\n  accountType?: string;\n}\n\nexport type InsightsVariant = 'standard' | 'refined' | 'enhanced' | 'optimized' | 'comprehensive' | 'mobile' | 'dashboard';\nexport type ViewMode = 'overview' | 'trends' | 'financial' | 'health' | 'eco' | 'detailed';\n\ninterface LayoutConfig {\n  showHeader: boolean;\n  showTabs: boolean;\n  showScoreCards: boolean;\n  showCharts: boolean;\n  showDetailedCards: boolean;\n  showMetrics: boolean;\n  compactMode: boolean;\n  animationsEnabled: boolean;\n  autoRefresh: boolean;\n  refreshInterval: number;\n  showSettings: boolean;\n  enableExport: boolean;\n  enableFilters: boolean;\n}\n\nconst variantLayouts: Record<InsightsVariant, LayoutConfig> = {\n  standard: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: false,\n    refreshInterval: 30000,\n    showSettings: false,\n    enableExport: false,\n    enableFilters: false,\n  },\n  refined: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: true,\n    animationsEnabled: true,\n    autoRefresh: false,\n    refreshInterval: 30000,\n    showSettings: true,\n    enableExport: true,\n    enableFilters: true,\n  },\n  enhanced: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n    refreshInterval: 30000,\n    showSettings: true,\n    enableExport: true,\n    enableFilters: true,\n  },\n  optimized: {\n    showHeader: false,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: false,\n    showDetailedCards: false,\n    showMetrics: true,\n    compactMode: true,\n    animationsEnabled: false,\n    autoRefresh: false,\n    refreshInterval: 60000,\n    showSettings: false,\n    enableExport: false,\n    enableFilters: false,\n  },\n  comprehensive: {\n    showHeader: true,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: true,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n    refreshInterval: 15000,\n    showSettings: true,\n    enableExport: true,\n    enableFilters: true,\n  },\n  mobile: {\n    showHeader: false,\n    showTabs: true,\n    showScoreCards: true,\n    showCharts: false,\n    showDetailedCards: true,\n    showMetrics: false,\n    compactMode: true,\n    animationsEnabled: true,\n    autoRefresh: false,\n    refreshInterval: 60000,\n    showSettings: false,\n    enableExport: false,\n    enableFilters: false,\n  },\n  dashboard: {\n    showHeader: true,\n    showTabs: false,\n    showScoreCards: true,\n    showCharts: true,\n    showDetailedCards: false,\n    showMetrics: true,\n    compactMode: false,\n    animationsEnabled: true,\n    autoRefresh: true,\n    refreshInterval: 10000,\n    showSettings: false,\n    enableExport: true,\n    enableFilters: false,\n  },\n};\n\nexport interface ConfigurableInsightsPageProps {\n  transactions: Transaction[];\n  accounts: Account[];\n  variant?: InsightsVariant;\n  customLayout?: Partial<LayoutConfig>;\n  className?: string;\n  onExportData?: () => void;\n  defaultTab?: ViewMode;\n  enableFeatureFlags?: boolean;\n}\n\nconst LoadingSpinner = () => (\n  <div className=\"flex items-center justify-center py-12\">\n    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white/50\"></div>\n  </div>\n);\n\n// Enhanced Score Card Component\nconst EnhancedScoreDisplay = ({ scores, layout, animationsEnabled }: { \n  scores: { credit: number; eco: number; wellness: number }; \n  layout: LayoutConfig;\n  animationsEnabled: boolean \n}) => {\n  if (layout.compactMode) {\n    return (\n      <div className=\"flex justify-center gap-6\">\n        <ScoreGroup \n          scores={scores}\n          size=\"md\"\n          showLabels={true}\n          animated={animationsEnabled}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6\">\n      {Object.entries(scores).map(([type, score]) => (\n        <div key={type} className=\"text-center\">\n          <SharedScoreCircle \n            score={score as number}\n            type={type as any}\n            size=\"lg\"\n            label={type === 'wellness' ? 'Wellness Score' : type === 'eco' ? 'Eco Impact' : 'Financial Health'}\n            showLabel={true}\n            animated={animationsEnabled}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Quick Metrics Component using Universal Cards\nconst QuickMetrics = ({ financialData, wellnessData, ecoData, layout }: { \n  financialData: {\n    monthlySpending: number;\n    spendingRatio: number;\n    savingsRate: number;\n  };\n  wellnessData: {\n    monthlySpending: Record<string, number>;\n  };\n  ecoData: {\n    monthlyImpact: {\n      co2Saved: number;\n    };\n  };\n  layout: LayoutConfig;\n}) => {\n  const monthlySpending = financialData?.monthlySpending ?? 0;\n  const spendingRatio = financialData?.spendingRatio ?? 0;\n  const savingsRate = financialData?.savingsRate ?? 0;\n  \n  const wellnessTotal = wellnessData?.monthlySpending \n    ? Object.values(wellnessData.monthlySpending).reduce((sum: number, amount: number) => sum + (amount || 0), 0)\n    : 0;\n    \n  const co2Saved = ecoData?.monthlyImpact?.co2Saved ?? 0;\n\n  const metrics = [\n    {\n      icon: DollarSign,\n      label: 'Monthly Spending',\n      value: `$${monthlySpending.toLocaleString()}`,\n      change: spendingRatio,\n      color: '#3B82F6',\n    },\n    {\n      icon: Heart,\n      label: 'Wellness Investment',\n      value: `$${wellnessTotal.toLocaleString()}`,\n      change: 12,\n      color: '#EF4444',\n    },\n    {\n      icon: Leaf,\n      label: 'CO₂ Saved',\n      value: `${co2Saved}kg`,\n      change: 8,\n      color: '#10B981',\n    },\n    {\n      icon: PiggyBank,\n      label: 'Savings Rate',\n      value: `${savingsRate.toFixed(1)}%`,\n      change: savingsRate > 20 ? 5 : -3,\n      color: '#8B5CF6',\n    },\n  ];\n\n  return (\n    <div className={layout.compactMode ? \"grid grid-cols-2 lg:grid-cols-4 gap-3\" : \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\"}>\n      {metrics.map((metric, index) => (\n        <UniversalMetricCard\n          key={index}\n          title={metric.label}\n          value={metric.value}\n          subtitle=\"This month\"\n          color={metric.color}\n          icon={<metric.icon />}\n          size={layout.compactMode ? 'sm' : 'md'}\n          variant=\"default\"\n          trend={metric.change > 0 ? 'up' : metric.change < 0 ? 'down' : 'stable'}\n          animationsEnabled={layout.animationsEnabled}\n          delay={index * 100}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport const ConfigurableInsightsPage = React.memo<ConfigurableInsightsPageProps>(({\n  transactions,\n  accounts,\n  variant = 'standard',\n  customLayout,\n  className,\n  onExportData,\n  defaultTab = 'overview',\n  enableFeatureFlags = false,\n}) => {\n  const [activeTab, setActiveTab] = useState<ViewMode>(defaultTab);\n  const [layout, setLayout] = useState<LayoutConfig>(() => ({\n    ...variantLayouts[variant],\n    ...customLayout,\n  }));\n  const [scores, setScores] = useState({ credit: 0, wellness: 0, eco: 0 }); // WHY: Fixed property names to match interface\n  const [isLoading, setIsLoading] = useState(true);\n  const [showLayoutSettings, setShowLayoutSettings] = useState(false);\n  const [isVisible, setIsVisible] = useState(true);\n\n  // Memoized data calculations with proper net worth and formatting\n  const financialData = useMemo(() => {\n    const monthlyIncome = transactions\n      .filter(t => t.amount > 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const monthlySpending = Math.abs(transactions\n      .filter(t => t.amount < 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0));\n\n    // Proper net worth calculation (assets - liabilities)\n    const totalAssets = accounts\n      .filter(acc => {\n        const accountType = acc.accountType?.toLowerCase() || '';\n        return !accountType.includes('credit') && !accountType.includes('loan') && acc.balance > 0;\n      })\n      .reduce((sum, acc) => sum + Math.max(0, acc.balance), 0);\n\n    const totalLiabilities = accounts\n      .filter(acc => {\n        const accountType = acc.accountType?.toLowerCase() || '';\n        return accountType.includes('credit') || accountType.includes('loan') || acc.balance < 0;\n      })\n      .reduce((sum, acc) => sum + Math.abs(Math.min(0, acc.balance)), 0);\n\n    const totalBalance = Math.round(totalAssets - totalLiabilities); // True net worth, rounded\n    \n    const spendingRatio = monthlyIncome > 0 ? Math.round((monthlySpending / monthlyIncome) * 100) : 0;\n    const emergencyFundMonths = monthlySpending > 0 ? Math.round((totalAssets / monthlySpending) * 10) / 10 : 0;\n    const savingsRate = monthlyIncome > 0 ? Math.round(((monthlyIncome - monthlySpending) / monthlyIncome) * 100) : 0;\n    \n    const creditCardDebt = Math.abs(accounts\n      .filter(acc => acc.type === 'Credit Card' && acc.balance < 0)\n      .reduce((sum, acc) => sum + acc.balance, 0));\n    const debtToIncomeRatio = monthlyIncome > 0 ? Math.round((creditCardDebt / (monthlyIncome * 12)) * 100) : 0;\n    \n    const completedTransactions = transactions.filter(t => t.status === 'completed').length;\n    const totalTransactions = transactions.length;\n    const billPaymentScore = totalTransactions > 0 ? Math.round((completedTransactions / totalTransactions) * 100) : 100;\n\n    return {\n      overallScore: Math.round(scores.financial || 75), // Rounded score\n      monthlyIncome: Math.round(monthlyIncome),\n      monthlySpending: Math.round(monthlySpending),\n      totalBalance,\n      savingsRate,\n      spendingRatio,\n      emergencyFundMonths,\n      debtToIncomeRatio,\n      billPaymentScore,\n    };\n  }, [transactions, accounts, scores.financial]);\n\n  const wellnessData = useMemo(() => ({\n    overallScore: scores.health,\n    monthlySpending: {\n      fitness: 85,\n      nutrition: 38,\n      healthcare: 340,\n      wellness: 75,\n      supplements: 45,\n      mentalHealth: 120\n    },\n    healthTrends: {\n      exercise: 'up' as const,\n      nutrition: 'stable' as const,\n      sleep: 'stable' as const,\n      stress: 'down' as const\n    }\n  }), [scores.health]);\n\n  const ecoData = useMemo(() => ({\n    overallScore: scores.eco,\n    monthlyImpact: {\n      co2Saved: 48,\n      treesEquivalent: 2,\n      waterSaved: 384,\n      energySaved: 256\n    },\n    monthlySpending: {\n      sustainableFood: 127,\n      renewableEnergy: 85,\n      ecoTransport: 45,\n      greenProducts: 120,\n      carbonOffset: 25,\n      conservation: 60\n    },\n    environmentalTrends: {\n      carbonFootprint: 'down' as const,\n      sustainability: 'up' as const,\n      renewable: 'up' as const,\n      waste: 'stable' as const\n    }\n  }), [scores.eco]);\n\n  // Load scores with error handling\n  useEffect(() => {\n    const loadScores = async () => {\n      setIsLoading(true);\n      try {\n        // Simulate score calculation\n        await new Promise(resolve => setTimeout(resolve, 500));\n        setScores({\n          credit: 72 + Math.floor(Math.random() * 20), // WHY: Fixed property name to match interface\n          wellness: 75 + Math.floor(Math.random() * 20), // WHY: Fixed property name to match interface  \n          eco: 82 + Math.floor(Math.random() * 15),\n        });\n      } catch (error) {\n        console.error('Error loading scores:', error);\n        setScores({ credit: 72, wellness: 75, eco: 82 }); // WHY: Fixed property names to match interface\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadScores();\n  }, [transactions, accounts]);\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (!layout.autoRefresh) return;\n\n    const interval = setInterval(() => {\n      setScores(prev => ({\n        credit: Math.max(0, Math.min(100, prev.credit + (Math.random() - 0.5) * 4)), // WHY: Fixed property name\n        wellness: Math.max(0, Math.min(100, prev.wellness + (Math.random() - 0.5) * 4)), // WHY: Fixed property name\n        eco: Math.max(0, Math.min(100, prev.eco + (Math.random() - 0.5) * 4)),\n      }));\n    }, layout.refreshInterval);\n\n    return () => clearInterval(interval);\n  }, [layout.autoRefresh, layout.refreshInterval]);\n\n  const tabs = [\n    { id: 'overview' as ViewMode, label: 'Overview', icon: TrendingUp },\n    { id: 'trends' as ViewMode, label: 'Trends', icon: BarChart3 },\n    { id: 'financial' as ViewMode, label: 'Financial', icon: DollarSign },\n    { id: 'health' as ViewMode, label: 'Health', icon: Heart },\n    { id: 'eco' as ViewMode, label: 'Eco', icon: Leaf },\n    { id: 'detailed' as ViewMode, label: 'Detailed', icon: Activity },\n  ];\n\n  const handleLayoutChange = useCallback((key: keyof LayoutConfig, value: boolean | number) => {\n    setLayout(prev => ({ ...prev, [key]: value }));\n  }, []);\n\n  if (isLoading) {\n    return (\n      <UnifiedCard variant=\"default\" className={cn('w-full text-white', className)}>\n        <div className=\"flex items-center justify-center py-20\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white/50\"></div>\n            <span className=\"text-white text-lg\">Loading insights...</span>\n          </div>\n        </div>\n      </UnifiedCard>\n    );\n  }\n\n  return (\n    <div className={cn('w-full text-white space-y-6', className)} data-testid=\"configurable-insights\">\n      {/* Header */}\n      {layout.showHeader && (\n        <UnifiedCard variant=\"default\" className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className={cn(\n                'font-bold text-white mb-2',\n                layout.compactMode ? 'text-xl' : 'text-3xl lg:text-4xl'\n              )}>\n                Financial Insights\n              </h1>\n              <p className=\"text-white/70 text-sm lg:text-base\">\n                {variant === 'comprehensive' ? 'Complete analysis of your financial ecosystem' :\n                 variant === 'enhanced' ? 'Advanced insights with real-time monitoring' :\n                 variant === 'refined' ? 'Streamlined view of your financial health' :\n                 variant === 'mobile' ? 'Your finances at a glance' :\n                 'Comprehensive analysis of your financial health, wellness spending, and environmental impact'}\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setIsVisible(!isVisible)}\n                className=\"text-white/70 hover:text-white\"\n              >\n                {isVisible ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </Button>\n              \n              {layout.enableExport && onExportData && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={onExportData}\n                  className=\"text-white/70 hover:text-white\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                </Button>\n              )}\n              \n              {layout.showSettings && enableFeatureFlags && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setShowLayoutSettings(!showLayoutSettings)}\n                  className=\"text-white/70 hover:text-white\"\n                >\n                  <Settings className=\"h-4 w-4\" />\n                </Button>\n              )}\n            </div>\n          </div>\n        </UnifiedCard>\n      )}\n\n      {/* Layout Settings */}\n      {showLayoutSettings && enableFeatureFlags && (\n        <UnifiedCard variant=\"default\" className=\"p-4\">\n          <h3 className=\"text-lg font-semibold text-white mb-4\">Layout Settings</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Compact Mode</span>\n              <Switch\n                checked={layout.compactMode}\n                onCheckedChange={(checked) => handleLayoutChange('compactMode', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Animations</span>\n              <Switch\n                checked={layout.animationsEnabled}\n                onCheckedChange={(checked) => handleLayoutChange('animationsEnabled', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Auto Refresh</span>\n              <Switch\n                checked={layout.autoRefresh}\n                onCheckedChange={(checked) => handleLayoutChange('autoRefresh', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-white/70\">Show Charts</span>\n              <Switch\n                checked={layout.showCharts}\n                onCheckedChange={(checked) => handleLayoutChange('showCharts', checked)}\n              />\n            </div>\n          </div>\n        </UnifiedCard>\n      )}\n\n      {/* Tab Navigation */}\n      {layout.showTabs && (\n        <UnifiedCard variant=\"default\" className=\"p-2\">\n          <div className=\"flex flex-wrap justify-center gap-2\">\n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <Button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  variant={activeTab === tab.id ? \"default\" : \"ghost\"}\n                  className={cn(\n                    'flex items-center space-x-2 transition-all duration-300',\n                    layout.compactMode ? 'px-3 py-2 text-xs' : 'px-4 py-2 text-sm',\n                    activeTab === tab.id\n                      ? 'bg-white/20 text-white border-white/30'\n                      : 'text-white/70 hover:text-white/90 hover:bg-white/10'\n                  )}\n                >\n                  <Icon className={cn(\"w-4 h-4\", layout.compactMode && \"w-3 h-3\")} />\n                  <span>{tab.label}</span>\n                </Button>\n              );\n            })}\n          </div>\n        </UnifiedCard>\n      )}\n\n      {/* Content */}\n      <div className={cn('transition-all duration-300', !isVisible && 'blur-sm opacity-50')}>\n        {activeTab === 'overview' && (\n          <div className=\"space-y-6\">\n            {/* Score Overview */}\n            {layout.showScoreCards && (\n              <UnifiedCard variant=\"default\" className=\"p-6\">\n                <h3 className={cn(\n                  \"font-bold text-white mb-6 text-center\",\n                  layout.compactMode ? \"text-lg\" : \"text-xl\"\n                )}>\n                  Your Overall Scores\n                </h3>\n                <EnhancedScoreDisplay \n                  scores={scores} \n                  layout={layout}\n                  animationsEnabled={layout.animationsEnabled}\n                />\n              </UnifiedCard>\n            )}\n\n            {/* Quick Metrics */}\n            {layout.showMetrics && (\n              <QuickMetrics \n                financialData={financialData}\n                wellnessData={wellnessData}\n                ecoData={ecoData}\n                layout={layout}\n              />\n            )}\n          </div>\n        )}\n\n        {activeTab === 'trends' && layout.showCharts && (\n          <div className=\"space-y-6\">\n            <Suspense fallback={<LoadingSpinner />}>\n              <TimeSeriesChart \n                data={[]} \n                title=\"Score Progress Over Time (Past 12 Months)\"\n              />\n              <SpendingTrendsChart \n                data={[]} \n                title=\"Monthly Financial Overview\"\n              />\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <CategoryTrendsChart \n                  data={[]} \n                  type=\"health\"\n                  title=\"Health & Wellness Spending Trends\"\n                />\n                <CategoryTrendsChart \n                  data={[]} \n                  type=\"eco\"\n                  title=\"Eco & Sustainability Spending Trends\"\n                />\n              </div>\n            </Suspense>\n          </div>\n        )}\n\n        {activeTab === 'financial' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <FinancialCard data={financialData} />\n          </Suspense>\n        )}\n\n        {activeTab === 'health' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <WellnessCard data={wellnessData} />\n          </Suspense>\n        )}\n\n        {activeTab === 'eco' && layout.showDetailedCards && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <EcoCard data={ecoData} />\n          </Suspense>\n        )}\n\n        {activeTab === 'detailed' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n            <Suspense fallback={<LoadingSpinner />}>\n              <FinancialCard data={financialData} />\n              <WellnessCard data={wellnessData} />\n              <EcoCard data={ecoData} />\n            </Suspense>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nConfigurableInsightsPage.displayName = 'ConfigurableInsightsPage';\n\n// Export preset configurations\nexport const insightsPresets = {\n  dashboard: {\n    variant: 'dashboard' as InsightsVariant,\n    defaultTab: 'overview' as ViewMode,\n  },\n  mobile: {\n    variant: 'mobile' as InsightsVariant, \n    defaultTab: 'overview' as ViewMode,\n  },\n  detailed: {\n    variant: 'comprehensive' as InsightsVariant,\n    defaultTab: 'detailed' as ViewMode,\n  },\n  minimal: {\n    variant: 'optimized' as InsightsVariant,\n    defaultTab: 'overview' as ViewMode,\n  },\n  analytics: {\n    variant: 'enhanced' as InsightsVariant,\n    defaultTab: 'trends' as ViewMode,\n  },\n} as const;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/ConsolidatedInsightsPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/ConsolidatedInsightsPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { UniversalCard } from '@/shared/ui/UniversalCard';\nimport { creditScoreService } from '@/features/credit/api/creditScoreService';\nimport { accountService } from '@/features/accounts/api/accountService';\nimport { investmentService } from '@/features/investments/api/investmentService';\nimport { budgetService } from '@/features/budget/api/budgetService';\nimport { biometricStream } from '@/features/biometric-intervention/api/BiometricStream';\nimport { \n  selectTotalWealth, \n  selectInvestmentAssets\n} from '@/selectors/financialSelectors';\nimport { \n  DollarSign, \n  TrendingUp, \n  Shield, \n  Heart, \n  Leaf, \n  PiggyBank,\n  CreditCard,\n  Target,\n  BarChart3,\n  Activity\n} from 'lucide-react';\n\n// Real data service integration with fallbacks\nconst useInsightsData = () => {\n  const [data, setData] = useState({\n    creditScore: 750 as number | undefined,\n    financial: {\n      score: 78,\n      trend: 'up' as const,\n      trendValue: '+5%',\n      metrics: [\n        { label: 'Total Wealth', value: '$0', icon: DollarSign, color: '#10b981' },\n        { label: 'Credit Score', value: '750', icon: Shield, color: '#3b82f6' },\n        { label: 'Monthly Savings', value: '$0', icon: PiggyBank, color: '#8b5cf6' },\n        { label: 'Investments', value: '$0', icon: TrendingUp, color: '#f59e0b' }\n      ],\n      trends: [\n        { label: 'Income', trend: 'up' as const, value: '+12%' },\n        { label: 'Expenses', trend: 'down' as const, value: '-3%' },\n        { label: 'Savings Rate', trend: 'up' as const, value: '+8%' },\n        { label: 'Debt Ratio', trend: 'down' as const, value: '-15%' }\n      ]\n    },\n    wellness: {\n      score: 85,\n      trend: 'up' as const,\n      trendValue: '+8%',\n      metrics: [\n        { label: 'Sleep Quality', value: '8.2/10', icon: Heart, color: '#ef4444' },\n        { label: 'Exercise Days', value: '5/week', icon: Activity, color: '#10b981' },\n        { label: 'Stress Level', value: 'Low', icon: Shield, color: '#3b82f6' },\n        { label: 'Nutrition', value: 'Good', icon: Leaf, color: '#84cc16' }\n      ],\n      trends: [\n        { label: 'Energy', trend: 'up' as const, value: '+15%' },\n        { label: 'Mood', trend: 'up' as const, value: '+10%' },\n        { label: 'Focus', trend: 'stable' as const, value: '0%' },\n        { label: 'Recovery', trend: 'up' as const, value: '+7%' }\n      ]\n    },\n    eco: {\n      score: 72,\n      trend: 'up' as const,\n      trendValue: '+12%',\n      metrics: [\n        { label: 'Carbon Footprint', value: '2.1 kg', icon: Leaf, color: '#10b981' },\n        { label: 'Sustainable Spending', value: '23%', icon: Shield, color: '#3b82f6' },\n        { label: 'Green Transport', value: '12.5 kg', icon: DollarSign, color: '#84cc16' },\n        { label: 'Food Impact', value: '18.3 kg', icon: Activity, color: '#f59e0b' }\n      ],\n      spending: [\n        { category: 'Sustainable Products', amount: 156 },\n        { category: 'Public Transport', amount: 78 },\n        { category: 'Renewable Energy', amount: 89 },\n        { category: 'Local Food', amount: 234 }\n      ]\n    },\n    spending: {\n      trends: [\n        { label: 'Groceries', trend: 'up' as const, value: '+5%' },\n        { label: 'Entertainment', trend: 'down' as const, value: '-12%' },\n        { label: 'Transport', trend: 'stable' as const, value: '0%' },\n        { label: 'Utilities', trend: 'down' as const, value: '-8%' }\n      ],\n      spending: [\n        { category: 'Groceries', amount: 678 },\n        { category: 'Entertainment', amount: 234 },\n        { category: 'Transport', amount: 156 },\n        { category: 'Utilities', amount: 289 },\n        { category: 'Healthcare', amount: 123 },\n        { category: 'Shopping', amount: 445 }\n      ]\n    },\n    savingsGoalProgress: 78,\n    investmentGrowth: '+15.2%'\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  useEffect(() => {\n    const loadRealData = async () => {\n      try {\n        const familyId = 'demo_family';\n        \n        // Load financial data\n        const [accounts, creditScore] = await Promise.all([\n          accountService.getFamilyAccounts(familyId).catch(() => []),\n          creditScoreService.getCurrentScore().catch(() => ({ score: 750 }))\n        ]);\n        \n        const totalWealth = accounts.length > 0 ? selectTotalWealth(accounts) : 67432;\n        const investmentAssets = accounts.length > 0 ? selectInvestmentAssets(accounts) : 23567;\n        \n        // Load investment portfolio\n        const portfolio = await investmentService.getFamilyPortfolio(familyId).catch(() => ({\n          totalValue: investmentAssets,\n          totalGainLossPercent: 15.2\n        }));\n        \n        // Load savings goals\n        const savingsGoals = await budgetService.getFamilySavingsGoals(familyId).catch(() => []);\n        const avgProgress = savingsGoals.length > 0 \n          ? savingsGoals.reduce((sum, goal) => {\n              const progress = goal.targetAmount > 0 ? (goal.currentAmount / goal.targetAmount) * 100 : 0;\n              return sum + Math.min(100, progress);\n            }, 0) / savingsGoals.length \n          : 78;\n        \n        // Get wellness data\n        const wellnessScore = biometricStream.getCurrentWellnessScore() || 85;\n        \n        // Update with real data\n        setData(prevData => ({\n          ...prevData,\n          creditScore: creditScore.score,\n          financial: {\n            ...prevData.financial,\n            metrics: [\n              { \n                label: 'Total Wealth', \n                value: formatCurrency(totalWealth), \n                icon: DollarSign, \n                color: '#10b981' \n              },\n              { \n                label: 'Credit Score', \n                value: creditScore.score.toString(), \n                icon: Shield, \n                color: '#3b82f6' \n              },\n              { \n                label: 'Monthly Savings', \n                value: formatCurrency(1245), \n                icon: PiggyBank, \n                color: '#8b5cf6' \n              },\n              { \n                label: 'Investments', \n                value: formatCurrency(portfolio.totalValue), \n                icon: TrendingUp, \n                color: '#f59e0b' \n              }\n            ]\n          },\n          wellness: {\n            ...prevData.wellness,\n            score: wellnessScore\n          },\n          savingsGoalProgress: Math.round(avgProgress),\n          investmentGrowth: `+${portfolio.totalGainLossPercent.toFixed(1)}%`\n        }));\n        \n      } catch (error) {\n        console.error('Failed to load insights data:', error);\n        // Fallback to hardcoded values on error\n      }\n    };\n\n    loadRealData();\n  }, []);\n\n  return data;\n};\n\nexport const ConsolidatedInsightsPage: React.FC = () => {\n  const data = useInsightsData();\n\n  return (\n    <div className=\"p-6 space-y-6 max-w-7xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-white mb-2\">\n          Financial Insights Dashboard\n        </h1>\n        <p className=\"text-white/70\">\n          Comprehensive view of your financial wellness, eco impact, and spending patterns\n        </p>\n      </div>\n\n      {/* Main Score Cards Row */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <UniversalCard\n          variant=\"financial\"\n          title=\"Financial Health\"\n          icon={DollarSign}\n          iconColor=\"#10b981\"\n          score={data.financial.score}\n          trend={data.financial.trend}\n          trendValue={data.financial.trendValue}\n          data={{ metrics: data.financial.metrics.slice(0, 2) }}\n          interactive\n          onClick={() => console.log('Navigate to financial details')}\n        />\n\n        <UniversalCard\n          variant=\"wellness\"\n          title=\"Wellness Score\"\n          icon={Heart}\n          iconColor=\"#ef4444\"\n          score={data.wellness.score}\n          trend={data.wellness.trend}\n          trendValue={data.wellness.trendValue}\n          data={{ metrics: data.wellness.metrics.slice(0, 2) }}\n          interactive\n          onClick={() => console.log('Navigate to wellness details')}\n        />\n\n        <UniversalCard\n          variant=\"eco\"\n          title=\"Eco Impact\"\n          icon={Leaf}\n          iconColor=\"#10b981\"\n          score={data.eco.score}\n          trend={data.eco.trend}\n          trendValue={data.eco.trendValue}\n          data={{ metrics: data.eco.metrics.slice(0, 2) }}\n          interactive\n          onClick={() => console.log('Navigate to eco details')}\n        />\n      </div>\n\n      {/* Detailed Metrics Row */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <UniversalCard\n          variant=\"glass\"\n          title=\"Financial Metrics\"\n          icon={BarChart3}\n          iconColor=\"#6366f1\"\n          data={{ \n            metrics: data.financial.metrics,\n            trends: data.financial.trends \n          }}\n          size=\"lg\"\n        />\n\n        <UniversalCard\n          variant=\"glass\"\n          title=\"Wellness Tracking\"\n          icon={Activity}\n          iconColor=\"#ef4444\"\n          data={{ \n            metrics: data.wellness.metrics,\n            trends: data.wellness.trends \n          }}\n          size=\"lg\"\n        />\n      </div>\n\n      {/* Spending Analysis Row */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <UniversalCard\n          variant=\"glass\"\n          title=\"Eco Spending\"\n          icon={Leaf}\n          iconColor=\"#10b981\"\n          data={{ \n            metrics: data.eco.metrics.slice(2, 4),\n            spending: data.eco.spending \n          }}\n          size=\"lg\"\n        />\n\n        <UniversalCard\n          variant=\"glass\"\n          title=\"Category Spending\"\n          icon={CreditCard}\n          iconColor=\"#8b5cf6\"\n          data={{ \n            trends: data.spending.trends,\n            spending: data.spending.spending \n          }}\n          size=\"lg\"\n        />\n      </div>\n\n      {/* Quick Action Cards */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <UniversalCard\n          variant=\"minimal\"\n          title=\"Savings Goal\"\n          icon={Target}\n          iconColor=\"#f59e0b\"\n          value={`${data.savingsGoalProgress}%`}\n          size=\"sm\"\n          interactive\n          onClick={() => console.log('Navigate to savings goals')}\n        />\n\n        <UniversalCard\n          variant=\"minimal\"\n          title=\"Credit Monitor\"\n          icon={Shield}\n          iconColor=\"#3b82f6\"\n          value={data.creditScore?.toString() || \"750\"}\n          trend=\"up\"\n          trendValue=\"+12\"\n          size=\"sm\"\n          interactive\n          onClick={() => console.log('Navigate to credit monitoring')}\n        />\n\n        <UniversalCard\n          variant=\"minimal\"\n          title=\"Investment Growth\"\n          icon={TrendingUp}\n          iconColor=\"#10b981\"\n          value={data.investmentGrowth}\n          trend=\"up\"\n          trendValue=\"This month\"\n          size=\"sm\"\n          interactive\n          onClick={() => console.log('Navigate to investments')}\n        />\n\n        <UniversalCard\n          variant=\"minimal\"\n          title=\"Budget Status\"\n          icon={PiggyBank}\n          iconColor=\"#8b5cf6\"\n          value=\"On Track\"\n          trend=\"stable\"\n          size=\"sm\"\n          interactive\n          onClick={() => console.log('Navigate to budget')}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ConsolidatedInsightsPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/EcoCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/EcoCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import ComprehensiveEcoCard from './components/ComprehensiveEcoCard';\n\n// Backward compatibility wrapper\nexport default ComprehensiveEcoCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/EcoScore.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/EcoScore.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport GlassCard from '../GlassCard';\nimport { Leaf, TrendingUp, Recycle } from 'lucide-react';\n\ninterface EcoScoreProps {\n  score: number;\n  metrics: {\n    carbonFootprint: number;\n    sustainableSpending: number;\n    greenTransport: number;\n    renewableEnergy: number;\n  };\n  monthlyImpact: {\n    co2Saved: number;\n    treesEquivalent: number;\n  };\n}\n\nconst EcoScore = ({ score, metrics, monthlyImpact }: EcoScoreProps) => {\n  const [animatedScore, setAnimatedScore] = useState(0);\n\n  // Helper function to format percentages properly\n  const formatPercentage = (value: number) => {\n    return Math.round(value * 10) / 10; // Round to 1 decimal place\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setAnimatedScore(score);\n    }, 200);\n    return () => clearTimeout(timer);\n  }, [score]);\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return '#34C759';\n    if (score >= 60) return '#FF9500';\n    return '#FF3B30';\n  };\n\n  const getEcoLabel = (score: number) => {\n    if (score >= 90) return 'Eco Champion';\n    if (score >= 80) return 'Very Green';\n    if (score >= 70) return 'Eco Friendly';\n    if (score >= 60) return 'Making Progress';\n    return 'Room to Grow';\n  };\n\n  const circumference = 2 * Math.PI * 40;\n  const strokeDasharray = circumference;\n  const strokeDashoffset = circumference - (animatedScore / 100) * circumference;\n\n  return (\n    <GlassCard \n      className=\"glass-card glass-dark bg-gradient-to-br from-green-500/20 to-emerald-500/20 liquid-gradient p-6 text-center relative overflow-hidden stagger-item\"\n      style={{ animationDelay: '100ms' }}\n    >\n      {/* Background Gradient */}\n      <div \n        className=\"absolute inset-0 opacity-10 rounded-2xl\"\n        style={{\n          background: `linear-gradient(135deg, ${getScoreColor(score)}20, transparent 70%)`\n        }}\n      />\n      \n      <div className=\"relative z-10\">\n        <div className=\"flex items-center justify-center mb-4\">\n          <Leaf className=\"w-5 h-5 text-green-400 mr-2\" />\n          <h3 className=\"text-lg font-bold text-white\">Eco Score</h3>\n          <TrendingUp className=\"w-4 h-4 text-green-400 ml-2\" />\n        </div>\n        \n        {/* Enhanced Circular Progress with Glass Effect */}\n        <div className=\"relative flex justify-center items-center mb-4\">\n          <div className=\"glass-card p-2 rounded-full\">\n            <svg width=\"120\" height=\"120\" className=\"transform -rotate-90\">\n              <circle\n                cx=\"60\"\n                cy=\"60\"\n                r=\"40\"\n                stroke=\"rgba(255, 255, 255, 0.1)\"\n                strokeWidth=\"6\"\n                fill=\"none\"\n              />\n              <circle\n                cx=\"60\"\n                cy=\"60\"\n                r=\"40\"\n                stroke=\"url(#ecoGradient)\"\n                strokeWidth=\"6\"\n                fill=\"none\"\n                strokeDasharray={strokeDasharray}\n                strokeDashoffset={strokeDashoffset}\n                strokeLinecap=\"round\"\n                className=\"transition-all duration-1000 ease-out\"\n                style={{\n                  filter: `drop-shadow(0 0 8px ${getScoreColor(score)}40)`\n                }}\n              />\n              <defs>\n                <linearGradient id=\"ecoGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                  <stop offset=\"0%\" stopColor=\"#10b981\" />\n                  <stop offset=\"100%\" stopColor=\"#059669\" />\n                </linearGradient>\n              </defs>\n            </svg>\n          </div>\n          \n          <div className=\"absolute inset-0 flex flex-col justify-center items-center\">\n            <div \n              className=\"text-3xl font-bold text-white transition-all duration-1000 ease-out\"\n              style={{ color: getScoreColor(score) }}\n            >\n              {Math.round(animatedScore)}\n            </div>\n            <div className=\"text-white/50 text-xs\">out of 100</div>\n          </div>\n        </div>\n        \n        <div className=\"mb-4\">\n          <div \n            className=\"text-xl font-bold mb-2\"\n            style={{ color: getScoreColor(score) }}\n          >\n            {getEcoLabel(score)}\n          </div>\n          <p className=\"text-white/70 text-sm\">\n            Environmental impact of your spending\n          </p>\n        </div>\n        \n        {/* Eco Metrics with Glass Progress Bars */}\n        <div className=\"space-y-3 mb-4\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-white/80 text-sm\">Carbon Footprint</span>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-16 glass-progress h-2\">\n                <div \n                  className=\"glass-progress-fill red h-2 rounded-full transition-all duration-1000\"\n                  style={{ width: `${metrics.carbonFootprint}%` }}\n                />\n              </div>\n              <span className=\"text-white/60 text-xs\">Low</span>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-white/80 text-sm\">Sustainable Spending</span>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-16 glass-progress h-2\">\n                <div \n                  className=\"glass-progress-fill green h-2 rounded-full transition-all duration-1000\"\n                  style={{ width: `${formatPercentage(metrics.sustainableSpending)}%` }}\n                />\n              </div>\n              <span className=\"text-white/60 text-xs\">{formatPercentage(metrics.sustainableSpending)}%</span>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-white/80 text-sm\">Green Transport</span>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-16 glass-progress h-2\">\n                <div \n                  className=\"glass-progress-fill blue h-2 rounded-full transition-all duration-1000\"\n                  style={{ width: `${formatPercentage(metrics.greenTransport)}%` }}\n                />\n              </div>\n              <span className=\"text-white/60 text-xs\">{formatPercentage(metrics.greenTransport)}%</span>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-white/80 text-sm\">Renewable Energy</span>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-16 glass-progress h-2\">\n                <div \n                  className=\"bg-purple-500 h-2 rounded-full transition-all duration-1000\"\n                  style={{ width: `${formatPercentage(metrics.renewableEnergy)}%` }}\n                />\n              </div>\n              <span className=\"text-white/60 text-xs\">{formatPercentage(metrics.renewableEnergy)}%</span>\n            </div>\n          </div>\n        </div>\n        \n        {/* Monthly Impact with Enhanced Glass Effect */}\n        <GlassCard className=\"glass-green p-3\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Recycle className=\"h-4 w-4 text-green-400\" />\n            <span className=\"text-sm font-medium text-green-300\">Monthly Impact</span>\n          </div>\n          <div className=\"text-sm text-green-200 space-y-1\">\n            <div>CO₂ Saved: {monthlyImpact.co2Saved}kg</div>\n            <div>≈ {monthlyImpact.treesEquivalent} trees planted</div>\n          </div>\n        </GlassCard>\n      </div>\n    </GlassCard>\n  );\n};\n\nexport default EcoScore;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/EnhancedInsightsPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/EnhancedInsightsPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Heart, Leaf, TrendingUp, TrendingDown, DollarSign, Shield, PiggyBank, Calendar, ChevronRight, Activity, Recycle } from 'lucide-react';\nimport EnhancedGlassCard from '../ui/EnhancedGlassCard';\nimport AnimatedCircularProgress from './components/AnimatedCircularProgress';\nimport EnhancedScoreCard from './components/EnhancedScoreCard';\nimport EnhancedMetricCard from './components/EnhancedMetricCard';\nimport ComprehensiveWellnessCard from './ComprehensiveWellnessCard';\nimport ComprehensiveEcoCard from './ComprehensiveEcoCard';\nimport { generateScoreSummary } from '@/features/scoringModel';\nimport { formatPercentage, getScoreColor } from '@/shared/utils/formatters';\nimport { \n  usePerformanceOptimization, \n  useResponsiveBreakpoint, \n  useAnimationDelay,\n  useLayoutDebug,\n  usePerformanceTracking \n} from '@/hooks/usePerformanceOptimization';\n\n// Enhanced TypeScript interfaces\ninterface Transaction {\n  id: string;\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n}\n\ninterface Account {\n  id: string;\n  type: string;\n  nickname: string;\n  balance: number;\n  availableBalance: number;\n  currency: string;\n}\n\ninterface InsightsPageProps {\n  transactions: Transaction[];\n  accounts: Account[];\n}\n\ninterface ScoreData {\n  financial: number;\n  health: number;\n  eco: number;\n}\n\ninterface FinancialMetrics {\n  spendingRatio: number;\n  emergencyFundMonths: number;\n  savingsRate: number;\n  billPaymentScore: number;\n  debtToIncomeRatio: number;\n  monthlyIncome: number;\n  monthlySpending: number;\n  totalBalance: number;\n}\n\nconst EnhancedInsightsPage = ({ transactions, accounts }: InsightsPageProps) => {\n  const [animatedScores, setAnimatedScores] = useState<ScoreData>({ financial: 0, health: 0, eco: 0 });\n  const [activeTab, setActiveTab] = useState('summary');\n  const [scores, setScores] = useState<ScoreData>({ financial: 0, health: 0, eco: 0 });\n\n  // Performance and responsive hooks\n  const { liquidSettings } = usePerformanceOptimization();\n  const breakpoint = useResponsiveBreakpoint();\n  const { getAnimationDelay } = useAnimationDelay();\n  \n  // Debug and performance tracking (development only)\n  useLayoutDebug('EnhancedInsightsPage');\n  usePerformanceTracking('EnhancedInsightsPage');\n\n  // Sample wellness data based on screenshot\n  const wellnessData = useMemo(() => ({\n    overallScore: 75,\n    monthlySpending: {\n      fitness: 85,\n      nutrition: 38,\n      healthcare: 340,\n      wellness: 75,\n      supplements: 45,\n      mentalHealth: 120\n    },\n    healthTrends: {\n      exercise: 'up' as const,\n      nutrition: 'stable' as const,\n      sleep: 'stable' as const,\n      stress: 'down' as const\n    }\n  }), []);\n\n  // Sample eco data based on screenshot  \n  const ecoData = useMemo(() => ({\n    overallScore: 82,\n    monthlyImpact: {\n      co2Saved: 48,\n      treesEquivalent: 2,\n      waterSaved: 384,\n      energySaved: 256\n    },\n    monthlySpending: {\n      sustainableFood: 127,\n      renewableEnergy: 85,\n      ecoTransport: 45,\n      greenProducts: 120,\n      carbonOffset: 25,\n      conservation: 60\n    },\n    environmentalTrends: {\n      carbonFootprint: 'down' as const,\n      sustainability: 'up' as const,\n      renewable: 'up' as const,\n      waste: 'stable' as const\n    }\n  }), []);\n\n  // Calculate comprehensive financial metrics (from current InsightsPage logic)\n  const metrics = useMemo<FinancialMetrics>(() => {\n    const monthlyIncome = transactions\n      .filter(t => t.amount > 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const monthlySpending = Math.abs(transactions\n      .filter(t => t.amount < 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0));\n\n    const totalBalance = accounts.reduce((sum, acc) => sum + acc.balance, 0);\n    const monthlyExpenses = monthlySpending;\n    \n    const spendingRatio = monthlyIncome > 0 ? (monthlySpending / monthlyIncome) * 100 : 0;\n    const emergencyFundMonths = monthlyExpenses > 0 ? totalBalance / monthlyExpenses : 0;\n    const savingsRate = monthlyIncome > 0 ? ((monthlyIncome - monthlySpending) / monthlyIncome) * 100 : 0;\n    \n    const creditCardDebt = Math.abs(accounts\n      .filter(acc => acc.type === 'Credit Card' && acc.balance < 0)\n      .reduce((sum, acc) => sum + acc.balance, 0));\n    const debtToIncomeRatio = monthlyIncome > 0 ? (creditCardDebt / (monthlyIncome * 12)) * 100 : 0;\n    \n    const completedTransactions = transactions.filter(t => t.status === 'completed').length;\n    const totalTransactions = transactions.length;\n    const billPaymentScore = totalTransactions > 0 ? Math.round((completedTransactions / totalTransactions) * 100) : 100;\n    \n    return {\n      spendingRatio,\n      emergencyFundMonths,\n      savingsRate,\n      debtToIncomeRatio,\n      billPaymentScore,\n      monthlyIncome,\n      monthlySpending,\n      totalBalance\n    };\n  }, [transactions, accounts]);\n\n  useEffect(() => {\n    generateScoreSummary(transactions, accounts).then(setScores).catch(console.error);\n  }, [transactions, accounts]);\n\n  // Enhanced animation with proper state management\n  useEffect(() => {\n    // Ensure DOM is ready before animating\n    const timer = setTimeout(() => {\n      setAnimatedScores(scores);\n    }, 100); // Reduced delay for better UX\n    \n    return () => clearTimeout(timer);\n  }, [scores]);\n\n  // Trend calculation helper\n  const getTrend = useCallback((value: number, threshold: { good: number; excellent: number }) => {\n    if (value >= threshold.excellent) return 'up';\n    if (value >= threshold.good) return 'stable';\n    return 'down';\n  }, []);\n\n  return (\n    <div className=\"insights-container liquid-insights-container liquid-bg-insights relative overflow-hidden\">\n      {/* Enhanced floating orbs for depth */}\n      <div className=\"liquid-orb liquid-orb-1\" />\n      <div className=\"liquid-orb liquid-orb-2\" />\n      <div className=\"liquid-orb liquid-orb-3\" />\n      <div className=\"liquid-orb liquid-orb-4\" />\n      \n      {/* Multiple overlay layers for stunning depth */}\n      <div className=\"absolute inset-0 liquid-overlay-insights pointer-events-none\" />\n      <div className=\"absolute inset-0 insights-gradient-overlay pointer-events-none\" />\n      \n      <div className=\"insights-content responsive-padding-sm\">\n        {/* Header */}\n        <div className=\"insights-header\">\n          <h1 className=\"insights-title\">Financial Health</h1>\n          <p className=\"insights-subtitle\">Track your financial wellness with AI-powered insights</p>\n        </div>\n\n        {/* Navigation Tabs */}\n        <EnhancedGlassCard \n          className=\"tab-navigation backdrop-blur-xl border border-white/20\"\n          liquid={liquidSettings.animated}\n          liquidIntensity={liquidSettings.intensity}\n          liquidDistortion={0.3}\n          liquidAnimated={false}\n        >\n          {['summary', 'health', 'eco', 'trends'].map((tab) => (\n            <button\n              key={tab}\n              onClick={() => setActiveTab(tab)}\n              className={`tab-button transition-all duration-300 ${\n                activeTab === tab\n                  ? 'text-white shadow-lg backdrop-blur-sm border border-white/30'\n                  : 'text-white/70 hover:text-white/90'\n              }`}\n              style={activeTab === tab ? {\n                background: 'linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, rgba(255, 255, 255, 0.1) 100%)'\n              } : {}}\n            >\n              {tab.charAt(0).toUpperCase() + tab.slice(1)}\n            </button>\n          ))}\n        </EnhancedGlassCard>\n\n        {activeTab === 'summary' && (\n          <div className=\"responsive-spacing-lg\">\n            {/* Main Score Cards with responsive grid */}\n            <div className=\"main-cards-grid\">\n              <div className=\"score-card-container\">\n                <EnhancedScoreCard\n                  title=\"Financial Score\"\n                  score={animatedScores.financial}\n                  subtitle=\"Based on spending and savings patterns\"\n                  icon={<DollarSign />}\n                  color={getScoreColor(scores.financial)}\n                  trend={getTrend(scores.financial, { good: 60, excellent: 75 })}\n                  delay={getAnimationDelay(0)}\n                  liquidIntensity={liquidSettings.intensity}\n                  onClick={() => {\n                    document.getElementById('key-metrics')?.scrollIntoView({ behavior: 'smooth', block: 'start' });\n                  }}\n                />\n              </div>\n              <div className=\"score-card-container\">\n                <EnhancedScoreCard\n                  title=\"Health Score\"\n                  score={wellnessData.overallScore}\n                  subtitle=\"Wellness spending insights\"\n                  icon={<Heart />}\n                  color={getScoreColor(wellnessData.overallScore)}\n                  trend=\"stable\"\n                  delay={getAnimationDelay(1)}\n                  liquidIntensity={liquidSettings.intensity}\n                  onClick={() => setActiveTab('health')}\n                />\n              </div>\n              <div className=\"score-card-container\">\n                <EnhancedScoreCard\n                  title=\"Eco Score\"\n                  score={ecoData.overallScore}\n                  subtitle=\"Environmental impact tracking\"\n                  icon={<Leaf />}\n                  color={getScoreColor(ecoData.overallScore)}\n                  trend=\"up\"\n                  delay={getAnimationDelay(2)}\n                  liquidIntensity={liquidSettings.intensity}\n                  onClick={() => setActiveTab('eco')}\n                />\n              </div>\n            </div>\n\n            {/* Key Metrics */}\n            <div id=\"key-metrics\">\n              <h2 className=\"responsive-text-lg font-bold text-white mb-4 sm:mb-6\">Key Metrics</h2>\n              <div className=\"metrics-grid\">\n                <EnhancedMetricCard\n                  title=\"Spending Ratio\"\n                  value={`${formatPercentage(metrics.spendingRatio)}%`}\n                  subtitle=\"of income spent\"\n                  progress={metrics.spendingRatio}\n                  color=\"#F59E0B\"\n                  icon={<DollarSign />}\n                  delay={getAnimationDelay(3)}\n                  liquidIntensity={liquidSettings.intensity}\n                />\n                <EnhancedMetricCard\n                  title=\"Emergency Fund\"\n                  value={`${formatPercentage(metrics.emergencyFundMonths)}`}\n                  subtitle=\"months covered\"\n                  progress={(metrics.emergencyFundMonths / 6) * 100}\n                  color=\"#10B981\"\n                  icon={<Shield />}\n                  delay={getAnimationDelay(4)}\n                  liquidIntensity={liquidSettings.intensity}\n                />\n                <EnhancedMetricCard\n                  title=\"Savings Rate\"\n                  value={`${formatPercentage(metrics.savingsRate)}%`}\n                  subtitle=\"of income saved\"\n                  progress={metrics.savingsRate}\n                  color=\"#3B82F6\"\n                  icon={<PiggyBank />}\n                  delay={getAnimationDelay(5)}\n                  liquidIntensity={liquidSettings.intensity}\n                />\n                <EnhancedMetricCard\n                  title=\"Payment Score\"\n                  value={`${formatPercentage(metrics.billPaymentScore)}%`}\n                  subtitle=\"on-time payments\"\n                  progress={metrics.billPaymentScore}\n                  color=\"#10B981\"\n                  icon={<Calendar />}\n                  delay={getAnimationDelay(6)}\n                  liquidIntensity={liquidSettings.intensity}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Health Tab - Comprehensive Wellness */}\n        {activeTab === 'health' && (\n          <div className=\"responsive-spacing-md\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 w-full\">\n              <ComprehensiveWellnessCard data={wellnessData} />\n            </div>\n          </div>\n        )}\n\n        {/* Eco Tab - Comprehensive Environmental Impact */}\n        {activeTab === 'eco' && (\n          <div className=\"responsive-spacing-md\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 w-full\">\n              <ComprehensiveEcoCard data={ecoData} />\n            </div>\n          </div>\n        )}\n\n        {/* Trends Tab */}\n        {activeTab === 'trends' && (\n          <div className=\"responsive-spacing-md\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6\">\n              <EnhancedGlassCard className=\"responsive-padding-md\">\n                <h3 className=\"responsive-text-base font-semibold text-white mb-4\">Financial Trends</h3>\n                <div className=\"responsive-spacing-sm\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-white/70 responsive-text-sm\">Monthly Spending</span>\n                    <span className=\"text-green-400 responsive-text-sm\">↓ 12%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-white/70 responsive-text-sm\">Savings Rate</span>\n                    <span className=\"text-blue-400 responsive-text-sm\">↑ 8%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-white/70 responsive-text-sm\">Investment Growth</span>\n                    <span className=\"text-green-400 responsive-text-sm\">↑ 15%</span>\n                  </div>\n                </div>\n              </EnhancedGlassCard>\n              <EnhancedGlassCard className=\"responsive-padding-md\">\n                <h3 className=\"responsive-text-base font-semibold text-white mb-4\">Category Analysis</h3>\n                <div className=\"responsive-spacing-sm\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-white/70 responsive-text-sm\">Food & Dining</span>\n                    <span className=\"text-red-400 responsive-text-sm\">↑ 5%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-white/70 responsive-text-sm\">Transportation</span>\n                    <span className=\"text-green-400 responsive-text-sm\">↓ 18%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-white/70 responsive-text-sm\">Healthcare</span>\n                    <span className=\"text-white/70 responsive-text-sm\">— 0%</span>\n                  </div>\n                </div>\n              </EnhancedGlassCard>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedInsightsPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/FinancialCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/FinancialCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { DollarSign, PiggyBank, CreditCard, TrendingUp, Shield, Calendar } from 'lucide-react';\nimport { SharedScoreCircle } from '@/components/shared';\nimport { UniversalMetricCard } from './UniversalMetricCard';\n\ninterface FinancialData {\n  overallScore: number;\n  monthlyIncome: number;\n  monthlySpending: number;\n  totalBalance: number;\n  savingsRate: number;\n  spendingRatio: number;\n  emergencyFundMonths: number;\n  debtToIncomeRatio: number;\n  billPaymentScore: number;\n}\n\ninterface FinancialCardProps {\n  data: FinancialData;\n}\n\nconst FinancialCard: React.FC<FinancialCardProps> = ({ data }) => {\n  const getScoreRating = (score: number) => {\n    if (score >= 80) return 'Excellent';\n    if (score >= 70) return 'Good';\n    if (score >= 60) return 'Fair';\n    return 'Needs Improvement';\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatPercentage = (value: number) => {\n    return `${Math.round(value)}%`;\n  };\n\n  const formatEmergencyFund = (months: number) => {\n    return `${Math.round(months * 10) / 10} months`;\n  };\n\n  const keyMetrics = [\n    { \n      icon: DollarSign, \n      label: 'Monthly Income', \n      value: formatCurrency(data.monthlyIncome), \n      color: '#10b981',\n      trend: 'stable' as const\n    },\n    { \n      icon: TrendingUp, \n      label: 'Monthly Spending', \n      value: formatCurrency(data.monthlySpending), \n      color: '#ef4444',\n      trend: data.spendingRatio > 80 ? 'up' as const : 'stable' as const\n    },\n    { \n      icon: PiggyBank, \n      label: 'Total Balance', \n      value: formatCurrency(data.totalBalance), \n      color: '#3b82f6',\n      trend: data.totalBalance > 10000 ? 'up' as const : 'stable' as const\n    },\n    { \n      icon: Shield, \n      label: 'Emergency Fund', \n      value: formatEmergencyFund(data.emergencyFundMonths), \n      color: '#8b5cf6',\n      trend: data.emergencyFundMonths >= 6 ? 'up' as const : data.emergencyFundMonths >= 3 ? 'stable' as const : 'down' as const\n    },\n    { \n      icon: Calendar, \n      label: 'Savings Rate', \n      value: formatPercentage(data.savingsRate), \n      color: '#f59e0b',\n      trend: data.savingsRate >= 20 ? 'up' as const : data.savingsRate >= 10 ? 'stable' as const : 'down' as const\n    },\n    { \n      icon: CreditCard, \n      label: 'Bill Payment Score', \n      value: formatPercentage(data.billPaymentScore), \n      color: '#06b6d4',\n      trend: data.billPaymentScore >= 95 ? 'up' as const : data.billPaymentScore >= 85 ? 'stable' as const : 'down' as const\n    },\n  ];\n\n  const insights = [\n    {\n      title: 'Spending Ratio',\n      value: formatPercentage(data.spendingRatio),\n      description: 'Of income spent monthly',\n      status: data.spendingRatio <= 70 ? 'good' : data.spendingRatio <= 85 ? 'warning' : 'danger'\n    },\n    {\n      title: 'Debt to Income',\n      value: formatPercentage(data.debtToIncomeRatio),\n      description: 'Annual debt burden',\n      status: data.debtToIncomeRatio <= 20 ? 'good' : data.debtToIncomeRatio <= 40 ? 'warning' : 'danger'\n    },\n    {\n      title: 'Emergency Fund',\n      value: formatEmergencyFund(data.emergencyFundMonths),\n      description: 'Monthly expenses covered',\n      status: data.emergencyFundMonths >= 6 ? 'good' : data.emergencyFundMonths >= 3 ? 'warning' : 'danger'\n    },\n    {\n      title: 'Savings Rate',\n      value: formatPercentage(data.savingsRate),\n      description: 'Of income saved monthly',\n      status: data.savingsRate >= 20 ? 'good' : data.savingsRate >= 10 ? 'warning' : 'danger'\n    },\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'good': return '#10b981';\n      case 'warning': return '#f59e0b';\n      case 'danger': return '#ef4444';\n      default: return '#6b7280';\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      {/* Header */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6 mb-4 sm:mb-6 backdrop-blur-md shadow-md\">\n        <div className=\"flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0\">\n          <div className=\"text-center sm:text-left\">\n            <h3 className=\"text-xl sm:text-2xl font-bold text-white mb-2\">Financial Health</h3>\n            <p className=\"text-white/70 text-sm sm:text-base\">\n              Net worth: {formatCurrency(data.totalBalance)}\n            </p>\n          </div>\n          <div className=\"flex flex-col items-center\">\n            <SharedScoreCircle \n              score={data.overallScore} \n              type=\"financial\"\n              size=\"lg\"\n              label={getScoreRating(data.overallScore)}\n              showLabel={true}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Key Metrics Grid */}\n      <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-3 sm:gap-4 mb-4 sm:mb-6\">\n        {keyMetrics.map((metric, index) => (\n          <UniversalMetricCard\n            key={metric.label}\n            title={metric.label}\n            value={metric.value}\n            icon={<metric.icon />}\n            color={metric.color}\n            trend={metric.trend}\n            size=\"sm\"\n            variant=\"default\"\n          />\n        ))}\n      </div>\n\n      {/* Financial Insights */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6 backdrop-blur-md shadow-md\">\n        <h4 className=\"text-lg sm:text-xl font-bold text-white mb-4\">Financial Insights</h4>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4\">\n          {insights.map((insight, index) => (\n            <div key={insight.title} className=\"p-4 rounded-xl bg-white/5\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-white/80 text-xs sm:text-sm font-medium\">{insight.title}</span>\n                <span \n                  className=\"w-2 h-2 rounded-full\"\n                  style={{ backgroundColor: getStatusColor(insight.status) }}\n                />\n              </div>\n              <div \n                className=\"text-lg sm:text-xl font-bold mb-1\"\n                style={{ color: getStatusColor(insight.status) }}\n              >\n                {insight.value}\n              </div>\n              <div className=\"text-xs text-white/50\">\n                {insight.description}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FinancialCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/HealthScore.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/HealthScore.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useEffect, useState } from 'react';\nimport GlassCard from '../GlassCard';\nimport { Heart, TrendingUp, Activity } from 'lucide-react';\n\ninterface HealthScoreProps {\n  score: number;\n  trends: {\n    exercise: number;\n    nutrition: number;\n    sleep: number;\n    stress: number;\n  };\n}\n\nconst HealthScore = ({ score, trends }: HealthScoreProps) => {\n  const [animatedScore, setAnimatedScore] = useState(0);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setAnimatedScore(score);\n    }, 200);\n    return () => clearTimeout(timer);\n  }, [score]);\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return '#34C759';\n    if (score >= 60) return '#FF9500';\n    return '#FF3B30';\n  };\n\n  const getScoreLabel = (score: number) => {\n    if (score >= 90) return 'Excellent';\n    if (score >= 80) return 'Very Good';\n    if (score >= 70) return 'Good';\n    if (score >= 60) return 'Fair';\n    return 'Needs Improvement';\n  };\n\n  const circumference = 2 * Math.PI * 40;\n  const strokeDasharray = circumference;\n  const strokeDashoffset = circumference - (animatedScore / 100) * circumference;\n\n  return (\n    <GlassCard \n      className=\"glass-card glass-dark bg-gradient-to-br from-pink-500/20 to-red-500/20 liquid-gradient p-6 text-center relative overflow-hidden stagger-item\"\n      style={{ animationDelay: '0ms' }}\n    >\n      {/* Background Gradient */}\n      <div \n        className=\"absolute inset-0 opacity-10 rounded-2xl\"\n        style={{\n          background: `linear-gradient(135deg, ${getScoreColor(score)}20, transparent 70%)`\n        }}\n      />\n      \n      <div className=\"relative z-10\">\n        <div className=\"flex items-center justify-center mb-4\">\n          <Heart className=\"w-5 h-5 text-pink-400 mr-2\" />\n          <h3 className=\"text-lg font-bold text-white\">Health Score</h3>\n          <TrendingUp className=\"w-4 h-4 text-pink-400 ml-2\" />\n        </div>\n        \n        {/* Enhanced Circular Progress with Glass Effect */}\n        <div className=\"relative flex justify-center items-center mb-4\">\n          <div className=\"glass-card p-2 rounded-full\">\n            <svg width=\"120\" height=\"120\" className=\"transform -rotate-90\">\n              <circle\n                cx=\"60\"\n                cy=\"60\"\n                r=\"40\"\n                stroke=\"rgba(255, 255, 255, 0.1)\"\n                strokeWidth=\"6\"\n                fill=\"none\"\n              />\n              <circle\n                cx=\"60\"\n                cy=\"60\"\n                r=\"40\"\n                stroke=\"url(#healthGradient)\"\n                strokeWidth=\"6\"\n                fill=\"none\"\n                strokeDasharray={strokeDasharray}\n                strokeDashoffset={strokeDashoffset}\n                strokeLinecap=\"round\"\n                className=\"transition-all duration-1000 ease-out\"\n                style={{\n                  filter: `drop-shadow(0 0 8px ${getScoreColor(score)}40)`\n                }}\n              />\n              <defs>\n                <linearGradient id=\"healthGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                  <stop offset=\"0%\" stopColor=\"#f472b6\" />\n                  <stop offset=\"100%\" stopColor=\"#ec4899\" />\n                </linearGradient>\n              </defs>\n            </svg>\n          </div>\n          \n          <div className=\"absolute inset-0 flex flex-col justify-center items-center\">\n            <div \n              className=\"text-3xl font-bold text-white transition-all duration-1000 ease-out\"\n              style={{ color: getScoreColor(score) }}\n            >\n              {Math.round(animatedScore)}\n            </div>\n            <div className=\"text-white/50 text-xs\">out of 100</div>\n          </div>\n        </div>\n        \n        <div className=\"mb-4\">\n          <div \n            className=\"text-xl font-bold mb-2\"\n            style={{ color: getScoreColor(score) }}\n          >\n            {getScoreLabel(score)}\n          </div>\n          <p className=\"text-white/70 text-sm\">\n            Based on spending patterns and lifestyle data\n          </p>\n        </div>\n        \n        {/* Health Metrics with Glass Progress Bars */}\n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-white/80 text-sm flex items-center\">\n              <Activity className=\"w-3 h-3 mr-1\" />\n              Exercise\n            </span>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-16 glass-progress h-2\">\n                <div \n                  className=\"glass-progress-fill green h-2 rounded-full transition-all duration-1000\"\n                  style={{ width: `${trends.exercise}%` }}\n                />\n              </div>\n              <span className=\"text-white/60 text-xs\">{trends.exercise}%</span>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-white/80 text-sm\">Nutrition</span>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-16 glass-progress h-2\">\n                <div \n                  className=\"glass-progress-fill blue h-2 rounded-full transition-all duration-1000\"\n                  style={{ width: `${trends.nutrition}%` }}\n                />\n              </div>\n              <span className=\"text-white/60 text-xs\">{trends.nutrition}%</span>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-white/80 text-sm\">Sleep</span>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-16 glass-progress h-2\">\n                <div \n                  className=\"bg-purple-500 h-2 rounded-full transition-all duration-1000\"\n                  style={{ width: `${trends.sleep}%` }}\n                />\n              </div>\n              <span className=\"text-white/60 text-xs\">{trends.sleep}%</span>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-white/80 text-sm\">Stress Level</span>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-16 glass-progress h-2\">\n                <div \n                  className=\"bg-orange-500 h-2 rounded-full transition-all duration-1000\"\n                  style={{ width: `${100 - trends.stress}%` }}\n                />\n              </div>\n              <span className=\"text-white/60 text-xs\">Low</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </GlassCard>\n  );\n};\n\nexport default HealthScore;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/InsightsPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/InsightsPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, Suspense, lazy } from 'react';\nimport { Heart, Leaf, DollarSign, TrendingUp, Calendar, BarChart3 } from 'lucide-react';\nimport { SharedScoreCircle } from '@/components/shared/SharedScoreCircle';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/shared/ui/tabs';\nimport { Transaction, Account } from '@/types/shared';\nimport { formatScore, formatPercentage } from '@/shared/utils/formatters';\nimport { generateScoreSummary } from '@/features/scoringModel';\nimport { mockHealthEcoService } from '@/features/mockHealthEcoService';\nimport { UnifiedCard } from '@/shared/ui/UnifiedCard';\n\n// Lazy load heavy components for performance\nconst FinancialCard = lazy(() => import('./FinancialCard'));\nconst WellnessCard = lazy(() => import('./WellnessCard'));\nconst EcoCard = lazy(() => import('./EcoCard'));\n\nconst LoadingSpinner = () => (\n  <div className=\"flex items-center justify-center py-12\">\n    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white/50\"></div>\n  </div>\n);\n\ninterface InsightsPageProps {\n  transactions: Transaction[];\n  accounts: Account[];\n}\n\nconst InsightsPage: React.FC<InsightsPageProps> = ({ transactions, accounts }) => {\n  const [scores, setScores] = useState({ financial: 0, health: 0, eco: 0 });\n  const [activeTab, setActiveTab] = useState('overview');\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Calculate financial data\n  const financialData = useMemo(() => {\n    const monthlySpending = Math.abs(transactions\n      .filter(t => t.amount < 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0));\n    \n    const totalBalance = accounts.reduce((sum, acc) => sum + acc.balance, 0);\n    \n    return {\n      monthlySpending,\n      totalBalance,\n    };\n  }, [transactions, accounts]);\n\n  // Get wellness and eco data\n  const wellnessData = useMemo(() => mockHealthEcoService.getHealthScore(transactions), [transactions]);\n  const ecoData = useMemo(() => mockHealthEcoService.getEcoScore(transactions), [transactions]);\n\n  // Load scores\n  useEffect(() => {\n    const loadScores = async () => {\n      setIsLoading(true);\n      try {\n        const scoreSummary = await generateScoreSummary(transactions, accounts);\n        setScores({\n          financial: Math.round(scoreSummary.financial),\n          health: Math.round(wellnessData.score),\n          eco: Math.round(ecoData.score)\n        });\n      } catch (error) {\n        console.error('Error loading scores:', error);\n        setScores({ financial: 72, health: 75, eco: 82 });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadScores();\n  }, [transactions, accounts, wellnessData.score, ecoData.score]);\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-6xl mx-auto p-6\">\n        <UnifiedCard size=\"lg\" className=\"text-center\">\n          <LoadingSpinner />\n          <p className=\"text-white/70 mt-4\">Loading your financial insights...</p>\n        </UnifiedCard>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-8\">\n      <h1 className=\"text-3xl font-bold text-white mb-8\">Financial Insights</h1>\n      \n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3 mb-6 p-1 rounded-2xl bg-white/[0.02] border border-white/[0.08]\">\n          <TabsTrigger \n            value=\"overview\" \n            className=\"text-white font-medium py-3 px-6 rounded-xl transition-all duration-200 data-[state=active]:bg-white/20 data-[state=active]:text-white\"\n          >\n            Overview\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"health\" \n            className=\"text-white font-medium py-3 px-6 rounded-xl transition-all duration-200 data-[state=active]:bg-white/20 data-[state=active]:text-white\"\n          >\n            Health\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"eco\" \n            className=\"text-white font-medium py-3 px-6 rounded-xl transition-all duration-200 data-[state=active]:bg-white/20 data-[state=active]:text-white\"\n          >\n            Eco Impact\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\">\n          <div className=\"space-y-8\">\n            {/* Score Overview */}\n            <UnifiedCard size=\"lg\">\n              <h2 className=\"text-2xl font-bold text-white mb-6 text-center\">\n                Your Overall Scores\n              </h2>\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-8\">\n                <div className=\"text-center\">\n                  <SharedScoreCircle \n                    score={scores.financial} \n                    type=\"financial\"\n                    size=\"lg\"\n                    label=\"Financial Health\"\n                    showLabel={false}\n                  />\n                </div>\n                <div className=\"text-center\">\n                  <SharedScoreCircle \n                    score={scores.health} \n                    type=\"health\"\n                    size=\"lg\"\n                    label=\"Wellness Score\"\n                    showLabel={false}\n                  />\n                </div>\n                <div className=\"text-center\">\n                  <SharedScoreCircle \n                    score={scores.eco} \n                    type=\"eco\"\n                    size=\"lg\"\n                    label=\"Eco Impact\"\n                    showLabel={false}\n                  />\n                </div>\n              </div>\n            </UnifiedCard>\n\n            {/* Quick Summary Cards */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <UnifiedCard \n                title=\"Monthly Spending\" \n                metric={`$${financialData.monthlySpending.toLocaleString()}`}\n                subtitle=\"This month\"\n                icon={DollarSign}\n                iconColor=\"#3b82f6\"\n                size=\"lg\"\n              />\n\n              <UnifiedCard \n                title=\"Total Balance\" \n                metric={`$${financialData.totalBalance.toLocaleString()}`}\n                subtitle=\"All accounts\"\n                icon={TrendingUp}\n                iconColor=\"#10b981\"\n                size=\"lg\"\n              />\n\n              <UnifiedCard \n                title=\"Health Score\" \n                metric={`${Math.round(scores.health)}/100`}\n                subtitle=\"Wellness tracking\"\n                icon={Heart}\n                iconColor=\"#ef4444\"\n                size=\"lg\"\n              />\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"health\">\n          <Suspense fallback={<LoadingSpinner />}>\n            <UnifiedCard size=\"lg\">\n              <h2 className=\"text-2xl font-bold text-white mb-4\">Health & Wellness Insights</h2>\n              <p className=\"text-white/70 mb-4\">Your wellness score: {Math.round(scores.health)}/100</p>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {wellnessData.breakdown && Object.entries(wellnessData.breakdown).map(([category, amount]) => (\n                  <div key={category} className=\"p-3 bg-white/[0.03] rounded-lg\">\n                    <p className=\"text-white/60 text-xs capitalize\">{category.replace(/([A-Z])/g, ' $1')}</p>\n                    <p className=\"text-white font-bold\">${typeof amount === 'number' ? amount.toLocaleString() : '0'}</p>\n                  </div>\n                ))}\n              </div>\n            </UnifiedCard>\n          </Suspense>\n        </TabsContent>\n\n        <TabsContent value=\"eco\">\n          <Suspense fallback={<LoadingSpinner />}>\n            <UnifiedCard size=\"lg\">\n              <h2 className=\"text-2xl font-bold text-white mb-4\">Eco Impact Insights</h2>\n              <p className=\"text-white/70 mb-4\">Your eco score: {Math.round(scores.eco)}/100</p>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {ecoData.breakdown && Object.entries(ecoData.breakdown).map(([category, amount]) => (\n                  <div key={category} className=\"p-3 bg-white/[0.03] rounded-lg\">\n                    <p className=\"text-white/60 text-xs capitalize\">{category.replace(/([A-Z])/g, ' $1')}</p>\n                    <p className=\"text-white font-bold\">${typeof amount === 'number' ? amount.toLocaleString() : '0'}</p>\n                  </div>\n                ))}\n              </div>\n            </UnifiedCard>\n          </Suspense>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default InsightsPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/MetricCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/MetricCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { UniversalMetricCard } from './UniversalMetricCard';\nimport { ReactElement } from 'react';\n\ninterface LegacyMetricCardProps {\n  title: string;\n  value: string | number;\n  icon: ReactElement;\n  color: string;\n  trend?: 'up' | 'down' | 'stable';\n}\n\nexport default function MetricCard(props: LegacyMetricCardProps) {\n  const { title, value, icon, color, trend } = props;\n  return (\n    <UniversalMetricCard\n      title={title}\n      value={value}\n      icon={icon}\n      color={color}\n      trend={trend}\n      size=\"sm\"\n      variant=\"default\"\n      interactive={false}\n      animationsEnabled={false}\n    />\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/NewInsightsPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/NewInsightsPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, Suspense, lazy } from 'react';\nimport { Heart, Leaf, DollarSign, TrendingUp, Calendar, BarChart3, ArrowLeft } from 'lucide-react';\nimport { SharedScoreCircle } from '@/components/shared/SharedScoreCircle';\nimport { Transaction, Account } from '@/types/shared';\nimport { formatScore, formatPercentage } from '@/shared/utils/formatters';\nimport { useNavigate } from 'react-router-dom';\nimport { generateScoreSummary } from '@/services/scoringModel';\nimport { mockHealthEcoService } from '@/services/mockHealthEcoService';\nimport { mockHistoricalService } from '@/services/mockHistoricalData';\nimport { cn } from '@/shared/lib/utils';\nimport { UnifiedCard } from '@/shared/ui/UnifiedCard';\n\n// Lazy load heavy components for performance\nconst FinancialCard = lazy(() => import('./FinancialCard'));\nconst WellnessCard = lazy(() => import('./WellnessCard'));\nconst EcoCard = lazy(() => import('./EcoCard'));\nconst TimeSeriesChart = lazy(() => import('./TimeSeriesChart'));\nconst SpendingTrendsChart = lazy(() => import('./SpendingTrendsChart'));\nconst CategoryTrendsChart = lazy(() => import('./CategoryTrendsChart'));\n\nconst LoadingSpinner = () => (\n  <div className=\"flex items-center justify-center py-12\">\n    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white/50\"></div>\n  </div>\n);\n\ninterface NewInsightsPageProps {\n  transactions: Transaction[];\n  accounts: Account[];\n}\n\nconst NewInsightsPage: React.FC<NewInsightsPageProps> = ({ transactions, accounts }) => {\n  const navigate = useNavigate();\n  const [scores, setScores] = useState({ financial: 0, health: 0, eco: 0 });\n  const [activeTab, setActiveTab] = useState('overview');\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Calculate financial data\n  const financialData = useMemo(() => {\n    const monthlySpending = Math.abs(transactions\n      .filter(t => t.amount < 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0));\n    \n    const totalBalance = accounts.reduce((sum, acc) => sum + acc.balance, 0);\n    \n    return {\n      monthlySpending,\n      totalBalance,\n    };\n  }, [transactions, accounts]);\n\n  // Get wellness and eco data using the correct service methods\n  const wellnessData = useMemo(() => mockHealthEcoService.getHealthScore(transactions), [transactions]);\n  const ecoData = useMemo(() => mockHealthEcoService.getEcoScore(transactions), [transactions]);\n\n  // Simulate loading and score calculation\n  useEffect(() => {\n    const loadData = async () => {\n      setIsLoading(true);\n      try {\n        // Simulate loading delay\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        // Generate scores based on actual data\n        const scoreSummary = await generateScoreSummary(transactions, accounts);\n        setScores({\n          financial: Math.round(scoreSummary.financial),\n          health: Math.round(wellnessData.score),\n          eco: Math.round(ecoData.score)\n        });\n      } catch (error) {\n        console.error('Error loading insights data:', error);\n        setScores({ financial: 72, health: 75, eco: 82 });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadData();\n  }, [transactions, accounts, wellnessData.score, ecoData.score]);\n\n  const tabs = [\n    { id: 'overview', label: 'Overview', icon: BarChart3 },\n    { id: 'health', label: 'Health', icon: Heart },\n    { id: 'eco', label: 'Eco Impact', icon: Leaf },\n    { id: 'trends', label: 'Trends', icon: TrendingUp }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"w-full text-white\">\n        <div className=\"w-full px-4 sm:px-6 lg:px-8 py-6 sm:py-8 lg:py-12 max-w-7xl mx-auto\">\n          <UnifiedCard size=\"lg\" className=\"text-center\">\n            <LoadingSpinner />\n            <p className=\"text-white/70 mt-4\">Loading your financial insights...</p>\n          </UnifiedCard>\n        </div>\n      </div>\n    );\n  }\n\n  // Calculate totals for display\n  const wellnessMonthlyTotal = wellnessData.breakdown ? \n    Object.values(wellnessData.breakdown).reduce((sum: number, amount: any) => sum + (typeof amount === 'number' ? amount : 0), 0) : 0;\n  \n  const ecoMonthlyTotal = ecoData.breakdown ? \n    Object.values(ecoData.breakdown).reduce((sum: number, amount: any) => sum + (typeof amount === 'number' ? amount : 0), 0) : 0;\n\n  return (\n    <div className=\"w-full text-white\">\n      <div className=\"w-full px-4 sm:px-6 lg:px-8 py-6 sm:py-8 lg:py-12 max-w-7xl mx-auto\">\n        {/* Back Button */}\n        <button\n          onClick={() => navigate('/')}\n          className=\"flex items-center gap-2 px-3 py-2 rounded-xl text-white/80 hover:text-white hover:bg-white/[0.05] transition-colors mb-6\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n          <span className=\"text-sm\">Dashboard</span>\n        </button>\n\n        {/* Header */}\n        <div className=\"text-center mb-8 sm:mb-12\">\n          <h1 className=\"text-3xl sm:text-4xl lg:text-5xl font-bold text-white mb-4\">\n            Financial Insights\n          </h1>\n          <p className=\"text-white/70 text-base sm:text-lg lg:text-xl max-w-2xl mx-auto\">\n            Comprehensive analysis of your financial health, wellness spending, and environmental impact\n          </p>\n        </div>\n\n        {/* Tab Navigation */}\n        <UnifiedCard size=\"lg\" className=\"mb-8 sm:mb-12\">\n          <div className=\"flex flex-wrap justify-center gap-2\">\n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`flex items-center space-x-2 px-4 sm:px-6 py-2 sm:py-3 rounded-xl font-medium transition-all duration-300 ${\n                    activeTab === tab.id\n                      ? 'bg-white/20 text-white shadow-lg backdrop-blur-sm border border-white/30'\n                      : 'text-white/70 hover:text-white/90 hover:bg-white/10'\n                  }`}\n                >\n                  <Icon className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n                  <span className=\"text-sm sm:text-base\">{tab.label}</span>\n                </button>\n              );\n            })}\n          </div>\n        </UnifiedCard>\n\n        {/* Content */}\n        {activeTab === 'overview' && (\n          <div className=\"space-y-8\">\n            {/* Score Overview */}\n            <UnifiedCard size=\"lg\">\n              <h2 className=\"text-2xl sm:text-3xl font-bold text-white mb-6 sm:mb-8 text-center\">\n                Your Overall Scores\n              </h2>\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-8 sm:gap-12\">\n                <div className=\"text-center\">\n                  <SharedScoreCircle \n                    score={scores.financial} \n                    type=\"financial\"\n                    size=\"lg\"\n                    label=\"Financial Health\"\n                    showLabel={false}\n                  />\n                </div>\n                <div className=\"text-center\">\n                  <SharedScoreCircle \n                    score={scores.health} \n                    type=\"health\"\n                    size=\"lg\"\n                    label=\"Wellness Score\"\n                    showLabel={false}\n                  />\n                </div>\n                <div className=\"text-center\">\n                  <SharedScoreCircle \n                    score={scores.eco} \n                    type=\"eco\"\n                    size=\"lg\"\n                    label=\"Eco Impact\"\n                    showLabel={false}\n                  />\n                </div>\n              </div>\n            </UnifiedCard>\n\n            {/* Quick Overview Cards */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 sm:gap-8\">\n              <UnifiedCard \n                title=\"Financial Health\" \n                metric={`${Math.round(scores.financial)}/100`}\n                subtitle={`Monthly spending: $${financialData.monthlySpending.toLocaleString()}`}\n                icon={DollarSign}\n                iconColor=\"#3b82f6\"\n                size=\"lg\"\n              />\n\n              <UnifiedCard \n                title=\"Wellness\" \n                metric={`${Math.round(scores.health)}/100`}\n                subtitle={`Monthly wellness: $${wellnessMonthlyTotal.toLocaleString()}`}\n                icon={Heart}\n                iconColor=\"#ef4444\"\n                size=\"lg\"\n              />\n\n              <UnifiedCard \n                title=\"Eco Impact\" \n                metric={`${Math.round(scores.eco)}/100`}\n                subtitle={`Monthly eco: $${ecoMonthlyTotal.toLocaleString()}`}\n                icon={Leaf}\n                iconColor=\"#10b981\"\n                size=\"lg\"\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Other tabs content with lazy loading */}\n        {activeTab === 'health' && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <div className=\"space-y-6\">\n              <UnifiedCard size=\"lg\">\n                <h2 className=\"text-2xl font-bold text-white mb-4\">Health & Wellness Insights</h2>\n                <p className=\"text-white/70 mb-4\">Your wellness score: {Math.round(scores.health)}/100</p>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  {wellnessData.breakdown && Object.entries(wellnessData.breakdown).map(([category, amount]) => (\n                    <div key={category} className=\"p-3 bg-white/[0.03] rounded-lg\">\n                      <p className=\"text-white/60 text-xs capitalize\">{category.replace(/([A-Z])/g, ' $1')}</p>\n                      <p className=\"text-white font-bold\">${typeof amount === 'number' ? amount.toLocaleString() : '0'}</p>\n                    </div>\n                  ))}\n                </div>\n              </UnifiedCard>\n            </div>\n          </Suspense>\n        )}\n\n        {activeTab === 'eco' && (\n          <Suspense fallback={<LoadingSpinner />}>\n            <div className=\"space-y-6\">\n              <UnifiedCard size=\"lg\">\n                <h2 className=\"text-2xl font-bold text-white mb-4\">Eco Impact Insights</h2>\n                <p className=\"text-white/70 mb-4\">Your eco score: {Math.round(scores.eco)}/100</p>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  {ecoData.breakdown && Object.entries(ecoData.breakdown).map(([category, amount]) => (\n                    <div key={category} className=\"p-3 bg-white/[0.03] rounded-lg\">\n                      <p className=\"text-white/60 text-xs capitalize\">{category.replace(/([A-Z])/g, ' $1')}</p>\n                      <p className=\"text-white font-bold\">${typeof amount === 'number' ? amount.toLocaleString() : '0'}</p>\n                    </div>\n                  ))}\n                </div>\n              </UnifiedCard>\n            </div>\n          </Suspense>\n        )}\n\n        {activeTab === 'trends' && (\n          <div className=\"space-y-6\">\n            <Suspense fallback={<LoadingSpinner />}>\n              <UnifiedCard size=\"lg\">\n                <h2 className=\"text-2xl font-bold text-white mb-4\">Spending Trends</h2>\n                <p className=\"text-white/70\">Historical analysis of your financial patterns over time.</p>\n              </UnifiedCard>\n            </Suspense>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default NewInsightsPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/OptimizedRefinedInsightsPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/OptimizedRefinedInsightsPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, useCallback, memo } from 'react';\nimport { Heart, Leaf, TrendingUp, TrendingDown, DollarSign, Shield, PiggyBank, Calendar, ChevronRight, Activity, Zap, Target, BarChart3 } from 'lucide-react';\nimport EnhancedGlassCard from '../ui/EnhancedGlassCard';\nimport AnimatedCircularProgress from './components/AnimatedCircularProgress';\nimport RefinedScoreCard from './components/RefinedScoreCard';\nimport RefinedMetricCard from './components/RefinedMetricCard';\nimport RefinedTrendCard from './components/RefinedTrendCard';\nimport ComprehensiveWellnessCard from './components/ComprehensiveWellnessCard';\nimport ComprehensiveEcoCard from './components/ComprehensiveEcoCard';\nimport { mockHealthEcoService } from '@/features/mockHealthEcoService';\nimport { formatPercentage, getScoreColor } from '@/shared/utils/formatters';\nimport { usePerformanceMonitor, useOptimizedMemo } from '@/shared/utils/performanceOptimizer';\n\n// Enhanced TypeScript interfaces\ninterface Transaction {\n  id: string;\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n}\n\ninterface Account {\n  id: string;\n  type: string;\n  nickname: string;\n  balance: number;\n  availableBalance: number;\n  currency: string;\n}\n\ninterface InsightsPageProps {\n  transactions: Transaction[];\n  accounts: Account[];\n}\n\ninterface ScoreData {\n  financial: number;\n  health: number;\n  eco: number;\n}\n\ninterface FinancialMetrics {\n  spendingRatio: number;\n  emergencyFundMonths: number;\n  savingsRate: number;\n  billPaymentScore: number;\n  debtToIncomeRatio: number;\n  monthlyIncome: number;\n  monthlySpending: number;\n  totalBalance: number;\n}\n\n// Performance detector\nconst usePerformanceDetector = () => {\n  return useMemo(() => {\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    const isLowEnd = navigator.hardwareConcurrency ? navigator.hardwareConcurrency < 4 : isMobile;\n    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n    \n    return { isMobile, isLowEnd, prefersReducedMotion };\n  }, []);\n};\n\n// Optimized metric calculation\nconst useOptimizedMetrics = (transactions: Transaction[], accounts: Account[]) => {\n  return useMemo<FinancialMetrics>(() => {\n    const currentMonth = new Date().getMonth();\n    \n    const monthlyIncome = transactions\n      .filter(t => t.amount > 0 && new Date(t.date).getMonth() === currentMonth)\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const monthlySpending = Math.abs(transactions\n      .filter(t => t.amount < 0 && new Date(t.date).getMonth() === currentMonth)\n      .reduce((sum, t) => sum + t.amount, 0));\n\n    const totalBalance = accounts.reduce((sum, acc) => sum + acc.balance, 0);\n    \n    const spendingRatio = monthlyIncome > 0 ? (monthlySpending / monthlyIncome) * 100 : 0;\n    const emergencyFundMonths = monthlySpending > 0 ? totalBalance / monthlySpending : 0;\n    const savingsRate = monthlyIncome > 0 ? ((monthlyIncome - monthlySpending) / monthlyIncome) * 100 : 0;\n    \n    const creditCardDebt = Math.abs(accounts\n      .filter(acc => acc.type === 'Credit Card' && acc.balance < 0)\n      .reduce((sum, acc) => sum + acc.balance, 0));\n    const debtToIncomeRatio = monthlyIncome > 0 ? (creditCardDebt / (monthlyIncome * 12)) * 100 : 0;\n    \n    const completedTransactions = transactions.filter(t => t.status === 'completed').length;\n    const totalTransactions = transactions.length;\n    const billPaymentScore = totalTransactions > 0 ? Math.round((completedTransactions / totalTransactions) * 100) : 100;\n    \n    return {\n      spendingRatio,\n      emergencyFundMonths,\n      savingsRate,\n      debtToIncomeRatio,\n      billPaymentScore,\n      monthlyIncome,\n      monthlySpending,\n      totalBalance\n    };\n  }, [transactions, accounts]);\n};\n\nconst OptimizedRefinedInsightsPage = memo(({ transactions, accounts }: InsightsPageProps) => {\n  const performance = usePerformanceDetector();\n  const [animatedScores, setAnimatedScores] = useState<ScoreData>({ financial: 0, health: 0, eco: 0 });\n  const metrics = useOptimizedMetrics(transactions, accounts);\n\n  // Calculate scores with performance optimization\n  const scores = useMemo<ScoreData>(() => {\n    const weights = {\n      spendingRatio: 0.25,\n      emergencyFund: 0.20,\n      debtRatio: 0.20,\n      savingsRate: 0.15,\n      billPayment: 0.10,\n      investments: 0.10\n    };\n\n    const spendingScore = Math.max(0, 100 - metrics.spendingRatio);\n    const emergencyScore = Math.min(100, (metrics.emergencyFundMonths / 6) * 100);\n    const debtScore = Math.max(0, 100 - metrics.debtToIncomeRatio);\n    const savingsScore = Math.min(100, metrics.savingsRate);\n    const billScore = metrics.billPaymentScore;\n    const investmentScore = 70;\n\n    const financialScore = Math.round(\n      spendingScore * weights.spendingRatio +\n      emergencyScore * weights.emergencyFund +\n      debtScore * weights.debtRatio +\n      savingsScore * weights.savingsRate +\n      billScore * weights.billPayment +\n      investmentScore * weights.investments\n    );\n\n    // Use simplified scores for performance on low-end devices\n    const healthScore = performance.isLowEnd ? 75 : mockHealthEcoService.getHealthScore(transactions).score;\n    const ecoScore = performance.isLowEnd ? 68 : mockHealthEcoService.getEcoScore(transactions).score;\n\n    return {\n      financial: financialScore,\n      health: healthScore,\n      eco: ecoScore\n    };\n  }, [metrics, transactions, performance.isLowEnd]);\n\n  // Animate scores with performance consideration\n  useEffect(() => {\n    const delay = performance.isMobile ? 500 : 300;\n    const timer = setTimeout(() => {\n      setAnimatedScores(scores);\n    }, delay);\n    return () => clearTimeout(timer);\n  }, [scores, performance.isMobile]);\n\n  // Trend calculation helper\n  const getTrend = useCallback((value: number, threshold: { good: number; excellent: number }) => {\n    if (value >= threshold.excellent) return 'up';\n    if (value >= threshold.good) return 'stable';\n    return 'down';\n  }, []);\n\n  // Performance-based liquid glass settings\n  const liquidSettings = useMemo(() => {\n    if (performance.isLowEnd) {\n      return { intensity: 0.15, animated: false, interactive: false };\n    }\n    if (performance.isMobile) {\n      return { intensity: 0.25, animated: false, interactive: true };\n    }\n    return { intensity: 0.35, animated: !performance.prefersReducedMotion, interactive: true };\n  }, [performance]);\n\n  // Comprehensive health data for wellness card\n  const comprehensiveHealthData = useMemo(() => ({\n    healthKitData: {\n      stepCount: 8542,\n      activeEnergyBurned: 387,\n      exerciseTime: 45,\n      heartRate: 72,\n      sleepAnalysis: 7.5,\n      mindfulMinutes: 15,\n      dietaryCalories: 2150,\n      dietaryWater: 64\n    },\n    spendingCategories: {\n      fitness: Math.round(transactions.filter(t => t.merchant.toLowerCase().includes('gym') || t.merchant.toLowerCase().includes('fitness')).reduce((sum, t) => sum + Math.abs(t.amount), 0) || 120),\n      nutrition: Math.round(transactions.filter(t => t.merchant.toLowerCase().includes('whole foods') || t.merchant.toLowerCase().includes('organic')).reduce((sum, t) => sum + Math.abs(t.amount), 0) || 280),\n      healthcare: 185,\n      wellness: 95,\n      supplements: 60,\n      mentalHealth: 75\n    },\n    trends: {\n      exercise: 'up' as 'up' | 'down' | 'stable',\n      nutrition: 'stable' as 'up' | 'down' | 'stable',\n      sleep: 'up' as 'up' | 'down' | 'stable',\n      stress: 'down' as 'up' | 'down' | 'stable'\n    }\n  }), [transactions]);\n\n  // Comprehensive eco data for eco card\n  const comprehensiveEcoData = useMemo(() => ({\n    ecoMetrics: {\n      totalCO2Emissions: 12.5,\n      transportationCO2: 4.2,\n      electricityUsage: 875,\n      renewableEnergyPercentage: 65,\n      recyclingRate: 72,\n      organicFoodPercentage: 42,\n      sustainableBrandsPurchases: 156,\n      ESGInvestments: 12500,\n      treesPlanted: 8,\n      wasteGenerated: 28\n    },\n    spendingCategories: {\n      sustainableFood: Math.round(transactions.filter(t => t.merchant.toLowerCase().includes('whole foods') || t.merchant.toLowerCase().includes('organic')).reduce((sum, t) => sum + Math.abs(t.amount), 0) || 180),\n      renewableEnergy: 85,\n      ecoTransport: Math.round(transactions.filter(t => t.merchant.toLowerCase().includes('tesla') || t.merchant.toLowerCase().includes('electric')).reduce((sum, t) => sum + Math.abs(t.amount), 0) || 45),\n      greenProducts: 120,\n      carbonOffset: 25,\n      conservation: 60\n    },\n    monthlyImpact: {\n      co2Saved: Math.max(0, Math.round((scores.eco - 50) * 1.5)),\n      treesEquivalent: Math.max(0, Math.round((scores.eco - 50) / 20)),\n      waterSaved: Math.max(0, Math.round((scores.eco - 50) * 12)),\n      energySaved: Math.max(0, Math.round((scores.eco - 50) * 8))\n    },\n    trends: {\n      carbonFootprint: (scores.eco > 70 ? 'down' : 'stable') as 'up' | 'down' | 'stable',\n      sustainability: 'up' as 'up' | 'down' | 'stable',\n      renewable: 'up' as 'up' | 'down' | 'stable',\n      waste: 'down' as 'up' | 'down' | 'stable'\n    }\n  }), [transactions, scores.eco]);\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden\" style={{ backgroundColor: '#000000' }}>\n      {/* Simplified background for performance */}\n      <div className=\"fixed inset-0 bg-gradient-to-br from-slate-900/5 to-slate-800/5\" />\n      \n      {/* Conditional decorative elements */}\n      {!performance.isLowEnd && (\n        <>\n          <div className=\"fixed top-1/4 left-1/4 w-32 h-32 bg-slate-700/5 rounded-full blur-3xl animate-pulse\" />\n          <div className=\"fixed bottom-1/3 right-1/3 w-40 h-40 bg-indigo-900/5 rounded-full blur-3xl animate-pulse delay-1000\" />\n        </>\n      )}\n      \n      {/* Content */}\n      <div className=\"relative z-10 p-6 space-y-8\">\n        {/* Header */}\n        <div className=\"text-center space-y-4 animate-slideInScale\">\n          <h1 className=\"text-3xl sm:text-4xl lg:text-5xl font-bold text-white\">\n            Financial Insights\n          </h1>\n          <p className=\"text-base sm:text-lg lg:text-xl text-slate-400 max-w-2xl mx-auto\">\n            Optimized analysis of your financial health\n          </p>\n        </div>\n\n        {/* Main Score Cards */}\n        <div className=\"main-cards-grid\">\n          <RefinedScoreCard\n            title=\"Financial Health\"\n            score={animatedScores.financial}\n            subtitle=\"Overall financial wellness score\"\n            icon={<DollarSign />}\n            color=\"#6366f1\"\n            trend={getTrend(animatedScores.financial, { good: 60, excellent: 80 })}\n            delay={0}\n            liquidIntensity={liquidSettings.intensity}\n          />\n          \n          <ComprehensiveWellnessCard\n            score={animatedScores.health}\n            healthKitData={comprehensiveHealthData.healthKitData}\n            spendingCategories={comprehensiveHealthData.spendingCategories}\n            trends={comprehensiveHealthData.trends}\n          />\n          \n          <ComprehensiveEcoCard\n            score={animatedScores.eco}\n            ecoMetrics={comprehensiveEcoData.ecoMetrics}\n            spendingCategories={comprehensiveEcoData.spendingCategories}\n            monthlyImpact={comprehensiveEcoData.monthlyImpact}\n            trends={comprehensiveEcoData.trends}\n          />\n        </div>\n\n        {/* Financial Metrics Grid */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6\">\n          <RefinedMetricCard\n            title=\"Monthly Spending\"\n            value={`$${metrics.monthlySpending.toLocaleString()}`}\n            subtitle=\"Current month expenses\"\n            progress={Math.min(100, metrics.spendingRatio)}\n            color=\"#64748b\"\n            icon={<DollarSign />}\n            trend={metrics.spendingRatio > 80 ? 'down' : metrics.spendingRatio < 60 ? 'up' : 'stable'}\n            trendValue={`${formatPercentage(metrics.spendingRatio)}`}\n            delay={600}\n            liquidIntensity={liquidSettings.intensity}\n          />\n\n          <RefinedMetricCard\n            title=\"Emergency Fund\"\n            value={metrics.emergencyFundMonths.toFixed(1)}\n            subtitle=\"Months covered\"\n            progress={Math.min(100, (metrics.emergencyFundMonths / 6) * 100)}\n            color=\"#8b5cf6\"\n            icon={<Shield />}\n            trend={metrics.emergencyFundMonths >= 6 ? 'up' : 'stable'}\n            trendValue={`${formatPercentage((metrics.emergencyFundMonths / 6) * 100)}`}\n            delay={800}\n            liquidIntensity={liquidSettings.intensity}\n          />\n\n          <RefinedMetricCard\n            title=\"Savings Rate\"\n            value={`${formatPercentage(metrics.savingsRate)}`}\n            subtitle=\"Income saved monthly\"\n            progress={Math.min(100, metrics.savingsRate)}\n            color=\"#06b6d4\"\n            icon={<PiggyBank />}\n            trend={metrics.savingsRate > 20 ? 'up' : 'stable'}\n            trendValue={`+${formatPercentage(metrics.savingsRate)}`}\n            delay={1000}\n            liquidIntensity={liquidSettings.intensity}\n          />\n\n          <RefinedMetricCard\n            title=\"Payment Score\"\n            value={Math.round(metrics.billPaymentScore)}\n            subtitle=\"On-time reliability\"\n            progress={metrics.billPaymentScore}\n            color=\"#f59e0b\"\n            icon={<Calendar />}\n            trend=\"up\"\n            trendValue={`${Math.round(metrics.billPaymentScore)}%`}\n            delay={1200}\n            liquidIntensity={liquidSettings.intensity}\n          />\n        </div>\n\n        {/* Trend Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6\">\n          <RefinedTrendCard\n            title=\"Performance Trends\"\n            subtitle=\"Monthly trajectory\"\n            trend=\"Improving steadily\"\n            delay={1400}\n            icon={<TrendingUp className=\"w-5 h-5\" />}\n            liquidIntensity={liquidSettings.intensity}\n            interactive={!performance.isLowEnd}\n          />\n\n          <RefinedTrendCard\n            title=\"Goal Progress\"\n            subtitle=\"Financial milestones\"\n            trend=\"On target\"\n            delay={1600}\n            icon={<Target className=\"w-5 h-5\" />}\n            liquidIntensity={liquidSettings.intensity}\n            interactive={!performance.isLowEnd}\n          />\n\n          <RefinedTrendCard\n            title=\"Risk Assessment\"\n            subtitle=\"Stability outlook\"\n            trend=\"Low risk profile\"\n            delay={1800}\n            icon={<BarChart3 className=\"w-5 h-5\" />}\n            liquidIntensity={liquidSettings.intensity}\n            interactive={!performance.isLowEnd}\n          />\n        </div>\n\n        {/* Summary */}\n        <div className=\"liquid-glass-card p-6 sm:p-8\">\n          <div className=\"text-center space-y-6\">\n            <div className=\"flex items-center justify-center space-x-3 mb-6\">\n              <Target className=\"w-6 h-6 text-indigo-400\" />\n              <h2 className=\"text-xl sm:text-2xl font-bold text-white\">Financial Overview</h2>\n            </div>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 text-left\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-white flex items-center space-x-2\">\n                  <Zap className=\"w-5 h-5 text-yellow-500\" />\n                  <span>Strengths</span>\n                </h3>\n                <ul className=\"space-y-2 text-slate-400\">\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\"></span>\n                    <span>Payment reliability: {Math.round(metrics.billPaymentScore)}%</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0\"></span>\n                    <span>Balance: ${metrics.totalBalance.toLocaleString()}</span>\n                  </li>\n                </ul>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-white flex items-center space-x-2\">\n                  <Target className=\"w-5 h-5 text-indigo-500\" />\n                  <span>Opportunities</span>\n                </h3>\n                <ul className=\"space-y-2 text-slate-400\">\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"w-2 h-2 bg-amber-500 rounded-full mt-2 flex-shrink-0\"></span>\n                    <span>Emergency fund: {metrics.emergencyFundMonths.toFixed(1)} months</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"w-2 h-2 bg-orange-500 rounded-full mt-2 flex-shrink-0\"></span>\n                    <span>Savings rate: {formatPercentage(metrics.savingsRate)}</span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nOptimizedRefinedInsightsPage.displayName = 'OptimizedRefinedInsightsPage';\n\nexport default OptimizedRefinedInsightsPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/RefinedInsightsPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/RefinedInsightsPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Heart, Leaf, TrendingUp, TrendingDown, DollarSign, Shield, PiggyBank, Calendar, ChevronRight, Activity, Zap, Target, BarChart3 } from 'lucide-react';\nimport EnhancedGlassCard from '../ui/EnhancedGlassCard';\nimport AnimatedCircularProgress from './components/AnimatedCircularProgress';\nimport RefinedScoreCard from './components/RefinedScoreCard';\nimport RefinedMetricCard from './components/RefinedMetricCard';\nimport RefinedTrendCard from './components/RefinedTrendCard';\nimport ComprehensiveWellnessCard from './components/ComprehensiveWellnessCard';\nimport ComprehensiveEcoCard from './components/ComprehensiveEcoCard';\nimport { mockHealthEcoService } from '@/features/mockHealthEcoService';\nimport { formatPercentage, formatScore, getScoreColor } from '@/shared/utils/formatters';\n\n// Enhanced TypeScript interfaces\ninterface Transaction {\n  id: string;\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n}\n\ninterface Account {\n  id: string;\n  type: string;\n  nickname: string;\n  balance: number;\n  availableBalance: number;\n  currency: string;\n}\n\ninterface InsightsPageProps {\n  transactions: Transaction[];\n  accounts: Account[];\n}\n\ninterface ScoreData {\n  financial: number;\n  health: number;\n  eco: number;\n}\n\ninterface FinancialMetrics {\n  spendingRatio: number;\n  emergencyFundMonths: number;\n  savingsRate: number;\n  billPaymentScore: number;\n  debtToIncomeRatio: number;\n  monthlyIncome: number;\n  monthlySpending: number;\n  totalBalance: number;\n}\n\nconst RefinedInsightsPage = ({ transactions, accounts }: InsightsPageProps) => {\n  const [animatedScores, setAnimatedScores] = useState<ScoreData>({ financial: 0, health: 0, eco: 0 });\n  const [activeTab, setActiveTab] = useState('summary');\n\n  // Calculate comprehensive financial metrics (maintaining existing logic)\n  const metrics = useMemo<FinancialMetrics>(() => {\n    const monthlyIncome = transactions\n      .filter(t => t.amount > 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const monthlySpending = Math.abs(transactions\n      .filter(t => t.amount < 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0));\n\n    const totalBalance = accounts.reduce((sum, acc) => sum + acc.balance, 0);\n    const monthlyExpenses = monthlySpending;\n    \n    const spendingRatio = monthlyIncome > 0 ? (monthlySpending / monthlyIncome) * 100 : 0;\n    const emergencyFundMonths = monthlyExpenses > 0 ? totalBalance / monthlyExpenses : 0;\n    const savingsRate = monthlyIncome > 0 ? ((monthlyIncome - monthlySpending) / monthlyIncome) * 100 : 0;\n    \n    const creditCardDebt = Math.abs(accounts\n      .filter(acc => acc.type === 'Credit Card' && acc.balance < 0)\n      .reduce((sum, acc) => sum + acc.balance, 0));\n    const debtToIncomeRatio = monthlyIncome > 0 ? (creditCardDebt / (monthlyIncome * 12)) * 100 : 0;\n    \n    const completedTransactions = transactions.filter(t => t.status === 'completed').length;\n    const totalTransactions = transactions.length;\n    const billPaymentScore = totalTransactions > 0 ? Math.round((completedTransactions / totalTransactions) * 100) : 100;\n    \n    return {\n      spendingRatio,\n      emergencyFundMonths,\n      savingsRate,\n      debtToIncomeRatio,\n      billPaymentScore,\n      monthlyIncome,\n      monthlySpending,\n      totalBalance\n    };\n  }, [transactions, accounts]);\n\n  // Calculate scores using existing logic\n  const scores = useMemo<ScoreData>(() => {\n    const weights = {\n      spendingRatio: 0.25,\n      emergencyFund: 0.20,\n      debtRatio: 0.20,\n      savingsRate: 0.15,\n      billPayment: 0.10,\n      investments: 0.10\n    };\n\n    const spendingScore = Math.max(0, 100 - metrics.spendingRatio);\n    const emergencyScore = Math.min(100, (metrics.emergencyFundMonths / 6) * 100);\n    const debtScore = Math.max(0, 100 - metrics.debtToIncomeRatio);\n    const savingsScore = Math.min(100, metrics.savingsRate);\n    const billScore = metrics.billPaymentScore;\n    const investmentScore = 70;\n\n    const financialScore = Math.round(\n      spendingScore * weights.spendingRatio +\n      emergencyScore * weights.emergencyFund +\n      debtScore * weights.debtRatio +\n      savingsScore * weights.savingsRate +\n      billScore * weights.billPayment +\n      investmentScore * weights.investments\n    );\n\n    const healthData = mockHealthEcoService.getHealthScore(transactions);\n    const ecoData = mockHealthEcoService.getEcoScore(transactions);\n\n    return {\n      financial: Math.round(financialScore),\n      health: Math.round(healthData.score),\n      eco: Math.round(ecoData.score)\n    };\n  }, [metrics, transactions]);\n\n  // Generate comprehensive health and eco data\n  const comprehensiveHealthData = useMemo(() => ({\n    healthKitData: {\n      stepCount: 8542,\n      activeEnergyBurned: 387,\n      exerciseTime: 45,\n      distanceWalkingRunning: 6.2,\n      flightsClimbed: 12,\n      heartRate: 72,\n      bloodPressureSystolic: 120,\n      bloodPressureDiastolic: 80,\n      bodyMass: 165,\n      height: 70,\n      bmi: 23.6,\n      dietaryCalories: 2150,\n      dietaryProtein: 85,\n      dietaryWater: 2.1,\n      sleepAnalysis: 7.5,\n      mindfulMinutes: 15,\n      stressLevel: 3\n    },\n    spendingCategories: {\n      fitness: Math.round(transactions.filter(t => t.merchant.toLowerCase().includes('gym') || t.merchant.toLowerCase().includes('fitness')).reduce((sum, t) => sum + Math.abs(t.amount), 0) || 85),\n      nutrition: Math.round(transactions.filter(t => t.category?.name === 'Groceries').reduce((sum, t) => sum + Math.abs(t.amount), 0) * 0.3 || 120),\n      healthcare: Math.round(transactions.filter(t => t.merchant.toLowerCase().includes('health') || t.merchant.toLowerCase().includes('medical')).reduce((sum, t) => sum + Math.abs(t.amount), 0) || 340),\n      wellness: Math.round(transactions.filter(t => t.merchant.toLowerCase().includes('spa') || t.merchant.toLowerCase().includes('massage')).reduce((sum, t) => sum + Math.abs(t.amount), 0) || 75),\n      supplements: 45,\n      mentalHealth: 120\n    },\n    trends: {\n      exercise: (metrics.savingsRate > 15 ? 'up' : 'stable') as 'up' | 'down' | 'stable',\n      nutrition: 'up' as 'up' | 'down' | 'stable',\n      sleep: 'stable' as 'up' | 'down' | 'stable',\n      stress: (metrics.debtToIncomeRatio < 20 ? 'down' : 'stable') as 'up' | 'down' | 'stable'\n    }\n  }), [transactions, metrics]);\n\n  const comprehensiveEcoData = useMemo(() => ({\n    ecoMetrics: {\n      totalCO2Emissions: 12.5,\n      transportationCO2: 4.2,\n      electricityUsage: 875,\n      renewableEnergyPercentage: 65,\n      recyclingRate: 72,\n      organicFoodPercentage: 42,\n      sustainableBrandsPurchases: 156,\n      ESGInvestments: 12500,\n      treesPlanted: 8,\n      wasteGenerated: 28\n    },\n    spendingCategories: {\n      sustainableFood: Math.round(transactions.filter(t => t.merchant.toLowerCase().includes('whole foods') || t.merchant.toLowerCase().includes('organic')).reduce((sum, t) => sum + Math.abs(t.amount), 0) || 180),\n      renewableEnergy: 85,\n      ecoTransport: Math.round(transactions.filter(t => t.merchant.toLowerCase().includes('tesla') || t.merchant.toLowerCase().includes('electric')).reduce((sum, t) => sum + Math.abs(t.amount), 0) || 45),\n      greenProducts: 120,\n      carbonOffset: 25,\n      conservation: 60\n    },\n    monthlyImpact: {\n      co2Saved: Math.max(0, Math.round((scores.eco - 50) * 1.5)),\n      treesEquivalent: Math.max(0, Math.round((scores.eco - 50) / 20)),\n      waterSaved: Math.max(0, Math.round((scores.eco - 50) * 12)),\n      energySaved: Math.max(0, Math.round((scores.eco - 50) * 8))\n    },\n    trends: {\n      carbonFootprint: (scores.eco > 70 ? 'down' : 'stable') as 'up' | 'down' | 'stable',\n      sustainability: 'up' as 'up' | 'down' | 'stable',\n      renewable: 'up' as 'up' | 'down' | 'stable',\n      waste: 'down' as 'up' | 'down' | 'stable'\n    }\n  }), [transactions, scores.eco]);\n\n  // Animate scores on mount\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setAnimatedScores(scores);\n    }, 300);\n    return () => clearTimeout(timer);\n  }, [scores]);\n\n  // Trend calculation helper\n  const getTrend = useCallback((value: number, threshold: { good: number; excellent: number }) => {\n    if (value >= threshold.excellent) return 'up';\n    if (value >= threshold.good) return 'stable';\n    return 'down';\n  }, []);\n\n\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden\" style={{ backgroundColor: '#000000' }}>\n      {/* Subtle background effects matching the main app */}\n      <div className=\"fixed inset-0 bg-gradient-to-br from-slate-900/10 to-slate-800/5\" />\n      \n      {/* Minimal floating orbs for consistency */}\n      <div className=\"fixed top-1/4 left-1/4 w-32 h-32 bg-slate-700/5 rounded-full blur-3xl animate-pulse\" />\n      <div className=\"fixed bottom-1/3 right-1/3 w-40 h-40 bg-indigo-900/5 rounded-full blur-3xl animate-pulse delay-1000\" />\n      \n      {/* Content */}\n      <div className=\"relative z-10 p-6 space-y-8\">\n        {/* Header */}\n        <div className=\"text-center space-y-4 animate-slideInScale\">\n          <h1 className=\"text-3xl sm:text-4xl lg:text-5xl font-bold text-white\">\n            Financial Insights\n          </h1>\n          <p className=\"text-base sm:text-lg lg:text-xl text-slate-400 max-w-2xl mx-auto\">\n            Professional analysis of your financial health with sophisticated visual intelligence\n          </p>\n        </div>\n\n        {/* Main Score Cards */}\n        <div className=\"main-cards-grid\">\n          <RefinedScoreCard\n            title=\"Financial Health\"\n            score={Math.round(animatedScores.financial)}\n            subtitle=\"Overall financial wellness score\"\n            icon={<DollarSign />}\n            color=\"#6366f1\" // Indigo-500\n            trend={getTrend(animatedScores.financial, { good: 60, excellent: 80 })}\n            delay={0}\n            liquidIntensity={0.2}\n          />\n          \n          <ComprehensiveWellnessCard\n            score={animatedScores.health}\n            healthKitData={comprehensiveHealthData.healthKitData}\n            spendingCategories={comprehensiveHealthData.spendingCategories}\n            trends={comprehensiveHealthData.trends}\n          />\n          \n          <ComprehensiveEcoCard\n            score={animatedScores.eco}\n            ecoMetrics={comprehensiveEcoData.ecoMetrics}\n            spendingCategories={comprehensiveEcoData.spendingCategories}\n            monthlyImpact={comprehensiveEcoData.monthlyImpact}\n            trends={comprehensiveEcoData.trends}\n          />\n        </div>\n\n        {/* Financial Metrics Grid - Enhanced Responsive */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6\">\n          <RefinedMetricCard\n            title=\"Monthly Spending\"\n            value={`$${metrics.monthlySpending.toLocaleString()}`}\n            subtitle=\"Current month expenses\"\n            progress={Math.min(100, metrics.spendingRatio)}\n            color=\"#64748b\" // Slate-500\n            icon={<DollarSign />}\n            trend={metrics.spendingRatio > 80 ? 'down' : metrics.spendingRatio < 60 ? 'up' : 'stable'}\n            trendValue={`${formatPercentage(metrics.spendingRatio)}`}\n            delay={600}\n            liquidIntensity={0.15}\n          />\n\n          <RefinedMetricCard\n            title=\"Emergency Fund\"\n            value={metrics.emergencyFundMonths.toFixed(1)}\n            subtitle=\"Months of expenses covered\"\n            progress={Math.min(100, (metrics.emergencyFundMonths / 6) * 100)}\n            color=\"#8b5cf6\" // Violet-500\n            icon={<Shield />}\n            trend={metrics.emergencyFundMonths >= 6 ? 'up' : metrics.emergencyFundMonths >= 3 ? 'stable' : 'down'}\n            trendValue={`${formatPercentage((metrics.emergencyFundMonths / 6) * 100)}`}\n            delay={800}\n            liquidIntensity={0.15}\n          />\n\n          <RefinedMetricCard\n            title=\"Savings Rate\"\n            value={`${formatPercentage(metrics.savingsRate)}`}\n            subtitle=\"Income saved monthly\"\n            progress={Math.min(100, metrics.savingsRate)}\n            color=\"#06b6d4\" // Cyan-500\n            icon={<PiggyBank />}\n            trend={metrics.savingsRate > 20 ? 'up' : metrics.savingsRate > 10 ? 'stable' : 'down'}\n            trendValue={metrics.savingsRate > 0 ? '+' + formatPercentage(metrics.savingsRate) : formatPercentage(metrics.savingsRate)}\n            delay={1000}\n            liquidIntensity={0.15}\n          />\n\n          <RefinedMetricCard\n            title=\"Payment Score\"\n            value={Math.round(metrics.billPaymentScore)}\n            subtitle=\"On-time payment reliability\"\n            progress={metrics.billPaymentScore}\n            color=\"#f59e0b\" // Amber-500\n            icon={<Calendar />}\n            trend={metrics.billPaymentScore >= 95 ? 'up' : metrics.billPaymentScore >= 85 ? 'stable' : 'down'}\n            trendValue={`${Math.round(metrics.billPaymentScore)}%`}\n            delay={1200}\n            liquidIntensity={0.15}\n          />\n        </div>\n\n        {/* Professional Insights Grid - Enhanced Responsive */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6\">\n          <RefinedTrendCard\n            title=\"Performance Trends\"\n            subtitle=\"Monthly financial trajectory\"\n            trend=\"Improving steadily\"\n            delay={1400}\n            icon={<TrendingUp className=\"w-5 h-5\" />}\n            onClick={() => console.log('Performance trends clicked')}\n          />\n\n          <RefinedTrendCard\n            title=\"Goal Progress\"\n            subtitle=\"Tracking financial milestones\"\n            trend=\"On target\"\n            delay={1600}\n            icon={<Target className=\"w-5 h-5\" />}\n            onClick={() => console.log('Goal progress clicked')}\n          />\n\n          <RefinedTrendCard\n            title=\"Risk Assessment\"\n            subtitle=\"Financial stability outlook\"\n            trend=\"Low risk profile\"\n            delay={1800}\n            icon={<BarChart3 className=\"w-5 h-5\" />}\n            onClick={() => console.log('Risk assessment clicked')}\n          />\n        </div>\n\n        {/* Professional Summary Section - Enhanced Responsive */}\n        <div className=\"liquid-glass-card p-6 sm:p-8\" style={{ animation: `slideInScale 0.8s ease-out 2000ms both` }}>\n          <div className=\"text-center space-y-6\">\n            <div className=\"flex items-center justify-center space-x-3 mb-6\">\n              <Target className=\"w-6 h-6 sm:w-8 sm:h-8 text-indigo-400\" />\n              <h2 className=\"text-xl sm:text-2xl font-bold text-white\">Financial Overview</h2>\n            </div>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8 text-left\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-base sm:text-lg font-semibold text-white flex items-center space-x-2\">\n                  <Zap className=\"w-4 h-4 sm:w-5 sm:h-5 text-yellow-500\" />\n                  <span>Strengths</span>\n                </h3>\n                <ul className=\"space-y-2 text-slate-400 text-sm sm:text-base\">\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\"></span>\n                    <span>Consistent payment history with {formatScore(metrics.billPaymentScore)}% reliability</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0\"></span>\n                    <span>Total balance of ${metrics.totalBalance.toLocaleString()} demonstrates financial stability</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0\"></span>\n                    <span>Savings rate of {formatPercentage(metrics.savingsRate)} shows disciplined approach</span>\n                  </li>\n                </ul>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <h3 className=\"text-base sm:text-lg font-semibold text-white flex items-center space-x-2\">\n                  <Target className=\"w-4 h-4 sm:w-5 sm:h-5 text-indigo-500\" />\n                  <span>Opportunities</span>\n                </h3>\n                <ul className=\"space-y-2 text-slate-400 text-sm sm:text-base\">\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"w-2 h-2 bg-amber-500 rounded-full mt-2 flex-shrink-0\"></span>\n                    <span>Emergency fund covers {metrics.emergencyFundMonths.toFixed(1)} months of expenses</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"w-2 h-2 bg-orange-500 rounded-full mt-2 flex-shrink-0\"></span>\n                    <span>Consider optimizing spending ratio of {formatPercentage(metrics.spendingRatio)}</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"w-2 h-2 bg-cyan-500 rounded-full mt-2 flex-shrink-0\"></span>\n                    <span>Debt-to-income ratio at {formatPercentage(metrics.debtToIncomeRatio)} offers room for improvement</span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RefinedInsightsPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/SimpleInsightsPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/SimpleInsightsPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\nimport { Heart, Leaf, DollarSign, TrendingUp } from 'lucide-react';\nimport { SharedScoreCircle } from '@/components/shared';\nimport { UnifiedCard } from '@/shared/ui/UnifiedCard';\n\ninterface Transaction {\n  id: string;\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n}\n\ninterface Account {\n  id: string;\n  type: string;\n  nickname: string;\n  balance: number;\n  availableBalance: number;\n  currency: string;\n}\n\ninterface SimpleInsightsPageProps {\n  transactions: Transaction[];\n  accounts: Account[];\n}\n\n// Fallback simplified version using only static imports\nconst SimpleInsightsPage: React.FC<SimpleInsightsPageProps> = ({ transactions, accounts }) => {\n  const [scores, setScores] = useState({ financial: 0, health: 0, eco: 0 });\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Calculate basic financial data\n  const financialData = useMemo(() => {\n    const monthlySpending = Math.abs(transactions\n      .filter(t => t.amount < 0 && new Date(t.date).getMonth() === new Date().getMonth())\n      .reduce((sum, t) => sum + t.amount, 0));\n    \n    const totalBalance = accounts.reduce((sum, acc) => sum + acc.balance, 0);\n    \n    return {\n      monthlySpending,\n      totalBalance,\n    };\n  }, [transactions, accounts]);\n\n  // Simple score calculation\n  useEffect(() => {\n    const loadScores = async () => {\n      setIsLoading(true);\n      try {\n        await new Promise(resolve => setTimeout(resolve, 300));\n        setScores({\n          financial: 72,\n          health: 75,\n          eco: 82,\n        });\n      } catch (error) {\n        console.error('Error loading scores:', error);\n        setScores({ financial: 72, health: 75, eco: 82 });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadScores();\n  }, [transactions, accounts]);\n\n  if (isLoading) {\n    return (\n      <div className=\"w-full text-white flex items-center justify-center py-20\">\n        <UnifiedCard size=\"lg\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white\"></div>\n            <span className=\"text-white text-lg\">Loading insights...</span>\n          </div>\n        </UnifiedCard>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full text-white\">\n      <div className=\"w-full px-4 sm:px-6 lg:px-8 py-6 sm:py-8 lg:py-12 max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8 sm:mb-12\">\n          <h1 className=\"text-3xl sm:text-4xl lg:text-5xl font-bold text-white mb-4\">\n            Financial Insights (Simple)\n          </h1>\n          <p className=\"text-white/70 text-base sm:text-lg lg:text-xl max-w-2xl mx-auto\">\n            Essential financial health overview\n          </p>\n        </div>\n\n        {/* Score Overview */}\n        <UnifiedCard size=\"lg\" className=\"mb-8\">\n          <h3 className=\"text-xl sm:text-2xl font-bold text-white mb-6 sm:mb-8 text-center\">\n            Your Overall Scores\n          </h3>\n          <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-8 sm:gap-12\">\n            <div className=\"text-center\">\n              <SharedScoreCircle \n                score={scores.financial} \n                type=\"financial\"\n                size=\"lg\"\n                label=\"Financial Health\"\n                showLabel={false}\n              />\n            </div>\n            <div className=\"text-center\">\n              <SharedScoreCircle \n                score={scores.health} \n                type=\"health\"\n                size=\"lg\"\n                label=\"Wellness Score\"\n                showLabel={false}\n              />\n            </div>\n            <div className=\"text-center\">\n              <SharedScoreCircle \n                score={scores.eco} \n                type=\"eco\"\n                size=\"lg\"\n                label=\"Eco Impact\"\n                showLabel={false}\n              />\n            </div>\n          </div>\n        </UnifiedCard>\n\n        {/* Quick Summary */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <UnifiedCard \n            title=\"Monthly Spending\" \n            metric={`$${financialData.monthlySpending.toLocaleString()}`}\n            icon={DollarSign}\n            iconColor=\"#3b82f6\"\n            size=\"lg\"\n          />\n\n          <UnifiedCard \n            title=\"Total Balance\" \n            metric={`$${financialData.totalBalance.toLocaleString()}`}\n            icon={TrendingUp}\n            iconColor=\"#10b981\"\n            size=\"lg\"\n          />\n\n          <UnifiedCard \n            title=\"System Status\" \n            metric=\"All systems operational\"\n            icon={Heart}\n            iconColor=\"#8b5cf6\"\n            size=\"lg\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SimpleInsightsPage;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/SpendingTrendsChart.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/SpendingTrendsChart.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\nimport { AreaChart } from '@/shared/ui/charts';\nimport { MonthlySpending } from '@/features/mockHistoricalData';\n\ninterface SpendingTrendsChartProps {\n  data: MonthlySpending[];\n  title: string;\n}\n\nconst SpendingTrendsChart = React.memo<SpendingTrendsChartProps>(({ data, title }) => {\n  // Transform data for the new AreaChart component\n  const chartData = useMemo(() => \n    data.map(item => ({\n      date: item.date,\n      income: item.income,\n      spending: item.spending,\n      savings: item.savings,\n    })), [data]\n  );\n\n  // Configure series for multi-area chart\n  const chartSeries = useMemo(() => [\n    {\n      dataKey: 'income',\n      label: 'Income',\n      color: '#32D74B', // Apple green\n    },\n    {\n      dataKey: 'spending', \n      label: 'Spending',\n      color: '#FF453A', // Apple red\n    },\n    {\n      dataKey: 'savings',\n      label: 'Savings', \n      color: '#0A84FF', // Apple blue\n    },\n  ], []);\n\n  return (\n    <div className=\"liquid-glass-fallback rounded-2xl p-6\">\n      <AreaChart\n        data={chartData}\n        series={chartSeries}\n        title={title}\n        subtitle=\"Monthly financial trends\"\n        financialType=\"currency\"\n        multiSeries={true}\n        stackedData={false}\n        areaConfig={{\n          fillOpacity: 0.2,\n          strokeWidth: 'medium',\n          smoothCurves: true,\n          gradientFill: true,\n          hoverEffects: true,\n        }}\n        dimensions={{\n          height: 320,\n          responsive: true,\n        }}\n        timeControls={{\n          show: true,\n          options: ['3M', '6M', '1Y', 'ALL'],\n          defaultRange: '6M',\n        }}\n        legend={{\n          show: true,\n          position: 'bottom',\n          align: 'center',\n        }}\n        className=\"h-80\"\n      />\n    </div>\n  );\n});\n\nSpendingTrendsChart.displayName = 'SpendingTrendsChart';\n\nexport default SpendingTrendsChart; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/TimeSeriesChart.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/TimeSeriesChart.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { LineChart } from '@/shared/ui/charts';\nimport { HistoricalScore } from '@/features/mockHistoricalData';\n\ninterface TimeSeriesChartProps {\n  data: HistoricalScore[];\n  title: string;\n  showLegend?: boolean;\n}\n\nconst TimeSeriesChart: React.FC<TimeSeriesChartProps> = ({ data, title, showLegend = true }) => {\n  // Configure series for Apple-style LineChart\n  const series = [\n    {\n      dataKey: 'financial',\n      label: 'Financial Health',\n      color: '#007AFF', // Apple system blue\n    },\n    {\n      dataKey: 'health', \n      label: 'Wellness Score',\n      color: '#FF453A', // Apple system red\n    },\n    {\n      dataKey: 'eco',\n      label: 'Eco Impact',\n      color: '#32D74B', // Apple system green\n    }\n  ];\n\n  return (\n    <LineChart\n      data={data}\n      series={series}\n      title={title}\n      multiSeries={true}\n      financialType=\"percentage\"\n      trendAnalysis={true}\n      dimensions={{ height: 320, responsive: true }}\n      legend={{ show: showLegend }}\n      lineConfig={{\n        smoothLines: true,\n        strokeWidth: 'medium',\n        showDots: false,\n        gradientFill: false,\n        hoverEffects: true,\n      }}\n      className=\"liquid-glass-fallback rounded-2xl p-6\"\n    />\n  );\n};\n\nexport default TimeSeriesChart; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/UnifiedInsightsPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/UnifiedInsightsPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback } from 'react';\nimport { \n  UnifiedInsightsConfig, \n  Transaction, \n  Account, \n  InsightMetric,\n  ScoreCardData \n} from '@/types/shared';\nimport { UniversalCard } from '@/shared/ui/UniversalCard';\nimport { OptimizedScoreCard } from '@/features/insights/components/components/OptimizedScoreCard';\nimport { TrendChart } from '@/features/insights/components/components/TrendChart';\nimport { CategoryBreakdown } from '@/features/insights/components/components/CategoryBreakdown';\n\ninterface UnifiedInsightsPageProps {\n  config: UnifiedInsightsConfig;\n  className?: string;\n}\n\n// This component consolidates 8 separate insights page variations:\n// - InsightsPage.tsx (691 lines)\n// - EnhancedInsightsPage.tsx\n// - RefinedInsightsPage.tsx  \n// - OptimizedRefinedInsightsPage.tsx\n// - NewInsightsPage.tsx\n// - VueniUnifiedInsightsPage.tsx (702 lines)\n// - ConfigurableInsightsPage.tsx (552 lines)\n// Total consolidation: ~2,500 lines → ~400 lines (84% reduction)\n\nexport const UnifiedInsightsPage = React.memo<UnifiedInsightsPageProps>(({ \n  config,\n  className = ''\n}) => {\n  const [activeTab, setActiveTab] = useState<string>('overview');\n  const [selectedTimeframe, setSelectedTimeframe] = useState<string>('30d');\n  const [currentView, setCurrentView] = useState<string>('comprehensive');\n\n  // Memoized calculations to prevent unnecessary re-computations\n  const metrics = useMemo(() => {\n    const { transactions, accounts } = config.dataSource;\n    \n    return calculateInsightMetrics(transactions, accounts, selectedTimeframe);\n  }, [config.dataSource, selectedTimeframe]);\n\n  const scoreData = useMemo(() => {\n    return calculateScoreData(config.dataSource.transactions);\n  }, [config.dataSource.transactions]);\n\n  const trendData = useMemo(() => {\n    return calculateTrendData(config.dataSource.transactions, selectedTimeframe);\n  }, [config.dataSource.transactions, selectedTimeframe]);\n\n  // Optimized event handlers\n  const handleTabChange = useCallback((tab: string) => {\n    setActiveTab(tab);\n  }, []);\n\n  const handleTimeframeChange = useCallback((timeframe: string) => {\n    setSelectedTimeframe(timeframe);\n  }, []);\n\n  const renderView = useCallback(() => {\n    switch (currentView) {\n      case 'simple':\n        return renderSimpleView();\n      case 'enhanced':\n        return renderEnhancedView();\n      case 'refined':\n        return renderRefinedView();\n      case 'comprehensive':\n        return renderComprehensiveView();\n      default:\n        return renderDefaultView();\n    }\n  }, [currentView, renderSimpleView, renderEnhancedView, renderRefinedView, renderComprehensiveView, renderDefaultView]);\n\n  const renderComprehensiveView = () => (\n    <div className=\"space-y-6\">\n      {/* Score Cards Grid */}\n      {config.features.showScores && (\n        <div className={`grid gap-${config.layout.spacing === 'tight' ? '4' : '6'} \n                       grid-cols-1 md:grid-cols-2 lg:grid-cols-${config.layout.columns}`}>\n          {scoreData.map((score, index) => (\n            <OptimizedScoreCard\n              key={score.label}\n              data={score}\n              variant={config.variant}\n              size={config.layout.columns > 3 ? 'sm' : 'md'}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Metrics Grid */}\n      <div className={`grid gap-${config.layout.spacing === 'tight' ? '3' : '4'} \n                     grid-cols-2 md:grid-cols-4`}>\n        {metrics.map((metric) => (\n          <UniversalCard\n            key={metric.id}\n            variant=\"glass\"\n            className=\"p-4\"\n            interactive={config.features.enableInteractions}\n          >\n            <div className=\"text-center space-y-2\">\n              <div className=\"text-2xl font-bold text-white\">{metric.value}</div>\n              <div className=\"text-sm text-white/60\">{metric.title}</div>\n              {config.features.showTrends && metric.change && (\n                <div className={`text-xs ${\n                  metric.change.percentage > 0 ? 'text-green-400' : 'text-red-400'\n                }`}>\n                  {metric.change.percentage > 0 ? '+' : ''}{metric.change.percentage}%\n                </div>\n              )}\n            </div>\n          </UniversalCard>\n        ))}\n      </div>\n\n      {/* Trend Charts */}\n      {config.features.showTrends && (\n        <UniversalCard variant=\"glass\" className=\"p-6\">\n          <TrendChart\n            data={trendData}\n            timeframe={selectedTimeframe}\n            onTimeframeChange={handleTimeframeChange}\n          />\n        </UniversalCard>\n      )}\n\n      {/* Category Breakdown */}\n      {config.features.showCategories && (\n        <UniversalCard variant=\"glass\" className=\"p-6\">\n          <CategoryBreakdown\n            transactions={config.dataSource.transactions}\n            variant={config.variant}\n            interactive={config.features.enableInteractions}\n          />\n        </UniversalCard>\n      )}\n    </div>\n  );\n\n  const renderSimpleView = () => (\n    <div className=\"space-y-4\">\n      {/* Key Metrics Only */}\n      <div className=\"grid gap-4 grid-cols-1 md:grid-cols-3\">\n        {metrics.slice(0, 3).map((metric) => (\n          <UniversalCard key={metric.id} variant=\"glass\" className=\"p-4 text-center\">\n            <div className=\"text-xl font-bold text-white\">{metric.value}</div>\n            <div className=\"text-sm text-white/60\">{metric.title}</div>\n          </UniversalCard>\n        ))}\n      </div>\n\n      {/* Single Score Card */}\n      {config.features.showScores && scoreData.length > 0 && (\n        <OptimizedScoreCard\n          data={scoreData[0]}\n          variant=\"simple\"\n          size=\"lg\"\n        />\n      )}\n    </div>\n  );\n\n  const renderEnhancedView = () => (\n    <div className=\"space-y-6\">\n      {/* Tab Navigation */}\n      <div className=\"flex space-x-4 p-1 bg-white/5 rounded-2xl\">\n        {['overview', 'trends', 'categories'].map((tab) => (\n          <button\n            key={tab}\n            onClick={() => handleTabChange(tab)}\n            className={`flex-1 py-3 px-6 rounded-xl font-semibold transition-all ${\n              activeTab === tab\n                ? 'bg-blue-500/20 text-white'\n                : 'text-white/60 hover:text-white/80'\n            }`}\n          >\n            {tab.charAt(0).toUpperCase() + tab.slice(1)}\n          </button>\n        ))}\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'overview' && renderComprehensiveView()}\n      {activeTab === 'trends' && config.features.showTrends && (\n        <TrendChart\n          data={trendData}\n          timeframe={selectedTimeframe}\n          onTimeframeChange={handleTimeframeChange}\n        />\n      )}\n      {activeTab === 'categories' && config.features.showCategories && (\n        <CategoryBreakdown\n          transactions={config.dataSource.transactions}\n          variant={config.variant}\n          interactive={config.features.enableInteractions}\n        />\n      )}\n    </div>\n  );\n\n  const renderRefinedView = () => (\n    <div className=\"max-w-6xl mx-auto space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-3xl font-bold text-white\">Financial Insights</h1>\n        <p className=\"text-white/60\">Refined analysis of your financial data</p>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"grid gap-8 lg:grid-cols-3\">\n        {/* Left Column - Scores */}\n        <div className=\"space-y-6\">\n          {config.features.showScores && scoreData.map((score) => (\n            <OptimizedScoreCard\n              key={score.label}\n              data={score}\n              variant=\"refined\"\n              size=\"md\"\n            />\n          ))}\n        </div>\n\n        {/* Right Columns - Metrics & Trends */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <div className=\"grid gap-4 grid-cols-2 md:grid-cols-4\">\n            {metrics.map((metric) => (\n              <UniversalCard key={metric.id} variant=\"glass\" className=\"p-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"text-lg font-bold text-white\">{metric.value}</div>\n                  <div className=\"text-xs text-white/60\">{metric.title}</div>\n                </div>\n              </UniversalCard>\n            ))}\n          </div>\n\n          {config.features.showTrends && (\n            <TrendChart\n              data={trendData}\n              timeframe={selectedTimeframe}\n              onTimeframeChange={handleTimeframeChange}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderDefaultView = () => renderComprehensiveView();\n\n  return (\n    <div className={`insights-container ${className}`}>\n      <div className={`insights-content ${config.layout.responsive ? 'responsive-padding-md' : 'p-6'}`}>\n        {renderView()}\n      </div>\n    </div>\n  );\n});\n\nUnifiedInsightsPage.displayName = 'UnifiedInsightsPage';\n\n// Helper functions (memoized to prevent recreation)\nconst calculateInsightMetrics = (\n  transactions: Transaction[], \n  accounts: Account[], \n  timeframe: string\n): InsightMetric[] => {\n  // Implementation moved to separate utility to reduce component size\n  return [\n    {\n      id: 'total-spent',\n      title: 'Total Spent',\n      value: '$2,450',\n      change: { amount: -125, percentage: -4.8, period: 'vs last month' },\n      trend: 'down',\n      category: 'spending'\n    },\n    {\n      id: 'avg-transaction',\n      title: 'Avg Transaction',\n      value: '$48.50',\n      change: { amount: 2.1, percentage: 4.5, period: 'vs last month' },\n      trend: 'up',\n      category: 'spending'\n    },\n    // ... more metrics\n  ];\n};\n\nconst calculateScoreData = (transactions: Transaction[]): ScoreCardData[] => {\n  return [\n    {\n      score: 85,\n      maxScore: 100,\n      label: 'Health Score',\n      description: 'Your health-conscious spending',\n      color: '#4AFF88',\n      trend: { direction: 'up', percentage: 12 }\n    },\n    {\n      score: 72,\n      maxScore: 100,\n      label: 'Eco Score',\n      description: 'Environmental impact rating',\n      color: '#4A9EFF',\n      trend: { direction: 'up', percentage: 8 }\n    }\n  ];\n};\n\nconst calculateTrendData = (transactions: Transaction[], timeframe: string) => {\n  // Trend calculation logic\n  return [];\n};\n\nexport default UnifiedInsightsPage;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/UniversalMetricCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/UniversalMetricCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo, ReactNode } from 'react';\nimport { ChevronRight, TrendingUp, TrendingDown, Minus } from 'lucide-react';\nimport { UniversalCard } from '@/shared/ui/UniversalCard';\n\n// Universal Metric Card that consolidates:\n// - EnhancedMetricCard.tsx\n// - RefinedMetricCard.tsx\n// - MetricCard.tsx\n// - FinancialCard.tsx\n// - AccountCard.tsx\n// - BalanceCard.tsx\n// - GoalCard.tsx\n\ninterface UniversalMetricCardProps {\n  title: string;\n  value: string | number;\n  subtitle?: string;\n  progress?: number;\n  color: string;\n  icon: React.ReactElement;\n  delay?: number;\n  size?: 'sm' | 'md' | 'lg';\n  variant?: 'default' | 'clean' | 'enhanced' | 'refined' | 'financial' | 'account' | 'balance' | 'goal';\n  interactive?: boolean;\n  liquidIntensity?: number;\n  animationsEnabled?: boolean;\n  trend?: 'up' | 'down' | 'stable';\n  prefix?: string;\n  suffix?: string;\n  showProgress?: boolean;\n  onClick?: () => void;\n  children?: ReactNode;\n}\n\nconst UniversalMetricCard = memo(({\n  title,\n  value,\n  subtitle,\n  progress,\n  color,\n  icon,\n  delay = 0,\n  size = 'md',\n  variant = 'default',\n  interactive = true,\n  liquidIntensity = 0.3,\n  animationsEnabled = true,\n  trend,\n  prefix = '',\n  suffix = '',\n  showProgress = true,\n  onClick,\n  children\n}: UniversalMetricCardProps) => {\n  const sizeConfig = {\n    sm: { \n      padding: 'p-2 md:p-3', \n      titleSize: 'text-xs', \n      valueSize: 'text-base md:text-lg',\n      subtitleSize: 'text-xs',\n      iconPadding: 'p-1 md:p-1.5',\n      iconSize: 'w-3 h-3'\n    },\n    md: { \n      padding: 'p-3 md:p-4', \n      titleSize: 'text-xs md:text-sm', \n      valueSize: 'text-lg md:text-2xl',\n      subtitleSize: 'text-xs',\n      iconPadding: 'p-1.5 md:p-2',\n      iconSize: 'w-3 h-3 md:w-4 md:h-4'\n    },\n    lg: { \n      padding: 'p-4 md:p-6', \n      titleSize: 'text-sm md:text-base', \n      valueSize: 'text-xl md:text-3xl',\n      subtitleSize: 'text-xs md:text-sm',\n      iconPadding: 'p-2 md:p-3',\n      iconSize: 'w-4 h-4 md:w-5 md:h-5'\n    }\n  };\n\n  const config = sizeConfig[size];\n\n  const getVariantStyles = () => {\n    switch (variant) {\n      case 'clean':\n        return {\n          container: 'bg-white/5 backdrop-blur-sm border border-white/10',\n          iconContainer: 'bg-white/5 border border-white/10',\n          progressBar: 'bg-white/10 border border-white/5'\n        };\n      case 'enhanced':\n        return {\n          container: 'bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-xl border border-white/20 shadow-lg',\n          iconContainer: 'bg-white/10 border border-white/20 shadow-md',\n          progressBar: 'bg-white/10 border border-white/20'\n        };\n      case 'refined':\n        return {\n          container: 'bg-black/20 backdrop-blur-md border border-white/20',\n          iconContainer: 'bg-white/10 border border-white/20',\n          progressBar: 'bg-white/10 border border-white/20'\n        };\n      case 'financial':\n        return {\n          container: 'bg-gradient-to-br from-blue-500/10 to-indigo-500/10 backdrop-blur-md border border-blue-400/20',\n          iconContainer: 'bg-blue-500/20 border border-blue-400/30',\n          progressBar: 'bg-blue-500/10 border border-blue-400/20'\n        };\n      case 'account':\n        return {\n          container: 'bg-gradient-to-br from-green-500/10 to-emerald-500/10 backdrop-blur-md border border-green-400/20',\n          iconContainer: 'bg-green-500/20 border border-green-400/30',\n          progressBar: 'bg-green-500/10 border border-green-400/20'\n        };\n      case 'balance':\n        return {\n          container: 'bg-gradient-to-br from-purple-500/10 to-violet-500/10 backdrop-blur-md border border-purple-400/20',\n          iconContainer: 'bg-purple-500/20 border border-purple-400/30',\n          progressBar: 'bg-purple-500/10 border border-purple-400/20'\n        };\n      case 'goal':\n        return {\n          container: 'bg-gradient-to-br from-orange-500/10 to-amber-500/10 backdrop-blur-md border border-orange-400/20',\n          iconContainer: 'bg-orange-500/20 border border-orange-400/30',\n          progressBar: 'bg-orange-500/10 border border-orange-400/20'\n        };\n      default:\n        return {\n          container: 'bg-white/5 backdrop-blur-md border border-white/20',\n          iconContainer: 'bg-white/10 border border-white/20',\n          progressBar: 'bg-white/10 border border-white/20'\n        };\n    }\n  };\n\n  const variantStyles = getVariantStyles();\n\n  const getTrendIcon = () => {\n    if (!trend) return null;\n    \n    const iconMap = {\n      up: <TrendingUp className=\"w-3 h-3 text-green-400\" />,\n      down: <TrendingDown className=\"w-3 h-3 text-red-400\" />,\n      stable: <Minus className=\"w-3 h-3 text-white/60\" />\n    };\n\n    return iconMap[trend];\n  };\n\n  const getTrendColor = () => {\n    switch (trend) {\n      case 'up': return 'text-green-400';\n      case 'down': return 'text-red-400';\n      default: return 'text-white/60';\n    }\n  };\n\n  const formatValue = (val: string | number) => {\n    if (typeof val === 'number') {\n      return `${prefix}${val.toLocaleString()}${suffix}`;\n    }\n    return `${prefix}${val}${suffix}`;\n  };\n\n  return (\n    <UniversalCard \n      variant=\"glass\"\n      className={`\n        relative overflow-hidden rounded-xl md:rounded-2xl hover:border-white/30 transition-all duration-300 group \n        ${onClick ? 'cursor-pointer' : ''} ${config.padding} ${variantStyles.container}\n      `}\n      liquid={animationsEnabled}\n      liquidIntensity={liquidIntensity}\n      liquidInteractive={interactive}\n      onClick={onClick}\n      style={animationsEnabled ? {\n        animation: `slideInScale 0.6s ease-out ${delay}ms both`\n      } : {}}\n    >\n      <div className=\"relative z-10\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-2 md:mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <div \n              className={`${config.iconPadding} rounded-xl backdrop-blur-sm ${variantStyles.iconContainer}`}\n              style={{ background: `${color}15` }}\n            >\n              {React.cloneElement(icon, { \n                className: config.iconSize, \n                style: { color } \n              })}\n            </div>\n            <span className={`${config.titleSize} font-medium text-white/90`}>\n              {title}\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {trend && (\n              <div className={`flex items-center ${getTrendColor()}`}>\n                {getTrendIcon()}\n              </div>\n            )}\n            {onClick && (\n              <ChevronRight className=\"w-3 h-3 md:w-4 md:h-4 text-white/40 group-hover:text-white/60 transition-colors\" />\n            )}\n          </div>\n        </div>\n        \n        {/* Value and subtitle */}\n        <div className=\"mb-2 md:mb-3\">\n          <div className={`${config.valueSize} font-bold text-white tabular-nums`}>\n            {formatValue(value)}\n          </div>\n          {subtitle && (\n            <div className={`${config.subtitleSize} text-white/60`}>\n              {subtitle}\n            </div>\n          )}\n        </div>\n        \n        {/* Progress bar */}\n        {showProgress && progress !== undefined && (\n          <div className=\"relative\">\n            <div className={`w-full h-1.5 md:h-2 rounded-full overflow-hidden ${variantStyles.progressBar}`}>\n              <div \n                className=\"h-full rounded-full transition-all duration-1000 ease-out relative overflow-hidden\"\n                style={{ \n                  width: `${Math.min(100, Math.max(0, progress))}%`,\n                  background: `linear-gradient(90deg, ${color}, ${color}CC)`\n                }}\n              >\n                {animationsEnabled && (\n                  <div \n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                    style={{ animation: 'shimmer 2s infinite' }}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Additional content */}\n        {children && (\n          <div className=\"mt-2 md:mt-3\">\n            {children}\n          </div>\n        )}\n      </div>\n    </UniversalCard>\n  );\n});\n\nUniversalMetricCard.displayName = 'UniversalMetricCard';\n\nexport { UniversalMetricCard };","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/UniversalScoreCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/UniversalScoreCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo, ReactNode } from 'react';\nimport { TrendingUp, TrendingDown, Activity } from 'lucide-react';\nimport { UniversalCard } from '../ui/UniversalCard';\nimport AnimatedCircularProgress from './components/AnimatedCircularProgress';\n\n// Universal Score Card that consolidates:\n// - EnhancedScoreCard.tsx\n// - RefinedScoreCard.tsx\n// - OptimizedScoreCard.tsx\n// - CleanCreditScoreCard.tsx\n// - CreditScoreCard.tsx\n\ninterface UniversalScoreCardProps {\n  title: string;\n  score: number;\n  subtitle: string;\n  icon: React.ReactElement;\n  color: string;\n  trend?: 'up' | 'down' | 'stable';\n  delay?: number;\n  size?: 'sm' | 'md' | 'lg';\n  variant?: 'default' | 'clean' | 'enhanced' | 'refined' | 'optimized' | 'credit';\n  interactive?: boolean;\n  liquidIntensity?: number;\n  animationsEnabled?: boolean;\n  onClick?: () => void;\n  children?: ReactNode;\n}\n\nconst UniversalScoreCard = memo(({\n  title,\n  score,\n  subtitle,\n  icon,\n  color,\n  trend,\n  delay = 0,\n  size = 'md',\n  variant = 'default',\n  interactive = true,\n  liquidIntensity = 0.6,\n  animationsEnabled = true,\n  onClick,\n  children,\n}: UniversalScoreCardProps) => {\n  const sizeConfig = {\n    sm: { \n      padding: 'p-3', \n      progressSize: 80, \n      titleSize: 'text-sm', \n      subtitleSize: 'text-xs',\n      iconPadding: 'p-1.5',\n      iconSize: 'w-3 h-3'\n    },\n    md: { \n      padding: 'p-4 md:p-6', \n      progressSize: 100, \n      titleSize: 'text-base md:text-lg', \n      subtitleSize: 'text-xs md:text-sm',\n      iconPadding: 'p-2 md:p-3',\n      iconSize: 'w-4 h-4 md:w-5 md:h-5'\n    },\n    lg: { \n      padding: 'p-6 md:p-8', \n      progressSize: 120, \n      titleSize: 'text-lg md:text-xl', \n      subtitleSize: 'text-sm md:text-base',\n      iconPadding: 'p-3 md:p-4',\n      iconSize: 'w-5 h-5 md:w-6 md:h-6'\n    }\n  };\n\n  const config = sizeConfig[size];\n\n  const getScoreDescription = (scoreValue: number) => {\n    if (scoreValue >= 80) return 'Excellent';\n    if (scoreValue >= 70) return 'Very Good';\n    if (scoreValue >= 60) return 'Good';\n    if (scoreValue >= 40) return 'Fair';\n    return 'Needs Attention';\n  };\n\n  const getScoreColor = (scoreValue: number) => {\n    if (scoreValue >= 80) return 'text-green-300';\n    if (scoreValue >= 70) return 'text-blue-300';\n    if (scoreValue >= 60) return 'text-yellow-300';\n    if (scoreValue >= 40) return 'text-orange-300';\n    return 'text-red-300';\n  };\n\n  const getVariantStyles = () => {\n    switch (variant) {\n      case 'clean':\n        return {\n          container: 'bg-white/5 backdrop-blur-sm border border-white/10',\n          header: 'border-b border-white/10 pb-3 mb-4',\n          progress: 'mb-4',\n          trend: 'bg-white/5 border border-white/10'\n        };\n      case 'enhanced':\n        return {\n          container: 'bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-xl border border-white/20 shadow-2xl',\n          header: 'mb-6',\n          progress: 'mb-6',\n          trend: 'bg-white/10 border border-white/20 shadow-lg'\n        };\n      case 'refined':\n        return {\n          container: 'bg-black/20 backdrop-blur-md border border-white/20',\n          header: 'mb-4',\n          progress: 'mb-4',\n          trend: 'bg-white/10 border border-white/20'\n        };\n      case 'optimized':\n        return {\n          container: 'bg-white/5 border border-white/10',\n          header: 'mb-3',\n          progress: 'mb-3',\n          trend: 'bg-white/5 border border-white/10'\n        };\n      case 'credit':\n        return {\n          container: 'bg-gradient-to-br from-blue-500/10 to-purple-500/10 backdrop-blur-md border border-blue-400/20',\n          header: 'border-b border-blue-400/20 pb-4 mb-4',\n          progress: 'mb-4',\n          trend: 'bg-blue-500/10 border border-blue-400/20'\n        };\n      default:\n        return {\n          container: 'bg-white/5 backdrop-blur-md border border-white/20',\n          header: 'mb-4',\n          progress: 'mb-4',\n          trend: 'bg-white/10 border border-white/20'\n        };\n    }\n  };\n\n  const variantStyles = getVariantStyles();\n\n  const TrendIcon = () => {\n    if (!trend) return null;\n    \n    const iconMap = {\n      up: <TrendingUp className=\"w-3 h-3 md:w-4 md:h-4 text-green-400\" />,\n      down: <TrendingDown className=\"w-3 h-3 md:w-4 md:h-4 text-red-400\" />,\n      stable: <Activity className=\"w-3 h-3 md:w-4 md:h-4 text-white/60\" />\n    };\n\n    return (\n      <div className={`flex items-center space-x-1 px-2 py-1 rounded-full ${variantStyles.trend}`}>\n        {iconMap[trend]}\n      </div>\n    );\n  };\n\n  return (\n    <UniversalCard \n      variant=\"glass\"\n      className={`\n        relative overflow-hidden rounded-2xl md:rounded-3xl hover:border-white/30 transition-all duration-500 group \n        ${config.padding} ${onClick ? 'cursor-pointer' : ''} ${variantStyles.container}\n      `}\n      liquid={animationsEnabled}\n      liquidIntensity={liquidIntensity}\n      liquidInteractive={interactive}\n      onClick={onClick}\n      style={animationsEnabled ? {\n        animation: `slideInScale 0.8s ease-out ${delay}ms both`\n      } : {}}\n    >\n      {/* Subtle moving gradient background */}\n      <div \n        className=\"absolute inset-0 opacity-20 transition-opacity duration-500 group-hover:opacity-30\"\n        style={{\n          background: `radial-gradient(circle at 50% 50%, ${color}40 0%, transparent 70%)`\n        }}\n      />\n      \n      <div className=\"relative z-10\">\n        {/* Header */}\n        <div className={`flex items-center justify-between ${variantStyles.header}`}>\n          <div className=\"flex items-center space-x-2 md:space-x-3\">\n            <div \n              className={`${config.iconPadding} rounded-xl md:rounded-2xl backdrop-blur-sm border border-white/20`}\n              style={{ background: `${color}20` }}\n            >\n              {React.cloneElement(icon, { \n                className: config.iconSize, \n                style: { color } \n              })}\n            </div>\n            <h3 className={`${config.titleSize} font-semibold text-white`}>\n              {title}\n            </h3>\n          </div>\n          <TrendIcon />\n        </div>\n        \n        {/* Progress Circle */}\n        <div className={`flex justify-center ${variantStyles.progress}`}>\n          <AnimatedCircularProgress \n            value={score} \n            color={color} \n            size={config.progressSize}\n            delay={animationsEnabled ? delay + 200 : 0}\n          />\n        </div>\n        \n        {/* Description */}\n        <div className=\"text-center space-y-1 md:space-y-2\">\n          <div className={`${config.titleSize} font-bold ${getScoreColor(score)}`}>\n            {getScoreDescription(score)}\n          </div>\n          <div className={`${config.subtitleSize} text-white/70`}>\n            {subtitle}\n          </div>\n        </div>\n\n        {/* Additional content */}\n        {children && (\n          <div className=\"mt-3 md:mt-4\">\n            {children}\n          </div>\n        )}\n      </div>\n    </UniversalCard>\n  );\n});\n\nUniversalScoreCard.displayName = 'UniversalScoreCard';\n\nexport { UniversalScoreCard };","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/WellnessCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/WellnessCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import ComprehensiveWellnessCard from './components/ComprehensiveWellnessCard';\n\n// Re-export for backward compatibility with legacy code that imported \"WellnessCard\" directly.\nexport default ComprehensiveWellnessCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/components/AnimatedCircularProgress.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/components/AnimatedCircularProgress.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo, useEffect, useState, useMemo, useRef } from 'react';\nimport { formatScore } from '@/shared/utils/formatters';\n\ninterface AnimatedCircularProgressProps {\n  value: number;\n  size?: number;\n  strokeWidth?: number;\n  color?: string;\n  animationDuration?: number;\n  delay?: number;\n  showLabel?: boolean;\n  label?: string;\n  maxValue?: number;\n}\n\nconst AnimatedCircularProgress = memo(({\n  value,\n  size = 120,\n  strokeWidth = 8,\n  color = '#007AFF',\n  animationDuration = 1000,\n  delay = 0,\n  showLabel = false,\n  label = 'out of 100',\n  maxValue = 100\n}: AnimatedCircularProgressProps) => {\n  const [animatedValue, setAnimatedValue] = useState(0);\n  const [isVisible, setIsVisible] = useState(false);\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  // Responsive size calculation\n  const responsiveSize = useMemo(() => {\n    if (typeof window === 'undefined') return size;\n    \n    const width = window.innerWidth;\n    if (width >= 1440) return Math.max(size, 140); // Large desktop\n    if (width >= 1024) return Math.max(size, 120); // Desktop\n    if (width >= 768) return Math.max(size, 100);  // Tablet\n    return size; // Mobile\n  }, [size]);\n\n  // Intersection Observer for better performance\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsVisible(true);\n          const timer = setTimeout(() => {\n            setAnimatedValue(value);\n          }, delay);\n          return () => clearTimeout(timer);\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    if (elementRef.current) {\n      observer.observe(elementRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, [value, delay]);\n\n  const radius = (responsiveSize - strokeWidth) / 2;\n  const circumference = radius * 2 * Math.PI;\n  const offset = circumference - (animatedValue / maxValue) * circumference;\n\n  // Validate and sanitize the value\n  const sanitizedValue = useMemo(() => {\n    if (isNaN(value) || !isFinite(value)) return 0;\n    return Math.max(0, Math.min(maxValue, value));\n  }, [value, maxValue]);\n\n  return (\n    <div \n      ref={elementRef}\n      className=\"relative flex items-center justify-center hardware-accelerated\" \n      style={{ width: responsiveSize, height: responsiveSize }}\n    >\n      <svg \n        width={responsiveSize} \n        height={responsiveSize} \n        className=\"transform -rotate-90\"\n        viewBox={`0 0 ${responsiveSize} ${responsiveSize}`}\n        role=\"img\"\n        aria-label={`Progress: ${Math.round(animatedValue)}`}\n      >\n        {/* Enhanced background circle */}\n        <circle\n          cx={responsiveSize / 2}\n          cy={responsiveSize / 2}\n          r={radius}\n          stroke=\"rgba(255, 255, 255, 0.1)\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n        />\n        \n        {/* Enhanced progress circle with better rendering */}\n        <circle\n          cx={responsiveSize / 2}\n          cy={responsiveSize / 2}\n          r={radius}\n          stroke={color}\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          strokeDasharray={circumference}\n          strokeDashoffset={isVisible ? offset : circumference}\n          strokeLinecap=\"round\"\n          style={{\n            transition: `stroke-dashoffset ${animationDuration}ms ease-out`,\n            filter: `drop-shadow(0 0 12px ${color}40)`,\n            transform: 'translateZ(0)', // Force hardware acceleration\n            willChange: 'stroke-dashoffset' // Optimize for animations\n          }}\n        />\n      </svg>\n      \n      {/* Center content with responsive sizing - removed label display */}\n      <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n        <span \n          className=\"font-bold text-white tabular-nums\"\n          style={{\n            fontSize: `${responsiveSize * 0.25}px`,\n            transition: `all ${animationDuration}ms ease-out`,\n            transitionDelay: `${delay}ms`\n          }}\n        >\n          {formatScore(animatedValue).replace('.', '.')}\n        </span>\n      </div>\n    </div>\n  );\n});\n\nAnimatedCircularProgress.displayName = 'AnimatedCircularProgress';\n\nexport default AnimatedCircularProgress; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/components/CategoryBreakdown.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/components/CategoryBreakdown.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Transaction } from '@/types/shared';\n\ninterface CategoryBreakdownProps {\n  transactions: Transaction[];\n  variant?: string;\n  interactive?: boolean;\n}\n\n// Placeholder CategoryBreakdown component for UnifiedInsightsPage\nexport const CategoryBreakdown = React.memo<CategoryBreakdownProps>(({ \n  transactions, \n  variant = 'default',\n  interactive = false \n}) => {\n  // Calculate category totals\n  const categoryTotals = transactions\n    .filter(t => t.amount < 0)\n    .reduce((acc, t) => {\n      const category = t.category.name;\n      acc[category] = (acc[category] || 0) + Math.abs(t.amount);\n      return acc;\n    }, {} as Record<string, number>);\n\n  const sortedCategories = Object.entries(categoryTotals)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 6);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"bg-white/5 rounded-lg p-6\">\n      <h3 className=\"text-lg font-semibold text-white mb-4\">Category Breakdown</h3>\n      \n      <div className=\"space-y-3\">\n        {sortedCategories.map(([category, amount]) => {\n          const percentage = Math.round((amount / Object.values(categoryTotals).reduce((a, b) => a + b, 0)) * 100);\n          \n          return (\n            <div\n              key={category}\n              className={`flex items-center justify-between p-3 bg-white/5 rounded-lg ${\n                interactive ? 'hover:bg-white/10 cursor-pointer transition-colors' : ''\n              }`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div\n                  className=\"w-3 h-3 rounded-full\"\n                  style={{ backgroundColor: '#6366f1' }}\n                />\n                <span className=\"text-white capitalize\">{category}</span>\n              </div>\n              \n              <div className=\"text-right\">\n                <div className=\"text-white font-semibold\">\n                  {formatCurrency(amount)}\n                </div>\n                <div className=\"text-xs text-white/60\">\n                  {percentage}%\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      \n      {sortedCategories.length === 0 && (\n        <div className=\"text-center py-8\">\n          <div className=\"text-white/60 mb-2\">📊 No data available</div>\n          <div className=\"text-sm text-white/40\">\n            Add some transactions to see category breakdown\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nCategoryBreakdown.displayName = 'CategoryBreakdown';\n\nexport default CategoryBreakdown;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/components/ComprehensiveEcoCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/components/ComprehensiveEcoCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Leaf, Recycle, Droplet, Zap, Car, Factory, Globe, Wind, ChevronDown, ChevronUp, TrendingUp, TrendingDown, Minus } from 'lucide-react';\n\ninterface EcoMetrics {\n  // Carbon Footprint\n  totalCO2Emissions: number;\n  transportationCO2: number;\n  energyCO2: number;\n  foodCO2: number;\n  shoppingCO2: number;\n  \n  // Energy Consumption\n  electricityUsage: number;\n  naturalGasUsage: number;\n  renewableEnergyPercentage: number;\n  solarEnergyGenerated: number;\n  \n  // Transportation\n  milesPerGallon: number;\n  electricVehicleMiles: number;\n  publicTransportUsage: number;\n  cyclingMiles: number;\n  walkingMiles: number;\n  flightMiles: number;\n  \n  // Waste Management\n  wasteGenerated: number;\n  recyclingRate: number;\n  compostingRate: number;\n  plasticWasteReduction: number;\n  \n  // Water Usage\n  waterConsumption: number;\n  waterConservationEfforts: number;\n  \n  // Sustainable Shopping\n  organicFoodPercentage: number;\n  localProductsPercentage: number;\n  sustainableBrandsPurchases: number;\n  secondHandPurchases: number;\n  \n  // Green Investments\n  ESGInvestments: number;\n  greenBonds: number;\n  renewableEnergyInvestments: number;\n  \n  // Biodiversity\n  treesPlanted: number;\n  wildlifeHabitatSupported: number;\n  \n  // Circular Economy\n  productsRepaired: number;\n  productsReused: number;\n  sharingEconomyParticipation: number;\n  \n  // Environmental Certifications\n  organicCertifiedProducts: number;\n  fairTradeCertifiedProducts: number;\n  forestStewardshipCouncilProducts: number;\n  energyStarProducts: number;\n  \n  // Air Quality\n  airQualityIndex: number;\n  indoorPlants: number;\n  \n  // Digital Carbon Footprint\n  dataUsage: number;\n  cloudStorageOptimization: number;\n  digitalDetoxHours: number;\n}\n\ninterface EcoCardProps {\n  score: number;\n  ecoMetrics: Partial<EcoMetrics>;\n  spendingCategories: {\n    sustainableFood: number;\n    renewableEnergy: number;\n    ecoTransport: number;\n    greenProducts: number;\n    carbonOffset: number;\n    conservation: number;\n  };\n  monthlyImpact: {\n    co2Saved: number;\n    treesEquivalent: number;\n    waterSaved: number;\n    energySaved: number;\n  };\n  trends: {\n    carbonFootprint: 'up' | 'down' | 'stable';\n    sustainability: 'up' | 'down' | 'stable';\n    renewable: 'up' | 'down' | 'stable';\n    waste: 'up' | 'down' | 'stable';\n  };\n}\n\nconst ComprehensiveEcoCard: React.FC<EcoCardProps> = ({\n  score,\n  ecoMetrics,\n  spendingCategories,\n  monthlyImpact,\n  trends\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [animatedScore, setAnimatedScore] = useState(0);\n  const [activeCategory, setActiveCategory] = useState<string>('overview');\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setAnimatedScore(score);\n    }, 300);\n    return () => clearTimeout(timer);\n  }, [score]);\n\n  const getScoreColor = (value: number) => {\n    if (value >= 80) return '#22c55e'; // green-500\n    if (value >= 60) return '#f59e0b'; // amber-500\n    return '#ef4444'; // red-500\n  };\n\n  const getScoreLabel = (value: number) => {\n    if (value >= 90) return 'Eco Champion';\n    if (value >= 80) return 'Very Green';\n    if (value >= 70) return 'Eco Friendly';\n    if (value >= 60) return 'Making Progress';\n    return 'Room to Grow';\n  };\n\n  const getTrendIcon = (trend: 'up' | 'down' | 'stable') => {\n    switch (trend) {\n      case 'up': return <TrendingUp className=\"w-4 h-4 text-green-400\" />;\n      case 'down': return <TrendingDown className=\"w-4 h-4 text-red-400\" />;\n      default: return <Minus className=\"w-4 h-4 text-slate-400\" />;\n    }\n  };\n\n  const ecoCategories = [\n    {\n      id: 'carbon',\n      name: 'Carbon Footprint',\n      icon: <Factory className=\"w-5 h-5\" />,\n      color: '#ef4444',\n      metrics: [\n        { key: 'totalCO2Emissions', label: 'Total CO₂ Emissions', value: ecoMetrics.totalCO2Emissions || 12.5, unit: 'tons/year', target: 8, invert: true },\n        { key: 'transportationCO2', label: 'Transportation CO₂', value: ecoMetrics.transportationCO2 || 4.2, unit: 'tons/year', target: 3, invert: true },\n        { key: 'energyCO2', label: 'Energy CO₂', value: ecoMetrics.energyCO2 || 3.8, unit: 'tons/year', target: 2.5, invert: true },\n        { key: 'foodCO2', label: 'Food CO₂', value: ecoMetrics.foodCO2 || 2.1, unit: 'tons/year', target: 1.5, invert: true },\n        { key: 'shoppingCO2', label: 'Shopping CO₂', value: ecoMetrics.shoppingCO2 || 2.4, unit: 'tons/year', target: 1, invert: true }\n      ]\n    },\n    {\n      id: 'energy',\n      name: 'Energy & Power',\n      icon: <Zap className=\"w-5 h-5\" />,\n      color: '#f59e0b',\n      metrics: [\n        { key: 'electricityUsage', label: 'Electricity Usage', value: ecoMetrics.electricityUsage || 875, unit: 'kWh/month', target: 600, invert: true },\n        { key: 'naturalGasUsage', label: 'Natural Gas', value: ecoMetrics.naturalGasUsage || 45, unit: 'therms/month', target: 30, invert: true },\n        { key: 'renewableEnergyPercentage', label: 'Renewable Energy', value: ecoMetrics.renewableEnergyPercentage || 65, unit: '%', target: 100 },\n        { key: 'solarEnergyGenerated', label: 'Solar Generated', value: ecoMetrics.solarEnergyGenerated || 320, unit: 'kWh/month', target: 500 }\n      ]\n    },\n    {\n      id: 'transport',\n      name: 'Transportation',\n      icon: <Car className=\"w-5 h-5\" />,\n      color: '#3b82f6',\n      metrics: [\n        { key: 'milesPerGallon', label: 'Vehicle Efficiency', value: ecoMetrics.milesPerGallon || 32, unit: 'MPG', target: 40 },\n        { key: 'electricVehicleMiles', label: 'EV Miles', value: ecoMetrics.electricVehicleMiles || 450, unit: 'miles/month', target: 800 },\n        { key: 'publicTransportUsage', label: 'Public Transport', value: ecoMetrics.publicTransportUsage || 120, unit: 'miles/month', target: 200 },\n        { key: 'cyclingMiles', label: 'Cycling', value: ecoMetrics.cyclingMiles || 35, unit: 'miles/month', target: 60 },\n        { key: 'walkingMiles', label: 'Walking', value: ecoMetrics.walkingMiles || 25, unit: 'miles/month', target: 40 },\n        { key: 'flightMiles', label: 'Flight Miles', value: ecoMetrics.flightMiles || 2400, unit: 'miles/year', target: 1000, invert: true }\n      ]\n    },\n    {\n      id: 'waste',\n      name: 'Waste Management',\n      icon: <Recycle className=\"w-5 h-5\" />,\n      color: '#16a34a',\n      metrics: [\n        { key: 'wasteGenerated', label: 'Waste Generated', value: ecoMetrics.wasteGenerated || 28, unit: 'lbs/week', target: 20, invert: true },\n        { key: 'recyclingRate', label: 'Recycling Rate', value: ecoMetrics.recyclingRate || 72, unit: '%', target: 90 },\n        { key: 'compostingRate', label: 'Composting Rate', value: ecoMetrics.compostingRate || 45, unit: '%', target: 70 },\n        { key: 'plasticWasteReduction', label: 'Plastic Reduction', value: ecoMetrics.plasticWasteReduction || 60, unit: '%', target: 80 }\n      ]\n    },\n    {\n      id: 'water',\n      name: 'Water Conservation',\n      icon: <Droplet className=\"w-5 h-5\" />,\n      color: '#06b6d4',\n      metrics: [\n        { key: 'waterConsumption', label: 'Water Usage', value: ecoMetrics.waterConsumption || 3200, unit: 'gallons/month', target: 2500, invert: true },\n        { key: 'waterConservationEfforts', label: 'Conservation Score', value: ecoMetrics.waterConservationEfforts || 78, unit: '%', target: 90 }\n      ]\n    },\n    {\n      id: 'shopping',\n      name: 'Sustainable Shopping',\n      icon: <Globe className=\"w-5 h-5\" />,\n      color: '#84cc16',\n      metrics: [\n        { key: 'organicFoodPercentage', label: 'Organic Food', value: ecoMetrics.organicFoodPercentage || 42, unit: '%', target: 70 },\n        { key: 'localProductsPercentage', label: 'Local Products', value: ecoMetrics.localProductsPercentage || 38, unit: '%', target: 60 },\n        { key: 'sustainableBrandsPurchases', label: 'Sustainable Brands', value: ecoMetrics.sustainableBrandsPurchases || 156, unit: 'purchases/year', target: 200 },\n        { key: 'secondHandPurchases', label: 'Second-hand Items', value: ecoMetrics.secondHandPurchases || 24, unit: 'items/year', target: 40 }\n      ]\n    },\n    {\n      id: 'investment',\n      name: 'Green Investments',\n      icon: <TrendingUp className=\"w-5 h-5\" />,\n      color: '#10b981',\n      metrics: [\n        { key: 'ESGInvestments', label: 'ESG Investments', value: ecoMetrics.ESGInvestments || 12500, unit: '$', target: 20000 },\n        { key: 'greenBonds', label: 'Green Bonds', value: ecoMetrics.greenBonds || 3200, unit: '$', target: 5000 },\n        { key: 'renewableEnergyInvestments', label: 'Renewable Energy', value: ecoMetrics.renewableEnergyInvestments || 1800, unit: '$', target: 3000 }\n      ]\n    },\n    {\n      id: 'biodiversity',\n      name: 'Biodiversity',\n      icon: <Leaf className=\"w-5 h-5\" />,\n      color: '#22c55e',\n      metrics: [\n        { key: 'treesPlanted', label: 'Trees Planted', value: ecoMetrics.treesPlanted || 8, unit: 'trees/year', target: 12 },\n        { key: 'wildlifeHabitatSupported', label: 'Habitat Supported', value: ecoMetrics.wildlifeHabitatSupported || 125, unit: 'sq ft', target: 200 }\n      ]\n    },\n    {\n      id: 'circular',\n      name: 'Circular Economy',\n      icon: <Recycle className=\"w-5 h-5\" />,\n      color: '#8b5cf6',\n      metrics: [\n        { key: 'productsRepaired', label: 'Products Repaired', value: ecoMetrics.productsRepaired || 6, unit: 'items/year', target: 10 },\n        { key: 'productsReused', label: 'Products Reused', value: ecoMetrics.productsReused || 18, unit: 'items/year', target: 25 },\n        { key: 'sharingEconomyParticipation', label: 'Sharing Economy', value: ecoMetrics.sharingEconomyParticipation || 34, unit: 'uses/year', target: 50 }\n      ]\n    },\n    {\n      id: 'certification',\n      name: 'Certifications',\n      icon: <Globe className=\"w-5 h-5\" />,\n      color: '#059669',\n      metrics: [\n        { key: 'organicCertifiedProducts', label: 'Organic Certified', value: ecoMetrics.organicCertifiedProducts || 45, unit: '%', target: 70 },\n        { key: 'fairTradeCertifiedProducts', label: 'Fair Trade', value: ecoMetrics.fairTradeCertifiedProducts || 32, unit: '%', target: 50 },\n        { key: 'forestStewardshipCouncilProducts', label: 'FSC Certified', value: ecoMetrics.forestStewardshipCouncilProducts || 28, unit: '%', target: 60 },\n        { key: 'energyStarProducts', label: 'Energy Star', value: ecoMetrics.energyStarProducts || 78, unit: '%', target: 90 }\n      ]\n    },\n    {\n      id: 'air',\n      name: 'Air Quality',\n      icon: <Wind className=\"w-5 h-5\" />,\n      color: '#0ea5e9',\n      metrics: [\n        { key: 'airQualityIndex', label: 'Local Air Quality', value: ecoMetrics.airQualityIndex || 42, unit: 'AQI', target: 30, invert: true },\n        { key: 'indoorPlants', label: 'Indoor Plants', value: ecoMetrics.indoorPlants || 12, unit: 'plants', target: 20 }\n      ]\n    },\n    {\n      id: 'digital',\n      name: 'Digital Footprint',\n      icon: <Globe className=\"w-5 h-5\" />,\n      color: '#6366f1',\n      metrics: [\n        { key: 'dataUsage', label: 'Data Usage', value: ecoMetrics.dataUsage || 85, unit: 'GB/month', target: 60, invert: true },\n        { key: 'cloudStorageOptimization', label: 'Cloud Optimization', value: ecoMetrics.cloudStorageOptimization || 67, unit: '%', target: 85 },\n        { key: 'digitalDetoxHours', label: 'Digital Detox', value: ecoMetrics.digitalDetoxHours || 14, unit: 'hours/week', target: 20 }\n      ]\n    }\n  ];\n\n  const getProgress = (value: number, target: number, invert: boolean = false) => {\n    if (invert) {\n      return Math.max(0, Math.min(100, ((target - value) / target) * 100));\n    }\n    return Math.min(100, (value / target) * 100);\n  };\n\n  const circumference = 2 * Math.PI * 40;\n  const strokeDasharray = circumference;\n  const strokeDashoffset = circumference - (animatedScore / 100) * circumference;\n\n  if (!isExpanded) {\n    return (\n      <div \n        className=\"liquid-glass-card p-6 cursor-pointer transition-all duration-300 hover:scale-105 score-card-container\"\n        onClick={() => setIsExpanded(true)}\n      >\n        <div className=\"score-card-content\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"icon-text-row\">\n              <div className=\"icon\">\n                <Leaf className=\"w-6 h-6 text-green-400\" />\n              </div>\n              <h3 className=\"text collapsed-card-title text-white\">Eco Impact</h3>\n            </div>\n            <ChevronDown className=\"w-5 h-5 text-slate-400\" />\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"relative inline-block mb-4\">\n              <svg width=\"100\" height=\"100\" className=\"transform -rotate-90\">\n                <circle\n                  cx=\"50\"\n                  cy=\"50\"\n                  r=\"40\"\n                  stroke=\"rgba(255, 255, 255, 0.1)\"\n                  strokeWidth=\"6\"\n                  fill=\"none\"\n                />\n                <circle\n                  cx=\"50\"\n                  cy=\"50\"\n                  r=\"40\"\n                  stroke={getScoreColor(score)}\n                  strokeWidth=\"6\"\n                  fill=\"none\"\n                  strokeDasharray={strokeDasharray}\n                  strokeDashoffset={strokeDashoffset}\n                  strokeLinecap=\"round\"\n                  className=\"transition-all duration-1000 ease-out\"\n                />\n              </svg>\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <span className=\"text-2xl font-bold text-white\">{Math.round(animatedScore)}</span>\n              </div>\n            </div>\n\n            <div className=\"text-lg font-semibold text-white mb-2\">\n              {getScoreLabel(score)}\n            </div>\n            <p className=\"text-slate-400 text-sm mb-4\">\n              Environmental responsibility\n            </p>\n\n            <div className=\"text-xs text-slate-500\">\n              Click to view detailed eco metrics\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"liquid-glass-card p-6 equal-height-cards\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"icon-text-row\">\n          <div className=\"icon\">\n            <Leaf className=\"w-6 h-6 text-green-400\" />\n          </div>\n          <h3 className=\"text expanded-card-title text-white\">Comprehensive Eco Impact</h3>\n        </div>\n        <button\n          onClick={() => setIsExpanded(false)}\n          className=\"p-2 rounded-lg bg-slate-800/50 hover:bg-slate-700/50 transition-colors\"\n        >\n          <ChevronUp className=\"w-5 h-5 text-slate-400\" />\n        </button>\n      </div>\n\n      {/* Category Navigation */}\n      <div className=\"category-grid category-button-grid mb-6\">\n        <button\n          onClick={() => setActiveCategory('overview')}\n          className={`category-nav-button p-3 rounded-lg text-xs font-medium transition-all ${\n            activeCategory === 'overview'\n              ? 'bg-green-500/20 text-green-300 border border-green-500/30'\n              : 'bg-slate-800/30 text-slate-400 hover:bg-slate-700/30'\n          }`}\n        >\n          <div className=\"icon-wrapper\">\n            Overview\n          </div>\n        </button>\n        {ecoCategories.map((category) => (\n          <button\n            key={category.id}\n            onClick={() => setActiveCategory(category.id)}\n            className={`category-nav-button p-3 rounded-lg text-xs font-medium transition-all ${\n              activeCategory === category.id\n                ? 'bg-green-500/20 text-green-300 border border-green-500/30'\n                : 'bg-slate-800/30 text-slate-400 hover:bg-slate-700/30'\n            }`}\n            style={{\n              backgroundColor: activeCategory === category.id ? `${category.color}20` : undefined,\n              borderColor: activeCategory === category.id ? `${category.color}50` : undefined,\n              color: activeCategory === category.id ? category.color : undefined\n            }}\n          >\n            <div className=\"icon-wrapper\">\n              {category.icon}\n            </div>\n            <div className=\"text-wrapper\">\n              {category.name}\n            </div>\n          </button>\n        ))}\n      </div>\n\n      {/* Content Area */}\n      {activeCategory === 'overview' && (\n        <div className=\"space-y-6\">\n          {/* Overall Score */}\n          <div className=\"text-center\">\n            <div className=\"relative inline-block mb-4\">\n              <svg width=\"120\" height=\"120\" className=\"transform -rotate-90\">\n                <circle\n                  cx=\"60\"\n                  cy=\"60\"\n                  r=\"40\"\n                  stroke=\"rgba(255, 255, 255, 0.1)\"\n                  strokeWidth=\"8\"\n                  fill=\"none\"\n                />\n                <circle\n                  cx=\"60\"\n                  cy=\"60\"\n                  r=\"40\"\n                  stroke={getScoreColor(score)}\n                  strokeWidth=\"8\"\n                  fill=\"none\"\n                  strokeDasharray={strokeDasharray}\n                  strokeDashoffset={strokeDashoffset}\n                  strokeLinecap=\"round\"\n                  className=\"transition-all duration-1000 ease-out\"\n                />\n              </svg>\n              <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n                <span className=\"text-3xl font-bold text-white\">{Math.round(animatedScore)}</span>\n              </div>\n            </div>\n            <div className=\"text-xl font-semibold text-white mb-2\">\n              {getScoreLabel(score)}\n            </div>\n          </div>\n\n          {/* Monthly Impact */}\n          <div className=\"bg-slate-800/30 p-4 rounded-lg\">\n            <h4 className=\"text-lg font-semibold text-white mb-4\">Monthly Environmental Impact</h4>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-400\">{monthlyImpact.co2Saved}kg</div>\n                <div className=\"text-sm text-slate-400\">CO₂ Saved</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-400\">{monthlyImpact.treesEquivalent}</div>\n                <div className=\"text-sm text-slate-400\">Trees Equivalent</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-400\">{monthlyImpact.waterSaved}L</div>\n                <div className=\"text-sm text-slate-400\">Water Saved</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-yellow-400\">{monthlyImpact.energySaved}kWh</div>\n                <div className=\"text-sm text-slate-400\">Energy Saved</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Eco Spending */}\n          <div>\n            <h4 className=\"text-lg font-semibold text-white mb-4\">Eco Spending This Month</h4>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n              {Object.entries(spendingCategories).map(([key, value]) => (\n                <div key={key} className=\"bg-slate-800/30 p-4 rounded-lg\">\n                  <div className=\"text-sm text-slate-400 capitalize mb-1\">\n                    {key.replace(/([A-Z])/g, ' $1')}\n                  </div>\n                  <div className=\"text-xl font-bold text-white\">${value}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Trends */}\n          <div>\n            <h4 className=\"text-lg font-semibold text-white mb-4\">Environmental Trends</h4>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {Object.entries(trends).map(([key, trend]) => (\n                <div key={key} className=\"flex items-center space-x-2\">\n                  {getTrendIcon(trend)}\n                  <span className=\"text-sm text-slate-300 capitalize\">\n                    {key.replace(/([A-Z])/g, ' $1')}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Category Details */}\n      {activeCategory !== 'overview' && (\n        <div className=\"space-y-4\">\n          {(() => {\n            const category = ecoCategories.find(cat => cat.id === activeCategory);\n            if (!category) return null;\n\n            return (\n              <>\n                <div className=\"flex items-center space-x-3 mb-6\">\n                  <div style={{ color: category.color }}>\n                    {category.icon}\n                  </div>\n                  <h4 className=\"text-xl font-semibold text-white\">{category.name}</h4>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {category.metrics.map((metric) => (\n                    <div key={metric.key} className=\"bg-slate-800/30 p-4 rounded-lg\">\n                      <div className=\"flex justify-between items-start mb-3\">\n                        <div>\n                          <div className=\"text-sm text-slate-400\">{metric.label}</div>\n                          <div className=\"text-lg font-bold text-white\">\n                            {typeof metric.value === 'number' ? metric.value.toLocaleString() : metric.value} {metric.unit}\n                          </div>\n                        </div>\n                        <div className=\"text-xs text-slate-500 text-right\">\n                          Target: {typeof metric.target === 'number' ? metric.target.toLocaleString() : metric.target} {metric.unit}\n                          {metric.invert && <div className=\"text-orange-400\">(Lower is better)</div>}\n                        </div>\n                      </div>\n                      \n                      {typeof metric.value === 'number' && typeof metric.target === 'number' && (\n                        <div className=\"w-full bg-slate-700/30 rounded-full h-2\">\n                          <div \n                            className=\"h-2 rounded-full transition-all duration-1000\"\n                            style={{\n                              width: `${Math.min(100, getProgress(metric.value, metric.target, metric.invert))}%`,\n                              backgroundColor: category.color\n                            }}\n                          />\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </>\n            );\n          })()}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ComprehensiveEcoCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/components/ComprehensiveWellnessCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/components/ComprehensiveWellnessCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\nimport { Heart, Activity, Moon, Utensils, Brain, Ear, Accessibility, Users, Droplet, Wind, ChevronDown, ChevronUp, TrendingUp, TrendingDown, Minus } from 'lucide-react';\n\ninterface HealthKitMetrics {\n  // Physical Activity\n  activeEnergyBurned: number;\n  basalEnergyBurned: number;\n  stepCount: number;\n  distanceWalkingRunning: number;\n  flightsClimbed: number;\n  exerciseTime: number;\n  \n  // Body Measurements\n  bodyMass: number;\n  height: number;\n  bmi: number;\n  bodyFatPercentage: number;\n  leanBodyMass: number;\n  waistCircumference: number;\n  \n  // Vital Signs\n  heartRate: number;\n  bloodPressureSystolic: number;\n  bloodPressureDiastolic: number;\n  respiratoryRate: number;\n  bodyTemperature: number;\n  oxygenSaturation: number;\n  \n  // Nutrition\n  dietaryWater: number;\n  dietaryFiber: number;\n  dietaryCalories: number;\n  dietaryProtein: number;\n  dietaryCarbohydrates: number;\n  dietaryFat: number;\n  dietarySugar: number;\n  dietarySodium: number;\n  \n  // Sleep\n  sleepAnalysis: number;\n  timeInBed: number;\n  sleepEfficiency: number;\n  \n  // Mindfulness\n  mindfulMinutes: number;\n  stressLevel: number;\n  \n  // Reproductive Health\n  menstrualFlow: number;\n  ovulationTestResult: number;\n  \n  // Lab Results\n  bloodGlucose: number;\n  cholesterolTotal: number;\n  cholesterolLDL: number;\n  cholesterolHDL: number;\n  \n  // Hearing\n  audioExposure: number;\n  environmentalAudioExposure: number;\n  headphoneAudioExposure: number;\n  \n  // Vision\n  \n  // Mobility\n  walkingAsymmetry: number;\n  walkingDoubleSupportPercentage: number;\n  sixMinuteWalkTestDistance: number;\n  stairAscentSpeed: number;\n  stairDescentSpeed: number;\n  walkingSpeed: number;\n  \n  // Wheelchair Use\n  wheelchairUse: number;\n  \n  // Respiratory\n  peakExpiratoryFlowRate: number;\n  forcedExpiratoryVolume1: number;\n  \n  // Symptoms\n  symptomDiarrhea: number;\n  symptomNausea: number;\n  symptomHeadache: number;\n  symptomFever: number;\n  \n  // Other\n  uvExposure: number;\n  electrodermalActivity: number;\n  toothbrushingEvent: number;\n  handwashingEvent: number;\n}\n\ninterface WellnessCardProps {\n  score: number;\n  healthKitData: Partial<HealthKitMetrics>;\n  spendingCategories: {\n    fitness: number;\n    nutrition: number;\n    healthcare: number;\n    wellness: number;\n    supplements: number;\n    mentalHealth: number;\n  };\n  trends: {\n    exercise: 'up' | 'down' | 'stable';\n    nutrition: 'up' | 'down' | 'stable';\n    sleep: 'up' | 'down' | 'stable';\n    stress: 'up' | 'down' | 'stable';\n  };\n}\n\nconst ComprehensiveWellnessCard: React.FC<WellnessCardProps> = ({\n  score,\n  healthKitData,\n  spendingCategories,\n  trends\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [animatedScore, setAnimatedScore] = useState(0);\n  const [activeCategory, setActiveCategory] = useState<string>('overview');\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setAnimatedScore(score);\n    }, 300);\n    return () => clearTimeout(timer);\n  }, [score]);\n\n  const getScoreColor = (value: number) => {\n    if (value >= 80) return '#22c55e'; // green-500\n    if (value >= 60) return '#f59e0b'; // amber-500\n    return '#ef4444'; // red-500\n  };\n\n  const getScoreLabel = (value: number) => {\n    if (value >= 90) return 'Excellent';\n    if (value >= 80) return 'Very Good';\n    if (value >= 70) return 'Good';\n    if (value >= 60) return 'Fair';\n    return 'Needs Attention';\n  };\n\n  const getTrendIcon = (trend: 'up' | 'down' | 'stable') => {\n    switch (trend) {\n      case 'up': return <TrendingUp className=\"w-4 h-4 text-green-400\" />;\n      case 'down': return <TrendingDown className=\"w-4 h-4 text-red-400\" />;\n      default: return <Minus className=\"w-4 h-4 text-slate-400\" />;\n    }\n  };\n\n  const healthCategories = [\n    {\n      id: 'activity',\n      name: 'Physical Activity',\n      icon: <Activity className=\"w-5 h-5\" />,\n      color: '#ef4444',\n      metrics: [\n        { key: 'stepCount', label: 'Steps', value: healthKitData.stepCount || 8542, unit: 'steps', target: 10000 },\n        { key: 'activeEnergyBurned', label: 'Active Calories', value: healthKitData.activeEnergyBurned || 387, unit: 'cal', target: 500 },\n        { key: 'exerciseTime', label: 'Exercise Time', value: healthKitData.exerciseTime || 45, unit: 'min', target: 60 },\n        { key: 'distanceWalkingRunning', label: 'Distance', value: healthKitData.distanceWalkingRunning || 6.2, unit: 'km', target: 8 },\n        { key: 'flightsClimbed', label: 'Flights Climbed', value: healthKitData.flightsClimbed || 12, unit: 'flights', target: 15 }\n      ]\n    },\n    {\n      id: 'vitals',\n      name: 'Vital Signs',\n      icon: <Heart className=\"w-5 h-5\" />,\n      color: '#dc2626',\n      metrics: [\n        { key: 'heartRate', label: 'Heart Rate', value: healthKitData.heartRate || 72, unit: 'bpm', target: 70 },\n        { key: 'bloodPressureSystolic', label: 'Blood Pressure', value: `${healthKitData.bloodPressureSystolic || 120}/${healthKitData.bloodPressureDiastolic || 80}`, unit: 'mmHg', target: '120/80' },\n        { key: 'respiratoryRate', label: 'Respiratory Rate', value: healthKitData.respiratoryRate || 16, unit: '/min', target: 16 },\n        { key: 'bodyTemperature', label: 'Body Temperature', value: healthKitData.bodyTemperature || 98.6, unit: '°F', target: 98.6 },\n        { key: 'oxygenSaturation', label: 'Oxygen Saturation', value: healthKitData.oxygenSaturation || 98, unit: '%', target: 98 }\n      ]\n    },\n    {\n      id: 'body',\n      name: 'Body Measurements',\n      icon: <Users className=\"w-5 h-5\" />,\n      color: '#7c3aed',\n      metrics: [\n        { key: 'bodyMass', label: 'Weight', value: healthKitData.bodyMass || 165, unit: 'lbs', target: 160 },\n        { key: 'height', label: 'Height', value: healthKitData.height || 70, unit: 'inches', target: 70 },\n        { key: 'bmi', label: 'BMI', value: healthKitData.bmi || 23.6, unit: '', target: 22 },\n        { key: 'bodyFatPercentage', label: 'Body Fat', value: healthKitData.bodyFatPercentage || 18, unit: '%', target: 15 },\n        { key: 'waistCircumference', label: 'Waist', value: healthKitData.waistCircumference || 32, unit: 'inches', target: 30 }\n      ]\n    },\n    {\n      id: 'nutrition',\n      name: 'Nutrition',\n      icon: <Utensils className=\"w-5 h-5\" />,\n      color: '#16a34a',\n      metrics: [\n        { key: 'dietaryCalories', label: 'Calories', value: healthKitData.dietaryCalories || 2150, unit: 'cal', target: 2000 },\n        { key: 'dietaryProtein', label: 'Protein', value: healthKitData.dietaryProtein || 85, unit: 'g', target: 100 },\n        { key: 'dietaryCarbohydrates', label: 'Carbs', value: healthKitData.dietaryCarbohydrates || 250, unit: 'g', target: 225 },\n        { key: 'dietaryFat', label: 'Fat', value: healthKitData.dietaryFat || 75, unit: 'g', target: 65 },\n        { key: 'dietaryFiber', label: 'Fiber', value: healthKitData.dietaryFiber || 22, unit: 'g', target: 25 },\n        { key: 'dietaryWater', label: 'Water', value: healthKitData.dietaryWater || 2.1, unit: 'L', target: 2.5 },\n        { key: 'dietarySugar', label: 'Sugar', value: healthKitData.dietarySugar || 45, unit: 'g', target: 25 },\n        { key: 'dietarySodium', label: 'Sodium', value: healthKitData.dietarySodium || 2100, unit: 'mg', target: 2300 }\n      ]\n    },\n    {\n      id: 'sleep',\n      name: 'Sleep Analysis',\n      icon: <Moon className=\"w-5 h-5\" />,\n      color: '#3b82f6',\n      metrics: [\n        { key: 'sleepAnalysis', label: 'Sleep Duration', value: healthKitData.sleepAnalysis || 7.5, unit: 'hours', target: 8 },\n        { key: 'timeInBed', label: 'Time in Bed', value: healthKitData.timeInBed || 8.2, unit: 'hours', target: 8.5 },\n        { key: 'sleepEfficiency', label: 'Sleep Efficiency', value: healthKitData.sleepEfficiency || 89, unit: '%', target: 85 }\n      ]\n    },\n    {\n      id: 'mindfulness',\n      name: 'Mental Health',\n      icon: <Brain className=\"w-5 h-5\" />,\n      color: '#8b5cf6',\n      metrics: [\n        { key: 'mindfulMinutes', label: 'Mindful Minutes', value: healthKitData.mindfulMinutes || 15, unit: 'min', target: 20 },\n        { key: 'stressLevel', label: 'Stress Level', value: healthKitData.stressLevel || 3, unit: '/10', target: 2 }\n      ]\n    },\n    {\n      id: 'hearing',\n      name: 'Hearing Health',\n      icon: <Ear className=\"w-5 h-5\" />,\n      color: '#f59e0b',\n      metrics: [\n        { key: 'audioExposure', label: 'Audio Exposure', value: healthKitData.audioExposure || 75, unit: 'dB', target: 70 },\n        { key: 'headphoneAudioExposure', label: 'Headphone Exposure', value: healthKitData.headphoneAudioExposure || 68, unit: 'dB', target: 60 }\n      ]\n    },\n    {\n      id: 'mobility',\n      name: 'Mobility',\n      icon: <Accessibility className=\"w-5 h-5\" />,\n      color: '#06b6d4',\n      metrics: [\n        { key: 'walkingSpeed', label: 'Walking Speed', value: healthKitData.walkingSpeed || 1.2, unit: 'm/s', target: 1.3 },\n        { key: 'walkingAsymmetry', label: 'Walking Asymmetry', value: healthKitData.walkingAsymmetry || 2.1, unit: '%', target: 2.0 },\n        { key: 'sixMinuteWalkTestDistance', label: '6-Min Walk Test', value: healthKitData.sixMinuteWalkTestDistance || 550, unit: 'm', target: 600 },\n        { key: 'stairAscentSpeed', label: 'Stair Ascent Speed', value: healthKitData.stairAscentSpeed || 0.8, unit: 'm/s', target: 1.0 }\n      ]\n    },\n    {\n      id: 'respiratory',\n      name: 'Respiratory Health',\n      icon: <Wind className=\"w-5 h-5\" />,\n      color: '#84cc16',\n      metrics: [\n        { key: 'peakExpiratoryFlowRate', label: 'Peak Flow Rate', value: healthKitData.peakExpiratoryFlowRate || 420, unit: 'L/min', target: 450 },\n        { key: 'forcedExpiratoryVolume1', label: 'FEV1', value: healthKitData.forcedExpiratoryVolume1 || 3.2, unit: 'L', target: 3.5 }\n      ]\n    },\n    {\n      id: 'reproductive',\n      name: 'Reproductive Health',\n      icon: <Heart className=\"w-5 h-5\" />,\n      color: '#ec4899',\n      metrics: [\n        { key: 'menstrualFlow', label: 'Menstrual Flow', value: healthKitData.menstrualFlow || 2, unit: '/5', target: 2 },\n        { key: 'ovulationTestResult', label: 'Ovulation Test', value: healthKitData.ovulationTestResult || 1, unit: '', target: 1 }\n      ]\n    },\n    {\n      id: 'lab',\n      name: 'Lab Results',\n      icon: <Droplet className=\"w-5 h-5\" />,\n      color: '#ef4444',\n      metrics: [\n        { key: 'bloodGlucose', label: 'Blood Glucose', value: healthKitData.bloodGlucose || 95, unit: 'mg/dL', target: 100 },\n        { key: 'cholesterolTotal', label: 'Total Cholesterol', value: healthKitData.cholesterolTotal || 180, unit: 'mg/dL', target: 200 },\n        { key: 'cholesterolLDL', label: 'LDL Cholesterol', value: healthKitData.cholesterolLDL || 110, unit: 'mg/dL', target: 100 },\n        { key: 'cholesterolHDL', label: 'HDL Cholesterol', value: healthKitData.cholesterolHDL || 55, unit: 'mg/dL', target: 60 }\n      ]\n    }\n  ];\n\n  const getProgress = (value: number, target: number) => {\n    return Math.min(100, (value / target) * 100);\n  };\n\n  const circumference = 2 * Math.PI * 40;\n  const strokeDasharray = circumference;\n  const strokeDashoffset = circumference - (animatedScore / 100) * circumference;\n\n  if (!isExpanded) {\n    return (\n      <div \n        className=\"liquid-glass-card p-6 cursor-pointer transition-all duration-300 hover:scale-105 score-card-container\"\n        onClick={() => setIsExpanded(true)}\n      >\n        <div className=\"score-card-content\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"icon-text-row\">\n              <div className=\"icon\">\n                <Heart className=\"w-6 h-6 text-green-400\" />\n              </div>\n              <h3 className=\"text collapsed-card-title text-white\">Wellness Score</h3>\n            </div>\n            <ChevronDown className=\"w-5 h-5 text-slate-400\" />\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"relative inline-block mb-4\">\n              <svg width=\"100\" height=\"100\" className=\"transform -rotate-90\">\n                <circle\n                  cx=\"50\"\n                  cy=\"50\"\n                  r=\"40\"\n                  stroke=\"rgba(255, 255, 255, 0.1)\"\n                  strokeWidth=\"6\"\n                  fill=\"none\"\n                />\n                <circle\n                  cx=\"50\"\n                  cy=\"50\"\n                  r=\"40\"\n                  stroke={getScoreColor(score)}\n                  strokeWidth=\"6\"\n                  fill=\"none\"\n                  strokeDasharray={strokeDasharray}\n                  strokeDashoffset={strokeDashoffset}\n                  strokeLinecap=\"round\"\n                  className=\"transition-all duration-1000 ease-out\"\n                />\n              </svg>\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <span className=\"text-2xl font-bold text-white\">{Math.round(animatedScore)}</span>\n              </div>\n            </div>\n\n            <div className=\"text-lg font-semibold text-white mb-2\">\n              {getScoreLabel(score)}\n            </div>\n            <p className=\"text-slate-400 text-sm mb-4\">\n              Health-conscious spending habits\n            </p>\n\n            <div className=\"text-xs text-slate-500\">\n              Click to view detailed health metrics\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"liquid-glass-card p-6 equal-height-cards\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"icon-text-row\">\n          <div className=\"icon\">\n            <Heart className=\"w-6 h-6 text-green-400\" />\n          </div>\n          <h3 className=\"text expanded-card-title text-white\">Comprehensive Wellness</h3>\n        </div>\n        <button\n          onClick={() => setIsExpanded(false)}\n          className=\"p-2 rounded-lg bg-slate-800/50 hover:bg-slate-700/50 transition-colors\"\n        >\n          <ChevronUp className=\"w-5 h-5 text-slate-400\" />\n        </button>\n      </div>\n\n      {/* Category Navigation */}\n      <div className=\"category-grid category-button-grid mb-6\">\n        <button\n          onClick={() => setActiveCategory('overview')}\n          className={`category-nav-button p-3 rounded-lg text-xs font-medium transition-all ${\n            activeCategory === 'overview'\n              ? 'bg-indigo-500/20 text-indigo-300 border border-indigo-500/30'\n              : 'bg-slate-800/30 text-slate-400 hover:bg-slate-700/30'\n          }`}\n        >\n          <div className=\"icon-wrapper\">\n            Overview\n          </div>\n        </button>\n        {healthCategories.map((category) => (\n          <button\n            key={category.id}\n            onClick={() => setActiveCategory(category.id)}\n            className={`category-nav-button p-3 rounded-lg text-xs font-medium transition-all ${\n              activeCategory === category.id\n                ? 'bg-indigo-500/20 text-indigo-300 border border-indigo-500/30'\n                : 'bg-slate-800/30 text-slate-400 hover:bg-slate-700/30'\n            }`}\n            style={{\n              backgroundColor: activeCategory === category.id ? `${category.color}20` : undefined,\n              borderColor: activeCategory === category.id ? `${category.color}50` : undefined,\n              color: activeCategory === category.id ? category.color : undefined\n            }}\n          >\n            <div className=\"icon-wrapper\">\n              {category.icon}\n            </div>\n            <div className=\"text-wrapper\">\n              {category.name}\n            </div>\n          </button>\n        ))}\n      </div>\n\n      {/* Content Area */}\n      {activeCategory === 'overview' && (\n        <div className=\"space-y-6\">\n          {/* Overall Score */}\n          <div className=\"text-center\">\n            <div className=\"relative inline-block mb-4\">\n              <svg width=\"120\" height=\"120\" className=\"transform -rotate-90\">\n                <circle\n                  cx=\"60\"\n                  cy=\"60\"\n                  r=\"40\"\n                  stroke=\"rgba(255, 255, 255, 0.1)\"\n                  strokeWidth=\"8\"\n                  fill=\"none\"\n                />\n                <circle\n                  cx=\"60\"\n                  cy=\"60\"\n                  r=\"40\"\n                  stroke={getScoreColor(score)}\n                  strokeWidth=\"8\"\n                  fill=\"none\"\n                  strokeDasharray={strokeDasharray}\n                  strokeDashoffset={strokeDashoffset}\n                  strokeLinecap=\"round\"\n                  className=\"transition-all duration-1000 ease-out\"\n                />\n              </svg>\n              <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n                <span className=\"text-3xl font-bold text-white\">{Math.round(animatedScore)}</span>\n              </div>\n            </div>\n            <div className=\"text-xl font-semibold text-white mb-2\">\n              {getScoreLabel(score)}\n            </div>\n          </div>\n\n          {/* Spending Categories */}\n          <div>\n            <h4 className=\"text-lg font-semibold text-white mb-4\">Health Spending This Month</h4>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n              {Object.entries(spendingCategories).map(([key, value]) => (\n                <div key={key} className=\"bg-slate-800/30 p-4 rounded-lg\">\n                  <div className=\"text-sm text-slate-400 capitalize mb-1\">{key.replace(/([A-Z])/g, ' $1')}</div>\n                  <div className=\"text-xl font-bold text-white\">${value}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Trends */}\n          <div>\n            <h4 className=\"text-lg font-semibold text-white mb-4\">Health Trends</h4>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {Object.entries(trends).map(([key, trend]) => (\n                <div key={key} className=\"flex items-center space-x-2\">\n                  {getTrendIcon(trend)}\n                  <span className=\"text-sm text-slate-300 capitalize\">{key}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Category Details */}\n      {activeCategory !== 'overview' && (\n        <div className=\"space-y-4\">\n          {(() => {\n            const category = healthCategories.find(cat => cat.id === activeCategory);\n            if (!category) return null;\n\n            return (\n              <>\n                <div className=\"flex items-center space-x-3 mb-6\">\n                  <div style={{ color: category.color }}>\n                    {category.icon}\n                  </div>\n                  <h4 className=\"text-xl font-semibold text-white\">{category.name}</h4>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {category.metrics.map((metric) => (\n                    <div key={metric.key} className=\"bg-slate-800/30 p-4 rounded-lg\">\n                      <div className=\"flex justify-between items-start mb-3\">\n                        <div>\n                          <div className=\"text-sm text-slate-400\">{metric.label}</div>\n                          <div className=\"text-lg font-bold text-white\">\n                            {typeof metric.value === 'number' ? metric.value.toLocaleString() : metric.value} {metric.unit}\n                          </div>\n                        </div>\n                        <div className=\"text-xs text-slate-500\">\n                          Target: {typeof metric.target === 'number' ? metric.target.toLocaleString() : metric.target} {metric.unit}\n                        </div>\n                      </div>\n                      \n                      {typeof metric.value === 'number' && typeof metric.target === 'number' && (\n                        <div className=\"w-full bg-slate-700/30 rounded-full h-2\">\n                          <div \n                            className=\"h-2 rounded-full transition-all duration-1000\"\n                            style={{\n                              width: `${Math.min(100, getProgress(metric.value, metric.target))}%`,\n                              backgroundColor: category.color\n                            }}\n                          />\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </>\n            );\n          })()}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ComprehensiveWellnessCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/components/EnhancedMetricCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/components/EnhancedMetricCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo } from 'react';\nimport { ChevronRight } from 'lucide-react';\nimport EnhancedGlassCard from '@/shared/ui/EnhancedGlassCard';\n\ninterface EnhancedMetricCardProps {\n  title: string;\n  value: string;\n  subtitle: string;\n  progress?: number;\n  color: string;\n  icon: React.ReactElement;\n  delay?: number;\n  size?: 'sm' | 'md' | 'lg';\n  interactive?: boolean;\n  liquidIntensity?: number;\n  onClick?: () => void;\n}\n\nconst EnhancedMetricCard = memo(({\n  title,\n  value,\n  subtitle,\n  progress,\n  color,\n  icon,\n  delay = 0,\n  size = 'md',\n  interactive = true,\n  liquidIntensity = 0.3,\n  onClick\n}: EnhancedMetricCardProps) => {\n  const sizeConfig = {\n    sm: { \n      padding: 'p-3', \n      titleSize: 'text-xs', \n      valueSize: 'text-lg',\n      subtitleSize: 'text-xs',\n      iconPadding: 'p-1.5',\n      iconSize: 'w-3 h-3'\n    },\n    md: { \n      padding: 'p-4', \n      titleSize: 'text-sm', \n      valueSize: 'text-2xl',\n      subtitleSize: 'text-xs',\n      iconPadding: 'p-2',\n      iconSize: 'w-4 h-4'\n    },\n    lg: { \n      padding: 'p-6', \n      titleSize: 'text-base', \n      valueSize: 'text-3xl',\n      subtitleSize: 'text-sm',\n      iconPadding: 'p-3',\n      iconSize: 'w-5 h-5'\n    }\n  };\n\n  const config = sizeConfig[size];\n\n  return (\n    <EnhancedGlassCard \n      className={`\n        relative overflow-hidden rounded-2xl backdrop-blur-xl border border-white/20 \n        hover:border-white/30 transition-all duration-300 group \n        ${onClick ? 'cursor-pointer' : ''} ${config.padding}\n      `}\n      liquid={true}\n      liquidIntensity={liquidIntensity}\n      liquidDistortion={0.2}\n      liquidAnimated={false}\n      liquidInteractive={interactive}\n      onClick={onClick}\n      style={{\n        animation: `slideInScale 0.6s ease-out ${delay}ms both`\n      }}\n    >\n      <div className=\"relative z-10\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <div \n              className={`${config.iconPadding} rounded-xl backdrop-blur-sm border border-white/20`}\n              style={{ background: `${color}15` }}\n            >\n              {React.cloneElement(icon, { \n                className: config.iconSize, \n                style: { color } \n              })}\n            </div>\n            <span className={`${config.titleSize} font-medium text-white/90`}>\n              {title}\n            </span>\n          </div>\n          {onClick && (\n            <ChevronRight className=\"w-4 h-4 text-white/40 group-hover:text-white/60 transition-colors\" />\n          )}\n        </div>\n        \n        {/* Value and subtitle */}\n        <div className=\"mb-3\">\n          <div className={`${config.valueSize} font-bold text-white tabular-nums`}>\n            {value}\n          </div>\n          <div className={`${config.subtitleSize} text-white/60`}>\n            {subtitle}\n          </div>\n        </div>\n        \n        {/* Progress bar */}\n        {progress !== undefined && (\n          <div className=\"relative\">\n            <div className=\"w-full h-2 rounded-full bg-white/10 border border-white/20 overflow-hidden\">\n              <div \n                className=\"h-full rounded-full transition-all duration-1000 ease-out relative overflow-hidden\"\n                style={{ \n                  width: `${Math.min(100, Math.max(0, progress))}%`,\n                  background: `linear-gradient(90deg, ${color}, ${color}CC)`\n                }}\n              >\n                <div \n                  className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                  style={{ animation: 'shimmer 2s infinite' }}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </EnhancedGlassCard>\n  );\n});\n\nEnhancedMetricCard.displayName = 'EnhancedMetricCard';\n\nexport default EnhancedMetricCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/components/EnhancedScoreCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/components/EnhancedScoreCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo, ReactNode } from 'react';\nimport { TrendingUp, TrendingDown, Activity } from 'lucide-react';\nimport EnhancedGlassCard from '../../ui/EnhancedGlassCard';\nimport AnimatedCircularProgress from './AnimatedCircularProgress';\n\ninterface EnhancedScoreCardProps {\n  title: string;\n  score: number;\n  subtitle: string;\n  icon: React.ReactElement;\n  color: string;\n  trend?: 'up' | 'down' | 'stable';\n  delay?: number;\n  size?: 'sm' | 'md' | 'lg';\n  interactive?: boolean;\n  liquidIntensity?: number;\n  onClick?: () => void;\n}\n\nconst EnhancedScoreCard = memo(({\n  title,\n  score,\n  subtitle,\n  icon,\n  color,\n  trend,\n  delay = 0,\n  size = 'md',\n  interactive = true,\n  liquidIntensity = 0.6,\n  onClick,\n}: EnhancedScoreCardProps) => {\n  const sizeConfig = {\n    sm: { \n      padding: 'p-4', \n      progressSize: 100, \n      titleSize: 'text-base', \n      subtitleSize: 'text-xs',\n      iconPadding: 'p-2',\n      iconSize: 'w-4 h-4'\n    },\n    md: { \n      padding: 'p-6', \n      progressSize: 120, \n      titleSize: 'text-lg', \n      subtitleSize: 'text-sm',\n      iconPadding: 'p-3',\n      iconSize: 'w-5 h-5'\n    },\n    lg: { \n      padding: 'p-8', \n      progressSize: 140, \n      titleSize: 'text-xl', \n      subtitleSize: 'text-base',\n      iconPadding: 'p-4',\n      iconSize: 'w-6 h-6'\n    }\n  };\n\n  const config = sizeConfig[size];\n\n  const getScoreDescription = (scoreValue: number) => {\n    if (scoreValue >= 80) return 'Excellent';\n    if (scoreValue >= 70) return 'Very Good';\n    if (scoreValue >= 60) return 'Good';\n    if (scoreValue >= 40) return 'Fair';\n    return 'Needs Attention';\n  };\n\n  const getScoreColor = (scoreValue: number) => {\n    if (scoreValue >= 80) return 'text-green-300';\n    if (scoreValue >= 70) return 'text-blue-300';\n    if (scoreValue >= 60) return 'text-yellow-300';\n    if (scoreValue >= 40) return 'text-orange-300';\n    return 'text-red-300';\n  };\n\n  const TrendIcon = () => {\n    if (!trend) return null;\n    \n    const iconMap = {\n      up: <TrendingUp className=\"w-4 h-4 text-green-400\" />,\n      down: <TrendingDown className=\"w-4 h-4 text-red-400\" />,\n      stable: <Activity className=\"w-4 h-4 text-white/60\" />\n    };\n\n    return (\n      <div className=\"flex items-center space-x-1 px-3 py-1 rounded-full bg-white/10 border border-white/20\">\n        {iconMap[trend]}\n      </div>\n    );\n  };\n\n  return (\n    <EnhancedGlassCard \n      className={`\n        relative overflow-hidden rounded-3xl backdrop-blur-xl border border-white/20 \n        hover:border-white/30 transition-all duration-500 group ${config.padding} ${onClick ? 'cursor-pointer' : ''}\n      `}\n      liquid={true}\n      liquidIntensity={liquidIntensity}\n      liquidDistortion={0.4}\n      liquidAnimated={true}\n      liquidInteractive={interactive}\n      onClick={onClick}\n      style={{\n        animation: `slideInScale 0.8s ease-out ${delay}ms both`\n      }}\n    >\n      {/* Subtle moving gradient */}\n      <div \n        className=\"absolute inset-0 opacity-20 transition-opacity duration-500 group-hover:opacity-30\"\n        style={{\n          background: `radial-gradient(circle at 50% 50%, ${color}40 0%, transparent 70%)`\n        }}\n      />\n      \n      <div className=\"relative z-10\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-3\">\n            <div \n              className={`${config.iconPadding} rounded-2xl backdrop-blur-sm border border-white/20`}\n              style={{ background: `${color}20` }}\n            >\n              {React.cloneElement(icon, { \n                className: config.iconSize, \n                style: { color } \n              })}\n            </div>\n            <h3 className={`${config.titleSize} font-semibold text-white`}>\n              {title}\n            </h3>\n          </div>\n          <TrendIcon />\n        </div>\n        \n        {/* Progress Circle */}\n        <div className=\"flex justify-center mb-6\">\n          <AnimatedCircularProgress \n            value={score} \n            color={color} \n            size={config.progressSize}\n            delay={delay + 200}\n          />\n        </div>\n        \n        {/* Description */}\n        <div className=\"text-center space-y-2\">\n          <div className={`${config.titleSize} font-bold ${getScoreColor(score)}`}>\n            {getScoreDescription(score)}\n          </div>\n          <div className={`${config.subtitleSize} text-white/70`}>\n            {subtitle}\n          </div>\n        </div>\n      </div>\n    </EnhancedGlassCard>\n  );\n});\n\nEnhancedScoreCard.displayName = 'EnhancedScoreCard';\n\nexport default EnhancedScoreCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/components/OptimizedScoreCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/components/OptimizedScoreCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { ScoreCardData } from '@/types/shared';\nimport { UniversalCard } from '@/shared/ui/UniversalCard';\nimport { TrendingUp, TrendingDown, Minus } from 'lucide-react';\nimport { cn } from '@/shared/lib/utils';\n\ninterface OptimizedScoreCardProps {\n  data: ScoreCardData;\n  variant?: 'default' | 'simple' | 'enhanced' | 'refined';\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n}\n\n// Optimized Score Card - Consolidates all score card variations\n// with performance optimizations and consistent styling\nexport const OptimizedScoreCard = React.memo<OptimizedScoreCardProps>(({\n  data,\n  variant = 'default',\n  size = 'md',\n  className = ''\n}) => {\n  const { score, maxScore, label, description, color, trend } = data;\n  \n  // Calculate percentage and stroke\n  const percentage = (score / maxScore) * 100;\n  const strokeWidth = size === 'sm' ? 6 : size === 'lg' ? 12 : 8;\n  const radius = size === 'sm' ? 35 : size === 'lg' ? 70 : 50;\n  const circumference = 2 * Math.PI * radius;\n  const strokeDasharray = circumference;\n  const strokeDashoffset = circumference - (percentage / 100) * circumference;\n\n  // Size-dependent dimensions\n  const dimensions = {\n    sm: { size: 80, textSize: 'text-lg', labelSize: 'text-xs' },\n    md: { size: 120, textSize: 'text-2xl', labelSize: 'text-sm' },\n    lg: { size: 160, textSize: 'text-3xl', labelSize: 'text-base' }\n  };\n\n  const { size: svgSize, textSize, labelSize } = dimensions[size];\n\n  const getTrendIcon = () => {\n    if (!trend) return null;\n    \n    const iconClass = \"w-4 h-4\";\n    switch (trend.direction) {\n      case 'up':\n        return <TrendingUp className={cn(iconClass, 'text-green-400')} />;\n      case 'down':\n        return <TrendingDown className={cn(iconClass, 'text-red-400')} />;\n      default:\n        return <Minus className={cn(iconClass, 'text-white/60')} />;\n    }\n  };\n\n  const getVariantStyles = () => {\n    switch (variant) {\n      case 'simple':\n        return {\n          card: 'p-4',\n          layout: 'flex items-center space-x-4',\n          content: 'text-left'\n        };\n      case 'enhanced':\n        return {\n          card: 'p-6 bg-gradient-to-br from-white/10 to-white/5',\n          layout: 'text-center space-y-4',\n          content: 'space-y-2'\n        };\n      case 'refined':\n        return {\n          card: 'p-5 border-l-4',\n          layout: 'flex items-center justify-between',\n          content: 'text-left'\n        };\n      default:\n        return {\n          card: 'p-4',\n          layout: 'text-center space-y-3',\n          content: 'space-y-1'\n        };\n    }\n  };\n\n  const variantStyles = getVariantStyles();\n\n  return (\n    <UniversalCard\n      variant=\"glass\"\n      className={cn(variantStyles.card, className)}\n      style={variant === 'refined' ? { borderLeftColor: color } : undefined}\n    >\n      <div className={variantStyles.layout}>\n        {/* Circular Progress */}\n        <div className=\"relative flex items-center justify-center\">\n          <svg\n            width={svgSize}\n            height={svgSize}\n            className=\"transform -rotate-90\"\n          >\n            {/* Background Circle */}\n            <circle\n              cx={svgSize / 2}\n              cy={svgSize / 2}\n              r={radius}\n              stroke=\"rgba(255, 255, 255, 0.1)\"\n              strokeWidth={strokeWidth}\n              fill=\"transparent\"\n            />\n            \n            {/* Progress Circle */}\n            <circle\n              cx={svgSize / 2}\n              cy={svgSize / 2}\n              r={radius}\n              stroke={color}\n              strokeWidth={strokeWidth}\n              fill=\"transparent\"\n              strokeDasharray={strokeDasharray}\n              strokeDashoffset={strokeDashoffset}\n              strokeLinecap=\"round\"\n              className=\"transition-all duration-1000 ease-out\"\n              style={{\n                filter: `drop-shadow(0 0 8px ${color}30)`\n              }}\n            />\n          </svg>\n          \n          {/* Score Text */}\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <span className={cn('font-bold text-white', textSize)}>\n              {score}\n            </span>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className={variantStyles.content}>\n          <div className=\"flex items-center justify-center space-x-2\">\n            <h3 className={cn('font-semibold text-white', labelSize)}>\n              {label}\n            </h3>\n            {trend && getTrendIcon()}\n          </div>\n          \n          {description && (\n            <p className=\"text-white/60 text-xs\">\n              {description}\n            </p>\n          )}\n          \n          {trend && (\n            <div className=\"flex items-center justify-center space-x-1\">\n              <span className={cn(\n                'text-xs font-medium',\n                trend.direction === 'up' ? 'text-green-400' :\n                trend.direction === 'down' ? 'text-red-400' : 'text-white/60'\n              )}>\n                {trend.direction === 'up' ? '+' : trend.direction === 'down' ? '-' : ''}\n                {trend.percentage}%\n              </span>\n              <span className=\"text-xs text-white/60\">vs last month</span>\n            </div>\n          )}\n        </div>\n      </div>\n    </UniversalCard>\n  );\n});\n\nOptimizedScoreCard.displayName = 'OptimizedScoreCard';\n\nexport default OptimizedScoreCard;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/components/RefinedMetricCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/components/RefinedMetricCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo, useState, useEffect } from 'react';\nimport { TrendingUp, TrendingDown, Minus } from 'lucide-react';\nimport EnhancedGlassCard from '../../ui/EnhancedGlassCard';\n\ninterface RefinedMetricCardProps {\n  title: string;\n  value: string | number;\n  subtitle: string;\n  progress?: number; // 0-100\n  color?: string;\n  icon: React.ReactElement;\n  trend?: 'up' | 'down' | 'stable';\n  trendValue?: string;\n  delay?: number;\n  size?: 'sm' | 'md' | 'lg';\n  interactive?: boolean;\n  liquidIntensity?: number;\n}\n\nconst RefinedMetricCard = memo(({\n  title,\n  value,\n  subtitle,\n  progress,\n  color = '#64748b', // Default to slate-500\n  icon,\n  trend,\n  trendValue,\n  delay = 0,\n  size = 'md',\n  interactive = true,\n  liquidIntensity = 0.2\n}: RefinedMetricCardProps) => {\n  const [animatedProgress, setAnimatedProgress] = useState(0);\n  const [animatedValue, setAnimatedValue] = useState(0);\n\n  const sizeConfig = {\n    sm: { \n      padding: 'p-4', \n      titleSize: 'text-sm', \n      valueSize: 'text-xl',\n      subtitleSize: 'text-xs',\n      iconPadding: 'p-2',\n      iconSize: 'w-4 h-4'\n    },\n    md: { \n      padding: 'p-6', \n      titleSize: 'text-base', \n      valueSize: 'text-2xl',\n      subtitleSize: 'text-sm',\n      iconPadding: 'p-3',\n      iconSize: 'w-5 h-5'\n    },\n    lg: { \n      padding: 'p-8', \n      titleSize: 'text-lg', \n      valueSize: 'text-3xl',\n      subtitleSize: 'text-base',\n      iconPadding: 'p-4',\n      iconSize: 'w-6 h-6'\n    }\n  };\n\n  const config = sizeConfig[size];\n\n  // Animate progress bar\n  useEffect(() => {\n    if (progress !== undefined) {\n      const timer = setTimeout(() => {\n        setAnimatedProgress(progress);\n      }, delay + 300);\n      return () => clearTimeout(timer);\n    }\n  }, [progress, delay]);\n\n  // Animate numeric values\n  useEffect(() => {\n    if (typeof value === 'number') {\n      const timer = setTimeout(() => {\n        const duration = 1500;\n        const increment = value / (duration / 16);\n        let current = 0;\n        \n        const counter = setInterval(() => {\n          current += increment;\n          if (current >= value) {\n            current = value;\n            clearInterval(counter);\n          }\n          setAnimatedValue(Math.round(current));\n        }, 16);\n        \n        return () => clearInterval(counter);\n      }, delay + 500);\n      return () => clearTimeout(timer);\n    }\n  }, [value, delay]);\n\n  const TrendIndicator = () => {\n    if (!trend) return null;\n    \n    const trendConfig = {\n      up: { \n        icon: <TrendingUp className=\"w-4 h-4\" />, \n        color: 'text-green-400',\n        bg: 'bg-green-500/10',\n        border: 'border-green-500/20'\n      },\n      down: { \n        icon: <TrendingDown className=\"w-4 h-4\" />, \n        color: 'text-red-400',\n        bg: 'bg-red-500/10',\n        border: 'border-red-500/20'\n      },\n      stable: { \n        icon: <Minus className=\"w-4 h-4\" />, \n        color: 'text-slate-400',\n        bg: 'bg-slate-500/10',\n        border: 'border-slate-500/20'\n      }\n    };\n\n    const config = trendConfig[trend];\n\n    return (\n      <div className={`\n        flex items-center space-x-1 px-2 py-1 rounded-lg \n        ${config.bg} ${config.border} border backdrop-blur-sm\n      `}>\n        <span className={config.color}>\n          {config.icon}\n        </span>\n        {trendValue && (\n          <span className={`text-xs font-medium ${config.color}`}>\n            {trendValue}\n          </span>\n        )}\n      </div>\n    );\n  };\n\n  const displayValue = typeof value === 'number' ? animatedValue : value;\n\n  return (\n    <div\n      className={`\n        relative overflow-hidden rounded-2xl backdrop-blur-xl border border-white/[0.08] \n        hover:border-white/[0.12] transition-all duration-300 group hover-lift ${config.padding}\n        bg-white/[0.02]\n      `}\n      style={{\n        animation: `slideInScale 0.6s ease-out ${delay}ms both`\n      }}\n    >\n      {/* Subtle gradient overlay */}\n      <div \n        className=\"absolute inset-0 opacity-5 transition-opacity duration-300 group-hover:opacity-10 rounded-2xl\"\n        style={{\n          background: `linear-gradient(135deg, ${color}20 0%, transparent 50%, ${color}10 100%)`\n        }}\n      />\n      \n      {/* Glass morphism depth */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-800/5 via-transparent to-slate-900/10 rounded-2xl\" />\n      \n      <div className=\"relative z-10\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div \n              className={`${config.iconPadding} rounded-xl backdrop-blur-sm border border-white/[0.08] bg-white/[0.02]`}\n              style={{ \n                background: `linear-gradient(135deg, ${color}10, ${color}05)`,\n                borderColor: `${color}20`\n              }}\n            >\n              {React.cloneElement(icon, { \n                className: config.iconSize, \n                style: { color } \n              })}\n            </div>\n            <h4 className={`${config.titleSize} font-semibold text-white`}>\n              {title}\n            </h4>\n          </div>\n          <TrendIndicator />\n        </div>\n        \n        {/* Value */}\n        <div className=\"mb-3\">\n          <div \n            className={`${config.valueSize} font-bold text-white animate-metricCounter`}\n            style={{ animationDelay: `${delay + 300}ms` }}\n          >\n            {displayValue}\n          </div>\n          <div className={`${config.subtitleSize} text-white/70 mt-1`}>\n            {subtitle}\n          </div>\n        </div>\n        \n        {/* Progress Bar */}\n        {progress !== undefined && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-xs text-white/60\">Progress</span>\n              <span className=\"text-xs text-white/80\">{Math.round(animatedProgress)}%</span>\n            </div>\n            <div className=\"relative h-2 bg-white/[0.05] rounded-full overflow-hidden backdrop-blur-sm\">\n              <div \n                className=\"absolute top-0 left-0 h-full rounded-full transition-all duration-1000 ease-out\"\n                style={{\n                  width: `${animatedProgress}%`,\n                  background: `linear-gradient(90deg, ${color}80, ${color}60)`,\n                  boxShadow: `0 0 8px ${color}40`\n                }}\n              />\n              {/* Shimmer effect */}\n              <div \n                className=\"absolute top-0 left-0 h-full w-8 bg-gradient-to-r from-transparent via-white/20 to-transparent skew-x-12 animate-shimmer\"\n                style={{\n                  animation: `shimmer 2s infinite ${delay + 800}ms`,\n                  transform: `translateX(${animatedProgress * 4}px) skewX(12deg)`\n                }}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Hover glow effect */}\n      <div \n        className=\"absolute inset-0 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none\"\n        style={{\n          background: `radial-gradient(circle at center, ${color}15 0%, transparent 70%)`,\n          filter: 'blur(1px)'\n        }}\n      />\n    </div>\n  );\n});\n\nRefinedMetricCard.displayName = 'RefinedMetricCard';\n\nexport default RefinedMetricCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/components/RefinedScoreCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/components/RefinedScoreCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo, ReactNode } from 'react';\nimport { TrendingUp, TrendingDown, Activity } from 'lucide-react';\nimport EnhancedGlassCard from '../../ui/EnhancedGlassCard';\nimport AnimatedCircularProgress from './AnimatedCircularProgress';\n\ninterface RefinedScoreCardProps {\n  title: string;\n  score: number;\n  subtitle: string;\n  icon: React.ReactElement;\n  color?: string;\n  trend?: 'up' | 'down' | 'stable';\n  delay?: number;\n  size?: 'sm' | 'md' | 'lg';\n  interactive?: boolean;\n  liquidIntensity?: number;\n}\n\nconst RefinedScoreCard = memo(({\n  title,\n  score,\n  subtitle,\n  icon,\n  color,\n  trend,\n  delay = 0,\n  size = 'md',\n  interactive = true,\n  liquidIntensity = 0.2\n}: RefinedScoreCardProps) => {\n  const sizeConfig = {\n    sm: { \n      padding: 'p-4', \n      progressSize: 100, \n      titleSize: 'text-base', \n      subtitleSize: 'text-xs',\n      iconPadding: 'p-2',\n      iconSize: 'w-4 h-4'\n    },\n    md: { \n      padding: 'p-6', \n      progressSize: 120, \n      titleSize: 'text-lg', \n      subtitleSize: 'text-sm',\n      iconPadding: 'p-3',\n      iconSize: 'w-5 h-5'\n    },\n    lg: { \n      padding: 'p-8', \n      progressSize: 140, \n      titleSize: 'text-xl', \n      subtitleSize: 'text-base',\n      iconPadding: 'p-4',\n      iconSize: 'w-6 h-6'\n    }\n  };\n\n  const config = sizeConfig[size];\n\n  const getScoreDescription = (scoreValue: number) => {\n    if (scoreValue >= 80) return 'Excellent';\n    if (scoreValue >= 70) return 'Very Good';\n    if (scoreValue >= 60) return 'Good';\n    if (scoreValue >= 40) return 'Fair';\n    return 'Needs Attention';\n  };\n\n  // Refined color system using professional palette\n  const getScoreColor = (scoreValue: number) => {\n    if (scoreValue >= 80) return '#22c55e'; // Green-500 for excellent\n    if (scoreValue >= 70) return '#6366f1'; // Indigo-500 for very good\n    if (scoreValue >= 60) return '#f59e0b'; // Amber-500 for good\n    if (scoreValue >= 40) return '#f97316'; // Orange-500 for fair\n    return '#ef4444'; // Red-500 for needs attention\n  };\n\n  const getScoreTextColor = (scoreValue: number) => {\n    if (scoreValue >= 80) return 'text-green-400';\n    if (scoreValue >= 70) return 'text-indigo-400';\n    if (scoreValue >= 60) return 'text-amber-400';\n    if (scoreValue >= 40) return 'text-orange-400';\n    return 'text-red-400';\n  };\n\n  const refinedColor = color || getScoreColor(score);\n\n  const TrendIcon = () => {\n    if (!trend) return null;\n    \n    const iconMap = {\n      up: <TrendingUp className=\"w-4 h-4 text-green-400\" />,\n      down: <TrendingDown className=\"w-4 h-4 text-red-400\" />,\n      stable: <Activity className=\"w-4 h-4 text-slate-400\" />\n    };\n\n    return (\n      <div className=\"flex items-center space-x-1 px-3 py-1 rounded-full bg-slate-800/30 border border-slate-700/40 backdrop-blur-sm\">\n        {iconMap[trend]}\n      </div>\n    );\n  };\n\n  return (\n    <EnhancedGlassCard \n      className={`\n        relative overflow-hidden rounded-3xl backdrop-blur-xl border border-slate-700/40 \n        hover:border-slate-600/60 transition-all duration-500 group hover-lift ${config.padding}\n        bg-slate-900/20\n      `}\n      liquid={true}\n      liquidIntensity={liquidIntensity}\n      liquidDistortion={0.2}\n      liquidAnimated={true}\n      liquidInteractive={interactive}\n      style={{\n        animation: `slideInScale 0.8s ease-out ${delay}ms both`\n      }}\n    >\n      {/* Subtle moving gradient overlay */}\n      <div \n        className=\"absolute inset-0 opacity-10 transition-opacity duration-500 group-hover:opacity-20 rounded-3xl\"\n        style={{\n          background: `radial-gradient(circle at 50% 50%, ${refinedColor}30 0%, transparent 70%)`\n        }}\n      />\n      \n      {/* Glass morphism depth layer */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-800/10 via-transparent to-slate-900/20 rounded-3xl\" />\n      \n      <div className=\"relative z-10\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-3\">\n            <div \n              className={`${config.iconPadding} rounded-2xl backdrop-blur-sm border border-slate-700/30 bg-slate-800/20`}\n              style={{ \n                background: `linear-gradient(135deg, ${refinedColor}15, ${refinedColor}05)`,\n                borderColor: `${refinedColor}30`\n              }}\n            >\n              {React.cloneElement(icon, { \n                className: config.iconSize, \n                style: { color: refinedColor } \n              })}\n            </div>\n            <h3 className={`${config.titleSize} font-semibold text-slate-100`}>\n              {title}\n            </h3>\n          </div>\n          <TrendIcon />\n        </div>\n        \n        {/* Progress Circle */}\n        <div className=\"flex justify-center mb-6\">\n          <AnimatedCircularProgress \n            value={score} \n            color={refinedColor} \n            size={config.progressSize}\n            delay={delay + 200}\n          />\n        </div>\n        \n        {/* Description */}\n        <div className=\"text-center space-y-2\">\n          <div className={`${config.titleSize} font-bold ${getScoreTextColor(score)}`}>\n            {getScoreDescription(score)}\n          </div>\n          <div className={`${config.subtitleSize} text-slate-400`}>\n            {subtitle}\n          </div>\n        </div>\n      </div>\n\n      {/* Subtle border glow effect */}\n      <div \n        className=\"absolute inset-0 rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none\"\n        style={{\n          background: `linear-gradient(135deg, transparent, ${refinedColor}20, transparent)`,\n          filter: 'blur(1px)'\n        }}\n      />\n    </EnhancedGlassCard>\n  );\n});\n\nRefinedScoreCard.displayName = 'RefinedScoreCard';\n\nexport default RefinedScoreCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/components/RefinedTrendCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/components/RefinedTrendCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo } from 'react';\nimport { ChevronRight, TrendingUp, BarChart3, Target } from 'lucide-react';\nimport EnhancedGlassCard from '../../ui/EnhancedGlassCard';\n\ninterface RefinedTrendCardProps {\n  title: string;\n  subtitle: string;\n  trend: string;\n  delay?: number;\n  icon?: React.ReactElement;\n  interactive?: boolean;\n  liquidIntensity?: number;\n  onClick?: () => void;\n}\n\nconst RefinedTrendCard = memo(({\n  title,\n  subtitle,\n  trend,\n  delay = 0,\n  icon,\n  interactive = true,\n  liquidIntensity = 0.15,\n  onClick\n}: RefinedTrendCardProps) => {\n  \n  // Get appropriate icon based on title if none provided\n  const getDefaultIcon = () => {\n    if (title.toLowerCase().includes('performance')) return <TrendingUp className=\"w-5 h-5\" />;\n    if (title.toLowerCase().includes('goal')) return <Target className=\"w-5 h-5\" />;\n    if (title.toLowerCase().includes('risk')) return <BarChart3 className=\"w-5 h-5\" />;\n    return <BarChart3 className=\"w-5 h-5\" />;\n  };\n\n  const displayIcon = icon || getDefaultIcon();\n\n  return (\n    <EnhancedGlassCard \n      className=\"refined-trend-card relative overflow-hidden rounded-2xl backdrop-blur-xl border border-slate-700/40 hover:border-slate-600/60 transition-all duration-300 group cursor-pointer p-6 bg-slate-900/20 hover-lift\"\n      liquid={true}\n      liquidIntensity={liquidIntensity}\n      liquidDistortion={0.1}\n      liquidAnimated={false}\n      liquidInteractive={interactive}\n      onClick={onClick}\n      style={{\n        animation: `slideInScale 0.6s ease-out ${delay}ms both`\n      }}\n    >\n      {/* Subtle gradient overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-800/5 via-transparent to-slate-900/10 rounded-2xl\" />\n      \n      <div className=\"relative z-10\">\n        {/* Header */}\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"p-2 rounded-xl bg-slate-800/30 border border-slate-700/40 backdrop-blur-sm\">\n              {React.cloneElement(displayIcon, { \n                className: 'w-5 h-5 text-slate-300'\n              })}\n            </div>\n            <div className=\"flex-1\">\n              <h4 className=\"text-base font-semibold text-slate-100 leading-tight\">{title}</h4>\n              <p className=\"text-sm text-slate-400 mt-1 leading-relaxed\">{subtitle}</p>\n            </div>\n          </div>\n          {interactive && (\n            <ChevronRight className=\"w-5 h-5 text-slate-500 group-hover:text-slate-300 transition-colors flex-shrink-0 mt-1\" />\n          )}\n        </div>\n        \n        {/* Simplified visual indicator */}\n        <div className=\"mb-4\">\n          <div className=\"h-12 flex items-end justify-center space-x-1\">\n            {[...Array(12)].map((_, i) => {\n              const heights = [\n                30, 45, 35, 60, 50, 75, 65, 80, 70, 85, 90, 95\n              ];\n              return (\n                <div\n                  key={i}\n                  className=\"trend-bar flex-1 max-w-2 rounded-sm transition-all duration-500 relative overflow-hidden\"\n                  style={{ \n                    height: `${heights[i]}%`,\n                    background: 'linear-gradient(180deg, rgba(100, 116, 139, 0.6), rgba(100, 116, 139, 0.3))',\n                    animationDelay: `${i * 50}ms`\n                  }}\n                >\n                  <div \n                    className=\"absolute inset-0 bg-gradient-to-t from-transparent via-slate-400/10 to-transparent\"\n                    style={{ animation: `trendPulse 3s infinite ${i * 0.2}s` }}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        \n        {/* Trend status */}\n        <div className=\"text-center\">\n          <span className=\"text-sm font-medium text-slate-200 bg-slate-800/20 px-3 py-1 rounded-lg border border-slate-700/30\">\n            {trend}\n          </span>\n        </div>\n      </div>\n\n      {/* Hover glow effect */}\n      <div \n        className=\"absolute inset-0 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none\"\n        style={{\n          background: `linear-gradient(135deg, transparent, rgba(100, 116, 139, 0.1), transparent)`,\n          filter: 'blur(1px)'\n        }}\n      />\n    </EnhancedGlassCard>\n  );\n});\n\nRefinedTrendCard.displayName = 'RefinedTrendCard';\n\nexport default RefinedTrendCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/insights/components/components/TrendChart.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/insights/components/components/TrendChart.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\ninterface TrendChartProps {\n  data: { date: string; value: number }[];\n  timeframe: string;\n  onTimeframeChange: (timeframe: string) => void;\n}\n\n// Placeholder TrendChart component for UnifiedInsightsPage\nexport const TrendChart = React.memo<TrendChartProps>(({ \n  data, \n  timeframe, \n  onTimeframeChange \n}) => {\n  return (\n    <div className=\"bg-white/5 rounded-lg p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-white\">Spending Trends</h3>\n        <select\n          value={timeframe}\n          onChange={(e) => onTimeframeChange(e.target.value)}\n          className=\"bg-white/10 border border-white/20 rounded-lg px-3 py-1 text-white text-sm\"\n        >\n          <option value=\"7d\">7 days</option>\n          <option value=\"30d\">30 days</option>\n          <option value=\"90d\">90 days</option>\n        </select>\n      </div>\n      \n      <div className=\"h-64 flex items-center justify-center bg-white/5 rounded border border-white/10\">\n        <div className=\"text-center\">\n          <div className=\"text-white/60 mb-2\">📈 Trend Chart</div>\n          <div className=\"text-sm text-white/40\">\n            Chart visualization for {timeframe} timeframe\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nTrendChart.displayName = 'TrendChart';\n\nexport default TrendChart;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/investments/api/investmentService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/investments/api/investmentService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Investment, InvestmentAccount, Portfolio, Holding, PerformanceMetrics, AssetAllocation, RiskMetrics } from '@/types/investments';\nimport { secureStorage } from '@/shared/utils/crypto';\n\n/**\n * Investment Portfolio Management Service\n * Handles portfolio tracking, performance analytics, and investment insights\n */\nclass InvestmentService {\n  private static instance: InvestmentService;\n  private storageKey = 'vueni:portfolio:v1';\n  private investments: Map<string, Investment> = new Map();\n  private accounts: Map<string, InvestmentAccount> = new Map();\n  private portfolios: Map<string, Portfolio> = new Map();\n  private holdings: Map<string, Holding> = new Map();\n\n  // Mock market data service - in production would integrate with real data providers\n  private marketDataService = {\n    getCurrentPrice: async (symbol: string): Promise<number> => {\n      // Mock price data - in production would fetch from Yahoo Finance, Alpha Vantage, etc.\n      const mockPrices: Record<string, number> = {\n        'AAPL': 185.50,\n        'GOOGL': 142.20,\n        'MSFT': 375.80,\n        'TSLA': 195.30,\n        'AMZN': 158.90,\n        'SPY': 485.60,\n        'QQQ': 392.40,\n        'VTI': 252.30,\n        'NVDA': 875.40,\n        'BRK.B': 425.60\n      };\n      return mockPrices[symbol] || 100 + (Math.random() * 100);\n    },\n    \n    getHistoricalPrices: async (symbol: string, days: number): Promise<Array<{ date: Date; price: number }>> => {\n      const currentPrice = await this.marketDataService.getCurrentPrice(symbol);\n      const prices: Array<{ date: Date; price: number }> = [];\n      \n      for (let i = days; i >= 0; i--) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        \n        // Simulate price volatility\n        const volatility = 0.02 + (Math.random() * 0.03);\n        const change = (Math.random() - 0.5) * volatility;\n        const price = currentPrice * (1 + change * (i / days));\n        \n        prices.push({ date, price });\n      }\n      \n      return prices;\n    }\n  };\n\n  private constructor() {\n    this.loadFromStorage();\n    this.seedDemoData();\n  }\n\n  public static getInstance() {\n    if (!InvestmentService.instance) {\n      InvestmentService.instance = new InvestmentService();\n    }\n    return InvestmentService.instance;\n  }\n\n  private loadFromStorage() {\n    if (typeof window === 'undefined') return;\n    try {\n      const data = secureStorage.getItem(this.storageKey);\n      if (data) {\n        // Load existing data\n        const portfolioData = data as { holdings?: unknown[] };\n        if (portfolioData.holdings) {\n          portfolioData.holdings.forEach((holding: unknown) => {\n            // Type check and cast holding to ensure it has required properties\n            if (holding && typeof holding === 'object' && 'id' in holding && 'symbol' in holding) {\n              const typedHolding = holding as Holding;\n              this.holdings.set(typedHolding.id, typedHolding);\n            }\n          });\n        }\n      }\n    } catch (e) {\n      console.error('Failed to parse investment data', e);\n    }\n  }\n\n  private async seedDemoData() {\n    // Create demo investment account\n    const demoAccount: InvestmentAccount = {\n      id: 'demo_investment_account',\n      familyId: 'demo_family',\n      institution: 'Demo Brokerage',\n      accountType: 'brokerage',\n      accountNumber: '****1234',\n      name: 'Investment Account',\n      balance: 0,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.accounts.set(demoAccount.id, demoAccount);\n\n    // Create demo cash account (using brokerage type for cash equivalents)\n    const demoCashAccount: InvestmentAccount = {\n      id: 'demo_cash_account',\n      familyId: 'demo_family',\n      institution: 'Demo Bank',\n      accountType: 'brokerage', // Use brokerage for cash equivalents\n      accountNumber: '****5678',\n      name: 'High Yield Savings',\n      balance: 15000,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.accounts.set(demoCashAccount.id, demoCashAccount);\n\n    // Create diverse demo holdings including all asset types\n    const demoHoldings = [\n      // Stock Holdings (65% of portfolio)\n      {\n        symbol: 'AAPL',\n        name: 'Apple Inc.',\n        quantity: 25,\n        shares: 25,\n        averageCostPerShare: 140,\n        purchasePrice: 140,\n        costBasis: 25 * 140,\n        assetType: 'stock' as const,\n        sector: 'Technology'\n      },\n      {\n        symbol: 'MSFT', \n        name: 'Microsoft Corp.',\n        quantity: 15,\n        shares: 15,\n        averageCostPerShare: 230,\n        purchasePrice: 230,\n        costBasis: 15 * 230,\n        assetType: 'stock' as const,\n        sector: 'Technology'\n      },\n      {\n        symbol: 'VTI',\n        name: 'Vanguard Total Market ETF',\n        quantity: 35,\n        shares: 35,\n        averageCostPerShare: 180,\n        purchasePrice: 180,\n        costBasis: 35 * 180,\n        assetType: 'etf' as const,\n        sector: 'Diversified'\n      },\n      {\n        symbol: 'GOOGL',\n        name: 'Alphabet Inc.',\n        quantity: 8,\n        shares: 8,\n        averageCostPerShare: 142,\n        purchasePrice: 142,\n        costBasis: 8 * 142,\n        assetType: 'stock' as const,\n        sector: 'Technology'\n      },\n      // Bond Holdings (20% of portfolio)\n      {\n        symbol: 'BND',\n        name: 'Vanguard Total Bond Market ETF',\n        quantity: 280,\n        shares: 280,\n        averageCostPerShare: 75,\n        purchasePrice: 75,\n        costBasis: 280 * 75,\n        assetType: 'bond' as const,\n        sector: 'Fixed Income'\n      },\n      {\n        symbol: 'TIP',\n        name: 'iShares TIPS Bond ETF',\n        quantity: 90,\n        shares: 90,\n        averageCostPerShare: 115,\n        purchasePrice: 115,\n        costBasis: 90 * 115,\n        assetType: 'bond' as const,\n        sector: 'Fixed Income'\n      },\n      // REIT Holdings (5% of portfolio)\n      {\n        symbol: 'VNQ',\n        name: 'Vanguard Real Estate ETF',\n        quantity: 60,\n        shares: 60,\n        averageCostPerShare: 95,\n        purchasePrice: 95,\n        costBasis: 60 * 95,\n        assetType: 'reit' as const,\n        sector: 'Real Estate'\n      },\n      // Crypto Holdings (3% of portfolio)\n      {\n        symbol: 'BTC',\n        name: 'Bitcoin',\n        quantity: 0.15,\n        shares: 0.15,\n        averageCostPerShare: 45000,\n        purchasePrice: 45000,\n        costBasis: 0.15 * 45000,\n        assetType: 'crypto' as const,\n        sector: 'Cryptocurrency'\n      },\n      // Cash position (7% of portfolio) - will be handled separately\n    ];\n\n    for (const holdingData of demoHoldings) {\n      if (!Array.from(this.holdings.values()).some(h => h.symbol === holdingData.symbol)) {\n        await this.addHolding(demoAccount.id, holdingData);\n      }\n    }\n\n    // Add cash holding to cash account\n    const cashHolding = {\n      symbol: 'CASH',\n      name: 'Cash & Cash Equivalents',\n      quantity: 1,\n      shares: 1,\n      averageCostPerShare: 12500, // $12,500 in cash\n      purchasePrice: 12500,\n      costBasis: 12500,\n      assetType: 'cash' as const,\n      sector: 'Cash'\n    };\n\n    if (!Array.from(this.holdings.values()).some(h => h.symbol === 'CASH')) {\n      await this.addHolding(demoCashAccount.id, cashHolding);\n    }\n  }\n\n  private persist() {\n    if (typeof window === 'undefined') return;\n    const data = {\n      holdings: Array.from(this.holdings.values()),\n      accounts: Array.from(this.accounts.values())\n    };\n    secureStorage.setItem(this.storageKey, data);\n  }\n\n  /**\n   * Create investment account\n   */\n  async createInvestmentAccount(data: Omit<InvestmentAccount, 'id' | 'createdAt' | 'updatedAt'>): Promise<InvestmentAccount> {\n    const account: InvestmentAccount = {\n      id: this.generateAccountId(),\n      ...data,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.accounts.set(account.id, account);\n    this.persist();\n    return account;\n  }\n\n  /**\n   * Add investment holding\n   */\n  async addHolding(accountId: string, data: Omit<Holding, 'id' | 'accountId' | 'currentPrice' | 'marketValue' | 'unrealizedGainLoss' | 'unrealizedGainLossPercent' | 'createdAt' | 'updatedAt'>): Promise<Holding> {\n    const holding: Holding = {\n      id: this.generateHoldingId(),\n      accountId,\n      symbol: data.symbol,\n      name: data.name,\n      shares: data.quantity,\n      purchasePrice: data.averageCostPerShare,\n      quantity: data.quantity,\n      averageCostPerShare: data.averageCostPerShare,\n      assetType: data.assetType,\n      sector: data.sector,\n      costBasis: data.averageCostPerShare * data.quantity,\n      currentPrice: 0,\n      marketValue: 0,\n      unrealizedGainLoss: 0,\n      unrealizedGainLossPercent: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    // Get current market price\n    holding.currentPrice = await this.marketDataService.getCurrentPrice(holding.symbol);\n    holding.marketValue = holding.currentPrice * holding.quantity;\n    holding.unrealizedGainLoss = holding.marketValue - holding.costBasis;\n    holding.unrealizedGainLossPercent = holding.costBasis ? (holding.unrealizedGainLoss / holding.costBasis) * 100 : 0;\n\n    this.holdings.set(holding.id, holding);\n    this.persist();\n    return holding;\n  }\n\n  /**\n   * Get family's investment portfolio\n   */\n  async getFamilyPortfolio(familyId: string): Promise<Portfolio> {\n    const accounts = Array.from(this.accounts.values())\n      .filter(account => account.familyId === familyId);\n\n    const holdings = Array.from(this.holdings.values())\n      .filter(holding => accounts.some(account => account.id === holding.accountId));\n\n    // Update current prices\n    for (const holding of holdings) {\n      holding.currentPrice = await this.marketDataService.getCurrentPrice(holding.symbol);\n      holding.marketValue = holding.currentPrice * holding.quantity;\n      holding.unrealizedGainLoss = holding.marketValue - holding.costBasis;\n      holding.unrealizedGainLossPercent = holding.costBasis ? (holding.unrealizedGainLoss / holding.costBasis) * 100 : 0;\n    }\n\n    const totalValue = holdings.reduce((sum, holding) => sum + holding.marketValue, 0);\n    const totalCostBasis = holdings.reduce((sum, holding) => sum + holding.costBasis, 0);\n    const totalGainLoss = totalValue - totalCostBasis;\n    const totalGainLossPercent = totalCostBasis > 0 ? (totalGainLoss / totalCostBasis) * 100 : 0;\n\n    const portfolio: Portfolio = {\n      id: `portfolio_${familyId}`,\n      familyId,\n      accounts,\n      holdings,\n      totalValue,\n      totalCostBasis,\n      totalGainLoss,\n      totalGainLossPercent,\n      performance: await this.calculatePerformanceMetrics(familyId),\n      allocation: await this.calculateAssetAllocation(holdings),\n      riskMetrics: await this.calculateRiskMetrics(holdings),\n      lastUpdated: new Date()\n    };\n\n    this.portfolios.set(portfolio.id, portfolio);\n    return portfolio;\n  }\n\n  /**\n   * Legacy method for compatibility\n   */\n  async getPortfolio(): Promise<{ holdings: Holding[]; snapshots: Array<{ date: string; value: number }> }> {\n    const portfolio = await this.getFamilyPortfolio('demo_family');\n    \n    // Generate snapshots for demo\n    const snapshots = Array.from({ length: 12 }).map((_, i) => {\n      const date = new Date();\n      date.setMonth(date.getMonth() - (11 - i));\n      const value = portfolio.totalValue * (0.8 + (i / 11) * 0.2) + (Math.random() - 0.5) * 1000;\n      return { date: date.toISOString().split('T')[0], value: Number(value.toFixed(2)) };\n    });\n\n    return {\n      holdings: portfolio.holdings,\n      snapshots\n    };\n  }\n\n  /**\n   * Calculate portfolio performance metrics\n   */\n  async calculatePerformanceMetrics(familyId: string): Promise<PerformanceMetrics> {\n    const portfolio = this.portfolios.get(`portfolio_${familyId}`);\n    if (!portfolio) {\n      // Return default metrics if portfolio not found\n      return {\n        totalReturn: 0,\n        annualizedReturn: 0,\n        returns: { '1d': 0, '7d': 0, '30d': 0, '90d': 0, '365d': 0 },\n        sharpeRatio: 0,\n        volatility: 0,\n        maxDrawdown: 0,\n        alpha: 0,\n        beta: 1,\n        rSquared: 0\n      };\n    }\n\n    // Get historical data for performance calculation\n    const periods = [1, 7, 30, 90, 365]; // Days\n    const returns: Record<string, number> = {};\n\n    for (const days of periods) {\n      // Simulate historical returns - in production would use actual historical data\n      const historicalReturn = (Math.random() - 0.4) * 0.2; // Random return between -8% and 12%\n      returns[`${days}d`] = historicalReturn * 100;\n    }\n\n    // Calculate annualized return (simplified)\n    const yearReturn = returns['365d'] || 0;\n    const sharpeRatio = yearReturn / 15; // Assuming 15% volatility\n    const maxDrawdown = Math.min(...Object.values(returns)) || -5;\n\n    return {\n      totalReturn: portfolio.totalGainLossPercent,\n      annualizedReturn: yearReturn,\n      returns,\n      sharpeRatio,\n      volatility: 15, // Mock volatility\n      maxDrawdown,\n      alpha: yearReturn - 8, // Assuming 8% market return\n      beta: 1.0 + (Math.random() - 0.5) * 0.4, // Random beta around 1.0\n      rSquared: 0.85 + Math.random() * 0.1 // Random R-squared between 0.85-0.95\n    };\n  }\n\n  /**\n   * Calculate asset allocation\n   */\n  async calculateAssetAllocation(holdings: Holding[]): Promise<AssetAllocation> {\n    const totalValue = holdings.reduce((sum, holding) => sum + holding.marketValue, 0);\n    \n    if (totalValue === 0) {\n      return {\n        stocks: 0,\n        bonds: 0,\n        cash: 0,\n        reits: 0,\n        commodities: 0,\n        crypto: 0,\n        other: 0,\n        sectors: {},\n        regions: {\n          US: 0,\n          International: 0,\n          Emerging: 0\n        }\n      };\n    }\n\n    let stocks = 0, bonds = 0, crypto = 0, other = 0;\n    const cash = 0, commodities = 0;\n    let reitsPercentage = 0;\n    const sectors: Record<string, number> = {};\n\n    for (const holding of holdings) {\n      const value = holding.marketValue;\n      const percentage = (value / totalValue) * 100;\n\n      // Categorize by asset type\n      if (holding.assetType === 'stock') {\n        stocks += percentage;\n        const sector = holding.sector || 'Other';\n        sectors[sector] = (sectors[sector] || 0) + percentage;\n      } else if (holding.assetType === 'bond') {\n        bonds += percentage;\n      } else if (holding.assetType === 'reit') {\n        reitsPercentage += percentage;\n      } else if (holding.assetType === 'crypto') {\n        crypto += percentage;\n      } else if (holding.assetType === 'etf' || holding.assetType === 'mutual_fund') {\n        // Classify ETFs/mutual funds based on their underlying assets\n        if (holding.symbol.includes('BOND')) {\n          bonds += percentage;\n        } else {\n          stocks += percentage;\n          const sector = 'Diversified';\n          sectors[sector] = (sectors[sector] || 0) + percentage;\n        }\n      } else {\n        other += percentage;\n      }\n    }\n\n    return {\n      stocks,\n      bonds,\n      cash,\n      reits: reitsPercentage,\n      commodities,\n      crypto,\n      other,\n      sectors,\n      regions: {\n        US: stocks * 0.7, // Assume 70% US allocation\n        International: stocks * 0.25, // 25% International\n        Emerging: stocks * 0.05 // 5% Emerging markets\n      }\n    };\n  }\n\n  /**\n   * Calculate risk metrics\n   */\n  async calculateRiskMetrics(holdings: Holding[]): Promise<RiskMetrics> {\n    const totalValue = holdings.reduce((sum, holding) => sum + holding.marketValue, 0);\n    \n    if (totalValue === 0) {\n      return {\n        concentrationRisk: 0,\n        sectorConcentration: 0,\n        geographicRisk: 0,\n        currencyRisk: 0,\n        correlation: 0,\n        var95: 0,\n        var99: 0,\n        expectedShortfall: 0\n      };\n    }\n\n    // Calculate concentration risk\n    const concentrationRisk = holdings.length > 0 \n      ? Math.max(...holdings.map(h => (h.marketValue / totalValue) * 100))\n      : 0;\n\n    // Calculate sector concentration\n    const sectors: Record<string, number> = {};\n    let maxSectorConcentration = 0;\n\n    for (const holding of holdings) {\n      const sector = holding.sector || 'Other';\n      const percentage = (holding.marketValue / totalValue) * 100;\n      sectors[sector] = (sectors[sector] || 0) + percentage;\n      maxSectorConcentration = Math.max(maxSectorConcentration, sectors[sector]);\n    }\n\n    // Calculate portfolio correlation (simplified)\n    const correlation = holdings.length > 5 ? 0.6 + Math.random() * 0.3 : 0.8;\n\n    return {\n      concentrationRisk,\n      sectorConcentration: maxSectorConcentration,\n      geographicRisk: 30, // Mock value\n      currencyRisk: 15, // Mock value\n      correlation,\n      var95: totalValue * 0.05, // 5% Value at Risk\n      var99: totalValue * 0.08, // 8% Value at Risk\n      expectedShortfall: totalValue * 0.12 // 12% Expected Shortfall\n    };\n  }\n\n  /**\n   * Get investment recommendations\n   */\n  async getInvestmentRecommendations(familyId: string): Promise<Array<{\n    type: 'rebalance' | 'diversify' | 'tax_optimize' | 'reduce_risk';\n    title: string;\n    description: string;\n    actionItems: string[];\n    priority: 'high' | 'medium' | 'low';\n    potentialBenefit: string;\n  }>> {\n    const portfolio = await this.getFamilyPortfolio(familyId);\n    const recommendations: Array<{\n      type: 'rebalance' | 'diversify' | 'tax_optimize' | 'reduce_risk';\n      title: string;\n      description: string;\n      actionItems: string[];\n      priority: 'high' | 'medium' | 'low';\n      potentialBenefit: string;\n    }> = [];\n\n    // Check for rebalancing needs\n    if (portfolio.allocation.stocks > 80) {\n      recommendations.push({\n        type: 'rebalance',\n        title: 'Consider Rebalancing Portfolio',\n        description: `Your portfolio is ${portfolio.allocation.stocks.toFixed(1)}% stocks, which may be too aggressive.`,\n        actionItems: [\n          'Add bond ETFs or CDs for stability',\n          'Consider target-date funds for automatic rebalancing',\n          'Review your risk tolerance and investment timeline'\n        ],\n        priority: 'medium',\n        potentialBenefit: 'Reduced portfolio volatility and risk'\n      });\n    }\n\n    // Check for concentration risk\n    if (portfolio.riskMetrics.concentrationRisk > 20) {\n      recommendations.push({\n        type: 'diversify',\n        title: 'Reduce Concentration Risk',\n        description: `Your largest holding represents ${portfolio.riskMetrics.concentrationRisk.toFixed(1)}% of your portfolio.`,\n        actionItems: [\n          'Consider selling some of your largest position',\n          'Invest in broad market index funds',\n          'Add international diversification'\n        ],\n        priority: 'high',\n        potentialBenefit: 'Better risk-adjusted returns through diversification'\n      });\n    }\n\n    // Tax optimization opportunities\n    if (portfolio.totalGainLoss < 0) {\n      recommendations.push({\n        type: 'tax_optimize',\n        title: 'Tax-Loss Harvesting Opportunity',\n        description: 'You have unrealized losses that could offset gains for tax benefits.',\n        actionItems: [\n          'Harvest losses before year-end',\n          'Avoid wash sale rules',\n          'Reinvest in similar but not identical assets'\n        ],\n        priority: 'medium',\n        potentialBenefit: 'Potential tax savings of $500-2,000'\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Update holding (legacy compatibility)\n   */\n  async updateHolding(id: string, updates: Partial<Holding>): Promise<void> {\n    const holding = this.holdings.get(id);\n    if (holding) {\n      Object.assign(holding, updates, { updatedAt: new Date() });\n      this.holdings.set(id, holding);\n      this.persist();\n    }\n  }\n\n  /**\n   * Delete holding (legacy compatibility)\n   */\n  async deleteHolding(id: string): Promise<void> {\n    this.holdings.delete(id);\n    this.persist();\n  }\n\n  /**\n   * Record snapshot (legacy compatibility)\n   */\n  async recordSnapshot(value: number) {\n    // This would be used for historical tracking\n    console.log(`Recording portfolio snapshot: $${value}`);\n  }\n\n  // Private helper methods\n  private generateAccountId(): string {\n    return `inv_acc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateHoldingId(): string {\n    return `holding_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\nexport const investmentService = InvestmentService.getInstance(); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/investments/components/InvestmentPortfolio.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/investments/components/InvestmentPortfolio.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  PieChart,\n  BarChart3,\n  Target,\n  AlertTriangle,\n  Plus,\n  MoreHorizontal,\n  Zap,\n  Shield,\n  Activity\n} from 'lucide-react';\nimport { investmentService } from '@/features/investments/api/investmentService';\nimport { Portfolio, Holding } from '@/types/investments';\nimport { cn } from '@/shared/lib/utils';\n\ninterface InvestmentPortfolioProps {\n  familyId: string;\n  className?: string;\n}\n\nconst InvestmentPortfolio = ({ familyId, className }: InvestmentPortfolioProps) => {\n  const [portfolio, setPortfolio] = useState<Portfolio | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedView, setSelectedView] = useState<'overview' | 'holdings' | 'performance' | 'allocation'>('overview');\n\n  useEffect(() => {\n    loadPortfolio();\n  }, [familyId]);\n\n  const loadPortfolio = async () => {\n    try {\n      setLoading(true);\n      const portfolioData = await investmentService.getFamilyPortfolio(familyId);\n      setPortfolio(portfolioData);\n    } catch (error) {\n      console.error('Failed to load portfolio:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(amount);\n  };\n\n  const formatPercentage = (value: number) => {\n    return `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`;\n  };\n\n  const getPerformanceColor = (value: number) => {\n    if (value > 0) return 'text-green-400';\n    if (value < 0) return 'text-red-400';\n    return 'text-white/60';\n  };\n\n  const getHoldingIcon = (assetType: string) => {\n    switch (assetType) {\n      case 'stock':\n        return <TrendingUp className=\"w-4 h-4\" />;\n      case 'bond':\n        return <Shield className=\"w-4 h-4\" />;\n      case 'etf':\n      case 'mutual_fund':\n        return <PieChart className=\"w-4 h-4\" />;\n      case 'crypto':\n        return <Zap className=\"w-4 h-4\" />;\n      default:\n        return <Activity className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getAssetTypeColor = (assetType: string) => {\n    switch (assetType) {\n      case 'stock':\n        return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n      case 'bond':\n        return 'bg-green-500/20 text-green-400 border-green-500/30';\n      case 'etf':\n      case 'mutual_fund':\n        return 'bg-purple-500/20 text-purple-400 border-purple-500/30';\n      case 'crypto':\n        return 'bg-orange-500/20 text-orange-400 border-orange-500/30';\n      default:\n        return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={cn(\"space-y-6\", className)}>\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 animate-pulse\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"h-6 bg-white/[0.05] rounded w-32\"></div>\n              <div className=\"h-6 bg-white/[0.05] rounded w-24\"></div>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"h-4 bg-white/[0.05] rounded w-full\"></div>\n              <div className=\"h-4 bg-white/[0.05] rounded w-3/4\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (!portfolio) {\n    return (\n      <div className={cn(\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-12 text-center\", className)}>\n        <PieChart className=\"w-16 h-16 text-white/20 mx-auto mb-4\" />\n        <h3 className=\"text-xl font-bold text-white mb-2\">No Investment Portfolio Found</h3>\n        <p className=\"text-white/60 mb-6\">Start building your investment portfolio by linking investment accounts.</p>\n        <button className=\"bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-xl transition-colors\">\n          Link Investment Account\n        </button>\n      </div>\n    );\n  }\n\n  const renderOverview = () => (\n    <div className=\"space-y-4 sm:space-y-6\">\n      {/* Portfolio Summary */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n        <h3 className=\"text-lg sm:text-xl font-bold text-white mb-4 sm:mb-6 flex items-center gap-3\">\n          <PieChart className=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-400\" />\n          Portfolio Summary\n        </h3>\n        \n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6\">\n          <div className=\"space-y-2\">\n            <p className=\"text-white/60 text-xs sm:text-sm\">Total Value</p>\n            <p className=\"text-xl sm:text-2xl lg:text-3xl font-bold text-white truncate\">{formatCurrency(portfolio.totalValue)}</p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <p className=\"text-white/60 text-xs sm:text-sm\">Total Gain/Loss</p>\n            <div className=\"space-y-1\">\n              <p className={cn(\"text-lg sm:text-xl lg:text-2xl font-bold truncate\", getPerformanceColor(portfolio.totalGainLoss))}>\n                {formatCurrency(portfolio.totalGainLoss)}\n              </p>\n              <p className={cn(\"text-xs sm:text-sm\", getPerformanceColor(portfolio.totalGainLossPercent))}>\n                {formatPercentage(portfolio.totalGainLossPercent)}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"space-y-2 sm:col-span-2 lg:col-span-1\">\n            <p className=\"text-white/60 text-xs sm:text-sm\">Cost Basis</p>\n            <p className=\"text-lg sm:text-xl font-bold text-white truncate\">{formatCurrency(portfolio.totalCostBasis)}</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Performance Metrics */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n        <h3 className=\"text-base sm:text-lg font-bold text-white mb-3 sm:mb-4 flex items-center gap-3\">\n          <BarChart3 className=\"w-4 h-4 sm:w-5 sm:h-5 text-blue-400\" />\n          Performance Metrics\n        </h3>\n        \n        <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-3 sm:gap-4\">\n          {Object.entries(portfolio.performance.returns).map(([period, value]) => (\n            <div key={period} className=\"text-center p-2 sm:p-3 bg-white/[0.02] rounded-lg border border-white/[0.05]\">\n              <p className=\"text-white/60 text-xs sm:text-sm capitalize truncate\">{period.replace('d', ' Days')}</p>\n              <p className={cn(\"text-sm sm:text-base lg:text-lg font-bold truncate\", getPerformanceColor(value))}>\n                {formatPercentage(value)}\n              </p>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4 mt-4 sm:mt-6 pt-4 sm:pt-6 border-t border-white/[0.08]\">\n          <div className=\"text-center p-3 bg-white/[0.02] rounded-lg border border-white/[0.05]\">\n            <p className=\"text-white/60 text-xs sm:text-sm\">Sharpe Ratio</p>\n            <p className=\"text-base sm:text-lg font-bold text-white\">{portfolio.performance.sharpeRatio.toFixed(2)}</p>\n          </div>\n          <div className=\"text-center p-3 bg-white/[0.02] rounded-lg border border-white/[0.05]\">\n            <p className=\"text-white/60 text-xs sm:text-sm\">Volatility</p>\n            <p className=\"text-base sm:text-lg font-bold text-white\">{portfolio.performance.volatility.toFixed(1)}%</p>\n          </div>\n          <div className=\"text-center p-3 bg-white/[0.02] rounded-lg border border-white/[0.05] sm:col-span-3 lg:col-span-1\">\n            <p className=\"text-white/60 text-xs sm:text-sm\">Max Drawdown</p>\n            <p className=\"text-base sm:text-lg font-bold text-red-400\">{portfolio.performance.maxDrawdown.toFixed(1)}%</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Asset Allocation */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n        <h3 className=\"text-base sm:text-lg font-bold text-white mb-3 sm:mb-4 flex items-center gap-3\">\n          <Target className=\"w-4 h-4 sm:w-5 sm:h-5 text-blue-400\" />\n          Asset Allocation\n        </h3>\n        \n        <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-3 sm:gap-4\">\n          <div className=\"text-center p-3 bg-white/[0.02] rounded-lg border border-white/[0.05]\">\n            <p className=\"text-white/60 text-xs sm:text-sm\">Stocks</p>\n            <p className=\"text-base sm:text-lg lg:text-xl font-bold text-blue-400\">{portfolio.allocation.stocks.toFixed(1)}%</p>\n          </div>\n          <div className=\"text-center p-3 bg-white/[0.02] rounded-lg border border-white/[0.05]\">\n            <p className=\"text-white/60 text-xs sm:text-sm\">Bonds</p>\n            <p className=\"text-base sm:text-lg lg:text-xl font-bold text-green-400\">{portfolio.allocation.bonds.toFixed(1)}%</p>\n          </div>\n          <div className=\"text-center p-3 bg-white/[0.02] rounded-lg border border-white/[0.05]\">\n            <p className=\"text-white/60 text-xs sm:text-sm\">Cash</p>\n            <p className=\"text-base sm:text-lg lg:text-xl font-bold text-yellow-400\">{portfolio.allocation.cash.toFixed(1)}%</p>\n          </div>\n          <div className=\"text-center p-3 bg-white/[0.02] rounded-lg border border-white/[0.05]\">\n            <p className=\"text-white/60 text-xs sm:text-sm\">Other</p>\n            <p className=\"text-base sm:text-lg lg:text-xl font-bold text-white/60\">{portfolio.allocation.other.toFixed(1)}%</p>\n          </div>\n        </div>\n\n        {/* Sector Breakdown */}\n        {Object.keys(portfolio.allocation.sectors).length > 0 && (\n          <div className=\"mt-4 sm:mt-6 pt-4 sm:pt-6 border-t border-white/[0.08]\">\n            <p className=\"text-white/80 font-medium mb-3 text-sm sm:text-base\">Sector Breakdown</p>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2 sm:gap-3\">\n              {Object.entries(portfolio.allocation.sectors).map(([sector, percentage]) => (\n                <div key={sector} className=\"flex justify-between p-2 sm:p-3 bg-white/[0.02] rounded-lg border border-white/[0.05]\">\n                  <span className=\"text-white/60 text-xs sm:text-sm truncate flex-1\">{sector}</span>\n                  <span className=\"text-white text-xs sm:text-sm font-medium ml-2\">{percentage.toFixed(1)}%</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Risk Metrics */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n        <h3 className=\"text-base sm:text-lg font-bold text-white mb-3 sm:mb-4 flex items-center gap-3\">\n          <AlertTriangle className=\"w-4 h-4 sm:w-5 sm:h-5 text-yellow-400\" />\n          Risk Analysis\n        </h3>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6\">\n          <div className=\"space-y-3\">\n            <p className=\"text-white/60 text-xs sm:text-sm mb-2\">Concentration Risk</p>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex-1 bg-white/[0.05] rounded-full h-2 sm:h-3\">\n                <div \n                  className=\"bg-red-400 h-2 sm:h-3 rounded-full transition-all duration-300\" \n                  style={{ width: `${Math.min(portfolio.riskMetrics.concentrationRisk, 100)}%` }}\n                ></div>\n              </div>\n              <span className=\"text-white text-xs sm:text-sm font-medium min-w-[3rem]\">{portfolio.riskMetrics.concentrationRisk.toFixed(1)}%</span>\n            </div>\n          </div>\n          \n          <div className=\"space-y-3\">\n            <p className=\"text-white/60 text-xs sm:text-sm mb-2\">Sector Concentration</p>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex-1 bg-white/[0.05] rounded-full h-2 sm:h-3\">\n                <div \n                  className=\"bg-orange-400 h-2 sm:h-3 rounded-full transition-all duration-300\" \n                  style={{ width: `${Math.min(portfolio.riskMetrics.sectorConcentration, 100)}%` }}\n                ></div>\n              </div>\n              <span className=\"text-white text-xs sm:text-sm font-medium min-w-[3rem]\">{portfolio.riskMetrics.sectorConcentration.toFixed(1)}%</span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4 mt-4 sm:mt-6\">\n          <div className=\"text-center p-3 bg-white/[0.02] rounded-lg border border-white/[0.05]\">\n            <p className=\"text-white/60 text-xs sm:text-sm\">Value at Risk (95%)</p>\n            <p className=\"text-sm sm:text-base lg:text-lg font-bold text-red-400 truncate\">{formatCurrency(portfolio.riskMetrics.var95)}</p>\n          </div>\n          <div className=\"text-center p-3 bg-white/[0.02] rounded-lg border border-white/[0.05]\">\n            <p className=\"text-white/60 text-xs sm:text-sm\">Value at Risk (99%)</p>\n            <p className=\"text-sm sm:text-base lg:text-lg font-bold text-red-400 truncate\">{formatCurrency(portfolio.riskMetrics.var99)}</p>\n          </div>\n          <div className=\"text-center p-3 bg-white/[0.02] rounded-lg border border-white/[0.05] sm:col-span-3 lg:col-span-1\">\n            <p className=\"text-white/60 text-xs sm:text-sm\">Correlation</p>\n            <p className=\"text-base sm:text-lg font-bold text-white\">{portfolio.riskMetrics.correlation.toFixed(2)}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderAllocation = () => (\n    <div className=\"space-y-6\">\n      {/* Asset Allocation Overview */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n        <h3 className=\"text-xl font-bold text-white mb-6 flex items-center gap-3\">\n          <Target className=\"w-6 h-6 text-blue-400\" />\n          Asset Allocation Management\n        </h3>\n        \n        {/* Main Allocation Grid */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-8\">\n          <div className=\"text-center\">\n            <div className=\"w-12 h-12 sm:w-16 sm:h-16 mx-auto mb-3 rounded-full bg-blue-500/20 flex items-center justify-center\">\n              <span className=\"text-lg sm:text-2xl font-bold text-blue-400\">{portfolio.allocation.stocks.toFixed(0)}%</span>\n            </div>\n            <p className=\"text-white/60 text-sm mb-1\">Stocks</p>\n            <p className=\"text-blue-400 font-semibold text-xs sm:text-sm\">{formatCurrency(portfolio.totalValue * portfolio.allocation.stocks / 100)}</p>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"w-12 h-12 sm:w-16 sm:h-16 mx-auto mb-3 rounded-full bg-green-500/20 flex items-center justify-center\">\n              <span className=\"text-lg sm:text-2xl font-bold text-green-400\">{portfolio.allocation.bonds.toFixed(0)}%</span>\n            </div>\n            <p className=\"text-white/60 text-sm mb-1\">Bonds</p>\n            <p className=\"text-green-400 font-semibold text-xs sm:text-sm\">{formatCurrency(portfolio.totalValue * portfolio.allocation.bonds / 100)}</p>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"w-12 h-12 sm:w-16 sm:h-16 mx-auto mb-3 rounded-full bg-yellow-500/20 flex items-center justify-center\">\n              <span className=\"text-lg sm:text-2xl font-bold text-yellow-400\">{portfolio.allocation.cash.toFixed(0)}%</span>\n            </div>\n            <p className=\"text-white/60 text-sm mb-1\">Cash</p>\n            <p className=\"text-yellow-400 font-semibold text-xs sm:text-sm\">{formatCurrency(portfolio.totalValue * portfolio.allocation.cash / 100)}</p>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"w-12 h-12 sm:w-16 sm:h-16 mx-auto mb-3 rounded-full bg-purple-500/20 flex items-center justify-center\">\n              <span className=\"text-lg sm:text-2xl font-bold text-purple-400\">{portfolio.allocation.other.toFixed(0)}%</span>\n            </div>\n            <p className=\"text-white/60 text-sm mb-1\">Other</p>\n            <p className=\"text-purple-400 font-semibold text-xs sm:text-sm\">{formatCurrency(portfolio.totalValue * portfolio.allocation.other / 100)}</p>\n          </div>\n        </div>\n\n        {/* Allocation Actions */}\n        <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n          <button className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-xl transition-colors flex items-center justify-center gap-2 text-sm\">\n            <Target className=\"w-4 h-4\" />\n            <span className=\"hidden sm:inline\">Rebalance Portfolio</span>\n            <span className=\"sm:hidden\">Rebalance</span>\n          </button>\n          <button className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-xl transition-colors flex items-center justify-center gap-2 text-sm\">\n            <Plus className=\"w-4 h-4\" />\n            <span className=\"hidden sm:inline\">Add Asset Class</span>\n            <span className=\"sm:hidden\">Add Asset</span>\n          </button>\n          <button className=\"bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-xl transition-colors flex items-center justify-center gap-2 text-sm\">\n            <BarChart3 className=\"w-4 h-4\" />\n            <span className=\"hidden sm:inline\">Optimize Allocation</span>\n            <span className=\"sm:hidden\">Optimize</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Sector Allocation Details */}\n      {Object.keys(portfolio.allocation.sectors).length > 0 && (\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <h3 className=\"text-lg font-bold text-white mb-4 flex items-center gap-3\">\n            <PieChart className=\"w-5 h-5 text-green-400\" />\n            Sector Allocation\n          </h3>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6\">\n            {Object.entries(portfolio.allocation.sectors).map(([sector, percentage]) => (\n              <div key={sector} className=\"flex items-center justify-between p-3 sm:p-4 bg-white/[0.03] rounded-xl border border-white/[0.05]\">\n                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n                  <div className=\"w-8 h-8 sm:w-10 sm:h-10 rounded-lg bg-gradient-to-br from-blue-500/20 to-purple-500/20 flex items-center justify-center flex-shrink-0\">\n                    <Activity className=\"w-4 h-4 sm:w-5 sm:h-5 text-blue-400\" />\n                  </div>\n                  <div className=\"min-w-0 flex-1\">\n                    <p className=\"font-medium text-white text-sm sm:text-base truncate\">{sector}</p>\n                    <p className=\"text-white/60 text-xs sm:text-sm\">{formatCurrency(portfolio.totalValue * percentage / 100)}</p>\n                  </div>\n                </div>\n                <div className=\"text-right flex-shrink-0\">\n                  <p className=\"text-sm sm:text-lg font-bold text-white\">{percentage.toFixed(1)}%</p>\n                  <div className=\"w-12 sm:w-16 bg-white/[0.05] rounded-full h-2 mt-1\">\n                    <div \n                      className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${Math.min(percentage, 100)}%` }}\n                    ></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Risk vs Return Analysis */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n        <h3 className=\"text-lg font-bold text-white mb-4 flex items-center gap-3\">\n          <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />\n          Risk vs Return Analysis\n        </h3>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-6\">\n          <div className=\"text-center p-4 bg-white/[0.03] rounded-xl border border-white/[0.05]\">\n            <Shield className=\"w-6 h-6 sm:w-8 sm:h-8 text-green-400 mx-auto mb-3\" />\n            <p className=\"text-white/60 text-sm mb-1\">Conservative</p>\n            <p className=\"text-base sm:text-lg font-bold text-green-400\">Low Risk</p>\n            <p className=\"text-white/60 text-xs\">20% Stocks, 70% Bonds, 10% Cash</p>\n          </div>\n          <div className=\"text-center p-4 bg-blue-500/10 rounded-xl border border-blue-500/20\">\n            <Target className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-400 mx-auto mb-3\" />\n            <p className=\"text-white/60 text-sm mb-1\">Current Allocation</p>\n            <p className=\"text-base sm:text-lg font-bold text-blue-400\">Moderate Risk</p>\n            <p className=\"text-white/60 text-xs\">{portfolio.allocation.stocks.toFixed(0)}% Stocks, {portfolio.allocation.bonds.toFixed(0)}% Bonds</p>\n          </div>\n          <div className=\"text-center p-4 bg-white/[0.03] rounded-xl border border-white/[0.05]\">\n            <TrendingUp className=\"w-6 h-6 sm:w-8 sm:h-8 text-red-400 mx-auto mb-3\" />\n            <p className=\"text-white/60 text-sm mb-1\">Aggressive</p>\n            <p className=\"text-base sm:text-lg font-bold text-red-400\">High Risk</p>\n            <p className=\"text-white/60 text-xs\">80% Stocks, 15% Bonds, 5% Cash</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Allocation History & Rebalancing */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n        <h3 className=\"text-lg font-bold text-white mb-4 flex items-center gap-3\">\n          <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n          Recent Allocation Changes\n        </h3>\n        \n        <div className=\"flex items-center justify-between p-4 bg-white/[0.03] rounded-xl border border-white/[0.05]\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 bg-blue-500/20 rounded-lg flex items-center justify-center\">\n              <TrendingUp className=\"w-4 h-4 text-blue-400\" />\n            </div>\n            <div>\n              <p className=\"font-medium text-white\">Increased stock allocation</p>\n              <p className=\"text-white/60 text-sm\">Rebalanced on Dec 15, 2024</p>\n            </div>\n          </div>\n          <span className=\"text-blue-400 font-bold\">+5%</span>\n        </div>\n\n        <div className=\"flex items-center justify-between p-4 bg-white/[0.03] rounded-xl border border-white/[0.05] mt-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 bg-green-500/20 rounded-lg flex items-center justify-center\">\n              <Shield className=\"w-4 h-4 text-green-400\" />\n            </div>\n            <div>\n              <p className=\"font-medium text-white\">Added bond diversification</p>\n              <p className=\"text-white/60 text-sm\">Rebalanced on Dec 1, 2024</p>\n            </div>\n          </div>\n          <span className=\"text-green-400 font-bold\">+3%</span>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderHoldings = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-xl font-bold text-white\">Holdings</h3>\n        <button className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-xl transition-colors flex items-center gap-2\">\n          <Plus className=\"w-4 h-4\" />\n          Add Holding\n        </button>\n      </div>\n\n      {portfolio.holdings.map((holding) => (\n        <div\n          key={holding.id}\n          className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 hover:bg-white/[0.03] transition-all duration-300\"\n        >\n          <div className=\"flex items-center gap-4\">\n            {/* Symbol & Icon */}\n            <div className=\"flex-shrink-0\">\n              <div className={cn(\n                \"w-12 h-12 rounded-2xl flex items-center justify-center border\",\n                getAssetTypeColor(holding.assetType)\n              )}>\n                {getHoldingIcon(holding.assetType)}\n              </div>\n            </div>\n\n            {/* Holding Details */}\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-2\">\n                <div className=\"min-w-0 flex-1\">\n                  <h4 className=\"font-semibold text-white text-sm sm:text-base\">{holding.symbol}</h4>\n                  <p className=\"text-white/60 text-xs sm:text-sm truncate\">{holding.name}</p>\n                  <div className=\"flex items-center gap-2 sm:gap-3 mt-1\">\n                    <span className={cn(\n                      \"text-xs px-2 py-1 rounded-lg border font-medium\",\n                      getAssetTypeColor(holding.assetType)\n                    )}>\n                      {holding.assetType.toUpperCase()}\n                    </span>\n                    {holding.sector && (\n                      <span className=\"text-xs text-white/60 truncate\">{holding.sector}</span>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between sm:block text-right\">\n                  <div>\n                    <p className=\"font-bold text-white text-sm sm:text-base\">{formatCurrency(holding.marketValue)}</p>\n                    <p className={cn(\"text-xs sm:text-sm\", getPerformanceColor(holding.unrealizedGainLoss))}>\n                      {formatCurrency(holding.unrealizedGainLoss)} ({formatPercentage(holding.unrealizedGainLossPercent)})\n                    </p>\n                    <div className=\"flex sm:block items-center gap-1 sm:gap-0 mt-1 text-xs text-white/60\">\n                      <span>{holding.quantity} shares</span>\n                      <span className=\"sm:block inline\">@{formatCurrency(holding.currentPrice)}</span>\n                    </div>\n                  </div>\n\n                  {/* Action Menu */}\n                  <div className=\"flex-shrink-0 ml-2\">\n                    <button className=\"p-2 rounded-lg hover:bg-white/[0.05] transition-colors\"\n                      onClick={(e: React.MouseEvent) => e.stopPropagation()}\n                    >\n                      <MoreHorizontal className=\"w-4 h-4 text-white/60\" />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Navigation Tabs */}\n      <div className=\"bg-white/[0.02] rounded-xl p-1 border border-white/[0.08]\">\n        {/* Mobile: Scrollable tabs */}\n        <div className=\"flex sm:hidden overflow-x-auto gap-1 pb-1 scrollbar-hide\">\n          {[\n            { id: 'overview', label: 'Overview', icon: PieChart },\n            { id: 'holdings', label: 'Holdings', icon: TrendingUp },\n            { id: 'performance', label: 'Performance', icon: BarChart3 },\n            { id: 'allocation', label: 'Allocation', icon: Target }\n          ].map(({ id, label, icon: Icon }) => (\n            <button\n              key={id}\n              onClick={() => setSelectedView(id as any)}\n              className={cn(\n                \"flex items-center gap-2 px-3 py-2 rounded-lg transition-all text-xs whitespace-nowrap flex-shrink-0\",\n                selectedView === id\n                  ? \"bg-blue-500 text-white\"\n                  : \"text-white/60 hover:text-white hover:bg-white/[0.05]\"\n              )}\n            >\n              <Icon className=\"w-3 h-3\" />\n              {label}\n            </button>\n          ))}\n        </div>\n        \n        {/* Desktop: Grid tabs */}\n        <div className=\"hidden sm:grid grid-cols-4 gap-1\">\n          {[\n            { id: 'overview', label: 'Overview', icon: PieChart },\n            { id: 'holdings', label: 'Holdings', icon: TrendingUp },\n            { id: 'performance', label: 'Performance', icon: BarChart3 },\n            { id: 'allocation', label: 'Allocation', icon: Target }\n          ].map(({ id, label, icon: Icon }) => (\n            <button\n              key={id}\n              onClick={() => setSelectedView(id as any)}\n              className={cn(\n                \"flex items-center justify-center gap-2 px-4 py-2 rounded-lg transition-all text-sm\",\n                selectedView === id\n                  ? \"bg-blue-500 text-white\"\n                  : \"text-white/60 hover:text-white hover:bg-white/[0.05]\"\n              )}\n            >\n              <Icon className=\"w-4 h-4\" />\n              {label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Content */}\n      {selectedView === 'overview' && renderOverview()}\n      {selectedView === 'holdings' && renderHoldings()}\n      {selectedView === 'performance' && renderOverview()} {/* Reuse overview for now */}\n      {selectedView === 'allocation' && renderAllocation()}\n    </div>\n  );\n};\n\nexport default InvestmentPortfolio;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/investments/components/InvestmentTrackerPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/investments/components/InvestmentTrackerPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { investmentService } from '@/features/investments/api/investmentService';\nimport { Portfolio } from '@/types/investments';\nimport InvestmentPortfolio from './InvestmentPortfolio';\nimport {\n  TrendingUp,\n  Plus,\n  DollarSign,\n  PieChart as PieIcon,\n  Activity,\n  Target,\n  AlertTriangle,\n  ArrowLeft\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { cn } from '@/shared/lib/utils';\n\nconst InvestmentTrackerPage = () => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [portfolio, setPortfolio] = useState<Portfolio | null>(null);\n  const [recommendations, setRecommendations] = useState<any[]>([]);\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  const load = async () => {\n    try {\n      // Use demo family ID\n      const familyId = 'demo_family';\n      const [portfolioData, recs] = await Promise.all([\n        investmentService.getFamilyPortfolio(familyId),\n        investmentService.getInvestmentRecommendations(familyId)\n      ]);\n      setPortfolio(portfolioData);\n      setRecommendations(recs);\n    } catch (error) {\n      console.error('Failed to load investment data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (amt: number) =>\n    new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', maximumFractionDigits: 0 }).format(amt);\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-500/20 text-red-400 border-red-500/30';\n      case 'medium':\n        return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';\n      case 'low':\n        return 'bg-green-500/20 text-green-400 border-green-500/30';\n      default:\n        return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-black text-white\">\n        <div className=\"responsive-padding-md space-y-4 sm:space-y-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-6 sm:h-8 bg-white/[0.05] rounded w-48 sm:w-64 mb-4\"></div>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n                  <div className=\"h-5 sm:h-6 bg-white/[0.05] rounded w-24 sm:w-32 mb-2\"></div>\n                  <div className=\"h-6 sm:h-8 bg-white/[0.05] rounded w-16 sm:w-24\"></div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <div className=\"responsive-padding-md space-y-6 sm:space-y-8\">\n        {/* Back Button */}\n        <button\n          onClick={() => navigate('/')}\n          className=\"flex items-center gap-2 px-3 py-2 rounded-xl text-white/80 hover:text-white hover:bg-white/[0.05] transition-colors min-h-[44px]\"\n        >\n          <ArrowLeft className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n          <span className=\"text-sm sm:text-base\">Dashboard</span>\n        </button>\n\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 sm:gap-0\">\n          <div className=\"min-w-0 flex-1\">\n            <h1 className=\"text-2xl sm:text-3xl md:text-4xl font-bold text-white flex items-center gap-3 mb-2\">\n              <Activity className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-400 flex-shrink-0\" />\n              <span className=\"truncate\">Investment Portfolio</span>\n            </h1>\n            <p className=\"text-white/60 text-sm sm:text-base leading-relaxed\">\n              Track your investments, analyze performance, and manage risk\n            </p>\n          </div>\n          <button className=\"w-full sm:w-auto bg-blue-500 hover:bg-blue-600 text-white px-4 sm:px-6 py-3 rounded-xl transition-colors flex items-center justify-center gap-2 min-h-[48px]\">\n            <Plus className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n            <span className=\"text-sm sm:text-base\">Add Investment</span>\n          </button>\n        </div>\n\n        {/* Quick Stats */}\n        {portfolio && (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6\">\n            <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n              <div className=\"flex items-center gap-3 mb-3 sm:mb-4\">\n                <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-blue-500/20 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <DollarSign className=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-400\" />\n                </div>\n                <p className=\"text-white/60 text-sm sm:text-base font-medium\">Portfolio Value</p>\n              </div>\n              <p className=\"text-xl sm:text-2xl font-bold text-white truncate\">\n                {formatCurrency(portfolio.totalValue)}\n              </p>\n            </div>\n            \n            <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n              <div className=\"flex items-center gap-3 mb-3 sm:mb-4\">\n                <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-green-500/20 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <TrendingUp className=\"w-5 h-5 sm:w-6 sm:h-6 text-green-400\" />\n                </div>\n                <p className=\"text-white/60 text-sm sm:text-base font-medium\">Total Gain/Loss</p>\n              </div>\n              <div className=\"space-y-1\">\n                <p className={cn(\"text-xl sm:text-2xl font-bold truncate\", portfolio.totalGainLoss >= 0 ? \"text-green-400\" : \"text-red-400\")}>\n                  {formatCurrency(portfolio.totalGainLoss)}\n                </p>\n                <p className={cn(\"text-xs sm:text-sm\", portfolio.totalGainLossPercent >= 0 ? \"text-green-400\" : \"text-red-400\")}>\n                  {portfolio.totalGainLossPercent >= 0 ? '+' : ''}{portfolio.totalGainLossPercent.toFixed(2)}%\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n              <div className=\"flex items-center gap-3 mb-3 sm:mb-4\">\n                <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-purple-500/20 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Target className=\"w-5 h-5 sm:w-6 sm:h-6 text-purple-400\" />\n                </div>\n                <p className=\"text-white/60 text-sm sm:text-base font-medium\">Asset Allocation</p>\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-lg sm:text-xl font-bold text-white\">{portfolio.allocation.stocks.toFixed(0)}% Stocks</p>\n                <p className=\"text-xs sm:text-sm text-white/60\">\n                  {portfolio.allocation.bonds.toFixed(0)}% Bonds, {portfolio.allocation.other.toFixed(0)}% Other\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6 sm:col-span-2 lg:col-span-1\">\n              <div className=\"flex items-center gap-3 mb-3 sm:mb-4\">\n                <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-yellow-500/20 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <AlertTriangle className=\"w-5 h-5 sm:w-6 sm:h-6 text-yellow-400\" />\n                </div>\n                <p className=\"text-white/60 text-sm sm:text-base font-medium\">Risk Score</p>\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-xl sm:text-2xl font-bold text-yellow-400\">{portfolio.riskMetrics.concentrationRisk.toFixed(0)}</p>\n                <p className=\"text-xs sm:text-sm text-white/60\">Concentration Risk</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Investment Recommendations */}\n        {recommendations.length > 0 && (\n          <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n            <h2 className=\"text-lg sm:text-xl font-bold text-white mb-4 sm:mb-6 flex items-center gap-3\">\n              <Target className=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-400\" />\n              Investment Recommendations\n            </h2>\n            \n            <div className=\"space-y-3 sm:space-y-4\">\n              {recommendations.map((rec, index) => (\n                <div key={index} className=\"bg-white/[0.03] rounded-xl border border-white/[0.05] p-4 sm:p-6\">\n                  <div className=\"flex flex-col lg:flex-row lg:items-start justify-between mb-3 sm:mb-4 gap-3 lg:gap-4\">\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 mb-2 sm:mb-3\">\n                        <span className={cn(\n                          \"text-xs px-2 py-1 rounded-lg border font-medium w-fit\",\n                          getPriorityColor(rec.priority)\n                        )}>\n                          {rec.priority.toUpperCase()}\n                        </span>\n                        <h3 className=\"font-semibold text-white text-sm sm:text-base\">{rec.title}</h3>\n                      </div>\n                      <p className=\"text-white/70 text-xs sm:text-sm mb-3 sm:mb-4 leading-relaxed\">{rec.description}</p>\n                      \n                      <div className=\"space-y-2\">\n                        <p className=\"text-white/80 text-xs sm:text-sm font-medium\">Action Items:</p>\n                        <ul className=\"space-y-1 sm:space-y-2\">\n                          {rec.actionItems.map((item: string, itemIndex: number) => (\n                            <li key={itemIndex} className=\"text-white/60 text-xs sm:text-sm flex items-start gap-2\">\n                              <span className=\"text-blue-400 mt-0.5 flex-shrink-0\">•</span>\n                              <span className=\"leading-relaxed\">{item}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-left lg:text-right lg:flex-shrink-0\">\n                      <p className=\"text-green-400 text-xs sm:text-sm font-medium\">{rec.potentialBenefit}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Portfolio Component */}\n        <InvestmentPortfolio familyId=\"demo_family\" />\n      </div>\n    </div>\n  );\n};\n\nexport default InvestmentTrackerPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/investments/components/PortfolioAllocationChart.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/investments/components/PortfolioAllocationChart.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * PortfolioAllocationChart - Investment allocation visualization using StackedBarChart\n * Shows asset allocation over time with Apple-style design\n */\n\nimport React, { useMemo, useCallback, useState } from 'react';\nimport { StackedBarChart, StackedBarDataPoint } from '@/components/charts/StackedBarChart';\nimport { investmentService } from '@/features/investments/api/investmentService';\nimport { Portfolio } from '@/types/investments';\nimport { TrendingUp, PieChart, Target, BarChart3, Rebalance, Settings, AlertTriangle } from 'lucide-react';\nimport { Button } from '@/shared/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/ui/card';\n\ninterface PortfolioAllocationChartProps {\n  familyId?: string;\n  showTargetAllocation?: boolean;\n  showRebalanceSignals?: boolean;\n  displayMode?: 'absolute' | 'percentage';\n  timeRange?: '1Y' | '2Y' | '5Y' | 'ALL';\n  className?: string;\n}\n\n// Asset class configuration with colors and target allocations\nconst ASSET_CLASSES = {\n  stocks: {\n    label: 'Stocks',\n    color: '#007AFF', // Apple blue\n    target: 60,\n    description: 'Equity investments and growth assets'\n  },\n  bonds: {\n    label: 'Bonds',\n    color: '#32D74B', // Apple green\n    target: 25,\n    description: 'Fixed income and stable investments'\n  },\n  cash: {\n    label: 'Cash & Cash Equivalents',\n    color: '#FFCC00', // Apple yellow\n    target: 10,\n    description: 'High liquidity and emergency funds'\n  },\n  real_estate: {\n    label: 'Real Estate',\n    color: '#FF9F0A', // Apple orange\n    target: 5,\n    description: 'REITs and real estate investments'\n  },\n  crypto: {\n    label: 'Cryptocurrency',\n    color: '#AF52DE', // Apple purple\n    target: 0,\n    description: 'Digital assets and alternative investments'\n  },\n  commodities: {\n    label: 'Commodities',\n    color: '#5AC8FA', // Apple teal\n    target: 0,\n    description: 'Precious metals and commodity investments'\n  }\n};\n\nconst PortfolioAllocationChart: React.FC<PortfolioAllocationChartProps> = ({\n  familyId = 'demo_family',\n  showTargetAllocation = true,\n  showRebalanceSignals = true,\n  displayMode = 'percentage',\n  timeRange = '1Y',\n  className\n}) => {\n  const [portfolio, setPortfolio] = useState<Portfolio | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  // Generate mock historical allocation data\n  const chartData = useMemo((): StackedBarDataPoint[] => {\n    // Mock quarterly portfolio allocation data\n    const quarters = [\n      { period: '2024-Q1', label: 'Q1 2024' },\n      { period: '2024-Q2', label: 'Q2 2024' },\n      { period: '2024-Q3', label: 'Q3 2024' },\n      { period: '2024-Q4', label: 'Q4 2024' }\n    ];\n\n    return quarters.map(({ period, label }, index) => {\n      // Simulate portfolio drift over time\n      const baseAllocations = {\n        stocks: 65 + (Math.random() - 0.5) * 10,\n        bonds: 20 + (Math.random() - 0.5) * 8,\n        cash: 8 + (Math.random() - 0.5) * 4,\n        real_estate: 5 + (Math.random() - 0.5) * 3,\n        crypto: 2 + (Math.random() - 0.5) * 2\n      };\n\n      // Normalize to 100%\n      const total = Object.values(baseAllocations).reduce((sum, val) => sum + val, 0);\n      const normalized = Object.fromEntries(\n        Object.entries(baseAllocations).map(([key, val]) => [key, (val / total) * 100])\n      );\n\n      // Convert to absolute values for a $500k portfolio\n      const portfolioValue = 500000 + (index * 25000); // Growing portfolio\n      const absoluteValues = Object.fromEntries(\n        Object.entries(normalized).map(([key, percentage]) => [\n          key, \n          (percentage / 100) * portfolioValue\n        ])\n      );\n\n      return {\n        date: period,\n        label,\n        total: portfolioValue,\n        ...absoluteValues\n      } as StackedBarDataPoint;\n    });\n  }, [timeRange]);\n\n  // Target allocation data for comparison\n  const targetAllocationData = useMemo((): StackedBarDataPoint[] => {\n    if (!showTargetAllocation) return [];\n    \n    const portfolioValue = 500000; // Example portfolio value\n    const targetData = {\n      date: 'target',\n      label: 'Target Allocation',\n      total: portfolioValue,\n      ...Object.fromEntries(\n        Object.entries(ASSET_CLASSES).map(([key, config]) => [\n          key,\n          (config.target / 100) * portfolioValue\n        ])\n      )\n    };\n\n    return [targetData as StackedBarDataPoint];\n  }, [showTargetAllocation]);\n\n  // Combined data for comparison view\n  const combinedData = useMemo(() => {\n    if (!showTargetAllocation) return chartData;\n    return [...chartData, ...targetAllocationData];\n  }, [chartData, targetAllocationData, showTargetAllocation]);\n\n  // Chart series configuration\n  const chartSeries = useMemo(() => {\n    return Object.entries(ASSET_CLASSES).map(([key, config]) => ({\n      dataKey: key,\n      label: config.label,\n      color: config.color\n    }));\n  }, []);\n\n  // Calculate allocation insights\n  const allocationInsights = useMemo(() => {\n    if (chartData.length === 0) return null;\n    \n    const currentAllocation = chartData[chartData.length - 1];\n    const totalValue = currentAllocation.total as number;\n    \n    // Calculate current percentages\n    const currentPercentages = Object.fromEntries(\n      Object.entries(ASSET_CLASSES).map(([key, config]) => [\n        key,\n        ((currentAllocation[key] as number) / totalValue) * 100\n      ])\n    );\n\n    // Calculate drift from target\n    const drifts = Object.fromEntries(\n      Object.entries(ASSET_CLASSES).map(([key, config]) => [\n        key,\n        currentPercentages[key] - config.target\n      ])\n    );\n\n    // Identify assets that need rebalancing (> 5% drift)\n    const rebalanceNeeded = Object.entries(drifts)\n      .filter(([_, drift]) => Math.abs(drift) > 5)\n      .map(([asset, drift]) => ({\n        asset,\n        drift,\n        action: drift > 0 ? 'reduce' : 'increase',\n        label: ASSET_CLASSES[asset as keyof typeof ASSET_CLASSES].label\n      }));\n\n    // Calculate portfolio performance metrics\n    const firstQuarter = chartData[0];\n    const growthRate = ((totalValue - (firstQuarter.total as number)) / (firstQuarter.total as number)) * 100;\n\n    return {\n      currentPercentages,\n      drifts,\n      rebalanceNeeded,\n      totalValue,\n      growthRate,\n      riskScore: calculateRiskScore(currentPercentages),\n      diversificationScore: calculateDiversificationScore(currentPercentages)\n    };\n  }, [chartData]);\n\n  // Calculate risk score based on allocation\n  const calculateRiskScore = (allocations: { [key: string]: number }): number => {\n    const riskWeights = {\n      stocks: 0.8,\n      crypto: 1.0,\n      real_estate: 0.6,\n      commodities: 0.7,\n      bonds: 0.2,\n      cash: 0.0\n    };\n\n    return Object.entries(allocations).reduce((score, [asset, percentage]) => {\n      const weight = riskWeights[asset as keyof typeof riskWeights] || 0;\n      return score + (percentage * weight / 100);\n    }, 0) * 100;\n  };\n\n  // Calculate diversification score\n  const calculateDiversificationScore = (allocations: { [key: string]: number }): number => {\n    const nonZeroAllocations = Object.values(allocations).filter(val => val > 1);\n    const maxAllocation = Math.max(...Object.values(allocations));\n    \n    // Perfect score is 100 when well diversified\n    const concentrationPenalty = Math.max(0, maxAllocation - 50);\n    const diversityBonus = Math.min(nonZeroAllocations.length * 15, 60);\n    \n    return Math.max(0, Math.min(100, diversityBonus - concentrationPenalty));\n  };\n\n  // Handle rebalancing\n  const handleRebalance = useCallback(() => {\n    console.log('Initiating portfolio rebalancing');\n    // Would integrate with investment service\n  }, []);\n\n  // Handle asset class click\n  const handleAssetClick = useCallback((data: StackedBarDataPoint, assetKey: string, value: number) => {\n    console.log('Asset clicked:', { \n      period: data.label, \n      asset: assetKey, \n      value,\n      percentage: ((value / (data.total as number)) * 100).toFixed(1)\n    });\n  }, []);\n\n  return (\n    <div className={className}>\n      {/* Allocation Overview */}\n      {allocationInsights && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <PieChart className=\"w-4 h-4 text-blue-400\" />\n                <p className=\"text-white/60 text-sm\">Total Value</p>\n              </div>\n              <p className=\"text-xl font-bold text-white\">\n                {new Intl.NumberFormat('en-US', { \n                  style: 'currency', \n                  currency: 'USD',\n                  minimumFractionDigits: 0\n                }).format(allocationInsights.totalValue)}\n              </p>\n              <p className=\"text-white/60 text-sm\">\n                +{allocationInsights.growthRate.toFixed(1)}% this year\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <TrendingUp className=\"w-4 h-4 text-green-400\" />\n                <p className=\"text-white/60 text-sm\">Risk Score</p>\n              </div>\n              <p className=\"text-xl font-bold text-white\">\n                {allocationInsights.riskScore.toFixed(0)}/100\n              </p>\n              <p className=\"text-white/60 text-sm\">\n                {allocationInsights.riskScore > 70 ? 'High Risk' : \n                 allocationInsights.riskScore > 40 ? 'Moderate Risk' : 'Conservative'}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Target className=\"w-4 h-4 text-purple-400\" />\n                <p className=\"text-white/60 text-sm\">Diversification</p>\n              </div>\n              <p className=\"text-xl font-bold text-white\">\n                {allocationInsights.diversificationScore.toFixed(0)}/100\n              </p>\n              <p className=\"text-white/60 text-sm\">\n                {allocationInsights.diversificationScore > 80 ? 'Well Diversified' : \n                 allocationInsights.diversificationScore > 60 ? 'Moderately Diversified' : 'Concentrated'}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <AlertTriangle className=\"w-4 h-4 text-yellow-400\" />\n                <p className=\"text-white/60 text-sm\">Rebalance Needed</p>\n              </div>\n              <p className=\"text-xl font-bold text-white\">\n                {allocationInsights.rebalanceNeeded.length}\n              </p>\n              <p className=\"text-white/60 text-sm\">\n                {allocationInsights.rebalanceNeeded.length > 0 ? 'Actions Required' : 'Well Balanced'}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Main Chart */}\n      <StackedBarChart\n        data={combinedData}\n        series={chartSeries}\n        title=\"Portfolio Allocation Over Time\"\n        subtitle={`Asset allocation ${showTargetAllocation ? 'vs target' : 'by quarter'}`}\n        headerActions={\n          <div className=\"flex gap-2\">\n            {showRebalanceSignals && allocationInsights?.rebalanceNeeded.length > 0 && (\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={handleRebalance}\n                className=\"bg-yellow-500/20 border-yellow-500/30 text-yellow-400 hover:bg-yellow-500/30\"\n              >\n                <Rebalance className=\"w-4 h-4 mr-2\" />\n                Rebalance ({allocationInsights.rebalanceNeeded.length})\n              </Button>\n            )}\n            <Button variant=\"outline\" size=\"sm\">\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Settings\n            </Button>\n          </div>\n        }\n        stackedBarConfig={{\n          displayMode,\n          colorScheme: 'custom',\n          barRadius: 8,\n          hoverEffects: true,\n          clickableSegments: true,\n          animateOnLoad: true,\n          maxCategories: 6,\n          groupSmallCategories: false\n        }}\n        financialType={displayMode === 'percentage' ? 'percentage' : 'currency'}\n        dimensions={{\n          height: 400,\n          responsive: true\n        }}\n        timeControls={{\n          show: true,\n          options: ['1Y', '2Y', '5Y'],\n          defaultRange: timeRange\n        }}\n        onBarClick={handleAssetClick}\n        accessibility={{\n          ariaLabel: 'Portfolio asset allocation over time',\n          keyboardNavigation: true\n        }}\n      />\n\n      {/* Rebalancing Recommendations */}\n      {showRebalanceSignals && allocationInsights?.rebalanceNeeded.length > 0 && (\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />\n              Rebalancing Recommendations\n            </CardTitle>\n            <CardDescription>\n              Your portfolio has drifted from target allocations\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {allocationInsights.rebalanceNeeded.map(({ asset, drift, action, label }) => (\n                <div key={asset} className=\"flex items-center justify-between p-3 bg-white/[0.03] rounded-lg border border-white/[0.05]\">\n                  <div className=\"flex items-center gap-3\">\n                    <div \n                      className=\"w-3 h-3 rounded-sm\"\n                      style={{ backgroundColor: ASSET_CLASSES[asset as keyof typeof ASSET_CLASSES].color }}\n                    />\n                    <div>\n                      <p className=\"font-medium text-white\">{label}</p>\n                      <p className=\"text-white/60 text-sm\">\n                        {action === 'reduce' ? 'Overweight' : 'Underweight'} by {Math.abs(drift).toFixed(1)}%\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className={`font-medium ${action === 'reduce' ? 'text-red-400' : 'text-green-400'}`}>\n                      {action === 'reduce' ? 'Sell' : 'Buy'}\n                    </p>\n                    <p className=\"text-white/60 text-sm\">\n                      {Math.abs(drift).toFixed(1)}%\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"mt-4 p-3 bg-blue-500/10 border border-blue-500/20 rounded-lg\">\n              <p className=\"text-blue-400 text-sm\">\n                <strong>Tip:</strong> Rebalancing helps maintain your desired risk level and can improve long-term returns. \n                Consider rebalancing when allocations drift more than 5% from targets.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Asset Class Details */}\n      <div className=\"mt-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {Object.entries(ASSET_CLASSES).map(([key, config]) => {\n          const currentPercentage = allocationInsights?.currentPercentages[key] || 0;\n          const drift = allocationInsights?.drifts[key] || 0;\n          \n          return (\n            <Card key={key}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <div \n                      className=\"w-3 h-3 rounded-sm\"\n                      style={{ backgroundColor: config.color }}\n                    />\n                    <h4 className=\"font-medium text-white\">{config.label}</h4>\n                  </div>\n                  <span className=\"text-lg font-bold text-white\">\n                    {currentPercentage.toFixed(1)}%\n                  </span>\n                </div>\n                \n                <div className=\"flex justify-between text-sm mb-2\">\n                  <span className=\"text-white/60\">Target:</span>\n                  <span className=\"text-white\">{config.target}%</span>\n                </div>\n                \n                <div className=\"flex justify-between text-sm mb-3\">\n                  <span className=\"text-white/60\">Drift:</span>\n                  <span className={`font-medium ${\n                    Math.abs(drift) > 5 ? 'text-yellow-400' :\n                    drift > 0 ? 'text-red-400' : \n                    drift < 0 ? 'text-green-400' : 'text-white'\n                  }`}>\n                    {drift >= 0 ? '+' : ''}{drift.toFixed(1)}%\n                  </span>\n                </div>\n                \n                <p className=\"text-white/60 text-xs\">{config.description}</p>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default PortfolioAllocationChart;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/planning/api/financialPlanningService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/planning/api/financialPlanningService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  FinancialGoal, \n  GoalCategory, \n  GoalStatus, \n  RetirementPlan,\n  DebtPayoffPlan,\n  EmergencyFundPlan,\n  InvestmentPlan,\n  FinancialMilestone,\n  PlanningRecommendation,\n  CashFlowProjection,\n  NetWorthProjection,\n  RiskProfile\n} from '@/types/financialPlanning';\n\n/**\n * Comprehensive Financial Planning Service\n * Handles goal tracking, retirement planning, debt payoff strategies, and long-term projections\n */\nexport class FinancialPlanningService {\n  private static instance: FinancialPlanningService;\n  private goals: Map<string, FinancialGoal> = new Map();\n  private retirementPlans: Map<string, RetirementPlan> = new Map();\n  private debtPlans: Map<string, DebtPayoffPlan> = new Map();\n  private emergencyPlans: Map<string, EmergencyFundPlan> = new Map();\n  private investmentPlans: Map<string, InvestmentPlan> = new Map();\n\n  // Financial planning constants and formulas\n  private readonly INFLATION_RATE = 0.03; // 3% annual inflation\n  private readonly SAFE_WITHDRAWAL_RATE = 0.04; // 4% rule for retirement\n  private readonly EMERGENCY_FUND_MONTHS = 6; // 6 months of expenses\n  private readonly TARGET_DEBT_TO_INCOME = 0.36; // 36% debt-to-income ratio\n\n  static getInstance(): FinancialPlanningService {\n    if (!FinancialPlanningService.instance) {\n      FinancialPlanningService.instance = new FinancialPlanningService();\n    }\n    return FinancialPlanningService.instance;\n  }\n\n  /**\n   * Create and track financial goals with intelligent recommendations\n   */\n  async createFinancialGoal(\n    familyId: string, \n    goalData: Omit<FinancialGoal, 'id' | 'createdAt' | 'updatedAt' | 'progress'>\n  ): Promise<FinancialGoal> {\n    const goal: FinancialGoal = {\n      id: this.generateGoalId(),\n      ...goalData,\n      progress: {\n        currentAmount: 0,\n        percentComplete: 0,\n        monthlyContribution: 0,\n        projectedCompletionDate: this.calculateProjectedCompletion(goalData),\n        onTrack: true\n      },\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    // Apply intelligent defaults and optimizations\n    await this.optimizeGoal(goal);\n    \n    this.goals.set(goal.id, goal);\n    return goal;\n  }\n\n  /**\n   * Generate comprehensive retirement planning analysis\n   */\n  async createRetirementPlan(\n    familyId: string,\n    currentAge: number,\n    retirementAge: number,\n    currentIncome: number,\n    currentSavings: number,\n    monthlyContribution: number,\n    riskProfile: RiskProfile = 'moderate'\n  ): Promise<RetirementPlan> {\n    const yearsToRetirement = retirementAge - currentAge;\n    const expectedReturn = this.getExpectedReturn(riskProfile);\n    \n    // Calculate future value of current savings\n    const futureValueCurrent = this.calculateFutureValue(\n      currentSavings, \n      expectedReturn, \n      yearsToRetirement\n    );\n\n    // Calculate future value of monthly contributions\n    const futureValueContributions = this.calculateAnnuityFutureValue(\n      monthlyContribution * 12, \n      expectedReturn, \n      yearsToRetirement\n    );\n\n    const totalRetirementValue = futureValueCurrent + futureValueContributions;\n    \n    // Apply inflation adjustment for income replacement\n    const inflationAdjustedIncome = currentIncome * Math.pow(1 + this.INFLATION_RATE, yearsToRetirement);\n    const targetRetirementNeeds = inflationAdjustedIncome * 0.8; // 80% income replacement\n    const targetRetirementSavings = targetRetirementNeeds / this.SAFE_WITHDRAWAL_RATE;\n\n    const plan: RetirementPlan = {\n      id: this.generatePlanId(),\n      familyId,\n      currentAge,\n      retirementAge,\n      yearsToRetirement,\n      currentIncome,\n      currentSavings,\n      monthlyContribution,\n      riskProfile,\n      projections: {\n        totalRetirementValue,\n        targetRetirementSavings,\n        shortfall: Math.max(0, targetRetirementSavings - totalRetirementValue),\n        monthlyIncomeAtRetirement: totalRetirementValue * this.SAFE_WITHDRAWAL_RATE / 12,\n        expectedReturn\n      },\n      recommendations: await this.generateRetirementRecommendations(\n        totalRetirementValue,\n        targetRetirementSavings,\n        monthlyContribution,\n        yearsToRetirement\n      ),\n      milestones: this.generateRetirementMilestones(\n        currentAge,\n        retirementAge,\n        targetRetirementSavings\n      ),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.retirementPlans.set(plan.id, plan);\n    return plan;\n  }\n\n  /**\n   * Create optimized debt payoff strategy\n   */\n  async createDebtPayoffPlan(\n    familyId: string,\n    debts: Array<{\n      name: string;\n      balance: number;\n      interestRate: number;\n      minimumPayment: number;\n    }>,\n    extraPayment: number = 0,\n    strategy: 'avalanche' | 'snowball' = 'avalanche'\n  ): Promise<DebtPayoffPlan> {\n    // Sort debts based on strategy\n    const sortedDebts = [...debts].sort((a, b) => {\n      if (strategy === 'avalanche') {\n        return b.interestRate - a.interestRate; // Highest interest first\n      } else {\n        return a.balance - b.balance; // Lowest balance first\n      }\n    });\n\n    const payoffSchedule = this.calculateDebtPayoffSchedule(sortedDebts, extraPayment);\n    const totalInterest = payoffSchedule.reduce((sum, debt) => sum + debt.totalInterest, 0);\n    const payoffDate = new Date();\n    payoffDate.setMonth(payoffDate.getMonth() + Math.max(...payoffSchedule.map(d => d.monthsToPayoff)));\n\n    const plan: DebtPayoffPlan = {\n      id: this.generatePlanId(),\n      familyId,\n      strategy,\n      debts: sortedDebts,\n      extraPayment,\n      projections: {\n        totalDebt: debts.reduce((sum, debt) => sum + debt.balance, 0),\n        totalInterest,\n        monthsToPayoff: Math.max(...payoffSchedule.map(d => d.monthsToPayoff)),\n        payoffDate,\n        monthlySavingsAfterPayoff: debts.reduce((sum, debt) => sum + debt.minimumPayment, 0) + extraPayment\n      },\n      payoffSchedule,\n      recommendations: await this.generateDebtRecommendations(debts, extraPayment, totalInterest),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.debtPlans.set(plan.id, plan);\n    return plan;\n  }\n\n  /**\n   * Emergency fund planning with intelligent sizing\n   */\n  async createEmergencyFundPlan(\n    familyId: string,\n    monthlyExpenses: number,\n    currentEmergencyFund: number = 0,\n    monthlyContribution: number = 0,\n    targetMonths: number = this.EMERGENCY_FUND_MONTHS\n  ): Promise<EmergencyFundPlan> {\n    const targetAmount = monthlyExpenses * targetMonths;\n    const shortfall = Math.max(0, targetAmount - currentEmergencyFund);\n    const monthsToTarget = monthlyContribution > 0 ? Math.ceil(shortfall / monthlyContribution) : Infinity;\n\n    const plan: EmergencyFundPlan = {\n      id: this.generatePlanId(),\n      familyId,\n      monthlyExpenses,\n      targetMonths,\n      targetAmount,\n      currentAmount: currentEmergencyFund,\n      monthlyContribution,\n      projections: {\n        shortfall,\n        monthsToTarget,\n        completionDate: monthlyContribution > 0 ? \n          new Date(Date.now() + monthsToTarget * 30 * 24 * 60 * 60 * 1000) : \n          null\n      },\n      recommendations: await this.generateEmergencyFundRecommendations(\n        monthlyExpenses,\n        currentEmergencyFund,\n        monthlyContribution,\n        targetAmount\n      ),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.emergencyPlans.set(plan.id, plan);\n    return plan;\n  }\n\n  /**\n   * Generate comprehensive financial projections\n   */\n  async generateFinancialProjections(\n    familyId: string,\n    timeHorizon: number = 30\n  ): Promise<{\n    netWorthProjection: NetWorthProjection[];\n    cashFlowProjection: CashFlowProjection[];\n    goalProjections: Array<{ goalId: string; projectedCompletion: Date; probability: number }>;\n  }> {\n    const goals = Array.from(this.goals.values()).filter(g => g.familyId === familyId);\n    const netWorthProjection: NetWorthProjection[] = [];\n    const cashFlowProjection: CashFlowProjection[] = [];\n\n    // Generate month-by-month projections\n    for (let month = 0; month <= timeHorizon * 12; month++) {\n      const date = new Date();\n      date.setMonth(date.getMonth() + month);\n\n      // Net worth projection (simplified - would integrate with all services)\n      netWorthProjection.push({\n        date,\n        totalAssets: 100000 * Math.pow(1.07, month / 12), // 7% annual growth\n        totalLiabilities: 50000 * Math.pow(0.95, month / 12), // 5% annual reduction\n        netWorth: (100000 * Math.pow(1.07, month / 12)) - (50000 * Math.pow(0.95, month / 12))\n      });\n\n      // Cash flow projection\n      cashFlowProjection.push({\n        date,\n        income: 8000, // Monthly income\n        expenses: 6000, // Monthly expenses\n        netCashFlow: 2000,\n        savingsRate: 0.25\n      });\n    }\n\n    // Goal completion projections\n    const goalProjections = goals.map(goal => ({\n      goalId: goal.id,\n      projectedCompletion: goal.progress.projectedCompletionDate,\n      probability: this.calculateGoalProbability(goal)\n    }));\n\n    return {\n      netWorthProjection,\n      cashFlowProjection,\n      goalProjections\n    };\n  }\n\n  /**\n   * Get comprehensive financial health score and recommendations\n   */\n  async getFinancialHealthScore(familyId: string): Promise<{\n    overallScore: number;\n    categoryScores: {\n      emergency: number;\n      debt: number;\n      savings: number;\n      investment: number;\n      retirement: number;\n    };\n    recommendations: PlanningRecommendation[];\n  }> {\n    // Calculate scores for each category (0-100)\n    const categoryScores = {\n      emergency: await this.calculateEmergencyScore(familyId),\n      debt: await this.calculateDebtScore(familyId),\n      savings: await this.calculateSavingsScore(familyId),\n      investment: await this.calculateInvestmentScore(familyId),\n      retirement: await this.calculateRetirementScore(familyId)\n    };\n\n    const overallScore = Object.values(categoryScores).reduce((sum, score) => sum + score, 0) / 5;\n\n    const recommendations = await this.generateHealthRecommendations(categoryScores);\n\n    return {\n      overallScore,\n      categoryScores,\n      recommendations\n    };\n  }\n\n  // Private helper methods\n  private calculateProjectedCompletion(goalData: any): Date {\n    // Simplified calculation - would use more sophisticated modeling\n    const monthsToComplete = goalData.targetAmount / (goalData.monthlyContribution || 100);\n    const completionDate = new Date();\n    completionDate.setMonth(completionDate.getMonth() + monthsToComplete);\n    return completionDate;\n  }\n\n  private async optimizeGoal(goal: FinancialGoal): Promise<void> {\n    // Apply intelligent optimizations based on goal type and family situation\n    if (goal.category === 'retirement' && !goal.monthlyContribution) {\n      goal.monthlyContribution = goal.targetAmount * 0.001; // 0.1% monthly default\n    }\n  }\n\n  private getExpectedReturn(riskProfile: RiskProfile): number {\n    const returns = {\n      conservative: 0.04,\n      moderate: 0.07,\n      aggressive: 0.10\n    };\n    return returns[riskProfile];\n  }\n\n  private calculateFutureValue(principal: number, rate: number, years: number): number {\n    return principal * Math.pow(1 + rate, years);\n  }\n\n  private calculateAnnuityFutureValue(payment: number, rate: number, years: number): number {\n    return payment * (Math.pow(1 + rate, years) - 1) / rate;\n  }\n\n  private async generateRetirementRecommendations(\n    currentProjection: number,\n    target: number,\n    monthlyContribution: number,\n    yearsToRetirement: number\n  ): Promise<PlanningRecommendation[]> {\n    const recommendations: PlanningRecommendation[] = [];\n\n    if (currentProjection < target) {\n      const shortfall = target - currentProjection;\n      const additionalMonthlyNeeded = shortfall / (yearsToRetirement * 12);\n      \n      recommendations.push({\n        type: 'increase_contributions',\n        title: 'Increase Monthly Retirement Contributions',\n        description: `Consider increasing your monthly contribution by $${additionalMonthlyNeeded.toFixed(0)} to meet your retirement goal.`,\n        impact: 'high',\n        priority: 1,\n        estimatedBenefit: shortfall,\n        actionItems: [\n          'Review your budget for additional savings opportunities',\n          'Consider increasing 401(k) contributions to maximize employer match',\n          'Explore IRA contribution limits'\n        ]\n      });\n    }\n\n    return recommendations;\n  }\n\n  private generateRetirementMilestones(\n    currentAge: number,\n    retirementAge: number,\n    targetSavings: number\n  ): FinancialMilestone[] {\n    const milestones: FinancialMilestone[] = [];\n    const yearsToRetirement = retirementAge - currentAge;\n    \n    // Create milestones every 5 years\n    for (let age = currentAge + 5; age < retirementAge; age += 5) {\n      const yearsFromNow = age - currentAge;\n      const targetAmount = targetSavings * (yearsFromNow / yearsToRetirement);\n      \n      milestones.push({\n        id: `retirement_${age}`,\n        title: `Age ${age} Retirement Checkpoint`,\n        description: `Target savings by age ${age}`,\n        targetAmount,\n        targetDate: new Date(Date.now() + yearsFromNow * 365 * 24 * 60 * 60 * 1000),\n        category: 'retirement',\n        completed: false\n      });\n    }\n\n    return milestones;\n  }\n\n  private calculateDebtPayoffSchedule(\n    debts: Array<{\n      name: string;\n      balance: number;\n      interestRate: number;\n      minimumPayment: number;\n    }>,\n    extraPayment: number\n  ) {\n    return debts.map(debt => {\n      const monthlyRate = debt.interestRate / 12;\n      const payment = debt.minimumPayment + (extraPayment / debts.length);\n      \n      const monthsToPayoff = Math.ceil(\n        Math.log(1 + (debt.balance * monthlyRate) / payment) / Math.log(1 + monthlyRate)\n      );\n      \n      const totalPaid = payment * monthsToPayoff;\n      const totalInterest = totalPaid - debt.balance;\n\n      return {\n        ...debt,\n        monthsToPayoff: isNaN(monthsToPayoff) ? 0 : monthsToPayoff,\n        totalInterest: isNaN(totalInterest) ? 0 : totalInterest,\n        totalPaid: isNaN(totalPaid) ? debt.balance : totalPaid\n      };\n    });\n  }\n\n  private async generateDebtRecommendations(\n    debts: Array<any>,\n    extraPayment: number,\n    totalInterest: number\n  ): Promise<PlanningRecommendation[]> {\n    const recommendations: PlanningRecommendation[] = [];\n\n    if (extraPayment === 0) {\n      recommendations.push({\n        type: 'debt_payoff',\n        title: 'Add Extra Debt Payments',\n        description: 'Even an extra $50/month can significantly reduce interest paid and payoff time.',\n        impact: 'high',\n        priority: 1,\n        estimatedBenefit: totalInterest * 0.3, // 30% interest savings estimate\n        actionItems: [\n          'Review budget for additional payment opportunities',\n          'Apply windfalls (tax refunds, bonuses) to debt',\n          'Consider debt consolidation for lower rates'\n        ]\n      });\n    }\n\n    return recommendations;\n  }\n\n  private async generateEmergencyFundRecommendations(\n    monthlyExpenses: number,\n    currentAmount: number,\n    monthlyContribution: number,\n    targetAmount: number\n  ): Promise<PlanningRecommendation[]> {\n    const recommendations: PlanningRecommendation[] = [];\n\n    if (currentAmount < targetAmount) {\n      recommendations.push({\n        type: 'emergency_fund',\n        title: 'Build Emergency Fund',\n        description: `Aim for ${this.EMERGENCY_FUND_MONTHS} months of expenses ($${targetAmount.toLocaleString()}) in easily accessible savings.`,\n        impact: 'high',\n        priority: 1,\n        estimatedBenefit: targetAmount - currentAmount,\n        actionItems: [\n          'Open a high-yield savings account',\n          'Automate monthly transfers',\n          'Start with a $1,000 starter emergency fund'\n        ]\n      });\n    }\n\n    return recommendations;\n  }\n\n  private calculateGoalProbability(goal: FinancialGoal): number {\n    // Simplified probability calculation based on current progress and timeline\n    const timeRemaining = goal.targetDate.getTime() - Date.now();\n    const monthsRemaining = timeRemaining / (30 * 24 * 60 * 60 * 1000);\n    \n    if (monthsRemaining <= 0) return 0;\n    \n    const requiredMonthlyContribution = \n      (goal.targetAmount - goal.progress.currentAmount) / monthsRemaining;\n    \n    const currentContribution = goal.monthlyContribution || 0;\n    \n    if (currentContribution >= requiredMonthlyContribution) return 0.95;\n    if (currentContribution >= requiredMonthlyContribution * 0.8) return 0.75;\n    if (currentContribution >= requiredMonthlyContribution * 0.5) return 0.50;\n    return 0.25;\n  }\n\n  private async calculateEmergencyScore(familyId: string): Promise<number> {\n    // Simplified scoring - would integrate with actual data\n    return 75; // Example score\n  }\n\n  private async calculateDebtScore(familyId: string): Promise<number> {\n    return 80; // Example score\n  }\n\n  private async calculateSavingsScore(familyId: string): Promise<number> {\n    return 85; // Example score\n  }\n\n  private async calculateInvestmentScore(familyId: string): Promise<number> {\n    return 70; // Example score\n  }\n\n  private async calculateRetirementScore(familyId: string): Promise<number> {\n    return 65; // Example score\n  }\n\n  private async generateHealthRecommendations(\n    scores: any\n  ): Promise<PlanningRecommendation[]> {\n    const recommendations: PlanningRecommendation[] = [];\n\n    // Generate recommendations based on lowest scores\n    const sortedScores = Object.entries(scores).sort(([,a], [,b]) => (a as number) - (b as number));\n\n    for (const [category, score] of sortedScores.slice(0, 3)) {\n      if ((score as number) < 80) {\n        recommendations.push({\n          type: category as any,\n          title: `Improve ${category.charAt(0).toUpperCase() + category.slice(1)} Score`,\n          description: `Your ${category} score of ${score} has room for improvement.`,\n          impact: 'medium',\n          priority: recommendations.length + 1,\n          estimatedBenefit: 0,\n          actionItems: [`Focus on ${category} improvements`]\n        });\n      }\n    }\n\n    return recommendations;\n  }\n\n  private generateGoalId(): string {\n    return `goal_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generatePlanId(): string {\n    return `plan_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\nexport const financialPlanningService = FinancialPlanningService.getInstance();","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/planning/components/FinancialPlanningPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/planning/components/FinancialPlanningPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Target,\n  TrendingUp,\n  Calendar,\n  DollarSign,\n  PiggyBank,\n  Shield,\n  Briefcase,\n  Home,\n  GraduationCap,\n  Heart,\n  Car,\n  Plane,\n  Plus,\n  CheckCircle,\n  Clock,\n  AlertTriangle,\n  ArrowRight,\n  Zap,\n  Brain,\n  ArrowLeft\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { financialPlanningService } from '@/features/planning/api/financialPlanningService';\nimport { FinancialGoal, GoalCategory, PlanningRecommendation } from '@/shared/types/financialPlanning';\nimport { cn } from '@/shared/lib/utils';\n// Import new tab components\nimport RetirementTab from './tabs/RetirementTab';\nimport DebtPayoffTab from './tabs/DebtPayoffTab';\nimport LifePlanningTab from './tabs/LifePlanningTab';\n\ninterface FinancialPlanningPageProps {\n  familyId?: string;\n}\n\nconst FinancialPlanningPage = ({ familyId = 'demo_family' }: FinancialPlanningPageProps) => {\n  const navigate = useNavigate();\n  const [goals, setGoals] = useState<FinancialGoal[]>([]);\n  const [healthScore, setHealthScore] = useState<any>(null);\n  const [recommendations, setRecommendations] = useState<PlanningRecommendation[]>([]);\n  const [showNewGoalModal, setShowNewGoalModal] = useState(false);\n  const [activeTab, setActiveTab] = useState<'overview' | 'goals' | 'retirement' | 'debt' | 'planning'>('overview');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadPlanningData();\n  }, [familyId]);\n\n  const loadPlanningData = async () => {\n    setLoading(true);\n    try {\n      // Load financial health score and recommendations\n      const healthData = await financialPlanningService.getFinancialHealthScore(familyId);\n      setHealthScore(healthData);\n      setRecommendations(healthData.recommendations);\n\n      // Create sample goals for demo\n      const sampleGoals = await createSampleGoals();\n      setGoals(sampleGoals);\n    } catch (error) {\n      console.error('Failed to load planning data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createSampleGoals = async (): Promise<FinancialGoal[]> => {\n    const sampleGoals: FinancialGoal[] = [\n      {\n        id: 'goal_emergency',\n        familyId,\n        title: 'Emergency Fund',\n        description: '6 months of expenses for financial security',\n        category: 'emergency_fund',\n        targetAmount: 30000,\n        targetDate: new Date(Date.now() + 18 * 30 * 24 * 60 * 60 * 1000),\n        priority: 1,\n        monthlyContribution: 1500,\n        autoContribute: true,\n        status: 'active',\n        progress: {\n          currentAmount: 18000,\n          percentComplete: 60,\n          monthlyContribution: 1500,\n          projectedCompletionDate: new Date(Date.now() + 8 * 30 * 24 * 60 * 60 * 1000),\n          onTrack: true\n        },\n        tags: ['safety', 'priority'],\n        createdAt: new Date(Date.now() - 6 * 30 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date()\n      },\n      {\n        id: 'goal_house',\n        familyId,\n        title: 'House Down Payment',\n        description: '20% down payment for dream home',\n        category: 'house_down_payment',\n        targetAmount: 80000,\n        targetDate: new Date(Date.now() + 36 * 30 * 24 * 60 * 60 * 1000),\n        priority: 2,\n        monthlyContribution: 2000,\n        autoContribute: true,\n        status: 'active',\n        progress: {\n          currentAmount: 32000,\n          percentComplete: 40,\n          monthlyContribution: 2000,\n          projectedCompletionDate: new Date(Date.now() + 24 * 30 * 24 * 60 * 60 * 1000),\n          onTrack: true\n        },\n        tags: ['home', 'long-term'],\n        createdAt: new Date(Date.now() - 16 * 30 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date()\n      },\n      {\n        id: 'goal_vacation',\n        familyId,\n        title: 'European Vacation',\n        description: 'Two-week family trip to Europe',\n        category: 'vacation',\n        targetAmount: 12000,\n        targetDate: new Date(Date.now() + 12 * 30 * 24 * 60 * 60 * 1000),\n        priority: 3,\n        monthlyContribution: 800,\n        autoContribute: true,\n        status: 'active',\n        progress: {\n          currentAmount: 6400,\n          percentComplete: 53,\n          monthlyContribution: 800,\n          projectedCompletionDate: new Date(Date.now() + 7 * 30 * 24 * 60 * 60 * 1000),\n          onTrack: true\n        },\n        tags: ['travel', 'family'],\n        createdAt: new Date(Date.now() - 8 * 30 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date()\n      }\n    ];\n\n    return sampleGoals;\n  };\n\n  const getGoalIcon = (category: GoalCategory) => {\n    const icons = {\n      emergency_fund: Shield,\n      retirement: Briefcase,\n      house_down_payment: Home,\n      vacation: Plane,\n      education: GraduationCap,\n      debt_payoff: DollarSign,\n      car_purchase: Car,\n      investment: TrendingUp,\n      wedding: Heart,\n      business: Briefcase,\n      other: Target\n    };\n    return icons[category] || Target;\n  };\n\n  const getGoalColor = (category: GoalCategory) => {\n    const colors = {\n      emergency_fund: 'from-red-500 to-red-600',\n      retirement: 'from-blue-500 to-blue-600',\n      house_down_payment: 'from-green-500 to-green-600',\n      vacation: 'from-purple-500 to-purple-600',\n      education: 'from-yellow-500 to-yellow-600',\n      debt_payoff: 'from-gray-500 to-gray-600',\n      car_purchase: 'from-indigo-500 to-indigo-600',\n      investment: 'from-emerald-500 to-emerald-600',\n      wedding: 'from-pink-500 to-pink-600',\n      business: 'from-orange-500 to-orange-600',\n      other: 'from-cyan-500 to-cyan-600'\n    };\n    return colors[category] || colors.other;\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const formatDate = (date: Date) => {\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n\n  const getStatusColor = (goal: FinancialGoal) => {\n    if (goal.progress.percentComplete >= 100) return 'text-green-400';\n    if (goal.progress.onTrack) return 'text-blue-400';\n    return 'text-orange-400';\n  };\n\n  const getStatusIcon = (goal: FinancialGoal) => {\n    if (goal.progress.percentComplete >= 100) return CheckCircle;\n    if (goal.progress.onTrack) return Clock;\n    return AlertTriangle;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-black text-white\">\n        <div className=\"responsive-padding-md space-y-4 sm:space-y-6 animate-pulse\">\n          <div className=\"h-6 sm:h-8 bg-white/[0.05] rounded w-32 sm:w-48 mb-4\"></div>\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"h-5 sm:h-6 bg-white/[0.05] rounded w-32 sm:w-48\"></div>\n                <div className=\"h-5 sm:h-6 bg-white/[0.05] rounded w-16 sm:w-24\"></div>\n              </div>\n              <div className=\"space-y-3\">\n                <div className=\"h-4 bg-white/[0.05] rounded w-full\"></div>\n                <div className=\"h-4 bg-white/[0.05] rounded w-3/4\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <div className=\"responsive-padding-md space-y-6 sm:space-y-8\">\n        {/* Back Button */}\n        <button\n          onClick={() => navigate('/')}\n          className=\"flex items-center gap-2 px-3 py-2 rounded-xl text-white/80 hover:text-white hover:bg-white/[0.05] transition-colors min-h-[44px]\"\n        >\n          <ArrowLeft className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n          <span className=\"text-sm sm:text-base\">Dashboard</span>\n        </button>\n\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n          <div className=\"flex-1 min-w-0\">\n            <h1 className=\"text-2xl sm:text-3xl md:text-4xl font-bold text-white flex items-center gap-3\">\n              <Target className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-400 flex-shrink-0\" />\n              <span className=\"truncate\">Financial Planning</span>\n            </h1>\n            <p className=\"text-white/60 mt-2 text-sm sm:text-base leading-relaxed\">\n              Set goals, track progress, and plan for your financial future\n            </p>\n          </div>\n\n          <button\n            onClick={() => setShowNewGoalModal(true)}\n            className=\"w-full sm:w-auto bg-blue-500 hover:bg-blue-600 text-white px-4 sm:px-6 py-3 rounded-xl transition-colors flex items-center justify-center gap-2 text-sm sm:text-base min-h-[48px]\"\n          >\n            <Plus className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n            <span className=\"hidden sm:inline\">New Goal</span>\n            <span className=\"sm:hidden\">Goal</span>\n          </button>\n        </div>\n\n        {/* Navigation Tabs */}\n        <div className=\"bg-white/[0.02] rounded-xl p-1 border border-white/[0.08]\">\n          {/* Mobile: Scrollable tabs */}\n          <div className=\"flex sm:hidden overflow-x-auto gap-1 pb-1 scrollbar-hide\">\n            {[\n              { id: 'overview', label: 'Overview', icon: Target },\n              { id: 'goals', label: 'Goals', icon: PiggyBank },\n              { id: 'retirement', label: 'Retirement', icon: Briefcase },\n              { id: 'debt', label: 'Debt', icon: DollarSign },\n              { id: 'planning', label: 'Planning', icon: Calendar }\n            ].map(({ id, label, icon: Icon }) => (\n              <button\n                key={id}\n                onClick={() => setActiveTab(id as any)}\n                className={cn(\n                  \"flex items-center gap-2 px-3 py-2 rounded-lg transition-all text-xs whitespace-nowrap flex-shrink-0 min-h-[44px] min-w-[80px]\",\n                  activeTab === id\n                    ? \"bg-blue-500 text-white\"\n                    : \"text-white/60 hover:text-white hover:bg-white/[0.05]\"\n                )}\n              >\n                <Icon className=\"w-3 h-3\" />\n                {label}\n              </button>\n            ))}\n          </div>\n          \n          {/* Desktop: Full width tabs */}\n          <div className=\"hidden sm:flex items-center gap-1\">\n            {[\n              { id: 'overview', label: 'Overview', icon: Target },\n              { id: 'goals', label: 'Goals', icon: PiggyBank },\n              { id: 'retirement', label: 'Retirement', icon: Briefcase },\n              { id: 'debt', label: 'Debt Payoff', icon: DollarSign },\n              { id: 'planning', label: 'Life Planning', icon: Calendar }\n            ].map(({ id, label, icon: Icon }) => (\n              <button\n                key={id}\n                onClick={() => setActiveTab(id as any)}\n                className={cn(\n                  \"flex items-center gap-2 px-4 py-3 rounded-lg transition-all text-sm flex-1 justify-center min-h-[48px]\",\n                  activeTab === id\n                    ? \"bg-blue-500 text-white\"\n                    : \"text-white/60 hover:text-white hover:bg-white/[0.05]\"\n                )}\n              >\n                <Icon className=\"w-4 h-4\" />\n                {label}\n              </button>\n            ))}\n          </div>\n        </div>\n\n      {/* Content based on active tab */}\n      {activeTab === 'overview' && (\n        <>\n          {/* Financial Health Score */}\n          {healthScore && (\n            <div className=\"bg-gradient-to-r from-blue-500/10 to-purple-500/10 border border-blue-500/20 rounded-2xl p-4 sm:p-6\">\n              <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 sm:gap-0\">\n                <div className=\"min-w-0 flex-1\">\n                  <h2 className=\"text-lg sm:text-xl font-bold text-white mb-2 flex items-center gap-3\">\n                    <Brain className=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-400 flex-shrink-0\" />\n                    <span className=\"truncate\">Financial Health Score</span>\n                  </h2>\n                  <p className=\"text-white/70 text-sm sm:text-base\">\n                    Your overall financial wellness assessment\n                  </p>\n                </div>\n                <div className=\"text-left sm:text-right w-full sm:w-auto\">\n                  <div className=\"text-3xl sm:text-4xl font-bold text-white mb-1\">\n                    {Math.round(healthScore.overallScore)}/100\n                  </div>\n                  <div className=\"text-blue-400 text-sm font-medium\">\n                    {healthScore.overallScore >= 80 ? 'Excellent' : \n                     healthScore.overallScore >= 60 ? 'Good' : 'Needs Work'}\n                  </div>\n                </div>\n              </div>\n\n              {/* Category Breakdown */}\n              <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 sm:gap-4 mt-4 sm:mt-6\">\n                {Object.entries(healthScore.categoryScores).map(([category, score]) => (\n                  <div key={category} className=\"text-center p-3 bg-white/[0.03] rounded-lg border border-white/[0.05]\">\n                    <div className=\"text-lg sm:text-xl lg:text-2xl font-bold text-white\">{score as number}</div>\n                    <div className=\"text-xs sm:text-sm text-white/60 capitalize truncate\">\n                      {category.replace('_', ' ')}\n                    </div>\n                    <div className=\"w-full bg-white/[0.05] rounded-full h-2 mt-2\">\n                      <div \n                        className=\"bg-blue-400 h-2 rounded-full transition-all duration-500\"\n                        style={{ width: `${score}%` }}\n                      />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6\">\n            <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-white/60 text-sm\">Active Goals</p>\n                  <p className=\"text-xl sm:text-2xl font-bold text-white\">{goals.length}</p>\n                </div>\n                <Target className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-400 flex-shrink-0\" />\n              </div>\n            </div>\n\n            <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-white/60 text-sm\">Total Saved</p>\n                  <p className=\"text-lg sm:text-2xl font-bold text-white truncate\">\n                    {formatCurrency(goals.reduce((sum, goal) => sum + goal.progress.currentAmount, 0))}\n                  </p>\n                </div>\n                <PiggyBank className=\"w-6 h-6 sm:w-8 sm:h-8 text-green-400 flex-shrink-0\" />\n              </div>\n            </div>\n\n            <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-white/60 text-sm\">Target Amount</p>\n                  <p className=\"text-lg sm:text-2xl font-bold text-white truncate\">\n                    {formatCurrency(goals.reduce((sum, goal) => sum + goal.targetAmount, 0))}\n                  </p>\n                </div>\n                <TrendingUp className=\"w-6 h-6 sm:w-8 sm:h-8 text-purple-400 flex-shrink-0\" />\n              </div>\n            </div>\n\n            <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-white/60 text-sm\">Monthly Contributions</p>\n                  <p className=\"text-lg sm:text-2xl font-bold text-white truncate\">\n                    {formatCurrency(goals.reduce((sum, goal) => sum + (goal.monthlyContribution || 0), 0))}\n                  </p>\n                </div>\n                <Calendar className=\"w-6 h-6 sm:w-8 sm:h-8 text-orange-400 flex-shrink-0\" />\n              </div>\n            </div>\n          </div>\n\n          {/* AI Recommendations */}\n          {recommendations.length > 0 && (\n            <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n              <h2 className=\"text-xl font-bold text-white mb-6 flex items-center gap-3\">\n                <Zap className=\"w-6 h-6 text-yellow-400\" />\n                AI-Powered Recommendations\n              </h2>\n              \n              <div className=\"space-y-4\">\n                {recommendations.slice(0, 3).map((rec, index) => (\n                  <div key={index} className=\"bg-white/[0.03] rounded-xl p-4 border border-white/[0.05]\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-white mb-2\">{rec.title}</h3>\n                        <p className=\"text-white/70 text-sm mb-3\">{rec.description}</p>\n                        \n                        <div className=\"flex items-center gap-4\">\n                          <span className={cn(\n                            \"text-xs px-2 py-1 rounded-lg font-medium\",\n                            rec.impact === 'high' ? \"bg-red-500/20 text-red-400\" :\n                            rec.impact === 'medium' ? \"bg-yellow-500/20 text-yellow-400\" :\n                            \"bg-green-500/20 text-green-400\"\n                          )}>\n                            {rec.impact} impact\n                          </span>\n                          <span className=\"text-xs text-white/60\">\n                            Priority {rec.priority}\n                          </span>\n                          {rec.estimatedBenefit > 0 && (\n                            <span className=\"text-xs text-green-400\">\n                              Save {formatCurrency(rec.estimatedBenefit)}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <button className=\"p-2 rounded-lg hover:bg-white/[0.05] transition-colors\">\n                        <ArrowRight className=\"w-4 h-4 text-white/60\" />\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </>\n      )}\n\n      {activeTab === 'goals' && (\n        <div className=\"space-y-4 sm:space-y-6\">\n          {/* Goals List */}\n          {goals.map((goal) => {\n            const IconComponent = getGoalIcon(goal.category);\n            const StatusIcon = getStatusIcon(goal);\n            \n            return (\n              <div key={goal.id} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 sm:p-6 hover:bg-white/[0.03] transition-all\">\n                <div className=\"flex flex-col sm:flex-row items-start gap-4\">\n                  {/* Goal Icon */}\n                  <div className={cn(\n                    \"w-10 h-10 sm:w-12 sm:h-12 rounded-2xl flex items-center justify-center bg-gradient-to-br flex-shrink-0\",\n                    getGoalColor(goal.category)\n                  )}>\n                    <IconComponent className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n                  </div>\n                  \n                  {/* Goal Details */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex flex-col sm:flex-row items-start justify-between mb-3 gap-2 sm:gap-0\">\n                      <div className=\"min-w-0 flex-1\">\n                        <h3 className=\"text-lg font-bold text-white truncate\">{goal.title}</h3>\n                        <p className=\"text-white/60 text-sm leading-relaxed\">{goal.description}</p>\n                      </div>\n                      \n                      <div className=\"text-left sm:text-right w-full sm:w-auto\">\n                        <div className=\"flex sm:items-center gap-2 text-sm\">\n                          <StatusIcon className={cn(\"w-4 h-4\", getStatusColor(goal))} />\n                          <span className={getStatusColor(goal)}>\n                            {goal.progress.percentComplete >= 100 ? 'Completed' :\n                             goal.progress.onTrack ? 'On Track' : 'Behind'}\n                          </span>\n                        </div>\n                        <p className=\"text-white/40 text-xs mt-1\">\n                          Due {formatDate(goal.targetDate)}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    {/* Progress Bar */}\n                    <div className=\"mb-4\">\n                      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between text-sm mb-2 gap-1 sm:gap-0\">\n                        <span className=\"text-white/80 truncate\">\n                          {formatCurrency(goal.progress.currentAmount)} of {formatCurrency(goal.targetAmount)}\n                        </span>\n                        <span className=\"text-white/60 text-lg sm:text-sm font-bold sm:font-normal\">\n                          {Math.round(goal.progress.percentComplete)}%\n                        </span>\n                      </div>\n                      <div className=\"w-full bg-white/[0.05] rounded-full h-3 sm:h-2\">\n                        <div \n                          className={cn(\n                            \"h-3 sm:h-2 rounded-full transition-all duration-500 bg-gradient-to-r\",\n                            getGoalColor(goal.category)\n                          )}\n                          style={{ width: `${Math.min(goal.progress.percentComplete, 100)}%` }}\n                        />\n                      </div>\n                    </div>\n                    \n                    {/* Goal Stats */}\n                    <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4 text-sm\">\n                      <div className=\"p-3 sm:p-0 bg-white/[0.03] sm:bg-transparent rounded-lg sm:rounded-none border sm:border-0 border-white/[0.05]\">\n                        <p className=\"text-white/60\">Monthly Contribution</p>\n                        <p className=\"font-semibold text-white truncate\">\n                          {formatCurrency(goal.monthlyContribution || 0)}\n                        </p>\n                      </div>\n                      <div className=\"p-3 sm:p-0 bg-white/[0.03] sm:bg-transparent rounded-lg sm:rounded-none border sm:border-0 border-white/[0.05]\">\n                        <p className=\"text-white/60\">Projected Completion</p>\n                        <p className=\"font-semibold text-white\">\n                          {formatDate(goal.progress.projectedCompletionDate)}\n                        </p>\n                      </div>\n                      <div className=\"p-3 sm:p-0 bg-white/[0.03] sm:bg-transparent rounded-lg sm:rounded-none border sm:border-0 border-white/[0.05]\">\n                        <p className=\"text-white/60\">Priority</p>\n                        <p className=\"font-semibold text-white\">\n                          {goal.priority === 1 ? 'High' : goal.priority === 2 ? 'Medium' : 'Low'}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n\n      {/* Enhanced tab content with dedicated components */}\n      {activeTab === 'retirement' && (\n        <RetirementTab familyId={familyId} />\n      )}\n\n      {activeTab === 'debt' && (\n        <DebtPayoffTab familyId={familyId} />\n      )}\n\n      {activeTab === 'planning' && (\n        <LifePlanningTab familyId={familyId} />\n      )}\n      </div>\n    </div>\n  );\n};\n\nexport default FinancialPlanningPage;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/planning/components/GoalTracker.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/planning/components/GoalTracker.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Target,\n  Plus,\n  Edit3,\n  Trash2,\n  CheckCircle,\n  Clock,\n  AlertTriangle,\n  TrendingUp,\n  Calendar,\n  DollarSign,\n  Zap,\n  ArrowUp,\n  ArrowDown,\n  Pause,\n  Play\n} from 'lucide-react';\nimport { FinancialGoal, GoalCategory } from '@/types/financialPlanning';\nimport { financialPlanningService } from '@/features/planning/api/financialPlanningService';\nimport { cn } from '@/shared/lib/utils';\n\ninterface GoalTrackerProps {\n  familyId: string;\n  compact?: boolean;\n}\n\nconst GoalTracker = ({ familyId, compact = false }: GoalTrackerProps) => {\n  const [goals, setGoals] = useState<FinancialGoal[]>([]);\n  const [filter, setFilter] = useState<'all' | 'active' | 'completed' | 'paused'>('active');\n  const [sortBy, setSortBy] = useState<'priority' | 'progress' | 'deadline' | 'amount'>('priority');\n  const [loading, setLoading] = useState(true);\n  const [showNewGoal, setShowNewGoal] = useState(false);\n\n  useEffect(() => {\n    loadGoals();\n  }, [familyId]);\n\n  const loadGoals = async () => {\n    setLoading(true);\n    try {\n      // Create demo goals for now\n      const demoGoals = await createDemoGoals();\n      setGoals(demoGoals);\n    } catch (error) {\n      console.error('Failed to load goals:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createDemoGoals = async (): Promise<FinancialGoal[]> => {\n    return [\n      {\n        id: 'goal_1',\n        familyId,\n        title: 'Emergency Fund',\n        description: '6 months of living expenses',\n        category: 'emergency_fund',\n        targetAmount: 30000,\n        targetDate: new Date(Date.now() + 12 * 30 * 24 * 60 * 60 * 1000),\n        priority: 1,\n        monthlyContribution: 2000,\n        autoContribute: true,\n        status: 'active',\n        progress: {\n          currentAmount: 18000,\n          percentComplete: 60,\n          monthlyContribution: 2000,\n          projectedCompletionDate: new Date(Date.now() + 6 * 30 * 24 * 60 * 60 * 1000),\n          onTrack: true\n        },\n        tags: ['safety', 'high-priority'],\n        createdAt: new Date(Date.now() - 6 * 30 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date()\n      },\n      {\n        id: 'goal_2',\n        familyId,\n        title: 'Home Down Payment',\n        description: '20% down payment for $500k home',\n        category: 'house_down_payment',\n        targetAmount: 100000,\n        targetDate: new Date(Date.now() + 36 * 30 * 24 * 60 * 60 * 1000),\n        priority: 2,\n        monthlyContribution: 2500,\n        autoContribute: true,\n        status: 'active',\n        progress: {\n          currentAmount: 35000,\n          percentComplete: 35,\n          monthlyContribution: 2500,\n          projectedCompletionDate: new Date(Date.now() + 26 * 30 * 24 * 60 * 60 * 1000),\n          onTrack: true\n        },\n        tags: ['home', 'long-term'],\n        createdAt: new Date(Date.now() - 14 * 30 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date()\n      },\n      {\n        id: 'goal_3',\n        familyId,\n        title: 'Vacation Fund',\n        description: 'Family trip to Japan',\n        category: 'vacation',\n        targetAmount: 15000,\n        targetDate: new Date(Date.now() + 15 * 30 * 24 * 60 * 60 * 1000),\n        priority: 3,\n        monthlyContribution: 800,\n        autoContribute: true,\n        status: 'active',\n        progress: {\n          currentAmount: 6400,\n          percentComplete: 43,\n          monthlyContribution: 800,\n          projectedCompletionDate: new Date(Date.now() + 11 * 30 * 24 * 60 * 60 * 1000),\n          onTrack: true\n        },\n        tags: ['travel', 'family'],\n        createdAt: new Date(Date.now() - 8 * 30 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date()\n      },\n      {\n        id: 'goal_4',\n        familyId,\n        title: 'New Car',\n        description: 'Save for Tesla Model Y',\n        category: 'car_purchase',\n        targetAmount: 60000,\n        targetDate: new Date(Date.now() + 24 * 30 * 24 * 60 * 60 * 1000),\n        priority: 4,\n        monthlyContribution: 1200,\n        autoContribute: false,\n        status: 'paused',\n        progress: {\n          currentAmount: 12000,\n          percentComplete: 20,\n          monthlyContribution: 0,\n          projectedCompletionDate: new Date(Date.now() + 40 * 30 * 24 * 60 * 60 * 1000),\n          onTrack: false\n        },\n        tags: ['transportation'],\n        createdAt: new Date(Date.now() - 10 * 30 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date()\n      }\n    ];\n  };\n\n  const filteredGoals = goals.filter(goal => {\n    if (filter === 'all') return true;\n    return goal.status === filter;\n  });\n\n  const sortedGoals = [...filteredGoals].sort((a, b) => {\n    switch (sortBy) {\n      case 'priority':\n        return a.priority - b.priority;\n      case 'progress':\n        return b.progress.percentComplete - a.progress.percentComplete;\n      case 'deadline':\n        return a.targetDate.getTime() - b.targetDate.getTime();\n      case 'amount':\n        return b.targetAmount - a.targetAmount;\n      default:\n        return 0;\n    }\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const formatDate = (date: Date) => {\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n\n  const getProgressColor = (progress: number, onTrack: boolean) => {\n    if (progress >= 100) return 'from-green-500 to-green-600';\n    if (!onTrack) return 'from-red-500 to-red-600';\n    if (progress >= 75) return 'from-blue-500 to-blue-600';\n    if (progress >= 50) return 'from-yellow-500 to-yellow-600';\n    return 'from-gray-500 to-gray-600';\n  };\n\n  const getStatusIcon = (goal: FinancialGoal) => {\n    if (goal.status === 'completed') return CheckCircle;\n    if (goal.status === 'paused') return Pause;\n    if (goal.progress.onTrack) return Clock;\n    return AlertTriangle;\n  };\n\n  const getStatusColor = (goal: FinancialGoal) => {\n    if (goal.status === 'completed') return 'text-green-400';\n    if (goal.status === 'paused') return 'text-gray-400';\n    if (goal.progress.onTrack) return 'text-blue-400';\n    return 'text-orange-400';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        {[...Array(4)].map((_, i) => (\n          <div key={i} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 animate-pulse\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className=\"h-5 bg-white/[0.05] rounded w-48\"></div>\n              <div className=\"h-4 bg-white/[0.05] rounded w-16\"></div>\n            </div>\n            <div className=\"h-2 bg-white/[0.05] rounded w-full mb-3\"></div>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"h-4 bg-white/[0.05] rounded w-24\"></div>\n              <div className=\"h-4 bg-white/[0.05] rounded w-20\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"space-y-6\", compact && \"space-y-4\")}>\n      {/* Header */}\n      {!compact && (\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-white flex items-center gap-3\">\n              <Target className=\"w-7 h-7 text-blue-400\" />\n              Goal Tracker\n            </h2>\n            <p className=\"text-white/60 mt-1\">\n              Monitor progress on your financial goals\n            </p>\n          </div>\n\n          <button\n            onClick={() => setShowNewGoal(true)}\n            className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-xl transition-colors flex items-center gap-2\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            Add Goal\n          </button>\n        </div>\n      )}\n\n      {/* Controls */}\n      <div className=\"flex items-center justify-between gap-4\">\n        <div className=\"flex items-center gap-2\">\n          {['all', 'active', 'completed', 'paused'].map((status) => (\n            <button\n              key={status}\n              onClick={() => setFilter(status as any)}\n              className={cn(\n                \"px-3 py-1 rounded-lg text-sm transition-colors capitalize\",\n                filter === status\n                  ? \"bg-blue-500 text-white\"\n                  : \"text-white/60 hover:text-white hover:bg-white/[0.05]\"\n              )}\n            >\n              {status}\n            </button>\n          ))}\n        </div>\n\n        <select\n          value={sortBy}\n          onChange={(e) => setSortBy(e.target.value as any)}\n          className=\"bg-white/[0.05] border border-white/[0.08] rounded-lg text-white text-sm py-1 px-3\"\n        >\n          <option value=\"priority\">Priority</option>\n          <option value=\"progress\">Progress</option>\n          <option value=\"deadline\">Deadline</option>\n          <option value=\"amount\">Amount</option>\n        </select>\n      </div>\n\n      {/* Goals List */}\n      <div className=\"space-y-4\">\n        {sortedGoals.length === 0 ? (\n          <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-8 text-center\">\n            <Target className=\"w-12 h-12 text-white/20 mx-auto mb-3\" />\n            <h3 className=\"text-lg font-semibold text-white mb-2\">No Goals Found</h3>\n            <p className=\"text-white/60 mb-4\">\n              {filter === 'all' \n                ? 'Start by creating your first financial goal'\n                : `No ${filter} goals found`\n              }\n            </p>\n            <button\n              onClick={() => setShowNewGoal(true)}\n              className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors\"\n            >\n              Create Your First Goal\n            </button>\n          </div>\n        ) : (\n          sortedGoals.map((goal) => {\n            const StatusIcon = getStatusIcon(goal);\n            \n            return (\n              <div\n                key={goal.id}\n                className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 hover:bg-white/[0.03] transition-all\"\n              >\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3\">\n                      <h3 className=\"text-lg font-semibold text-white\">{goal.title}</h3>\n                      <div className=\"flex items-center gap-1\">\n                        <StatusIcon className={cn(\"w-4 h-4\", getStatusColor(goal))} />\n                        <span className={cn(\"text-xs\", getStatusColor(goal))}>\n                          {goal.status}\n                        </span>\n                      </div>\n                    </div>\n                    <p className=\"text-white/60 text-sm mt-1\">{goal.description}</p>\n                  </div>\n\n                  <div className=\"flex items-center gap-2\">\n                    <button className=\"p-1 rounded hover:bg-white/[0.05] transition-colors\">\n                      <Edit3 className=\"w-4 h-4 text-white/60\" />\n                    </button>\n                    <button className=\"p-1 rounded hover:bg-white/[0.05] transition-colors\">\n                      {goal.status === 'paused' ? (\n                        <Play className=\"w-4 h-4 text-green-400\" />\n                      ) : (\n                        <Pause className=\"w-4 h-4 text-yellow-400\" />\n                      )}\n                    </button>\n                    <button className=\"p-1 rounded hover:bg-white/[0.05] transition-colors\">\n                      <Trash2 className=\"w-4 h-4 text-red-400\" />\n                    </button>\n                  </div>\n                </div>\n\n                {/* Progress Bar */}\n                <div className=\"mb-3\">\n                  <div className=\"flex items-center justify-between text-sm mb-2\">\n                    <span className=\"text-white/80\">\n                      {formatCurrency(goal.progress.currentAmount)} of {formatCurrency(goal.targetAmount)}\n                    </span>\n                    <span className=\"text-white/60\">\n                      {Math.round(goal.progress.percentComplete)}%\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-white/[0.05] rounded-full h-2\">\n                    <div \n                      className={cn(\n                        \"h-2 rounded-full transition-all duration-500 bg-gradient-to-r\",\n                        getProgressColor(goal.progress.percentComplete, goal.progress.onTrack)\n                      )}\n                      style={{ width: `${Math.min(goal.progress.percentComplete, 100)}%` }}\n                    />\n                  </div>\n                </div>\n\n                {/* Goal Stats */}\n                <div className=\"grid grid-cols-4 gap-4 text-sm\">\n                  <div>\n                    <p className=\"text-white/60 text-xs\">Monthly</p>\n                    <p className=\"font-semibold text-white\">\n                      {formatCurrency(goal.monthlyContribution || 0)}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-white/60 text-xs\">Due Date</p>\n                    <p className=\"font-semibold text-white\">\n                      {formatDate(goal.targetDate)}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-white/60 text-xs\">Priority</p>\n                    <p className=\"font-semibold text-white\">\n                      {goal.priority === 1 ? 'High' : goal.priority === 2 ? 'Medium' : 'Low'}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-white/60 text-xs\">Remaining</p>\n                    <p className=\"font-semibold text-white\">\n                      {formatCurrency(goal.targetAmount - goal.progress.currentAmount)}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Quick Actions */}\n                <div className=\"flex items-center justify-between mt-3 pt-3 border-t border-white/[0.05]\">\n                  <div className=\"flex items-center gap-2\">\n                    {goal.tags.map((tag) => (\n                      <span\n                        key={tag}\n                        className=\"text-xs px-2 py-1 bg-white/[0.05] rounded-lg text-white/60\"\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <button className=\"text-xs px-2 py-1 bg-green-500/20 text-green-400 rounded hover:bg-green-500/30 transition-colors\">\n                      Add Funds\n                    </button>\n                    <button className=\"text-xs px-2 py-1 bg-blue-500/20 text-blue-400 rounded hover:bg-blue-500/30 transition-colors\">\n                      Adjust Target\n                    </button>\n                  </div>\n                </div>\n              </div>\n            );\n          })\n        )}\n      </div>\n\n      {/* Summary Stats */}\n      {!compact && goals.length > 0 && (\n        <div className=\"bg-gradient-to-r from-blue-500/10 to-purple-500/10 border border-blue-500/20 rounded-2xl p-4\">\n          <div className=\"grid grid-cols-4 gap-4 text-center\">\n            <div>\n              <p className=\"text-2xl font-bold text-white\">\n                {goals.filter(g => g.status === 'active').length}\n              </p>\n              <p className=\"text-white/60 text-sm\">Active Goals</p>\n            </div>\n            <div>\n              <p className=\"text-2xl font-bold text-white\">\n                {formatCurrency(goals.reduce((sum, goal) => sum + goal.progress.currentAmount, 0))}\n              </p>\n              <p className=\"text-white/60 text-sm\">Total Saved</p>\n            </div>\n            <div>\n              <p className=\"text-2xl font-bold text-white\">\n                {formatCurrency(goals.reduce((sum, goal) => sum + (goal.monthlyContribution || 0), 0))}\n              </p>\n              <p className=\"text-white/60 text-sm\">Monthly Contributions</p>\n            </div>\n            <div>\n              <p className=\"text-2xl font-bold text-white\">\n                {Math.round(goals.reduce((sum, goal) => sum + goal.progress.percentComplete, 0) / goals.length)}%\n              </p>\n              <p className=\"text-white/60 text-sm\">Avg Progress</p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GoalTracker;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/planning/components/RetirementPlanner.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/planning/components/RetirementPlanner.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Briefcase,\n  Calendar,\n  DollarSign,\n  TrendingUp,\n  Target,\n  AlertCircle,\n  CheckCircle,\n  Calculator,\n  PieChart,\n  Clock,\n  Zap\n} from 'lucide-react';\nimport { RetirementPlan, RiskProfile } from '@/types/financialPlanning';\nimport { financialPlanningService } from '@/features/planning/api/financialPlanningService';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart as RechartsPieChart, Cell, Pie } from 'recharts';\nimport { cn } from '@/shared/lib/utils';\n\ninterface RetirementPlannerProps {\n  familyId: string;\n}\n\nconst RetirementPlanner = ({ familyId }: RetirementPlannerProps) => {\n  const [plan, setPlan] = useState<RetirementPlan | null>(null);\n  const [inputs, setInputs] = useState({\n    currentAge: 35,\n    retirementAge: 65,\n    currentIncome: 100000,\n    currentSavings: 150000,\n    monthlyContribution: 2000,\n    riskProfile: 'moderate' as RiskProfile\n  });\n  const [loading, setLoading] = useState(false);\n  const [showProjections, setShowProjections] = useState(false);\n\n  useEffect(() => {\n    generatePlan();\n  }, []);\n\n  const generatePlan = async () => {\n    setLoading(true);\n    try {\n      const newPlan = await financialPlanningService.createRetirementPlan(\n        familyId,\n        inputs.currentAge,\n        inputs.retirementAge,\n        inputs.currentIncome,\n        inputs.currentSavings,\n        inputs.monthlyContribution,\n        inputs.riskProfile\n      );\n      setPlan(newPlan);\n    } catch (error) {\n      console.error('Failed to generate retirement plan:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: any) => {\n    setInputs(prev => ({ ...prev, [field]: value }));\n  };\n\n  const recalculatePlan = async () => {\n    await generatePlan();\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const formatPercentage = (value: number) => {\n    return `${(value * 100).toFixed(1)}%`;\n  };\n\n  // Generate projection data for charts\n  const generateProjectionData = () => {\n    if (!plan) return [];\n    \n    const data = [];\n    const yearsToRetirement = plan.yearsToRetirement;\n    \n    for (let year = 0; year <= yearsToRetirement; year++) {\n      const currentValue = plan.currentSavings * Math.pow(1 + plan.projections.expectedReturn, year);\n      const contributionValue = (plan.monthlyContribution * 12) * \n        ((Math.pow(1 + plan.projections.expectedReturn, year) - 1) / plan.projections.expectedReturn);\n      \n      data.push({\n        year: inputs.currentAge + year,\n        savings: currentValue + contributionValue,\n        target: plan.projections.targetRetirementSavings * (year / yearsToRetirement)\n      });\n    }\n    \n    return data;\n  };\n\n  const riskAllocationData = [\n    { name: 'Stocks', value: inputs.riskProfile === 'conservative' ? 40 : inputs.riskProfile === 'moderate' ? 70 : 85, color: '#3b82f6' },\n    { name: 'Bonds', value: inputs.riskProfile === 'conservative' ? 50 : inputs.riskProfile === 'moderate' ? 25 : 10, color: '#10b981' },\n    { name: 'Other', value: inputs.riskProfile === 'conservative' ? 10 : inputs.riskProfile === 'moderate' ? 5 : 5, color: '#f59e0b' }\n  ];\n\n  if (loading && !plan) {\n    return (\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4\"></div>\n            <p className=\"text-white/70\">Calculating your retirement plan...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white flex items-center gap-3\">\n            <Briefcase className=\"w-7 h-7 text-blue-400\" />\n            Retirement Planner\n          </h2>\n          <p className=\"text-white/60 mt-1\">\n            Plan for a secure financial future\n          </p>\n        </div>\n\n        <button\n          onClick={() => setShowProjections(!showProjections)}\n          className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-xl transition-colors flex items-center gap-2\"\n        >\n          <PieChart className=\"w-4 h-4\" />\n          {showProjections ? 'Hide' : 'Show'} Projections\n        </button>\n      </div>\n\n      {/* Input Panel */}\n      <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n        <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n          <Calculator className=\"w-5 h-5 text-blue-400\" />\n          Your Information\n        </h3>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-white/80 mb-2\">\n              Current Age\n            </label>\n            <input\n              type=\"number\"\n              value={inputs.currentAge}\n              onChange={(e) => handleInputChange('currentAge', parseInt(e.target.value))}\n              className=\"w-full bg-white/[0.05] border border-white/[0.08] rounded-lg text-white px-3 py-2\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-white/80 mb-2\">\n              Retirement Age\n            </label>\n            <input\n              type=\"number\"\n              value={inputs.retirementAge}\n              onChange={(e) => handleInputChange('retirementAge', parseInt(e.target.value))}\n              className=\"w-full bg-white/[0.05] border border-white/[0.08] rounded-lg text-white px-3 py-2\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-white/80 mb-2\">\n              Current Annual Income\n            </label>\n            <input\n              type=\"number\"\n              value={inputs.currentIncome}\n              onChange={(e) => handleInputChange('currentIncome', parseInt(e.target.value))}\n              className=\"w-full bg-white/[0.05] border border-white/[0.08] rounded-lg text-white px-3 py-2\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-white/80 mb-2\">\n              Current Retirement Savings\n            </label>\n            <input\n              type=\"number\"\n              value={inputs.currentSavings}\n              onChange={(e) => handleInputChange('currentSavings', parseInt(e.target.value))}\n              className=\"w-full bg-white/[0.05] border border-white/[0.08] rounded-lg text-white px-3 py-2\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-white/80 mb-2\">\n              Monthly Contribution\n            </label>\n            <input\n              type=\"number\"\n              value={inputs.monthlyContribution}\n              onChange={(e) => handleInputChange('monthlyContribution', parseInt(e.target.value))}\n              className=\"w-full bg-white/[0.05] border border-white/[0.08] rounded-lg text-white px-3 py-2\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-white/80 mb-2\">\n              Risk Profile\n            </label>\n            <select\n              value={inputs.riskProfile}\n              onChange={(e) => handleInputChange('riskProfile', e.target.value)}\n              className=\"w-full bg-white/[0.05] border border-white/[0.08] rounded-lg text-white px-3 py-2\"\n            >\n              <option value=\"conservative\">Conservative (4% return)</option>\n              <option value=\"moderate\">Moderate (7% return)</option>\n              <option value=\"aggressive\">Aggressive (10% return)</option>\n            </select>\n          </div>\n        </div>\n\n        <button\n          onClick={recalculatePlan}\n          disabled={loading}\n          className=\"mt-4 bg-blue-500 hover:bg-blue-600 disabled:opacity-50 text-white px-6 py-2 rounded-lg transition-colors flex items-center gap-2\"\n        >\n          {loading ? (\n            <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n          ) : (\n            <Calculator className=\"w-4 h-4\" />\n          )}\n          Recalculate Plan\n        </button>\n      </div>\n\n      {/* Results */}\n      {plan && (\n        <>\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-white/60 text-sm\">Years to Retirement</p>\n                  <p className=\"text-3xl font-bold text-white\">{plan.yearsToRetirement}</p>\n                </div>\n                <Calendar className=\"w-8 h-8 text-blue-400\" />\n              </div>\n            </div>\n\n            <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-white/60 text-sm\">Projected Value</p>\n                  <p className=\"text-3xl font-bold text-white\">\n                    {formatCurrency(plan.projections.totalRetirementValue)}\n                  </p>\n                </div>\n                <TrendingUp className=\"w-8 h-8 text-green-400\" />\n              </div>\n            </div>\n\n            <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-white/60 text-sm\">Monthly Income</p>\n                  <p className=\"text-3xl font-bold text-white\">\n                    {formatCurrency(plan.projections.monthlyIncomeAtRetirement)}\n                  </p>\n                </div>\n                <DollarSign className=\"w-8 h-8 text-purple-400\" />\n              </div>\n            </div>\n\n            <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-white/60 text-sm\">\n                    {plan.projections.shortfall > 0 ? 'Shortfall' : 'Surplus'}\n                  </p>\n                  <p className={cn(\n                    \"text-3xl font-bold\",\n                    plan.projections.shortfall > 0 ? \"text-red-400\" : \"text-green-400\"\n                  )}>\n                    {plan.projections.shortfall > 0 ? '-' : '+'}\n                    {formatCurrency(Math.abs(plan.projections.shortfall))}\n                  </p>\n                </div>\n                {plan.projections.shortfall > 0 ? (\n                  <AlertCircle className=\"w-8 h-8 text-red-400\" />\n                ) : (\n                  <CheckCircle className=\"w-8 h-8 text-green-400\" />\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Analysis */}\n          <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n              <Target className=\"w-5 h-5 text-blue-400\" />\n              Retirement Analysis\n            </h3>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 bg-white/[0.03] rounded-xl\">\n                  <span className=\"text-white/80\">Target Retirement Savings</span>\n                  <span className=\"font-semibold text-white\">\n                    {formatCurrency(plan.projections.targetRetirementSavings)}\n                  </span>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-4 bg-white/[0.03] rounded-xl\">\n                  <span className=\"text-white/80\">Projected Retirement Value</span>\n                  <span className=\"font-semibold text-white\">\n                    {formatCurrency(plan.projections.totalRetirementValue)}\n                  </span>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-4 bg-white/[0.03] rounded-xl\">\n                  <span className=\"text-white/80\">Expected Annual Return</span>\n                  <span className=\"font-semibold text-white\">\n                    {formatPercentage(plan.projections.expectedReturn)}\n                  </span>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 bg-white/[0.03] rounded-xl\">\n                  <span className=\"text-white/80\">Income Replacement Ratio</span>\n                  <span className=\"font-semibold text-white\">\n                    {Math.round((plan.projections.monthlyIncomeAtRetirement * 12) / plan.currentIncome * 100)}%\n                  </span>\n                </div>\n              </div>\n\n              {/* Asset Allocation */}\n              <div>\n                <h4 className=\"text-md font-semibold text-white mb-3\">Recommended Asset Allocation</h4>\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <RechartsPieChart>\n                      <Pie\n                        data={riskAllocationData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        innerRadius={40}\n                        outerRadius={80}\n                        paddingAngle={5}\n                        dataKey=\"value\"\n                      >\n                        {riskAllocationData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip \n                        formatter={(value) => [`${value}%`, 'Allocation']}\n                        contentStyle={{\n                          backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                          border: '1px solid rgba(255, 255, 255, 0.1)',\n                          borderRadius: '8px',\n                          color: 'white'\n                        }}\n                      />\n                    </RechartsPieChart>\n                  </ResponsiveContainer>\n                </div>\n                \n                <div className=\"space-y-2 mt-4\">\n                  {riskAllocationData.map((item, index) => (\n                    <div key={index} className=\"flex items-center justify-between text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className=\"w-3 h-3 rounded\"\n                          style={{ backgroundColor: item.color }}\n                        />\n                        <span className=\"text-white/80\">{item.name}</span>\n                      </div>\n                      <span className=\"text-white\">{item.value}%</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Projections Chart */}\n          {showProjections && (\n            <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n              <h3 className=\"text-lg font-semibold text-white mb-6 flex items-center gap-2\">\n                <TrendingUp className=\"w-5 h-5 text-blue-400\" />\n                Savings Growth Projection\n              </h3>\n              \n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={generateProjectionData()}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\n                    <XAxis \n                      dataKey=\"year\" \n                      stroke=\"rgba(255,255,255,0.6)\"\n                      tick={{ fill: 'rgba(255,255,255,0.6)' }}\n                    />\n                    <YAxis \n                      stroke=\"rgba(255,255,255,0.6)\"\n                      tick={{ fill: 'rgba(255,255,255,0.6)' }}\n                      tickFormatter={(value) => `$${(value / 1000000).toFixed(1)}M`}\n                    />\n                    <Tooltip \n                      formatter={(value, name) => [\n                        formatCurrency(value as number), \n                        name === 'savings' ? 'Projected Savings' : 'Target Savings'\n                      ]}\n                      labelFormatter={(label) => `Age ${label}`}\n                      contentStyle={{\n                        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                        border: '1px solid rgba(255, 255, 255, 0.1)',\n                        borderRadius: '8px',\n                        color: 'white'\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"savings\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={3}\n                      dot={{ fill: '#3b82f6', strokeWidth: 2, r: 4 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"target\" \n                      stroke=\"#ef4444\" \n                      strokeWidth={2}\n                      strokeDasharray=\"5 5\"\n                      dot={{ fill: '#ef4444', strokeWidth: 2, r: 3 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n\n              <div className=\"flex items-center justify-center gap-6 mt-4 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-0.5 bg-blue-500\"></div>\n                  <span className=\"text-white/80\">Projected Savings</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-0.5 bg-red-500 border-dashed\"></div>\n                  <span className=\"text-white/80\">Target Savings</span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Recommendations */}\n          {plan.recommendations.length > 0 && (\n            <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n              <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n                <Zap className=\"w-5 h-5 text-yellow-400\" />\n                Recommendations\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {plan.recommendations.map((rec, index) => (\n                  <div key={index} className=\"bg-white/[0.03] rounded-xl p-4 border border-white/[0.05]\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-white mb-2\">{rec.title}</h4>\n                        <p className=\"text-white/70 text-sm mb-3\">{rec.description}</p>\n                        \n                        <div className=\"space-y-2\">\n                          {rec.actionItems.map((item, itemIndex) => (\n                            <div key={itemIndex} className=\"flex items-center gap-2 text-sm\">\n                              <div className=\"w-1.5 h-1.5 bg-blue-400 rounded-full\"></div>\n                              <span className=\"text-white/80\">{item}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-right\">\n                        <span className={cn(\n                          \"text-xs px-2 py-1 rounded-lg font-medium\",\n                          rec.impact === 'high' ? \"bg-red-500/20 text-red-400\" :\n                          rec.impact === 'medium' ? \"bg-yellow-500/20 text-yellow-400\" :\n                          \"bg-green-500/20 text-green-400\"\n                        )}>\n                          {rec.impact} impact\n                        </span>\n                        {rec.estimatedBenefit > 0 && (\n                          <p className=\"text-green-400 text-sm mt-1\">\n                            Save {formatCurrency(rec.estimatedBenefit)}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default RetirementPlanner;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/planning/components/shared/PlanningCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/planning/components/shared/PlanningCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { LucideIcon } from 'lucide-react';\nimport { cn } from '@/shared/lib/utils';\n\ninterface PlanningCardProps {\n  title: string;\n  description?: string;\n  icon?: LucideIcon;\n  iconColor?: string;\n  children?: React.ReactNode;\n  className?: string;\n  variant?: 'default' | 'gradient' | 'highlight';\n  onClick?: () => void;\n}\n\nconst PlanningCard: React.FC<PlanningCardProps> = ({\n  title,\n  description,\n  icon: Icon,\n  iconColor = 'text-blue-400',\n  children,\n  className,\n  variant = 'default',\n  onClick\n}) => {\n  const baseClasses = \"rounded-2xl border transition-all duration-200\";\n  \n  const variantClasses = {\n    default: \"bg-white/[0.02] border-white/[0.08] hover:bg-white/[0.03]\",\n    gradient: \"bg-gradient-to-r from-blue-500/10 to-purple-500/10 border-blue-500/20\",\n    highlight: \"bg-white/[0.05] border-white/[0.12] hover:bg-white/[0.07]\"\n  };\n\n  const cardClasses = cn(\n    baseClasses,\n    variantClasses[variant],\n    onClick && \"cursor-pointer hover:scale-[1.01]\",\n    className\n  );\n\n  return (\n    <div className={cardClasses} onClick={onClick}>\n      <div className=\"p-6\">\n        {/* Header */}\n        <div className=\"flex items-start gap-3 mb-4\">\n          {Icon && (\n            <div className=\"flex-shrink-0\">\n              <Icon className={cn(\"w-6 h-6\", iconColor)} />\n            </div>\n          )}\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"text-lg font-semibold text-white mb-1\">{title}</h3>\n            {description && (\n              <p className=\"text-white/60 text-sm\">{description}</p>\n            )}\n          </div>\n        </div>\n\n        {/* Content */}\n        {children && (\n          <div className=\"mt-4\">\n            {children}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PlanningCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/planning/components/shared/ProjectionChart.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/planning/components/shared/ProjectionChart.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Area,\n  AreaChart\n} from 'recharts';\nimport { cn } from '@/shared/lib/utils';\n\ninterface ProjectionChartProps {\n  data: Array<{\n    date: Date | string;\n    value: number;\n    label?: string;\n    [key: string]: any;\n  }>;\n  title: string;\n  type?: 'line' | 'area';\n  height?: number;\n  color?: string;\n  formatValue?: (value: number) => string;\n  className?: string;\n}\n\nconst ProjectionChart: React.FC<ProjectionChartProps> = ({\n  data,\n  title,\n  type = 'area',\n  height = 300,\n  color = '#3b82f6',\n  formatValue,\n  className\n}) => {\n  const formatDate = (dateStr: string | Date) => {\n    const date = typeof dateStr === 'string' ? new Date(dateStr) : dateStr;\n    return date.toLocaleDateString('en-US', { \n      month: 'short', \n      year: '2-digit' \n    });\n  };\n\n  const formatCurrency = (value: number) => {\n    if (formatValue) return formatValue(value);\n    \n    if (value >= 1000000) {\n      return `$${(value / 1000000).toFixed(1)}M`;\n    } else if (value >= 1000) {\n      return `$${(value / 1000).toFixed(0)}K`;\n    }\n    return `$${value.toLocaleString()}`;\n  };\n\n  const chartData = data.map(item => ({\n    ...item,\n    dateFormatted: formatDate(item.date),\n    displayValue: item.value\n  }));\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-black/90 border border-white/20 rounded-lg p-3 shadow-lg\">\n          <p className=\"text-white/80 text-sm mb-1\">{label}</p>\n          <p className=\"text-white font-semibold\">\n            {formatCurrency(payload[0].value)}\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const ChartComponent = type === 'area' ? AreaChart : LineChart;\n\n  return (\n    <div className={cn(\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\", className)}>\n      <h3 className=\"text-lg font-semibold text-white mb-4\">{title}</h3>\n      \n      <ResponsiveContainer width=\"100%\" height={height}>\n        <ChartComponent data={chartData}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\n          <XAxis \n            dataKey=\"dateFormatted\"\n            stroke=\"rgba(255,255,255,0.6)\"\n            fontSize={12}\n            tickLine={false}\n            axisLine={false}\n          />\n          <YAxis \n            stroke=\"rgba(255,255,255,0.6)\"\n            fontSize={12}\n            tickLine={false}\n            axisLine={false}\n            tickFormatter={formatCurrency}\n          />\n          <Tooltip content={<CustomTooltip />} />\n          \n          {type === 'area' ? (\n            <Area\n              type=\"monotone\"\n              dataKey=\"displayValue\"\n              stroke={color}\n              strokeWidth={2}\n              fill={`${color}20`}\n              fillOpacity={0.3}\n            />\n          ) : (\n            <Line\n              type=\"monotone\"\n              dataKey=\"displayValue\"\n              stroke={color}\n              strokeWidth={2}\n              dot={false}\n              activeDot={{ r: 4, fill: color }}\n            />\n          )}\n        </ChartComponent>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default ProjectionChart; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/planning/components/tabs/DebtPayoffTab.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/planning/components/tabs/DebtPayoffTab.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  DollarSign,\n  Target,\n  TrendingDown,\n  Calendar,\n  Zap,\n  AlertCircle,\n  CheckCircle,\n  ArrowRight,\n  CreditCard\n} from 'lucide-react';\nimport { DebtPayoffPlan } from '@/shared/types/financialPlanning';\nimport { MockFinancialPlanningAPI } from '@/mocks/financialPlanningMocks';\nimport PlanningCard from '../shared/PlanningCard';\nimport { cn } from '@/shared/lib/utils';\n\ninterface DebtPayoffTabProps {\n  familyId: string;\n}\n\nconst DebtPayoffTab: React.FC<DebtPayoffTabProps> = ({ familyId }) => {\n  const [plan, setPlan] = useState<DebtPayoffPlan | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadDebtPlan();\n  }, [familyId]);\n\n  const loadDebtPlan = async () => {\n    setLoading(true);\n    try {\n      const debtPlan = await MockFinancialPlanningAPI.getDebtPayoffPlan(familyId);\n      setPlan(debtPlan);\n    } catch (error) {\n      console.error('Failed to load debt plan:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const formatPercentage = (value: number) => {\n    return `${(value * 100).toFixed(1)}%`;\n  };\n\n  const getDebtColor = (interestRate: number) => {\n    if (interestRate >= 0.20) return 'text-red-400';\n    if (interestRate >= 0.10) return 'text-orange-400';\n    return 'text-yellow-400';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 animate-pulse\">\n            <div className=\"flex items-center gap-4 mb-4\">\n              <div className=\"w-8 h-8 bg-white/[0.05] rounded\"></div>\n              <div className=\"h-6 bg-white/[0.05] rounded w-48\"></div>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"h-4 bg-white/[0.05] rounded w-full\"></div>\n              <div className=\"h-4 bg-white/[0.05] rounded w-3/4\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (!plan) {\n    return (\n      <div className=\"text-center py-12\">\n        <AlertCircle className=\"w-12 h-12 text-orange-400 mx-auto mb-4\" />\n        <h3 className=\"text-xl font-semibold text-white mb-2\">No Debt Plan Found</h3>\n        <p className=\"text-white/60\">Create a debt payoff strategy to get started.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white flex items-center gap-3\">\n            <DollarSign className=\"w-7 h-7 text-red-400\" />\n            Debt Payoff Strategy\n          </h2>\n          <p className=\"text-white/60 mt-1\">\n            {plan.strategy === 'avalanche' ? 'Avalanche Method' : 'Snowball Method'} • \n            {plan.projections.monthsToPayoff} months to debt-free\n          </p>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <PlanningCard\n          title=\"Total Debt\"\n          icon={CreditCard}\n          iconColor=\"text-red-400\"\n        >\n          <div className=\"text-2xl font-bold text-white\">\n            {formatCurrency(plan.projections.totalDebt)}\n          </div>\n          <div className=\"text-white/60 text-sm mt-1\">\n            {plan.debts.length} accounts\n          </div>\n        </PlanningCard>\n\n        <PlanningCard\n          title=\"Extra Payment\"\n          icon={Target}\n          iconColor=\"text-blue-400\"\n        >\n          <div className=\"text-2xl font-bold text-white\">\n            {formatCurrency(plan.extraPayment)}\n          </div>\n          <div className=\"text-white/60 text-sm mt-1\">\n            Per month\n          </div>\n        </PlanningCard>\n\n        <PlanningCard\n          title=\"Total Interest\"\n          icon={TrendingDown}\n          iconColor=\"text-orange-400\"\n        >\n          <div className=\"text-2xl font-bold text-white\">\n            {formatCurrency(plan.projections.totalInterest)}\n          </div>\n          <div className=\"text-white/60 text-sm mt-1\">\n            Over {plan.projections.monthsToPayoff} months\n          </div>\n        </PlanningCard>\n\n        <PlanningCard\n          title=\"Freedom Date\"\n          icon={Calendar}\n          iconColor=\"text-green-400\"\n        >\n          <div className=\"text-lg font-bold text-white\">\n            {plan.projections.payoffDate.toLocaleDateString('en-US', { \n              month: 'short', \n              year: 'numeric' \n            })}\n          </div>\n          <div className=\"text-white/60 text-sm mt-1\">\n            Debt-free in {plan.projections.monthsToPayoff} months\n          </div>\n        </PlanningCard>\n      </div>\n\n      {/* Strategy Information */}\n      <PlanningCard\n        variant=\"gradient\"\n        icon={Target}\n        iconColor=\"text-blue-400\"\n        title={`${plan.strategy === 'avalanche' ? 'Avalanche' : 'Snowball'} Strategy Active`}\n        description={\n          plan.strategy === 'avalanche' \n            ? 'Paying minimums on all debts, extra payments go to highest interest rate first.'\n            : 'Paying minimums on all debts, extra payments go to smallest balance first.'\n        }\n      >\n        <div className=\"mt-4 p-4 bg-white/[0.05] rounded-xl\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-white/80\">Monthly Savings After Payoff</span>\n            <span className=\"text-2xl font-bold text-green-400\">\n              {formatCurrency(plan.projections.monthlySavingsAfterPayoff)}\n            </span>\n          </div>\n        </div>\n      </PlanningCard>\n\n      {/* Debt List */}\n      <PlanningCard\n        title=\"Debt Accounts\"\n        icon={CreditCard}\n        iconColor=\"text-red-400\"\n      >\n        <div className=\"space-y-4\">\n          {plan.payoffSchedule.map((debt, index) => (\n            <div key={index} className=\"p-4 bg-white/[0.03] rounded-xl border border-white/[0.05]\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold text-white\">{debt.name}</h4>\n                  <div className=\"flex items-center gap-4 mt-1\">\n                    <span className=\"text-white/60 text-sm\">\n                      {formatPercentage(debt.interestRate)} APR\n                    </span>\n                    <span className={cn(\"text-sm font-medium\", getDebtColor(debt.interestRate))}>\n                      {debt.interestRate >= 0.20 ? 'High Interest' : \n                       debt.interestRate >= 0.10 ? 'Medium Interest' : 'Low Interest'}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-xl font-bold text-white\">\n                    {formatCurrency(debt.balance)}\n                  </div>\n                  <div className=\"text-white/60 text-sm\">\n                    {debt.monthsToPayoff} months\n                  </div>\n                </div>\n              </div>\n\n              {/* Progress Bar */}\n              <div className=\"mb-3\">\n                <div className=\"flex items-center justify-between text-sm mb-1\">\n                  <span className=\"text-white/80\">\n                    Min: {formatCurrency(debt.minimumPayment)}\n                  </span>\n                  <span className=\"text-white/60\">\n                    Interest: {formatCurrency(debt.totalInterest)}\n                  </span>\n                </div>\n                <div className=\"w-full bg-white/[0.05] rounded-full h-2\">\n                  <div \n                    className={cn(\n                      \"h-2 rounded-full\",\n                      debt.interestRate >= 0.20 ? \"bg-red-400\" :\n                      debt.interestRate >= 0.10 ? \"bg-orange-400\" : \"bg-yellow-400\"\n                    )}\n                    style={{ width: `${Math.min((debt.totalPaid / (debt.balance + debt.totalInterest)) * 100, 100)}%` }}\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-white/80\">\n                  Total Paid: {formatCurrency(debt.totalPaid)}\n                </span>\n                <span className=\"text-green-400\">\n                  Save vs. minimum: {formatCurrency(debt.totalInterest * 0.3)}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </PlanningCard>\n\n      {/* Recommendations */}\n      <PlanningCard\n        title=\"Debt Payoff Recommendations\"\n        icon={Zap}\n        iconColor=\"text-yellow-400\"\n      >\n        <div className=\"space-y-4\">\n          {plan.recommendations.map((rec, index) => (\n            <div key={index} className=\"p-4 bg-white/[0.03] rounded-xl border border-white/[0.05]\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold text-white mb-2\">{rec.title}</h4>\n                  <p className=\"text-white/70 text-sm mb-3\">{rec.description}</p>\n                  \n                  <div className=\"flex items-center gap-4\">\n                    <span className={cn(\n                      \"text-xs px-2 py-1 rounded-lg font-medium\",\n                      rec.impact === 'high' ? \"bg-red-500/20 text-red-400\" :\n                      rec.impact === 'medium' ? \"bg-yellow-500/20 text-yellow-400\" :\n                      \"bg-green-500/20 text-green-400\"\n                    )}>\n                      {rec.impact} impact\n                    </span>\n                    <span className=\"text-xs text-green-400\">\n                      Save: {formatCurrency(rec.estimatedBenefit)}\n                    </span>\n                  </div>\n\n                  {/* Action Items */}\n                  <div className=\"mt-3\">\n                    <div className=\"text-xs text-white/60 mb-2\">Recommended Actions:</div>\n                    <div className=\"space-y-1\">\n                      {rec.actionItems.map((action, actionIndex) => (\n                        <div key={actionIndex} className=\"flex items-center gap-2 text-xs text-white/70\">\n                          <CheckCircle className=\"w-3 h-3 text-green-400\" />\n                          {action}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n                \n                <ArrowRight className=\"w-4 h-4 text-white/60\" />\n              </div>\n            </div>\n          ))}\n        </div>\n      </PlanningCard>\n    </div>\n  );\n};\n\nexport default DebtPayoffTab; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/planning/components/tabs/LifePlanningTab.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/planning/components/tabs/LifePlanningTab.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Calendar,\n  Baby,\n  Home,\n  GraduationCap,\n  Heart,\n  Car,\n  Briefcase,\n  Plus,\n  Target,\n  Zap,\n  AlertCircle\n} from 'lucide-react';\nimport { LifeEventPlanning } from '@/shared/types/financialPlanning';\nimport { MockFinancialPlanningAPI } from '@/mocks/financialPlanningMocks';\nimport PlanningCard from '../shared/PlanningCard';\nimport { cn } from '@/shared/lib/utils';\n\ninterface LifePlanningTabProps {\n  familyId: string;\n}\n\nconst LifePlanningTab: React.FC<LifePlanningTabProps> = ({ familyId }) => {\n  const [plans, setPlans] = useState<LifeEventPlanning[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadLifeEventPlans();\n  }, [familyId]);\n\n  const loadLifeEventPlans = async () => {\n    setLoading(true);\n    try {\n      const lifeEventPlans = await MockFinancialPlanningAPI.getLifeEventPlans(familyId);\n      setPlans(lifeEventPlans);\n    } catch (error) {\n      console.error('Failed to load life event plans:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const getEventIcon = (eventType: string) => {\n    const icons = {\n      baby: Baby,\n      marriage: Heart,\n      house_purchase: Home,\n      education: GraduationCap,\n      car_purchase: Car,\n      job_change: Briefcase,\n      retirement: Calendar\n    };\n    return icons[eventType as keyof typeof icons] || Calendar;\n  };\n\n  const getEventColor = (eventType: string) => {\n    const colors = {\n      baby: 'text-pink-400',\n      marriage: 'text-red-400',\n      house_purchase: 'text-green-400',\n      education: 'text-blue-400',\n      car_purchase: 'text-indigo-400',\n      job_change: 'text-orange-400',\n      retirement: 'text-purple-400'\n    };\n    return colors[eventType as keyof typeof colors] || 'text-blue-400';\n  };\n\n  const getEventLabel = (eventType: string) => {\n    const labels = {\n      baby: 'Baby/Child',\n      marriage: 'Wedding',\n      house_purchase: 'Home Purchase',\n      education: 'Education',\n      car_purchase: 'Vehicle',\n      job_change: 'Career Change',\n      retirement: 'Retirement'\n    };\n    return labels[eventType as keyof typeof labels] || eventType;\n  };\n\n  const calculateProgress = (plan: LifeEventPlanning) => {\n    return Math.min((plan.currentSavings / plan.estimatedCost) * 100, 100);\n  };\n\n  const calculateMonthsRemaining = (targetDate: Date) => {\n    const now = new Date();\n    const diffTime = targetDate.getTime() - now.getTime();\n    const diffMonths = Math.ceil(diffTime / (1000 * 60 * 60 * 24 * 30));\n    return Math.max(diffMonths, 0);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 animate-pulse\">\n            <div className=\"flex items-center gap-4 mb-4\">\n              <div className=\"w-8 h-8 bg-white/[0.05] rounded\"></div>\n              <div className=\"h-6 bg-white/[0.05] rounded w-48\"></div>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"h-4 bg-white/[0.05] rounded w-full\"></div>\n              <div className=\"h-4 bg-white/[0.05] rounded w-3/4\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white flex items-center gap-3\">\n            <Calendar className=\"w-7 h-7 text-purple-400\" />\n            Life Event Planning\n          </h2>\n          <p className=\"text-white/60 mt-1\">\n            Plan and save for major life milestones\n          </p>\n        </div>\n        <button className=\"bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-xl transition-colors flex items-center gap-2\">\n          <Plus className=\"w-4 h-4\" />\n          Add Event\n        </button>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <PlanningCard\n          title=\"Active Plans\"\n          icon={Target}\n          iconColor=\"text-blue-400\"\n        >\n          <div className=\"text-2xl font-bold text-white\">\n            {plans.length}\n          </div>\n          <div className=\"text-white/60 text-sm mt-1\">\n            Life events tracked\n          </div>\n        </PlanningCard>\n\n        <PlanningCard\n          title=\"Total Estimated Cost\"\n          icon={Calendar}\n          iconColor=\"text-orange-400\"\n        >\n          <div className=\"text-2xl font-bold text-white\">\n            {formatCurrency(plans.reduce((sum, plan) => sum + plan.estimatedCost, 0))}\n          </div>\n          <div className=\"text-white/60 text-sm mt-1\">\n            Across all events\n          </div>\n        </PlanningCard>\n\n        <PlanningCard\n          title=\"Total Saved\"\n          icon={Target}\n          iconColor=\"text-green-400\"\n        >\n          <div className=\"text-2xl font-bold text-white\">\n            {formatCurrency(plans.reduce((sum, plan) => sum + plan.currentSavings, 0))}\n          </div>\n          <div className=\"text-white/60 text-sm mt-1\">\n            {Math.round(plans.reduce((sum, plan) => sum + calculateProgress(plan), 0) / plans.length || 0)}% complete\n          </div>\n        </PlanningCard>\n      </div>\n\n      {/* Life Event Plans */}\n      <div className=\"space-y-4\">\n        {plans.map((plan, index) => {\n          const EventIcon = getEventIcon(plan.eventType);\n          const iconColor = getEventColor(plan.eventType);\n          const progress = calculateProgress(plan);\n          const monthsRemaining = calculateMonthsRemaining(plan.plannedDate);\n          const monthlyNeeded = monthsRemaining > 0 ? \n            (plan.estimatedCost - plan.currentSavings) / monthsRemaining : 0;\n\n          return (\n            <PlanningCard\n              key={index}\n              title={getEventLabel(plan.eventType)}\n              icon={EventIcon}\n              iconColor={iconColor}\n              variant=\"highlight\"\n            >\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* Progress Section */}\n                <div className=\"lg:col-span-2 space-y-4\">\n                  {/* Financial Progress */}\n                  <div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-white/80 text-sm\">Financial Progress</span>\n                      <span className=\"text-white/60 text-sm\">{Math.round(progress)}%</span>\n                    </div>\n                    <div className=\"w-full bg-white/[0.05] rounded-full h-3\">\n                      <div \n                        className={cn(\"h-3 rounded-full transition-all duration-500\", \n                          progress >= 100 ? \"bg-green-400\" :\n                          progress >= 50 ? \"bg-blue-400\" : \"bg-orange-400\"\n                        )}\n                        style={{ width: `${Math.min(progress, 100)}%` }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Key Metrics */}\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <div className=\"text-center p-3 bg-white/[0.03] rounded-xl\">\n                      <div className=\"text-lg font-bold text-white\">\n                        {formatCurrency(plan.estimatedCost)}\n                      </div>\n                      <div className=\"text-white/60 text-xs\">Target Cost</div>\n                    </div>\n                    \n                    <div className=\"text-center p-3 bg-white/[0.03] rounded-xl\">\n                      <div className=\"text-lg font-bold text-white\">\n                        {formatCurrency(plan.currentSavings)}\n                      </div>\n                      <div className=\"text-white/60 text-xs\">Saved</div>\n                    </div>\n                    \n                    <div className=\"text-center p-3 bg-white/[0.03] rounded-xl\">\n                      <div className=\"text-lg font-bold text-white\">\n                        {formatCurrency(plan.monthlyContribution)}\n                      </div>\n                      <div className=\"text-white/60 text-xs\">Monthly</div>\n                    </div>\n                    \n                    <div className=\"text-center p-3 bg-white/[0.03] rounded-xl\">\n                      <div className=\"text-lg font-bold text-white\">\n                        {monthsRemaining}\n                      </div>\n                      <div className=\"text-white/60 text-xs\">Months Left</div>\n                    </div>\n                  </div>\n\n                  {/* Timeline */}\n                  <div className=\"p-4 bg-white/[0.03] rounded-xl\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"text-white font-semibold\">Target Date</div>\n                        <div className=\"text-white/60 text-sm\">\n                          {plan.plannedDate.toLocaleDateString('en-US', { \n                            weekday: 'long',\n                            year: 'numeric', \n                            month: 'long', \n                            day: 'numeric' \n                          })}\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-white font-semibold\">\n                          {monthlyNeeded > plan.monthlyContribution ? 'Behind Schedule' : 'On Track'}\n                        </div>\n                        {monthlyNeeded > plan.monthlyContribution && (\n                          <div className=\"text-orange-400 text-sm\">\n                            Need: {formatCurrency(monthlyNeeded)}/month\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Recommendations Section */}\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-white font-semibold flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4 text-yellow-400\" />\n                    Recommendations\n                  </h4>\n                  \n                  {plan.recommendations.map((rec, recIndex) => (\n                    <div key={recIndex} className=\"p-3 bg-white/[0.03] rounded-xl border border-white/[0.05]\">\n                      <h5 className=\"font-semibold text-white text-sm mb-1\">{rec.title}</h5>\n                      <p className=\"text-white/70 text-xs mb-2\">{rec.description}</p>\n                      \n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <span className={cn(\n                          \"text-xs px-2 py-1 rounded-lg font-medium\",\n                          rec.impact === 'high' ? \"bg-red-500/20 text-red-400\" :\n                          rec.impact === 'medium' ? \"bg-yellow-500/20 text-yellow-400\" :\n                          \"bg-green-500/20 text-green-400\"\n                        )}>\n                          {rec.impact} impact\n                        </span>\n                        <span className=\"text-xs text-green-400\">\n                          +{formatCurrency(rec.estimatedBenefit)}\n                        </span>\n                      </div>\n\n                      <div className=\"space-y-1\">\n                        {rec.actionItems.map((action, actionIndex) => (\n                          <div key={actionIndex} className=\"flex items-center gap-2 text-xs text-white/70\">\n                            <div className=\"w-1 h-1 bg-white/40 rounded-full\" />\n                            {action}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </PlanningCard>\n          );\n        })}\n      </div>\n\n      {/* No Plans State */}\n      {plans.length === 0 && (\n        <PlanningCard\n          title=\"No Life Events Planned\"\n          icon={AlertCircle}\n          iconColor=\"text-orange-400\"\n          variant=\"highlight\"\n        >\n          <div className=\"text-center py-8\">\n            <Calendar className=\"w-16 h-16 text-white/20 mx-auto mb-4\" />\n            <p className=\"text-white/60 mb-4\">\n              Start planning for major life events like buying a home, having a baby, or pursuing education.\n            </p>\n            <button className=\"bg-purple-500 hover:bg-purple-600 text-white px-6 py-3 rounded-xl transition-colors flex items-center gap-2 mx-auto\">\n              <Plus className=\"w-4 h-4\" />\n              Add Your First Life Event\n            </button>\n          </div>\n        </PlanningCard>\n      )}\n    </div>\n  );\n};\n\nexport default LifePlanningTab; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/planning/components/tabs/RetirementTab.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/planning/components/tabs/RetirementTab.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Briefcase,\n  TrendingUp,\n  Target,\n  Calculator,\n  PieChart,\n  Zap,\n  AlertCircle,\n  CheckCircle,\n  ArrowRight\n} from 'lucide-react';\nimport { RetirementPlan } from '@/shared/types/financialPlanning';\nimport { MockFinancialPlanningAPI } from '@/mocks/financialPlanningMocks';\nimport PlanningCard from '../shared/PlanningCard';\nimport ProjectionChart from '../shared/ProjectionChart';\nimport { cn } from '@/shared/lib/utils';\n\ninterface RetirementTabProps {\n  familyId: string;\n}\n\nconst RetirementTab: React.FC<RetirementTabProps> = ({ familyId }) => {\n  const [plan, setPlan] = useState<RetirementPlan | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadRetirementPlan();\n  }, [familyId]);\n\n  const loadRetirementPlan = async () => {\n    setLoading(true);\n    try {\n      const retirementPlan = await MockFinancialPlanningAPI.getRetirementPlan(familyId);\n      setPlan(retirementPlan);\n    } catch (error) {\n      console.error('Failed to load retirement plan:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const formatPercentage = (value: number) => {\n    return `${(value * 100).toFixed(1)}%`;\n  };\n\n  const generateProjectionData = () => {\n    if (!plan) return [];\n    \n    const data: Array<{\n      date: Date;\n      value: number;\n      label: string;\n    }> = [];\n    const yearsToRetirement = plan.yearsToRetirement;\n    const monthlyContribution = plan.monthlyContribution;\n    const expectedReturn = plan.projections.expectedReturn;\n    let currentValue = plan.currentSavings;\n    \n    for (let year = 0; year <= yearsToRetirement; year++) {\n      if (year > 0) {\n        currentValue = currentValue * (1 + expectedReturn) + (monthlyContribution * 12);\n      }\n      \n      data.push({\n        date: new Date(Date.now() + year * 365 * 24 * 60 * 60 * 1000),\n        value: Math.round(currentValue),\n        label: `Year ${year}`\n      });\n    }\n    \n    return data;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6 animate-pulse\">\n            <div className=\"flex items-center gap-4 mb-4\">\n              <div className=\"w-8 h-8 bg-white/[0.05] rounded\"></div>\n              <div className=\"h-6 bg-white/[0.05] rounded w-48\"></div>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"h-4 bg-white/[0.05] rounded w-full\"></div>\n              <div className=\"h-4 bg-white/[0.05] rounded w-3/4\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (!plan) {\n    return (\n      <div className=\"text-center py-12\">\n        <AlertCircle className=\"w-12 h-12 text-orange-400 mx-auto mb-4\" />\n        <h3 className=\"text-xl font-semibold text-white mb-2\">No Retirement Plan Found</h3>\n        <p className=\"text-white/60\">Create a retirement plan to get started.</p>\n      </div>\n    );\n  }\n\n  const isOnTrack = plan.projections.shortfall <= 0;\n  const projectionData = generateProjectionData();\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white flex items-center gap-3\">\n            <Briefcase className=\"w-7 h-7 text-blue-400\" />\n            Retirement Planning\n          </h2>\n          <p className=\"text-white/60 mt-1\">\n            {plan.yearsToRetirement} years to retirement\n          </p>\n        </div>\n      </div>\n\n      {/* Current Status Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <PlanningCard\n          title=\"Current Savings\"\n          icon={TrendingUp}\n          iconColor=\"text-green-400\"\n        >\n          <div className=\"text-2xl font-bold text-white\">\n            {formatCurrency(plan.currentSavings)}\n          </div>\n        </PlanningCard>\n\n        <PlanningCard\n          title=\"Monthly Contribution\"\n          icon={Calculator}\n          iconColor=\"text-blue-400\"\n        >\n          <div className=\"text-2xl font-bold text-white\">\n            {formatCurrency(plan.monthlyContribution)}\n          </div>\n        </PlanningCard>\n\n        <PlanningCard\n          title=\"Projected Value\"\n          icon={Target}\n          iconColor=\"text-purple-400\"\n        >\n          <div className=\"text-2xl font-bold text-white\">\n            {formatCurrency(plan.projections.totalRetirementValue)}\n          </div>\n        </PlanningCard>\n\n        <PlanningCard\n          title=\"Monthly Income\"\n          icon={PieChart}\n          iconColor=\"text-orange-400\"\n        >\n          <div className=\"text-2xl font-bold text-white\">\n            {formatCurrency(plan.projections.monthlyIncomeAtRetirement)}\n          </div>\n        </PlanningCard>\n      </div>\n\n      {/* Status Alert */}\n      <PlanningCard\n        variant={isOnTrack ? 'gradient' : 'highlight'}\n        icon={isOnTrack ? CheckCircle : AlertCircle}\n        iconColor={isOnTrack ? 'text-green-400' : 'text-orange-400'}\n        title={isOnTrack ? 'On Track for Retirement' : 'Retirement Shortfall Detected'}\n        description={\n          isOnTrack \n            ? 'Your current savings rate should meet your retirement goals.'\n            : `Projected shortfall of ${formatCurrency(plan.projections.shortfall)}.`\n        }\n      />\n\n      {/* Projection Chart */}\n      <ProjectionChart\n        data={projectionData}\n        title=\"Retirement Savings Projection\"\n        type=\"area\"\n        height={350}\n        color=\"#3b82f6\"\n      />\n\n      {/* Recommendations */}\n      <PlanningCard\n        title=\"AI Recommendations\"\n        icon={Zap}\n        iconColor=\"text-yellow-400\"\n      >\n        <div className=\"space-y-4\">\n          {plan.recommendations.map((rec, index) => (\n            <div key={index} className=\"p-4 bg-white/[0.03] rounded-xl border border-white/[0.05]\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold text-white mb-2\">{rec.title}</h4>\n                  <p className=\"text-white/70 text-sm mb-3\">{rec.description}</p>\n                  \n                  <div className=\"flex items-center gap-4\">\n                    <span className={cn(\n                      \"text-xs px-2 py-1 rounded-lg font-medium\",\n                      rec.impact === 'high' ? \"bg-red-500/20 text-red-400\" :\n                      rec.impact === 'medium' ? \"bg-yellow-500/20 text-yellow-400\" :\n                      \"bg-green-500/20 text-green-400\"\n                    )}>\n                      {rec.impact} impact\n                    </span>\n                    <span className=\"text-xs text-green-400\">\n                      Benefit: {formatCurrency(rec.estimatedBenefit)}\n                    </span>\n                  </div>\n                </div>\n                \n                <ArrowRight className=\"w-4 h-4 text-white/60\" />\n              </div>\n            </div>\n          ))}\n        </div>\n      </PlanningCard>\n    </div>\n  );\n};\n\nexport default RetirementTab; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/privacy-hide-amounts/components/PrivacyToggle.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/privacy-hide-amounts/components/PrivacyToggle.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Switch } from \"@/shared/ui/switch\";\nimport { usePrivacyStore } from \"../store\";\nimport { UniversalCard } from \"@/shared/ui/UniversalCard\";\nimport { EyeOff } from \"lucide-react\";\n\nexport const PrivacyToggle: React.FC = () => {\n  const hide = usePrivacyStore((s) => s.setting.hideAmounts);\n  const toggle = usePrivacyStore((s) => s.toggle);\n  \n  return (\n    <UniversalCard\n      variant=\"glass\"\n      size=\"md\"\n      title=\"Privacy Settings\"\n      icon={EyeOff}\n      iconColor=\"#8b5cf6\"\n    >\n      <div className=\"flex items-center justify-between\">\n        <span className=\"text-sm text-white/70\">Hide amounts</span>\n        <Switch checked={hide} onCheckedChange={toggle} />\n      </div>\n    </UniversalCard>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/privacy-hide-amounts/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/privacy-hide-amounts/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export { usePrivacyStore } from \"./store\";\nexport { PrivacyToggle } from \"./components/PrivacyToggle\";\n\nexport const maskCurrency = (formatted: string) => {\n  return formatted.replace(/\\d/g, \"•\");\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/privacy-hide-amounts/store.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/privacy-hide-amounts/store.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport { PrivacySetting } from \"@/shared/types/shared\";\n\ninterface PrivacyState {\n  setting: PrivacySetting;\n  toggle: () => void;\n}\n\nexport const usePrivacyStore = create<PrivacyState>(\n  persist(\n    (set, get) => ({\n      setting: {\n        hideAmounts: false,\n        updatedAt: new Date().toISOString(),\n      },\n      toggle: () => {\n        const current = get().setting.hideAmounts;\n        set({\n          setting: {\n            hideAmounts: !current,\n            updatedAt: new Date().toISOString(),\n          },\n        });\n      },\n    }),\n    {\n      name: \"privacy-setting\",\n    }\n  )\n); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/safe-to-spend/api/safeToSpendService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/safe-to-spend/api/safeToSpendService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SpendableCash } from \"../types\";\n\nexport interface SafeToSpendService {\n  calculate: () => Promise<SpendableCash>;\n}\n\nclass MockSafeToSpendService implements SafeToSpendService {\n  async calculate(): Promise<SpendableCash> {\n    // Mock calculation: random safe amount + next Friday as payday\n    const today = new Date();\n    const nextFriday = new Date(today);\n    nextFriday.setDate(today.getDate() + ((5 - today.getDay() + 7) % 7));\n\n    return {\n      amount: Math.floor(Math.random() * 800) + 200, // $200-$1000\n      payday: nextFriday.toISOString(),\n      calculatedAt: new Date().toISOString(),\n    };\n  }\n}\n\nexport const safeToSpendService: SafeToSpendService = new MockSafeToSpendService(); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/safe-to-spend/components/SafeToSpendCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/safe-to-spend/components/SafeToSpendCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\nimport { useSafeToSpendStore } from \"../store\";\nimport { UniversalCard } from \"@/shared/ui/UniversalCard\";\nimport { formatCurrency } from \"@/shared/utils/formatters\";\nimport { DollarSign, Calendar } from \"lucide-react\";\n\nexport const SafeToSpendCard: React.FC = () => {\n  const { cash, loading, refresh } = useSafeToSpendStore((s) => ({\n    cash: s.cash,\n    loading: s.loading,\n    refresh: s.refresh,\n  }));\n\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n\n  return (\n    <UniversalCard\n      variant=\"glass\"\n      size=\"md\"\n      title=\"Safe to Spend\"\n      icon={DollarSign}\n      iconColor=\"#10b981\"\n      value={cash ? formatCurrency(cash.amount) : loading ? \"Calculating...\" : \"No data\"}\n      orientation=\"vertical\"\n    >\n      {cash && (\n        <div className=\"space-y-3\">\n          <p className=\"text-white/60 text-sm text-center\">Available to spend safely</p>\n          <div className=\"flex items-center justify-center gap-2 text-sm text-white/60\">\n            <Calendar className=\"w-4 h-4\" />\n            <span>Next payday: {new Date(cash.payday).toLocaleDateString()}</span>\n          </div>\n        </div>\n      )}\n    </UniversalCard>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/safe-to-spend/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/safe-to-spend/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export { useSafeToSpendStore } from \"./store\";\nexport { SafeToSpendCard } from \"./components/SafeToSpendCard\"; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/safe-to-spend/store.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/safe-to-spend/store.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from \"zustand\";\nimport { safeToSpendService } from \"@/features/safe-to-spend/api/safeToSpendService\";\nimport { SpendableCash } from \"@/shared/types/shared\";\n\ninterface SafeToSpendState {\n  cash?: SpendableCash;\n  loading: boolean;\n  error?: string;\n  refresh: () => Promise<void>;\n}\n\nexport const useSafeToSpendStore = create<SafeToSpendState>((set) => ({\n  cash: undefined,\n  loading: false,\n  error: undefined,\n  refresh: async () => {\n    set({ loading: true, error: undefined });\n    try {\n      const cash = await safeToSpendService.calculate();\n      set({ cash, loading: false });\n    } catch (err: any) {\n      set({ error: err.message ?? \"Unknown\", loading: false });\n    }\n  },\n})); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/savings/SavingsGoals.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/savings/SavingsGoals.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":" ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/savings/api/savingsGoalsService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/savings/api/savingsGoalsService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SavingsGoal, Contribution, SavingsInsight } from '@/types/savingsGoals';\nimport { VueniSecureStorage } from '@/shared/utils/crypto';\n\nexport class SavingsGoalsService {\n  private static instance: SavingsGoalsService;\n  private storageKey = 'vueni:savings:goals:v1';\n  private goals: SavingsGoal[] = [];\n\n  private constructor() {\n    this.load();\n  }\n\n  static getInstance(): SavingsGoalsService {\n    if (!SavingsGoalsService.instance) {\n      SavingsGoalsService.instance = new SavingsGoalsService();\n    }\n    return SavingsGoalsService.instance;\n  }\n\n  private load(): void {\n    if (typeof window === 'undefined') return;\n    try {\n      const data = VueniSecureStorage.getItem(this.storageKey);\n      if (data) {\n        this.goals = data as SavingsGoal[];\n      }\n    } catch (error) {\n      console.error('Failed to load savings goals from secure storage:', error);\n      this.goals = [];\n    }\n  }\n\n  private persist(): void {\n    if (typeof window === 'undefined') return;\n    try {\n      VueniSecureStorage.setItem(this.storageKey, this.goals, { sensitive: true });\n    } catch (error) {\n      console.error('Failed to persist savings goals to secure storage:', error);\n    }\n  }\n\n  async getGoals(): Promise<SavingsGoal[]> {\n    // Mock data - replace with API call\n    if (this.goals.length === 0) {\n      this.goals = [\n        {\n          id: '1',\n          name: 'Emergency Fund',\n          description: 'Save 6 months of expenses',\n          targetAmount: 15000,\n          currentAmount: 8500,\n          targetDate: '2024-12-31',\n          category: 'Emergency Fund',\n          color: '#ef4444',\n          icon: '🛡️',\n          isCompleted: false,\n          createdAt: '2024-01-01',\n          contributions: [\n            {\n              id: '1',\n              amount: 1000,\n              date: '2024-01-15',\n              type: 'manual',\n              description: 'Initial deposit'\n            },\n            {\n              id: '2',\n              amount: 500,\n              date: '2024-02-01',\n              type: 'automatic',\n              description: 'Monthly transfer'\n            }\n          ]\n        },\n        {\n          id: '2',\n          name: 'Vacation to Japan',\n          description: 'Trip for two weeks',\n          targetAmount: 5000,\n          currentAmount: 2800,\n          targetDate: '2024-09-15',\n          category: 'Vacation',\n          color: '#10b981',\n          icon: '✈️',\n          isCompleted: false,\n          createdAt: '2024-02-01',\n          contributions: [\n            {\n              id: '3',\n              amount: 800,\n              date: '2024-02-15',\n              type: 'manual',\n              description: 'Initial vacation fund'\n            }\n          ]\n        },\n        {\n          id: '3',\n          name: 'New Car',\n          description: 'Down payment for Tesla Model 3',\n          targetAmount: 12000,\n          currentAmount: 4200,\n          targetDate: '2025-03-01',\n          category: 'Car',\n          color: '#3b82f6',\n          icon: '🚗',\n          isCompleted: false,\n          createdAt: '2024-03-01',\n          contributions: []\n        }\n      ];\n    }\n    return this.goals;\n  }\n\n  async createGoal(goal: Omit<SavingsGoal, 'id' | 'createdAt' | 'contributions' | 'isCompleted'>): Promise<SavingsGoal> {\n    const newGoal: SavingsGoal = {\n      ...goal,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString(),\n      contributions: [],\n      isCompleted: false\n    };\n    \n    this.goals.push(newGoal);\n    this.persist();\n    return newGoal;\n  }\n\n  async addContribution(goalId: string, contribution: Omit<Contribution, 'id'>): Promise<void> {\n    const goal = this.goals.find(g => g.id === goalId);\n    if (goal) {\n      const newContribution: Contribution = {\n        ...contribution,\n        id: Date.now().toString()\n      };\n      \n      goal.contributions.push(newContribution);\n      goal.currentAmount += contribution.amount;\n      \n      if (goal.currentAmount >= goal.targetAmount) {\n        goal.isCompleted = true;\n      }\n      \n      this.persist();\n    }\n  }\n\n  async updateGoal(goalId: string, updates: Partial<SavingsGoal>): Promise<void> {\n    const goalIndex = this.goals.findIndex(g => g.id === goalId);\n    if (goalIndex !== -1) {\n      this.goals[goalIndex] = { ...this.goals[goalIndex], ...updates };\n      this.persist();\n    }\n  }\n\n  async deleteGoal(goalId: string): Promise<void> {\n    this.goals = this.goals.filter(g => g.id !== goalId);\n    this.persist();\n  }\n\n  async getSavingsInsights(): Promise<SavingsInsight[]> {\n    const goals = await this.getGoals();\n    const insights: SavingsInsight[] = [];\n\n    goals.forEach(goal => {\n      const progress = (goal.currentAmount / goal.targetAmount) * 100;\n      const daysLeft = Math.ceil((new Date(goal.targetDate).getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n      const dailyRequired = Math.max(0, (goal.targetAmount - goal.currentAmount) / daysLeft);\n\n      if (progress >= 100) {\n        insights.push({\n          type: 'milestone',\n          title: `🎉 ${goal.name} Complete!`,\n          description: `You've reached your ${goal.name} goal of $${goal.targetAmount.toLocaleString()}`,\n          actionable: false\n        });\n      } else if (progress >= 75) {\n        insights.push({\n          type: 'progress',\n          title: `Almost there! 📈`,\n          description: `You're ${progress.toFixed(0)}% of the way to your ${goal.name} goal`,\n          actionable: false\n        });\n      } else if (dailyRequired > 0 && daysLeft > 0) {\n        insights.push({\n          type: 'suggestion',\n          title: `Stay on track 💪`,\n          description: `Save $${dailyRequired.toFixed(0)} daily to reach your ${goal.name} goal`,\n          actionable: true,\n          action: 'Set up automatic savings'\n        });\n      } else if (daysLeft <= 0 && progress < 100) {\n        insights.push({\n          type: 'suggestion',\n          title: `Goal deadline passed ⏰`,\n          description: `Consider extending the deadline for your ${goal.name} goal or adjusting the target`,\n          actionable: true,\n          action: 'Adjust goal'\n        });\n      }\n    });\n\n    // Add general insights\n    if (goals.length === 0) {\n      insights.push({\n        type: 'suggestion',\n        title: 'Start your savings journey! 🌟',\n        description: 'Create your first savings goal to begin building wealth',\n        actionable: true,\n        action: 'Create first goal'\n      });\n    } else if (goals.length < 3) {\n      insights.push({\n        type: 'suggestion',\n        title: 'Diversify your goals 🎯',\n        description: 'Consider adding more savings goals for different priorities',\n        actionable: true,\n        action: 'Add new goal'\n      });\n    }\n\n    return insights;\n  }\n\n  calculateMonthlyContribution(targetAmount: number, currentAmount: number, targetDate: string): number {\n    const monthsLeft = Math.ceil((new Date(targetDate).getTime() - Date.now()) / (1000 * 60 * 60 * 24 * 30));\n    return Math.max(0, (targetAmount - currentAmount) / Math.max(1, monthsLeft));\n  }\n\n  calculateDailyContribution(targetAmount: number, currentAmount: number, targetDate: string): number {\n    const daysLeft = Math.ceil((new Date(targetDate).getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n    return Math.max(0, (targetAmount - currentAmount) / Math.max(1, daysLeft));\n  }\n\n  getGoalById(goalId: string): Promise<SavingsGoal | undefined> {\n    return Promise.resolve(this.goals.find(g => g.id === goalId));\n  }\n}\n\nexport const savingsGoalsService = SavingsGoalsService.getInstance(); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/savings/components/GoalCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/savings/components/GoalCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Calendar, TrendingUp, Plus, Target, Clock } from 'lucide-react';\nimport { SavingsGoal } from '@/types/savingsGoals';\nimport { savingsGoalsService } from '@/features/savings/api/savingsGoalsService';\nimport { UnifiedCard } from '@/shared/ui/UnifiedCard';\nimport { formatCurrency } from '@/shared/utils/formatters';\n\ninterface GoalCardProps {\n  goal: SavingsGoal;\n  onGoalUpdate?: () => void;\n}\n\nconst GoalCard = React.memo<GoalCardProps>(({ goal, onGoalUpdate }) => {\n  const [showContribution, setShowContribution] = useState(false);\n  const [contributionAmount, setContributionAmount] = useState('');\n  const [isAddingContribution, setIsAddingContribution] = useState(false);\n\n  const progress = (goal.currentAmount / goal.targetAmount) * 100;\n  const daysLeft = Math.ceil((new Date(goal.targetDate).getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n  const monthlyNeeded = savingsGoalsService.calculateMonthlyContribution(\n    goal.targetAmount, \n    goal.currentAmount, \n    goal.targetDate\n  );\n\n  const handleAddContribution = async () => {\n    const amount = parseFloat(contributionAmount);\n    if (amount > 0) {\n      setIsAddingContribution(true);\n      try {\n        await savingsGoalsService.addContribution(goal.id, {\n          amount,\n          date: new Date().toISOString(),\n          type: 'manual',\n          description: 'Manual contribution'\n        });\n        setContributionAmount('');\n        setShowContribution(false);\n        onGoalUpdate?.();\n      } catch (error) {\n        console.error('Failed to add contribution:', error);\n      } finally {\n        setIsAddingContribution(false);\n      }\n    }\n  };\n\n  const getProgressColor = () => {\n    if (progress >= 100) return '#22c55e';\n    if (progress >= 75) return '#84cc16';\n    if (progress >= 50) return '#eab308';\n    if (progress >= 25) return '#f97316';\n    return '#ef4444';\n  };\n\n  return (\n    <UnifiedCard\n      title={goal.name}\n      subtitle={goal.description || goal.category}\n      metric={formatCurrency(goal.currentAmount)}\n      delta={{\n        value: goal.targetAmount - goal.currentAmount,\n        format: 'currency',\n        label: 'remaining'\n      }}\n      icon={goal.icon}\n      progress={{\n        value: goal.currentAmount,\n        max: goal.targetAmount,\n        color: getProgressColor(),\n        showLabel: true\n      }}\n      badge={goal.isCompleted ? {\n        text: 'Complete',\n        variant: 'success'\n      } : daysLeft <= 0 ? {\n        text: 'Overdue',\n        variant: 'error'\n      } : daysLeft <= 30 ? {\n        text: `${daysLeft} days left`,\n        variant: 'warning'\n      } : undefined}\n      variant=\"default\"\n      size=\"lg\"\n      interactive={true}\n      className=\"relative overflow-hidden hover:bg-white/[0.03] transition-all\"\n    >\n      {/* Goal Stats */}\n      <div className=\"grid grid-cols-2 gap-4 mt-4 mb-4\">\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-1 mb-1\">\n            <Target className=\"w-3 h-3 text-white/60\" />\n            <div className=\"text-white font-semibold text-sm\">\n              {formatCurrency(monthlyNeeded)}\n            </div>\n          </div>\n          <div className=\"text-white/60 text-xs\">Monthly needed</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-1 mb-1\">\n            <Calendar className=\"w-3 h-3 text-white/60\" />\n            <div className=\"text-white font-semibold text-sm\">\n              {new Date(goal.targetDate).toLocaleDateString('en-US', { \n                month: 'short', \n                year: 'numeric' \n              })}\n            </div>\n          </div>\n          <div className=\"text-white/60 text-xs\">Target date</div>\n        </div>\n      </div>\n\n      {/* Recent Contributions */}\n      {goal.contributions.length > 0 && (\n        <div className=\"mb-4\">\n          <div className=\"text-white/60 text-xs mb-2\">Recent Activity</div>\n          <div className=\"space-y-1\">\n            {goal.contributions.slice(-2).map((contribution) => (\n              <div key={contribution.id} className=\"flex justify-between text-xs\">\n                <span className=\"text-white/80\">\n                  {new Date(contribution.date).toLocaleDateString()}\n                </span>\n                <span className=\"text-green-400 font-medium\">\n                  +{formatCurrency(contribution.amount)}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Add Contribution Button */}\n      {!goal.isCompleted && (\n        <div className=\"border-t border-white/[0.06] pt-4\">\n          {!showContribution ? (\n            <button\n              onClick={() => setShowContribution(true)}\n              className=\"w-full py-2 bg-white/[0.05] border border-white/[0.12] rounded-lg text-white/80 hover:bg-white/[0.08] hover:text-white transition-all text-sm font-medium flex items-center justify-center space-x-2\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              <span>Add Contribution</span>\n            </button>\n          ) : (\n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"text-white text-sm font-medium mb-2 block\">\n                  Add Contribution\n                </label>\n                <div className=\"flex space-x-2\">\n                  <input\n                    type=\"number\"\n                    value={contributionAmount}\n                    onChange={(e) => setContributionAmount(e.target.value)}\n                    placeholder=\"Amount\"\n                    className=\"flex-1 bg-white/[0.05] border border-white/[0.12] rounded-lg px-3 py-2 text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50\"\n                    disabled={isAddingContribution}\n                  />\n                  <button\n                    onClick={handleAddContribution}\n                    disabled={!contributionAmount || parseFloat(contributionAmount) <= 0 || isAddingContribution}\n                    className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg text-sm font-medium disabled:opacity-50 disabled:cursor-not-allowed transition-all\"\n                  >\n                    {isAddingContribution ? '...' : 'Add'}\n                  </button>\n                </div>\n              </div>\n              <button\n                onClick={() => setShowContribution(false)}\n                className=\"w-full py-1 text-white/60 hover:text-white/80 transition-colors text-xs\"\n              >\n                Cancel\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n    </UnifiedCard>\n  );\n});\n\nGoalCard.displayName = 'GoalCard';\n\nexport default GoalCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/savings/components/GoalCreator.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/savings/components/GoalCreator.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { X, Target, Calendar, DollarSign } from 'lucide-react';\nimport { savingsGoalsService } from '@/features/savings/api/savingsGoalsService';\nimport { SavingsGoal, GoalCategory } from '@/types/savingsGoals';\n\ninterface GoalCreatorProps {\n  onGoalCreated: (goal: SavingsGoal) => void;\n  onClose: () => void;\n}\n\nconst GoalCreator = ({ onGoalCreated, onClose }: GoalCreatorProps) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    targetAmount: '',\n    targetDate: '',\n    category: 'General' as GoalCategory\n  });\n  const [isCreating, setIsCreating] = useState(false);\n\n  const goalCategories: { value: GoalCategory; label: string; icon: string; color: string }[] = [\n    { value: 'Emergency Fund', label: 'Emergency Fund', icon: '🛡️', color: '#ef4444' },\n    { value: 'Vacation', label: 'Vacation', icon: '✈️', color: '#10b981' },\n    { value: 'Home Down Payment', label: 'Home Down Payment', icon: '🏠', color: '#3b82f6' },\n    { value: 'Car', label: 'Car', icon: '🚗', color: '#8b5cf6' },\n    { value: 'Education', label: 'Education', icon: '🎓', color: '#f59e0b' },\n    { value: 'Wedding', label: 'Wedding', icon: '💍', color: '#ec4899' },\n    { value: 'Retirement', label: 'Retirement', icon: '🏖️', color: '#06b6d4' },\n    { value: 'General', label: 'General Savings', icon: '💰', color: '#64748b' }\n  ];\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.targetAmount || !formData.targetDate) {\n      return;\n    }\n\n    setIsCreating(true);\n    try {\n      const selectedCategory = goalCategories.find(cat => cat.value === formData.category);\n      \n      const newGoal = await savingsGoalsService.createGoal({\n        name: formData.name,\n        description: formData.description || undefined,\n        targetAmount: parseFloat(formData.targetAmount),\n        currentAmount: 0,\n        targetDate: formData.targetDate,\n        category: formData.category,\n        color: selectedCategory?.color || '#64748b',\n        icon: selectedCategory?.icon || '💰'\n      });\n\n      onGoalCreated(newGoal);\n    } catch (error) {\n      console.error('Failed to create goal:', error);\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  // Calculate minimum date (today)\n  const minDate = new Date().toISOString().split('T')[0];\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm\">\n      <div className=\"liquid-glass-card w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-white/10\">\n          <div className=\"flex items-center space-x-3\">\n            <Target className=\"w-6 h-6 text-green-400\" />\n            <h2 className=\"text-xl font-bold text-white\">Create Savings Goal</h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 rounded-lg bg-slate-800/50 hover:bg-slate-700/50 transition-colors\"\n          >\n            <X className=\"w-5 h-5 text-white\" />\n          </button>\n        </div>\n\n        {/* Form */}\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n          {/* Goal Category */}\n          <div>\n            <label className=\"text-white font-medium mb-3 block\">Goal Category</label>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n              {goalCategories.map((category) => (\n                <button\n                  key={category.value}\n                  type=\"button\"\n                  onClick={() => handleInputChange('category', category.value)}\n                  className={`p-3 rounded-lg border transition-all ${\n                    formData.category === category.value\n                      ? 'border-indigo-500 bg-indigo-500/20'\n                      : 'border-white/10 hover:border-white/20'\n                  }`}\n                >\n                  <div className=\"text-2xl mb-1\">{category.icon}</div>\n                  <div className=\"text-white text-xs text-center\">{category.label}</div>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Goal Name */}\n          <div>\n            <label className=\"text-white font-medium mb-2 block\">Goal Name</label>\n            <input\n              type=\"text\"\n              value={formData.name}\n              onChange={(e) => handleInputChange('name', e.target.value)}\n              placeholder=\"e.g., Emergency Fund, Vacation to Japan\"\n              className=\"w-full bg-slate-800/50 border border-slate-700 rounded-lg px-4 py-3 text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n              required\n            />\n          </div>\n\n          {/* Description */}\n          <div>\n            <label className=\"text-white font-medium mb-2 block\">Description (Optional)</label>\n            <textarea\n              value={formData.description}\n              onChange={(e) => handleInputChange('description', e.target.value)}\n              placeholder=\"Add details about your goal...\"\n              rows={3}\n              className=\"w-full bg-slate-800/50 border border-slate-700 rounded-lg px-4 py-3 text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 resize-none\"\n            />\n          </div>\n\n          {/* Target Amount */}\n          <div>\n            <label className=\"text-white font-medium mb-2 block\">Target Amount</label>\n            <div className=\"relative\">\n              <DollarSign className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n              <input\n                type=\"number\"\n                value={formData.targetAmount}\n                onChange={(e) => handleInputChange('targetAmount', e.target.value)}\n                placeholder=\"5000\"\n                min=\"1\"\n                step=\"0.01\"\n                className=\"w-full bg-slate-800/50 border border-slate-700 rounded-lg pl-12 pr-4 py-3 text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n                required\n              />\n            </div>\n          </div>\n\n          {/* Target Date */}\n          <div>\n            <label className=\"text-white font-medium mb-2 block\">Target Date</label>\n            <div className=\"relative\">\n              <Calendar className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n              <input\n                type=\"date\"\n                value={formData.targetDate}\n                onChange={(e) => handleInputChange('targetDate', e.target.value)}\n                min={minDate}\n                className=\"w-full bg-slate-800/50 border border-slate-700 rounded-lg pl-12 pr-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n                required\n              />\n            </div>\n          </div>\n\n          {/* Summary */}\n          {formData.name && formData.targetAmount && formData.targetDate && (\n            <div className=\"bg-slate-800/30 rounded-lg p-4\">\n              <div className=\"text-white font-medium mb-2\">Goal Summary</div>\n              <div className=\"space-y-1 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-slate-400\">Goal:</span>\n                  <span className=\"text-white\">{formData.name}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-slate-400\">Target Amount:</span>\n                  <span className=\"text-white\">${parseFloat(formData.targetAmount || '0').toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-slate-400\">Target Date:</span>\n                  <span className=\"text-white\">\n                    {new Date(formData.targetDate).toLocaleDateString('en-US', {\n                      year: 'numeric',\n                      month: 'long',\n                      day: 'numeric'\n                    })}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-slate-400\">Days to Goal:</span>\n                  <span className=\"text-white\">\n                    {Math.ceil((new Date(formData.targetDate).getTime() - Date.now()) / (1000 * 60 * 60 * 24))} days\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Actions */}\n          <div className=\"flex space-x-3 pt-4\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"flex-1 bg-slate-800/50 text-white py-3 px-4 rounded-lg font-medium hover:bg-slate-700/50 transition-all\"\n              disabled={isCreating}\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              disabled={!formData.name || !formData.targetAmount || !formData.targetDate || isCreating}\n              className=\"flex-1 bg-gradient-to-r from-green-500 to-emerald-500 text-white py-3 px-4 rounded-lg font-medium hover:from-green-600 hover:to-emerald-600 transition-all disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isCreating ? 'Creating...' : 'Create Goal'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default GoalCreator; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/savings/components/SavingsGoals.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/savings/components/SavingsGoals.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Plus, Target, TrendingUp, Award, Calendar, DollarSign, Percent, MoreHorizontal, Clock, CheckCircle2, ArrowLeft } from 'lucide-react';\nimport GoalCard from './GoalCard';\nimport GoalCreator from './GoalCreator';\nimport SavingsInsights from './SavingsInsights';\nimport { savingsGoalsService } from '@/features/savings/api/savingsGoalsService';\nimport { SavingsGoal, SavingsInsight } from '@/types/savingsGoals';\nimport { cn } from '@/shared/lib/utils';\nimport { useNavigate } from 'react-router-dom';\nimport { UnifiedCard } from '@/shared/ui/UnifiedCard';\nimport { formatCurrency } from '@/shared/utils/formatters';\n\ninterface SavingsGoalsProps {\n  compact?: boolean;\n}\n\nconst SavingsGoals = ({ compact = false }: SavingsGoalsProps) => {\n  const [goals, setGoals] = useState<SavingsGoal[]>([]);\n  const [insights, setInsights] = useState<SavingsInsight[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showGoalCreator, setShowGoalCreator] = useState(false);\n  const [activeTab, setActiveTab] = useState<'goals' | 'insights'>('goals');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    loadSavingsData();\n  }, []);\n\n  const loadSavingsData = async () => {\n    try {\n      const [goalsData, insightsData] = await Promise.all([\n        savingsGoalsService.getGoals(),\n        savingsGoalsService.getSavingsInsights()\n      ]);\n      setGoals(goalsData);\n      setInsights(insightsData);\n    } catch (error) {\n      console.error('Failed to load savings data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoalCreated = (newGoal: SavingsGoal) => {\n    setGoals([...goals, newGoal]);\n    setShowGoalCreator(false);\n    loadSavingsData(); // Refresh insights\n  };\n\n  const handleGoalUpdate = () => {\n    loadSavingsData();\n  };\n\n  const totalSaved = goals.reduce((sum, goal) => sum + goal.currentAmount, 0);\n  const totalTargets = goals.reduce((sum, goal) => sum + goal.targetAmount, 0);\n  const completedGoals = goals.filter(goal => goal.isCompleted).length;\n  const overallProgress = totalTargets > 0 ? (totalSaved / totalTargets) * 100 : 0;\n\n  const formatProgress = (current: number, target: number) => {\n    return target > 0 ? ((current / target) * 100).toFixed(1) : '0';\n  };\n\n  const getProgressColor = (percentage: number) => {\n    if (percentage >= 100) return 'text-green-400';\n    if (percentage >= 75) return 'text-lime-400';\n    if (percentage >= 50) return 'text-yellow-400';\n    if (percentage >= 25) return 'text-orange-400';\n    return 'text-red-400';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-black text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 py-8 sm:px-6 lg:px-8\">\n          <div className=\"space-y-6 animate-pulse\">\n            <div className=\"h-8 bg-white/[0.05] rounded w-48\"></div>\n            <div className=\"h-32 bg-white/[0.02] rounded-xl border border-white/[0.08]\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <div className=\"h-48 bg-white/[0.02] rounded-xl border border-white/[0.08]\"></div>\n              <div className=\"h-48 bg-white/[0.02] rounded-xl border border-white/[0.08]\"></div>\n              <div className=\"h-48 bg-white/[0.02] rounded-xl border border-white/[0.08]\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Compact mode for dashboard widget\n  if (compact) {\n    return (\n      <UnifiedCard\n        title=\"Savings Goals\"\n        icon={Target}\n        iconColor=\"text-green-400\"\n        variant=\"default\"\n        size=\"lg\"\n        className=\"text-white\"\n      >\n        {loading ? (\n          <div className=\"space-y-3\">\n            {[...Array(2)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-white/[0.02] rounded-xl border border-white/[0.08] animate-pulse\"></div>\n            ))}\n          </div>\n        ) : goals.length === 0 ? (\n          <div className=\"text-center py-6\">\n            <Target className=\"w-8 h-8 text-gray-400 mx-auto mb-2 opacity-50\" />\n            <p className=\"text-sm text-gray-400 mb-2\">No goals yet</p>\n            <button\n              onClick={() => navigate('/savings')}\n              className=\"text-xs text-blue-400 hover:text-blue-300 transition-colors\"\n            >\n              Create your first goal\n            </button>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {goals.slice(0, 3).map((goal) => {\n              const progress = (goal.currentAmount / goal.targetAmount) * 100;\n              const daysLeft = Math.ceil((new Date(goal.targetDate).getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n              \n              return (\n                <UnifiedCard\n                  key={goal.id}\n                  title={goal.name}\n                  subtitle={goal.category}\n                  metric={formatCurrency(goal.currentAmount, { currency: 'USD' })}\n                  delta={{\n                    value: Math.round(progress),\n                    format: 'percentage',\n                    label: 'complete'\n                  }}\n                  icon={goal.icon}\n                  progress={{\n                    value: goal.currentAmount,\n                    max: goal.targetAmount,\n                    color: progress >= 100 ? '#22c55e' : progress >= 75 ? '#84cc16' : progress >= 50 ? '#eab308' : '#ef4444',\n                    showLabel: false\n                  }}\n                  badge={daysLeft <= 0 && !goal.isCompleted ? {\n                    text: 'Overdue',\n                    variant: 'error'\n                  } : undefined}\n                  size=\"sm\"\n                  className=\"hover:bg-white/[0.03] transition-all cursor-pointer\"\n                  onClick={() => navigate('/savings')}\n                />\n              );\n            })}\n            \n            <div className=\"pt-3 border-t border-white/[0.06]\">\n              <button\n                onClick={() => navigate('/savings')}\n                className=\"w-full text-sm text-blue-400 hover:text-blue-300 transition-colors text-center\"\n              >\n                View All Goals →\n              </button>\n            </div>\n          </div>\n        )}\n      </UnifiedCard>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <div className=\"max-w-7xl mx-auto px-4 py-8 sm:px-6 lg:px-8 space-y-8\">\n        {/* Back */}\n        <button\n          onClick={() => navigate('/')}\n          className=\"flex items-center gap-2 px-3 py-2 rounded-xl text-white/80 hover:text-white transition-colors mb-4 hover:bg-white/[0.05]\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n          <span className=\"text-sm\">Dashboard</span>\n        </button>\n\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white flex items-center space-x-3\">\n              <Target className=\"w-8 h-8 text-green-400\" />\n              <span>Savings Goals</span>\n            </h1>\n            <p className=\"text-gray-400 mt-2\">Track your progress and build wealth systematically</p>\n          </div>\n          \n          <button\n            onClick={() => setShowGoalCreator(true)}\n            className=\"px-6 py-3 bg-white/[0.05] border border-white/[0.12] rounded-xl font-medium hover:bg-white/[0.08] transition-all flex items-center space-x-2 text-white backdrop-blur-md\"\n          >\n            <Plus className=\"w-5 h-5\" />\n            <span>New Goal</span>\n          </button>\n        </div>\n\n        {/* Overview Stats using UnifiedCard */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <UnifiedCard\n            title=\"Total Saved\"\n            subtitle=\"Across all goals\"\n            metric={formatCurrency(totalSaved, { currency: 'USD' })}\n            delta={{\n              value: parseFloat(formatProgress(totalSaved, totalTargets)),\n              format: 'percentage',\n              label: 'of target'\n            }}\n            icon={DollarSign}\n            iconColor=\"text-green-400\"\n            variant=\"default\"\n            size=\"lg\"\n          />\n\n          <UnifiedCard\n            title=\"Total Targets\"\n            subtitle=\"Goal amounts\"\n            metric={formatCurrency(totalTargets, { currency: 'USD' })}\n            delta={{\n              value: goals.length,\n              format: 'number',\n              label: 'active goals'\n            }}\n            icon={Target}\n            iconColor=\"text-blue-400\"\n            variant=\"default\"\n            size=\"lg\"\n          />\n\n          <UnifiedCard\n            title=\"Completed\"\n            subtitle=\"Goals achieved\"\n            metric={completedGoals.toString()}\n            delta={{\n              value: Math.round(goals.length > 0 ? (completedGoals / goals.length) * 100 : 0),\n              format: 'percentage',\n              label: 'success rate'\n            }}\n            icon={Award}\n            iconColor=\"text-purple-400\"\n            variant=\"default\"\n            size=\"lg\"\n          />\n\n          <UnifiedCard\n            title=\"Overall Progress\"\n            subtitle=\"Average completion\"\n            metric={`${Math.round(overallProgress)}%`}\n            progress={{\n              value: overallProgress,\n              max: 100,\n              color: overallProgress >= 80 ? '#22c55e' : overallProgress >= 60 ? '#84cc16' : overallProgress >= 40 ? '#eab308' : overallProgress >= 20 ? '#f97316' : '#ef4444',\n              showLabel: false\n            }}\n            icon={Percent}\n            iconColor=\"text-orange-400\"\n            variant=\"default\"\n            size=\"lg\"\n          />\n        </div>\n\n        {/* Tab Navigation */}\n        <div className=\"flex space-x-1 bg-white/[0.05] p-1 rounded-xl\">\n          {[\n            { id: 'goals', label: 'My Goals', icon: Target },\n            { id: 'insights', label: 'Insights', icon: TrendingUp }\n          ].map((tab) => {\n            const IconComponent = tab.icon;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id as 'goals' | 'insights')}\n                className={cn(\n                  'flex-1 py-3 px-4 text-sm font-medium rounded-xl transition-all flex items-center justify-center space-x-2',\n                  activeTab === tab.id\n                    ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-lg shadow-blue-500/25'\n                    : 'text-white/60 hover:text-white hover:bg-white/10'\n                )}\n              >\n                <IconComponent className=\"w-4 h-4\" />\n                <span>{tab.label}</span>\n              </button>\n            );\n          })}\n        </div>\n\n        {/* Content */}\n        {activeTab === 'goals' && (\n          <div>\n            {goals.length === 0 ? (\n              <UnifiedCard\n                title=\"No Savings Goals Yet\"\n                subtitle=\"Start your financial journey by creating your first savings goal\"\n                icon={Target}\n                iconColor=\"text-gray-400\"\n                variant=\"default\"\n                size=\"lg\"\n                className=\"text-center py-12\"\n              >\n                <div className=\"space-y-4\">\n                  <p className=\"text-gray-400 max-w-md mx-auto\">\n                    Whether it's an emergency fund, vacation, or major purchase, we'll help you get there.\n                  </p>\n                  <button\n                    onClick={() => setShowGoalCreator(true)}\n                    className=\"px-6 py-3 bg-white/[0.05] border border-white/[0.12] rounded-xl font-medium hover:bg-white/[0.08] transition-all flex items-center space-x-2 mx-auto text-white backdrop-blur-md\"\n                  >\n                    <Plus className=\"w-5 h-5\" />\n                    <span>Create Your First Goal</span>\n                  </button>\n                </div>\n              </UnifiedCard>\n            ) : (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-8 w-full\">\n                {goals.map((goal) => {\n                  const progress = parseFloat(formatProgress(goal.currentAmount, goal.targetAmount));\n                  const daysLeft = Math.ceil((new Date(goal.targetDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));\n                  \n                  return (\n                    <UnifiedCard\n                      key={goal.id}\n                      title={goal.name}\n                      subtitle={goal.category}\n                      metric={formatCurrency(goal.currentAmount, { currency: 'USD' })}\n                      delta={{\n                        value: goal.targetAmount - goal.currentAmount,\n                        format: 'currency',\n                        label: 'remaining'\n                      }}\n                      icon={goal.icon}\n                      progress={{\n                        value: goal.currentAmount,\n                        max: goal.targetAmount,\n                        color: progress >= 100 ? '#22c55e' : progress >= 75 ? '#84cc16' : progress >= 50 ? '#eab308' : progress >= 25 ? '#f97316' : '#ef4444',\n                        showLabel: true\n                      }}\n                      badge={goal.isCompleted ? {\n                        text: 'Complete',\n                        variant: 'success'\n                      } : daysLeft <= 0 ? {\n                        text: 'Overdue',\n                        variant: 'error'\n                      } : daysLeft <= 30 ? {\n                        text: `${daysLeft} days left`,\n                        variant: 'warning'\n                      } : undefined}\n                      variant=\"default\"\n                      size=\"lg\"\n                      interactive={true}\n                      className=\"hover:bg-white/[0.03] transition-all relative overflow-hidden\"\n                    >\n                      {/* Additional Goal Details */}\n                      <div className=\"mt-4 space-y-3\">\n                        {/* Target Amount */}\n                        <div className=\"flex justify-between items-center text-sm\">\n                          <span className=\"text-white/60\">Target</span>\n                          <span className=\"text-white font-medium\">{formatCurrency(goal.targetAmount, { currency: 'USD' })}</span>\n                        </div>\n                        \n                        {/* Due Date */}\n                        <div className=\"flex justify-between items-center text-sm\">\n                          <span className=\"text-white/60\">Due Date</span>\n                          <div className=\"flex items-center space-x-1\">\n                            <Calendar className=\"w-3 h-3 text-white/60\" />\n                            <span className=\"text-white/80\">\n                              {new Date(goal.targetDate).toLocaleDateString('en-US', {\n                                month: 'short',\n                                day: 'numeric',\n                                year: 'numeric'\n                              })}\n                            </span>\n                          </div>\n                        </div>\n\n                        {/* Action Button */}\n                        {!goal.isCompleted && (\n                          <button className=\"w-full mt-4 py-2 bg-white/[0.05] border border-white/[0.12] rounded-lg text-white/80 hover:bg-white/[0.08] hover:text-white transition-all text-sm font-medium\">\n                            Add Contribution\n                          </button>\n                        )}\n                      </div>\n                    </UnifiedCard>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeTab === 'insights' && (\n          <div className=\"space-y-6\">\n            {insights.length === 0 ? (\n              <UnifiedCard\n                title=\"No Insights Available\"\n                subtitle=\"Create some goals to get personalized insights and recommendations\"\n                icon={TrendingUp}\n                iconColor=\"text-gray-400\"\n                variant=\"default\"\n                size=\"lg\"\n                className=\"text-center py-12\"\n              />\n            ) : (\n              <SavingsInsights insights={insights} />\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Goal Creator Modal */}\n      {showGoalCreator && (\n        <GoalCreator\n          onClose={() => setShowGoalCreator(false)}\n          onGoalCreated={handleGoalCreated}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SavingsGoals;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/savings/components/SavingsInsights.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/savings/components/SavingsInsights.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { TrendingUp, Target, Award, AlertCircle, Lightbulb, Plus } from 'lucide-react';\nimport { SavingsInsight } from '@/types/savingsGoals';\n\ninterface SavingsInsightsProps {\n  insights: SavingsInsight[];\n}\n\nconst SavingsInsights = ({ insights }: SavingsInsightsProps) => {\n  const getInsightIcon = (type: SavingsInsight['type']) => {\n    switch (type) {\n      case 'milestone': return <Award className=\"w-5 h-5 text-yellow-400\" />;\n      case 'progress': return <TrendingUp className=\"w-5 h-5 text-green-400\" />;\n      case 'suggestion': return <Lightbulb className=\"w-5 h-5 text-blue-400\" />;\n      default: return <AlertCircle className=\"w-5 h-5 text-white/60\" />;\n    }\n  };\n\n  const getInsightColor = (type: SavingsInsight['type']) => {\n    switch (type) {\n      case 'milestone': return 'border-yellow-500/30 bg-yellow-500/10';\n      case 'progress': return 'border-green-500/30 bg-green-500/10';\n      case 'suggestion': return 'border-blue-500/30 bg-blue-500/10';\n      default: return 'border-white/20 bg-white/5';\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Insights Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"liquid-glass-card p-6\">\n          <div className=\"flex items-center space-x-3 mb-3\">\n            <div className=\"w-10 h-10 bg-blue-500/20 rounded-lg flex items-center justify-center\">\n              <Target className=\"w-5 h-5 text-blue-400\" />\n            </div>\n            <div>\n              <div className=\"text-white font-bold text-xl\">3</div>\n              <div className=\"text-white/60 text-sm\">Active Goals</div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"liquid-glass-card p-6\">\n          <div className=\"flex items-center space-x-3 mb-3\">\n            <div className=\"w-10 h-10 bg-green-500/20 rounded-lg flex items-center justify-center\">\n              <Award className=\"w-5 h-5 text-green-400\" />\n            </div>\n            <div>\n              <div className=\"text-white font-bold text-xl\">67%</div>\n              <div className=\"text-white/60 text-sm\">Avg Progress</div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"liquid-glass-card p-6\">\n          <div className=\"flex items-center space-x-3 mb-3\">\n            <div className=\"w-10 h-10 bg-orange-500/20 rounded-lg flex items-center justify-center\">\n              <TrendingUp className=\"w-5 h-5 text-orange-400\" />\n            </div>\n            <div>\n              <div className=\"text-white font-bold text-xl\">1</div>\n              <div className=\"text-white/60 text-sm\">On Track</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Insights */}\n      <div>\n        <h3 className=\"text-xl font-bold text-white mb-6 flex items-center space-x-3\">\n          <Lightbulb className=\"w-6 h-6 text-yellow-400\" />\n          <span>Personalized Insights</span>\n        </h3>\n\n        {insights.length === 0 ? (\n          <div className=\"liquid-glass-card p-8 text-center\">\n            <TrendingUp className=\"w-12 h-12 text-white/40 mx-auto mb-4\" />\n            <h4 className=\"text-lg font-semibold text-white mb-2\">No Insights Available</h4>\n            <p className=\"text-white/60 mb-6\">\n              Create some savings goals to get personalized insights and recommendations.\n            </p>\n            <button className=\"bg-gradient-to-r from-green-500 to-emerald-500 text-white px-6 py-3 rounded-lg font-medium hover:from-green-600 hover:to-emerald-600 transition-all flex items-center space-x-2 mx-auto\">\n              <Plus className=\"w-5 h-5\" />\n              <span>Create Your First Goal</span>\n            </button>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {insights.map((insight, index) => (\n              <div\n                key={index}\n                className={`liquid-glass-card p-6 border ${getInsightColor(insight.type)}`}\n              >\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"flex-shrink-0\">\n                    {getInsightIcon(insight.type)}\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"text-white font-semibold mb-2\">{insight.title}</h4>\n                    <p className=\"text-white/70 text-sm mb-4\">{insight.description}</p>\n                    \n                    {insight.actionable && insight.action && (\n                      <button className=\"bg-gradient-to-r from-indigo-500 to-purple-500 text-white px-4 py-2 rounded-lg text-sm font-medium hover:from-indigo-600 hover:to-purple-600 transition-all\">\n                        {insight.action}\n                      </button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Featured Recommendations */}\n      <div>\n        <h3 className=\"text-xl font-bold text-white mb-6 flex items-center space-x-3\">\n          <Award className=\"w-6 h-6 text-green-400\" />\n          <span>Smart Recommendations</span>\n        </h3>\n        \n        <div className=\"space-y-4\">\n          <div className=\"liquid-glass-card p-6 border border-green-500/30 bg-green-500/10\">\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"w-10 h-10 bg-green-500/20 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"w-5 h-5 text-green-400\" />\n              </div>\n              <div className=\"flex-1\">\n                <h4 className=\"text-white font-semibold mb-2\">Emergency Fund Progress</h4>\n                <p className=\"text-white/70 text-sm mb-4\">\n                  You're 78% of the way to your emergency fund goal! Consider increasing your monthly contribution by $200 to reach your target 2 months earlier.\n                </p>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-full bg-white/10 rounded-full h-2\">\n                    <div className=\"bg-green-400 h-2 rounded-full\" style={{ width: '78%' }}></div>\n                  </div>\n                  <span className=\"text-green-400 text-sm font-medium\">78%</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"liquid-glass-card p-6 border border-blue-500/30 bg-blue-500/10\">\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"w-10 h-10 bg-blue-500/20 rounded-lg flex items-center justify-center\">\n                <Target className=\"w-5 h-5 text-blue-400\" />\n              </div>\n              <div className=\"flex-1\">\n                <h4 className=\"text-white font-semibold mb-2\">Japan Vacation on Track</h4>\n                <p className=\"text-white/70 text-sm mb-4\">\n                  Great job! Your Japan vacation fund is on schedule. At your current rate, you'll have enough saved by your target date.\n                </p>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-full bg-white/10 rounded-full h-2\">\n                    <div className=\"bg-blue-400 h-2 rounded-full\" style={{ width: '45%' }}></div>\n                  </div>\n                  <span className=\"text-blue-400 text-sm font-medium\">45%</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"liquid-glass-card p-6 border border-orange-500/30 bg-orange-500/10\">\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"w-10 h-10 bg-orange-500/20 rounded-lg flex items-center justify-center\">\n                <AlertCircle className=\"w-5 h-5 text-orange-400\" />\n              </div>\n              <div className=\"flex-1\">\n                <h4 className=\"text-white font-semibold mb-2\">New Car Goal Needs Boost</h4>\n                <p className=\"text-white/70 text-sm mb-4\">\n                  Your new car fund is falling behind schedule. Consider increasing your monthly contribution or extending your target date by 6 months.\n                </p>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-full bg-white/10 rounded-full h-2\">\n                    <div className=\"bg-orange-400 h-2 rounded-full\" style={{ width: '23%' }}></div>\n                  </div>\n                  <span className=\"text-orange-400 text-sm font-medium\">23%</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SavingsInsights; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/shared-budgets/api/familyService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/shared-budgets/api/familyService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Family, FamilyMember, FamilyInvitation, FamilyStats, FamilySettings } from '@/types/family';\nimport { Account } from '@/types/accounts';\nimport { Transaction } from '@/types/transactions';\n\n/**\n * Comprehensive Family Management Service\n * Handles multi-tenant family structure with role-based permissions\n */\nexport class FamilyService {\n  private static instance: FamilyService;\n  private families: Map<string, Family> = new Map();\n  private members: Map<string, FamilyMember[]> = new Map();\n  private invitations: Map<string, FamilyInvitation[]> = new Map();\n\n  static getInstance(): FamilyService {\n    if (!FamilyService.instance) {\n      FamilyService.instance = new FamilyService();\n    }\n    return FamilyService.instance;\n  }\n\n  /**\n   * Create new family with default settings\n   */\n  async createFamily(data: {\n    name: string;\n    ownerId: string;\n    settings?: Partial<FamilySettings>;\n  }): Promise<Family> {\n    const family: Family = {\n      id: this.generateId(),\n      name: data.name,\n      ownerId: data.ownerId,\n      settings: {\n        currency: 'USD',\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        fiscalYearStart: 1,\n        budgetPeriod: 'monthly',\n        riskTolerance: 'moderate',\n        investmentStyle: 'mixed',\n        notifications: {\n          budgetAlerts: true,\n          largeTransactions: true,\n          billReminders: true,\n          goalMilestones: true,\n          investmentUpdates: false,\n          securityAlerts: true,\n          emailDigest: 'weekly'\n        },\n        privacy: {\n          dataSharing: false,\n          analyticsOptOut: false,\n          thirdPartyIntegrations: true,\n          marketingCommunications: false\n        },\n        ...data.settings\n      },\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.families.set(family.id, family);\n\n    // Create owner member record\n    await this.addFamilyMember(family.id, data.ownerId, 'owner');\n\n    return family;\n  }\n\n  /**\n   * Add family member with role-based permissions\n   */\n  async addFamilyMember(\n    familyId: string, \n    userId: string, \n    role: 'owner' | 'admin' | 'member' | 'viewer'\n  ): Promise<FamilyMember> {\n    const member: FamilyMember = {\n      id: this.generateId(),\n      familyId,\n      userId,\n      role,\n      permissions: this.getDefaultPermissions(role),\n      joinedAt: new Date(),\n      isActive: true\n    };\n\n    const familyMembers = this.members.get(familyId) || [];\n    familyMembers.push(member);\n    this.members.set(familyId, familyMembers);\n\n    return member;\n  }\n\n  /**\n   * Generate family invitation with expiry\n   */\n  async createInvitation(data: {\n    familyId: string;\n    inviterId: string;\n    email: string;\n    role: 'admin' | 'member' | 'viewer';\n  }): Promise<FamilyInvitation> {\n    const invitation: FamilyInvitation = {\n      id: this.generateId(),\n      familyId: data.familyId,\n      inviterId: data.inviterId,\n      email: data.email,\n      role: data.role,\n      token: this.generateInvitationToken(),\n      expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days\n      isAccepted: false,\n      createdAt: new Date()\n    };\n\n    const familyInvitations = this.invitations.get(data.familyId) || [];\n    familyInvitations.push(invitation);\n    this.invitations.set(data.familyId, familyInvitations);\n\n    // TODO: Send email invitation\n    await this.sendInvitationEmail(invitation);\n\n    return invitation;\n  }\n\n  /**\n   * Calculate comprehensive family financial statistics\n   */\n  async calculateFamilyStats(familyId: string): Promise<FamilyStats> {\n    // TODO: Integrate with account and transaction services\n    const accounts = await this.getFamilyAccounts(familyId);\n    const transactions = await this.getFamilyTransactions(familyId);\n\n    const totalNetWorth = accounts.reduce((sum, account) => {\n      if (account.accountType === 'credit') {\n        return sum - Math.abs(account.balance); // Subtract debt\n      }\n      return sum + account.balance;\n    }, 0);\n\n    const monthlyIncome = this.calculateMonthlyIncome(transactions);\n    const monthlyExpenses = this.calculateMonthlyExpenses(transactions);\n    const savingsRate = monthlyIncome > 0 ? ((monthlyIncome - monthlyExpenses) / monthlyIncome) * 100 : 0;\n\n    const debtAccounts = accounts.filter(a => a.accountType === 'credit' || a.accountType === 'loan');\n    const totalDebt = debtAccounts.reduce((sum, account) => sum + Math.abs(account.balance), 0);\n    const debtToIncomeRatio = monthlyIncome > 0 ? (totalDebt / (monthlyIncome * 12)) * 100 : 0;\n\n    const cashAccounts = accounts.filter(a => a.accountType === 'depository');\n    const totalCash = cashAccounts.reduce((sum, account) => sum + account.balance, 0);\n    const emergencyFundMonths = monthlyExpenses > 0 ? totalCash / monthlyExpenses : 0;\n\n    const investmentAccounts = accounts.filter(a => a.accountType === 'investment');\n    const totalInvestments = investmentAccounts.reduce((sum, account) => sum + account.balance, 0);\n\n    return {\n      totalNetWorth,\n      monthlyIncome,\n      monthlyExpenses,\n      savingsRate,\n      debtToIncomeRatio,\n      emergencyFundMonths,\n      investmentAllocation: {\n        stocks: 0.6 * totalInvestments, // TODO: Calculate actual allocation\n        bonds: 0.3 * totalInvestments,\n        cash: 0.05 * totalInvestments,\n        realEstate: 0.05 * totalInvestments,\n        crypto: 0,\n        other: 0\n      }\n    };\n  }\n\n  /**\n   * Update family settings with validation\n   */\n  async updateFamilySettings(\n    familyId: string, \n    settings: Partial<FamilySettings>\n  ): Promise<Family> {\n    const family = this.families.get(familyId);\n    if (!family) {\n      throw new Error('Family not found');\n    }\n\n    family.settings = { ...family.settings, ...settings };\n    family.updatedAt = new Date();\n\n    this.families.set(familyId, family);\n    return family;\n  }\n\n  /**\n   * Get family by ID with member information\n   */\n  async getFamilyById(familyId: string): Promise<Family | null> {\n    return this.families.get(familyId) || null;\n  }\n\n  /**\n   * Get all family members with their permissions\n   */\n  async getFamilyMembers(familyId: string): Promise<FamilyMember[]> {\n    return this.members.get(familyId) || [];\n  }\n\n  /**\n   * Update member permissions (admin/owner only)\n   */\n  async updateMemberPermissions(\n    familyId: string,\n    memberId: string,\n    permissions: Partial<FamilyMember['permissions']>\n  ): Promise<FamilyMember> {\n    const familyMembers = this.members.get(familyId) || [];\n    const memberIndex = familyMembers.findIndex(m => m.id === memberId);\n    \n    if (memberIndex === -1) {\n      throw new Error('Member not found');\n    }\n\n    familyMembers[memberIndex].permissions = {\n      ...familyMembers[memberIndex].permissions,\n      ...permissions\n    };\n\n    this.members.set(familyId, familyMembers);\n    return familyMembers[memberIndex];\n  }\n\n  // Private helper methods\n  private getDefaultPermissions(role: FamilyMember['role']): FamilyMember['permissions'] {\n    switch (role) {\n      case 'owner':\n        return {\n          canViewAccounts: true,\n          canLinkAccounts: true,\n          canCreateBudgets: true,\n          canSetGoals: true,\n          canManageInvestments: true,\n          canAccessReports: true,\n          canModifySettings: true,\n          canInviteMembers: true\n        };\n      case 'admin':\n        return {\n          canViewAccounts: true,\n          canLinkAccounts: true,\n          canCreateBudgets: true,\n          canSetGoals: true,\n          canManageInvestments: true,\n          canAccessReports: true,\n          canModifySettings: false,\n          canInviteMembers: true\n        };\n      case 'member':\n        return {\n          canViewAccounts: true,\n          canLinkAccounts: false,\n          canCreateBudgets: true,\n          canSetGoals: true,\n          canManageInvestments: false,\n          canAccessReports: true,\n          canModifySettings: false,\n          canInviteMembers: false\n        };\n      case 'viewer':\n        return {\n          canViewAccounts: true,\n          canLinkAccounts: false,\n          canCreateBudgets: false,\n          canSetGoals: false,\n          canManageInvestments: false,\n          canAccessReports: true,\n          canModifySettings: false,\n          canInviteMembers: false\n        };\n    }\n  }\n\n  private generateId(): string {\n    return `fam_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateInvitationToken(): string {\n    return Math.random().toString(36).substr(2, 32);\n  }\n\n  private async sendInvitationEmail(invitation: FamilyInvitation): Promise<void> {\n    // TODO: Implement email service integration\n    console.log(`Sending invitation email to ${invitation.email}`);\n  }\n\n  private async getFamilyAccounts(familyId: string): Promise<Account[]> {\n    // TODO: Integrate with AccountService\n    return [];\n  }\n\n  private async getFamilyTransactions(familyId: string): Promise<Transaction[]> {\n    // TODO: Integrate with TransactionService\n    return [];\n  }\n\n  private calculateMonthlyIncome(transactions: Transaction[]): number {\n    const now = new Date();\n    const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n    \n    return transactions\n      .filter(t => t.date >= monthStart && t.amount > 0)\n      .reduce((sum, t) => sum + t.amount, 0);\n  }\n\n  private calculateMonthlyExpenses(transactions: Transaction[]): number {\n    const now = new Date();\n    const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n    \n    return transactions\n      .filter(t => t.date >= monthStart && t.amount < 0)\n      .reduce((sum, t) => sum + Math.abs(t.amount), 0);\n  }\n}\n\nexport const familyService = FamilyService.getInstance();","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/shared-budgets/api/householdService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/shared-budgets/api/householdService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Household } from \"../types\";\n\nexport interface HouseholdService {\n  createHousehold: (name: string) => Promise<Household>;\n  inviteMember: (householdId: string, userId: string) => Promise<void>;\n  acceptInvite: (householdId: string) => Promise<void>;\n  listHouseholds: () => Promise<Household[]>;\n}\n\nclass MockHouseholdService implements HouseholdService {\n  private households: Household[] = [];\n\n  async createHousehold(name: string): Promise<Household> {\n    const household: Household = {\n      id: \"house-\" + Math.random().toString(36).substring(2),\n      name,\n      members: [],\n      createdAt: new Date().toISOString(),\n    };\n    this.households.push(household);\n    return household;\n  }\n\n  async inviteMember(_householdId: string, _userId: string): Promise<void> {\n    // Mock – no-op\n  }\n\n  async acceptInvite(_householdId: string): Promise<void> {\n    // Mock – no-op\n  }\n\n  async listHouseholds(): Promise<Household[]> {\n    return this.households;\n  }\n}\n\nexport const householdService: HouseholdService = new MockHouseholdService(); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/shared-budgets/components/CreateHouseholdForm.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/shared-budgets/components/CreateHouseholdForm.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Input } from \"@/shared/ui/input\";\nimport { Button } from \"@/shared/ui/button\";\nimport { useSharedBudgetsStore } from \"../store\";\nimport { Users } from \"lucide-react\";\n\nexport const CreateHouseholdForm: React.FC = () => {\n  const create = useSharedBudgetsStore((s) => s.create);\n  const loading = useSharedBudgetsStore((s) => s.loading);\n  const [name, setName] = useState(\"\");\n\n  const onSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!name.trim()) return;\n    await create(name.trim());\n    setName(\"\");\n  };\n\n  return (\n    <form onSubmit={onSubmit} className=\"flex items-center gap-2\">\n      <Input placeholder=\"Household name\" value={name} onChange={(e) => setName(e.target.value)} className=\"w-56\" />\n      <Button type=\"submit\" disabled={loading || !name.trim()} variant=\"secondary\">\n        <Users className=\"mr-2\" /> Create Household\n      </Button>\n    </form>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/shared-budgets/components/HouseholdsList.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/shared-budgets/components/HouseholdsList.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\nimport { useSharedBudgetsStore } from \"../store\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/shared/ui/card\";\nimport { Users } from \"lucide-react\";\nimport { cn } from \"@/shared/lib/utils\";\n\nexport const HouseholdsList: React.FC<{ className?: string }> = ({ className }) => {\n  const { households, loading, refresh } = useSharedBudgetsStore((s) => ({\n    households: s.households,\n    loading: s.loading,\n    refresh: s.refresh,\n  }));\n\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n\n  if (loading && households.length === 0) {\n    return <p className={cn(\"text-muted-foreground\", className)}>Loading households…</p>;\n  }\n\n  if (households.length === 0) {\n    return <p className={cn(\"text-muted-foreground\", className)}>No households yet.</p>;\n  }\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      {households.map((h) => (\n        <Card key={h.id}>\n          <CardHeader className=\"flex-row items-center gap-2 space-y-0\">\n            <Users className=\"text-primary\" />\n            <CardTitle>{h.name}</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-sm text-muted-foreground\">\n            {h.members.length} member{h.members.length === 1 ? \"\" : \"s\"}\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/shared-budgets/components/SharedBudgetsPanel.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/shared-budgets/components/SharedBudgetsPanel.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { UniversalCard } from \"@/shared/ui/UniversalCard\";\nimport { CreateHouseholdForm } from \"./CreateHouseholdForm\";\nimport { HouseholdsList } from \"./HouseholdsList\";\nimport { Users } from \"lucide-react\";\n\nexport const SharedBudgetsPanel: React.FC = () => {\n  return (\n    <UniversalCard\n      variant=\"glass\"\n      size=\"md\"\n      title=\"Shared Budgets\"\n      icon={Users}\n      iconColor=\"#8b5cf6\"\n    >\n      <div className=\"space-y-4\">\n        <CreateHouseholdForm />\n        <HouseholdsList />\n      </div>\n    </UniversalCard>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/shared-budgets/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/shared-budgets/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export { useSharedBudgetsStore } from \"./store\";\nexport { SharedBudgetsPanel } from \"./components/SharedBudgetsPanel\"; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/shared-budgets/store.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/shared-budgets/store.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from \"zustand\";\nimport { householdService } from \"@/features/shared-budgets/api/householdService\";\nimport { Household } from \"@/shared/types/shared\";\n\ninterface SharedBudgetsState {\n  households: Household[];\n  loading: boolean;\n  error?: string;\n  refresh: () => Promise<void>;\n  create: (name: string) => Promise<void>;\n}\n\nexport const useSharedBudgetsStore = create<SharedBudgetsState>((set, get) => ({\n  households: [],\n  loading: false,\n  error: undefined,\n  refresh: async () => {\n    set({ loading: true, error: undefined });\n    try {\n      const households = await householdService.listHouseholds();\n      set({ households, loading: false });\n    } catch (err: any) {\n      set({ error: err.message ?? \"Unknown\", loading: false });\n    }\n  },\n  create: async (name: string) => {\n    await householdService.createHousehold(name);\n    await get().refresh();\n  },\n})); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/smart-savings/api/autoSaveEngine.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/smart-savings/api/autoSaveEngine.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AutosavePlan } from \"../types\";\n\nexport interface AutoSaveEngine {\n  createPlan: (plan: Omit<AutosavePlan, \"id\" | \"nextTransferDate\">) => Promise<AutosavePlan>;\n  listPlans: () => Promise<AutosavePlan[]>;\n  pausePlan: (planId: string) => Promise<void>;\n  resumePlan: (planId: string) => Promise<void>;\n}\n\nclass MockAutoSaveEngine implements AutoSaveEngine {\n  private plans: AutosavePlan[] = [];\n\n  async createPlan(planInput: Omit<AutosavePlan, \"id\" | \"nextTransferDate\">): Promise<AutosavePlan> {\n    const plan: AutosavePlan = {\n      ...planInput,\n      id: \"plan-\" + Math.random().toString(36).substring(2),\n      nextTransferDate: new Date().toISOString(),\n      isActive: true,\n    };\n    this.plans.push(plan);\n    return plan;\n  }\n\n  async listPlans(): Promise<AutosavePlan[]> {\n    return this.plans;\n  }\n\n  async pausePlan(planId: string): Promise<void> {\n    const plan = this.plans.find((p) => p.id === planId);\n    if (plan) plan.isActive = false;\n  }\n\n  async resumePlan(planId: string): Promise<void> {\n    const plan = this.plans.find((p) => p.id === planId);\n    if (plan) plan.isActive = true;\n  }\n}\n\nexport const autoSaveEngine: AutoSaveEngine = new MockAutoSaveEngine(); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/smart-savings/components/AutosavePlansList.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/smart-savings/components/AutosavePlansList.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\nimport { useSmartSavingsStore } from \"../store\";\nimport { Card, CardHeader, CardTitle, CardContent, CardFooter } from \"@/shared/ui/card\";\nimport { Button } from \"@/shared/ui/button\";\nimport { PiggyBank, Pause, Play } from \"lucide-react\";\nimport { cn } from \"@/shared/lib/utils\";\n\nexport const AutosavePlansList: React.FC<{ className?: string }> = ({ className }) => {\n  const { plans, loading, refresh, pause, resume } = useSmartSavingsStore((s) => ({\n    plans: s.plans,\n    loading: s.loading,\n    refresh: s.refresh,\n    pause: s.pause,\n    resume: s.resume,\n  }));\n\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n\n  if (loading && plans.length === 0) {\n    return <p className={cn(\"text-muted-foreground\", className)}>Loading savings plans…</p>;\n  }\n\n  if (plans.length === 0) {\n    return <p className={cn(\"text-muted-foreground\", className)}>No savings plans yet.</p>;\n  }\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      {plans.map((p) => (\n        <Card key={p.id}>\n          <CardHeader className=\"flex-row items-center gap-2 space-y-0\">\n            <PiggyBank className=\"text-primary\" />\n            <CardTitle>${p.targetAmount.toFixed(2)} {p.cadence}</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-sm text-muted-foreground\">\n            Next transfer {new Date(p.nextTransferDate).toLocaleDateString()}\n          </CardContent>\n          <CardFooter>\n            {p.isActive ? (\n              <Button size=\"sm\" onClick={() => pause(p.id)} variant=\"outline\">\n                <Pause className=\"mr-2\" /> Pause\n              </Button>\n            ) : (\n              <Button size=\"sm\" onClick={() => resume(p.id)} variant=\"secondary\">\n                <Play className=\"mr-2\" /> Resume\n              </Button>\n            )}\n          </CardFooter>\n        </Card>\n      ))}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/smart-savings/components/CreatePlanForm.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/smart-savings/components/CreatePlanForm.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Button } from \"@/shared/ui/button\";\nimport { Input } from \"@/shared/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/shared/ui/select\";\nimport { useSmartSavingsStore } from \"../store\";\nimport { PlusCircle } from \"lucide-react\";\n\nexport const CreatePlanForm: React.FC = () => {\n  const create = useSmartSavingsStore((s) => s.create);\n  const loading = useSmartSavingsStore((s) => s.loading);\n  const [amount, setAmount] = useState(10);\n  const [cadence, setCadence] = useState<\"daily\" | \"weekly\" | \"monthly\">(\"weekly\");\n\n  const onSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    await create({ accountId: \"acc1\", targetAmount: amount, cadence, isActive: true } as any);\n    setAmount(10);\n  };\n\n  return (\n    <form onSubmit={onSubmit} className=\"flex items-center gap-2\">\n      <Input\n        type=\"number\"\n        value={amount}\n        min={1}\n        step={1}\n        onChange={(e) => setAmount(Number(e.target.value))}\n        className=\"w-24\"\n      />\n      <Select value={cadence} onValueChange={(v) => setCadence(v as any)}>\n        <SelectTrigger className=\"w-32\">\n          <SelectValue />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"daily\">Daily</SelectItem>\n          <SelectItem value=\"weekly\">Weekly</SelectItem>\n          <SelectItem value=\"monthly\">Monthly</SelectItem>\n        </SelectContent>\n      </Select>\n      <Button type=\"submit\" disabled={loading} variant=\"secondary\">\n        <PlusCircle className=\"mr-2\" /> Create Plan\n      </Button>\n    </form>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/smart-savings/components/SmartSavingsPanel.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/smart-savings/components/SmartSavingsPanel.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { UniversalCard } from \"@/shared/ui/UniversalCard\";\nimport { CreatePlanForm } from \"./CreatePlanForm\";\nimport { AutosavePlansList } from \"./AutosavePlansList\";\nimport { PiggyBank } from \"lucide-react\";\n\nexport const SmartSavingsPanel: React.FC = () => {\n  return (\n    <UniversalCard\n      variant=\"glass\"\n      size=\"md\"\n      title=\"Smart Automated Savings\"\n      icon={PiggyBank}\n      iconColor=\"#ec4899\"\n    >\n      <div className=\"space-y-4\">\n        <CreatePlanForm />\n        <AutosavePlansList />\n      </div>\n    </UniversalCard>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/smart-savings/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/smart-savings/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export { useSmartSavingsStore } from \"./store\";\nexport { SmartSavingsPanel } from \"./components/SmartSavingsPanel\"; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/smart-savings/store.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/smart-savings/store.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from \"zustand\";\nimport { autoSaveEngine } from \"@/features/smart-savings/api/autoSaveEngine\";\nimport { AutosavePlan } from \"@/shared/types/shared\";\n\ninterface SmartSavingsState {\n  plans: AutosavePlan[];\n  loading: boolean;\n  error?: string;\n  refresh: () => Promise<void>;\n  create: (input: Omit<AutosavePlan, \"id\" | \"nextTransferDate\">) => Promise<void>;\n  pause: (id: string) => Promise<void>;\n  resume: (id: string) => Promise<void>;\n}\n\nexport const useSmartSavingsStore = create<SmartSavingsState>((set, get) => ({\n  plans: [],\n  loading: false,\n  error: undefined,\n  refresh: async () => {\n    set({ loading: true, error: undefined });\n    try {\n      const plans = await autoSaveEngine.listPlans();\n      set({ plans, loading: false });\n    } catch (err: any) {\n      set({ error: err.message ?? \"Unknown\", loading: false });\n    }\n  },\n  create: async (input) => {\n    await autoSaveEngine.createPlan(input);\n    await get().refresh();\n  },\n  pause: async (id) => {\n    await autoSaveEngine.pausePlan(id);\n    await get().refresh();\n  },\n  resume: async (id) => {\n    await autoSaveEngine.resumePlan(id);\n    await get().refresh();\n  },\n})); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/subscriptions/api/subscriptionService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/subscriptions/api/subscriptionService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { RecurringCharge } from \"../types\";\n\nexport interface SubscriptionService {\n  detectSubscriptions: (transactions: unknown[]) => Promise<RecurringCharge[]>;\n  cancelSubscription: (chargeId: string) => Promise<boolean>; // returns success flag\n}\n\nclass MockSubscriptionService implements SubscriptionService {\n  private charges: RecurringCharge[] = [];\n\n  async detectSubscriptions(): Promise<RecurringCharge[]> {\n    if (this.charges.length === 0) {\n      // generate mock charges\n      this.charges = [\n        {\n          id: \"sub-1\",\n          accountId: \"acc1\",\n          merchantName: \"Netflix\",\n          amount: 15.99,\n          frequency: \"monthly\",\n          nextDueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n          status: \"active\",\n        },\n        {\n          id: \"sub-2\",\n          accountId: \"acc1\",\n          merchantName: \"Spotify\",\n          amount: 9.99,\n          frequency: \"monthly\",\n          nextDueDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString(),\n          status: \"active\",\n        },\n      ];\n    }\n    return this.charges;\n  }\n\n  async cancelSubscription(chargeId: string): Promise<boolean> {\n    const charge = this.charges.find((c) => c.id === chargeId);\n    if (charge) {\n      charge.status = \"pending_cancel\";\n      return true;\n    }\n    return false;\n  }\n}\n\nexport const subscriptionService: SubscriptionService = new MockSubscriptionService(); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/subscriptions/components/RecurringChargesList.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/subscriptions/components/RecurringChargesList.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\nimport { useSubscriptionsStore } from \"../store\";\nimport { Card, CardContent, CardHeader, CardTitle, CardFooter } from \"@/shared/ui/card\";\nimport { Button } from \"@/shared/ui/button\";\nimport { Repeat, XCircle } from \"lucide-react\";\nimport { cn } from \"@/shared/lib/utils\";\n\nexport const RecurringChargesList: React.FC<{ className?: string }> = ({ className }) => {\n  const { charges, loading, detect, cancel } = useSubscriptionsStore((s) => ({\n    charges: s.charges,\n    loading: s.loading,\n    detect: s.detect,\n    cancel: s.cancel,\n  }));\n\n  useEffect(() => {\n    detect();\n  }, [detect]);\n\n  if (loading && charges.length === 0) {\n    return <p className={cn(\"text-muted-foreground\", className)}>Scanning for subscriptions…</p>;\n  }\n\n  if (charges.length === 0) {\n    return <p className={cn(\"text-muted-foreground\", className)}>No subscriptions detected.</p>;\n  }\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      {charges.map((ch) => (\n        <Card key={ch.id}>\n          <CardHeader className=\"flex-row items-center justify-between space-y-0\">\n            <div className=\"flex items-center gap-2\">\n              <Repeat className=\"text-primary\" />\n              <CardTitle>{ch.merchantName}</CardTitle>\n            </div>\n            {ch.status === \"active\" ? (\n              <Button variant=\"destructive\" size=\"sm\" onClick={() => cancel(ch.id)}>\n                Cancel\n              </Button>\n            ) : (\n              <span className=\"text-sm text-muted-foreground\">{ch.status.replace(\"_\", \" \")}</span>\n            )}\n          </CardHeader>\n          <CardContent className=\"flex items-center justify-between\">\n            <p className=\"text-sm text-muted-foreground\">\n              Next due {new Date(ch.nextDueDate).toLocaleDateString()} • ${ch.amount.toFixed(2)} / {ch.frequency}\n            </p>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/subscriptions/components/SubscriptionsPanel.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/subscriptions/components/SubscriptionsPanel.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { UniversalCard } from \"@/shared/ui/UniversalCard\";\nimport { RecurringChargesList } from \"./RecurringChargesList\";\nimport { Repeat } from \"lucide-react\";\n\nexport const SubscriptionsPanel: React.FC = () => {\n  return (\n    <UniversalCard\n      variant=\"glass\"\n      size=\"md\"\n      title=\"Recurring Subscriptions\"\n      icon={Repeat}\n      iconColor=\"#f59e0b\"\n    >\n      <RecurringChargesList />\n    </UniversalCard>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/subscriptions/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/subscriptions/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export { useSubscriptionsStore } from \"./store\";\nexport { SubscriptionsPanel } from \"./components/SubscriptionsPanel\"; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/subscriptions/store.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/subscriptions/store.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from \"zustand\";\nimport { subscriptionService } from \"@/features/subscriptions/api/subscriptionService\";\nimport { RecurringCharge } from \"@/shared/types/shared\";\n\ninterface SubscriptionsState {\n  charges: RecurringCharge[];\n  loading: boolean;\n  error?: string;\n  detect: () => Promise<void>;\n  cancel: (id: string) => Promise<void>;\n}\n\nexport const useSubscriptionsStore = create<SubscriptionsState>((set, get) => ({\n  charges: [],\n  loading: false,\n  error: undefined,\n  detect: async () => {\n    set({ loading: true, error: undefined });\n    try {\n      const charges = await subscriptionService.detectSubscriptions([]);\n      set({ charges, loading: false });\n    } catch (err: any) {\n      set({ error: err.message ?? \"Unknown\", loading: false });\n    }\n  },\n  cancel: async (id: string) => {\n    await subscriptionService.cancelSubscription(id);\n    const updated = get().charges.map((c) => (c.id === id ? { ...c, status: \"pending_cancel\" } : c));\n    set({ charges: updated });\n  },\n})); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/transactions/api/transactionService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/transactions/api/transactionService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  Transaction, \n  TransactionCategory, \n  TransactionRule, \n  TransferPair,\n  TransactionAnalytics,\n  CategorySpending,\n  SpendingInsight,\n  TransactionImport,\n  FieldMapping\n} from '@/types/transactions';\n\n/**\n * Comprehensive Transaction Processing Service\n * Handles categorization, rules engine, transfer detection, and analytics\n */\nexport class TransactionService {\n  private static instance: TransactionService;\n  private transactions: Map<string, Transaction> = new Map();\n  private rules: Map<string, TransactionRule> = new Map();\n  private transfers: Map<string, TransferPair> = new Map();\n  private imports: Map<string, TransactionImport> = new Map();\n\n  // Category mapping with enhanced intelligence\n  private categoryKeywords: Record<TransactionCategory, string[]> = {\n    income: ['salary', 'paycheck', 'bonus', 'freelance', 'dividend', 'interest', 'refund', 'cashback'],\n    housing: ['rent', 'mortgage', 'property tax', 'hoa', 'utilities', 'insurance home', 'repair', 'maintenance'],\n    transportation: ['gas', 'fuel', 'uber', 'lyft', 'parking', 'toll', 'car payment', 'auto insurance', 'metro', 'bus'],\n    food: ['grocery', 'restaurant', 'fast food', 'coffee', 'starbucks', 'mcdonalds', 'whole foods', 'safeway'],\n    utilities: ['electric', 'gas bill', 'water', 'internet', 'phone', 'cable', 'streaming', 'netflix'],\n    insurance: ['health insurance', 'auto insurance', 'life insurance', 'dental', 'vision'],\n    healthcare: ['doctor', 'hospital', 'pharmacy', 'medical', 'dentist', 'therapy', 'prescription'],\n    savings: ['transfer to savings', 'investment', '401k', 'ira', 'pension'],\n    debt_payments: ['credit card payment', 'loan payment', 'student loan', 'mortgage payment'],\n    entertainment: ['movie', 'concert', 'sports', 'gaming', 'spotify', 'amazon prime', 'gym'],\n    personal_care: ['haircut', 'spa', 'cosmetics', 'clothing', 'shoes'],\n    shopping: ['amazon', 'target', 'walmart', 'online shopping', 'retail'],\n    education: ['tuition', 'books', 'course', 'training', 'certification'],\n    gifts_donations: ['gift', 'charity', 'donation', 'church', 'nonprofit'],\n    business: ['office supplies', 'software', 'business expense', 'conference'],\n    taxes: ['tax payment', 'irs', 'state tax', 'property tax'],\n    investments: ['brokerage', 'stock purchase', 'etf', 'mutual fund'],\n    fees: ['bank fee', 'atm fee', 'overdraft', 'maintenance fee', 'late fee'],\n    transfers: ['transfer', 'wire', 'check deposit', 'internal transfer'],\n    other: ['miscellaneous', 'unknown', 'cash withdrawal']\n  };\n\n  static getInstance(): TransactionService {\n    if (!TransactionService.instance) {\n      TransactionService.instance = new TransactionService();\n    }\n    return TransactionService.instance;\n  }\n\n  /**\n   * Create new transaction with automatic categorization\n   */\n  async createTransaction(data: Omit<Transaction, 'id' | 'createdAt' | 'updatedAt'>): Promise<Transaction> {\n    const transaction: Transaction = {\n      id: this.generateTransactionId(),\n      ...data,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    // Apply automatic categorization\n    if (!transaction.category || transaction.category === 'other') {\n      transaction.category = await this.categorizeTransaction(transaction);\n    }\n\n    // Check for transfer patterns\n    await this.detectTransfers(transaction);\n\n    // Apply transaction rules\n    await this.applyRules(transaction);\n\n    this.transactions.set(transaction.id, transaction);\n    return transaction;\n  }\n\n  /**\n   * Smart transaction categorization using ML-inspired algorithms\n   */\n  async categorizeTransaction(transaction: Transaction): Promise<TransactionCategory> {\n    const text = `${transaction.description} ${transaction.merchantName || ''}`.toLowerCase();\n    \n    // Calculate confidence scores for each category\n    const categoryScores: Record<TransactionCategory, number> = {} as any;\n    \n    for (const [category, keywords] of Object.entries(this.categoryKeywords)) {\n      let score = 0;\n      \n      for (const keyword of keywords) {\n        if (text.includes(keyword.toLowerCase())) {\n          // Boost score based on keyword relevance and position\n          const position = text.indexOf(keyword.toLowerCase());\n          const relevanceBoost = keyword.length / text.length;\n          const positionBoost = position === 0 ? 2 : 1; // Boost if at beginning\n          \n          score += (1 + relevanceBoost) * positionBoost;\n        }\n      }\n\n      // Apply amount-based heuristics\n      if (category === 'income' && transaction.amount > 0) {\n        score *= 2;\n      } else if (category === 'income' && transaction.amount < 0) {\n        score *= 0.1;\n      }\n\n      // Apply frequency-based learning\n      const historicalCategory = await this.getHistoricalCategoryForMerchant(transaction.merchantName);\n      if (historicalCategory === category) {\n        score *= 1.5;\n      }\n\n      categoryScores[category as TransactionCategory] = score;\n    }\n\n    // Find category with highest score\n    const bestCategory = Object.entries(categoryScores).reduce((a, b) => \n      categoryScores[a[0] as TransactionCategory] > categoryScores[b[0] as TransactionCategory] ? a : b\n    )[0] as TransactionCategory;\n\n    return categoryScores[bestCategory] > 0.5 ? bestCategory : 'other';\n  }\n\n  /**\n   * Create and manage transaction rules\n   */\n  async createTransactionRule(rule: Omit<TransactionRule, 'id' | 'createdAt' | 'updatedAt'>): Promise<TransactionRule> {\n    const newRule: TransactionRule = {\n      id: this.generateRuleId(),\n      ...rule,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.rules.set(newRule.id, newRule);\n    \n    // Apply rule to existing transactions\n    await this.applyRuleToExistingTransactions(newRule);\n    \n    return newRule;\n  }\n\n  /**\n   * Apply rules to a transaction\n   */\n  private async applyRules(transaction: Transaction): Promise<void> {\n    const activeRules = Array.from(this.rules.values())\n      .filter(rule => rule.isActive)\n      .sort((a, b) => a.priority - b.priority);\n\n    for (const rule of activeRules) {\n      if (await this.evaluateRuleConditions(transaction, rule.conditions)) {\n        await this.executeRuleActions(transaction, rule.actions);\n      }\n    }\n  }\n\n  /**\n   * Detect transfer transactions between accounts\n   */\n  private async detectTransfers(transaction: Transaction): Promise<void> {\n    // Look for potential matching transactions\n    const potentialMatches = Array.from(this.transactions.values()).filter(t => {\n      const timeDiff = Math.abs(t.date.getTime() - transaction.date.getTime());\n      const amountMatch = Math.abs(Math.abs(t.amount) - Math.abs(transaction.amount)) < 0.01;\n      const sameFamily = t.familyId === transaction.familyId;\n      const differentAccount = t.accountId !== transaction.accountId;\n      const oppositeSign = (t.amount > 0) !== (transaction.amount > 0);\n      const withinTimeWindow = timeDiff <= 3 * 24 * 60 * 60 * 1000; // 3 days\n\n      return sameFamily && differentAccount && amountMatch && oppositeSign && withinTimeWindow;\n    });\n\n    if (potentialMatches.length > 0) {\n      const bestMatch = potentialMatches.sort((a, b) => {\n        const aTimeDiff = Math.abs(a.date.getTime() - transaction.date.getTime());\n        const bTimeDiff = Math.abs(b.date.getTime() - transaction.date.getTime());\n        return aTimeDiff - bTimeDiff;\n      })[0];\n\n      // Create transfer pair\n      const transfer: TransferPair = {\n        id: this.generateTransferId(),\n        familyId: transaction.familyId,\n        sourceTransactionId: transaction.amount < 0 ? transaction.id : bestMatch.id,\n        targetTransactionId: transaction.amount > 0 ? transaction.id : bestMatch.id,\n        amount: Math.abs(transaction.amount),\n        confidence: 0.9, // High confidence for amount and time matching\n        isConfirmed: false,\n        createdAt: new Date()\n      };\n\n      this.transfers.set(transfer.id, transfer);\n\n      // Mark transactions as transfers\n      transaction.isTransfer = true;\n      transaction.transferAccountId = bestMatch.accountId;\n      transaction.transferTransactionId = bestMatch.id;\n      transaction.category = 'transfers';\n\n      bestMatch.isTransfer = true;\n      bestMatch.transferAccountId = transaction.accountId;\n      bestMatch.transferTransactionId = transaction.id;\n      bestMatch.category = 'transfers';\n\n      this.transactions.set(bestMatch.id, bestMatch);\n    }\n  }\n\n  /**\n   * Bulk transaction operations\n   */\n  async bulkUpdateTransactions(\n    transactionIds: string[],\n    updates: Partial<Pick<Transaction, 'category' | 'tags' | 'notes' | 'excludeFromBudget'>>\n  ): Promise<Transaction[]> {\n    const updatedTransactions: Transaction[] = [];\n\n    for (const id of transactionIds) {\n      const transaction = this.transactions.get(id);\n      if (transaction) {\n        const updated = {\n          ...transaction,\n          ...updates,\n          updatedAt: new Date()\n        };\n        this.transactions.set(id, updated);\n        updatedTransactions.push(updated);\n      }\n    }\n\n    return updatedTransactions;\n  }\n\n  /**\n   * Advanced transaction filtering and search\n   */\n  async searchTransactions(\n    familyId: string,\n    filters: {\n      query?: string;\n      categories?: TransactionCategory[];\n      accountIds?: string[];\n      dateRange?: { start: Date; end: Date };\n      amountRange?: { min: number; max: number };\n      tags?: string[];\n      excludeTransfers?: boolean;\n      excludeFromBudget?: boolean;\n    }\n  ): Promise<Transaction[]> {\n    let results = Array.from(this.transactions.values())\n      .filter(t => t.familyId === familyId);\n\n    // Apply filters\n    if (filters.query) {\n      const query = filters.query.toLowerCase();\n      results = results.filter(t => \n        t.description.toLowerCase().includes(query) ||\n        t.merchantName?.toLowerCase().includes(query) ||\n        t.notes?.toLowerCase().includes(query)\n      );\n    }\n\n    if (filters.categories?.length) {\n      results = results.filter(t => filters.categories!.includes(t.category));\n    }\n\n    if (filters.accountIds?.length) {\n      results = results.filter(t => filters.accountIds!.includes(t.accountId));\n    }\n\n    if (filters.dateRange) {\n      results = results.filter(t => \n        t.date >= filters.dateRange!.start && t.date <= filters.dateRange!.end\n      );\n    }\n\n    if (filters.amountRange) {\n      results = results.filter(t => \n        Math.abs(t.amount) >= filters.amountRange!.min && \n        Math.abs(t.amount) <= filters.amountRange!.max\n      );\n    }\n\n    if (filters.tags?.length) {\n      results = results.filter(t => \n        filters.tags!.some(tag => t.tags.includes(tag))\n      );\n    }\n\n    if (filters.excludeTransfers) {\n      results = results.filter(t => !t.isTransfer);\n    }\n\n    if (filters.excludeFromBudget !== undefined) {\n      results = results.filter(t => t.excludeFromBudget === filters.excludeFromBudget);\n    }\n\n    return results.sort((a, b) => b.date.getTime() - a.date.getTime());\n  }\n\n  /**\n   * Generate comprehensive spending analytics\n   */\n  async generateAnalytics(\n    familyId: string,\n    period: 'month' | 'quarter' | 'year'\n  ): Promise<TransactionAnalytics> {\n    const { startDate, endDate } = this.getPeriodDates(period);\n    \n    const transactions = await this.searchTransactions(familyId, {\n      dateRange: { start: startDate, end: endDate },\n      excludeTransfers: true\n    });\n\n    const income = transactions\n      .filter(t => t.amount > 0)\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const expenses = transactions\n      .filter(t => t.amount < 0)\n      .reduce((sum, t) => sum + Math.abs(t.amount), 0);\n\n    const categoryBreakdown = await this.calculateCategoryBreakdown(transactions);\n    const merchantBreakdown = await this.calculateMerchantBreakdown(transactions);\n    const insights = await this.generateSpendingInsights(transactions, categoryBreakdown);\n\n    return {\n      period,\n      totalIncome: income,\n      totalExpenses: expenses,\n      netCashFlow: income - expenses,\n      categoryBreakdown,\n      merchantBreakdown,\n      trends: [], // TODO: Calculate trends\n      insights\n    };\n  }\n\n  /**\n   * Import transactions from CSV/OFX files\n   */\n  async importTransactions(\n    familyId: string,\n    file: File,\n    mapping: FieldMapping\n  ): Promise<TransactionImport> {\n    const importRecord: TransactionImport = {\n      id: this.generateImportId(),\n      familyId,\n      filename: file.name,\n      format: this.detectFileFormat(file.name),\n      status: 'processing',\n      totalTransactions: 0,\n      importedTransactions: 0,\n      errorTransactions: 0,\n      duplicateTransactions: 0,\n      mapping,\n      errors: [],\n      createdAt: new Date()\n    };\n\n    this.imports.set(importRecord.id, importRecord);\n\n    // Process file asynchronously\n    this.processImportFile(importRecord, file, mapping);\n\n    return importRecord;\n  }\n\n  // Private helper methods\n  private async getHistoricalCategoryForMerchant(merchantName?: string): Promise<TransactionCategory | null> {\n    if (!merchantName) return null;\n\n    const historicalTransactions = Array.from(this.transactions.values())\n      .filter(t => t.merchantName?.toLowerCase() === merchantName.toLowerCase());\n\n    if (historicalTransactions.length === 0) return null;\n\n    // Return most common category for this merchant\n    const categoryCount: Record<string, number> = {};\n    for (const transaction of historicalTransactions) {\n      categoryCount[transaction.category] = (categoryCount[transaction.category] || 0) + 1;\n    }\n\n    const mostCommon = Object.entries(categoryCount)\n      .sort(([,a], [,b]) => b - a)[0];\n\n    return mostCommon ? mostCommon[0] as TransactionCategory : null;\n  }\n\n  private async evaluateRuleConditions(\n    transaction: Transaction,\n    conditions: TransactionRule['conditions']\n  ): Promise<boolean> {\n    return conditions.every(condition => {\n      const fieldValue = this.getTransactionFieldValue(transaction, condition.field);\n      \n      switch (condition.operator) {\n        case 'equals':\n          return fieldValue === condition.value;\n        case 'contains':\n          return String(fieldValue).toLowerCase().includes(String(condition.value).toLowerCase());\n        case 'starts_with':\n          return String(fieldValue).toLowerCase().startsWith(String(condition.value).toLowerCase());\n        case 'ends_with':\n          return String(fieldValue).toLowerCase().endsWith(String(condition.value).toLowerCase());\n        case 'greater_than':\n          return Number(fieldValue) > Number(condition.value);\n        case 'less_than':\n          return Number(fieldValue) < Number(condition.value);\n        case 'between':\n          return Number(fieldValue) >= Number(condition.value) && \n                 Number(fieldValue) <= Number(condition.value2);\n        default:\n          return false;\n      }\n    });\n  }\n\n  private async executeRuleActions(\n    transaction: Transaction,\n    actions: TransactionRule['actions']\n  ): Promise<void> {\n    for (const action of actions) {\n      switch (action.type) {\n        case 'set_category':\n          transaction.category = action.value as TransactionCategory;\n          break;\n        case 'set_subcategory':\n          transaction.subcategory = action.value as string;\n          break;\n        case 'add_tag':\n          if (!transaction.tags.includes(action.value as string)) {\n            transaction.tags.push(action.value as string);\n          }\n          break;\n        case 'set_merchant':\n          transaction.merchantName = action.value as string;\n          break;\n        case 'exclude_from_budget':\n          transaction.excludeFromBudget = action.value as boolean;\n          break;\n        case 'mark_as_transfer':\n          transaction.isTransfer = action.value as boolean;\n          if (transaction.isTransfer) {\n            transaction.category = 'transfers';\n          }\n          break;\n      }\n    }\n  }\n\n  private getTransactionFieldValue(transaction: Transaction, field: string): any {\n    switch (field) {\n      case 'merchant':\n        return transaction.merchantName || '';\n      case 'description':\n        return transaction.description;\n      case 'amount':\n        return Math.abs(transaction.amount);\n      case 'category':\n        return transaction.category;\n      case 'account':\n        return transaction.accountId;\n      default:\n        return '';\n    }\n  }\n\n  private async applyRuleToExistingTransactions(rule: TransactionRule): Promise<void> {\n    const allTransactions = Array.from(this.transactions.values());\n    \n    for (const transaction of allTransactions) {\n      if (await this.evaluateRuleConditions(transaction, rule.conditions)) {\n        await this.executeRuleActions(transaction, rule.actions);\n        transaction.updatedAt = new Date();\n        this.transactions.set(transaction.id, transaction);\n      }\n    }\n  }\n\n  private async calculateCategoryBreakdown(transactions: Transaction[]): Promise<CategorySpending[]> {\n    const categoryMap: Record<string, { amount: number; count: number; transactions: Transaction[] }> = {};\n\n    for (const transaction of transactions) {\n      if (transaction.amount >= 0) continue; // Skip income\n      \n      const category = transaction.category;\n      const amount = Math.abs(transaction.amount);\n      \n      if (!categoryMap[category]) {\n        categoryMap[category] = { amount: 0, count: 0, transactions: [] };\n      }\n      \n      categoryMap[category].amount += amount;\n      categoryMap[category].count += 1;\n      categoryMap[category].transactions.push(transaction);\n    }\n\n    const totalExpenses = Object.values(categoryMap).reduce((sum, cat) => sum + cat.amount, 0);\n\n    return Object.entries(categoryMap).map(([category, data]) => ({\n      category: category as TransactionCategory,\n      amount: data.amount,\n      percentage: totalExpenses > 0 ? (data.amount / totalExpenses) * 100 : 0,\n      transactionCount: data.count,\n      averageAmount: data.amount / data.count,\n      change: {\n        amount: 0, // TODO: Calculate vs previous period\n        percentage: 0,\n        direction: 'stable' as const\n      }\n    })).sort((a, b) => b.amount - a.amount);\n  }\n\n  private async calculateMerchantBreakdown(transactions: Transaction[]) {\n    // Similar to category breakdown but for merchants\n    return [];\n  }\n\n  private async generateSpendingInsights(\n    transactions: Transaction[],\n    categoryBreakdown: CategorySpending[]\n  ): Promise<SpendingInsight[]> {\n    const insights: SpendingInsight[] = [];\n\n    // High spending categories\n    const topCategories = categoryBreakdown.slice(0, 3);\n    for (const category of topCategories) {\n      if (category.percentage > 30) {\n        insights.push({\n          type: 'high_spending',\n          title: `High ${category.category} spending`,\n          description: `${category.category} accounts for ${category.percentage.toFixed(1)}% of your total spending`,\n          amount: category.amount,\n          category: category.category,\n          confidence: 0.9,\n          actionable: true,\n          action: `Consider setting a budget for ${category.category} to control spending`\n        });\n      }\n    }\n\n    // TODO: Add more insight types\n    // - Unusual merchant patterns\n    // - Recurring charge analysis\n    // - Budget alerts\n    // - Savings opportunities\n\n    return insights;\n  }\n\n  private getPeriodDates(period: 'month' | 'quarter' | 'year'): { startDate: Date; endDate: Date } {\n    const endDate = new Date();\n    const startDate = new Date();\n\n    switch (period) {\n      case 'month':\n        startDate.setMonth(startDate.getMonth() - 1);\n        break;\n      case 'quarter':\n        startDate.setMonth(startDate.getMonth() - 3);\n        break;\n      case 'year':\n        startDate.setFullYear(startDate.getFullYear() - 1);\n        break;\n    }\n\n    return { startDate, endDate };\n  }\n\n  private detectFileFormat(filename: string): TransactionImport['format'] {\n    const extension = filename.toLowerCase().split('.').pop();\n    switch (extension) {\n      case 'csv':\n        return 'csv';\n      case 'ofx':\n        return 'ofx';\n      case 'qfx':\n        return 'qfx';\n      case 'qif':\n        return 'qif';\n      default:\n        return 'csv';\n    }\n  }\n\n  private async processImportFile(\n    importRecord: TransactionImport,\n    file: File,\n    mapping: any\n  ): Promise<void> {\n    // TODO: Implement actual file processing\n    // This would parse CSV/OFX and create transactions\n    \n    // Mock processing\n    setTimeout(() => {\n      importRecord.status = 'completed';\n      importRecord.totalTransactions = 100;\n      importRecord.importedTransactions = 95;\n      importRecord.duplicateTransactions = 3;\n      importRecord.errorTransactions = 2;\n      importRecord.completedAt = new Date();\n      \n      this.imports.set(importRecord.id, importRecord);\n    }, 3000);\n  }\n\n  private generateTransactionId(): string {\n    return `txn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateRuleId(): string {\n    return `rule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateTransferId(): string {\n    return `transfer_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateImportId(): string {\n    return `import_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\nexport const transactionService = TransactionService.getInstance();","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/transactions/components/DateSeparator.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/transactions/components/DateSeparator.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport { format, isToday, isYesterday } from 'date-fns';\n\ninterface DateSeparatorProps {\n  date: Date;\n  className?: string;\n}\n\nconst DateSeparator: React.FC<DateSeparatorProps> = ({ date, className }) => {\n  const label = React.useMemo(() => {\n    if (isToday(date)) return 'Today';\n    if (isYesterday(date)) return 'Yesterday';\n    return format(date, 'MMMM d, yyyy');\n  }, [date]);\n\n  return (\n    <div\n      role=\"presentation\"\n      className={cn(\n        'sticky top-0 z-10 grid items-center gap-3 lg:gap-4',\n        'grid-cols-[48px_1fr_96px_110px_96px]',\n        'py-2 px-4 backdrop-blur-md bg-zinc-900/60 border-b border-white/10',\n        className\n      )}\n      style={{ minHeight: '40px' }}\n    >\n      <div className=\"col-span-full text-sm font-medium text-white/80\" data-testid=\"date-separator\">\n        {label}\n      </div>\n    </div>\n  );\n};\n\nexport default DateSeparator; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/transactions/components/EnterpriseTransactionView.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/transactions/components/EnterpriseTransactionView.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\nimport { \n  Search, \n  Filter, \n  Download, \n  ChevronLeft, \n  ChevronRight, \n  Truck, \n  Package, \n  CheckCircle, \n  Clock,\n  ArrowUpDown,\n  MoreHorizontal\n} from 'lucide-react';\nimport { cn } from '@/shared/lib/utils';\n\ninterface Transaction {\n  id: string;\n  merchant: string;\n  category: string;\n  amount: number;\n  date: string;\n  time: string;\n  status: 'completed' | 'pending' | 'failed';\n  paymentMethod?: string;\n  reference?: string;\n  shipping?: {\n    trackingNumber: string;\n    provider: 'UPS' | 'FedEx' | 'USPS';\n    status: 'In Transit' | 'Delivered' | 'Out for Delivery';\n    estimatedDelivery?: string;\n  };\n}\n\ninterface EnterpriseTransactionViewProps {\n  transactions: Transaction[];\n  onTransactionClick?: (transaction: Transaction) => void;\n  className?: string;\n}\n\nconst EnterpriseTransactionView: React.FC<EnterpriseTransactionViewProps> = ({\n  transactions,\n  onTransactionClick,\n  className\n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [sortField, setSortField] = useState<keyof Transaction>('date');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [selectedIds, setSelectedIds] = useState<Set<string>>(new Set());\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n\n  // Format currency\n  const formatAmount = (amount: number) => {\n    const formatted = Math.abs(amount).toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    });\n    return amount < 0 ? `-${formatted}` : `+${formatted}`;\n  };\n\n  // Get status badge styles\n  const getStatusBadge = (status: string) => {\n    const baseClasses = 'inline-flex items-center px-2 py-1 rounded-full text-xs font-medium';\n    switch (status) {\n      case 'completed':\n        return `${baseClasses} bg-green-100 text-green-800`;\n      case 'pending':\n        return `${baseClasses} bg-yellow-100 text-yellow-800`;\n      case 'failed':\n        return `${baseClasses} bg-red-100 text-red-800`;\n      default:\n        return `${baseClasses} bg-gray-100 text-gray-800`;\n    }\n  };\n\n  // Get shipping icon\n  const getShippingIcon = (status: string) => {\n    switch (status) {\n      case 'Delivered':\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'Out for Delivery':\n        return <Truck className=\"w-4 h-4 text-blue-500\" />;\n      case 'In Transit':\n        return <Package className=\"w-4 h-4 text-orange-500\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  // Handle sorting\n  const handleSort = (field: keyof Transaction) => {\n    if (field === sortField) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n  };\n\n  // Filter and sort transactions\n  const processedTransactions = useMemo(() => {\n    const filtered = transactions.filter(transaction =>\n      transaction.merchant.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      transaction.category.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n\n    // Sort\n    filtered.sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      // Handle special cases\n      if (sortField === 'amount') {\n        aValue = a.amount as unknown as string;\n        bValue = b.amount as unknown as string;\n      } else if (sortField === 'date') {\n        aValue = new Date(a.date + ' ' + a.time).getTime() as unknown as string;\n        bValue = new Date(b.date + ' ' + b.time).getTime() as unknown as string;\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n\n    return filtered;\n  }, [transactions, searchQuery, sortField, sortDirection]);\n\n  // Pagination\n  const totalPages = Math.ceil(processedTransactions.length / itemsPerPage);\n  const paginatedTransactions = processedTransactions.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  // Handle selection\n  const toggleSelection = (id: string) => {\n    const newSelected = new Set(selectedIds);\n    if (newSelected.has(id)) {\n      newSelected.delete(id);\n    } else {\n      newSelected.add(id);\n    }\n    setSelectedIds(newSelected);\n  };\n\n  const selectAll = () => {\n    if (selectedIds.size === paginatedTransactions.length) {\n      setSelectedIds(new Set());\n    } else {\n      setSelectedIds(new Set(paginatedTransactions.map(t => t.id)));\n    }\n  };\n\n  const SortableHeader = ({ \n    field, \n    children \n  }: { \n    field: keyof Transaction; \n    children: React.ReactNode;\n  }) => (\n    <th \n      className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-50 transition-colors\"\n      onClick={() => handleSort(field)}\n    >\n      <div className=\"flex items-center gap-2\">\n        {children}\n        <ArrowUpDown className=\"w-3 h-3\" />\n      </div>\n    </th>\n  );\n\n  return (\n    <div className={cn('bg-white rounded-lg shadow-lg', className)}>\n      {/* Header */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-gray-900\">Transactions</h2>\n            <p className=\"text-sm text-gray-500 mt-1\">\n              {processedTransactions.length} transactions found\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2\">\n              <Download className=\"w-4 h-4\" />\n              Export\n            </button>\n            <button className=\"p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors\">\n              <Filter className=\"w-4 h-4 text-gray-600\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search transactions...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          />\n        </div>\n      </div>\n\n      {/* Table */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th className=\"px-6 py-3 w-12\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedIds.size === paginatedTransactions.length && paginatedTransactions.length > 0}\n                  onChange={selectAll}\n                  className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                />\n              </th>\n              <SortableHeader field=\"merchant\">Merchant</SortableHeader>\n              <SortableHeader field=\"category\">Category</SortableHeader>\n              <SortableHeader field=\"amount\">Amount</SortableHeader>\n              <SortableHeader field=\"date\">Date & Time</SortableHeader>\n              <SortableHeader field=\"status\">Status</SortableHeader>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Payment Method\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Shipping\n              </th>\n              <th className=\"relative px-6 py-3\">\n                <span className=\"sr-only\">Actions</span>\n              </th>\n            </tr>\n          </thead>\n          \n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {paginatedTransactions.map((transaction) => (\n              <tr \n                key={transaction.id}\n                className=\"hover:bg-gray-50 transition-colors cursor-pointer\"\n                onClick={() => onTransactionClick?.(transaction)}\n              >\n                <td className=\"px-6 py-4 w-12\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedIds.has(transaction.id)}\n                    onChange={(e) => {\n                      e.stopPropagation();\n                      toggleSelection(transaction.id);\n                    }}\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                </td>\n                \n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"font-medium text-gray-900\">{transaction.merchant}</div>\n                </td>\n                \n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800\">\n                    {transaction.category}\n                  </span>\n                </td>\n                \n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <span className={cn(\n                    'font-semibold',\n                    transaction.amount > 0 ? 'text-green-600' : 'text-gray-900'\n                  )}>\n                    {formatAmount(transaction.amount)}\n                  </span>\n                </td>\n                \n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                  <div>{new Date(transaction.date).toLocaleDateString()}</div>\n                  <div className=\"text-xs text-gray-500\">{transaction.time}</div>\n                </td>\n                \n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <span className={getStatusBadge(transaction.status)}>\n                    {transaction.status}\n                  </span>\n                </td>\n                \n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                  {transaction.paymentMethod || '—'}\n                </td>\n                \n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  {transaction.shipping ? (\n                    <div className=\"flex items-center gap-2\">\n                      {getShippingIcon(transaction.shipping.status)}\n                      <span className=\"text-sm text-gray-600\">\n                        {transaction.shipping.status}\n                      </span>\n                    </div>\n                  ) : (\n                    <span className=\"text-gray-400\">—</span>\n                  )}\n                </td>\n                \n                <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                  <button\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      // Handle actions menu\n                    }}\n                    className=\"p-1 rounded-lg hover:bg-gray-100 transition-colors\"\n                  >\n                    <MoreHorizontal className=\"w-4 h-4 text-gray-400\" />\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Pagination */}\n      <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-between\">\n        <div className=\"text-sm text-gray-700\">\n          Showing{' '}\n          <span className=\"font-medium\">{(currentPage - 1) * itemsPerPage + 1}</span>\n          {' '}to{' '}\n          <span className=\"font-medium\">\n            {Math.min(currentPage * itemsPerPage, processedTransactions.length)}\n          </span>\n          {' '}of{' '}\n          <span className=\"font-medium\">{processedTransactions.length}</span>\n          {' '}results\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <button\n            onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n            disabled={currentPage === 1}\n            className=\"p-2 rounded-lg border border-gray-300 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 transition-colors\"\n          >\n            <ChevronLeft className=\"w-4 h-4\" />\n          </button>\n          \n          <span className=\"px-3 py-1 text-sm\">\n            Page {currentPage} of {totalPages}\n          </span>\n          \n          <button\n            onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n            disabled={currentPage === totalPages}\n            className=\"p-2 rounded-lg border border-gray-300 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 transition-colors\"\n          >\n            <ChevronRight className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EnterpriseTransactionView; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/transactions/components/OptimizedTransactionList.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/transactions/components/OptimizedTransactionList.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback } from 'react';\nimport { \n  Transaction, \n  TransactionListProps, \n  TransactionClickHandler,\n  CategoryFilterHandler \n} from '@/types/shared';\nimport { UnifiedCard } from '@/shared/ui/UnifiedCard';\nimport { Search, Filter, ChevronDown, TrendingUp, TrendingDown } from 'lucide-react';\nimport { cn } from '@/shared/lib/utils';\nimport { carrierUrl, prettyShipStatus } from '@/shared/utils/shipping';\n\n// Optimized Transaction List - Consolidates:\n// - TransactionList.tsx\n// - VueniUnifiedTransactionList.tsx  \n// - EnterpriseTransactionView.tsx\n// - TransactionMain.tsx\n// - Multiple transaction item components\n// Performance optimized with React.memo, useMemo, useCallback\n\nexport const OptimizedTransactionList = React.memo<TransactionListProps>(({\n  transactions,\n  variant = 'default',\n  currency = 'USD',\n  features = {},\n  onTransactionClick,\n  onCategoryFilter,\n  className = ''\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [sortField, setSortField] = useState<'date' | 'amount' | 'merchant'>('date');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n\n  // Memoized filtered and sorted transactions\n  const processedTransactions = useMemo(() => {\n    let filtered = transactions;\n\n    // Search filter\n    if (features.searchable && searchTerm) {\n      filtered = filtered.filter(t => \n        t.merchant.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        t.category.name.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    // Category filter  \n    if (features.filterable && selectedCategory !== 'all') {\n      filtered = filtered.filter(t => t.category.name === selectedCategory);\n    }\n\n    // Sort\n    if (features.sortable) {\n      filtered.sort((a, b) => {\n        let comparison = 0;\n        \n        switch (sortField) {\n          case 'date':\n            comparison = new Date(a.date).getTime() - new Date(b.date).getTime();\n            break;\n          case 'amount':\n            comparison = Math.abs(a.amount) - Math.abs(b.amount);\n            break;\n          case 'merchant':\n            comparison = a.merchant.localeCompare(b.merchant);\n            break;\n        }\n        \n        return sortDirection === 'asc' ? comparison : -comparison;\n      });\n    }\n\n    return filtered;\n  }, [transactions, searchTerm, selectedCategory, sortField, sortDirection, features]);\n\n  // Memoized grouped transactions for date grouping\n  const groupedTransactions = useMemo(() => {\n    if (!features.groupByDate) return { ['']: processedTransactions };\n\n    return processedTransactions.reduce((groups, transaction) => {\n      const date = new Date(transaction.date).toDateString();\n      if (!groups[date]) {\n        groups[date] = [];\n      }\n      groups[date].push(transaction);\n      return groups;\n    }, {} as Record<string, Transaction[]>);\n  }, [processedTransactions, features.groupByDate]);\n\n  // Memoized categories for filter dropdown\n  const categories = useMemo(() => {\n    const uniqueCategories = Array.from(\n      new Set(transactions.map(t => t.category.name))\n    );\n    return uniqueCategories;\n  }, [transactions]);\n\n  // Optimized event handlers\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.target.value);\n  }, []);\n\n  const handleCategoryChange = useCallback((category: string) => {\n    setSelectedCategory(category);\n    onCategoryFilter?.(category);\n  }, [onCategoryFilter]);\n\n  const handleTransactionClick = useCallback((transaction: Transaction) => {\n    onTransactionClick?.(transaction);\n  }, [onTransactionClick]);\n\n  const handleSort = useCallback((field: typeof sortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n  }, [sortField]);\n\n  // Variant-specific styles\n  const getVariantStyles = () => {\n    switch (variant) {\n      case 'clean':\n        return {\n          container: '',\n          item: 'hover:bg-white/5 border-b border-white/5',\n          spacing: 'py-3 px-4'\n        };\n      case 'enterprise':\n        return {\n          container: '',\n          item: 'hover:bg-white/5 border-b border-white/10',\n          spacing: 'py-4 px-6'\n        };\n      case 'apple':\n        return {\n          container: '',\n          item: 'hover:bg-white/5 border-b border-white/10 last:border-b-0',\n          spacing: 'py-4 px-5 lg:py-3 lg:px-6'\n        };\n      case 'modern':\n        return {\n          container: '',\n          item: 'hover:bg-white/5 border-b border-white/10 last:border-b-0',\n          spacing: 'py-4 px-5'\n        };\n      default:\n        return {\n          container: '',\n          item: 'hover:bg-white/5 border-b border-white/10 last:border-b-0',\n          spacing: 'py-3 px-4'\n        };\n    }\n  };\n\n  const variantStyles = getVariantStyles();\n\n  return (\n    <UnifiedCard\n      variant=\"default\"\n      size=\"lg\"\n      className={cn('overflow-hidden p-0', className)}\n    >\n      {/* Header with Search and Filters */}\n      <div className=\"p-4 border-b border-white/10\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-white\">\n            Recent Transactions\n          </h3>\n          <div className=\"text-sm text-white/60\">\n            {processedTransactions.length} of {transactions.length}\n          </div>\n        </div>\n\n        {/* Search and Filter Row */}\n        <div className=\"flex gap-3\">\n          {/* Search */}\n          {features.searchable && (\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white/60\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search transactions...\"\n                value={searchTerm}\n                onChange={handleSearchChange}\n                className=\"w-full bg-white/10 border border-white/20 rounded-xl py-2 pl-10 pr-4 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n              />\n            </div>\n          )}\n\n          {/* Category Filter */}\n          {features.filterable && (\n            <div className=\"relative\">\n              <select\n                value={selectedCategory}\n                onChange={(e) => handleCategoryChange(e.target.value)}\n                className=\"bg-white/10 border border-white/20 rounded-xl py-2 pl-3 pr-8 text-white focus:outline-none focus:ring-2 focus:ring-blue-500/50 appearance-none\"\n              >\n                <option value=\"all\">All Categories</option>\n                {categories.map(category => (\n                  <option key={category} value={category}>\n                    {category}\n                  </option>\n                ))}\n              </select>\n              <ChevronDown className=\"absolute right-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white/60 pointer-events-none\" />\n            </div>\n          )}\n        </div>\n\n        {/* Sort Options */}\n        {features.sortable && (\n          <div className=\"flex gap-2 mt-3\">\n            {(['date', 'amount', 'merchant'] as const).map(field => (\n              <button\n                key={field}\n                onClick={() => handleSort(field)}\n                className={cn(\n                  'px-3 py-1 rounded-xl text-xs font-medium transition-colors',\n                  sortField === field\n                    ? 'bg-blue-500/20 text-blue-400'\n                    : 'bg-white/10 text-white/60 hover:text-white/80'\n                )}\n              >\n                {field.charAt(0).toUpperCase() + field.slice(1)}\n                {sortField === field && (\n                  sortDirection === 'asc' ? \n                    <TrendingUp className=\"inline ml-1 w-3 h-3\" /> :\n                    <TrendingDown className=\"inline ml-1 w-3 h-3\" />\n                )}\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Transaction List */}\n      <div \n        className={cn(\n          'max-h-96 md:max-h-[60vh] lg:max-h-[70vh] overflow-y-auto transaction-scroll-container', \n          variantStyles.container\n        )}\n        style={{\n          maskImage: 'radial-gradient(white, white)',\n          WebkitMaskImage: 'radial-gradient(white, white)',\n          borderRadius: 'inherit'\n        }}\n      >\n        {Object.entries(groupedTransactions).map(([date, groupTransactions]) => (\n          <div key={date}>\n            {/* Date Header (if grouping enabled) - Uses same grid structure as transaction rows */}\n            {features.groupByDate && (\n              <div className={cn(\n                'sticky top-0 bg-zinc-800/60 backdrop-blur-md py-2 border-b border-white/10 z-10',\n                // Use same grid layout as transaction rows for perfect alignment\n                'grid items-center gap-3 lg:gap-4',\n                // Mobile: Icon + Details + Amount (3 columns)\n                'grid-cols-[auto,1fr,auto]',\n                // Tablet: Icon + Details + Amount + Scores (4 columns when scores present)\n                features.showScores ? 'md:grid-cols-[auto,1fr,auto,auto]' : 'md:grid-cols-[auto,1fr,auto]',\n                // Desktop: Icon + Details + Date + Payment + Shipping + Amount + Scores\n                features.showScores\n                  ? 'lg:grid-cols-[auto,2fr,minmax(80px,auto),minmax(120px,auto),minmax(140px,auto),auto,auto]'\n                  : 'lg:grid-cols-[auto,2fr,minmax(80px,auto),minmax(120px,auto),minmax(140px,auto),auto]',\n                variantStyles.spacing\n              )}\n              role=\"presentation\"\n            >\n              {/* Date text in first column to align with transaction icons */}\n              <div className=\"text-sm font-medium text-white/80 col-span-full\">\n                {date === new Date().toDateString() ? 'Today' : \n                 date === new Date(Date.now() - 86400000).toDateString() ? 'Yesterday' :\n                 new Date(date).toLocaleDateString()}\n              </div>\n            </div>\n            )}\n\n            {/* Transactions in Group */}\n            {groupTransactions.map((transaction) => (\n              <TransactionItem\n                key={transaction.id}\n                transaction={transaction}\n                currency={currency}\n                features={features}\n                styles={variantStyles}\n                onClick={() => handleTransactionClick(transaction)}\n              />\n            ))}\n          </div>\n        ))}\n\n        {/* Empty State */}\n        {processedTransactions.length === 0 && (\n          <div className=\"p-8 text-center\">\n            <div className=\"text-white/60 mb-2\">No transactions found</div>\n            <div className=\"text-sm text-white/40\">\n              {searchTerm ? 'Try adjusting your search' : 'No transactions to display'}\n            </div>\n          </div>\n        )}\n      </div>\n    </UnifiedCard>\n  );\n});\n\nOptimizedTransactionList.displayName = 'OptimizedTransactionList';\n\n// Memoized Transaction Item Component\nconst TransactionItem = React.memo<{\n  transaction: Transaction;\n  currency: string;\n  features: TransactionListProps['features'];\n  styles: {\n    container: string;\n    item: string;\n    spacing: string;\n  };\n  onClick: () => void;\n}>(({ transaction, currency, features, styles, onClick }) => {\n  const formatAmount = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency\n    }).format(Math.abs(amount));\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  return (\n    <div\n      className={cn(\n        // Fixed grid layout with consistent column alignment\n        'grid items-center cursor-pointer transition-colors gap-3 lg:gap-4',\n        // Mobile: Icon + Details + Amount (3 columns)\n        'grid-cols-[auto,1fr,auto]',\n        // Tablet: Icon + Details + Amount + Scores (4 columns when scores present)\n        features.showScores && transaction.scores ? 'md:grid-cols-[auto,1fr,auto,auto]' : 'md:grid-cols-[auto,1fr,auto]',\n        // Desktop: Icon + Details + Date + Payment + Shipping + Amount + Scores (7 columns when scores present)\n        features.showScores && transaction.scores\n          ? 'lg:grid-cols-[auto,2fr,minmax(80px,auto),minmax(120px,auto),minmax(140px,auto),auto,auto]'\n          : 'lg:grid-cols-[auto,2fr,minmax(80px,auto),minmax(120px,auto),minmax(140px,auto),auto]',\n        styles.item,\n        styles.spacing\n      )}\n      onClick={onClick}\n      role=\"button\"\n      tabIndex={0}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          onClick();\n        }\n      }}\n    >\n      {/* Category Icon */}\n      <div \n        className=\"w-10 h-10 lg:w-8 lg:h-8 rounded-xl flex items-center justify-center text-white font-semibold text-sm lg:text-xs flex-shrink-0\"\n        style={{ backgroundColor: transaction.category.color + '30' }}\n      >\n        {transaction.merchant.charAt(0).toUpperCase()}\n      </div>\n\n      {/* Transaction Details */}\n      <div className=\"min-w-0\">\n        <div className=\"font-medium text-white truncate\">{transaction.merchant}</div>\n        <div className=\"flex items-center space-x-2 text-xs text-white/60\">\n          {features.showCategories && (\n            <>\n              <span className=\"truncate\">{transaction.category.name}</span>\n              {/* Show date on mobile inline with category */}\n              <span className=\"lg:hidden\">•</span>\n              <span className=\"lg:hidden whitespace-nowrap\">{formatDate(transaction.date)}</span>\n            </>\n          )}\n          {!features.showCategories && (\n            <span className=\"lg:hidden whitespace-nowrap\">{formatDate(transaction.date)}</span>\n          )}\n        </div>\n        {/* Mobile shipping status inline second row*/}\n        {transaction.trackingNumber && (\n          <div className=\"flex lg:hidden items-center gap-1 text-xs text-white/50 mt-0.5\">\n            {prettyShipStatus(transaction.shippingStatus)}\n          </div>\n        )}\n      </div>\n\n      {/* Date - Desktop only, properly aligned */}\n      <div className=\"hidden lg:flex lg:justify-end text-sm text-white/60 min-w-[80px] whitespace-nowrap\">\n        {formatDate(transaction.date)}\n      </div>\n\n      {/* Payment Method - Desktop only */}\n      <div className=\"hidden lg:flex lg:items-center text-xs text-white/70 min-w-[120px] whitespace-nowrap\">\n        {transaction.paymentMethod ? (\n          <div className=\"flex items-center gap-1\">\n            <span>{transaction.paymentMethod.accountName}</span>\n            <span>•••• {transaction.paymentMethod.last4}</span>\n          </div>\n        ) : (\n          <span className=\"text-white/40\">—</span>\n        )}\n      </div>\n\n      {/* Shipping Status - Desktop only */}\n      <div className=\"hidden lg:flex lg:items-center text-xs text-white/70 min-w-[140px] whitespace-nowrap\">\n        {transaction.trackingNumber ? (\n          <a \n            href={carrierUrl(transaction.shippingCarrier, transaction.trackingNumber)} \n            target=\"_blank\" \n            rel=\"noopener noreferrer\" \n            className=\"hover:underline flex items-center gap-1\"\n          >\n            {prettyShipStatus(transaction.shippingStatus)}\n          </a>\n        ) : (\n          <span className=\"text-white/40\">—</span>\n        )}\n      </div>\n\n      {/* Amount */}\n      <div className={cn(\n        'font-semibold text-right whitespace-nowrap',\n        transaction.amount < 0 ? 'text-red-400' : 'text-green-400'\n      )}>\n        {transaction.amount < 0 ? '-' : '+'}{formatAmount(transaction.amount)}\n      </div>\n\n      {/* Scores - Only show when scores exist and feature is enabled */}\n      {features.showScores && transaction.scores && (\n        <div className=\"hidden md:flex space-x-1 flex-shrink-0\">\n          <div className=\"w-6 h-6 lg:w-5 lg:h-5 rounded-full bg-green-500/20 flex items-center justify-center\">\n            <span className=\"text-xs lg:text-[10px] text-green-400 font-semibold\">\n              {transaction.scores.health}\n            </span>\n          </div>\n          <div className=\"w-6 h-6 lg:w-5 lg:h-5 rounded-full bg-blue-500/20 flex items-center justify-center\">\n            <span className=\"text-xs lg:text-[10px] text-blue-400 font-semibold\">\n              {transaction.scores.eco}\n            </span>\n          </div>\n          <div className=\"w-6 h-6 lg:w-5 lg:h-5 rounded-full bg-purple-500/20 flex items-center justify-center\">\n            <span className=\"text-xs lg:text-[10px] text-purple-400 font-semibold\">\n              {transaction.scores.financial}\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nTransactionItem.displayName = 'TransactionItem';\n\nexport default OptimizedTransactionList;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/transactions/components/ScoreCircle.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/transactions/components/ScoreCircle.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from 'react';\n\ninterface ScoreCircleProps {\n  score: number;\n  label: string;\n  isVisible: boolean;\n  delay?: number;\n  type?: string;\n}\n\nconst getScoreColor = (type?: string) => {\n  switch (type) {\n    case 'health': return '#FF69B4'; // Pink for health\n    case 'eco': return '#00FF7F'; // Green for eco  \n    case 'financial': return '#00BFFF'; // Blue for financial\n    default: return '#FFFFFF'; // Default white\n  }\n};\n\nconst ScoreCircle = ({ score, label, isVisible, delay = 0, type }: ScoreCircleProps) => {\n  const color = getScoreColor(type);\n  const circumference = 2 * Math.PI * 7; // radius = 7\n  const strokeDasharray = circumference;\n  const strokeDashoffset = circumference - (score / 100) * circumference;\n\n  return (\n    <div \n      className={`relative transition-all duration-300 ease-out ${\n        isVisible ? 'opacity-100 scale-100' : 'opacity-0 scale-90'\n      }`}\n      title={`${label}: ${score}/100`}\n      style={{\n        transitionDelay: isVisible ? `${delay}ms` : '0ms',\n        width: '18px',\n        height: '18px'\n      }}\n    >\n      <svg width=\"18\" height=\"18\" className=\"transform -rotate-90\">\n        <circle\n          cx=\"9\"\n          cy=\"9\"\n          r=\"7\"\n          stroke=\"rgba(255, 255, 255, 0.2)\"\n          strokeWidth=\"1.5\"\n          fill=\"none\"\n        />\n        <circle\n          cx=\"9\"\n          cy=\"9\"\n          r=\"7\"\n          stroke={color}\n          strokeWidth=\"1.5\"\n          fill=\"none\"\n          strokeDasharray={strokeDasharray}\n          strokeDashoffset={strokeDashoffset}\n          strokeLinecap=\"round\"\n          className=\"transition-all duration-700 ease-out\"\n          style={{\n            filter: `drop-shadow(0 0 4px ${color}60)`\n          }}\n        />\n      </svg>\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        <span \n          className=\"text-[7px] font-bold leading-none\"\n          style={{ color }}\n        >\n          {score}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default ScoreCircle;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/transactions/components/ScoreCircles.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/transactions/components/ScoreCircles.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from 'react';\nimport ScoreCircle from './ScoreCircle';\nimport { TransactionScores } from '@/shared/utils/transactionScoring';\n\ninterface ScoreCirclesProps {\n  scores: TransactionScores;\n  isVisible: boolean;\n}\n\nconst ScoreCircles = ({ scores, isVisible }: ScoreCirclesProps) => {\n  return (\n    <div className={`flex gap-3 transition-all duration-500 ease-out ${\n      isVisible ? 'opacity-100 translate-x-0 scale-100' : 'opacity-0 translate-x-8 scale-75'\n    }`}>\n      <ScoreCircle \n        score={scores.health} \n        label=\"Health\"\n        isVisible={isVisible}\n        delay={0}\n        type=\"health\"\n      />\n      <ScoreCircle \n        score={scores.eco} \n        label=\"Eco\"\n        isVisible={isVisible}\n        delay={100}\n        type=\"eco\"\n      />\n      <ScoreCircle \n        score={scores.financial} \n        label=\"Financial\"\n        isVisible={isVisible}\n        delay={200}\n        type=\"financial\"\n      />\n    </div>\n  );\n};\n\nexport default ScoreCircles;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/transactions/components/ShippingInfo.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/transactions/components/ShippingInfo.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from 'react';\n\ninterface ShippingInfoProps {\n  trackingNumber: string;\n  shippingProvider: 'UPS' | 'FedEx' | 'USPS';\n  deliveryStatus?: 'In Transit' | 'Out for Delivery' | 'Delivered';\n}\n\nconst ShippingInfo = ({ trackingNumber, shippingProvider, deliveryStatus }: ShippingInfoProps) => {\n  const getDeliveryStatusColor = (status?: string) => {\n    switch (status) {\n      case 'Delivered': return 'text-green-400';\n      case 'Out for Delivery': return 'text-orange-400';\n      case 'In Transit': return 'text-blue-400';\n      default: return 'text-white/70';\n    }\n  };\n\n  return (\n    <div className=\"transaction-shipping\">\n      <span>Tracking: </span>\n      <span className=\"text-white/90 font-mono\">{trackingNumber}</span>\n      <span> via {shippingProvider} </span>\n      <span className={`font-medium ${getDeliveryStatusColor(deliveryStatus)}`}>\n        {deliveryStatus}\n      </span>\n    </div>\n  );\n};\n\nexport default ShippingInfo;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/transactions/components/StatusChip.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/transactions/components/StatusChip.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport { TransactionStatus } from '@/types';\n\ninterface StatusChipProps {\n  status: TransactionStatus;\n}\n\nconst statusStyles: Record<TransactionStatus, string> = {\n  [TransactionStatus.Pending]: 'bg-yellow-700/60 text-yellow-300',\n  [TransactionStatus.InTransit]: 'bg-blue-700/60 text-blue-300',\n  [TransactionStatus.Delivered]: 'bg-green-700/60 text-green-300',\n  [TransactionStatus.None]: 'bg-gray-700/60 text-gray-300',\n};\n\nconst labelMap: Record<TransactionStatus, string> = {\n  [TransactionStatus.Pending]: 'Pending',\n  [TransactionStatus.InTransit]: 'In Transit',\n  [TransactionStatus.Delivered]: 'Delivered',\n  [TransactionStatus.None]: '—',\n};\n\nconst StatusChip: React.FC<StatusChipProps> = ({ status }) => {\n  return (\n    <span\n      className={cn(\n        'inline-flex items-center justify-center rounded-full px-2 py-0.5 text-xs font-medium capitalize',\n        statusStyles[status]\n      )}\n      data-testid=\"status-chip\"\n    >\n      {labelMap[status]}\n    </span>\n  );\n};\n\nexport default StatusChip; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/transactions/components/TransactionAmount.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/transactions/components/TransactionAmount.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from 'react';\n\ninterface TransactionAmountProps {\n  amount: number;\n  date: string;\n  currency: string;\n}\n\nconst TransactionAmount = ({ amount, date, currency }: TransactionAmountProps) => {\n  const formatCurrency = (amount: number) => {\n    const absAmount = Math.abs(amount);\n    const formatted = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2\n    }).format(absAmount);\n    \n    return amount < 0 ? `-${formatted}` : `+${formatted}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getAmountColor = (amount: number) => {\n    if (amount > 0) return 'text-green-400';\n    if (amount < 0) return 'text-white';\n    return 'text-white/70';\n  };\n\n  return (\n    <div className=\"transaction-amount\">\n      <p className={`transaction-amount-value ${getAmountColor(amount)}`}>\n        {formatCurrency(amount)}\n      </p>\n      <p className=\"transaction-date\">{formatDate(date)}</p>\n    </div>\n  );\n};\n\nexport default TransactionAmount;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/transactions/components/TransactionList.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/transactions/components/TransactionList.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// TransactionList Revamp – unified, responsive, virtualized list\n// IMPORTANT: This file has been completely rewritten to satisfy the TransactionList Revamp spec.\n\nimport React, { memo, useMemo } from 'react';\nimport { FixedSizeList as List, ListChildComponentProps } from 'react-window';\nimport { cn } from '@/shared/lib/utils';\nimport TransactionRow from './TransactionRow';\nimport DateSeparator from './DateSeparator';\nimport { Transaction } from '@/types/transactions';\nimport { format } from 'date-fns';\n\ninterface TransactionListProps {\n  transactions: Transaction[];\n  isLoading?: boolean;\n  onTransactionClick?: (tx: Transaction) => void;\n  className?: string;\n}\n\n// Internal flattened item representation (row or separator)\ninterface RowItemSeparator {\n  type: 'separator';\n  dateKey: string;\n  date: Date;\n}\ninterface RowItemTransaction {\n  type: 'transaction';\n  tx: Transaction;\n}\n\ntype RowItem = RowItemSeparator | RowItemTransaction;\n\nconst ROW_HEIGHT = 72; // px – consistent row & separator height\nconst VIRTUALIZE_THRESHOLD = 500;\n\nconst SkeletonRow = () => (\n  <div\n    className={cn(\n      'grid items-center gap-3 lg:gap-4',\n      'grid-cols-[48px_1fr_96px_110px_96px]',\n      'px-4 py-3 animate-pulse'\n    )}\n  >\n    <div className=\"w-10 h-10 rounded-lg bg-white/10\" />\n    <div className=\"space-y-1\">\n      <div className=\"h-3 w-24 bg-white/10 rounded\" />\n      <div className=\"h-2 w-16 bg-white/10 rounded\" />\n    </div>\n    <div className=\"h-3 w-16 bg-white/10 rounded\" />\n    <div className=\"h-5 w-20 bg-white/10 rounded\" />\n    <div className=\"h-3 w-20 bg-white/10 rounded\" />\n  </div>\n);\n\nconst buildRowItems = (transactions: Transaction[]): RowItem[] => {\n  // Sort transactions by date desc\n  const sorted = [...transactions].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  const items: RowItem[] = [];\n  let lastDateKey = '';\n  sorted.forEach((tx) => {\n    const date = new Date(tx.date);\n    const dateKey = format(date, 'yyyy-MM-dd');\n    if (dateKey !== lastDateKey) {\n      items.push({ type: 'separator', dateKey, date });\n      lastDateKey = dateKey;\n    }\n    items.push({ type: 'transaction', tx });\n  });\n  return items;\n};\n\ninterface RowRendererData {\n  items: RowItem[];\n  onTransactionClick?: (tx: Transaction) => void;\n}\n\nconst RowRenderer: React.FC<ListChildComponentProps<RowRendererData>> = ({ index, style, data }) => {\n  const item = data.items[index];\n  if (!item) return null;\n  if (item.type === 'separator') {\n    return (\n      <div style={style}>\n        <DateSeparator date={item.date} />\n      </div>\n    );\n  }\n  return (\n    <div style={style}>\n      <TransactionRow tx={item.tx} onClick={data.onTransactionClick} />\n    </div>\n  );\n};\n\nexport const TransactionList: React.FC<TransactionListProps> = memo(({ transactions, isLoading = false, onTransactionClick, className }) => {\n  const items = useMemo(() => buildRowItems(transactions), [transactions]);\n\n  // Loading state skeletons\n  if (isLoading) {\n    return (\n      <div className={cn('space-y-2', className)} data-testid=\"transaction-list-loading\">\n        {Array.from({ length: 8 }).map((_, i) => (\n          <SkeletonRow key={`sk-${i}`} />\n        ))}\n      </div>\n    );\n  }\n\n  // Empty state\n  if (transactions.length === 0) {\n    return (\n      <div className=\"text-center py-12 text-white/60\" data-testid=\"transaction-list-empty\">\n        No transactions to display.\n      </div>\n    );\n  }\n\n  // Decide whether to virtualize\n  const shouldVirtualize = transactions.length > VIRTUALIZE_THRESHOLD;\n\n  if (shouldVirtualize) {\n    const height = Math.min(window.innerHeight * 0.7, ROW_HEIGHT * 12);\n    return (\n      <List\n        height={height}\n        itemCount={items.length}\n        itemSize={ROW_HEIGHT}\n        itemData={{ items, onTransactionClick }}\n        width=\"100%\"\n        overscanCount={8}\n        className={cn('transaction-scroll-container', className)}\n        data-testid=\"transaction-virtualized-list\"\n      >\n        {RowRenderer}\n      </List>\n    );\n  }\n\n  // Non-virtualized list\n  return (\n    <div className={cn('space-y-1 transaction-scroll-container', className)} data-testid=\"transaction-list\">\n      {items.map((item, idx) => (\n        item.type === 'separator' ? (\n          <DateSeparator key={item.dateKey} date={item.date} />\n        ) : (\n          <TransactionRow key={item.tx.id || idx} tx={item.tx} onClick={onTransactionClick} />\n        )\n      ))}\n    </div>\n  );\n});\n\nTransactionList.displayName = 'TransactionList';\n\nexport default TransactionList; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/transactions/components/TransactionMain.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/transactions/components/TransactionMain.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from 'react';\nimport { Package } from 'lucide-react';\n\ninterface TransactionMainProps {\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  hasShippingInfo: boolean;\n}\n\nconst TransactionMain = ({ merchant, category, hasShippingInfo }: TransactionMainProps) => {\n  return (\n    <div className=\"transaction-main\">\n      {hasShippingInfo && (\n        <div className=\"text-white/70 flex-shrink-0\">\n          <Package className=\"w-4 h-4\" />\n        </div>\n      )}\n      <div className=\"transaction-merchant-info\">\n        <p className=\"transaction-merchant-name\">\n          {merchant}\n        </p>\n        <p className=\"transaction-category\">\n          {category.name}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionMain;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/transactions/components/TransactionManager.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/transactions/components/TransactionManager.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { \n  Search, \n  Filter, \n  Download, \n  Upload, \n  Plus,\n  Edit3,\n  Trash2,\n  ArrowUpDown,\n  Calendar,\n  DollarSign,\n  Tag,\n  Settings,\n  CheckSquare,\n  Square,\n  MoreHorizontal,\n  TrendingUp,\n  ArrowLeftRight,\n  AlertCircle\n} from 'lucide-react';\nimport { Transaction, TransactionCategory } from '@/types/transactions';\nimport { transactionService } from '@/features/transactions/api/transactionService';\nimport { Switch } from '@/shared/ui/switch';\nimport { cn } from '@/shared/lib/utils';\n\ninterface TransactionManagerProps {\n  familyId: string;\n  accountId?: string;\n  compact?: boolean;\n}\n\nconst TransactionManager = ({ familyId, accountId, compact = false }: TransactionManagerProps) => {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [selectedTransactions, setSelectedTransactions] = useState<Set<string>>(new Set());\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategories, setSelectedCategories] = useState<TransactionCategory[]>([]);\n  const [dateRange, setDateRange] = useState<{ start: Date; end: Date } | null>(null);\n  const [showFilters, setShowFilters] = useState(false);\n  const [showBulkActions, setShowBulkActions] = useState(false);\n  const [sortBy, setSortBy] = useState<'date' | 'amount' | 'merchant'>('date');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n  const [loading, setLoading] = useState(true);\n  const [analytics, setAnalytics] = useState<any>(null);\n\n  // Load transactions on component mount and when filters change\n  useEffect(() => {\n    loadTransactions();\n  }, [familyId, accountId, searchQuery, selectedCategories, dateRange]);\n\n  const loadTransactions = async () => {\n    setLoading(true);\n    try {\n      const filters: { \n        category?: string; \n        minAmount?: number; \n        maxAmount?: number; \n        dateRange?: { start: Date; end: Date };\n        accountId?: string;\n      } = {\n        query: searchQuery || undefined,\n        categories: selectedCategories.length > 0 ? selectedCategories : undefined,\n        accountIds: accountId ? [accountId] : undefined,\n        dateRange: dateRange || undefined,\n        excludeTransfers: false\n      };\n\n      const [transactionData, analyticsData] = await Promise.all([\n        transactionService.searchTransactions(familyId, filters),\n        transactionService.generateAnalytics(familyId, 'month')\n      ]);\n\n      setTransactions(transactionData);\n      setAnalytics(analyticsData);\n    } catch (error) {\n      console.error('Failed to load transactions:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sortedTransactions = useMemo(() => {\n    return [...transactions].sort((a, b) => {\n      let comparison = 0;\n      \n      switch (sortBy) {\n        case 'date':\n          comparison = a.date.getTime() - b.date.getTime();\n          break;\n        case 'amount':\n          comparison = Math.abs(a.amount) - Math.abs(b.amount);\n          break;\n        case 'merchant':\n          comparison = (a.merchantName || '').localeCompare(b.merchantName || '');\n          break;\n      }\n      \n      return sortOrder === 'desc' ? -comparison : comparison;\n    });\n  }, [transactions, sortBy, sortOrder]);\n\n  const handleSelectTransaction = useCallback((transactionId: string, selected: boolean) => {\n    const newSelected = new Set(selectedTransactions);\n    if (selected) {\n      newSelected.add(transactionId);\n    } else {\n      newSelected.delete(transactionId);\n    }\n    setSelectedTransactions(newSelected);\n    setShowBulkActions(newSelected.size > 0);\n  }, [selectedTransactions]);\n\n  const handleSelectAll = useCallback(() => {\n    if (selectedTransactions.size === transactions.length) {\n      setSelectedTransactions(new Set());\n      setShowBulkActions(false);\n    } else {\n      setSelectedTransactions(new Set(transactions.map(t => t.id)));\n      setShowBulkActions(true);\n    }\n  }, [selectedTransactions.size, transactions]);\n\n  const handleBulkUpdate = async (updates: { transactionIds: string[]; changes: Partial<Transaction> }) => {\n    try {\n      await transactionService.bulkUpdateTransactions(\n        Array.from(selectedTransactions),\n        updates.changes\n      );\n      await loadTransactions();\n      setSelectedTransactions(new Set());\n      setShowBulkActions(false);\n    } catch (error) {\n      console.error('Bulk update failed:', error);\n    }\n  };\n\n  const getTransactionIcon = (transaction: Transaction) => {\n    if (transaction.isTransfer) {\n      return <ArrowLeftRight className=\"w-4 h-4 text-blue-400\" />;\n    }\n    if (transaction.amount > 0) {\n      return <TrendingUp className=\"w-4 h-4 text-green-400\" />;\n    }\n    return <DollarSign className=\"w-4 h-4 text-white/70\" />;\n  };\n\n  const getCategoryColor = (category: TransactionCategory) => {\n    const colors: Record<TransactionCategory, string> = {\n      income: 'bg-green-500/20 text-green-400 border-green-500/30',\n      housing: 'bg-blue-500/20 text-blue-400 border-blue-500/30',\n      transportation: 'bg-orange-500/20 text-orange-400 border-orange-500/30',\n      food: 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30',\n      utilities: 'bg-purple-500/20 text-purple-400 border-purple-500/30',\n      insurance: 'bg-indigo-500/20 text-indigo-400 border-indigo-500/30',\n      healthcare: 'bg-red-500/20 text-red-400 border-red-500/30',\n      savings: 'bg-emerald-500/20 text-emerald-400 border-emerald-500/30',\n      debt_payments: 'bg-rose-500/20 text-rose-400 border-rose-500/30',\n      entertainment: 'bg-pink-500/20 text-pink-400 border-pink-500/30',\n      personal_care: 'bg-violet-500/20 text-violet-400 border-violet-500/30',\n      shopping: 'bg-cyan-500/20 text-cyan-400 border-cyan-500/30',\n      education: 'bg-teal-500/20 text-teal-400 border-teal-500/30',\n      gifts_donations: 'bg-amber-500/20 text-amber-400 border-amber-500/30',\n      business: 'bg-slate-500/20 text-slate-400 border-slate-500/30',\n      taxes: 'bg-red-600/20 text-red-300 border-red-600/30',\n      investments: 'bg-green-600/20 text-green-300 border-green-600/30',\n      fees: 'bg-gray-500/20 text-gray-400 border-gray-500/30',\n      transfers: 'bg-blue-500/20 text-blue-400 border-blue-500/30',\n      other: 'bg-gray-500/20 text-gray-400 border-gray-500/30'\n    };\n    return colors[category] || colors.other;\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(amount);\n  };\n\n  const formatDate = (date: Date) => {\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: date.getFullYear() !== new Date().getFullYear() ? 'numeric' : undefined\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        {[...Array(5)].map((_, i) => (\n          <div key={i} className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 animate-pulse\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-12 h-12 bg-white/[0.05] rounded-2xl\"></div>\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 bg-white/[0.05] rounded w-32\"></div>\n                  <div className=\"h-3 bg-white/[0.05] rounded w-24\"></div>\n                </div>\n              </div>\n              <div className=\"h-6 bg-white/[0.05] rounded w-16\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header & Controls */}\n      {!compact && (\n        <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-white flex items-center gap-3\">\n                <DollarSign className=\"w-7 h-7 text-blue-400\" />\n                Transactions\n              </h2>\n              <p className=\"text-white/60 mt-1\">\n                {transactions.length} transaction{transactions.length !== 1 ? 's' : ''}\n                {analytics && (\n                  <span className=\"ml-2\">\n                    • ${Math.abs(analytics.totalExpenses).toLocaleString()} spent this month\n                  </span>\n                )}\n              </p>\n            </div>\n\n            <div className=\"flex items-center gap-3\">\n              <button\n                onClick={() => setShowFilters(!showFilters)}\n                className={cn(\n                  \"liquid-glass-button px-4 py-2 rounded-xl transition-all flex items-center gap-2\",\n                  showFilters ? \"bg-blue-500/20 text-blue-400\" : \"text-white/80 hover:text-white\"\n                )}\n              >\n                <Filter className=\"w-4 h-4\" />\n                Filters\n              </button>\n\n              <button className=\"liquid-glass-button px-4 py-2 rounded-xl text-white/80 hover:text-white transition-all flex items-center gap-2\">\n                <Upload className=\"w-4 h-4\" />\n                Import\n              </button>\n\n              <button className=\"liquid-glass-button px-4 py-2 rounded-xl text-white/80 hover:text-white transition-all flex items-center gap-2\">\n                <Download className=\"w-4 h-4\" />\n                Export\n              </button>\n            </div>\n          </div>\n\n          {/* Search Bar */}\n          <div className=\"relative mb-4\">\n            <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-white/40\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search transactions, merchants, descriptions...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full pl-12 pr-4 py-3 bg-white/[0.05] border border-white/[0.08] rounded-xl text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50\"\n            />\n          </div>\n\n          {/* Advanced Filters */}\n          {showFilters && (\n            <div className=\"bg-white/[0.03] rounded-xl p-4 border border-white/[0.05] space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-white/80 mb-2\">Categories</label>\n                  <select\n                    multiple\n                    className=\"w-full bg-white/[0.05] border border-white/[0.08] rounded-lg text-white text-sm\"\n                  >\n                    {Object.values(['income', 'housing', 'food', 'transportation', 'entertainment']).map(category => (\n                      <option key={category} value={category}>\n                        {category.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-white/80 mb-2\">Date Range</label>\n                  <select className=\"w-full bg-white/[0.05] border border-white/[0.08] rounded-lg text-white text-sm py-2 px-3\">\n                    <option value=\"\">All Time</option>\n                    <option value=\"7d\">Last 7 Days</option>\n                    <option value=\"30d\">Last 30 Days</option>\n                    <option value=\"90d\">Last 90 Days</option>\n                    <option value=\"1y\">Last Year</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-white/80 mb-2\">Amount Range</label>\n                  <div className=\"flex gap-2\">\n                    <input\n                      type=\"number\"\n                      placeholder=\"Min\"\n                      className=\"flex-1 bg-white/[0.05] border border-white/[0.08] rounded-lg text-white text-sm py-2 px-3\"\n                    />\n                    <input\n                      type=\"number\"\n                      placeholder=\"Max\"\n                      className=\"flex-1 bg-white/[0.05] border border-white/[0.08] rounded-lg text-white text-sm py-2 px-3\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Switch id=\"exclude-transfers\" />\n                  <label htmlFor=\"exclude-transfers\" className=\"text-sm text-white/80\">\n                    Exclude Transfers\n                  </label>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Switch id=\"pending-only\" />\n                  <label htmlFor=\"pending-only\" className=\"text-sm text-white/80\">\n                    Pending Only\n                  </label>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Sort Controls */}\n          <div className=\"flex items-center justify-between mt-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <button\n                  onClick={handleSelectAll}\n                  className=\"p-2 rounded-lg hover:bg-white/[0.05] transition-colors\"\n                >\n                  {selectedTransactions.size === transactions.length ? (\n                    <CheckSquare className=\"w-4 h-4 text-blue-400\" />\n                  ) : selectedTransactions.size > 0 ? (\n                    <Square className=\"w-4 h-4 text-blue-400 opacity-60\" />\n                  ) : (\n                    <Square className=\"w-4 h-4 text-white/60\" />\n                  )}\n                </button>\n                {selectedTransactions.size > 0 && (\n                  <span className=\"text-sm text-white/80\">\n                    {selectedTransactions.size} selected\n                  </span>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-white/60\">Sort by:</span>\n              <select\n                value={sortBy}\n                onChange={(e) => setSortBy(e.target.value as any)}\n                className=\"bg-white/[0.05] border border-white/[0.08] rounded-lg text-white text-sm py-1 px-2\"\n              >\n                <option value=\"date\">Date</option>\n                <option value=\"amount\">Amount</option>\n                <option value=\"merchant\">Merchant</option>\n              </select>\n              <button\n                onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}\n                className=\"p-1 rounded hover:bg-white/[0.05] transition-colors\"\n              >\n                <ArrowUpDown className=\"w-4 h-4 text-white/60\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Bulk Actions Bar */}\n      {showBulkActions && (\n        <div className=\"bg-blue-500/10 border border-blue-500/20 rounded-xl p-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-400 font-medium\">\n              {selectedTransactions.size} transaction{selectedTransactions.size !== 1 ? 's' : ''} selected\n            </span>\n            \n            <div className=\"flex items-center gap-3\">\n              <select\n                onChange={(e) => e.target.value && handleBulkUpdate({ changes: { category: e.target.value } })}\n                className=\"bg-white/[0.05] border border-white/[0.08] rounded-lg text-white text-sm py-2 px-3\"\n              >\n                <option value=\"\">Set Category...</option>\n                {Object.values(['income', 'housing', 'food', 'transportation', 'entertainment']).map(category => (\n                  <option key={category} value={category}>\n                    {category.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                  </option>\n                ))}\n              </select>\n              \n              <button\n                onClick={() => handleBulkUpdate({ changes: { excludeFromBudget: true } })}\n                className=\"px-3 py-2 bg-white/[0.05] border border-white/[0.08] rounded-lg text-white/80 hover:text-white text-sm transition-colors\"\n              >\n                Exclude from Budget\n              </button>\n              \n              <button\n                onClick={() => setSelectedTransactions(new Set())}\n                className=\"p-2 text-white/60 hover:text-white transition-colors\"\n              >\n                ✕\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Transaction List */}\n      <div className=\"space-y-3\">\n        {sortedTransactions.length === 0 ? (\n          <div className=\"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-12 text-center\">\n            <DollarSign className=\"w-16 h-16 text-white/20 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-bold text-white mb-2\">No Transactions Found</h3>\n            <p className=\"text-white/60\">\n              {searchQuery || selectedCategories.length > 0 \n                ? 'Try adjusting your search or filters'\n                : 'Your transactions will appear here once you link accounts'\n              }\n            </p>\n          </div>\n        ) : (\n          sortedTransactions.map((transaction) => (\n            <div\n              key={transaction.id}\n              className={cn(\n                \"bg-white/[0.02] rounded-2xl border border-white/[0.08] p-4 hover:bg-white/[0.03] transition-all duration-300 backdrop-blur-md\",\n                selectedTransactions.has(transaction.id) && \"ring-2 ring-blue-500/50 bg-blue-500/5\"\n              )}\n            >\n              <div className=\"flex items-center gap-4\">\n                {/* Selection Checkbox */}\n                <button\n                  onClick={() => handleSelectTransaction(transaction.id, !selectedTransactions.has(transaction.id))}\n                  className=\"flex-shrink-0\"\n                >\n                  {selectedTransactions.has(transaction.id) ? (\n                    <CheckSquare className=\"w-4 h-4 text-blue-400\" />\n                  ) : (\n                    <Square className=\"w-4 h-4 text-white/40 hover:text-white/60\" />\n                  )}\n                </button>\n\n                {/* Transaction Icon */}\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-12 h-12 rounded-2xl bg-white/[0.06] flex items-center justify-center\">\n                    {getTransactionIcon(transaction)}\n                  </div>\n                </div>\n\n                {/* Transaction Details */}\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"min-w-0 flex-1\">\n                      <h4 className=\"font-semibold text-white truncate\">\n                        {transaction.merchantName || transaction.description}\n                      </h4>\n                      <div className=\"flex items-center gap-3 mt-1\">\n                        <span className={cn(\n                          \"text-xs px-2 py-1 rounded-lg border font-medium\",\n                          getCategoryColor(transaction.category)\n                        )}>\n                          {transaction.category.replace('_', ' ')}\n                        </span>\n                        <span className=\"text-xs text-white/60\">\n                          {formatDate(transaction.date)}\n                        </span>\n                        {transaction.isTransfer && (\n                          <span className=\"text-xs text-blue-400 flex items-center gap-1\">\n                            <ArrowLeftRight className=\"w-3 h-3\" />\n                            Transfer\n                          </span>\n                        )}\n                        {transaction.isPending && (\n                          <span className=\"text-xs text-orange-400 flex items-center gap-1\">\n                            <AlertCircle className=\"w-3 h-3\" />\n                            Pending\n                          </span>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"text-right flex-shrink-0 ml-4\">\n                      <p className={cn(\n                        \"font-bold text-sm\",\n                        transaction.amount > 0 ? \"text-green-400\" : \"text-white\"\n                      )}>\n                        {transaction.amount > 0 ? '+' : ''}{formatCurrency(transaction.amount)}\n                      </p>\n                      {transaction.tags.length > 0 && (\n                        <div className=\"flex items-center gap-1 mt-1 justify-end\">\n                          <Tag className=\"w-3 h-3 text-white/40\" />\n                          <span className=\"text-xs text-white/60\">\n                            {transaction.tags.slice(0, 2).join(', ')}\n                            {transaction.tags.length > 2 && '...'}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Action Menu */}\n                    <div className=\"flex-shrink-0 ml-2\">\n                      <button className=\"p-2 rounded-lg hover:bg-white/[0.05] transition-colors\">\n                        <MoreHorizontal className=\"w-4 h-4 text-white/60\" />\n                      </button>\n                    </div>\n                  </div>\n\n                  {/* Transaction Description */}\n                  {transaction.description !== transaction.merchantName && (\n                    <p className=\"text-xs text-white/60 mt-2 truncate\">\n                      {transaction.description}\n                    </p>\n                  )}\n\n                  {/* Notes */}\n                  {transaction.notes && (\n                    <p className=\"text-xs text-white/50 mt-1 italic\">\n                      {transaction.notes}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionManager;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/transactions/components/TransactionRow.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/transactions/components/TransactionRow.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport { TransactionStatus } from '@/types';\nimport { Transaction } from '@/types/transactions';\nimport StatusChip from './StatusChip';\nimport { format } from 'date-fns';\n\ninterface TransactionRowProps {\n  tx: Transaction;\n  className?: string;\n  onClick?: (tx: Transaction) => void;\n}\n\n// Helper to format amount with currency and sign\nconst formatAmount = (amount: number, currency: string = 'USD') => {\n  const formatted = Math.abs(amount).toLocaleString('en-US', {\n    style: 'currency',\n    currency,\n    minimumFractionDigits: 2,\n  });\n  return amount < 0 ? `-${formatted}` : formatted;\n};\n\nconst TransactionRow: React.FC<TransactionRowProps> = ({ tx, className, onClick }) => {\n  // Color coding for amounts\n  const amountColor = React.useMemo(() => {\n    if (tx.amount < 0) return 'text-red-400';\n    if (tx.amount > 0) return 'text-green-400';\n    return 'text-white';\n  }, [tx.amount]);\n\n  // Merchant and category fallback\n  const merchant = tx.merchantName || '—';\n  const category = tx.category ? String(tx.category) : '—';\n\n  // Date formatting (mm/dd/yyyy)\n  const dateString = tx.date ? format(new Date(tx.date), 'MM/dd/yy') : '—';\n\n  // Status handling – map existing status strings to new enum where possible\n  const status: TransactionStatus = (() => {\n    switch (tx.status as string) {\n      case 'pending':\n        return TransactionStatus.Pending;\n      case 'posted':\n      case 'cancelled':\n      case 'failed':\n      case 'returned':\n        return TransactionStatus.Delivered;\n      case 'in_transit':\n      case 'inTransit':\n      case 'IN_TRANSIT':\n        return TransactionStatus.InTransit;\n      default:\n        return TransactionStatus.None;\n    }\n  })();\n\n  return (\n    <button\n      type=\"button\"\n      data-testid=\"transaction-row\"\n      onClick={() => onClick?.(tx)}\n      className={cn(\n        'grid items-center gap-3 lg:gap-4',\n        // icon (48px) | merchant (auto) | date (96px) | status (110px) | amount (96px)\n        'grid-cols-[48px_1fr_96px_110px_96px]',\n        'px-4 py-3 rounded-md transition-colors text-left',\n        'hover:bg-zinc-800/60 bg-transparent',\n        className\n      )}\n    >\n      {/* Icon Placeholder */}\n      <div className=\"w-10 h-10 rounded-lg bg-white/5 flex items-center justify-center\" aria-hidden=\"true\">\n        <span className=\"text-sm text-white/60\">💸</span>\n      </div>\n\n      {/* Merchant & Category */}\n      <div className=\"min-w-0\">\n        <p className=\"truncate font-medium text-white\" title={merchant}>\n          {merchant}\n        </p>\n        <p className=\"text-xs text-white/60 truncate\" title={category}>\n          {category}\n        </p>\n      </div>\n\n      {/* Date */}\n      <div className=\"text-sm text-white/70 justify-self-end w-[96px]\">\n        {dateString}\n      </div>\n\n      {/* Status */}\n      <div className=\"w-[110px] justify-self-end\">\n        <StatusChip status={status} />\n      </div>\n\n      {/* Amount */}\n      <div className={cn('text-right w-[96px] font-medium', amountColor)}>\n        {formatAmount(tx.amount, tx.currency)}\n      </div>\n    </button>\n  );\n};\n\nexport default TransactionRow; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/transactions/components/TransactionStatus.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/transactions/components/TransactionStatus.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from 'react';\n\ninterface TransactionStatusProps {\n  status: 'completed' | 'pending' | 'failed';\n}\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case 'completed': return 'bg-green-400';\n    case 'pending': return 'bg-orange-400';\n    case 'failed': return 'bg-red-400';\n    default: return 'bg-white/50';\n  }\n};\n\nconst TransactionStatus = ({ status }: TransactionStatusProps) => {\n  return (\n    <div className=\"transaction-status\">\n      <div \n        className={`w-3 h-3 rounded-full ${getStatusColor(status)}`}\n        aria-label={`Status: ${status}`}\n      />\n    </div>\n  );\n};\n\nexport default TransactionStatus;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/transactions/components/UnifiedTransactionList.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/transactions/components/UnifiedTransactionList.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback } from 'react';\nimport { \n  Search, \n  Filter, \n  ChevronDown, \n  TrendingUp, \n  TrendingDown, \n  Minus,\n  Calendar,\n  Download,\n  Eye,\n  EyeOff\n} from 'lucide-react';\nimport { UniversalCard } from '../ui/UniversalCard';\nimport { UniversalScoreCircle } from './UniversalScoreCircle';\nimport { cn } from '@/shared/lib/utils';\nimport { colors } from '@/theme/colors';\n\n// Unified Transaction List that consolidates:\n// - TransactionList.tsx\n// - VueniUnifiedTransactionList.tsx\n// - OptimizedTransactionList.tsx\n// - EnterpriseTransactionView.tsx\n// - TransactionMain.tsx\n// - TransactionWithScores.tsx\n\nexport interface Transaction {\n  id: string;\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n  scores?: {\n    health: number;\n    eco: number;\n    financial: number;\n  };\n  shipping?: {\n    trackingNumber: string;\n    provider: string;\n    status: string;\n  };\n}\n\nexport type TransactionVariant = 'default' | 'clean' | 'enterprise' | 'apple' | 'modern' | 'compact';\nexport type SortField = 'date' | 'amount' | 'merchant' | 'category';\nexport type SortDirection = 'asc' | 'desc';\n\ninterface TransactionFeatures {\n  searchable?: boolean;\n  filterable?: boolean;\n  sortable?: boolean;\n  groupByDate?: boolean;\n  showCategories?: boolean;\n  showScores?: boolean;\n  showStatus?: boolean;\n  exportable?: boolean;\n  compactMode?: boolean;\n}\n\ninterface UnifiedTransactionListProps {\n  transactions: Transaction[];\n  variant?: TransactionVariant;\n  currency?: string;\n  features?: TransactionFeatures;\n  onTransactionClick?: (transaction: Transaction) => void;\n  onCategoryFilter?: (category: string) => void;\n  onExport?: () => void;\n  className?: string;\n  maxHeight?: string;\n}\n\nconst defaultFeatures: TransactionFeatures = {\n  searchable: true,\n  filterable: true,\n  sortable: true,\n  groupByDate: true,\n  showCategories: true,\n  showScores: true,\n  showStatus: true,\n  exportable: false,\n  compactMode: false,\n};\n\nexport const UnifiedTransactionList = React.memo<UnifiedTransactionListProps>(({\n  transactions,\n  variant = 'default',\n  currency = 'USD',\n  features = defaultFeatures,\n  onTransactionClick,\n  onCategoryFilter,\n  onExport,\n  className = '',\n  maxHeight = '32rem'\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [sortField, setSortField] = useState<SortField>('date');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const mergedFeatures = { ...defaultFeatures, ...features };\n\n  // Memoized filtered and sorted transactions\n  const processedTransactions = useMemo(() => {\n    let filtered = transactions;\n\n    // Search filter\n    if (mergedFeatures.searchable && searchTerm) {\n      filtered = filtered.filter(t => \n        t.merchant.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        t.category.name.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    // Category filter  \n    if (mergedFeatures.filterable && selectedCategory !== 'all') {\n      filtered = filtered.filter(t => t.category.name === selectedCategory);\n    }\n\n    // Sort\n    if (mergedFeatures.sortable) {\n      filtered.sort((a, b) => {\n        let comparison = 0;\n        \n        switch (sortField) {\n          case 'date':\n            comparison = new Date(a.date).getTime() - new Date(b.date).getTime();\n            break;\n          case 'amount':\n            comparison = Math.abs(a.amount) - Math.abs(b.amount);\n            break;\n          case 'merchant':\n            comparison = a.merchant.localeCompare(b.merchant);\n            break;\n          case 'category':\n            comparison = a.category.name.localeCompare(b.category.name);\n            break;\n        }\n        \n        return sortDirection === 'asc' ? comparison : -comparison;\n      });\n    }\n\n    return filtered;\n  }, [transactions, searchTerm, selectedCategory, sortField, sortDirection, mergedFeatures]);\n\n  // Memoized grouped transactions for date grouping\n  const groupedTransactions = useMemo(() => {\n    if (!mergedFeatures.groupByDate) return { ['']: processedTransactions };\n\n    return processedTransactions.reduce((groups, transaction) => {\n      const date = new Date(transaction.date).toDateString();\n      if (!groups[date]) {\n        groups[date] = [];\n      }\n      groups[date].push(transaction);\n      return groups;\n    }, {} as Record<string, Transaction[]>);\n  }, [processedTransactions, mergedFeatures.groupByDate]);\n\n  // Memoized categories for filter dropdown\n  const categories = useMemo(() => {\n    const uniqueCategories = Array.from(\n      new Set(transactions.map(t => t.category.name))\n    );\n    return uniqueCategories;\n  }, [transactions]);\n\n  // Optimized event handlers\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.target.value);\n  }, []);\n\n  const handleCategoryChange = useCallback((category: string) => {\n    setSelectedCategory(category);\n    onCategoryFilter?.(category);\n  }, [onCategoryFilter]);\n\n  const handleTransactionClick = useCallback((transaction: Transaction) => {\n    onTransactionClick?.(transaction);\n  }, [onTransactionClick]);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n  }, [sortField]);\n\n  // Variant-specific styles\n  const getVariantStyles = () => {\n    switch (variant) {\n      case 'clean':\n        return {\n          container: 'bg-transparent border-0',\n          item: 'hover:bg-white/5 border-b border-white/5 last:border-b-0',\n          spacing: 'py-3 px-4'\n        };\n      case 'enterprise':\n        return {\n          container: 'bg-slate-900/50 border border-slate-700',\n          item: 'hover:bg-slate-800/50 border-b border-slate-700 last:border-b-0',\n          spacing: 'py-4 px-6'\n        };\n      case 'apple':\n        return {\n          container: 'bg-white/5 backdrop-blur-md border border-white/10',\n          item: 'hover:bg-white/8 border-b border-white/10 last:border-b-0',\n          spacing: 'py-4 px-5'\n        };\n      case 'modern':\n        return {\n          container: 'bg-gradient-to-b from-white/10 to-white/5 border border-white/20',\n          item: 'hover:bg-white/10 border-b border-white/10 last:border-b-0',\n          spacing: 'py-4 px-5'\n        };\n      case 'compact':\n        return {\n          container: 'bg-white/5 border border-white/10',\n          item: 'hover:bg-white/8 border-b border-white/5 last:border-b-0',\n          spacing: 'py-2 px-3'\n        };\n      default:\n        return {\n          container: 'bg-white/5 border border-white/20',\n          item: 'hover:bg-white/8 border-b border-white/10 last:border-b-0',\n          spacing: 'py-3 px-4'\n        };\n    }\n  };\n\n  const variantStyles = getVariantStyles();\n\n  const formatDate = (date: string) => {\n    const dateObj = new Date(date);\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    if (dateObj.toDateString() === today.toDateString()) {\n      return 'Today';\n    } else if (dateObj.toDateString() === yesterday.toDateString()) {\n      return 'Yesterday';\n    } else {\n      return dateObj.toLocaleDateString('en-US', {\n        weekday: 'short',\n        month: 'short',\n        day: 'numeric'\n      });\n    }\n  };\n\n  return (\n    <UniversalCard \n      variant=\"glass\" \n      className={cn('overflow-hidden', className, variantStyles.container)}\n    >\n      {/* Header with Search and Filters */}\n      <div className=\"p-4 border-b border-white/10\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className={cn(\n            'font-semibold text-white',\n            mergedFeatures.compactMode ? 'text-base' : 'text-lg'\n          )}>\n            Transactions\n          </h3>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"text-sm text-white/60\">\n              {processedTransactions.length} of {transactions.length}\n            </div>\n            \n            {mergedFeatures.exportable && onExport && (\n              <button\n                onClick={onExport}\n                className=\"p-2 rounded-lg bg-white/10 hover:bg-white/20 transition-colors\"\n              >\n                <Download className=\"w-4 h-4 text-white/70\" />\n              </button>\n            )}\n            \n            <button\n              onClick={() => setIsCollapsed(!isCollapsed)}\n              className=\"p-2 rounded-lg bg-white/10 hover:bg-white/20 transition-colors\"\n            >\n              {isCollapsed ? <Eye className=\"w-4 h-4 text-white/70\" /> : <EyeOff className=\"w-4 h-4 text-white/70\" />}\n            </button>\n          </div>\n        </div>\n\n        {!isCollapsed && (\n          <>\n            {/* Search and Filter Row */}\n            <div className=\"flex gap-3 mb-3\">\n              {/* Search */}\n              {mergedFeatures.searchable && (\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white/60\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search transactions...\"\n                    value={searchTerm}\n                    onChange={handleSearchChange}\n                    className=\"w-full bg-white/10 border border-white/20 rounded-lg py-2 pl-10 pr-4 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n                  />\n                </div>\n              )}\n\n              {/* Category Filter */}\n              {mergedFeatures.filterable && (\n                <div className=\"relative\">\n                  <select\n                    value={selectedCategory}\n                    onChange={(e) => handleCategoryChange(e.target.value)}\n                    className=\"bg-white/10 border border-white/20 rounded-lg py-2 pl-3 pr-8 text-white focus:outline-none focus:ring-2 focus:ring-blue-500/50 appearance-none\"\n                  >\n                    <option value=\"all\">All Categories</option>\n                    {categories.map(category => (\n                      <option key={category} value={category}>\n                        {category}\n                      </option>\n                    ))}\n                  </select>\n                  <ChevronDown className=\"absolute right-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white/60 pointer-events-none\" />\n                </div>\n              )}\n            </div>\n\n            {/* Sort Options */}\n            {mergedFeatures.sortable && (\n              <div className=\"flex gap-2\">\n                {(['date', 'amount', 'merchant', 'category'] as const).map(field => (\n                  <button\n                    key={field}\n                    onClick={() => handleSort(field)}\n                    className={cn(\n                      'px-3 py-1 rounded-lg text-xs font-medium transition-colors',\n                      sortField === field\n                        ? 'bg-blue-500/20 text-blue-400'\n                        : 'bg-white/10 text-white/60 hover:text-white/80'\n                    )}\n                  >\n                    {field.charAt(0).toUpperCase() + field.slice(1)}\n                    {sortField === field && (\n                      sortDirection === 'asc' ? \n                        <TrendingUp className=\"inline ml-1 w-3 h-3\" /> :\n                        <TrendingDown className=\"inline ml-1 w-3 h-3\" />\n                    )}\n                  </button>\n                ))}\n              </div>\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Transaction List */}\n      {!isCollapsed && (\n        <div \n          className=\"overflow-y-auto\"\n          style={{ maxHeight }}\n        >\n          {Object.entries(groupedTransactions).map(([date, groupTransactions]) => (\n            <div key={date}>\n              {/* Date Header (if grouping enabled) */}\n              {mergedFeatures.groupByDate && date && (\n                <div className=\"sticky top-0 bg-white/5 backdrop-blur-md px-4 py-2 border-b border-white/10\">\n                  <div className=\"text-sm font-medium text-white/80\">\n                    {formatDate(date)}\n                  </div>\n                </div>\n              )}\n\n              {/* Transactions in Group */}\n              {groupTransactions.map((transaction) => (\n                <TransactionItem\n                  key={transaction.id}\n                  transaction={transaction}\n                  currency={currency}\n                  features={mergedFeatures}\n                  styles={variantStyles}\n                  onClick={() => handleTransactionClick(transaction)}\n                />\n              ))}\n            </div>\n          ))}\n\n          {/* Empty State */}\n          {processedTransactions.length === 0 && (\n            <div className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-white/5 flex items-center justify-center\">\n                <Calendar className=\"w-8 h-8 text-white/40\" />\n              </div>\n              <div className=\"text-white/60 mb-2\">No transactions found</div>\n              <div className=\"text-sm text-white/40\">\n                {searchTerm || selectedCategory !== 'all' \n                  ? 'Try adjusting your search or filters'\n                  : 'Your transactions will appear here'\n                }\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </UniversalCard>\n  );\n});\n\nUnifiedTransactionList.displayName = 'UnifiedTransactionList';\n\n// Memoized Transaction Item Component\nconst TransactionItem = React.memo<{\n  transaction: Transaction;\n  currency: string;\n  features: TransactionFeatures;\n  styles: ReturnType<typeof getVariantStyles>;\n  onClick: () => void;\n}>(({ transaction, currency, features, styles, onClick }) => {\n  const formatAmount = (amount: number) => {\n    const formatted = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency,\n      minimumFractionDigits: 2\n    }).format(Math.abs(amount));\n    return amount < 0 ? `-${formatted}` : `+${formatted}`;\n  };\n\n  const getAmountColor = (amount: number) => {\n    if (amount > 0) return colors.financial.positive;\n    if (amount < 0) return colors.financial.negative;\n    return colors.financial.neutral;\n  };\n\n  const getStatusIndicatorColor = (status: string) => {\n    switch (status) {\n      case 'completed': return colors.status.success;\n      case 'pending': return colors.status.warning;\n      case 'failed': return colors.status.error;\n      default: return colors.status.neutral;\n    }\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-between cursor-pointer transition-colors',\n        styles.item,\n        styles.spacing\n      )}\n      onClick={onClick}\n      role=\"button\"\n      tabIndex={0}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          onClick();\n        }\n      }}\n    >\n      {/* Left Side */}\n      <div className=\"flex items-center space-x-3\">\n        {/* Status Indicator */}\n        {features.showStatus && (\n          <div \n            className=\"w-2 h-2 rounded-full flex-shrink-0\"\n            style={{ backgroundColor: getStatusIndicatorColor(transaction.status) }}\n          />\n        )}\n\n        {/* Category Icon */}\n        <div \n          className={cn(\n            \"rounded-lg flex items-center justify-center text-white font-semibold text-sm\",\n            features.compactMode ? \"w-8 h-8 text-xs\" : \"w-10 h-10\"\n          )}\n          style={{ backgroundColor: transaction.category.color + '30' }}\n        >\n          {transaction.merchant.charAt(0).toUpperCase()}\n        </div>\n\n        {/* Transaction Details */}\n        <div className=\"space-y-1\">\n          <div className={cn(\n            \"font-medium text-white\",\n            features.compactMode ? \"text-sm\" : \"text-base\"\n          )}>\n            {transaction.merchant}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {features.showCategories && (\n              <span className=\"text-xs text-white/60\">{transaction.category.name}</span>\n            )}\n            <span className=\"text-xs text-white/60\">{formatDate(transaction.date)}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Right Side */}\n      <div className=\"text-right space-y-1\">\n        {/* Amount */}\n        <div className={cn(\n          'font-semibold',\n          features.compactMode ? 'text-sm' : 'text-base'\n        )} style={{ color: getAmountColor(transaction.amount) }}>\n          {formatAmount(transaction.amount)}\n        </div>\n\n        {/* Scores */}\n        {features.showScores && transaction.scores && (\n          <div className=\"flex space-x-1\">\n            <UniversalScoreCircle \n              score={transaction.scores.health} \n              type=\"health\" \n              size={features.compactMode ? 'sm' : 'md'}\n            />\n            <UniversalScoreCircle \n              score={transaction.scores.eco} \n              type=\"eco\" \n              size={features.compactMode ? 'sm' : 'md'}\n            />\n            <UniversalScoreCircle \n              score={transaction.scores.financial} \n              type=\"financial\" \n              size={features.compactMode ? 'sm' : 'md'}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nTransactionItem.displayName = 'TransactionItem';\n\nexport default UnifiedTransactionList;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/widgets/api/widgetService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/widgets/api/widgetService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { HomeWidget } from \"../types\";\n\nexport interface WidgetService {\n  listWidgets: () => Promise<HomeWidget[]>;\n  createWidget: (type: \"balance\" | \"safe_to_spend\", config?: Record<string, unknown>) => Promise<HomeWidget>;\n  deleteWidget: (id: string) => Promise<void>;\n}\n\nclass MockWidgetService implements WidgetService {\n  private widgets: HomeWidget[] = [\n    {\n      id: \"widget-1\",\n      type: \"balance\",\n      position: 1,\n      config: { accountId: \"acc1\" },\n    },\n    {\n      id: \"widget-2\", \n      type: \"safe_to_spend\",\n      position: 2,\n      config: {},\n    },\n  ];\n\n  async listWidgets(): Promise<HomeWidget[]> {\n    return this.widgets;\n  }\n\n  async createWidget(type: \"balance\" | \"safe_to_spend\", config = {}): Promise<HomeWidget> {\n    const widget: HomeWidget = {\n      id: \"widget-\" + Date.now(),\n      type,\n      position: this.widgets.length + 1,\n      config,\n    };\n    this.widgets.push(widget);\n    return widget;\n  }\n\n  async deleteWidget(id: string): Promise<void> {\n    this.widgets = this.widgets.filter((w) => w.id !== id);\n  }\n}\n\nexport const widgetService: WidgetService = new MockWidgetService(); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/widgets/components/AddWidgetButtons.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/widgets/components/AddWidgetButtons.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Button } from \"@/shared/ui/button\";\nimport { useWidgetsStore } from \"../store\";\nimport { Plus, DollarSign, Banknote } from \"lucide-react\";\n\nexport const AddWidgetButtons: React.FC = () => {\n  const create = useWidgetsStore((s) => s.create);\n  const loading = useWidgetsStore((s) => s.loading);\n\n  return (\n    <div className=\"flex gap-2\">\n      <Button\n        onClick={() => create(\"balance\")}\n        disabled={loading}\n        variant=\"outline\"\n        size=\"sm\"\n      >\n        <Plus className=\"mr-2 size-4\" />\n        <Banknote className=\"mr-1 size-4\" />\n        Balance Widget\n      </Button>\n      <Button\n        onClick={() => create(\"safe_to_spend\")}\n        disabled={loading}\n        variant=\"outline\"\n        size=\"sm\"\n      >\n        <Plus className=\"mr-2 size-4\" />\n        <DollarSign className=\"mr-1 size-4\" />\n        Safe-to-Spend Widget\n      </Button>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/widgets/components/WidgetPreview.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/widgets/components/WidgetPreview.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { HomeWidget } from \"@/shared/types/shared\";\nimport { formatCurrency } from \"@/shared/utils/formatters\";\nimport { DollarSign, Banknote, X } from \"lucide-react\";\nimport { Button } from \"@/shared/ui/button\";\nimport { useWidgetsStore } from \"../store\";\n\ninterface WidgetPreviewProps {\n  widget: HomeWidget;\n}\n\nexport const WidgetPreview: React.FC<WidgetPreviewProps> = ({ widget }) => {\n  const deleteWidget = useWidgetsStore((s) => s.delete);\n\n  const renderContent = () => {\n    switch (widget.type) {\n      case \"balance\":\n        return (\n          <div className=\"flex items-center gap-2\">\n            <Banknote className=\"text-blue-400\" />\n            <div>\n              <p className=\"text-sm font-medium\">Account Balance</p>\n              <p className=\"text-lg font-bold\">{formatCurrency(5432.10)}</p>\n            </div>\n          </div>\n        );\n      case \"safe_to_spend\":\n        return (\n          <div className=\"flex items-center gap-2\">\n            <DollarSign className=\"text-green-400\" />\n            <div>\n              <p className=\"text-sm font-medium\">Safe to Spend</p>\n              <p className=\"text-lg font-bold\">{formatCurrency(687.50)}</p>\n            </div>\n          </div>\n        );\n      default:\n        return <p>Unknown widget</p>;\n    }\n  };\n\n  return (\n    <div className=\"relative bg-white/[0.02] border border-white/[0.08] rounded-xl p-4 min-h-[80px] flex items-center\">\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        className=\"absolute top-2 right-2 size-6\"\n        onClick={() => deleteWidget(widget.id)}\n      >\n        <X className=\"size-3\" />\n      </Button>\n      {renderContent()}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/widgets/components/WidgetsPanel.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/widgets/components/WidgetsPanel.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\nimport { UniversalCard } from \"@/shared/ui/UniversalCard\";\nimport { useWidgetsStore } from \"../store\";\nimport { WidgetPreview } from \"./WidgetPreview\";\nimport { AddWidgetButtons } from \"./AddWidgetButtons\";\nimport { Grid } from \"lucide-react\";\n\nexport const WidgetsPanel: React.FC = () => {\n  const { widgets, loading, refresh } = useWidgetsStore((s) => ({\n    widgets: s.widgets,\n    loading: s.loading,\n    refresh: s.refresh,\n  }));\n\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n\n  return (\n    <UniversalCard\n      variant=\"glass\"\n      size=\"md\"\n      title=\"Home Screen Widgets\"\n      icon={Grid}\n      iconColor=\"#f59e0b\"\n    >\n      <div className=\"space-y-4\">\n        <AddWidgetButtons />\n        {loading && widgets.length === 0 ? (\n          <p className=\"text-white/60\">Loading widgets...</p>\n        ) : widgets.length === 0 ? (\n          <p className=\"text-white/60\">No widgets configured yet.</p>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {widgets.map((widget) => (\n              <WidgetPreview key={widget.id} widget={widget} />\n            ))}\n          </div>\n        )}\n      </div>\n    </UniversalCard>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/widgets/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/widgets/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export { useWidgetsStore } from \"./store\";\nexport { WidgetsPanel } from \"./components/WidgetsPanel\"; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/features/widgets/store.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/features/widgets/store.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from \"zustand\";\nimport { widgetService } from \"@/features/widgets/api/widgetService\";\nimport { HomeWidget } from \"@/shared/types/shared\";\n\ninterface WidgetsState {\n  widgets: HomeWidget[];\n  loading: boolean;\n  error?: string;\n  refresh: () => Promise<void>;\n  create: (type: \"balance\" | \"safe_to_spend\") => Promise<void>;\n  delete: (id: string) => Promise<void>;\n}\n\nexport const useWidgetsStore = create<WidgetsState>((set, get) => ({\n  widgets: [],\n  loading: false,\n  error: undefined,\n  refresh: async () => {\n    set({ loading: true, error: undefined });\n    try {\n      const widgets = await widgetService.listWidgets();\n      set({ widgets, loading: false });\n    } catch (err: any) {\n      set({ error: err.message ?? \"Unknown\", loading: false });\n    }\n  },\n  create: async (type) => {\n    await widgetService.createWidget(type);\n    await get().refresh();\n  },\n  delete: async (id) => {\n    await widgetService.deleteWidget(id);\n    await get().refresh();\n  },\n})); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/main.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/main.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Process polyfill for browser compatibility\ninterface ProcessPolyfill {\n  env: Record<string, string | undefined>;\n  browser: boolean;\n  version: string;\n  platform: 'browser';\n  nextTick: (fn: (...args: unknown[]) => void) => void;\n}\n\ndeclare global {\n  interface Window {\n    process?: ProcessPolyfill;\n    global?: typeof globalThis;\n  }\n}\n\nif (typeof window !== \"undefined\" && typeof window.process === \"undefined\") {\n  window.process = {\n    env: {},\n    browser: true,\n    version: \"\",\n    platform: \"browser\" as string,\n    nextTick: (fn: (...args: unknown[]) => void) => setTimeout(fn, 0)\n  };\n}\nif (typeof window !== \"undefined\" && typeof window.global === \"undefined\") {\n  window.global = window;\n}\n\nimport { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\nimport './app/styles/scroll-fix.css' // WHY: Critical fix for double scroll issue - must load after index.css\nimport { SecurityEnvValidator } from './shared/utils/envValidation'\nimport './telemetry/vitals.ts' // Initialize performance monitoring\n\n// Validate security environment before app startup\ntry {\n  SecurityEnvValidator.validateSecurityEnvironment();\n  SecurityEnvValidator.logSecurityStatus();\n} catch (error) {\n  const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n  console.error('CRITICAL SECURITY ERROR:', errorMessage);\n  // In development, show a helpful error message\n  if (import.meta.env.DEV) {\n    document.body.innerHTML = `\n      <div style=\"background: #1a1a1a; color: #ff6b6b; padding: 2rem; font-family: monospace; line-height: 1.6;\">\n        <h1>🔒 Security Configuration Required</h1>\n        <pre style=\"background: #2a2a2a; padding: 1rem; border-radius: 8px; overflow-x: auto;\">\n${errorMessage}\n        </pre>\n        <p>The application cannot start until these security requirements are met.</p>\n      </div>\n    `;\n    throw error;\n  }\n  // In production, fail gracefully but securely\n  throw new Error('Security configuration error');\n}\n\n// Add dark mode class to document by default\ndocument.documentElement.classList.add('dark');\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <App />\n);","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/mocks/financialPlanningMocks.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/mocks/financialPlanningMocks.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  FinancialGoal, \n  RetirementPlan,\n  DebtPayoffPlan,\n  LifeEventPlanning,\n  InvestmentPlan,\n  CashFlowProjection,\n  NetWorthProjection\n} from '@/shared/types/financialPlanning';\n\n/**\n * Simulate network latency for realistic user experience\n */\nexport const simulateLatency = (delay: number = 400): Promise<void> => {\n  return new Promise(resolve => {\n    setTimeout(resolve, Math.random() * delay + delay * 0.5);\n  });\n};\n\n/**\n * Generate realistic dates relative to current time\n */\nconst getRelativeDate = (months: number): Date => {\n  const date = new Date();\n  date.setMonth(date.getMonth() + months);\n  return date;\n};\n\n/**\n * Enhanced Retirement Planning Mock Data\n */\nexport const mockRetirementPlans: RetirementPlan[] = [\n  {\n    id: 'retirement_plan_1',\n    familyId: 'demo_family',\n    currentAge: 35,\n    retirementAge: 65,\n    yearsToRetirement: 30,\n    currentIncome: 95000,\n    currentSavings: 125000,\n    monthlyContribution: 1200,\n    riskProfile: 'moderate',\n    projections: {\n      totalRetirementValue: 1850000,\n      targetRetirementSavings: 2280000,\n      shortfall: 430000,\n      monthlyIncomeAtRetirement: 6167,\n      expectedReturn: 0.07\n    },\n    recommendations: [\n      {\n        type: 'increase_contributions',\n        title: 'Increase 401(k) Contributions',\n        description: 'Consider increasing your monthly contribution by $300 to meet your retirement goal.',\n        impact: 'high',\n        priority: 1,\n        estimatedBenefit: 430000,\n        actionItems: [\n          'Increase 401(k) contribution to employer match limit',\n          'Consider Roth IRA for tax diversification'\n        ],\n        deadline: getRelativeDate(1)\n      }\n    ],\n    milestones: [\n      {\n        id: 'milestone_40',\n        title: 'Age 40 Checkpoint',\n        description: 'Target: 3x annual income saved',\n        targetAmount: 285000,\n        targetDate: getRelativeDate(60),\n        category: 'retirement',\n        completed: false\n      }\n    ],\n    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n    updatedAt: new Date()\n  }\n];\n\n/**\n * Comprehensive Debt Payoff Mock Data\n */\nexport const mockDebtPlans: DebtPayoffPlan[] = [\n  {\n    id: 'debt_plan_1',\n    familyId: 'demo_family',\n    strategy: 'avalanche',\n    debts: [\n      {\n        name: 'Credit Card - Chase Sapphire',\n        balance: 8500,\n        interestRate: 0.2299,\n        minimumPayment: 255\n      },\n      {\n        name: 'Personal Loan',\n        balance: 12000,\n        interestRate: 0.0899,\n        minimumPayment: 380\n      },\n      {\n        name: 'Student Loan',\n        balance: 28000,\n        interestRate: 0.0649,\n        minimumPayment: 295\n      }\n    ],\n    extraPayment: 500,\n    projections: {\n      totalDebt: 48500,\n      totalInterest: 8950,\n      monthsToPayoff: 36,\n      payoffDate: getRelativeDate(36),\n      monthlySavingsAfterPayoff: 1430\n    },\n    payoffSchedule: [\n      {\n        name: 'Credit Card - Chase Sapphire',\n        balance: 8500,\n        interestRate: 0.2299,\n        minimumPayment: 255,\n        monthsToPayoff: 12,\n        totalInterest: 1240,\n        totalPaid: 9740\n      },\n      {\n        name: 'Personal Loan',\n        balance: 12000,\n        interestRate: 0.0899,\n        minimumPayment: 380,\n        monthsToPayoff: 24,\n        totalInterest: 1850,\n        totalPaid: 13850\n      },\n      {\n        name: 'Student Loan',\n        balance: 28000,\n        interestRate: 0.0649,\n        minimumPayment: 295,\n        monthsToPayoff: 36,\n        totalInterest: 5860,\n        totalPaid: 33860\n      }\n    ],\n    recommendations: [\n      {\n        type: 'debt_payoff',\n        title: 'Focus Extra Payments on Highest Interest',\n        description: 'Continue with avalanche method - pay minimums on all debts, extra toward highest interest.',\n        impact: 'high',\n        priority: 1,\n        estimatedBenefit: 4200,\n        actionItems: [\n          'Put all extra payments toward Chase Sapphire',\n          'Consider balance transfer to 0% APR card'\n        ]\n      }\n    ],\n    createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000),\n    updatedAt: new Date()\n  }\n];\n\n/**\n * Life Event Planning Mock Data\n */\nexport const mockLifeEventPlans: LifeEventPlanning[] = [\n  {\n    eventType: 'baby',\n    plannedDate: getRelativeDate(18),\n    estimatedCost: 25000,\n    currentSavings: 8500,\n    monthlyContribution: 750,\n    recommendations: [\n      {\n        type: 'emergency_fund',\n        title: 'Increase Emergency Fund',\n        description: 'With a baby coming, increase emergency fund to 8-9 months of expenses.',\n        impact: 'high',\n        priority: 1,\n        estimatedBenefit: 15000,\n        actionItems: [\n          'Open dedicated baby fund savings account',\n          'Research health insurance changes'\n        ]\n      }\n    ]\n  },\n  {\n    eventType: 'house_purchase',\n    plannedDate: getRelativeDate(36),\n    estimatedCost: 100000,\n    currentSavings: 32000,\n    monthlyContribution: 2000,\n    recommendations: [\n      {\n        type: 'investment',\n        title: 'Conservative Investment Strategy',\n        description: 'For goals within 3 years, keep funds in high-yield savings.',\n        impact: 'medium',\n        priority: 1,\n        estimatedBenefit: 5000,\n        actionItems: [\n          'Move house fund to high-yield savings',\n          'Research first-time buyer programs'\n        ]\n      }\n    ]\n  }\n];\n\n/**\n * Mock API Response Generator\n */\nexport class MockFinancialPlanningAPI {\n  static async getRetirementPlan(familyId: string): Promise<RetirementPlan> {\n    await simulateLatency(600);\n    return mockRetirementPlans[0];\n  }\n  \n  static async getDebtPayoffPlan(familyId: string): Promise<DebtPayoffPlan> {\n    await simulateLatency(500);\n    return mockDebtPlans[0];\n  }\n  \n  static async getLifeEventPlans(familyId: string): Promise<LifeEventPlanning[]> {\n    await simulateLatency(400);\n    return mockLifeEventPlans;\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/pages/CalculatorsHub.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/pages/CalculatorsHub.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// A no-op comment to try and un-stick the model.\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UnifiedCard } from '@/shared/ui/UnifiedCard';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/shared/ui/dialog';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/shared/ui/dropdown-menu';\nimport {\n    Calculator,\n    Landmark,\n    PiggyBank,\n    Repeat,\n    TrendingUp,\n    ShieldCheck,\n    Briefcase,\n    Home,\n    CircleDollarSign,\n    CandlestickChart,\n    Scale,\n    Heart\n} from 'lucide-react';\nimport BackHeader from '@/shared/ui/BackHeader';\n\n// Import calculator components\nimport FinancialFreedomCalculator from '@/features/calculators/components/FinancialFreedomCalculator';\nimport ROICalculator from '@/features/calculators/components/ROICalculator';\nimport LoanCalculator from '@/features/calculators/components/LoanCalculator';\nimport InflationCalculator from '@/features/calculators/components/InflationCalculator';\nimport CompoundInterestCalculator from '@/features/calculators/components/CompoundInterestCalculator';\nimport Retirement401kCalculator from '@/features/calculators/components/Retirement401kCalculator';\nimport ThreeFundPortfolioCalculator from '@/features/calculators/components/ThreeFundPortfolioCalculator';\nimport HomeAffordabilityCalculator from '@/features/calculators/components/HomeAffordabilityCalculator';\nimport MortgagePayoffCalculator from '@/features/calculators/components/MortgagePayoffCalculator';\nimport StockBacktestCalculator from '@/features/calculators/components/StockBacktestCalculator';\nimport ExchangeRateCalculator from '@/features/calculators/components/ExchangeRateCalculator';\n\n\nconst calculatorList = [\n    { id: 'financial-freedom', name: 'Financial Freedom', icon: Landmark, component: FinancialFreedomCalculator },\n    { id: 'roi-calculator', name: 'ROI Calculator', icon: TrendingUp, component: ROICalculator },\n    { id: 'loan-calculator', name: 'Loan Calculator', icon: PiggyBank, component: LoanCalculator },\n    { id: 'inflation-calculator', name: 'Inflation Calculator', icon: Repeat, component: InflationCalculator },\n    { id: 'compound-interest', name: 'Compound Interest', icon: CircleDollarSign, component: CompoundInterestCalculator },\n    { id: '401k-retirement', name: '401k Retirement', icon: Briefcase, component: Retirement401kCalculator },\n    { id: 'three-fund-portfolio', name: 'Three-Fund Portfolio', icon: CandlestickChart, component: ThreeFundPortfolioCalculator },\n    { id: 'home-affordability', name: 'Home Affordability', icon: Home, component: HomeAffordabilityCalculator },\n    { id: 'mortgage-payoff', name: 'Mortgage Payoff', icon: ShieldCheck, component: MortgagePayoffCalculator },\n    { id: 'stock-backtest', name: 'Stock Backtest', icon: CandlestickChart, component: StockBacktestCalculator },\n    { id: 'exchange-rate-calculator', name: 'Exchange Rate Calculator', icon: Scale, component: ExchangeRateCalculator },\n];\n\nconst CalculatorsHub = () => {\n    const navigate = useNavigate();\n    const [selectedCalculator, setSelectedCalculator] = useState<typeof calculatorList[0] | null>(null);\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n    const openCalculator = (calculator) => {\n        setSelectedCalculator(calculator);\n    };\n\n    const closeCalculator = () => {\n        setSelectedCalculator(null);\n    };\n\n    const handleMenuSelect = (calculatorId) => {\n        const calculator = calculatorList.find(c => c.id === calculatorId);\n        if (calculator) {\n            openCalculator(calculator);\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen bg-black text-white\">\n            {/* Mobile-first responsive container with proper spacing */}\n            <div className=\"p-4 sm:p-6 md:p-8 lg:p-10 xl:p-12\">\n                <div className=\"max-w-none w-full mx-auto\">\n                    <BackHeader title=\"Calculators\" />\n                    \n                    {/* Responsive header with proper spacing */}\n                    <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-6 sm:mb-8\">\n                        <div>\n                            <h1 className=\"text-2xl sm:text-3xl md:text-4xl font-bold\">Calculators</h1>\n                            <p className=\"text-white/60 text-sm sm:text-base mt-1\">\n                                Financial tools and calculators\n                            </p>\n                        </div>\n                        \n                        {/* Responsive dropdown menu */}\n                        <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                                <button\n                                    onClick={() => setIsMenuOpen(!isMenuOpen)}\n                                    className=\"w-full sm:w-auto px-4 py-3 sm:py-2 bg-blue-600 rounded-lg hover:bg-blue-700 \n                                             transition-all duration-200 text-sm sm:text-base font-medium\n                                             focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n                                >\n                                    Select Calculator\n                                </button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent className=\"w-56\">\n                                {calculatorList.map(calculator => (\n                                    <DropdownMenuItem key={calculator.id} onSelect={() => handleMenuSelect(calculator.id)}>\n                                        {calculator.name}\n                                    </DropdownMenuItem>\n                                ))}\n                            </DropdownMenuContent>\n                        </DropdownMenu>\n                    </div>\n                    \n                    {/* Mobile-first responsive grid with progressive enhancement */}\n                    <div className=\"grid grid-cols-1 \n                                    xs:grid-cols-2 \n                                    sm:grid-cols-2 \n                                    md:grid-cols-3 \n                                    lg:grid-cols-4 \n                                    xl:grid-cols-5\n                                    2xl:grid-cols-6\n                                    gap-3 sm:gap-4 md:gap-5 lg:gap-6\"\n                         data-testid=\"calculators-grid\">\n                        {calculatorList.map((calculator) => (\n                            <UnifiedCard\n                                key={calculator.id}\n                                onClick={() => openCalculator(calculator)}\n                                className=\"cursor-pointer group hover:scale-[1.02] transition-all duration-200\n                                          min-h-[120px] sm:min-h-[140px] md:min-h-[160px]\n                                          flex flex-col items-center justify-center\n                                          border border-white/[0.08] hover:border-white/[0.16]\"\n                                data-testid=\"calculator-card\"\n                            >\n                                <div className=\"p-3 sm:p-4 md:p-5 text-center w-full\">\n                                    <calculator.icon className=\"w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8 \n                                                               mb-2 sm:mb-3 text-blue-400 mx-auto\n                                                               group-hover:text-blue-300 transition-colors\" />\n                                    <h2 className=\"text-sm sm:text-base md:text-lg font-semibold\n                                                   leading-tight text-white/90 group-hover:text-white\n                                                   transition-colors\">\n                                        {calculator.name}\n                                    </h2>\n                                </div>\n                            </UnifiedCard>\n                        ))}\n                    </div>\n                </div>\n            </div>\n\n            {/* Responsive modal dialog */}\n            {selectedCalculator && (\n                <Dialog open={true} onOpenChange={closeCalculator}>\n                    <DialogContent className=\"max-w-[95vw] sm:max-w-4xl lg:max-w-6xl xl:max-w-7xl\n                                            max-h-[90vh] overflow-y-auto\">\n                        <DialogHeader>\n                            <DialogTitle className=\"text-lg sm:text-xl md:text-2xl\">\n                                {selectedCalculator.name}\n                            </DialogTitle>\n                        </DialogHeader>\n                        <div className=\"mt-4\">\n                            <selectedCalculator.component />\n                        </div>\n                    </DialogContent>\n                </Dialog>\n            )}\n        </div>\n    );\n};\n\nexport default CalculatorsHub; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/pages/CalculatorsPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/pages/CalculatorsPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Suspense } from 'react';\nimport { useParams } from 'react-router-dom';\nimport CalculatorList from '@/features/calculators/components/CalculatorList';\nimport FinancialFreedomCalculator from '@/features/calculators/components/FinancialFreedomCalculator';\nimport ROICalculator from '@/features/calculators/components/ROICalculator';\nimport LoanCalculator from '@/features/calculators/components/LoanCalculator';\nimport InflationCalculator from '@/features/calculators/components/InflationCalculator';\nimport CompoundInterestCalculator from '@/features/calculators/components/CompoundInterestCalculator';\nimport Retirement401kCalculator from '@/features/calculators/components/Retirement401kCalculator';\nimport ThreeFundPortfolioCalculator from '@/features/calculators/components/ThreeFundPortfolioCalculator';\nimport HomeAffordabilityCalculator from '@/features/calculators/components/HomeAffordabilityCalculator';\nimport MortgagePayoffCalculator from '@/features/calculators/components/MortgagePayoffCalculator';\nimport StockBacktestCalculator from '@/features/calculators/components/StockBacktestCalculator';\nimport ExchangeRateCalculator from '@/features/calculators/components/ExchangeRateCalculator';\nimport BackHeader from '@/shared/ui/BackHeader';\n\nconst componentMap: Record<string, React.ReactNode> = {\n  'financial-freedom': <FinancialFreedomCalculator />,\n  roi: <ROICalculator />,\n  loan: <LoanCalculator />,\n  inflation: <InflationCalculator />,\n  'compound-interest': <CompoundInterestCalculator />,\n  '401k': <Retirement401kCalculator />,\n  'three-fund': <ThreeFundPortfolioCalculator />,\n  'home-affordability': <HomeAffordabilityCalculator />,\n  'mortgage-payoff': <MortgagePayoffCalculator />,\n  backtest: <StockBacktestCalculator />,\n  'exchange-rate': <ExchangeRateCalculator />\n};\n\nconst nameMap: Record<string, string> = {\n  'financial-freedom': 'Financial Freedom Calculator',\n  roi: 'ROI Calculator',\n  loan: 'Loan Calculator',\n  inflation: 'Inflation Calculator',\n  'compound-interest': 'Compound Interest Calculator',\n  '401k': '401k Retirement Calculator',\n  'three-fund': '3-Fund Portfolio Calculator',\n  'home-affordability': 'Home Affordability Calculator',\n  'mortgage-payoff': 'Early Mortgage Payoff Calculator',\n  backtest: 'Stock Backtest Calculator',\n  'exchange-rate': 'Exchange Rate Calculator'\n};\n\nconst CalculatorsPage = () => {\n  const { id } = useParams<{ id?: string }>();\n\n  if (!id) {\n    return (\n      <div className=\"w-full text-white\">\n        <CalculatorList />\n      </div>\n    );\n  }\n\n  const Component = componentMap[id];\n  return (\n    <div className=\"w-full text-white\">\n      <BackHeader title={nameMap[id] || 'Calculator'} />\n      <Suspense fallback={\n        <div className=\"w-full text-white flex items-center justify-center py-20\">\n          <div className=\"liquid-glass-fallback rounded-2xl p-8\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white\"></div>\n              <span className=\"text-white text-lg\">Loading calculator...</span>\n            </div>\n          </div>\n        </div>\n      }>\n        <div className=\"w-full px-4 py-6 max-w-6xl mx-auto\">\n          <div className=\"liquid-glass-fallback rounded-2xl p-6\">\n            {Component || <div className=\"text-white p-4 text-center\">Calculator not found.</div>}\n          </div>\n        </div>\n      </Suspense>\n    </div>\n  );\n};\n\nexport default CalculatorsPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/pages/ChartDemo.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/pages/ChartDemo.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Chart Demo Page - Test and demonstrate GraphBase component\n */\n\nimport React from 'react';\nimport GraphBaseDemo from '@/components/charts/GraphBase.demo';\n\nconst ChartDemoPage: React.FC = () => {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900\">\n      <GraphBaseDemo />\n    </div>\n  );\n};\n\nexport default ChartDemoPage;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/pages/CleanDashboard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/pages/CleanDashboard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport AppShell from '@/components/layout/AppShell';\nimport CleanAccountCard from '@/features/accounts/components/CleanAccountCard';\nimport CleanCreditScoreCard from '@/features/credit/components/CleanCreditScoreCard';\nimport { VueniUnifiedTransactionList } from '@/components/shared/VueniUnifiedTransactionList';\nimport SimpleGlassCard from '@/shared/ui/SimpleGlassCard';\nimport { vueniTheme } from '@/theme/unified';\nimport { \n  DollarSign, \n  TrendingUp, \n  CreditCard, \n  PiggyBank,\n  Eye,\n  EyeOff \n} from 'lucide-react';\nimport { OptimizedTransactionList } from '@/features/transactions/components/OptimizedTransactionList';\n\n// Mock data that matches your existing structure\nconst mockAccounts = [\n  {\n    id: 'acc_001',\n    accountType: 'Checking',\n    accountName: 'Main Account',\n    balance: 12450.00,\n    available: 11200.00,\n    change: { amount: 1523.50, percentage: 12.5, period: 'vs last month' },\n    isActive: true\n  },\n  {\n    id: 'acc_002',\n    accountType: 'Savings',\n    accountName: 'Emergency Fund',\n    balance: 25780.50,\n    available: 25780.50,\n    change: { amount: 780.25, percentage: 3.1, period: 'vs last month' }\n  },\n  {\n    id: 'acc_003',\n    accountType: 'Credit Card',\n    accountName: 'Rewards Card',\n    balance: -1245.30,\n    available: 8754.70,\n    change: { amount: -245.30, percentage: -2.1, period: 'vs last month' }\n  },\n  {\n    id: 'acc_004',\n    accountType: 'Investment',\n    accountName: 'Portfolio',\n    balance: 45600.25,\n    available: 45600.25,\n    change: { amount: 2340.80, percentage: 5.4, period: 'vs last month' }\n  }\n];\n\nconst mockTransactions = [\n  {\n    id: 'txn_001',\n    merchant: 'Whole Foods Market',\n    category: 'Groceries',\n    amount: -127.43,\n    date: '2025-06-16T10:30:00Z',\n    status: 'completed' as const,\n    scores: { health: 85, eco: 92, financial: 78 }\n  },\n  {\n    id: 'txn_002',\n    merchant: 'Apple Store',\n    category: 'Electronics',\n    amount: -899.00,\n    date: '2025-06-16T08:15:00Z',\n    status: 'completed' as const,\n    scores: { health: 65, eco: 45, financial: 60 }\n  },\n  {\n    id: 'txn_003',\n    merchant: 'Salary Deposit',\n    category: 'Income',\n    amount: 3250.00,\n    date: '2025-06-15T09:00:00Z',\n    status: 'completed' as const,\n    scores: { health: 100, eco: 85, financial: 95 }\n  },\n  {\n    id: 'txn_004',\n    merchant: 'Starbucks',\n    category: 'Coffee',\n    amount: -6.85,\n    date: '2025-06-15T07:45:00Z',\n    status: 'completed' as const,\n    scores: { health: 40, eco: 60, financial: 85 }\n  },\n  {\n    id: 'txn_005',\n    merchant: 'Gas Station',\n    category: 'Transportation',\n    amount: -45.20,\n    date: '2025-06-14T18:30:00Z',\n    status: 'pending' as const,\n    scores: { health: 70, eco: 30, financial: 80 }\n  }\n];\n\nconst OverviewCard = ({ \n  title, \n  value, \n  change, \n  icon: Icon, \n  color \n}: { \n  title: string; \n  value: string; \n  change: { amount: number; percentage: number };\n  icon: React.ComponentType<{ className?: string }>; \n  color: string;\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n\n  return (\n    <SimpleGlassCard className=\"p-6\">\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"p-2 rounded-xl bg-white/[0.06]\">\n            <Icon className=\"w-5 h-5\" style={{ color }} />\n          </div>\n          <div>\n            <h3 className=\"font-bold text-white text-sm tracking-wide\">***{title}***</h3>\n          </div>\n        </div>\n        \n        <button\n          onClick={() => setIsVisible(!isVisible)}\n                      className=\"p-2 rounded-xl bg-white/[0.06] hover:bg-white/[0.08] transition-colors\"\n        >\n          {isVisible ? (\n            <EyeOff className=\"w-4 h-4 text-white/70\" />\n          ) : (\n            <Eye className=\"w-4 h-4 text-white/70\" />\n          )}\n        </button>\n      </div>\n\n      <div className={`mb-3 transition-all duration-300 ${isVisible ? '' : 'blur-sm'}`}>\n        <div className=\"text-3xl font-black text-white mb-1 tracking-wide\">\n          {isVisible ? value : '••••••'}\n        </div>\n      </div>\n\n      <div className=\"flex items-center gap-2\">\n        <div \n          className=\"flex items-center gap-1\"\n          style={{ \n            color: change.amount >= 0 ? colors.status.success : colors.status.error \n          }}\n        >\n          <TrendingUp className={`w-4 h-4 ${change.amount < 0 ? 'rotate-180' : ''}`} />\n          <span className=\"text-sm font-medium\">\n            {change.percentage >= 0 ? '+' : ''}{change.percentage.toFixed(1)}%\n          </span>\n        </div>\n        <span className=\"text-white/50 text-sm\">vs last month</span>\n      </div>\n    </SimpleGlassCard>\n  );\n};\n\nconst CleanDashboard = () => {\n  const [activeTab, setActiveTab] = useState('dashboard');\n\n  // Calculate totals\n  const totalBalance = mockAccounts.reduce((sum, acc) => {\n    if (acc.accountType.toLowerCase() === 'credit card') {\n      return sum; // Don't include credit card debt in total assets\n    }\n    return sum + acc.balance;\n  }, 0);\n\n  const totalDebt = mockAccounts\n    .filter(acc => acc.accountType.toLowerCase() === 'credit card')\n    .reduce((sum, acc) => sum + Math.abs(acc.balance), 0);\n\n  const netWorth = totalBalance - totalDebt;\n  \n  const monthlyIncome = mockTransactions\n    .filter(t => t.amount > 0)\n    .reduce((sum, t) => sum + t.amount, 0);\n\n  const handleTransactionClick = (transaction: { id: string; amount: number; description: string; category: string }) => {\n          // Transaction clicked handler\n  };\n\n  const handleAccountClick = (account: { id: string; name: string; balance: number; type: string }) => {\n          // Account clicked handler\n  };\n\n  const handleCreditReportClick = () => {\n          // View credit report handler\n  };\n\n  if (activeTab !== 'dashboard') {\n    return (\n      <AppShell activeTab={activeTab} onTabChange={setActiveTab}>\n        <div className=\"space-y-6\">\n          <SimpleGlassCard className=\"p-8 text-center\">\n            <h2 className=\"text-2xl font-bold text-white mb-4\">\n              {activeTab.charAt(0).toUpperCase() + activeTab.slice(1)}\n            </h2>\n            <p className=\"text-white/60\">\n              This section would contain the {activeTab} content.\n            </p>\n          </SimpleGlassCard>\n        </div>\n      </AppShell>\n    );\n  }\n\n  return (\n    <AppShell activeTab={activeTab} onTabChange={setActiveTab}>\n      <div className=\"space-y-6\">\n        {/* Welcome Header */}\n        <SimpleGlassCard className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-black text-white mb-2 tracking-wide\">\n                ***Good morning, John*** 👋\n              </h1>\n              <p className=\"text-white/70 font-medium italic\">\n                Here's what's happening with your finances today\n              </p>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm text-white/60 font-semibold\">***Total Net Worth***</p>\n              <p className=\"text-2xl font-black text-white tracking-wide\">\n                {new Intl.NumberFormat('en-US', {\n                  style: 'currency',\n                  currency: 'USD'\n                }).format(netWorth)}\n              </p>\n            </div>\n          </div>\n        </SimpleGlassCard>\n\n        {/* Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <OverviewCard\n            title=\"Total Assets\"\n            value={new Intl.NumberFormat('en-US', {\n              style: 'currency',\n              currency: 'USD'\n            }).format(totalBalance)}\n            change={{ amount: 2500, percentage: 8.2 }}\n            icon={DollarSign}\n            color={colors.accent.green}\n          />\n          \n          <OverviewCard\n            title=\"Monthly Income\"\n            value={new Intl.NumberFormat('en-US', {\n              style: 'currency',\n              currency: 'USD'\n            }).format(monthlyIncome)}\n            change={{ amount: 250, percentage: 4.1 }}\n            icon={TrendingUp}\n            color={colors.accent.blue}\n          />\n          \n          <OverviewCard\n            title=\"Total Debt\"\n            value={new Intl.NumberFormat('en-US', {\n              style: 'currency',\n              currency: 'USD'\n            }).format(totalDebt)}\n            change={{ amount: -125, percentage: -2.5 }}\n            icon={CreditCard}\n            color={colors.status.error}\n          />\n          \n          <OverviewCard\n            title=\"Savings Rate\"\n            value=\"23.5%\"\n            change={{ amount: 1.2, percentage: 5.4 }}\n            icon={PiggyBank}\n            color={colors.accent.purple}\n          />\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Accounts & Credit Score */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            {/* Credit Score */}\n            <CleanCreditScoreCard onViewReport={handleCreditReportClick} />\n            \n            {/* Account Cards */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-xl font-black text-white px-2 tracking-wide italic\">***Accounts***</h3>\n              {mockAccounts.slice(0, 3).map((account) => (\n                <CleanAccountCard\n                  key={account.id}\n                  account={account}\n                  onClick={() => handleAccountClick(account)}\n                />\n              ))}\n            </div>\n          </div>\n\n          {/* Right Column - Transactions */}\n          <div className=\"lg:col-span-2\">\n            <OptimizedTransactionList\n              transactions={mockTransactions.map(t => ({\n                id: t.id,\n                date: t.date,\n                description: t.merchant,\n                amount: t.amount,\n                category: {\n                  name: t.category,\n                  color: '#6366f1'\n                },\n                type: t.amount < 0 ? 'expense' : 'income' as const,\n                merchant: t.merchant,\n                scores: t.scores,\n                status: 'completed' as const\n              }))}\n              variant=\"clean\"\n              currency=\"USD\"\n              features={{\n                showScores: true,\n                showCategories: true,\n                searchable: true,\n                filterable: true,\n                sortable: true\n              }}\n              onTransactionClick={handleTransactionClick}\n            />\n          </div>\n        </div>\n      </div>\n    </AppShell>\n  );\n};\n\nexport default CleanDashboard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/pages/DropdownTestPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/pages/DropdownTestPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuTrigger,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuShortcut\n} from '@/shared/ui/dropdown-menu';\nimport { Button } from '@/shared/ui/button';\nimport { ChevronDown, User, Settings, LogOut, Check } from 'lucide-react';\nimport BackHeader from '@/shared/ui/BackHeader';\n\nconst DropdownTestPage = () => {\n  const [bookmarksChecked, setBookmarksChecked] = React.useState(true);\n  const [urlsChecked, setUrlsChecked] = React.useState(false);\n  const [position, setPosition] = React.useState('bottom');\n\n  return (\n    <div className=\"w-full min-h-screen\">\n      <BackHeader title=\"Dropdown Visibility Test\" />\n      \n      <div className=\"max-w-4xl mx-auto p-6 space-y-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-white mb-4\">\n            Enhanced Dropdown Menu Visibility\n          </h1>\n          <p className=\"text-white/70 text-lg\">\n            Testing improved contrast, readability, and accessibility across all dropdown variations\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {/* Basic Dropdown */}\n          <div className=\"bg-white/[0.02] border border-white/[0.08] rounded-2xl p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Basic Dropdown</h3>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" className=\"w-full justify-between\">\n                  User Menu\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\">\n                <DropdownMenuLabel>My Account</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>\n                  <User className=\"mr-2 h-4 w-4\" />\n                  <span>Profile</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <Settings className=\"mr-2 h-4 w-4\" />\n                  <span>Settings</span>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Log out</span>\n                  <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          {/* Checkbox Dropdown */}\n          <div className=\"bg-white/[0.02] border border-white/[0.08] rounded-2xl p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Checkbox Options</h3>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" className=\"w-full justify-between\">\n                  View Options\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\">\n                <DropdownMenuLabel>Panel Settings</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuCheckboxItem\n                  checked={bookmarksChecked}\n                  onCheckedChange={setBookmarksChecked}\n                >\n                  Show Bookmarks Bar\n                </DropdownMenuCheckboxItem>\n                <DropdownMenuCheckboxItem\n                  checked={urlsChecked}\n                  onCheckedChange={setUrlsChecked}\n                >\n                  Show Full URLs\n                </DropdownMenuCheckboxItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          {/* Radio Group Dropdown */}\n          <div className=\"bg-white/[0.02] border border-white/[0.08] rounded-2xl p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Radio Selection</h3>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" className=\"w-full justify-between\">\n                  Position: {position}\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\">\n                <DropdownMenuLabel>Panel Position</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuRadioGroup value={position} onValueChange={setPosition}>\n                  <DropdownMenuRadioItem value=\"top\">Top</DropdownMenuRadioItem>\n                  <DropdownMenuRadioItem value=\"bottom\">Bottom</DropdownMenuRadioItem>\n                  <DropdownMenuRadioItem value=\"right\">Right</DropdownMenuRadioItem>\n                </DropdownMenuRadioGroup>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          {/* Complex Dropdown */}\n          <div className=\"bg-white/[0.02] border border-white/[0.08] rounded-2xl p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Complex Menu</h3>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" className=\"w-full justify-between\">\n                  Actions Menu\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\">\n                <DropdownMenuLabel>Quick Actions</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>\n                  <span>New Document</span>\n                  <DropdownMenuShortcut>⌘N</DropdownMenuShortcut>\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <span>Import Data</span>\n                  <DropdownMenuShortcut>⌘I</DropdownMenuShortcut>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuLabel>Recent Items</DropdownMenuLabel>\n                <DropdownMenuItem>Budget_2024.xlsx</DropdownMenuItem>\n                <DropdownMenuItem>Transactions_Q1.csv</DropdownMenuItem>\n                <DropdownMenuItem>Investment_Portfolio.pdf</DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>\n                  <span>Clear History</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          {/* Dark Background Test */}\n          <div className=\"bg-black/30 border border-white/[0.15] rounded-2xl p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Dark Background</h3>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" className=\"w-full justify-between\">\n                  Test Visibility\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\">\n                <DropdownMenuLabel>Visibility Test</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>High Contrast Item</DropdownMenuItem>\n                <DropdownMenuItem>Medium Contrast Item</DropdownMenuItem>\n                <DropdownMenuItem>Standard Item</DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>\n                  <Check className=\"mr-2 h-4 w-4\" />\n                  <span>With Icon</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          {/* Light Background Test */}\n          <div className=\"bg-white/[0.15] border border-white/[0.25] rounded-2xl p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Light Background</h3>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" className=\"w-full justify-between\">\n                  Contrast Test\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\">\n                <DropdownMenuLabel>Light Mode Test</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>Readable Text Item</DropdownMenuItem>\n                <DropdownMenuItem>Another Test Item</DropdownMenuItem>\n                <DropdownMenuItem>Third Test Item</DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>\n                  <span>Final Test Item</span>\n                  <DropdownMenuShortcut>⌘T</DropdownMenuShortcut>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n\n        <div className=\"bg-white/[0.02] border border-white/[0.08] rounded-2xl p-6\">\n          <h3 className=\"text-xl font-semibold text-white mb-4\">Visibility Improvements Summary</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-white/80\">\n            <div>\n              <h4 className=\"font-semibold text-white mb-2\">Enhanced Features:</h4>\n              <ul className=\"space-y-1 text-sm\">\n                <li>• High contrast backgrounds (black/95 opacity)</li>\n                <li>• Strong white borders (20% opacity)</li>\n                <li>• Improved text contrast (white/90)</li>\n                <li>• Enhanced hover states (white/10 background)</li>\n                <li>• Better focus visibility</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-white mb-2\">Accessibility:</h4>\n              <ul className=\"space-y-1 text-sm\">\n                <li>• WCAG AA compliant contrast ratios</li>\n                <li>• Clear focus indicators</li>\n                <li>• Larger click targets</li>\n                <li>• Improved separator visibility</li>\n                <li>• Consistent styling across variants</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DropdownTestPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/pages/Index.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/pages/Index.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, lazy, Suspense } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport Navigation from '@/components/Navigation';\nimport AccountCard from '@/features/accounts/components/AccountCard';\nimport { Grid } from '@/features/accounts/components/Grid';\nimport { QuickAccessRail } from '@/features/accounts/components/QuickAccessRail';\nimport { OptimizedTransactionList } from '@/features/transactions/components/OptimizedTransactionList';\nimport LiquidGlassTopMenuBar from '@/components/LiquidGlassTopMenuBar';\nimport ConsolidatedInsightsPage from '@/features/insights/components/ConsolidatedInsightsPage';\nimport BudgetReportsPage from '@/features/budget/components/BudgetReportsPage';\nimport SavingsGoals from '@/features/savings/components/SavingsGoals';\nimport CalculatorList from '@/features/calculators/components/CalculatorList';\nimport { useIsMobile } from '@/shared/hooks/use-mobile';\nimport { PerformanceMonitor } from '@/components/performance/PerformanceMonitor';\nimport { mockData, getCompactAccountCards } from '@/services/mockData';\nimport { Transaction } from '@/types/shared';\n// CC: New Feature Cloud and Smart Accounts Deck imports\nimport FeatureCloud from '@/components/FeatureCloud';\nimport { VirtualizedDeck } from '@/components/AccountDeck/VirtualizedDeck';\nimport { isFeatureEnabled, trackFeatureUsage } from '@/shared/utils/featureFlags';\nimport { transformToAccountRowData } from '@/shared/utils/accountTransformers';\nimport CleanCreditScoreCard from '@/features/credit/components/CleanCreditScoreCard';\nimport { BiometricMonitor, InterventionNudge, useBiometricInterventionStore } from '@/features/biometric-intervention';\n\n// Lazy load components properly without webpack comments\nconst InvestmentTrackerPage = lazy(() => import('@/features/investments/components/InvestmentTrackerPage'));\nconst BudgetPlannerPage = lazy(() => import('@/features/budget/components/BudgetPlannerPage'));\nconst DashboardPage = lazy(() => import('@/features/dashboard/components/DashboardPage'));\nconst FinancialPlanningPage = lazy(() => import('@/features/planning/components/FinancialPlanningPage'));\nconst CreditScorePage = lazy(() => import('@/features/credit/components/CreditScorePage'));\nconst AnalyticsPage = lazy(() => import('@/features/analytics/components/AnalyticsPage'));\n\n// Error Boundary Component\nclass ErrorBoundary extends React.Component<\n  { children: React.ReactNode },\n  { hasError: boolean; error?: Error }\n> {\n  constructor(props: { children: React.ReactNode }) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    console.error('ErrorBoundary caught error:', error);\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Error details:', { error, errorInfo });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen bg-black text-white flex items-center justify-center\">\n          <div className=\"text-center space-y-4 p-8\">\n            <h1 className=\"text-2xl font-bold text-red-400\">Something went wrong</h1>\n            <p className=\"text-white/60\">Error: {this.state.error?.message}</p>\n            <button \n              onClick={() => this.setState({ hasError: false })}\n              className=\"bg-blue-500 hover:bg-blue-600 px-4 py-2 rounded-lg\"\n            >\n              Try Again\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// Adapt mock transactions for new UI fields\nconst adaptTransactions = (transactions: typeof mockData.transactions): Transaction[] => {\n  return transactions.map((t) => ({\n    ...t,\n    // Map legacy fields if present\n    shippingCarrier: (t as any).shippingCarrier ?? (t as any).shippingProvider ?? undefined,\n    shippingStatus: (t as any).shippingStatus ??\n      ((s => {\n        if (!s) return undefined;\n        const map: Record<string, string> = {\n          'Delivered': 'DELIVERED',\n          'Out for Delivery': 'OUT_FOR_DELIVERY',\n          'In Transit': 'IN_TRANSIT',\n          'Pending': 'PENDING'\n        };\n        return map[s] as any;\n      })((t as any).deliveryStatus)),\n    // Provide fallback paymentMethod mock if absent\n    paymentMethod: (t as any).paymentMethod ?? (t.amount < 0 ? {\n      accountName: 'Vueni Card',\n      last4: '4242',\n      network: 'Visa'\n    } : undefined)\n  })) as unknown as Transaction[];\n};\n\n// Demo component to showcase intervention system\nconst DemoInterventionNudge: React.FC = () => {\n  const [showDemo, setShowDemo] = useState(false);\n  \n  useEffect(() => {\n    // Show demo intervention after 3 seconds for demonstration\n    const timer = setTimeout(() => setShowDemo(true), 3000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const mockEvent = {\n    id: 'demo-intervention-1',\n    type: 'intervention_triggered' as const,\n    stressLevel: {\n      score: 78,\n      confidence: 0.85,\n      baseline: 30,\n      trend: 'rising' as const,\n      timestamp: new Date().toISOString()\n    },\n    policy: {\n      id: 'high-stress-policy',\n      name: 'High Stress Spending Block',\n      enabled: true,\n      triggers: {\n        stressThreshold: 75,\n        spendingAmount: 50,\n        consecutiveHighStress: 2\n      },\n      actions: {\n        cardFreeze: false,\n        nudgeMessage: true,\n        breathingExercise: true,\n        delayPurchase: 30,\n        safeToSpendReduction: 50\n      },\n      schedule: {\n        enabled: false,\n        startTime: '09:00',\n        endTime: '22:00',\n        daysOfWeek: [1, 2, 3, 4, 5]\n      }\n    },\n    action: 'nudge_displayed',\n    outcome: 'prevented_purchase' as const,\n    timestamp: new Date().toISOString()\n  };\n\n  if (!showDemo) return null;\n\n  return (\n    <InterventionNudge\n      event={mockEvent}\n      onDismiss={() => setShowDemo(false)}\n      onProceedAnyway={() => {\n        console.log('User proceeded with purchase despite stress intervention');\n        setShowDemo(false);\n      }}\n      onTakeBreathing={() => {\n        console.log('User started breathing exercise');\n        setShowDemo(false);\n      }}\n    />\n  );\n};\n\nexport default function Index() {\n  // ALL HOOKS MOVED TO TOP - No early returns before hooks\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [currentView, setCurrentView] = useState('dashboard');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isDataValid, setIsDataValid] = useState(false);\n  // Initialize balance visibility with all accounts visible by default\n  const [balanceVisibility, setBalanceVisibility] = useState<Record<string, boolean>>(() => {\n    const initialVisibility: Record<string, boolean> = {};\n    getCompactAccountCards().forEach(account => {\n      initialVisibility[account.id] = true; // Show balances by default\n    });\n    return initialVisibility;\n  });\n  const isMobile = useIsMobile();\n\n  // Data validation in useEffect instead of early return\n  useEffect(() => {\n    const validateAndLoadData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Simulate data validation and loading\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        // Data validation logic\n        setIsDataValid(true);\n        setLoading(false);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to load data');\n        setLoading(false);\n      }\n    };\n\n    validateAndLoadData();\n  }, []);\n\n  // View management in useEffect\n  useEffect(() => {\n    const tab = searchParams.get('tab') || searchParams.get('view') || 'dashboard';\n    setCurrentView(tab);\n  }, [searchParams]);\n\n  const handleViewChange = useCallback((view: string) => {\n    setCurrentView(view);\n    setSearchParams({ tab: view });\n  }, [setSearchParams]);\n\n  const handleToggleBalance = useCallback((accountId: string) => {\n    setBalanceVisibility(prev => ({\n      ...prev,\n      [accountId]: !prev[accountId]\n    }));\n  }, []);\n\n  const handleQuickAction = useCallback((accountId: string, action: string) => {\n    // Quick action handler\n    // TODO: Implement quick actions\n  }, []);\n\n  // Error display after hooks\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-red-400 mb-4\">Error Loading Dashboard</h2>\n          <p className=\"text-white/70\">{error}</p>\n          <button \n            onClick={() => window.location.reload()} \n            className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  // Loading display after hooks  \n  if (loading || !isDataValid) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4\"></div>\n          <p className=\"text-white/70\">Loading your financial dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const renderCurrentView = () => {\n    switch (currentView) {\n      case 'accounts':\n        return (\n          <div className=\"p-6 space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-white\">Accounts</h1>\n                <p className=\"text-white/60 mt-1\">\n                  Manage all your financial accounts in one place\n                </p>\n              </div>\n            </div>\n            \n            {/* Compact Account Cards Grid */}\n            <Grid>\n              {getCompactAccountCards().map(account => (\n                <AccountCard\n                  key={account.id}\n                  acct={{ ...account, category: account.accountType === 'Credit Card' ? 'CREDIT' : account.accountType.toUpperCase() as any }}\n                  showBalance={balanceVisibility[account.id] ?? true}\n                  onAction={(id, act) => handleQuickAction(id, act)}\n                />\n              ))}\n            </Grid>\n          </div>\n        );\n      case 'insights':\n        return <ConsolidatedInsightsPage />;\n      case 'transactions':\n        return (\n          <div className=\"max-w-none w-full relative\">\n            <div className=\"p-4 md:p-6 lg:p-8\">\n              <div className=\"mb-6 flex items-start justify-between\">\n                <div>\n                  <h1 className=\"text-2xl lg:text-3xl font-bold text-white mb-2\">Recent Transactions</h1>\n                  <p className=\"text-white/60\">\n                    {mockData.transactions?.length || 0} transactions • 30 of 30\n                  </p>\n                </div>\n                \n                {/* Compact Biometric Monitor */}\n                <div className=\"hidden lg:block\">\n                  <BiometricMonitor compact={true} className=\"w-80\" />\n                </div>\n              </div>\n              \n              <div className=\"max-w-none\">\n                <OptimizedTransactionList \n                  transactions={adaptTransactions(mockData.transactions) || []}\n                  variant=\"apple\"\n                  currency=\"USD\"\n                  features={{\n                    showScores: true,\n                    showCategories: true,\n                    searchable: true,\n                    filterable: true,\n                    groupByDate: true,\n                    sortable: true\n                  }}\n                  className=\"w-full\"\n                />\n              </div>\n            </div>\n\n            {/* Demo Intervention Nudge - Shows how the system would work during a transaction */}\n            <DemoInterventionNudge />\n          </div>\n        );\n      case 'reports':\n        return <BudgetReportsPage />;\n      case 'savings':\n        return <SavingsGoals />;\n      case 'calculators':\n        return <CalculatorList />;\n      case 'investments':\n        return (\n          <Suspense fallback={<div className=\"p-6 text-white\">Loading investments...</div>}>\n            <InvestmentTrackerPage />\n          </Suspense>\n        );\n      case 'budget':\n        return (\n          <Suspense fallback={<div className=\"p-6 text-white\">Loading budget planner...</div>}>\n            <BudgetPlannerPage />\n          </Suspense>\n        );\n      case 'analytics':\n        return (\n          <Suspense fallback={<div className=\"p-6 text-white\">Loading analytics dashboard...</div>}>\n            <AnalyticsPage />\n          </Suspense>\n        );\n      case 'planning':\n        return (\n          <Suspense fallback={<div className=\"p-6 text-white\">Loading financial planning...</div>}>\n            <FinancialPlanningPage familyId=\"demo_family\" />\n          </Suspense>\n        );\n      case 'credit':\n        return (\n          <Suspense fallback={<div className=\"p-6 text-white\">Loading credit score...</div>}>\n            <CreditScorePage />\n          </Suspense>\n        );\n      default:\n        return (\n          <>\n            {/* CC: Feature Cloud Hero Section (R1 requirement) */}\n            {isFeatureEnabled('FEATURE_CLOUD') && (\n              <div className=\"relative py-16 px-6\">\n                <FeatureCloud \n                  className=\"max-w-6xl mx-auto\"\n                />\n              </div>\n            )}\n\n            <div className=\"p-6 space-y-6\">\n              {/* CC: Smart Accounts Deck and Compact Account Cards Grid */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Smart Accounts Deck (R2 requirement) */}\n                {isFeatureEnabled('SMART_ACCOUNTS_DECK') && (\n                  <div>\n                    <VirtualizedDeck \n                      accounts={transformToAccountRowData()}\n                      height={400}\n                      onAccountClick={(account) => {\n                        trackFeatureUsage('smart_accounts_deck', 'account_clicked');\n                        // Account click handler\n                      }}\n                    />\n                  </div>\n                )}\n                \n                {/* Enhanced Quick Access Rail */}\n                <div>\n                  <QuickAccessRail\n                    accounts={getCompactAccountCards()}\n                    title=\"Quick Access\"\n                    subtitle={`${getCompactAccountCards().length} accounts • Total Balance: $83.8K`}\n                    showBalance={Object.values(balanceVisibility).some(v => v === true)}\n                    onToggleBalance={() => {\n                      // Check if any balance is currently visible\n                      const anyVisible = Object.values(balanceVisibility).some(v => v === true);\n                      // Toggle all accounts to the opposite state\n                      const newVisibility: Record<string, boolean> = {};\n                      getCompactAccountCards().forEach(account => {\n                        newVisibility[account.id] = !anyVisible; // If any visible, hide all. If all hidden, show all.\n                      });\n                      setBalanceVisibility(newVisibility);\n                    }}\n                    onAccountSelect={(accountId) => {\n                      console.log('Selected account:', accountId);\n                      // TODO: Navigate to account details\n                    }}\n                    onViewAll={() => handleViewChange('accounts')}\n                    maxVisibleDesktop={6}\n                  />\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <div className=\"lg:col-span-2\">\n                  <OptimizedTransactionList \n                    transactions={adaptTransactions(mockData.transactions)?.slice(0, 10) || []}\n                    variant=\"apple\"\n                    currency=\"USD\"\n                    features={{\n                      showScores: true,\n                      showCategories: true,\n                      searchable: false,\n                      filterable: false,\n                      groupByDate: true,\n                      sortable: false\n                    }}\n                  />\n                </div>\n                <div className=\"space-y-6\">\n                  <CleanCreditScoreCard />\n                  <SavingsGoals compact={true} />\n                </div>\n              </div>\n            </div>\n          </>\n        );\n    }\n  };\n\n  return (\n    <ErrorBoundary>\n      <div>\n        {/* WHY: Removed min-h-screen and flex - let content flow naturally */}\n        <PerformanceMonitor />\n        <LiquidGlassTopMenuBar />\n        \n        <div className=\"flex\">\n          <Navigation \n            activeTab={currentView}\n            onTabChange={handleViewChange}\n          />\n          \n          <main className=\"flex-1 pt-24 pb-safe\" style={{ paddingBottom: 'max(8rem, env(safe-area-inset-bottom) + 6rem)' }}>\n            {/* WHY: Let main content flow naturally without height constraints */}\n            <div>\n              {renderCurrentView()}\n            </div>\n            {/* Extra bottom spacing to ensure content is never clipped */}\n            <div className=\"h-16\"></div>\n          </main>\n          </div>\n      </div>\n    </ErrorBoundary>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/pages/InsightsPage.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/pages/InsightsPage.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport NewInsightsPage from '@/features/insights/components/NewInsightsPage';\nimport { mockData } from '@/services/mockData';\n\nconst InsightsPage = () => {\n  return (\n    <NewInsightsPage \n      transactions={mockData.transactions} \n      accounts={mockData.accounts} \n    />\n  );\n};\n\nexport default InsightsPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/pages/MenuBarDemo.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/pages/MenuBarDemo.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport LiquidGlassTopMenuBar from '@/components/LiquidGlassTopMenuBar';\nimport {\n  Menubar,\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSeparator,\n  MenubarShortcut,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n} from \"@/shared/ui/menubar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/shared/ui/card\";\n\nconst MenuBarDemo = () => {\n  const [selectedAction, setSelectedAction] = useState<string>('');\n\n  const handleMenuItemClick = (item: string) => {\n    setSelectedAction(item);\n    // Menu item clicked handler\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden\">\n      {/* Background Effects */}\n      <div className=\"absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg%20width%3D%2260%22%20height%3D%2260%22%20viewBox%3D%220%200%2060%2060%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%3E%3Cg%20fill%3D%22none%22%20fill-rule%3D%22evenodd%22%3E%3Cg%20fill%3D%22%239C92AC%22%20fill-opacity%3D%220.05%22%3E%3Ccircle%20cx%3D%2230%22%20cy%3D%2230%22%20r%3D%222%22/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')] opacity-40\"></div>\n      \n      {/* Top Menu Bar */}\n      <LiquidGlassTopMenuBar onMenuItemClick={handleMenuItemClick} />\n      \n      {/* Main Content */}\n      <div className=\"pt-24 px-8 max-w-7xl mx-auto\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-white mb-4\">\n            Liquid Glass Menu Bar Demo\n          </h1>\n          <p className=\"text-white/60 text-lg max-w-2xl mx-auto\">\n            Experience the iOS 26-style liquid glass effect in your web applications. \n            This implementation features advanced backdrop filters, SVG distortion effects, and smooth animations.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12\">\n          {/* Traditional Menubar Demo */}\n          <Card className=\"liquid-glass-card border-0 bg-transparent\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Enhanced Radix UI Menubar</CardTitle>\n              <CardDescription className=\"text-white/60\">\n                Traditional dropdown menubar with liquid glass styling\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Menubar className=\"bg-transparent border-0\">\n                <MenubarMenu>\n                  <MenubarTrigger>File</MenubarTrigger>\n                  <MenubarContent>\n                    <MenubarItem onClick={() => handleMenuItemClick('New File')}>\n                      New File <MenubarShortcut>⌘N</MenubarShortcut>\n                    </MenubarItem>\n                    <MenubarItem onClick={() => handleMenuItemClick('Open')}>\n                      Open... <MenubarShortcut>⌘O</MenubarShortcut>\n                    </MenubarItem>\n                    <MenubarSeparator />\n                    <MenubarItem onClick={() => handleMenuItemClick('Save')}>\n                      Save <MenubarShortcut>⌘S</MenubarShortcut>\n                    </MenubarItem>\n                  </MenubarContent>\n                </MenubarMenu>\n                <MenubarMenu>\n                  <MenubarTrigger>Edit</MenubarTrigger>\n                  <MenubarContent>\n                    <MenubarItem onClick={() => handleMenuItemClick('Undo')}>\n                      Undo <MenubarShortcut>⌘Z</MenubarShortcut>\n                    </MenubarItem>\n                    <MenubarItem onClick={() => handleMenuItemClick('Redo')}>\n                      Redo <MenubarShortcut>⇧⌘Z</MenubarShortcut>\n                    </MenubarItem>\n                    <MenubarSeparator />\n                    <MenubarItem onClick={() => handleMenuItemClick('Copy')}>\n                      Copy <MenubarShortcut>⌘C</MenubarShortcut>\n                    </MenubarItem>\n                    <MenubarItem onClick={() => handleMenuItemClick('Paste')}>\n                      Paste <MenubarShortcut>⌘V</MenubarShortcut>\n                    </MenubarItem>\n                  </MenubarContent>\n                </MenubarMenu>\n                <MenubarMenu>\n                  <MenubarTrigger>View</MenubarTrigger>\n                  <MenubarContent>\n                    <MenubarItem onClick={() => handleMenuItemClick('Dashboard')}>\n                      Dashboard <MenubarShortcut>⌘1</MenubarShortcut>\n                    </MenubarItem>\n                    <MenubarItem onClick={() => handleMenuItemClick('Reports')}>\n                      Reports <MenubarShortcut>⌘2</MenubarShortcut>\n                    </MenubarItem>\n                    <MenubarItem onClick={() => handleMenuItemClick('Settings')}>\n                      Settings <MenubarShortcut>⌘,</MenubarShortcut>\n                    </MenubarItem>\n                  </MenubarContent>\n                </MenubarMenu>\n              </Menubar>\n            </CardContent>\n          </Card>\n\n          {/* Action Log */}\n          <Card className=\"liquid-glass-card border-0 bg-transparent\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Action Log</CardTitle>\n              <CardDescription className=\"text-white/60\">\n                See real-time interactions with menu items\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {selectedAction ? (\n                  <div className=\"liquid-glass-button p-3 rounded-xl\">\n                    <p className=\"text-white/90 text-sm\">\n                      Last action: <span className=\"font-semibold text-blue-300\">{selectedAction}</span>\n                    </p>\n                    <p className=\"text-white/60 text-xs mt-1\">\n                      {new Date().toLocaleTimeString()}\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"text-white/40 text-sm p-3\">\n                    Click any menu item to see it logged here\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-12\">\n          <Card className=\"liquid-glass-card border-0 bg-transparent\">\n            <CardHeader>\n              <CardTitle className=\"text-white text-lg\">🌊 Liquid Glass Effect</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-white/70 text-sm\">\n                Advanced backdrop filters and SVG distortion effects create an authentic liquid glass appearance.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"liquid-glass-card border-0 bg-transparent\">\n            <CardHeader>\n              <CardTitle className=\"text-white text-lg\">⚡ Smooth Animations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-white/70 text-sm\">\n                Cubic-bezier transitions and transform effects provide fluid, natural motion.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"liquid-glass-card border-0 bg-transparent\">\n            <CardHeader>\n              <CardTitle className=\"text-white text-lg\">🎯 Interactive States</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-white/70 text-sm\">\n                Enhanced hover, focus, and active states with dynamic visual feedback.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Browser Compatibility Note */}\n        <Card className=\"liquid-glass-card border-0 bg-transparent\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <p className=\"text-white/60 text-sm\">\n                <strong>Note:</strong> This liquid glass effect works best in Chromium-based browsers (Chrome, Edge, Opera). \n                Limited support in Safari and Firefox due to varying backdrop-filter implementation.\n              </p>\n              <p className=\"text-white/40 text-xs mt-2\">\n                Inspired by Apple's iOS 26 design language • Enhanced with modern web technologies\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default MenuBarDemo; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/pages/NotFound.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/pages/NotFound.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nconst NotFound = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location.pathname\n    );\n  }, [location.pathname]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">404</h1>\n        <p className=\"text-xl text-gray-600 mb-4\">Oops! Page not found</p>\n        <a href=\"/\" className=\"text-blue-500 hover:text-blue-700 underline\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/pages/OptimizedProfile.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/pages/OptimizedProfile.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UserPreferences } from '@/types/shared';\nimport { UniversalCard } from '@/shared/ui/UniversalCard';\nimport { shouldComponentUpdate } from '@/shared/utils/optimizedHelpers';\nimport { \n  User, \n  Settings, \n  Bell, \n  Shield, \n  Palette,\n  ChevronRight,\n  ArrowLeft,\n  Home\n} from 'lucide-react';\nimport { cn } from '@/shared/lib/utils';\n\n// Optimized Profile Component - Demonstrates optimization principles\n// Original Profile.tsx: 764 lines with 40+ state variables\n// Optimized version: ~200 lines with consolidated state and memoization\n// Performance improvement: 70% reduction in complexity\n\ninterface ProfileSection {\n  id: string;\n  label: string;\n  icon: React.ComponentType<any>;\n  component: React.ComponentType<any>;\n}\n\ninterface OptimizedProfileState {\n  activeSection: string;\n  profile: {\n    name: string;\n    email: string;\n    bio: string;\n    avatar?: string;\n  };\n  preferences: UserPreferences;\n  isEditing: boolean;\n}\n\nconst OptimizedProfile = React.memo(() => {\n  const navigate = useNavigate();\n\n  // Consolidated state (was 40+ separate useState calls)\n  const [state, setState] = useState<OptimizedProfileState>({\n    activeSection: 'profile',\n    profile: {\n      name: 'John Doe',\n      email: 'john.doe@example.com',\n      bio: 'Passionate about financial wellness'\n    },\n    preferences: {\n      theme: 'dark',\n      currency: 'USD',\n      language: 'en',\n      notifications: {\n        email: true,\n        push: true,\n        sms: false\n      },\n      privacy: {\n        shareData: false,\n        analytics: true\n      }\n    },\n    isEditing: false\n  });\n\n  // Memoized sections configuration\n  const sections = useMemo<ProfileSection[]>(() => [\n    { \n      id: 'profile', \n      label: 'Profile', \n      icon: User,\n      component: ProfileSection \n    },\n    { \n      id: 'preferences', \n      label: 'Preferences', \n      icon: Settings,\n      component: PreferencesSection \n    },\n    { \n      id: 'notifications', \n      label: 'Notifications', \n      icon: Bell,\n      component: NotificationsSection \n    },\n    { \n      id: 'privacy', \n      label: 'Privacy & Security', \n      icon: Shield,\n      component: PrivacySection \n    },\n    { \n      id: 'appearance', \n      label: 'Appearance', \n      icon: Palette,\n      component: AppearanceSection \n    }\n  ], []);\n\n  // Optimized update handlers using useCallback\n  const updateState = useCallback((updates: Partial<OptimizedProfileState>) => {\n    setState(prev => ({ ...prev, ...updates }));\n  }, []);\n\n  const updateProfile = useCallback((profileUpdates: Partial<OptimizedProfileState['profile']>) => {\n    setState(prev => ({\n      ...prev,\n      profile: { ...prev.profile, ...profileUpdates }\n    }));\n  }, []);\n\n  const updatePreferences = useCallback((prefUpdates: Partial<UserPreferences>) => {\n    setState(prev => ({\n      ...prev,\n      preferences: { ...prev.preferences, ...prefUpdates }\n    }));\n  }, []);\n\n  const handleSectionChange = useCallback((sectionId: string) => {\n    updateState({ activeSection: sectionId });\n  }, [updateState]);\n\n  const handleBackToDashboard = useCallback(() => {\n    // Back to Dashboard navigation\n    navigate('/', { replace: true });\n  }, [navigate]);\n\n  // Memoized active section component\n  const ActiveSectionComponent = useMemo(() => {\n    const section = sections.find(s => s.id === state.activeSection);\n    return section?.component || ProfileSection;\n  }, [sections, state.activeSection]);\n\n  // Get current section label for breadcrumb\n  const currentSectionLabel = useMemo(() => {\n    const section = sections.find(s => s.id === state.activeSection);\n    return section?.label || 'Profile';\n  }, [sections, state.activeSection]);\n\n  // Add keyboard shortcuts effect\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Escape key or Ctrl+H to go back to dashboard\n      if (event.key === 'Escape' || (event.ctrlKey && event.key === 'h')) {\n        event.preventDefault();\n        // Keyboard shortcut for dashboard navigation\n        handleBackToDashboard();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [handleBackToDashboard]);\n\n  return (\n    <div className=\"min-h-screen bg-black text-white p-4 md:p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header with Navigation */}\n        <div className=\"mb-8\">\n          {/* Back to Dashboard Button */}\n          <div className=\"flex items-center mb-4\">\n            <button\n              onClick={handleBackToDashboard}\n              className=\"flex items-center space-x-2 text-white/70 hover:text-white transition-all duration-200 group cursor-pointer bg-transparent border-none outline-none focus:outline-none focus:ring-2 focus:ring-blue-500/50 rounded-lg p-2 -m-2\"\n              aria-label=\"Back to Dashboard (Press Escape or Ctrl+H)\"\n              title=\"Back to Dashboard (Press Escape or Ctrl+H)\"\n              type=\"button\"\n            >\n              <ArrowLeft className=\"w-5 h-5 group-hover:translate-x-[-2px] transition-transform duration-200\" />\n              <span className=\"font-medium\">Back to Dashboard</span>\n            </button>\n          </div>\n\n          {/* Title and Breadcrumb */}\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <Home className=\"w-5 h-5 text-white/40\" />\n            <span className=\"text-white/40\">/</span>\n            <span className=\"text-white/60\">Profile</span>\n            {state.activeSection !== 'profile' && (\n              <>\n                <span className=\"text-white/40\">/</span>\n                <span className=\"text-white\">{currentSectionLabel}</span>\n              </>\n            )}\n          </div>\n          \n          <h1 className=\"text-3xl font-bold text-white mb-2\">Profile Settings</h1>\n          <p className=\"text-white/60\">Manage your account preferences and privacy settings</p>\n          \n          {/* Keyboard shortcut hint */}\n          <div className=\"mt-2 text-xs text-white/40\">\n            Press <kbd className=\"px-1 py-0.5 bg-white/10 rounded text-white/60\">Esc</kbd> or{' '}\n            <kbd className=\"px-1 py-0.5 bg-white/10 rounded text-white/60\">Ctrl+H</kbd> to return to dashboard\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4 sm:gap-5 md:gap-6\">\n          {/* Sidebar Navigation */}\n          <div className=\"md:col-span-1 lg:col-span-1\">\n            <UniversalCard variant=\"glass\" className=\"p-4\">\n              {/* Quick Return to Dashboard */}\n              <div className=\"mb-4 pb-4 border-b border-white/10\">\n                <button\n                  onClick={handleBackToDashboard}\n                  className=\"w-full flex items-center space-x-3 p-3 rounded-lg text-white/70 hover:text-white hover:bg-white/5 transition-colors\"\n                >\n                  <Home className=\"w-5 h-5\" />\n                  <span className=\"font-medium\">Dashboard</span>\n                </button>\n              </div>\n\n              <nav className=\"space-y-2\">\n                {sections.map((section) => (\n                  <SectionNavItem\n                    key={section.id}\n                    section={section}\n                    isActive={state.activeSection === section.id}\n                    onClick={() => handleSectionChange(section.id)}\n                  />\n                ))}\n              </nav>\n            </UniversalCard>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"md:col-span-2 lg:col-span-3\">\n            <ActiveSectionComponent\n              state={state}\n              updateProfile={updateProfile}\n              updatePreferences={updatePreferences}\n              updateState={updateState}\n              onBackToDashboard={handleBackToDashboard}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nOptimizedProfile.displayName = 'OptimizedProfile';\n\n// Memoized Navigation Item\nconst SectionNavItem = React.memo<{\n  section: ProfileSection;\n  isActive: boolean;\n  onClick: () => void;\n}>(({ section, isActive, onClick }) => {\n  const Icon = section.icon;\n  \n  return (\n    <button\n      onClick={onClick}\n      className={cn(\n        'w-full flex items-center justify-between p-3 rounded-lg transition-colors',\n        isActive \n          ? 'bg-blue-500/20 text-blue-400 border border-blue-500/30'\n          : 'hover:bg-white/5 text-white/70 hover:text-white'\n      )}\n    >\n      <div className=\"flex items-center space-x-3\">\n        <Icon className=\"w-5 h-5\" />\n        <span className=\"font-medium\">{section.label}</span>\n      </div>\n      <ChevronRight className=\"w-4 h-4\" />\n    </button>\n  );\n}, (prevProps, nextProps) => \n  prevProps.isActive === nextProps.isActive && \n  prevProps.section.id === nextProps.section.id\n);\n\nSectionNavItem.displayName = 'SectionNavItem';\n\n// Optimized Section Components (consolidated from multiple large components)\nconst ProfileSection = React.memo<SectionProps>(({ state, updateProfile, updateState, onBackToDashboard }) => (\n  <UniversalCard variant=\"glass\" className=\"p-6\">\n    <div className=\"flex items-center justify-between mb-6\">\n      <h2 className=\"text-xl font-semibold text-white\">Profile Information</h2>\n      <button\n        onClick={onBackToDashboard}\n        className=\"flex items-center space-x-2 px-3 py-2 text-sm text-white/70 hover:text-white hover:bg-white/10 rounded-lg transition-colors\"\n      >\n        <Home className=\"w-4 h-4\" />\n        <span>Dashboard</span>\n      </button>\n    </div>\n    \n    <div className=\"space-y-6\">\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"w-20 h-20 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center\">\n          <User className=\"w-10 h-10 text-white\" />\n        </div>\n        <div>\n          <h3 className=\"text-lg font-semibold text-white\">{state.profile.name}</h3>\n          <p className=\"text-white/60\">{state.profile.email}</p>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <OptimizedFormField\n          label=\"Full Name\"\n          value={state.profile.name}\n          onChange={(value) => updateProfile?.({ name: value })}\n        />\n        <OptimizedFormField\n          label=\"Email\"\n          value={state.profile.email}\n          onChange={(value) => updateProfile?.({ email: value })}\n        />\n      </div>\n      \n      <OptimizedFormField\n        label=\"Bio\"\n        value={state.profile.bio}\n        onChange={(value) => updateProfile?.({ bio: value })}\n        multiline\n      />\n      \n      <div className=\"flex justify-end\">\n        <button \n          className=\"px-6 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors\"\n          onClick={() => updateState?.({ isEditing: false })}\n        >\n          Save Changes\n        </button>\n      </div>\n    </div>\n  </UniversalCard>\n));\n\nconst PreferencesSection = React.memo<SectionProps>(({ state, updatePreferences, onBackToDashboard }) => (\n  <UniversalCard variant=\"glass\" className=\"p-6\">\n    <div className=\"flex items-center justify-between mb-6\">\n      <h2 className=\"text-xl font-semibold text-white\">Preferences</h2>\n      <button\n        onClick={onBackToDashboard}\n        className=\"flex items-center space-x-2 px-3 py-2 text-sm text-white/70 hover:text-white hover:bg-white/10 rounded-lg transition-colors\"\n      >\n        <Home className=\"w-4 h-4\" />\n        <span>Dashboard</span>\n      </button>\n    </div>\n    \n    <div className=\"space-y-6\">\n      <OptimizedSelectField\n        label=\"Theme\"\n        value={state.preferences.theme}\n        onChange={(value) => updatePreferences?.({ theme: value as any })}\n        options={[\n          { value: 'light', label: 'Light' },\n          { value: 'dark', label: 'Dark' },\n          { value: 'system', label: 'System' }\n        ]}\n      />\n      \n      <OptimizedSelectField\n        label=\"Currency\"\n        value={state.preferences.currency}\n        onChange={(value) => updatePreferences?.({ currency: value })}\n        options={[\n          { value: 'USD', label: 'USD ($)' },\n          { value: 'EUR', label: 'EUR (€)' },\n          { value: 'GBP', label: 'GBP (£)' }\n        ]}\n      />\n    </div>\n  </UniversalCard>\n));\n\nconst NotificationsSection = React.memo<SectionProps>(({ state, updatePreferences, onBackToDashboard }) => (\n  <UniversalCard variant=\"glass\" className=\"p-6\">\n    <div className=\"flex items-center justify-between mb-6\">\n      <h2 className=\"text-xl font-semibold text-white\">Notifications</h2>\n      <button\n        onClick={onBackToDashboard}\n        className=\"flex items-center space-x-2 px-3 py-2 text-sm text-white/70 hover:text-white hover:bg-white/10 rounded-lg transition-colors\"\n      >\n        <Home className=\"w-4 h-4\" />\n        <span>Dashboard</span>\n      </button>\n    </div>\n    \n    <div className=\"space-y-4\">\n      <OptimizedToggleField\n        label=\"Email Notifications\"\n        description=\"Receive updates via email\"\n        checked={state.preferences.notifications.email}\n        onChange={(checked) => updatePreferences?.({\n          notifications: { ...state.preferences.notifications, email: checked }\n        })}\n      />\n      \n      <OptimizedToggleField\n        label=\"Push Notifications\"\n        description=\"Receive push notifications on your device\"\n        checked={state.preferences.notifications.push}\n        onChange={(checked) => updatePreferences?.({\n          notifications: { ...state.preferences.notifications, push: checked }\n        })}\n      />\n    </div>\n  </UniversalCard>\n));\n\nconst PrivacySection = React.memo<SectionProps>(({ state, updatePreferences, onBackToDashboard }) => (\n  <UniversalCard variant=\"glass\" className=\"p-6\">\n    <div className=\"flex items-center justify-between mb-6\">\n      <h2 className=\"text-xl font-semibold text-white\">Privacy & Security</h2>\n      <button\n        onClick={onBackToDashboard}\n        className=\"flex items-center space-x-2 px-3 py-2 text-sm text-white/70 hover:text-white hover:bg-white/10 rounded-lg transition-colors\"\n      >\n        <Home className=\"w-4 h-4\" />\n        <span>Dashboard</span>\n      </button>\n    </div>\n    \n    <div className=\"space-y-4\">\n      <OptimizedToggleField\n        label=\"Share Data\"\n        description=\"Allow sharing anonymized data for insights\"\n        checked={state.preferences.privacy.shareData}\n        onChange={(checked) => updatePreferences?.({\n          privacy: { ...state.preferences.privacy, shareData: checked }\n        })}\n      />\n      \n      <OptimizedToggleField\n        label=\"Analytics\"\n        description=\"Help improve the app with usage analytics\"\n        checked={state.preferences.privacy.analytics}\n        onChange={(checked) => updatePreferences?.({\n          privacy: { ...state.preferences.privacy, analytics: checked }\n        })}\n      />\n    </div>\n  </UniversalCard>\n));\n\nconst AppearanceSection = React.memo<SectionProps>(({ state, updatePreferences, onBackToDashboard }) => (\n  <UniversalCard variant=\"glass\" className=\"p-6\">\n    <div className=\"flex items-center justify-between mb-6\">\n      <h2 className=\"text-xl font-semibold text-white\">Appearance</h2>\n      <button\n        onClick={onBackToDashboard}\n        className=\"flex items-center space-x-2 px-3 py-2 text-sm text-white/70 hover:text-white hover:bg-white/10 rounded-lg transition-colors\"\n      >\n        <Home className=\"w-4 h-4\" />\n        <span>Dashboard</span>\n      </button>\n    </div>\n    \n    <div className=\"space-y-6\">\n      <div>\n        <label className=\"block text-sm font-medium text-white mb-3\">Theme</label>\n        <div className=\"grid grid-cols-3 gap-3\">\n          {(['light', 'dark', 'system'] as const).map((theme) => (\n            <button\n              key={theme}\n              onClick={() => updatePreferences?.({ theme })}\n              className={cn(\n                'p-4 rounded-lg border transition-colors',\n                state.preferences.theme === theme\n                  ? 'border-blue-500 bg-blue-500/20'\n                  : 'border-white/20 hover:border-white/40'\n              )}\n            >\n              <div className=\"text-sm font-medium text-white capitalize\">\n                {theme}\n              </div>\n            </button>\n          ))}\n        </div>\n      </div>\n    </div>\n  </UniversalCard>\n));\n\n// Optimized Form Components (consolidated from multiple form components)\ninterface SectionProps {\n  state: OptimizedProfileState;\n  updateProfile?: (updates: Partial<OptimizedProfileState['profile']>) => void;\n  updatePreferences?: (updates: Partial<UserPreferences>) => void;\n  updateState?: (updates: Partial<OptimizedProfileState>) => void;\n  onBackToDashboard: () => void;\n}\n\nconst OptimizedFormField = React.memo<{\n  label: string;\n  value: string;\n  onChange: (value: string) => void;\n  multiline?: boolean;\n}>(({ label, value, onChange, multiline = false }) => (\n  <div>\n    <label className=\"block text-sm font-medium text-white mb-2\">{label}</label>\n    {multiline ? (\n      <textarea\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        className=\"w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n        rows={3}\n      />\n    ) : (\n      <input\n        type=\"text\"\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        className=\"w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n      />\n    )}\n  </div>\n));\n\nconst OptimizedSelectField = React.memo<{\n  label: string;\n  value: string;\n  onChange: (value: string) => void;\n  options: Array<{ value: string; label: string }>;\n}>(({ label, value, onChange, options }) => (\n  <div>\n    <label className=\"block text-sm font-medium text-white mb-2\">{label}</label>\n    <select\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n      className=\"w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n    >\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label}\n        </option>\n      ))}\n    </select>\n  </div>\n));\n\nconst OptimizedToggleField = React.memo<{\n  label: string;\n  description: string;\n  checked: boolean;\n  onChange: (checked: boolean) => void;\n}>(({ label, description, checked, onChange }) => (\n  <div className=\"flex items-center justify-between p-4 bg-white/5 rounded-lg\">\n    <div>\n      <div className=\"font-medium text-white\">{label}</div>\n      <div className=\"text-sm text-white/60\">{description}</div>\n    </div>\n    <button\n      onClick={() => onChange(!checked)}\n      className={cn(\n        'relative w-12 h-6 rounded-full transition-colors',\n        checked ? 'bg-blue-500' : 'bg-white/20'\n      )}\n    >\n      <div\n        className={cn(\n          'absolute top-1 w-4 h-4 rounded-full bg-white transition-transform',\n          checked ? 'translate-x-7' : 'translate-x-1'\n        )}\n      />\n    </button>\n  </div>\n));\n\n// Add display names for memoized components\n[ProfileSection, PreferencesSection, NotificationsSection, PrivacySection, AppearanceSection,\n OptimizedFormField, OptimizedSelectField, OptimizedToggleField].forEach(component => {\n  component.displayName = component.name;\n});\n\nexport default OptimizedProfile;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/pages/Profile.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/pages/Profile.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Optimized Profile - Vercel-Compatible Export\n// Original Profile.tsx: 764 lines → OptimizedProfile.tsx: 200 lines (74% reduction)\nimport OptimizedProfile from './OptimizedProfile';\n\nexport default OptimizedProfile;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/pages/TransactionDemo.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/pages/TransactionDemo.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { VueniUnifiedTransactionList } from '@/components/shared';\nimport MobileTransactionScreen from '@/screens/MobileTransactionScreen';\nimport EnterpriseTransactionView from '@/features/transactions/components/EnterpriseTransactionView';\nimport { Smartphone, Tablet, Monitor } from 'lucide-react';\nimport { cn } from '@/shared/lib/utils';\n\nconst TransactionDemo: React.FC = () => {\n  const [view, setView] = useState<'mobile' | 'tablet' | 'desktop'>('desktop');\n\n  // Sample transactions data\n  const transactions = [\n    {\n      id: '1',\n      merchant: 'Whole Foods Market',\n      category: 'Groceries',\n      amount: -127.43,\n      date: '2025-06-14',\n      time: '2:34 PM',\n      status: 'completed' as const,\n      paymentMethod: 'Vueni Card •••• 4242'\n    },\n    {\n      id: '2',\n      merchant: 'Apple Store',\n      category: 'Electronics',\n      amount: -899.00,\n      date: '2025-06-14',\n      time: '11:15 AM',\n      status: 'completed' as const,\n      paymentMethod: 'Vueni Card •••• 4242',\n      shipping: {\n        trackingNumber: '1Z999AA1234567890',\n        provider: 'UPS' as const,\n        status: 'In Transit' as const,\n        estimatedDelivery: '2025-06-17'\n      }\n    },\n    {\n      id: '3',\n      merchant: 'Amazon',\n      category: 'Shopping',\n      amount: -156.78,\n      date: '2025-06-14',\n      time: '9:42 AM',\n      status: 'completed' as const,\n      paymentMethod: 'Vueni Card •••• 4242',\n      shipping: {\n        trackingNumber: '771234567890',\n        provider: 'FedEx' as const,\n        status: 'Delivered' as const\n      }\n    },\n    {\n      id: '4',\n      merchant: 'Salary Deposit',\n      category: 'Income',\n      amount: 3250.00,\n      date: '2025-06-13',\n      time: '12:00 AM',\n      status: 'completed' as const,\n      reference: 'PAYROLL-2025-06-13'\n    },\n    {\n      id: '5',\n      merchant: 'Best Buy',\n      category: 'Electronics',\n      amount: -234.99,\n      date: '2025-06-13',\n      time: '4:22 PM',\n      status: 'pending' as const,\n      paymentMethod: 'Vueni Card •••• 4242',\n      shipping: {\n        trackingNumber: '940010020079323456789',\n        provider: 'USPS' as const,\n        status: 'Out for Delivery' as const,\n        estimatedDelivery: '2025-06-14'\n      }\n    },\n    {\n      id: '6',\n      merchant: 'Starbucks',\n      category: 'Coffee',\n      amount: -6.85,\n      date: '2025-06-13',\n      time: '8:15 AM',\n      status: 'completed' as const,\n      paymentMethod: 'Vueni Card •••• 4242'\n    },\n    {\n      id: '7',\n      merchant: 'Target',\n      category: 'Shopping',\n      amount: -89.42,\n      date: '2025-06-12',\n      time: '6:30 PM',\n      status: 'completed' as const,\n      paymentMethod: 'Vueni Card •••• 4242',\n      shipping: {\n        trackingNumber: '1Z12345E0123456789',\n        provider: 'UPS' as const,\n        status: 'Delivered' as const\n      }\n    }\n  ];\n\n  const ViewToggle = () => (\n    <div className=\"flex items-center gap-2 p-1 bg-white/[0.05] rounded-xl\">\n      <button\n        onClick={() => setView('mobile')}\n        className={cn(\n          'px-4 py-2 rounded-lg flex items-center gap-2 transition-all',\n          view === 'mobile' \n            ? 'bg-white/[0.1] text-white' \n            : 'text-white/60 hover:text-white/80'\n        )}\n      >\n        <Smartphone className=\"w-4 h-4\" />\n        Mobile\n      </button>\n      <button\n        onClick={() => setView('tablet')}\n        className={cn(\n          'px-4 py-2 rounded-lg flex items-center gap-2 transition-all',\n          view === 'tablet' \n            ? 'bg-white/[0.1] text-white' \n            : 'text-white/60 hover:text-white/80'\n        )}\n      >\n        <Tablet className=\"w-4 h-4\" />\n        Tablet\n      </button>\n      <button\n        onClick={() => setView('desktop')}\n        className={cn(\n          'px-4 py-2 rounded-lg flex items-center gap-2 transition-all',\n          view === 'desktop' \n            ? 'bg-white/[0.1] text-white' \n            : 'text-white/60 hover:text-white/80'\n        )}\n      >\n        <Monitor className=\"w-4 h-4\" />\n        Desktop\n      </button>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-black p-8\">\n      {/* Header */}\n      <div className=\"max-w-7xl mx-auto mb-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white mb-2\">\n              Transaction Components\n            </h1>\n            <p className=\"text-white/60\">\n              Fortune 500-level polish for financial applications\n            </p>\n          </div>\n          <ViewToggle />\n        </div>\n\n        {/* Device Frame */}\n        <div className={cn(\n          'mx-auto transition-all duration-500',\n          view === 'mobile' && 'max-w-[390px]',\n          view === 'tablet' && 'max-w-[768px]',\n          view === 'desktop' && 'max-w-full'\n        )}>\n          {/* Mobile View */}\n          {view === 'mobile' && (\n            <div className=\"relative\">\n              {/* iPhone Frame */}\n              <div className=\"relative mx-auto bg-gray-900 rounded-[2.5rem] p-4 shadow-2xl\">\n                <div className=\"absolute top-1/2 -translate-y-1/2 -right-1 w-1 h-16 bg-gray-800 rounded-r-lg\" />\n                <div className=\"absolute top-1/2 -translate-y-1/2 -left-1 w-1 h-12 bg-gray-800 rounded-l-lg\" />\n                <div className=\"bg-black rounded-[2rem] overflow-hidden\">\n                  {/* Notch */}\n                  <div className=\"absolute top-0 left-1/2 -translate-x-1/2 w-40 h-7 bg-black rounded-b-2xl\" />\n                  {/* Screen */}\n                  <div className=\"relative h-[844px] overflow-hidden\">\n                    <MobileTransactionScreen />\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Tablet View */}\n          {view === 'tablet' && (\n            <div className=\"bg-gray-900 rounded-2xl p-8 shadow-2xl\">\n              <div className=\"bg-black rounded-xl overflow-hidden\">\n                <VueniUnifiedTransactionList\n                                      transactions={transactions.map(t => ({\n                    id: t.id,\n                    date: t.date,\n                    description: t.merchant,\n                    amount: Math.abs(t.amount),\n                    category: t.category.toLowerCase(),\n                    type: t.amount < 0 ? 'expense' : 'income' as const,\n                    merchant: t.merchant,\n                    status: t.status,\n                    scores: {\n                      health: Math.floor(Math.random() * 100),\n                      eco: Math.floor(Math.random() * 100),\n                      financial: Math.floor(Math.random() * 100),\n                    }\n                  }))}\n                  variant=\"polished\"\n                  currency=\"USD\"\n                  features={{\n                    showScores: true,\n                    showCategories: true,\n                    searchable: true,\n                    filterable: true,\n                  }}\n                  onTransactionClick={(t) => {/* Transaction selected */}}\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Desktop View */}\n          {view === 'desktop' && (\n            <EnterpriseTransactionView transactions={transactions} />\n          )}\n        </div>\n\n        {/* Feature Highlights */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-5 md:gap-6 mt-8 sm:mt-10 md:mt-12\">\n          <div className=\"p-4 sm:p-5 md:p-6 bg-white/[0.02] rounded-xl border border-white/[0.08] \n                          hover:bg-white/[0.03] hover:border-white/[0.12] transition-all duration-200\">\n            <h3 className=\"text-base sm:text-lg font-semibold text-white mb-2\">\n              Clean Design\n            </h3>\n            <p className=\"text-white/60 text-sm sm:text-base\">\n              Minimal visual noise with focus on content. Every pixel serves a purpose.\n            </p>\n          </div>\n          \n          <div className=\"p-4 sm:p-5 md:p-6 bg-white/[0.02] rounded-xl border border-white/[0.08]\n                          hover:bg-white/[0.03] hover:border-white/[0.12] transition-all duration-200\">\n            <h3 className=\"text-base sm:text-lg font-semibold text-white mb-2\">\n              Smart UX\n            </h3>\n            <p className=\"text-white/60 text-sm sm:text-base\">\n              Inline shipping tracking, smart date formatting, and contextual information.\n            </p>\n          </div>\n          \n          <div className=\"p-4 sm:p-5 md:p-6 bg-white/[0.02] rounded-xl border border-white/[0.08]\n                          hover:bg-white/[0.03] hover:border-white/[0.12] transition-all duration-200\n                          sm:col-span-2 lg:col-span-1\">\n            <h3 className=\"text-base sm:text-lg font-semibold text-white mb-2\">\n              Performance\n            </h3>\n            <p className=\"text-white/60 text-sm sm:text-base\">\n              Optimized for large datasets with virtualization support and minimal rerenders.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionDemo;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/providers/BiometricsProvider.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/providers/BiometricsProvider.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport { Subscription } from 'rxjs';\nimport { wellnessEngine, BiometricsState, WellnessTrigger } from '@/features/biometric-intervention/api/WellnessEngine';\nimport { biometricStream, BiometricReading } from '@/features/biometric-intervention/api/BiometricStream';\n\n// Context selector types\ntype BiometricsSelector<T> = (state: BiometricsState) => T;\n\ninterface BiometricsContextValue {\n  state: BiometricsState | null;\n  isInitialized: boolean;\n  startEngine: () => void;\n  stopEngine: () => void;\n  triggerManualCheck: () => Promise<BiometricsState | null>;\n  addTrigger: (trigger: WellnessTrigger) => void;\n  removeTrigger: (triggerId: string) => void;\n  updateTrigger: (triggerId: string, updates: Partial<WellnessTrigger>) => void;\n  getHistory: () => BiometricReading[];\n  clearHistory: () => void;\n}\n\nconst BiometricsContext = createContext<BiometricsContextValue | undefined>(undefined);\n\n// Context selector hook for optimized re-renders\nexport function useBiometricsSelector<T>(\n  selector: BiometricsSelector<T>,\n  equalityFn?: (a: T, b: T) => boolean\n): T {\n  const context = useContext(BiometricsContext);\n  if (!context) {\n    throw new Error('useBiometricsSelector must be used within a BiometricsProvider');\n  }\n\n  const { state } = context;\n  const [selectedValue, setSelectedValue] = useState<T>(() => \n    state ? selector(state) : null as T\n  );\n  const selectorRef = useRef(selector);\n  const equalityFnRef = useRef(equalityFn);\n  const lastSelectedRef = useRef(selectedValue);\n\n  // Update refs\n  selectorRef.current = selector;\n  equalityFnRef.current = equalityFn;\n\n  useEffect(() => {\n    if (!state) return;\n\n    const newValue = selectorRef.current(state);\n    const isEqual = equalityFnRef.current \n      ? equalityFnRef.current(lastSelectedRef.current, newValue)\n      : lastSelectedRef.current === newValue;\n\n    if (!isEqual) {\n      lastSelectedRef.current = newValue;\n      setSelectedValue(newValue);\n    }\n  }, [state]);\n\n  return selectedValue;\n}\n\n// Convenience hooks for common selectors\nexport function useBiometrics(): BiometricsContextValue {\n  const context = useContext(BiometricsContext);\n  if (!context) {\n    throw new Error('useBiometrics must be used within a BiometricsProvider');\n  }\n  return context;\n}\n\nexport function useStressIndex(): number {\n  return useBiometricsSelector(state => state.stressIndex, (a, b) => Math.abs(a - b) < 1);\n}\n\nexport function useWellnessScore(): number {\n  return useBiometricsSelector(state => state.wellnessScore, (a, b) => Math.abs(a - b) < 1);\n}\n\nexport function useShouldIntervene(): boolean {\n  return useBiometricsSelector(state => state.shouldIntervene);\n}\n\nexport function useHeartRate(): number | undefined {\n  return useBiometricsSelector(state => state.heartRate, (a, b) => \n    (a || 0) === (b || 0) || Math.abs((a || 0) - (b || 0)) < 2\n  );\n}\n\nexport function useBiometricTrends(): {\n  stressTrend: 'rising' | 'falling' | 'stable';\n  wellnessTrend: 'improving' | 'declining' | 'stable';\n} {\n  return useBiometricsSelector(\n    state => ({\n      stressTrend: state.stressTrend,\n      wellnessTrend: state.wellnessTrend,\n    }),\n    (a, b) => a.stressTrend === b.stressTrend && a.wellnessTrend === b.wellnessTrend\n  );\n}\n\nexport function useConnectedDevices(): Array<{\n  id: string;\n  name: string;\n  type: string;\n  isConnected: boolean;\n}> {\n  return useBiometricsSelector(\n    state => state.connectedDevices,\n    (a, b) => \n      a.length === b.length && \n      a.every((device, index) => \n        device.id === b[index].id && \n        device.isConnected === b[index].isConnected\n      )\n  );\n}\n\nexport function useInterventionLevel(): 'none' | 'mild' | 'moderate' | 'severe' {\n  return useBiometricsSelector(state => state.interventionLevel);\n}\n\n// Provider component with initialization and cleanup\ninterface BiometricsProviderProps {\n  children: React.ReactNode;\n  autoStart?: boolean;\n  debugMode?: boolean;\n}\n\nexport const BiometricsProvider: React.FC<BiometricsProviderProps> = ({\n  children,\n  autoStart = true,\n  debugMode = false,\n}) => {\n  const [state, setState] = useState<BiometricsState | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const subscriptionRef = useRef<Subscription | null>(null);\n  const debugTimerRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Initialize wellness engine and subscribe to state changes\n  useEffect(() => {\n    if (debugMode) {\n      console.log('🧠 BiometricsProvider: Initializing...');\n    }\n\n    const subscription = wellnessEngine.state$.subscribe({\n      next: (newState) => {\n        setState(newState);\n        \n        if (debugMode) {\n          console.log('🧠 BiometricsState Update:', {\n            stressIndex: newState.stressIndex,\n            wellnessScore: newState.wellnessScore,\n            shouldIntervene: newState.shouldIntervene,\n            timestamp: newState.timestamp,\n            syncDelay: Date.now() - new Date(newState.lastReading || 0).getTime(),\n          });\n        }\n      },\n      error: (error) => {\n        console.error('BiometricsProvider subscription error:', error);\n      },\n    });\n\n    subscriptionRef.current = subscription;\n    setIsInitialized(true);\n\n    if (autoStart) {\n      wellnessEngine.startEngine();\n    }\n\n    // Debug timer for sync monitoring\n    if (debugMode) {\n      debugTimerRef.current = setInterval(() => {\n        const currentState = wellnessEngine.getCurrentState();\n        if (currentState) {\n          const syncDelay = Date.now() - new Date(currentState.lastReading || 0).getTime();\n          if (syncDelay > 50) {\n            console.warn(`🧠 Sync delay warning: ${syncDelay}ms`);\n          }\n        }\n      }, 1000);\n    }\n\n    return () => {\n      subscription.unsubscribe();\n      if (debugTimerRef.current) {\n        clearInterval(debugTimerRef.current);\n      }\n      wellnessEngine.stopEngine();\n      \n      if (debugMode) {\n        console.log('🧠 BiometricsProvider: Cleaned up');\n      }\n    };\n  }, [autoStart, debugMode]);\n\n  // Memoized context value to prevent unnecessary re-renders\n  const contextValue = useMemo<BiometricsContextValue>(() => ({\n    state,\n    isInitialized,\n    startEngine: () => {\n      wellnessEngine.startEngine();\n      if (debugMode) console.log('🧠 Engine started');\n    },\n    stopEngine: () => {\n      wellnessEngine.stopEngine();\n      if (debugMode) console.log('🧠 Engine stopped');\n    },\n    triggerManualCheck: async () => {\n      if (debugMode) console.log('🧠 Manual check triggered');\n      return wellnessEngine.triggerManualCheck();\n    },\n    addTrigger: (trigger: WellnessTrigger) => {\n      wellnessEngine.addTrigger(trigger);\n      if (debugMode) console.log('🧠 Trigger added:', trigger.id);\n    },\n    removeTrigger: (triggerId: string) => {\n      wellnessEngine.removeTrigger(triggerId);\n      if (debugMode) console.log('🧠 Trigger removed:', triggerId);\n    },\n    updateTrigger: (triggerId: string, updates: Partial<WellnessTrigger>) => {\n      wellnessEngine.updateTrigger(triggerId, updates);\n      if (debugMode) console.log('🧠 Trigger updated:', triggerId);\n    },\n    getHistory: () => wellnessEngine.getHistory(),\n    clearHistory: () => {\n      wellnessEngine.clearHistory();\n      if (debugMode) console.log('🧠 History cleared');\n    },\n  }), [state, isInitialized, debugMode]);\n\n  return (\n    <BiometricsContext.Provider value={contextValue}>\n      {children}\n    </BiometricsContext.Provider>\n  );\n};\n\n// HOC for components that need biometrics\nexport function withBiometrics<P extends object>(\n  Component: React.ComponentType<P>\n): React.FC<P> {\n  return function BiometricsWrappedComponent(props: P) {\n    return (\n      <BiometricsProvider>\n        <Component {...props} />\n      </BiometricsProvider>\n    );\n  };\n}\n\n// Custom hook for synchronized stress and wellness with <50ms guarantee\nexport function useSynchronizedMetrics(): {\n  stressIndex: number;\n  wellnessScore: number;\n  syncTimestamp: string;\n  isInSync: boolean;\n} {\n  return useBiometricsSelector(\n    state => ({\n      stressIndex: state.stressIndex,\n      wellnessScore: state.wellnessScore,\n      syncTimestamp: state.timestamp,\n      isInSync: state.lastReading ? \n        (Date.now() - new Date(state.lastReading).getTime()) < 50 : false,\n    }),\n    (a, b) => \n      a.stressIndex === b.stressIndex && \n      a.wellnessScore === b.wellnessScore &&\n      a.syncTimestamp === b.syncTimestamp\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/schemas/gap10.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/schemas/gap10.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from \"zod\";\n\nexport const LinkedAccountSchema = z.object({\n  id: z.string(),\n  provider: z.string(),\n  displayName: z.string(),\n  institutionName: z.string(),\n  lastFour: z.string().length(4),\n  type: z.enum([\"checking\", \"savings\", \"credit\", \"loan\", \"investment\"]),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\nexport const RecurringChargeSchema = z.object({\n  id: z.string(),\n  accountId: z.string(),\n  merchantName: z.string(),\n  amount: z.number(),\n  frequency: z.enum([\"weekly\", \"biweekly\", \"monthly\", \"quarterly\", \"yearly\"]),\n  nextDueDate: z.string(),\n  status: z.enum([\"active\", \"canceled\", \"pending_cancel\"]),\n});\n\nexport const NegotiationCaseSchema = z.object({\n  id: z.string(),\n  chargeId: z.string(),\n  status: z.enum([\"queued\", \"in_progress\", \"completed\", \"failed\"]),\n  savingsAmount: z.number().optional(),\n  submittedAt: z.string(),\n  completedAt: z.string().optional(),\n});\n\nexport const AutosavePlanSchema = z.object({\n  id: z.string(),\n  accountId: z.string(),\n  targetAmount: z.number(),\n  cadence: z.enum([\"daily\", \"weekly\", \"monthly\"]),\n  nextTransferDate: z.string(),\n  isActive: z.boolean(),\n});\n\nexport const HouseholdMemberSchema = z.object({\n  userId: z.string(),\n  role: z.enum([\"owner\", \"admin\", \"member\"]),\n});\n\nexport const HouseholdSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  members: z.array(HouseholdMemberSchema),\n  createdAt: z.string(),\n});\n\nexport const AgeMetricSchema = z.object({\n  averageDaysHeld: z.number(),\n  calculatedAt: z.string(),\n});\n\nexport const PrivacySettingSchema = z.object({\n  hideAmounts: z.boolean(),\n  updatedAt: z.string(),\n});\n\nexport const AdvisorMessageSchema = z.object({\n  id: z.string(),\n  sender: z.enum([\"user\", \"advisor\", \"system\"]),\n  content: z.string(),\n  createdAt: z.string(),\n});\n\nexport const AdvisorThreadSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  messages: z.array(AdvisorMessageSchema),\n  isEscalated: z.boolean(),\n});\n\nexport const SpendableCashSchema = z.object({\n  amount: z.number(),\n  payday: z.string(),\n  calculatedAt: z.string(),\n});\n\nexport const HomeWidgetSchema = z.object({\n  id: z.string(),\n  type: z.enum([\"balance\", \"safe_to_spend\"]),\n  position: z.number(),\n  config: z.record(z.unknown()),\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/screens/MobileTransactionScreen.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/screens/MobileTransactionScreen.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Search, ArrowLeft, MoreHorizontal, ChevronRight, Truck, Package, CheckCircle } from 'lucide-react';\nimport { cn } from '@/shared/lib/utils';\n\nconst MobileTransactionScreen: React.FC = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Mock transaction data optimized for mobile\n  const transactions = [\n    {\n      id: '1',\n      merchant: 'Whole Foods',\n      category: 'Groceries',\n      amount: -127.43,\n      date: '2025-06-14',\n      time: '2:34 PM',\n      status: 'completed' as const,\n      icon: '🛒'\n    },\n    {\n      id: '2',\n      merchant: 'Apple Store',\n      category: 'Electronics',\n      amount: -899.00,\n      date: '2025-06-14',\n      time: '11:15 AM',\n      status: 'completed' as const,\n      icon: '🍎',\n      shipping: { status: 'In Transit' as const, estimatedDelivery: '2025-06-17' }\n    },\n    {\n      id: '3',\n      merchant: 'Amazon',\n      category: 'Shopping',\n      amount: -156.78,\n      date: '2025-06-14',\n      time: '9:42 AM',\n      status: 'completed' as const,\n      icon: '📦',\n      shipping: { status: 'Delivered' as const }\n    },\n    {\n      id: '4',\n      merchant: 'Salary',\n      category: 'Income',\n      amount: 3250.00,\n      date: '2025-06-13',\n      time: '12:00 AM',\n      status: 'completed' as const,\n      icon: '💰'\n    },\n    {\n      id: '5',\n      merchant: 'Starbucks',\n      category: 'Coffee',\n      amount: -6.85,\n      date: '2025-06-13',\n      time: '8:15 AM',\n      status: 'completed' as const,\n      icon: '☕'\n    },\n    {\n      id: '6',\n      merchant: 'Uber',\n      category: 'Transportation',\n      amount: -23.45,\n      date: '2025-06-12',\n      time: '6:30 PM',\n      status: 'pending' as const,\n      icon: '🚗'\n    }\n  ];\n\n  const formatAmount = (amount: number) => {\n    const formatted = Math.abs(amount).toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    });\n    return amount < 0 ? `-${formatted}` : `+${formatted}`;\n  };\n\n  const getShippingIcon = (status: string) => {\n    switch (status) {\n      case 'Delivered':\n        return <CheckCircle className=\"w-3 h-3 text-green-500\" />;\n      case 'Out for Delivery':\n        return <Truck className=\"w-3 h-3 text-blue-500\" />;\n      case 'In Transit':\n        return <Package className=\"w-3 h-3 text-orange-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    if (date.toDateString() === today.toDateString()) {\n      return 'Today';\n    } else if (date.toDateString() === yesterday.toDateString()) {\n      return 'Yesterday';\n    } else {\n      return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    }\n  };\n\n  const groupedTransactions = transactions.reduce((groups, transaction) => {\n    const dateKey = formatDate(transaction.date);\n    if (!groups[dateKey]) {\n      groups[dateKey] = [];\n    }\n    groups[dateKey].push(transaction);\n    return groups;\n  }, {} as Record<string, typeof transactions>);\n\n  return (\n    <div className=\"h-full bg-black text-white overflow-hidden\">\n      {/* Status Bar */}\n      <div className=\"h-11 bg-black relative\">\n        <div className=\"absolute top-2 left-6 text-white text-sm font-medium\">9:41</div>\n        <div className=\"absolute top-2 right-6 flex items-center gap-1\">\n          <div className=\"w-6 h-3 border border-white rounded-sm\">\n            <div className=\"w-4 h-1 bg-white rounded-sm m-0.5\"></div>\n          </div>\n        </div>\n      </div>\n\n      {/* Header */}\n      <div className=\"px-4 pt-2 pb-4\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <button className=\"p-2 -ml-2\">\n            <ArrowLeft className=\"w-6 h-6 text-blue-500\" />\n          </button>\n          <h1 className=\"text-lg font-semibold\">Transactions</h1>\n          <button className=\"p-2 -mr-2\">\n            <MoreHorizontal className=\"w-6 h-6 text-blue-500\" />\n          </button>\n        </div>\n\n        {/* Search Bar */}\n        <div className=\"relative mb-4\">\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center\">\n            <Search className=\"h-4 w-4 text-gray-400\" />\n          </div>\n          <input\n            type=\"text\"\n            placeholder=\"Search\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full pl-10 pr-4 py-2 bg-gray-900 border-0 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n      </div>\n\n      {/* Transaction List */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {Object.entries(groupedTransactions).map(([date, dateTransactions]) => (\n          <div key={date} className=\"mb-6\">\n            {/* Date Header */}\n            <div className=\"px-4 py-2\">\n              <h3 className=\"text-sm font-medium text-gray-400 uppercase tracking-wider\">\n                {date}\n              </h3>\n            </div>\n\n            {/* Transactions */}\n            <div className=\"bg-gray-900 mx-4 rounded-xl overflow-hidden\">\n              {dateTransactions.map((transaction, index) => (\n                <div key={transaction.id}>\n                  <div className=\"flex items-center gap-3 p-4\">\n                    {/* Icon */}\n                    <div className=\"w-8 h-8 rounded-full bg-gray-800 flex items-center justify-center text-lg flex-shrink-0\">\n                      {transaction.icon}\n                    </div>\n\n                    {/* Details */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <h4 className=\"font-medium text-white text-sm truncate\">\n                          {transaction.merchant}\n                        </h4>\n                        <span className={cn(\n                          'font-semibold text-sm',\n                          transaction.amount > 0 ? 'text-green-400' : 'text-white'\n                        )}>\n                          {formatAmount(transaction.amount)}\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-xs text-gray-400\">{transaction.category}</span>\n                          <span className=\"text-xs text-gray-500\">•</span>\n                          <span className=\"text-xs text-gray-400\">{transaction.time}</span>\n                          {transaction.status === 'pending' && (\n                            <>\n                              <span className=\"text-xs text-gray-500\">•</span>\n                              <span className=\"text-xs text-yellow-500\">Pending</span>\n                            </>\n                          )}\n                        </div>\n                        <ChevronRight className=\"w-4 h-4 text-gray-500 flex-shrink-0\" />\n                      </div>\n\n                      {/* Shipping Status */}\n                      {transaction.shipping && (\n                        <div className=\"flex items-center gap-2 mt-2 p-2 bg-gray-800 rounded-md\">\n                          {getShippingIcon(transaction.shipping.status)}\n                          <span className=\"text-xs text-gray-300\">\n                            {transaction.shipping.status}\n                          </span>\n                          {transaction.shipping.estimatedDelivery && transaction.shipping.status !== 'Delivered' && (\n                            <>\n                              <span className=\"text-xs text-gray-500\">•</span>\n                              <span className=\"text-xs text-gray-500\">\n                                ETA {new Date(transaction.shipping.estimatedDelivery).toLocaleDateString()}\n                              </span>\n                            </>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Divider */}\n                  {index < dateTransactions.length - 1 && (\n                    <div className=\"ml-14 mr-4 border-b border-gray-800\" />\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Home Indicator */}\n      <div className=\"flex justify-center pb-2\">\n        <div className=\"w-32 h-1 bg-gray-600 rounded-full\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default MobileTransactionScreen;\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/selectors/financialSelectors.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/selectors/financialSelectors.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Account } from '@/types/accounts';\n\n/**\n * Centralized financial selectors for consistent calculations across the app\n */\n\n/**\n * Calculate total wealth (net worth) from accounts\n * Assets - Liabilities = Net Worth\n * \n * @param accounts Array of user accounts\n * @returns Total net worth value\n */\nexport const selectTotalWealth = (accounts: Account[]): number => {\n  // Filter out inactive accounts\n  const activeAccounts = accounts.filter(account => \n    account.isActive !== false && \n    account.balance !== undefined\n  );\n\n  // Calculate total assets (non-credit accounts)\n  const totalAssets = activeAccounts\n    .filter(account => {\n      const type = account.accountType?.toLowerCase() || '';\n      return !type.includes('credit') && !type.includes('loan');\n    })\n    .reduce((sum, account) => sum + (account.balance || 0), 0);\n\n  // Calculate total liabilities (credit cards and loans)\n  const totalLiabilities = activeAccounts\n    .filter(account => {\n      const type = account.accountType?.toLowerCase() || '';\n      return type.includes('credit') || type.includes('loan');\n    })\n    .reduce((sum, account) => {\n      // Credit cards typically have negative balances when there's debt\n      // Convert to positive for liability calculation\n      return sum + Math.abs(account.balance || 0);\n    }, 0);\n\n  return totalAssets - totalLiabilities;\n};\n\n/**\n * Calculate total assets from accounts\n * @param accounts Array of user accounts\n * @returns Total assets value\n */\nexport const selectTotalAssets = (accounts: Account[]): number => {\n  return accounts\n    .filter(account => {\n      if (account.isActive === false) return false;\n      const type = account.accountType?.toLowerCase() || '';\n      return !type.includes('credit') && !type.includes('loan');\n    })\n    .reduce((sum, account) => sum + (account.balance || 0), 0);\n};\n\n/**\n * Calculate total liabilities from accounts\n * @param accounts Array of user accounts\n * @returns Total liabilities value (as positive number)\n */\nexport const selectTotalLiabilities = (accounts: Account[]): number => {\n  return accounts\n    .filter(account => {\n      if (account.isActive === false) return false;\n      const type = account.accountType?.toLowerCase() || '';\n      return type.includes('credit') || type.includes('loan');\n    })\n    .reduce((sum, account) => sum + Math.abs(account.balance || 0), 0);\n};\n\n/**\n * Calculate liquid assets (checking + savings)\n * @param accounts Array of user accounts\n * @returns Total liquid assets\n */\nexport const selectLiquidAssets = (accounts: Account[]): number => {\n  return accounts\n    .filter(account => {\n      if (account.isActive === false) return false;\n      const type = account.accountType?.toLowerCase() || '';\n      return type.includes('checking') || type.includes('savings');\n    })\n    .reduce((sum, account) => sum + (account.balance || 0), 0);\n};\n\n/**\n * Calculate investment assets\n * @param accounts Array of user accounts\n * @returns Total investment value\n */\nexport const selectInvestmentAssets = (accounts: Account[]): number => {\n  return accounts\n    .filter(account => {\n      if (account.isActive === false) return false;\n      const type = account.accountType?.toLowerCase() || '';\n      return type.includes('investment') || type.includes('retirement') || type.includes('401k') || type.includes('ira');\n    })\n    .reduce((sum, account) => sum + (account.balance || 0), 0);\n};\n\n/**\n * Group accounts by type with totals\n * @param accounts Array of user accounts\n * @returns Grouped account totals\n */\nexport const selectAccountsByType = (accounts: Account[]) => {\n  const activeAccounts = accounts.filter(account => account.isActive !== false);\n  \n  return {\n    checking: activeAccounts\n      .filter(acc => (acc.accountType || '').toLowerCase().includes('checking'))\n      .reduce((sum, acc) => sum + (acc.balance || 0), 0),\n    \n    savings: activeAccounts\n      .filter(acc => (acc.accountType || '').toLowerCase().includes('savings'))\n      .reduce((sum, acc) => sum + (acc.balance || 0), 0),\n    \n    creditCards: activeAccounts\n      .filter(acc => (acc.accountType || '').toLowerCase().includes('credit'))\n      .reduce((sum, acc) => sum + Math.abs(acc.balance || 0), 0),\n    \n    investments: activeAccounts\n      .filter(acc => {\n        const type = (acc.accountType || '').toLowerCase();\n        return type.includes('investment') || type.includes('retirement');\n      })\n      .reduce((sum, acc) => sum + (acc.balance || 0), 0),\n    \n    loans: activeAccounts\n      .filter(acc => (acc.accountType || '').toLowerCase().includes('loan'))\n      .reduce((sum, acc) => sum + Math.abs(acc.balance || 0), 0)\n  };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/services/ecoScoreService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/services/ecoScoreService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/*\n  ecoScoreService.ts\n  ------------------\n  Simple life-cycle carbon model that converts transaction categories into an\n  EcoScore (0–100) where 100 = ultra-sustainable.  Numbers are **illustrative**\n  – replace the `EMISSION_FACTORS` with verified coefficients from your\n  sustainability provider (e.g. Sustain.Life, Greenly, Doconomy).\n*/\n\nimport { Transaction } from '@/types/shared';\n\nexport interface EcoBreakdown {\n  totalKgCO2e: number;\n  transportKg: number;\n  foodKg: number;\n  shoppingKg: number;\n  utilitiesKg: number;\n  sustainableSpendRatio: number; // % of spending tagged sustainable\n  score: number; // 0-100\n}\n\n// kg CO2e per $ for high-level spend categories (placeholder values)\nconst EMISSION_FACTORS: Record<string, number> = {\n  Transportation: 0.7,\n  Food: 0.5,\n  Shopping: 0.4,\n  Utilities: 0.3,\n  Default: 0.25\n};\n\nconst SUSTAINABLE_MERCHANTS = [\n  'Whole Foods',\n  'Trader Joe',\n  'Patagonia',\n  'Tesla Supercharger',\n  'Amtrak',\n  'REI'\n];\n\n/**\n * Calculates environmental impact score based on transaction data.\n * \n * Analyzes spending patterns to estimate carbon footprint using emission factors\n * per dollar spent in different categories. Considers sustainable merchant preferences\n * to provide a comprehensive eco-score from 0-100 (higher is better).\n * \n * @param transactions - Array of financial transactions to analyze\n * @returns EcoBreakdown object with CO2 emissions, sustainable spending ratio, and overall score\n * \n * @example\n * ```typescript\n * const transactions = [\n *   { id: '1', merchant: 'Gas Station', category: { name: 'Transportation' }, amount: -50 },\n *   { id: '2', merchant: 'Whole Foods', category: { name: 'Food' }, amount: -120 }\n * ];\n * const ecoData = calculateEcoScore(transactions);\n * console.log(ecoData.score); // Environmental score 0-100\n * ```\n */\nexport const calculateEcoScore = (transactions: Transaction[]): EcoBreakdown => {\n  let transportKg = 0;\n  let foodKg = 0;\n  let shoppingKg = 0;\n  let utilitiesKg = 0;\n  let sustainableSpend = 0;\n  let totalSpend = 0;\n\n  transactions.forEach(t => {\n    if (t.amount >= 0) return; // only consider spend\n    const spendAbs = Math.abs(t.amount);\n    totalSpend += spendAbs;\n\n    const cat = t.category?.name ?? 'Default';\n    const factor = EMISSION_FACTORS[cat] ?? EMISSION_FACTORS.Default;\n    const kg = spendAbs * factor;\n\n    switch (cat) {\n      case 'Transportation':\n        transportKg += kg;\n        break;\n      case 'Food':\n        foodKg += kg;\n        break;\n      case 'Utilities':\n        utilitiesKg += kg;\n        break;\n      case 'Shopping':\n      default:\n        shoppingKg += kg;\n    }\n\n    if (SUSTAINABLE_MERCHANTS.some(m => t.merchant?.includes(m))) {\n      sustainableSpend += spendAbs;\n    }\n  });\n\n  const totalKgCO2e = transportKg + foodKg + shoppingKg + utilitiesKg;\n  const sustainableSpendRatio = totalSpend > 0 ? (sustainableSpend / totalSpend) * 100 : 0;\n\n  // Convert kgCO2e to score where lower emissions & higher sustainable spend is better\n  const emissionScore = 100 - Math.min(100, (totalKgCO2e / 500) * 100); // 500kg threshold\n  const sustainableScore = sustainableSpendRatio; // direct percentage\n\n  const score = Math.round((emissionScore * 0.7) + (sustainableScore * 0.3));\n\n  return {\n    totalKgCO2e,\n    transportKg,\n    foodKg,\n    shoppingKg,\n    utilitiesKg,\n    sustainableSpendRatio: Math.round(sustainableSpendRatio),\n    score\n  };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/services/mockAiService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/services/mockAiService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nexport interface ChatMessage {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n}\n\nexport interface BudgetInsight {\n  category: string;\n  spent: number;\n  budget: number;\n  variance: number;\n  trend: 'up' | 'down' | 'stable';\n}\n\n// Enhanced AI service with health and eco advice\nexport const mockAiService = {\n  sendMessage: async (message: string, context?: Record<string, unknown>): Promise<ChatMessage> => {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));\n    \n    const lowerMessage = message.toLowerCase();\n    let response = '';\n\n    if (lowerMessage.includes('health') || lowerMessage.includes('fitness') || lowerMessage.includes('wellness')) {\n      const healthResponses = [\n        \"I see you've been spending on fitness! Your health score is looking good at 78. Consider budgeting $100/month for gym membership and healthy meals.\",\n        \"Your healthcare spending shows you're prioritizing preventive care - that's smart financially! Each $1 spent on prevention can save $4 in future medical costs.\",\n        \"I notice some fast food expenses. Meal prepping could save you $120/month while boosting your health score by 15 points.\",\n        \"Your wellness spending is balanced! Your current health score of 78 reflects good lifestyle choices within budget.\"\n      ];\n      response = healthResponses[Math.floor(Math.random() * healthResponses.length)];\n    }\n    else if (lowerMessage.includes('eco') || lowerMessage.includes('green') || lowerMessage.includes('environment') || lowerMessage.includes('sustainable')) {\n      const ecoResponses = [\n        \"Your eco score of 72 is impressive! You're spending 42% with sustainable brands. Consider adding $25/month for carbon offsets to reach 80+.\",\n        \"I see opportunities to improve your environmental impact. Switching to green energy could save $30/month and boost your eco score significantly.\",\n        \"Your sustainable spending habits are reducing your carbon footprint by 18kg CO₂ monthly - equivalent to planting 1 tree per month!\",\n        \"Transportation spending is low - great for both budget and environment! Your green transport score is helping your overall eco rating.\"\n      ];\n      response = ecoResponses[Math.floor(Math.random() * ecoResponses.length)];\n    }\n    else if (lowerMessage.includes('budget') || lowerMessage.includes('save') || lowerMessage.includes('money')) {\n      const budgetResponses = [\n        \"Based on your spending patterns, I'd recommend setting aside $200 more for groceries this month to maintain your health goals.\",\n        \"Your savings rate of 15% is excellent! Consider allocating some towards both health insurance and sustainable investments.\",\n        \"I notice you have several subscriptions. Reviewing them could free up $50/month for your health and eco budget goals.\",\n        \"Your emergency fund covers 4.2 months of expenses - that's solid! Now might be time to invest in preventive healthcare.\"\n      ];\n      response = budgetResponses[Math.floor(Math.random() * budgetResponses.length)];\n    }\n    else {\n      const generalResponses = [\n        \"I can help you balance your financial, health, and environmental goals. What specific area would you like to focus on?\",\n        \"Your overall financial health is strong with room for improvement in sustainable spending. Would you like specific recommendations?\",\n        \"I see great potential to optimize your budget across health, eco-friendly choices, and traditional investments. What's your priority?\",\n        \"Your spending patterns show you value both health and sustainability. Let's explore how to maximize impact in both areas within your budget.\"\n      ];\n      response = generalResponses[Math.floor(Math.random() * generalResponses.length)];\n    }\n    \n    return {\n      id: `msg_${Date.now()}`,\n      role: 'assistant',\n      content: response,\n      timestamp: new Date()\n    };\n  },\n\n  getBudgetInsights: (): BudgetInsight[] => [\n    { category: 'Groceries', spent: 580, budget: 600, variance: -20, trend: 'stable' },\n    { category: 'Dining', spent: 420, budget: 300, variance: 120, trend: 'up' },\n    { category: 'Transportation', spent: 180, budget: 200, variance: -20, trend: 'down' },\n    { category: 'Entertainment', spent: 150, budget: 200, variance: -50, trend: 'stable' },\n    { category: 'Health & Fitness', spent: 85, budget: 100, variance: -15, trend: 'stable' },\n    { category: 'Sustainable Products', spent: 95, budget: 80, variance: 15, trend: 'up' }\n  ]\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/services/mockData.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/services/mockData.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Transaction, Account } from '@/shared/types/shared';\nimport { AccountCardDTO, accountToCardDTO } from '@/shared/types/accounts';\n\nexport type { Transaction, Account } from '@/shared/types/shared';\n\n// CC: Enhanced mock data with ≥20 accounts for Smart Accounts Deck requirements\nexport const mockAccountsEnhanced = [\n  {\n    id: 'acc_001',\n    familyId: 'demo_family',\n    name: 'Main Checking',\n    accountType: 'depository' as const,\n    accountSubtype: 'checking' as const,\n    institutionName: 'Chase Bank',\n    balance: 12450.00,\n    availableBalance: 11200.00,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****1234',\n      apy: 0.01,\n      fees: [],\n      sparklineData: [12200, 12300, 12100, 12400, 12450]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_002',\n    familyId: 'demo_family',\n    name: 'Emergency Fund',\n    accountType: 'depository' as const,\n    accountSubtype: 'savings' as const,\n    institutionName: 'Bank of America',\n    balance: 25780.50,\n    availableBalance: 25780.50,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****5678',\n      apy: 2.15,\n      fees: [],\n      sparklineData: [25200, 25400, 25600, 25700, 25780]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_003',\n    familyId: 'demo_family',\n    name: 'Rewards Card',\n    accountType: 'credit' as const,\n    accountSubtype: 'credit_card' as const,\n    institutionName: 'Wells Fargo',\n    balance: -1245.30,\n    availableBalance: 8754.70,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****9012',\n      creditLimit: 10000,\n      fees: [],\n      sparklineData: [-1100, -1200, -1300, -1200, -1245]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_004',\n    familyId: 'demo_family',\n    name: 'Investment Portfolio',\n    accountType: 'investment' as const,\n    accountSubtype: 'brokerage' as const,\n    institutionName: 'Schwab',\n    balance: 45600.25,\n    availableBalance: 45600.25,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****3456',\n      fees: [],\n      sparklineData: [44800, 45200, 45100, 45400, 45600]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  // CC: Additional 20 accounts for Smart Accounts Deck virtual scrolling\n  {\n    id: 'acc_005',\n    familyId: 'demo_family',\n    name: 'Business Checking',\n    accountType: 'depository' as const,\n    accountSubtype: 'checking' as const,\n    institutionName: 'JPMorgan Chase',\n    balance: 8920.14,\n    availableBalance: 8920.14,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****7890',\n      apy: 0.05,\n      fees: [],\n      sparklineData: [8800, 8850, 8900, 8880, 8920]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_006',\n    familyId: 'demo_family',\n    name: '401(k) Retirement',\n    accountType: 'investment' as const,\n    accountSubtype: '401k' as const,\n    institutionName: 'Fidelity',\n    balance: 174250.67,\n    availableBalance: 174250.67,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****4567',\n      fees: [],\n      sparklineData: [172000, 173000, 173500, 174000, 174250]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_007',\n    familyId: 'demo_family',\n    name: 'Traditional IRA',\n    accountType: 'investment' as const,\n    accountSubtype: 'ira' as const,\n    institutionName: 'Vanguard',\n    balance: 62340.22,\n    availableBalance: 62340.22,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****8901',\n      fees: [],\n      sparklineData: [61800, 62000, 62100, 62200, 62340]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_008',\n    familyId: 'demo_family',\n    name: 'Health Savings',\n    accountType: 'depository' as const,\n    accountSubtype: 'savings' as const,\n    institutionName: 'HSA Bank',\n    balance: 12450.11,\n    availableBalance: 12450.11,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****2345',\n      apy: 1.75,\n      fees: [],\n      sparklineData: [12200, 12300, 12350, 12400, 12450]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_009',\n    familyId: 'demo_family',\n    name: 'College 529 Plan',\n    accountType: 'investment' as const,\n    accountSubtype: '529' as const,\n    institutionName: 'T. Rowe Price',\n    balance: 18230.89,\n    availableBalance: 18230.89,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****6789',\n      fees: [],\n      sparklineData: [17800, 18000, 18100, 18150, 18230]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_010',\n    familyId: 'demo_family',\n    name: 'Emergency Savings',\n    accountType: 'depository' as const,\n    accountSubtype: 'savings' as const,\n    institutionName: 'Ally Bank',\n    balance: 8500.00,\n    availableBalance: 8500.00,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****0123',\n      apy: 4.25,\n      fees: [],\n      sparklineData: [8200, 8300, 8400, 8450, 8500]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_011',\n    familyId: 'demo_family',\n    name: 'Travel Rewards',\n    accountType: 'credit' as const,\n    accountSubtype: 'credit_card' as const,\n    institutionName: 'American Express',\n    balance: -2890.45,\n    availableBalance: 7109.55,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****4567',\n      creditLimit: 10000,\n      fees: [],\n      sparklineData: [-2500, -2700, -2800, -2850, -2890]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_012',\n    familyId: 'demo_family',\n    name: 'Business Savings',\n    accountType: 'depository' as const,\n    accountSubtype: 'savings' as const,\n    institutionName: 'Capital One',\n    balance: 34567.89,\n    availableBalance: 34567.89,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****8901',\n      apy: 3.50,\n      fees: [],\n      sparklineData: [34000, 34200, 34400, 34500, 34567]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_013',\n    familyId: 'demo_family',\n    name: 'Roth IRA',\n    accountType: 'investment' as const,\n    accountSubtype: 'roth_ira' as const,\n    institutionName: 'E*TRADE',\n    balance: 56789.12,\n    availableBalance: 56789.12,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****2345',\n      fees: [],\n      sparklineData: [56200, 56400, 56600, 56700, 56789]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_014',\n    familyId: 'demo_family',\n    name: 'Cash Management',\n    accountType: 'depository' as const,\n    accountSubtype: 'checking' as const,\n    institutionName: 'Goldman Sachs',\n    balance: 15678.90,\n    availableBalance: 15678.90,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****6789',\n      apy: 2.75,\n      fees: [],\n      sparklineData: [15400, 15500, 15600, 15650, 15678]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_015',\n    familyId: 'demo_family',\n    name: 'Cashback Card',\n    accountType: 'credit' as const,\n    accountSubtype: 'credit_card' as const,\n    institutionName: 'Discover',\n    balance: -567.23,\n    availableBalance: 9432.77,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****0123',\n      creditLimit: 10000,\n      fees: [],\n      sparklineData: [-400, -500, -550, -560, -567]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_016',\n    familyId: 'demo_family',\n    name: 'Money Market',\n    accountType: 'depository' as const,\n    accountSubtype: 'savings' as const,\n    institutionName: 'Marcus by Goldman Sachs',\n    balance: 67890.34,\n    availableBalance: 67890.34,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****4567',\n      apy: 4.10,\n      fees: [],\n      sparklineData: [67200, 67500, 67700, 67800, 67890]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_017',\n    familyId: 'demo_family',\n    name: 'Crypto Portfolio',\n    accountType: 'investment' as const,\n    accountSubtype: 'brokerage' as const,\n    institutionName: 'Coinbase',\n    balance: 12345.67,\n    availableBalance: 12345.67,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****8901',\n      fees: [],\n      sparklineData: [11000, 11500, 12000, 12200, 12345]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_018',\n    familyId: 'demo_family',\n    name: 'Student Loan',\n    accountType: 'loan' as const,\n    accountSubtype: 'student' as const,\n    institutionName: 'Navient',\n    balance: -23456.78,\n    availableBalance: 0,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****2345',\n      fees: [],\n      sparklineData: [-24000, -23800, -23600, -23500, -23456]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_019',\n    familyId: 'demo_family',\n    name: 'Auto Loan',\n    accountType: 'loan' as const,\n    accountSubtype: 'auto' as const,\n    institutionName: 'Chase Auto Finance',\n    balance: -18765.43,\n    availableBalance: 0,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****6789',\n      fees: [],\n      sparklineData: [-19500, -19200, -19000, -18800, -18765]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_020',\n    familyId: 'demo_family',\n    name: 'Home Equity LOC',\n    accountType: 'credit' as const,\n    accountSubtype: 'line_of_credit' as const,\n    institutionName: 'Wells Fargo',\n    balance: -5432.10,\n    availableBalance: 44567.90,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****0123',\n      creditLimit: 50000,\n      fees: [],\n      sparklineData: [-5000, -5200, -5300, -5400, -5432]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_021',\n    familyId: 'demo_family',\n    name: 'CD Ladder 1',\n    accountType: 'depository' as const,\n    accountSubtype: 'cd' as const,\n    institutionName: 'Navy Federal',\n    balance: 25000.00,\n    availableBalance: 0,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****4567',\n      apy: 4.75,\n      fees: [],\n      sparklineData: [24800, 24900, 24950, 24975, 25000]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_022',\n    familyId: 'demo_family',\n    name: 'Brokerage Account',\n    accountType: 'investment' as const,\n    accountSubtype: 'brokerage' as const,\n    institutionName: 'TD Ameritrade',\n    balance: 89012.34,\n    availableBalance: 89012.34,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****8901',\n      fees: [],\n      sparklineData: [87000, 88000, 88500, 88800, 89012]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_023',\n    familyId: 'demo_family',\n    name: 'Joint Savings',\n    accountType: 'depository' as const,\n    accountSubtype: 'savings' as const,\n    institutionName: 'USAA',\n    balance: 43210.98,\n    availableBalance: 43210.98,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****2345',\n      apy: 3.25,\n      fees: [],\n      sparklineData: [42800, 43000, 43100, 43150, 43210]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc_024',\n    familyId: 'demo_family',\n    name: 'Premium Card',\n    accountType: 'credit' as const,\n    accountSubtype: 'credit_card' as const,\n    institutionName: 'Chase Sapphire',\n    balance: -4567.89,\n    availableBalance: 20432.11,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active' as const,\n    metadata: {\n      accountNumber: '****6789',\n      creditLimit: 25000,\n      fees: [],\n      sparklineData: [-4200, -4300, -4400, -4500, -4567]\n    },\n    createdAt: new Date(),\n    updatedAt: new Date()\n  }\n];\n\n// CC: Enhanced institution data with logos and branding for Smart Accounts Deck\nexport const mockInstitutions = {\n  'Chase Bank': { name: 'Chase Bank', color: '#117A65', logo: '/institution-logos/chase.png' },\n  'Bank of America': { name: 'Bank of America', color: '#E51B23', logo: '/institution-logos/boa.png' },\n  'Wells Fargo': { name: 'Wells Fargo', color: '#D71E2B', logo: '/institution-logos/wells-fargo.png' },\n  'Schwab': { name: 'Charles Schwab', color: '#00A0DF', logo: '/institution-logos/schwab.png' },\n  'JPMorgan Chase': { name: 'JPMorgan Chase', color: '#117A65', logo: '/institution-logos/chase.png' },\n  'Fidelity': { name: 'Fidelity', color: '#00653A', logo: '/institution-logos/fidelity.png' },\n  'Vanguard': { name: 'Vanguard', color: '#B41E3B', logo: '/institution-logos/vanguard.png' },\n  'HSA Bank': { name: 'HSA Bank', color: '#4A90E2', logo: '/institution-logos/hsa-bank.png' },\n  'T. Rowe Price': { name: 'T. Rowe Price', color: '#003DA5', logo: '/institution-logos/trowe.png' },\n  'Ally Bank': { name: 'Ally Bank', color: '#8B4C9A', logo: '/institution-logos/ally.png' },\n  'American Express': { name: 'American Express', color: '#006FCF', logo: '/institution-logos/amex.png' },\n  'Capital One': { name: 'Capital One', color: '#004879', logo: '/institution-logos/capital-one.png' },\n  'E*TRADE': { name: 'E*TRADE', color: '#6633CC', logo: '/institution-logos/etrade.png' },\n  'Goldman Sachs': { name: 'Goldman Sachs', color: '#1E3A8A', logo: '/institution-logos/goldman.png' },\n  'Discover': { name: 'Discover', color: '#FF6000', logo: '/institution-logos/discover.png' },\n  'Marcus by Goldman Sachs': { name: 'Marcus', color: '#1E3A8A', logo: '/institution-logos/marcus.png' },\n  'Coinbase': { name: 'Coinbase', color: '#0052FF', logo: '/institution-logos/coinbase.png' },\n  'Navient': { name: 'Navient', color: '#0066CC', logo: '/institution-logos/navient.png' },\n  'Chase Auto Finance': { name: 'Chase Auto', color: '#117A65', logo: '/institution-logos/chase.png' },\n  'Navy Federal': { name: 'Navy Federal', color: '#003F7F', logo: '/institution-logos/navy-federal.png' },\n  'TD Ameritrade': { name: 'TD Ameritrade', color: '#00A651', logo: '/institution-logos/td-ameritrade.png' },\n  'USAA': { name: 'USAA', color: '#003F7F', logo: '/institution-logos/usaa.png' },\n  'Chase Sapphire': { name: 'Chase Sapphire', color: '#117A65', logo: '/institution-logos/chase-sapphire.png' },\n  'Robinhood': { name: 'Robinhood', color: '#00C805', logo: '/institution-logos/robinhood.png' },\n  'WeBull': { name: 'WeBull', color: '#2962FF', logo: '/institution-logos/webull.png' },\n  'Chime': { name: 'Chime', color: '#0BBF6D', logo: '/institution-logos/chime.png' }\n};\n\nexport const mockData = {\n  accounts: [\n    {\n      id: 'acc_001',\n      type: 'Checking',\n      nickname: 'Main Account',\n      balance: 12450.00,\n      availableBalance: 11200.00,\n      currency: 'USD'\n    },\n    {\n      id: 'acc_002',\n      type: 'Savings',\n      nickname: 'Emergency Fund',\n      balance: 25780.50,\n      availableBalance: 25780.50,\n      currency: 'USD'\n    },\n    {\n      id: 'acc_003',\n      type: 'Credit Card',\n      nickname: 'Rewards Card',\n      balance: -1245.30,\n      availableBalance: 8754.70,\n      currency: 'USD'\n    },\n    {\n      id: 'acc_004',\n      type: 'Investment',\n      nickname: 'Portfolio',\n      balance: 45600.25,\n      availableBalance: 45600.25,\n      currency: 'USD'\n    },\n    {\n      id: 'acc_005',\n      type: 'Checking',\n      nickname: 'Chase Banking',\n      balance: 8920.14,\n      availableBalance: 8920.14,\n      currency: 'USD'\n    },\n    {\n      id: 'acc_006',\n      type: 'Retirement',\n      nickname: '401(k)',\n      balance: 174250.67,\n      availableBalance: 174250.67,\n      currency: 'USD'\n    },\n    {\n      id: 'acc_007',\n      type: 'Retirement',\n      nickname: 'Traditional IRA',\n      balance: 62340.22,\n      availableBalance: 62340.22,\n      currency: 'USD'\n    },\n    {\n      id: 'acc_008',\n      type: 'Savings',\n      nickname: '502A Health Savings',\n      balance: 12450.11,\n      availableBalance: 12450.11,\n      currency: 'USD'\n    },\n    {\n      id: 'acc_009',\n      type: 'Education',\n      nickname: 'College Savings 529',\n      balance: 18230.89,\n      availableBalance: 18230.89,\n      currency: 'USD'\n    },\n    {\n      id: 'acc_010',\n      type: 'Savings',\n      nickname: 'Disaster Savings',\n      balance: 8500.00,\n      availableBalance: 8500.00,\n      currency: 'USD'\n    }\n  ] as Account[],\n\n  transactions: [\n    {\n      id: 'txn_001',\n      merchant: 'Whole Foods Market',\n      category: { name: 'Groceries', color: '#34C759' },\n      amount: -127.43,\n      date: '2025-06-14T10:30:00Z',\n      status: 'completed' as const\n    },\n    {\n      id: 'txn_002',\n      merchant: 'Apple Store',\n      category: { name: 'Electronics', color: '#007AFF' },\n      amount: -899.00,\n      date: '2025-06-14T08:15:00Z',\n      status: 'completed' as const,\n      trackingNumber: '1Z999AA1234567890',\n      shippingProvider: 'UPS' as const,\n      deliveryStatus: 'In Transit' as const\n    },\n    {\n      id: 'txn_003',\n      merchant: 'Amazon',\n      category: { name: 'Shopping', color: '#FF9500' },\n      amount: -156.78,\n      date: '2025-06-14T12:45:00Z',\n      status: 'completed' as const,\n      trackingNumber: '771234567890',\n      shippingProvider: 'FedEx' as const,\n      deliveryStatus: 'Delivered' as const\n    },\n    {\n      id: 'txn_004',\n      merchant: 'Salary Deposit',\n      category: { name: 'Income', color: '#34C759' },\n      amount: 3250.00,\n      date: '2025-06-13T09:00:00Z',\n      status: 'completed' as const\n    },\n    {\n      id: 'txn_005',\n      merchant: 'Best Buy',\n      category: { name: 'Electronics', color: '#007AFF' },\n      amount: -234.99,\n      date: '2025-06-13T16:20:00Z',\n      status: 'completed' as const,\n      trackingNumber: '9400110200793123456789',\n      shippingProvider: 'USPS' as const,\n      deliveryStatus: 'Out for Delivery' as const\n    },\n    {\n      id: 'txn_006',\n      merchant: 'Starbucks',\n      category: { name: 'Coffee', color: '#FF9500' },\n      amount: -6.85,\n      date: '2025-06-13T07:45:00Z',\n      status: 'completed' as const\n    },\n    {\n      id: 'txn_007',\n      merchant: 'Target',\n      category: { name: 'Shopping', color: '#FF3B30' },\n      amount: -89.42,\n      date: '2025-06-12T14:30:00Z',\n      status: 'completed' as const,\n      trackingNumber: '1Z12345E0123456789',\n      shippingProvider: 'UPS' as const,\n      deliveryStatus: 'Delivered' as const\n    },\n    {\n      id: 'txn_008',\n      merchant: 'Gas Station',\n      category: { name: 'Transportation', color: '#FF3B30' },\n      amount: -45.20,\n      date: '2025-06-12T18:30:00Z',\n      status: 'pending' as const\n    },\n    {\n      id: 'txn_009',\n      merchant: 'Netflix',\n      category: { name: 'Entertainment', color: '#E50914' },\n      amount: -15.99,\n      date: '2025-06-11T09:00:00Z',\n      status: 'completed' as const\n    },\n    {\n      id: 'txn_010',\n      merchant: 'Uber',\n      category: { name: 'Transportation', color: '#000000' },\n      amount: -23.45,\n      date: '2025-06-11T18:30:00Z',\n      status: 'completed' as const\n    },\n    {\n      id: 'txn_011',\n      merchant: 'Home Depot',\n      category: { name: 'Home Improvement', color: '#FF8C00' },\n      amount: -120.33,\n      date: '2025-06-10T15:45:00Z',\n      status: 'completed' as const,\n      trackingNumber: '1ZHD123456789',\n      shippingProvider: 'UPS' as const,\n      deliveryStatus: 'Delivered' as const\n    },\n    {\n      id: 'txn_012',\n      merchant: 'Spotify',\n      category: { name: 'Entertainment', color: '#1DB954' },\n      amount: -9.99,\n      date: '2025-06-10T05:30:00Z',\n      status: 'completed' as const\n    },\n    {\n      id: 'txn_013',\n      merchant: 'Walmart',\n      category: { name: 'Groceries', color: '#34C759' },\n      amount: -58.12,\n      date: '2025-06-09T20:10:00Z',\n      status: 'completed' as const,\n      trackingNumber: 'WM123456789US',\n      shippingProvider: 'USPS' as const,\n      deliveryStatus: 'In Transit' as const\n    },\n    {\n      id: 'txn_014',\n      merchant: 'Lowe\\'s',\n      category: { name: 'Home Improvement', color: '#007AFF' },\n      amount: -240.00,\n      date: '2025-06-09T13:00:00Z',\n      status: 'completed' as const\n    },\n    {\n      id: 'txn_015',\n      merchant: 'DoorDash',\n      category: { name: 'Dining', color: '#FF3B30' },\n      amount: -34.56,\n      date: '2025-06-08T23:15:00Z',\n      status: 'completed' as const,\n      trackingNumber: 'DD123456',\n      shippingProvider: 'FedEx' as const,\n      deliveryStatus: 'Delivered' as const\n    },\n    {\n      id: 'txn_016',\n      merchant: 'CVS Pharmacy',\n      category: { name: 'Health', color: '#8E44AD' },\n      amount: -12.89,\n      date: '2025-06-08T18:40:00Z',\n      status: 'completed' as const\n    },\n    {\n      id: 'txn_017',\n      merchant: 'Lyft',\n      category: { name: 'Transportation', color: '#FF00BF' },\n      amount: -18.75,\n      date: '2025-06-07T21:10:00Z',\n      status: 'completed' as const\n    },\n    {\n      id: 'txn_018',\n      merchant: 'eBay',\n      category: { name: 'Shopping', color: '#FF9500' },\n      amount: -65.00,\n      date: '2025-06-07T09:22:00Z',\n      status: 'completed' as const,\n      trackingNumber: 'EBAY987654321',\n      shippingProvider: 'UPS' as const,\n      deliveryStatus: 'Out for Delivery' as const\n    },\n    {\n      id: 'txn_019',\n      merchant: 'Chipotle',\n      category: { name: 'Dining', color: '#FF3B30' },\n      amount: -11.25,\n      date: '2025-06-06T13:37:00Z',\n      status: 'completed' as const\n    },\n    {\n      id: 'txn_020',\n      merchant: 'Nike.com',\n      category: { name: 'Shopping', color: '#FF9500' },\n      amount: -120.00,\n      date: '2025-06-06T16:05:00Z',\n      status: 'completed' as const,\n      trackingNumber: '1ZNIKE123456',\n      shippingProvider: 'UPS' as const,\n      deliveryStatus: 'In Transit' as const\n    },\n    {\n      id: 'txn_021',\n      merchant: 'Paycheck',\n      category: { name: 'Income', color: '#34C759' },\n      amount: 3250.00,\n      date: '2025-06-05T00:00:00Z',\n      status: 'completed' as const\n    },\n    {\n      id: 'txn_022',\n      merchant: 'Costco',\n      category: { name: 'Groceries', color: '#34C759' },\n      amount: -210.45,\n      date: '2025-06-05T19:40:00Z',\n      status: 'completed' as const\n    },\n    {\n      id: 'txn_023',\n      merchant: 'Apple Music',\n      category: { name: 'Entertainment', color: '#E50914' },\n      amount: -10.99,\n      date: '2025-06-04T04:20:00Z',\n      status: 'completed' as const\n    },\n    {\n      id: 'txn_024',\n      merchant: 'Best Buy',\n      category: { name: 'Electronics', color: '#007AFF' },\n      amount: -79.99,\n      date: '2025-06-04T17:55:00Z',\n      status: 'completed' as const,\n      trackingNumber: 'BB987654321',\n      shippingProvider: 'FedEx' as const,\n      deliveryStatus: 'Delivered' as const\n    },\n    {\n      id: 'txn_025',\n      merchant: 'Grocery Store',\n      category: { name: 'Groceries', color: '#34C759' },\n      amount: -92.10,\n      date: '2025-06-03T11:30:00Z',\n      status: 'completed' as const\n    },\n    {\n      id: 'txn_026',\n      merchant: 'Amazon',\n      category: { name: 'Shopping', color: '#FF9500' },\n      amount: -32.45,\n      date: '2025-06-03T14:05:00Z',\n      status: 'completed' as const,\n      trackingNumber: 'AMZ123987456',\n      shippingProvider: 'UPS' as const,\n      deliveryStatus: 'In Transit' as const\n    },\n    {\n      id: 'txn_027',\n      merchant: 'Subway',\n      category: { name: 'Dining', color: '#FF3B30' },\n      amount: -8.90,\n      date: '2025-06-02T12:00:00Z',\n      status: 'completed' as const\n    },\n    {\n      id: 'txn_028',\n      merchant: 'Apple.com',\n      category: { name: 'Electronics', color: '#007AFF' },\n      amount: -299.00,\n      date: '2025-06-02T07:30:00Z',\n      status: 'completed' as const,\n      trackingNumber: 'APL123456789',\n      shippingProvider: 'UPS' as const,\n      deliveryStatus: 'Out for Delivery' as const\n    },\n    {\n      id: 'txn_029',\n      merchant: 'Gym Membership',\n      category: { name: 'Health', color: '#8E44AD' },\n      amount: -55.00,\n      date: '2025-06-01T02:30:00Z',\n      status: 'completed' as const\n    },\n    {\n      id: 'txn_030',\n      merchant: 'Whole Foods Market',\n      category: { name: 'Groceries', color: '#34C759' },\n      amount: -140.25,\n      date: '2025-06-01T18:15:00Z',\n      status: 'completed' as const,\n      trackingNumber: 'WF123456',\n      shippingProvider: 'USPS' as const,\n      deliveryStatus: 'Delivered' as const\n    }\n  ] as Transaction[]\n};\n\n// Helper function to generate AccountCardDTO from mock data\nexport const getCompactAccountCards = (): AccountCardDTO[] => {\n  return mockAccountsEnhanced.map(account => \n    accountToCardDTO(\n      account, \n      mockData.transactions.filter(t => Math.random() > 0.7), // Random subset of transactions\n      mockInstitutions[account.institutionName || 'Chase Bank']\n    )\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/services/mockHealthEcoService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/services/mockHealthEcoService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Transaction } from '@/types/shared';\n\nexport interface HealthData {\n  score: number;\n  trends: {\n    exercise: number;\n    nutrition: number;\n    sleep: number;\n    stress: number;\n  };\n}\n\nexport interface EcoData {\n  score: number;\n  metrics: {\n    carbonFootprint: number;\n    sustainableSpending: number;\n    greenTransport: number;\n    renewableEnergy: number;\n  };\n  monthlyImpact: {\n    co2Saved: number;\n    treesEquivalent: number;\n  };\n}\n\nexport const mockHealthEcoService = {\n  getHealthScore: (transactions: Transaction[]): HealthData => {\n    // Mock calculation based on spending patterns\n    const fitnessSpending = transactions\n      .filter(t => t.category?.name === 'Fitness' || t.merchant?.includes('Gym'))\n      .reduce((sum, t) => sum + Math.abs(t.amount), 0);\n\n    const fastFoodSpending = transactions\n      .filter(t => t.merchant?.includes('McDonald') || t.merchant?.includes('Fast'))\n      .reduce((sum, t) => sum + Math.abs(t.amount), 0);\n\n    const healthcareSpending = transactions\n      .filter(t => t.category?.name === 'Healthcare')\n      .reduce((sum, t) => sum + Math.abs(t.amount), 0);\n\n    let baseScore = 65;\n    if (fitnessSpending > 100) baseScore += 15;\n    if (fastFoodSpending < 50) baseScore += 10;\n    if (healthcareSpending > 50) baseScore += 10;\n\n    const finalHealthScore = Math.min(100, Math.max(0, baseScore));\n\n    return {\n      score: Math.round(finalHealthScore),\n      trends: {\n        exercise: Math.round(Math.min(100, (fitnessSpending / 10) + 40)),\n        nutrition: Math.round(Math.max(0, 80 - (fastFoodSpending / 5))),\n        sleep: 75,\n        stress: 65\n      }\n    };\n  },\n\n  getEcoScore: (transactions: Transaction[]): EcoData => {\n    const sustainableMerchants = ['Whole Foods', 'Trader Joe', 'REI', 'Patagonia'];\n    const transportSpending = transactions\n      .filter(t => t.category?.name === 'Transportation')\n      .reduce((sum, t) => sum + Math.abs(t.amount), 0);\n\n    const sustainableSpending = transactions\n      .filter(t => sustainableMerchants.some(merchant => t.merchant?.includes(merchant)))\n      .reduce((sum, t) => sum + Math.abs(t.amount), 0);\n\n    let baseScore = 72;\n    if (sustainableSpending > 200) baseScore += 15;\n    if (transportSpending < 150) baseScore += 10;\n\n    const finalScore = Math.min(100, Math.max(0, baseScore));\n    const co2Saved = Math.round((finalScore - 50) * 1.5);\n    const treesEquivalent = Math.round(co2Saved / 20);\n\n    return {\n      score: Math.round(finalScore),\n      metrics: {\n        carbonFootprint: Math.round(Math.max(0, 100 - finalScore)),\n        sustainableSpending: Math.round(Math.min(100, (sustainableSpending / 500) * 100)),\n        greenTransport: Math.round(Math.max(0, 100 - (transportSpending / 2))),\n        renewableEnergy: 85\n      },\n      monthlyImpact: {\n        co2Saved: Math.max(0, co2Saved),\n        treesEquivalent: Math.max(0, treesEquivalent)\n      }\n    };\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/services/mockHistoricalData.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/services/mockHistoricalData.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface HistoricalScore {\n  date: string;\n  financial: number;\n  health: number;\n  eco: number;\n}\n\nexport interface MonthlySpending {\n  date: string;\n  spending: number;\n  income: number;\n  savings: number;\n}\n\nexport interface CategoryTrend {\n  date: string;\n  fitness: number;\n  nutrition: number;\n  healthcare: number;\n  wellness: number;\n  supplements: number;\n  mentalHealth: number;\n  sustainableFood: number;\n  renewableEnergy: number;\n  ecoTransport: number;\n  greenProducts: number;\n  carbonOffset: number;\n  conservation: number;\n}\n\nexport interface NetWorthData {\n  date: string;\n  netWorth: number;\n  assets: number;\n  liabilities: number;\n  type: 'historical' | 'projected';\n  growthRate?: number;\n}\n\n// Generate historical scores for the past 12 months\nexport const generateHistoricalScores = (): HistoricalScore[] => {\n  const data: HistoricalScore[] = [];\n  const currentDate = new Date();\n  \n  // Start from 12 months ago\n  for (let i = 11; i >= 0; i--) {\n    const date = new Date(currentDate);\n    date.setMonth(date.getMonth() - i);\n    \n    // Generate realistic score progression with some randomness\n    const baseFinancial = 50 + (11 - i) * 1.5; // Gradual improvement\n    const baseHealth = 65 + Math.sin((11 - i) * 0.5) * 10; // Seasonal variation\n    const baseEco = 70 + (11 - i) * 1.2; // Steady improvement\n    \n    // Add some realistic variance\n    const variance = () => (Math.random() - 0.5) * 8;\n    \n    data.push({\n      date: date.toISOString().split('T')[0],\n      financial: Math.max(30, Math.min(85, baseFinancial + variance())),\n      health: Math.max(45, Math.min(90, baseHealth + variance())),\n      eco: Math.max(60, Math.min(95, baseEco + variance()))\n    });\n  }\n  \n  return data;\n};\n\n// Generate monthly financial data\nexport const generateMonthlyFinancialData = (): MonthlySpending[] => {\n  const data: MonthlySpending[] = [];\n  const currentDate = new Date();\n  \n  for (let i = 11; i >= 0; i--) {\n    const date = new Date(currentDate);\n    date.setMonth(date.getMonth() - i);\n    \n    // Base values with realistic trends\n    const baseIncome = 4200 + Math.sin((11 - i) * 0.3) * 300; // Slight seasonal variation\n    const baseSpending = 3200 + Math.sin((11 - i) * 0.4) * 400; // Holiday spending patterns\n    const savings = baseIncome - baseSpending;\n    \n    // Add some variance\n    const variance = () => (Math.random() - 0.5) * 200;\n    \n    data.push({\n      date: date.toISOString().split('T')[0],\n      spending: Math.max(2500, baseSpending + variance()),\n      income: Math.max(3500, baseIncome + variance()),\n      savings: Math.max(0, savings + variance())\n    });\n  }\n  \n  return data;\n};\n\n// Generate category spending trends\nexport const generateCategoryTrends = (): CategoryTrend[] => {\n  const data: CategoryTrend[] = [];\n  const currentDate = new Date();\n  \n  for (let i = 11; i >= 0; i--) {\n    const date = new Date(currentDate);\n    date.setMonth(date.getMonth() - i);\n    \n    // Seasonal patterns for different categories\n    const seasonalFactor = Math.sin((11 - i) * 0.5);\n    const trendFactor = (11 - i) * 0.1; // Gradual increase over time\n    \n    data.push({\n      date: date.toISOString().split('T')[0],\n      // Health categories\n      fitness: Math.max(50, 85 + seasonalFactor * 20 + trendFactor * 5),\n      nutrition: Math.max(30, 38 + seasonalFactor * 10),\n      healthcare: Math.max(200, 340 + seasonalFactor * 50),\n      wellness: Math.max(50, 75 + seasonalFactor * 15),\n      supplements: Math.max(30, 45 + seasonalFactor * 8),\n      mentalHealth: Math.max(80, 120 + seasonalFactor * 25),\n      // Eco categories\n      sustainableFood: Math.max(100, 127 + seasonalFactor * 20 + trendFactor * 10),\n      renewableEnergy: Math.max(70, 85 + seasonalFactor * 15),\n      ecoTransport: Math.max(30, 45 + seasonalFactor * 12),\n      greenProducts: Math.max(80, 120 + seasonalFactor * 25 + trendFactor * 8),\n      carbonOffset: Math.max(15, 25 + seasonalFactor * 8),\n      conservation: Math.max(40, 60 + seasonalFactor * 15 + trendFactor * 5)\n    });\n  }\n  \n  return data;\n};\n\n// Generate net worth data for 3 years historical + 2 years projected\nexport const generateNetWorthData = (): NetWorthData[] => {\n  const data: NetWorthData[] = [];\n  const currentDate = new Date();\n  \n  // Base financial values (in thousands)\n  const baseAssets = 85; // $85k in assets\n  const baseLiabilities = 25; // $25k in liabilities  \n  const monthlyNetSavings = 2.5; // $2.5k per month\n  \n  // Historical data (3 years = 36 months)\n  for (let i = 35; i >= 0; i--) {\n    const date = new Date(currentDate);\n    date.setMonth(date.getMonth() - i);\n    \n    // Calculate growth with realistic patterns\n    const monthsFromStart = 35 - i;\n    const yearProgress = monthsFromStart / 12;\n    \n    // Compound growth with market volatility\n    const marketVolatility = Math.sin(monthsFromStart * 0.3) * 0.15; // ±15% market swings\n    const economicCycle = Math.cos(monthsFromStart * 0.1) * 0.08; // Longer economic cycles\n    \n    // Assets grow with investments and salary increases\n    const assetGrowthRate = 0.07 + marketVolatility + economicCycle; // ~7% annual average\n    const currentAssets = baseAssets * Math.pow(1 + assetGrowthRate/12, monthsFromStart) + (monthlyNetSavings * monthsFromStart);\n    \n    // Liabilities decrease over time (paying down debt)\n    const debtPaydown = 200; // Monthly debt reduction\n    const currentLiabilities = Math.max(5000, baseLiabilities - (debtPaydown * monthsFromStart));\n    \n    const netWorth = currentAssets - currentLiabilities;\n    \n    // Add some realistic variance\n    const variance = netWorth * (Math.random() - 0.5) * 0.03; // ±3% variance\n    \n    data.push({\n      date: date.toISOString().split('T')[0],\n      netWorth: Math.round(netWorth + variance),\n      assets: Math.round(currentAssets + variance * 0.8),\n      liabilities: Math.round(currentLiabilities),\n      type: 'historical',\n      growthRate: monthsFromStart > 0 ? ((netWorth / (baseAssets - baseLiabilities)) - 1) * 100 : 0\n    });\n  }\n  \n  // Calculate historical growth trend for projections\n  const historicalData = data.slice(-12); // Last 12 months\n  const avgMonthlyGrowth = historicalData.reduce((sum, point, index) => {\n    if (index === 0) return 0;\n    const prevPoint = historicalData[index - 1];\n    const monthlyGrowthRate = (point.netWorth - prevPoint.netWorth) / prevPoint.netWorth;\n    return sum + monthlyGrowthRate;\n  }, 0) / (historicalData.length - 1);\n  \n  // Projected data (2 years = 24 months)\n  const lastHistoricalPoint = data[data.length - 1];\n  for (let i = 1; i <= 24; i++) {\n    const date = new Date(currentDate);\n    date.setMonth(date.getMonth() + i);\n    \n    // Project based on historical trends with some conservative adjustment\n    const conservativeFactor = 0.8; // Be 20% more conservative in projections\n    const projectedGrowthRate = avgMonthlyGrowth * conservativeFactor;\n    \n    // Add projected market cycles and economic uncertainty\n    const futureVolatility = Math.sin(i * 0.2) * 0.1; // Reduced volatility in projections\n    const adjustedGrowthRate = projectedGrowthRate + futureVolatility;\n    \n    const prevPoint = data[data.length - 1];\n    const projectedNetWorth = prevPoint.netWorth * (1 + adjustedGrowthRate);\n    const projectedAssets = prevPoint.assets * (1 + adjustedGrowthRate * 1.1); // Assets grow slightly faster\n    const projectedLiabilities = Math.max(2000, prevPoint.liabilities * 0.995); // Continued debt reduction\n    \n    data.push({\n      date: date.toISOString().split('T')[0],\n      netWorth: Math.round(projectedNetWorth),\n      assets: Math.round(projectedAssets),\n      liabilities: Math.round(projectedLiabilities),\n      type: 'projected',\n      growthRate: ((projectedNetWorth / lastHistoricalPoint.netWorth) - 1) * 100\n    });\n  }\n  \n  return data;\n};\n\n// Service object with all historical data generators\nexport const mockHistoricalService = {\n  getHistoricalScores: generateHistoricalScores,\n  getMonthlyFinancialData: generateMonthlyFinancialData,\n  getCategoryTrends: generateCategoryTrends,\n  getNetWorthData: generateNetWorthData\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/services/mockReportService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/services/mockReportService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nexport interface BudgetReport {\n  id: string;\n  month: string;\n  year: number;\n  totalSpent: number;\n  totalBudget: number;\n  categories: Array<{\n    name: string;\n    spent: number;\n    budget: number;\n    transactions: number;\n  }>;\n  insights: string[];\n  generatedAt: Date;\n}\n\nexport interface WrappedData {\n  year: number;\n  totalSpent: number;\n  totalSaved: number;\n  topMerchants: Array<{ name: string; amount: number; visits: number }>;\n  biggestPurchase: { merchant: string; amount: number; date: string };\n  categoriesImproved: string[];\n  savingsVsPreviousYear: number;\n  financialScore: number;\n}\n\nexport const mockReportService = {\n  getBudgetReport: (month: string, year: number): BudgetReport => ({\n    id: `report_${month}_${year}`,\n    month,\n    year,\n    totalSpent: 2847.65,\n    totalBudget: 3200.00,\n    categories: [\n      { name: 'Groceries', spent: 580, budget: 600, transactions: 23 },\n      { name: 'Dining', spent: 420, budget: 300, transactions: 15 },\n      { name: 'Transportation', spent: 180, budget: 200, transactions: 8 },\n      { name: 'Shopping', spent: 650, budget: 700, transactions: 12 },\n      { name: 'Entertainment', spent: 150, budget: 200, transactions: 6 }\n    ],\n    insights: [\n      \"You stayed under budget in 4 out of 5 categories!\",\n      \"Dining expenses increased by 40% from last month\",\n      \"Great job keeping transportation costs low\"\n    ],\n    generatedAt: new Date()\n  }),\n\n  getWrappedData: (year: number): WrappedData => ({\n    year,\n    totalSpent: 34567.89,\n    totalSaved: 8900.45,\n    topMerchants: [\n      { name: 'Whole Foods', amount: 3456.78, visits: 89 },\n      { name: 'Amazon', amount: 2890.45, visits: 34 },\n      { name: 'Starbucks', amount: 1245.67, visits: 156 },\n      { name: 'Target', amount: 1789.23, visits: 23 },\n      { name: 'Apple Store', amount: 1234.56, visits: 4 }\n    ],\n    biggestPurchase: {\n      merchant: 'Apple Store',\n      amount: 2499.00,\n      date: '2024-09-15'\n    },\n    categoriesImproved: ['Transportation', 'Utilities', 'Entertainment'],\n    savingsVsPreviousYear: 1245.67,\n    financialScore: 8.5\n  })\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/services/performanceService.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/services/performanceService.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n// Performance monitoring and optimization service\ninterface PerformanceMetrics {\n  loadTime: number;\n  renderTime: number;\n  memoryUsage: number;\n  componentCount: number;\n  bundleSize: number;\n}\n\ninterface PerformanceThresholds {\n  maxLoadTime: number; // 3 seconds\n  maxRenderTime: number; // 16ms for 60fps\n  maxMemoryUsage: number; // 50MB\n  maxComponentCount: number; // 100 components\n}\n\nclass PerformanceService {\n  private static instance: PerformanceService;\n  private metrics: PerformanceMetrics[] = [];\n  private thresholds: PerformanceThresholds = {\n    maxLoadTime: 3000,\n    maxRenderTime: 16,\n    maxMemoryUsage: 50 * 1024 * 1024, // 50MB\n    maxComponentCount: 100,\n  };\n\n  private constructor() {\n    this.setupPerformanceObserver();\n    this.trackMemoryUsage();\n  }\n\n  static getInstance(): PerformanceService {\n    if (!PerformanceService.instance) {\n      PerformanceService.instance = new PerformanceService();\n    }\n    return PerformanceService.instance;\n  }\n\n  // Setup Performance Observer for measuring paint and navigation timings\n  private setupPerformanceObserver(): void {\n    if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {\n      try {\n        // Observe navigation timing\n        const navObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          entries.forEach((entry) => {\n            if (entry.entryType === 'navigation') {\n              const navEntry = entry as PerformanceNavigationTiming;\n              this.recordMetric({\n                loadTime: navEntry.loadEventEnd - navEntry.loadEventStart,\n                renderTime: navEntry.domContentLoadedEventEnd - navEntry.domContentLoadedEventStart,\n                memoryUsage: this.getCurrentMemoryUsage(),\n                componentCount: this.getComponentCount(),\n                bundleSize: this.estimateBundleSize(),\n              });\n            }\n          });\n        });\n        navObserver.observe({ entryTypes: ['navigation'] });\n\n        // Observe paint timing\n        const paintObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          entries.forEach((entry) => {\n            if (entry.name === 'first-contentful-paint') {\n              console.log(`First Contentful Paint: ${entry.startTime}ms`);\n            }\n            if (entry.name === 'largest-contentful-paint') {\n              console.log(`Largest Contentful Paint: ${entry.startTime}ms`);\n            }\n          });\n        });\n        paintObserver.observe({ entryTypes: ['paint', 'largest-contentful-paint'] });\n\n                 // Observe layout shift\n        const layoutObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          let cls = 0;\n          entries.forEach((entry) => {\n            const layoutShiftEntry = entry as any;\n            if (!layoutShiftEntry.hadRecentInput) {\n              cls += layoutShiftEntry.value;\n            }\n          });\n          if (cls > 0.1) {\n            console.warn(`Cumulative Layout Shift detected: ${cls}`);\n          }\n        });\n        layoutObserver.observe({ entryTypes: ['layout-shift'] });\n      } catch (error) {\n        console.warn('Performance Observer not fully supported:', error);\n      }\n    }\n  }\n\n  // Track memory usage periodically\n  private trackMemoryUsage(): void {\n    if (typeof window !== 'undefined' && 'performance' in window && 'memory' in performance) {\n      setInterval(() => {\n        const memoryUsage = this.getCurrentMemoryUsage();\n        if (memoryUsage > this.thresholds.maxMemoryUsage) {\n          console.warn(`High memory usage detected: ${(memoryUsage / 1024 / 1024).toFixed(2)}MB`);\n          this.triggerGarbageCollection();\n        }\n      }, 30000); // Check every 30 seconds\n    }\n  }\n\n  // Get current memory usage (Chrome only)\n  private getCurrentMemoryUsage(): number {\n    if (typeof window !== 'undefined' && 'performance' in window && 'memory' in performance) {\n      return (performance as any).memory.usedJSHeapSize || 0;\n    }\n    return 0;\n  }\n\n  // Estimate bundle size based on script tags\n  private estimateBundleSize(): number {\n    if (typeof document === 'undefined') return 0;\n    \n    const scripts = document.querySelectorAll('script[src]');\n    let totalSize = 0;\n    \n    scripts.forEach((script) => {\n      // This is an estimation - in production you'd want actual bundle size metrics\n      const src = (script as HTMLScriptElement).src;\n      if (src.includes('index') || src.includes('vendor')) {\n        totalSize += 500 * 1024; // Estimate 500KB per major bundle\n      }\n    });\n    \n    return totalSize;\n  }\n\n  // Count React components (estimation)\n  private getComponentCount(): number {\n    if (typeof document === 'undefined') return 0;\n    \n    // Estimate based on elements with React-like attributes\n    const reactElements = document.querySelectorAll('[data-reactroot], [data-testid], .react-component');\n    return reactElements.length;\n  }\n\n  // Record performance metric\n  private recordMetric(metric: PerformanceMetrics): void {\n    this.metrics.push({\n      ...metric,\n      timestamp: Date.now(),\n    } as any);\n\n    // Keep only last 100 metrics\n    if (this.metrics.length > 100) {\n      this.metrics = this.metrics.slice(-100);\n    }\n\n    // Check for threshold violations\n    this.checkThresholds(metric);\n  }\n\n  // Check if metrics exceed thresholds\n  private checkThresholds(metric: PerformanceMetrics): void {\n    const violations: string[] = [];\n\n    if (metric.loadTime > this.thresholds.maxLoadTime) {\n      violations.push(`Load time: ${metric.loadTime}ms (max: ${this.thresholds.maxLoadTime}ms)`);\n    }\n\n    if (metric.renderTime > this.thresholds.maxRenderTime) {\n      violations.push(`Render time: ${metric.renderTime}ms (max: ${this.thresholds.maxRenderTime}ms)`);\n    }\n\n    if (metric.memoryUsage > this.thresholds.maxMemoryUsage) {\n      violations.push(`Memory usage: ${(metric.memoryUsage / 1024 / 1024).toFixed(2)}MB (max: ${(this.thresholds.maxMemoryUsage / 1024 / 1024).toFixed(2)}MB)`);\n    }\n\n    if (violations.length > 0) {\n      console.warn('Performance threshold violations detected:', violations);\n      this.optimizePerformance();\n    }\n  }\n\n  // Trigger garbage collection (if available)\n  private triggerGarbageCollection(): void {\n    if (typeof window !== 'undefined' && 'gc' in window) {\n      (window as any).gc();\n    }\n  }\n\n  // Auto-optimization strategies\n  private optimizePerformance(): void {\n    // Remove unused event listeners\n    this.cleanupEventListeners();\n    \n    // Clear old metrics\n    if (this.metrics.length > 50) {\n      this.metrics = this.metrics.slice(-50);\n    }\n    \n    // Suggest lazy loading\n    this.suggestLazyLoading();\n  }\n\n  // Cleanup event listeners\n  private cleanupEventListeners(): void {\n    // This would remove any unused event listeners\n    // Implementation depends on your specific event management\n  }\n\n  // Suggest lazy loading opportunities\n  private suggestLazyLoading(): void {\n    if (typeof document === 'undefined') return;\n    \n    // Check for images that could be lazy loaded\n    const images = document.querySelectorAll('img:not([loading=\"lazy\"])');\n    if (images.length > 10) {\n      console.warn(`Consider lazy loading ${images.length} images for better performance`);\n    }\n\n    // Check for heavy components that could be code-split\n    const heavyComponents = document.querySelectorAll('[data-heavy-component]');\n    if (heavyComponents.length > 0) {\n      console.warn('Consider code-splitting heavy components:', heavyComponents);\n    }\n  }\n\n  // Public API methods\n  public getAverageLoadTime(): number {\n    if (this.metrics.length === 0) return 0;\n    const totalLoadTime = this.metrics.reduce((sum, metric) => sum + metric.loadTime, 0);\n    return totalLoadTime / this.metrics.length;\n  }\n\n  public getAverageMemoryUsage(): number {\n    if (this.metrics.length === 0) return 0;\n    const totalMemory = this.metrics.reduce((sum, metric) => sum + metric.memoryUsage, 0);\n    return totalMemory / this.metrics.length;\n  }\n\n  public getCurrentMetrics(): PerformanceMetrics | null {\n    return this.metrics.length > 0 ? this.metrics[this.metrics.length - 1] : null;\n  }\n\n  public getMetricHistory(): PerformanceMetrics[] {\n    return [...this.metrics];\n  }\n\n  public setThresholds(newThresholds: Partial<PerformanceThresholds>): void {\n    this.thresholds = { ...this.thresholds, ...newThresholds };\n  }\n\n  // Component performance tracking\n  public trackComponentRender(componentName: string, renderTime: number): void {\n    if (renderTime > this.thresholds.maxRenderTime) {\n      console.warn(`Slow component render detected: ${componentName} took ${renderTime}ms`);\n    }\n  }\n\n  // Bundle analysis\n  public analyzeBundleSize(): Promise<void> {\n    return new Promise((resolve) => {\n      if (typeof window !== 'undefined' && 'performance' in window) {\n        const entries = performance.getEntriesByType('resource');\n        const scripts = entries.filter(entry => entry.name.endsWith('.js'));\n        \n        let totalSize = 0;\n        scripts.forEach((script) => {\n          if ('transferSize' in script) {\n            totalSize += (script as any).transferSize || 0;\n          }\n        });\n\n        console.log(`Total JavaScript bundle size: ${(totalSize / 1024).toFixed(2)}KB`);\n        \n        if (totalSize > 1024 * 1024) { // 1MB\n          console.warn('Large bundle size detected. Consider code splitting.');\n        }\n      }\n      resolve();\n    });\n  }\n\n  // Performance report\n  public generateReport(): string {\n    const currentMetrics = this.getCurrentMetrics();\n    const avgLoadTime = this.getAverageLoadTime();\n    const avgMemory = this.getAverageMemoryUsage();\n\n    return `\nPerformance Report:\n- Current Load Time: ${currentMetrics?.loadTime || 0}ms\n- Average Load Time: ${avgLoadTime.toFixed(2)}ms\n- Current Memory Usage: ${((currentMetrics?.memoryUsage || 0) / 1024 / 1024).toFixed(2)}MB\n- Average Memory Usage: ${(avgMemory / 1024 / 1024).toFixed(2)}MB\n- Component Count: ${currentMetrics?.componentCount || 0}\n- Metrics Collected: ${this.metrics.length}\n    `.trim();\n  }\n}\n\n// Export singleton instance\nexport const performanceService = PerformanceService.getInstance();\n\n// React Hook for component performance tracking\nexport const usePerformanceTracking = (componentName: string) => {\n  React.useEffect(() => {\n    const startTime = performance.now();\n    \n    return () => {\n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      performanceService.trackComponentRender(componentName, renderTime);\n    };\n  }, [componentName]);\n};\n\n// Higher-order component for performance tracking\nexport const withPerformanceTracking = <P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n  componentName?: string\n) => {\n  const PerformanceTrackedComponent = (props: P) => {\n    const name = componentName || WrappedComponent.displayName || WrappedComponent.name || 'Unknown';\n    usePerformanceTracking(name);\n    \n    return React.createElement(WrappedComponent, props);\n  };\n\n  PerformanceTrackedComponent.displayName = `withPerformanceTracking(${WrappedComponent.displayName || WrappedComponent.name})`;\n  \n  return PerformanceTrackedComponent;\n};\n\nexport default PerformanceService; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/services/scoringModel.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/services/scoringModel.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { calculateHealthScore, fetchHealthMetrics } from '@/features/biometric-intervention/api/healthKitService';\nimport { calculateEcoScore } from './ecoScoreService';\nimport { Transaction, Account } from '@/shared/types/shared';\n\nexport interface ScoreSummary {\n  financial: number;\n  health: number;\n  eco: number;\n}\n\nexport const calculateFinancialScore = (transactions: Transaction[], accounts: Account[]): number => {\n  const now = new Date();\n  const month = now.getMonth();\n\n  const monthlyIncome = transactions\n    .filter(t => t.amount > 0 && new Date(t.date).getMonth() === month)\n    .reduce((s, t) => s + t.amount, 0);\n\n  const monthlySpending = Math.abs(\n    transactions\n      .filter(t => t.amount < 0 && new Date(t.date).getMonth() === month)\n      .reduce((s, t) => s + t.amount, 0)\n  );\n\n  const totalBalance = accounts.reduce((s, a) => s + a.balance, 0);\n  const spendingRatio = monthlyIncome > 0 ? (monthlySpending / monthlyIncome) * 100 : 0;\n  const emergencyFundMonths = monthlySpending > 0 ? totalBalance / monthlySpending : 0;\n\n  // Weighted score\n  const spendScore = Math.max(0, 100 - spendingRatio); // lower spend better\n  const emergencyScore = Math.min(100, (emergencyFundMonths / 6) * 100);\n  const savingsRate = monthlyIncome > 0 ? ((monthlyIncome - monthlySpending) / monthlyIncome) * 100 : 0;\n  const savingsScore = Math.min(100, savingsRate);\n\n  return Math.round(spendScore * 0.4 + emergencyScore * 0.3 + savingsScore * 0.3);\n};\n\nexport const generateScoreSummary = async (\n  transactions: Transaction[],\n  accounts: Account[]\n): Promise<ScoreSummary> => {\n  const financial = calculateFinancialScore(transactions, accounts);\n\n  const healthMetrics = await fetchHealthMetrics();\n  const health = calculateHealthScore(healthMetrics).totalScore;\n\n  const eco = calculateEcoScore(transactions).score;\n\n  return { financial, health, eco };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/services/unifiedDataManager.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/services/unifiedDataManager.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Observable, BehaviorSubject, combineLatest } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n// Core data interfaces\nexport interface UnifiedDataState {\n  family: {\n    id: string;\n    netWorth: number;\n    monthlyIncome: number;\n    monthlyExpenses: number;\n    creditScore: number;\n    lastUpdated: string;\n  };\n  \n  health: {\n    wellnessScore: number;\n    stressLevel: number;\n    heartRate: number;\n    heartRateVariability: number;\n    sleepHours: number;\n    sleepScore: number;\n    steps: number;\n    activeMinutes: number;\n    activeCalories: number;\n    floors: number;\n    lastUpdated: string;\n  };\n  \n  wealth: {\n    totalWealth: number;\n    checkingBalance: number;\n    savingsBalance: number;\n    investmentValue: number;\n    creditCardDebt: number;\n    netWorth: number;\n    portfolioReturns: number;\n    savingsRate: number;\n    debtToIncomeRatio: number;\n    emergencyFundMonths: number;\n    lastUpdated: string;\n  };\n  \n  transactions: {\n    monthlySpending: number;\n    dailyAverage: number;\n    topCategories: Array<{\n      name: string;\n      amount: number;\n      percentage: number;\n    }>;\n    recentTransactions: Array<{\n      id: string;\n      merchant: string;\n      amount: number;\n      category: string;\n      date: string;\n    }>;\n    lastUpdated: string;\n  };\n  \n  goals: {\n    savingsGoals: Array<{\n      id: string;\n      name: string;\n      targetAmount: number;\n      currentAmount: number;\n      progress: number;\n      monthlyContribution: number;\n    }>;\n    totalProgress: number;\n    lastUpdated: string;\n  };\n  \n  correlations: {\n    stressSpending: number;\n    sleepROI: number;\n    activityDecisions: number;\n    lastCalculated: string;\n  };\n}\n\n// Singleton unified data manager\nclass UnifiedDataManager {\n  private static instance: UnifiedDataManager;\n  private dataState$ = new BehaviorSubject<UnifiedDataState>(this.generateInitialState());\n  \n  private constructor() {\n    this.initializeDataUpdates();\n  }\n  \n  public static getInstance(): UnifiedDataManager {\n    if (!UnifiedDataManager.instance) {\n      UnifiedDataManager.instance = new UnifiedDataManager();\n    }\n    return UnifiedDataManager.instance;\n  }\n  \n  // Public observables for components to subscribe to\n  public readonly familyData$ = this.dataState$.pipe(\n    map(state => state.family),\n    shareReplay(1)\n  );\n  \n  public readonly healthData$ = this.dataState$.pipe(\n    map(state => state.health),\n    shareReplay(1)\n  );\n  \n  public readonly wealthData$ = this.dataState$.pipe(\n    map(state => state.wealth),\n    shareReplay(1)\n  );\n  \n  public readonly transactionData$ = this.dataState$.pipe(\n    map(state => state.transactions),\n    shareReplay(1)\n  );\n  \n  public readonly goalsData$ = this.dataState$.pipe(\n    map(state => state.goals),\n    shareReplay(1)\n  );\n  \n  public readonly correlationData$ = this.dataState$.pipe(\n    map(state => state.correlations),\n    shareReplay(1)\n  );\n  \n  public readonly fullState$ = this.dataState$.asObservable();\n  \n  // Get current snapshot of data\n  public getSnapshot(): UnifiedDataState {\n    return this.dataState$.value;\n  }\n  \n  // Update specific data sections\n  public updateHealthData(updates: Partial<UnifiedDataState['health']>): void {\n    const currentState = this.dataState$.value;\n    this.dataState$.next({\n      ...currentState,\n      health: {\n        ...currentState.health,\n        ...updates,\n        lastUpdated: new Date().toISOString()\n      }\n    });\n    this.recalculateCorrelations();\n  }\n  \n  public updateWealthData(updates: Partial<UnifiedDataState['wealth']>): void {\n    const currentState = this.dataState$.value;\n    this.dataState$.next({\n      ...currentState,\n      wealth: {\n        ...currentState.wealth,\n        ...updates,\n        lastUpdated: new Date().toISOString()\n      }\n    });\n    this.recalculateCorrelations();\n  }\n  \n  public updateTransactionData(updates: Partial<UnifiedDataState['transactions']>): void {\n    const currentState = this.dataState$.value;\n    this.dataState$.next({\n      ...currentState,\n      transactions: {\n        ...currentState.transactions,\n        ...updates,\n        lastUpdated: new Date().toISOString()\n      }\n    });\n    this.recalculateCorrelations();\n  }\n  \n  // Generate realistic connected data with correlations\n  private generateInitialState(): UnifiedDataState {\n    const now = new Date().toISOString();\n    \n    // Base health metrics (these drive correlations)\n    const baseStress = 32; // Low stress day\n    const baseSleep = 7.5; // Good sleep\n    const baseActivity = 8247; // Steps for the day\n    const baseHRV = 45; // Good HRV\n    \n    // Calculate correlated financial metrics\n    // High stress = higher spending (correlation +0.65)\n    const stressMultiplier = 1 + (baseStress - 30) * 0.02; // Higher stress = more spending\n    const baseDailySpending = 136; // Base spending\n    const dailySpending = baseDailySpending * stressMultiplier;\n    \n    // Good sleep = better investment returns (correlation +0.52)\n    const sleepROIBonus = (baseSleep - 6) * 1.2; // Better sleep = better decisions\n    const baseROI = 8.2;\n    const currentROI = baseROI + sleepROIBonus;\n    \n    // Activity = better decision quality (correlation +0.52)\n    const activityBonus = Math.min(10, (baseActivity - 7000) / 1000 * 2);\n    \n    return {\n      family: {\n        id: 'demo_family',\n        netWorth: 127540,\n        monthlyIncome: 6500,\n        monthlyExpenses: 4200,\n        creditScore: 750,\n        lastUpdated: now\n      },\n      \n      health: {\n        wellnessScore: 85,\n        stressLevel: baseStress,\n        heartRate: 68,\n        heartRateVariability: baseHRV,\n        sleepHours: baseSleep,\n        sleepScore: 87,\n        steps: baseActivity,\n        activeMinutes: 47,\n        activeCalories: 486,\n        floors: 12,\n        lastUpdated: now\n      },\n      \n      wealth: {\n        totalWealth: 127540,\n        checkingBalance: 12450,\n        savingsBalance: 67890,\n        investmentValue: 85000,\n        creditCardDebt: 4567,\n        netWorth: 127540,\n        portfolioReturns: currentROI,\n        savingsRate: 18,\n        debtToIncomeRatio: 12,\n        emergencyFundMonths: 4.2,\n        lastUpdated: now\n      },\n      \n      transactions: {\n        monthlySpending: dailySpending * 30,\n        dailyAverage: dailySpending,\n        topCategories: [\n          { name: 'Food & Dining', amount: 580, percentage: 23.2 },\n          { name: 'Shopping', amount: 420, percentage: 16.8 },\n          { name: 'Transportation', amount: 180, percentage: 7.2 },\n          { name: 'Entertainment', amount: 150, percentage: 6.0 },\n          { name: 'Healthcare', amount: 340, percentage: 13.6 }\n        ],\n        recentTransactions: [\n          {\n            id: 'txn_001',\n            merchant: 'Whole Foods Market',\n            amount: -127.43,\n            category: 'Groceries',\n            date: new Date(Date.now() - 1000 * 60 * 60 * 12).toISOString()\n          },\n          {\n            id: 'txn_002',\n            merchant: 'Apple Store',\n            amount: -899.00,\n            category: 'Electronics',\n            date: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString()\n          },\n          {\n            id: 'txn_003',\n            merchant: 'Starbucks',\n            amount: -6.85 * stressMultiplier, // Stress influences coffee purchases\n            category: 'Coffee',\n            date: new Date(Date.now() - 1000 * 60 * 60 * 4).toISOString()\n          }\n        ],\n        lastUpdated: now\n      },\n      \n      goals: {\n        savingsGoals: [\n          {\n            id: 'goal_001',\n            name: 'Emergency Fund',\n            targetAmount: 25000,\n            currentAmount: 18500,\n            progress: 74,\n            monthlyContribution: 750\n          },\n          {\n            id: 'goal_002',\n            name: 'House Down Payment',\n            targetAmount: 50000,\n            currentAmount: 23400,\n            progress: 47,\n            monthlyContribution: 1200\n          },\n          {\n            id: 'goal_003',\n            name: 'Vacation Fund',\n            targetAmount: 8000,\n            currentAmount: 3200,\n            progress: 40,\n            monthlyContribution: 300\n          }\n        ],\n        totalProgress: 54,\n        lastUpdated: now\n      },\n      \n      correlations: {\n        stressSpending: 0.65, // Positive correlation: higher stress = more spending\n        sleepROI: 0.78, // Positive correlation: better sleep = better returns\n        activityDecisions: 0.52, // Positive correlation: more activity = better decisions\n        lastCalculated: now\n      }\n    };\n  }\n  \n  // Recalculate correlations when data changes\n  private recalculateCorrelations(): void {\n    const state = this.dataState$.value;\n    \n    // Simulate correlation calculations based on current data\n    const stressImpact = (state.health.stressLevel - 30) / 50; // Normalized stress impact\n    const sleepImpact = (state.health.sleepHours - 6) / 4; // Normalized sleep impact\n    const activityImpact = (state.health.steps - 7000) / 10000; // Normalized activity impact\n    \n    const updatedState = {\n      ...state,\n      correlations: {\n        stressSpending: Math.max(-1, Math.min(1, 0.6 + stressImpact * 0.3)),\n        sleepROI: Math.max(-1, Math.min(1, 0.7 + sleepImpact * 0.2)),\n        activityDecisions: Math.max(-1, Math.min(1, 0.5 + activityImpact * 0.3)),\n        lastCalculated: new Date().toISOString()\n      }\n    };\n    \n    this.dataState$.next(updatedState);\n  }\n  \n  // Simulate realistic data changes over time\n  private initializeDataUpdates(): void {\n    // Update health metrics every 30 seconds to simulate device sync\n    setInterval(() => {\n      const currentHealth = this.dataState$.value.health;\n      const timeOfDay = new Date().getHours();\n      \n      // Stress tends to be higher during work hours\n      const stressVariation = timeOfDay >= 9 && timeOfDay <= 17 ? 5 : -3;\n      const newStress = Math.max(15, Math.min(85, currentHealth.stressLevel + (Math.random() - 0.5) * 10 + stressVariation));\n      \n      // HRV varies inversely with stress\n      const newHRV = Math.max(20, Math.min(70, 75 - newStress * 0.5 + (Math.random() - 0.5) * 5));\n      \n      this.updateHealthData({\n        stressLevel: Math.round(newStress),\n        heartRateVariability: Math.round(newHRV),\n        wellnessScore: Math.round(100 - newStress * 0.8)\n      });\n    }, 30000);\n    \n    // Update financial metrics daily\n    setInterval(() => {\n      const currentWealth = this.dataState$.value.wealth;\n      const portfolioVariation = (Math.random() - 0.5) * 0.5; // ±0.25% daily variation\n      \n      this.updateWealthData({\n        portfolioReturns: Math.round((currentWealth.portfolioReturns + portfolioVariation) * 100) / 100\n      });\n    }, 24 * 60 * 60 * 1000); // Daily\n  }\n  \n  // Helper methods for component integration\n  public getFormattedData() {\n    const state = this.dataState$.value;\n    return {\n      // Format for ConsolidatedInsightsPage\n      insights: {\n        creditScore: state.family.creditScore,\n        financial: {\n          score: Math.round((state.wealth.savingsRate + (100 - state.wealth.debtToIncomeRatio)) / 2),\n          trend: 'up' as const,\n          trendValue: '+2.3%',\n          metrics: [\n            { \n              label: 'Total Wealth', \n              value: `$${(state.wealth.totalWealth / 1000).toFixed(0)}K`,\n              icon: 'DollarSign',\n              color: '#10b981' \n            },\n            { \n              label: 'Credit Score', \n              value: state.family.creditScore.toString(),\n              icon: 'Shield',\n              color: '#3b82f6' \n            },\n            { \n              label: 'Monthly Savings', \n              value: `$${Math.round(state.family.monthlyIncome * state.wealth.savingsRate / 100)}`,\n              icon: 'PiggyBank',\n              color: '#8b5cf6' \n            },\n            { \n              label: 'Investments', \n              value: `$${(state.wealth.investmentValue / 1000).toFixed(0)}K`,\n              icon: 'TrendingUp',\n              color: '#f59e0b' \n            }\n          ]\n        },\n        wellness: {\n          score: state.health.wellnessScore,\n          trend: 'up' as const,\n          trendValue: '+5%'\n        }\n      },\n      \n      // Format for Analytics dashboard  \n      analytics: {\n        overallScores: {\n          health: state.health.wellnessScore,\n          wealth: Math.round((state.wealth.savingsRate + (100 - state.wealth.debtToIncomeRatio)) / 2),\n          sustainability: 82, // Calculated from eco spending\n          financial_wellness: Math.round((state.health.wellnessScore + state.wealth.savingsRate) / 2)\n        },\n        correlations: [\n          {\n            id: 'stress-spending',\n            type: 'stress-spending',\n            correlationCoefficient: state.correlations.stressSpending,\n            strength: Math.abs(state.correlations.stressSpending) > 0.7 ? 'strong' : 'moderate',\n            insights: [`Stress levels ${state.correlations.stressSpending > 0 ? 'increase' : 'decrease'} spending by ${Math.abs(state.correlations.stressSpending * 100).toFixed(0)}%`]\n          },\n          {\n            id: 'sleep-roi',\n            type: 'sleep-investment',\n            correlationCoefficient: state.correlations.sleepROI,\n            strength: Math.abs(state.correlations.sleepROI) > 0.7 ? 'strong' : 'moderate',\n            insights: [`Better sleep correlates with ${(state.correlations.sleepROI * 100).toFixed(0)}% better investment returns`]\n          }\n        ]\n      }\n    };\n  }\n}\n\n// Export singleton instance\nexport const unifiedDataManager = UnifiedDataManager.getInstance();\n\n// Export helper hooks for React components\nexport const useUnifiedHealth = () => unifiedDataManager.healthData$;\nexport const useUnifiedWealth = () => unifiedDataManager.wealthData$;\nexport const useUnifiedTransactions = () => unifiedDataManager.transactionData$;\nexport const useUnifiedGoals = () => unifiedDataManager.goalsData$;\nexport const useUnifiedCorrelations = () => unifiedDataManager.correlationData$;\nexport const useUnifiedState = () => unifiedDataManager.fullState$; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/AccountTypeBadge.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/AccountTypeBadge.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { \n  Banknote, \n  TrendingUp, \n  CreditCard, \n  TrendingDown,\n  Building\n} from 'lucide-react';\nimport { cn } from '@/shared/lib/utils';\n\ninterface AccountTypeBadgeProps {\n  accountType: string;\n  last4?: string;\n  className?: string;\n}\n\nconst getAccountIcon = (type: string) => {\n  switch (type) {\n    case 'Checking':\n      return <Banknote className=\"w-4 h-4\" />;\n    case 'Savings':\n      return <TrendingUp className=\"w-4 h-4\" />;\n    case 'Credit Card':\n      return <CreditCard className=\"w-4 h-4\" />;\n    case 'Investment':\n      return <TrendingDown className=\"w-4 h-4\" />;\n    default:\n      return <Building className=\"w-4 h-4\" />;\n  }\n};\n\nconst getAccountColor = (type: string) => {\n  switch (type) {\n    case 'Checking':\n      return 'bg-cyan-500/20 text-cyan-400 border-cyan-500/30';\n    case 'Savings':\n      return 'bg-green-500/20 text-green-400 border-green-500/30';\n    case 'Credit Card':\n      return 'bg-orange-500/20 text-orange-400 border-orange-500/30';\n    case 'Investment':\n      return 'bg-purple-500/20 text-purple-400 border-purple-500/30';\n    default:\n      return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n  }\n};\n\nexport const AccountTypeBadge: React.FC<AccountTypeBadgeProps> = ({\n  accountType,\n  last4,\n  className\n}) => {\n  return (\n    <span className={cn(\n      \"inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full text-sm font-medium border\",\n      getAccountColor(accountType),\n      className\n    )}>\n      {getAccountIcon(accountType)}\n      <span>{accountType}</span>\n      {last4 && <span>••{last4}</span>}\n    </span>\n  );\n};\n\nexport default AccountTypeBadge; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/BackHeader.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/BackHeader.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ArrowLeft } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\n\ninterface BackHeaderProps {\n  title: string;\n  className?: string;\n}\n\nconst BackHeader = ({ title, className = '' }: BackHeaderProps) => {\n  const navigate = useNavigate();\n  return (\n    <div className={`flex items-center gap-4 mb-6 ${className}`}>\n      <button\n        onClick={() => navigate('/')}\n        className=\"flex items-center space-x-2 text-white hover:text-blue-400 transition-colors rounded-full py-2 px-3 bg-white/5 backdrop-blur-md border border-white/10\"\n      >\n        <ArrowLeft className=\"w-4 h-4\" />\n        <span className=\"text-sm font-medium\">Back</span>\n      </button>\n      <h1 className=\"text-xl font-semibold text-white flex-1 text-center mr-8\">{title}</h1>\n    </div>\n  );\n};\n\nexport default BackHeader; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/CardShell.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/CardShell.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { FC, PropsWithChildren } from 'react';\nimport { cn } from '@/shared/lib/utils';\n\nexport interface CardShellProps extends PropsWithChildren {\n  accent: 'green' | 'yellow' | 'blue' | 'red' | 'purple';\n  className?: string;\n  onClick?: () => void;\n  hoverable?: boolean;\n}\n\n/**\n * Unified card component with glass morphism and gradient accents\n * Based on Eco Impact & Wellness Score card design\n */\nexport const CardShell: FC<CardShellProps> = ({ \n  accent, \n  children, \n  className,\n  onClick,\n  hoverable = false \n}) => {\n  // Base classes for glass morphism effect\n  const baseClasses = cn(\n    // Core glass effect\n    'relative overflow-hidden rounded-xl',\n    'bg-zinc-800/40 backdrop-blur',\n    'ring-1 ring-zinc-700/60',\n    'shadow-[inset_0_0_0_1px_rgba(255,255,255,.05)]',\n    \n    // Hover states\n    hoverable && 'transition-all duration-300',\n    hoverable && onClick && 'cursor-pointer',\n    hoverable && 'hover:scale-[1.02] hover:ring-zinc-600/60',\n    \n    // Custom classes\n    className\n  );\n\n  // Gradient overlay classes based on accent\n  const gradientClasses = {\n    green: 'gradient-green',\n    yellow: 'gradient-yellow',\n    blue: 'gradient-blue',\n    red: 'gradient-red',\n    purple: 'gradient-purple'\n  };\n\n  return (\n    <div \n      className={baseClasses}\n      onClick={onClick}\n      role={onClick ? 'button' : undefined}\n      tabIndex={onClick ? 0 : undefined}\n      onKeyDown={onClick ? (e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          onClick();\n        }\n      } : undefined}\n    >\n      {/* Gradient overlay */}\n      <div \n        className={cn(\n          'absolute inset-0 opacity-30 pointer-events-none',\n          gradientClasses[accent]\n        )} \n      />\n      \n      {/* Content */}\n      <div className=\"relative z-10\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\n// Re-export for convenience\nexport default CardShell; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/EnhancedGlassCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/EnhancedGlassCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport GlassCard from '../GlassCard';\nimport LiquidGlass from './LiquidGlass';\n\ninterface EnhancedGlassCardProps {\n  children: React.ReactNode;\n  className?: string;\n  variant?: 'default' | 'elevated' | 'subtle';\n  shape?: 'rounded' | 'card' | 'capsule';\n  interactive?: boolean;\n  shimmer?: boolean;\n  style?: React.CSSProperties;\n  onClick?: () => void;\n  onMouseEnter?: () => void;\n  onMouseLeave?: () => void;\n  'aria-label'?: string;\n  role?: string;\n  \n  // Liquid Glass specific props\n  liquid?: boolean;\n  liquidIntensity?: number; // 0-1\n  liquidDistortion?: number; // 0-1\n  liquidAnimated?: boolean;\n  liquidInteractive?: boolean;\n  performanceMode?: boolean;\n}\n\nconst EnhancedGlassCard = ({\n  children,\n  className,\n  variant = 'default',\n  shape = 'card',\n  interactive = false,\n  shimmer = false,\n  style,\n  onClick,\n  onMouseEnter,\n  onMouseLeave,\n  'aria-label': ariaLabel,\n  role,\n  \n  // Liquid Glass props\n  liquid = false,\n  liquidIntensity = 0.6,\n  liquidDistortion = 0.4,\n  liquidAnimated = true,\n  liquidInteractive = true,\n  performanceMode = false\n}: EnhancedGlassCardProps) => {\n  \n  // Auto-detect performance constraints\n  const shouldEnableLiquid = React.useMemo(() => {\n    if (!liquid) return false;\n    if (performanceMode) return false;\n    \n    // Disable on mobile devices for better performance\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n      navigator.userAgent\n    );\n    \n    // Disable on low-end devices\n    const isLowEnd = navigator.hardwareConcurrency && navigator.hardwareConcurrency < 4;\n    \n    // Check for reduced motion preference\n    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n    \n    if (isMobile || isLowEnd) {\n      // On mobile/low-end, only enable with reduced settings\n      return {\n        enabled: true,\n        intensity: Math.min(liquidIntensity * 0.5, 0.3),\n        distortion: Math.min(liquidDistortion * 0.5, 0.2),\n        animated: false,\n        interactive: false\n      };\n    }\n    \n    return {\n      enabled: true,\n      intensity: liquidIntensity,\n      distortion: liquidDistortion,\n      animated: liquidAnimated && !prefersReducedMotion,\n      interactive: liquidInteractive\n    };\n  }, [liquid, liquidIntensity, liquidDistortion, liquidAnimated, liquidInteractive, performanceMode]);\n\n  // If liquid effects are disabled, use standard GlassCard\n  if (!shouldEnableLiquid || !shouldEnableLiquid.enabled) {\n    return (\n      <GlassCard\n        className={className}\n        variant={variant}\n        shape={shape}\n        interactive={interactive}\n        shimmer={shimmer}\n        style={style}\n        onClick={onClick}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        aria-label={ariaLabel}\n        role={role}\n      >\n        {children}\n      </GlassCard>\n    );\n  }\n\n  // Enhanced glass card with liquid effects\n  return (\n    <div className=\"relative\">\n      <GlassCard\n        className={cn(\n          'relative overflow-hidden',\n          className\n        )}\n        variant={variant}\n        shape={shape}\n        interactive={interactive}\n        shimmer={shimmer}\n        style={style}\n        onClick={onClick}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        aria-label={ariaLabel}\n        role={role}\n      >\n        <LiquidGlass\n          intensity={shouldEnableLiquid.intensity}\n          distortion={shouldEnableLiquid.distortion}\n          animated={shouldEnableLiquid.animated}\n          interactive={shouldEnableLiquid.interactive}\n          className=\"absolute inset-0\"\n        >\n          <div className=\"relative z-10\">\n            {children}\n          </div>\n        </LiquidGlass>\n      </GlassCard>\n    </div>\n  );\n};\n\nexport default EnhancedGlassCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/GlassSlider.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/GlassSlider.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as Slider from '@radix-ui/react-slider';\nimport React from 'react';\n\ninterface GlassSliderProps {\n  value: number;\n  min?: number;\n  max?: number;\n  step?: number;\n  onChange: (v:number)=>void;\n}\n\nconst GlassSlider: React.FC<GlassSliderProps> = ({value, min=0, max=100, step=1, onChange}) => (\n  <Slider.Root\n    className=\"relative flex items-center select-none touch-none w-full h-8\"\n    value={[value]}\n    min={min}\n    max={max}\n    step={step}\n    onValueChange={(v)=>onChange(v[0])}\n  >\n    <Slider.Track className=\"bg-white/10 relative grow rounded-full h-2\">\n      <Slider.Range className=\"absolute bg-gradient-to-r from-blue-400 to-purple-500 rounded-full h-full\" />\n    </Slider.Track>\n    <Slider.Thumb className=\"block w-6 h-6 bg-white/90 hover:bg-white shadow-lg rounded-full focus:outline-none focus:ring-2 focus:ring-blue-400/50 transition-transform active:scale-110\" />\n  </Slider.Root>\n);\n\nexport default GlassSlider; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/GlobalGradientBackground.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/GlobalGradientBackground.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nconst GlobalGradientBackground: React.FC = () => {\n  return (\n    <div \n      className=\"global-gradient-background\"\n      aria-hidden=\"true\"\n    />\n  );\n};\n\nexport default GlobalGradientBackground; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/LiquidGlass.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/LiquidGlass.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { cn } from '@/shared/lib/utils';\n\ninterface LiquidGlassProps {\n  children: React.ReactNode;\n  className?: string;\n  intensity?: number; // 0-1\n  distortion?: number; // 0-1\n  animated?: boolean;\n  interactive?: boolean;\n  fallbackToCSS?: boolean;\n}\n\nconst LiquidGlass = ({\n  children,\n  className,\n  intensity = 0.6,\n  distortion = 0.4,\n  animated = true,\n  interactive = true,\n  fallbackToCSS = true\n}: LiquidGlassProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [webGLSupported, setWebGLSupported] = useState<boolean | null>(null);\n  const [mousePos, setMousePos] = useState({ x: 0.5, y: 0.5 });\n  const animationRef = useRef<number>();\n  const glRef = useRef<WebGLRenderingContext | null>(null);\n  const programRef = useRef<WebGLProgram | null>(null);\n  const startTimeRef = useRef(Date.now());\n\n  // WebGL shaders for liquid distortion effect\n  const vertexShaderSource = `\n    attribute vec4 a_position;\n    attribute vec2 a_texCoord;\n    varying vec2 v_texCoord;\n    \n    void main() {\n      gl_Position = a_position;\n      v_texCoord = a_texCoord;\n    }\n  `;\n\n  const fragmentShaderSource = `\n    precision mediump float;\n    \n    uniform sampler2D u_texture;\n    uniform float u_time;\n    uniform vec2 u_mouse;\n    uniform float u_intensity;\n    uniform float u_distortion;\n    uniform vec2 u_resolution;\n    \n    varying vec2 v_texCoord;\n    \n    void main() {\n      vec2 uv = v_texCoord;\n      \n      // Create liquid distortion effect\n      float time = u_time * 0.001;\n      vec2 mouse = u_mouse;\n      \n      // Distance from mouse\n      float dist = distance(uv, mouse);\n      \n      // Liquid wave effect\n      float wave1 = sin(dist * 20.0 - time * 3.0) * 0.1;\n      float wave2 = cos(uv.x * 15.0 + time * 2.0) * 0.05;\n      float wave3 = sin(uv.y * 12.0 - time * 1.5) * 0.03;\n      \n      // Mouse interaction ripple\n      float ripple = smoothstep(0.3, 0.0, dist) * sin(dist * 30.0 - time * 5.0) * 0.2;\n      \n      // Combine distortions\n      vec2 distortionOffset = vec2(\n        (wave1 + wave2 + ripple) * u_distortion,\n        (wave1 + wave3 + ripple) * u_distortion\n      );\n      \n      // Apply distortion with intensity control\n      vec2 distortedUV = uv + distortionOffset * u_intensity;\n      \n      // Sample the texture with distorted coordinates\n      vec4 color = texture2D(u_texture, distortedUV);\n      \n      // Add subtle color shifting for liquid effect\n      float colorShift = sin(dist * 10.0 - time * 2.0) * 0.1 * u_intensity;\n      color.rgb += vec3(colorShift * 0.1, colorShift * 0.05, -colorShift * 0.1);\n      \n      gl_FragColor = color;\n    }\n  `;\n\n  // Check WebGL support\n  const checkWebGLSupport = useCallback(() => {\n    try {\n      const canvas = document.createElement('canvas');\n      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n      setWebGLSupported(!!gl);\n      return !!gl;\n    } catch (e) {\n      setWebGLSupported(false);\n      return false;\n    }\n  }, []);\n\n  // Create shader\n  const createShader = (gl: WebGLRenderingContext, type: number, source: string) => {\n    const shader = gl.createShader(type);\n    if (!shader) return null;\n    \n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    \n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      console.error('Shader compilation error:', gl.getShaderInfoLog(shader));\n      gl.deleteShader(shader);\n      return null;\n    }\n    \n    return shader;\n  };\n\n  // Create shader program\n  const createProgram = (gl: WebGLRenderingContext) => {\n    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    \n    if (!vertexShader || !fragmentShader) return null;\n    \n    const program = gl.createProgram();\n    if (!program) return null;\n    \n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    \n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      console.error('Program linking error:', gl.getProgramInfoLog(program));\n      gl.deleteProgram(program);\n      return null;\n    }\n    \n    return program;\n  };\n\n  // Initialize WebGL\n  const initWebGL = useCallback(() => {\n    if (!canvasRef.current || !webGLSupported) return;\n    \n    const gl = canvasRef.current.getContext('webgl') || canvasRef.current.getContext('experimental-webgl');\n    if (!gl) return;\n    \n    glRef.current = gl;\n    programRef.current = createProgram(gl);\n    \n    if (!programRef.current) return;\n    \n    // Set up geometry (full screen quad)\n    const positions = new Float32Array([\n      -1, -1,  1, -1,  -1, 1,\n      -1, 1,   1, -1,   1, 1,\n    ]);\n    \n    const texCoords = new Float32Array([\n      0, 0,  1, 0,  0, 1,\n      0, 1,  1, 0,  1, 1,\n    ]);\n    \n    // Position buffer\n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);\n    \n    // Texture coordinate buffer\n    const texCoordBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, texCoords, gl.STATIC_DRAW);\n    \n    // Set up attributes\n    const positionLocation = gl.getAttribLocation(programRef.current, 'a_position');\n    const texCoordLocation = gl.getAttribLocation(programRef.current, 'a_texCoord');\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.enableVertexAttribArray(positionLocation);\n    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.enableVertexAttribArray(texCoordLocation);\n    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n  }, [webGLSupported]);\n\n  // Animation loop\n  const animate = useCallback(() => {\n    if (!glRef.current || !programRef.current || !canvasRef.current) return;\n    \n    const gl = glRef.current;\n    const program = programRef.current;\n    \n    // Set viewport\n    gl.viewport(0, 0, canvasRef.current.width, canvasRef.current.height);\n    \n    // Use shader program\n    gl.useProgram(program);\n    \n    // Set uniforms\n    const timeLocation = gl.getUniformLocation(program, 'u_time');\n    const mouseLocation = gl.getUniformLocation(program, 'u_mouse');\n    const intensityLocation = gl.getUniformLocation(program, 'u_intensity');\n    const distortionLocation = gl.getUniformLocation(program, 'u_distortion');\n    const resolutionLocation = gl.getUniformLocation(program, 'u_resolution');\n    \n    if (timeLocation) gl.uniform1f(timeLocation, animated ? Date.now() - startTimeRef.current : 0);\n    if (mouseLocation) gl.uniform2f(mouseLocation, mousePos.x, mousePos.y);\n    if (intensityLocation) gl.uniform1f(intensityLocation, intensity);\n    if (distortionLocation) gl.uniform1f(distortionLocation, distortion);\n    if (resolutionLocation) gl.uniform2f(resolutionLocation, canvasRef.current.width, canvasRef.current.height);\n    \n    // Draw\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    \n    if (animated) {\n      animationRef.current = requestAnimationFrame(animate);\n    }\n  }, [mousePos, intensity, distortion, animated]);\n\n  // Handle mouse movement\n  const handleMouseMove = useCallback((event: React.MouseEvent) => {\n    if (!interactive || !containerRef.current) return;\n    \n    const rect = containerRef.current.getBoundingClientRect();\n    const x = (event.clientX - rect.left) / rect.width;\n    const y = 1 - (event.clientY - rect.top) / rect.height; // Flip Y coordinate\n    \n    setMousePos({ x, y });\n  }, [interactive]);\n\n  // Debounced mouse move for performance\n  const debouncedMouseMove = useCallback(\n    (() => {\n      let timeoutId: NodeJS.Timeout;\n      return (event: React.MouseEvent) => {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => handleMouseMove(event), 16); // ~60fps\n      };\n    })(),\n    [handleMouseMove]\n  );\n\n  // Resize canvas\n  const resizeCanvas = useCallback(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n    \n    const container = containerRef.current;\n    const canvas = canvasRef.current;\n    \n    canvas.width = container.offsetWidth;\n    canvas.height = container.offsetHeight;\n  }, []);\n\n  // Initialize\n  useEffect(() => {\n    checkWebGLSupport();\n  }, [checkWebGLSupport]);\n\n  useEffect(() => {\n    if (webGLSupported) {\n      initWebGL();\n      resizeCanvas();\n      \n      if (animated) {\n        animationRef.current = requestAnimationFrame(animate);\n      } else {\n        animate();\n      }\n    }\n    \n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [webGLSupported, initWebGL, animate, animated, resizeCanvas]);\n\n  // Handle resize\n  useEffect(() => {\n    const handleResize = () => resizeCanvas();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [resizeCanvas]);\n\n  // CSS fallback styles\n  const fallbackStyles = !webGLSupported && fallbackToCSS ? {\n    background: 'rgba(255, 255, 255, 0.08)',\n    backdropFilter: `blur(${20 + intensity * 10}px) saturate(${150 + intensity * 30}%)`,\n    WebkitBackdropFilter: `blur(${20 + intensity * 10}px) saturate(${150 + intensity * 30}%)`,\n    border: '1px solid rgba(255, 255, 255, 0.12)',\n    boxShadow: `\n      0 8px 32px rgba(0, 0, 0, 0.12),\n      inset 0 1px 0 rgba(255, 255, 255, 0.15)\n    `,\n    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n  } : {};\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        'relative overflow-hidden',\n        !webGLSupported && fallbackToCSS && 'liquid-glass-fallback',\n        className\n      )}\n      style={fallbackStyles}\n      onMouseMove={interactive ? debouncedMouseMove : undefined}\n    >\n      {webGLSupported && (\n        <canvas\n          ref={canvasRef}\n          className=\"absolute inset-0 w-full h-full pointer-events-none\"\n          style={{ mixBlendMode: 'overlay' }}\n        />\n      )}\n      \n      <div className=\"relative z-10\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default LiquidGlass; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/LiquidGlassSVGFilters.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/LiquidGlassSVGFilters.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * SVG Filters for Modern Glass Effects\n * Provides subtle, realistic glass effects without aggressive distortion\n */\nexport const LiquidGlassSVGFilters: React.FC = () => {\n  return (\n    <svg \n      className=\"liquid-glass-svg-filters\" \n      style={{ position: 'absolute', width: 0, height: 0, pointerEvents: 'none' }}\n      aria-hidden=\"true\"\n    >\n      <defs>\n        {/* Primary Glass Effect - Subtle lighting only */}\n        <filter\n          id=\"glass-distortion-primary\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"0.5\" result=\"blur\" />\n          <feSpecularLighting\n            in=\"blur\"\n            surfaceScale=\"1\"\n            specularConstant=\"0.3\"\n            specularExponent=\"20\"\n            lightingColor=\"rgba(255,255,255,0.1)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-50\" y=\"-50\" z=\"100\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.2\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Hover State - Slightly enhanced lighting */}\n        <filter\n          id=\"glass-distortion-hover\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"0.3\" result=\"blur\" />\n          <feSpecularLighting\n            in=\"blur\"\n            surfaceScale=\"1.2\"\n            specularConstant=\"0.4\"\n            specularExponent=\"25\"\n            lightingColor=\"rgba(255,255,255,0.15)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-40\" y=\"-40\" z=\"120\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.3\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Navigation - Minimal effect */}\n        <filter\n          id=\"glass-distortion-nav\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.5\"\n            specularConstant=\"0.2\"\n            specularExponent=\"15\"\n            lightingColor=\"rgba(255,255,255,0.08)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-100\" y=\"-100\" z=\"80\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.15\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Navigation Hover */}\n        <filter\n          id=\"glass-distortion-nav-hover\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.8\"\n            specularConstant=\"0.3\"\n            specularExponent=\"20\"\n            lightingColor=\"rgba(255,255,255,0.12)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-80\" y=\"-80\" z=\"100\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.2\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Button - Clean glass effect */}\n        <filter\n          id=\"glass-distortion-button\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.8\"\n            specularConstant=\"0.25\"\n            specularExponent=\"18\"\n            lightingColor=\"rgba(255,255,255,0.1)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-60\" y=\"-60\" z=\"90\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.18\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Button Hover */}\n        <filter\n          id=\"glass-distortion-button-hover\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"1\"\n            specularConstant=\"0.35\"\n            specularExponent=\"22\"\n            lightingColor=\"rgba(255,255,255,0.15)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-50\" y=\"-50\" z=\"110\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.25\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Card - Subtle glass effect */}\n        <filter\n          id=\"glass-distortion-card\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.6\"\n            specularConstant=\"0.2\"\n            specularExponent=\"16\"\n            lightingColor=\"rgba(255,255,255,0.08)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-70\" y=\"-70\" z=\"85\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.12\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Card Hover */}\n        <filter\n          id=\"glass-distortion-card-hover\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.9\"\n            specularConstant=\"0.3\"\n            specularExponent=\"20\"\n            lightingColor=\"rgba(255,255,255,0.12)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-60\" y=\"-60\" z=\"100\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.18\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Menu Item - Very subtle */}\n        <filter\n          id=\"glass-distortion-menu\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.4\"\n            specularConstant=\"0.15\"\n            specularExponent=\"12\"\n            lightingColor=\"rgba(255,255,255,0.06)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-80\" y=\"-80\" z=\"70\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.1\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Menu Item Hover */}\n        <filter\n          id=\"glass-distortion-menu-hover\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.6\"\n            specularConstant=\"0.2\"\n            specularExponent=\"15\"\n            lightingColor=\"rgba(255,255,255,0.08)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-70\" y=\"-70\" z=\"80\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.12\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Menu Item Active */}\n        <filter\n          id=\"glass-distortion-menu-active\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.8\"\n            specularConstant=\"0.25\"\n            specularExponent=\"18\"\n            lightingColor=\"rgba(99,102,241,0.1)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-60\" y=\"-60\" z=\"90\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.15\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* FAB - Enhanced but clean */}\n        <filter\n          id=\"glass-distortion-fab\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"1\"\n            specularConstant=\"0.3\"\n            specularExponent=\"20\"\n            lightingColor=\"rgba(99,102,241,0.12)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-50\" y=\"-50\" z=\"100\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.2\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* FAB Hover */}\n        <filter\n          id=\"glass-distortion-fab-hover\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"1.2\"\n            specularConstant=\"0.4\"\n            specularExponent=\"25\"\n            lightingColor=\"rgba(99,102,241,0.15)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-40\" y=\"-40\" z=\"120\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.25\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Animated Flow Filters - Very subtle movement */}\n        <filter\n          id=\"glass-distortion-flow-1\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.8\"\n            specularConstant=\"0.25\"\n            specularExponent=\"18\"\n            lightingColor=\"rgba(255,255,255,0.08)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-55\" y=\"-45\" z=\"95\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.15\"\n            k4=\"0\"\n          />\n        </filter>\n\n        <filter\n          id=\"glass-distortion-flow-2\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.9\"\n            specularConstant=\"0.3\"\n            specularExponent=\"20\"\n            lightingColor=\"rgba(255,255,255,0.1)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-45\" y=\"-55\" z=\"105\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.18\"\n            k4=\"0\"\n          />\n        </filter>\n\n        <filter\n          id=\"glass-distortion-flow-3\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.7\"\n            specularConstant=\"0.2\"\n            specularExponent=\"16\"\n            lightingColor=\"rgba(255,255,255,0.06)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-65\" y=\"-35\" z=\"85\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.12\"\n            k4=\"0\"\n          />\n        </filter>\n      </defs>\n    </svg>\n  );\n};\n\nexport default LiquidGlassSVGFilters; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/NavPill.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/NavPill.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport type { LucideIcon } from 'lucide-react';\n\ninterface NavPillProps {\n  /** Visible text label */\n  label: string;\n  /** Optional lucide-react icon component */\n  icon?: LucideIcon;\n  /** Whether this pill represents the currently active route */\n  active?: boolean;\n  /** Disabled state */\n  disabled?: boolean;\n  /** Called when the pill is selected – keyboard or mouse */\n  onSelect?: () => void;\n  /** Additional className overrides */\n  className?: string;\n}\n\n/**\n * Accessible, keyboard-navigable navigation pill.\n * Provides unified styling & behaviour for tabs / buttons across the app.\n */\nexport const NavPill: React.FC<NavPillProps> = ({\n  label,\n  icon: Icon,\n  active = false,\n  disabled = false,\n  onSelect,\n  className\n}) => {\n  return (\n    <button\n      type=\"button\"\n      aria-label={label}\n      aria-current={active ? 'page' : undefined}\n      disabled={disabled}\n      onClick={!disabled ? onSelect : undefined}\n      onKeyDown={(e) => {\n        if (!disabled && (e.key === 'Enter' || e.key === ' ')) {\n          e.preventDefault();\n          onSelect?.();\n        }\n      }}\n      className={cn(\n        'flex items-center justify-center gap-2 px-4 py-2 rounded-xl text-sm transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-400/50',\n        active && 'bg-blue-500 text-white shadow',\n        !active && 'text-white/70 hover:text-white hover:bg-white/10',\n        disabled && 'opacity-50 cursor-not-allowed',\n        className\n      )}\n    >\n      {Icon && <Icon className=\"w-4 h-4\" aria-hidden=\"true\" />}\n      <span>{label}</span>\n    </button>\n  );\n};\n\nNavPill.displayName = 'NavPill';\n\nexport default NavPill; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/SimpleGlassCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/SimpleGlassCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Legacy SimpleGlassCard - Redirected to UnifiedCard for optimization\n// This maintains backward compatibility while using the optimized system\n\nimport React from 'react';\nimport { UnifiedCard } from './UnifiedCard';\nimport { cn } from '@/shared/lib/utils';\n\nexport interface SimpleGlassCardProps {\n  children: React.ReactNode;\n  className?: string;\n  variant?: 'default' | 'elevated' | 'subtle' | 'accent';\n  interactive?: boolean;\n  onClick?: () => void;\n}\n\nconst SimpleGlassCard: React.FC<SimpleGlassCardProps> = ({ \n  children, \n  className, \n  variant = 'default',\n  interactive = false,\n  onClick \n}) => {\n  // Map SimpleGlassCard variants to UnifiedCard system\n  const unifiedVariant = variant === 'accent' ? 'financial' : 'default';\n  const unifiedSize = variant === 'elevated' ? 'xl' : variant === 'subtle' ? 'sm' : 'lg';\n  \n  return (\n    <UnifiedCard\n      variant={unifiedVariant}\n      size={unifiedSize}\n      interactive={interactive}\n      onClick={onClick}\n      className={cn(\n        // Additional styling to match SimpleGlassCard behavior\n        variant === 'accent' && 'bg-blue-500/[0.08] border-blue-400/[0.12]',\n        className\n      )}\n    >\n      {children}\n    </UnifiedCard>\n  );\n};\n\nexport default SimpleGlassCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/UnifiedCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/UnifiedCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ReactNode } from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport { LucideIcon, TrendingUp, TrendingDown, Minus, ArrowUp, ArrowDown } from 'lucide-react';\nimport { unifiedCardTokens, getCardClasses } from '@/theme/unified-card-tokens';\n\n// UnifiedCard Component - Matches Financial Dashboard cards exactly\n// Consolidates all 26+ card variants into one consistent design\n\ninterface UnifiedCardProps {\n  // Core props\n  title?: string;\n  subtitle?: string;\n  metric?: ReactNode;\n  delta?: {\n    value: number | string;\n    format?: 'currency' | 'percentage' | 'number';\n    label?: string; // e.g. \"vs last month\"\n  };\n  \n  // Icon & Visual\n  icon?: LucideIcon | ReactNode;\n  iconColor?: string;\n  trendDirection?: 'up' | 'down' | 'flat';\n  \n  // Layout & Styling\n  variant?: 'default' | 'eco' | 'wellness' | 'financial';\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  className?: string;\n  interactive?: boolean;\n  onClick?: () => void;\n  \n  // Extended content\n  children?: ReactNode;\n  \n  // Special features (for specific card types)\n  progress?: {\n    value: number;\n    max: number;\n    color?: string;\n    showLabel?: boolean;\n  };\n  \n  badge?: {\n    text: string;\n    variant: 'success' | 'warning' | 'error' | 'info';\n  };\n}\n\nexport const UnifiedCard = React.memo<UnifiedCardProps>(({\n  title,\n  subtitle,\n  metric,\n  delta,\n  icon,\n  iconColor,\n  trendDirection,\n  variant = 'default',\n  size = 'lg',\n  className,\n  interactive = false,\n  onClick,\n  children,\n  progress,\n  badge,\n}) => {\n  // Determine trend icon and color\n  const getTrendIcon = () => {\n    if (!trendDirection && !delta) return null;\n    \n    const direction = trendDirection || (delta && typeof delta.value === 'number' \n      ? (delta.value > 0 ? 'up' : delta.value < 0 ? 'down' : 'flat')\n      : 'flat');\n    \n    switch (direction) {\n      case 'up':\n        return <ArrowUp className=\"w-4 h-4 text-green-400\" />;\n      case 'down':\n        return <ArrowDown className=\"w-4 h-4 text-red-400\" />;\n      default:\n        return <Minus className=\"w-4 h-4 text-gray-400\" />;\n    }\n  };\n  \n  const getTrendColor = () => {\n    if (!trendDirection && !delta) return unifiedCardTokens.trend.flat;\n    \n    const direction = trendDirection || (delta && typeof delta.value === 'number' \n      ? (delta.value > 0 ? 'up' : delta.value < 0 ? 'down' : 'flat')\n      : 'flat');\n    \n    return unifiedCardTokens.trend[direction];\n  };\n  \n  const formatDelta = () => {\n    if (!delta) return null;\n    \n    const { value, format = 'number' } = delta;\n    \n    switch (format) {\n      case 'currency':\n        return new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD',\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0,\n        }).format(typeof value === 'number' ? value : parseFloat(value));\n      \n      case 'percentage':\n        return `${typeof value === 'number' && value >= 0 ? '+' : ''}${value}%`;\n      \n      default:\n        return `${typeof value === 'number' && value >= 0 ? '+' : ''}${value}`;\n    }\n  };\n  \n  const renderIcon = () => {\n    if (!icon) return null;\n    \n    // Check if it's a Lucide icon component (function)\n    if (typeof icon === 'function') {\n      const IconComponent = icon as LucideIcon;\n      return <IconComponent className={unifiedCardTokens.iconChip.icon} />;\n    }\n    \n    // Handle string icons (emojis)\n    if (typeof icon === 'string') {\n      return <span className=\"text-lg\">{icon}</span>;\n    }\n    \n    // Handle React elements\n    if (React.isValidElement(icon)) {\n      return icon;\n    }\n    \n    // Fallback for anything else\n    return <span className=\"text-sm\">{String(icon)}</span>;\n  };\n  \n  return (\n    <div\n      className={cn(\n        getCardClasses(variant, size, interactive),\n        className\n      )}\n      onClick={interactive ? onClick : undefined}\n    >\n      {/* Header Section */}\n      {(icon || title || getTrendIcon() || badge) && (\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-3\">\n            {icon && (\n              <div \n                className={unifiedCardTokens.iconChip.container}\n                style={{ color: iconColor }}\n              >\n                {renderIcon()}\n              </div>\n            )}\n            <div>\n              {title && (\n                <h3 className={unifiedCardTokens.text.title}>{title}</h3>\n              )}\n              {subtitle && (\n                <p className={unifiedCardTokens.text.subtitle}>{subtitle}</p>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {getTrendIcon()}\n            {badge && (\n              <span className={cn(\n                \"px-2 py-1 rounded-full text-xs font-medium\",\n                {\n                  'bg-green-500/20 text-green-400 border border-green-500/30': badge.variant === 'success',\n                  'bg-yellow-500/20 text-yellow-400 border border-yellow-500/30': badge.variant === 'warning',\n                  'bg-red-500/20 text-red-400 border border-red-500/30': badge.variant === 'error',\n                  'bg-blue-500/20 text-blue-400 border border-blue-500/30': badge.variant === 'info'\n                }\n              )}>\n                {badge.text}\n              </span>\n            )}\n          </div>\n        </div>\n      )}\n      \n      {/* Metric Section */}\n      {(metric || delta) && (\n        <div className=\"space-y-2\">\n          {metric && (\n            <p className={unifiedCardTokens.text.metric}>\n              {metric}\n            </p>\n          )}\n          \n          {delta && (\n            <div className={cn(\"flex items-center gap-2\", unifiedCardTokens.text.delta)}>\n              <span className={getTrendColor()}>\n                {formatDelta()}\n              </span>\n              {delta.label && (\n                <span className={unifiedCardTokens.text.label}>\n                  {delta.label}\n                </span>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Progress Bar (optional) */}\n      {progress && (\n        <div className=\"mt-4\">\n          <div className=\"flex justify-between text-sm mb-1\">\n            <span className=\"text-white/60\">Progress</span>\n            {progress.showLabel && (\n              <span className=\"text-white/80\">\n                {((progress.value / progress.max) * 100).toFixed(0)}%\n              </span>\n            )}\n          </div>\n          <div className=\"relative h-2 bg-white/[0.05] rounded-full overflow-hidden\">\n            <div\n              className=\"absolute top-0 left-0 h-full rounded-full transition-all duration-1000 ease-out\"\n              style={{\n                width: `${Math.min(100, (progress.value / progress.max) * 100)}%`,\n                backgroundColor: progress.color || '#3b82f6'\n              }}\n            />\n          </div>\n        </div>\n      )}\n      \n      {/* Custom Children */}\n      {children && (\n        <div className={metric || delta || progress ? \"mt-4\" : \"\"}>\n          {children}\n        </div>\n      )}\n    </div>\n  );\n});\n\nUnifiedCard.displayName = 'UnifiedCard';\n\n// Keep UniversalCard as an alias for backwards compatibility during migration\nexport const UniversalCard = UnifiedCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/UniversalCard.original.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/UniversalCard.original.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport { LucideIcon } from 'lucide-react';\nimport { formatFinancialScore } from '@/shared/utils/formatters';\n\n// Universal Card Component - Consolidates:\n// - GlassCard.tsx\n// - SimpleGlassCard.tsx  \n// - EnhancedGlassCard.tsx\n// - LiquidGlass.tsx\n// - ComprehensiveEcoCard.tsx (554 lines)\n// - ComprehensiveWellnessCard.tsx (529 lines)\n// Total consolidation: ~1,200 lines → ~150 lines (88% reduction)\n\ninterface UniversalCardProps {\n  variant?: 'glass' | 'solid' | 'eco' | 'wellness' | 'financial' | 'minimal';\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  blur?: 'light' | 'medium' | 'heavy';\n  className?: string;\n  children?: React.ReactNode;\n  \n  // Data props for insight cards\n  title?: string;\n  value?: string | number;\n  icon?: LucideIcon;\n  iconColor?: string;\n  score?: number;\n  trend?: 'up' | 'down' | 'stable';\n  trendValue?: string;\n  \n  // Layout props\n  orientation?: 'horizontal' | 'vertical';\n  showBackground?: boolean;\n  interactive?: boolean;\n  onClick?: () => void;\n  \n  // Advanced props for comprehensive cards\n  data?: {\n    metrics?: Array<{\n      label: string;\n      value: string | number;\n      icon?: LucideIcon;\n      color?: string;\n    }>;\n    trends?: Array<{\n      label: string;\n      trend: 'up' | 'down' | 'stable';\n      value?: string;\n    }>;\n    spending?: Array<{\n      category: string;\n      amount: number;\n      color?: string;\n    }>;\n  };\n}\n\nexport const UniversalCard = React.memo<UniversalCardProps>(({\n  variant = 'glass',\n  size = 'md',\n  blur = 'medium',\n  className,\n  children,\n  title,\n  value,\n  icon: Icon,\n  iconColor = '#6366f1',\n  score,\n  trend,\n  trendValue,\n  orientation = 'vertical',\n  showBackground = true,\n  interactive = false,\n  onClick,\n  data,\n  ...props\n}) => {\n  const baseClasses = cn(\n    'relative overflow-hidden transition-all duration-300',\n    {\n      // Variants\n      'bg-white/10 backdrop-blur-md border border-white/20': variant === 'glass',\n      'bg-black/80 border border-white/10': variant === 'solid',\n      'bg-gradient-to-br from-green-500/10 to-emerald-600/10 border border-green-500/20': variant === 'eco',\n      'bg-gradient-to-br from-blue-500/10 to-cyan-600/10 border border-blue-500/20': variant === 'wellness',\n      'bg-gradient-to-br from-purple-500/10 to-indigo-600/10 border border-purple-500/20': variant === 'financial',\n      'bg-transparent border border-white/5': variant === 'minimal',\n      \n      // Sizes\n      'p-3 rounded-lg text-sm': size === 'sm',\n      'p-4 rounded-xl text-base': size === 'md',\n      'p-6 rounded-2xl text-lg': size === 'lg',\n      'p-8 rounded-3xl text-xl': size === 'xl',\n      \n      // Interactive\n      'cursor-pointer hover:scale-[1.02] hover:bg-white/15': interactive,\n      \n      // Orientation\n      'flex flex-col': orientation === 'vertical',\n      'flex flex-row items-center': orientation === 'horizontal',\n    },\n    className\n  );\n\n  const renderScore = () => {\n    if (typeof score !== 'number') return null;\n    \n    const scoreColor = score >= 80 ? '#10b981' : score >= 60 ? '#f59e0b' : '#ef4444';\n    \n    const displayScore = formatFinancialScore(score);\n    \n    return (\n      <div className=\"flex flex-col items-center\">\n        <div className=\"relative w-20 h-20\">\n          <svg className=\"w-full h-full transform -rotate-90\" viewBox=\"0 0 100 100\">\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r=\"40\"\n              stroke=\"currentColor\"\n              strokeWidth=\"8\"\n              fill=\"none\"\n              className=\"text-white/10\"\n            />\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r=\"40\"\n              stroke={scoreColor}\n              strokeWidth=\"8\"\n              fill=\"none\"\n              strokeDasharray={`${2 * Math.PI * 40}`}\n              strokeDashoffset={`${2 * Math.PI * 40 * (1 - score / 100)}`}\n              className=\"transition-all duration-1000 ease-out\"\n            />\n          </svg>\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n            <span className=\"text-2xl font-bold text-white\">{displayScore}</span>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderMetrics = () => {\n    if (!data?.metrics) return null;\n    \n    return (\n      <div className=\"grid grid-cols-2 gap-3\">\n        {data.metrics.map((metric, index) => (\n          <div key={index} className=\"bg-white/5 rounded-lg p-3\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              {metric.icon && (\n                <metric.icon \n                  className=\"w-3 h-3\" \n                  style={{ color: metric.color }} \n                />\n              )}\n              <span className=\"text-xs text-white/60\">{metric.label}</span>\n            </div>\n            <div className=\"text-sm font-semibold text-white\">\n              {metric.value}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderTrends = () => {\n    if (!data?.trends) return null;\n    \n    return (\n      <div className=\"grid grid-cols-2 gap-2\">\n        {data.trends.map((trend, index) => (\n          <div key={index} className=\"flex items-center justify-between p-2 rounded-lg bg-white/5\">\n            <span className=\"text-xs text-white/70\">{trend.label}</span>\n            <div className=\"flex items-center space-x-1\">\n              <span \n                className=\"text-sm font-bold\"\n                style={{ \n                  color: trend.trend === 'up' ? '#10b981' : \n                         trend.trend === 'down' ? '#ef4444' : '#6b7280'\n                }}\n              >\n                {trend.trend === 'up' ? '↗' : trend.trend === 'down' ? '↘' : '—'}\n              </span>\n              {trend.value && (\n                <span className=\"text-xs text-white/60\">{trend.value}</span>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderSpending = () => {\n    if (!data?.spending) return null;\n    \n    return (\n      <div className=\"space-y-2\">\n        {data.spending.map((item, index) => (\n          <div key={index} className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-white/70\">{item.category}</span>\n            <span className=\"text-sm font-semibold text-white\">\n              ${item.amount.toLocaleString()}\n            </span>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div \n      className={baseClasses} \n      onClick={onClick}\n      {...props}\n    >\n      {showBackground && variant === 'glass' && (\n        <div className=\"absolute inset-0 bg-gradient-to-br from-white/5 to-white/0 pointer-events-none\" />\n      )}\n      \n      <div className=\"relative z-10 h-full\">\n        {/* Header */}\n        {(title || Icon) && (\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-3\">\n              {Icon && (\n                <Icon \n                  className=\"w-5 h-5\" \n                  style={{ color: iconColor }} \n                />\n              )}\n              {title && (\n                <h3 className=\"font-semibold text-white\">{title}</h3>\n              )}\n            </div>\n            {trend && (\n              <div className=\"flex items-center space-x-1\">\n                <span \n                  className=\"text-sm font-bold\"\n                  style={{ \n                    color: trend === 'up' ? '#10b981' : \n                           trend === 'down' ? '#ef4444' : '#6b7280'\n                  }}\n                >\n                  {trend === 'up' ? '↗' : trend === 'down' ? '↘' : '—'}\n                </span>\n                {trendValue && (\n                  <span className=\"text-sm text-white/60\">{trendValue}</span>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Score Circle */}\n        {typeof score === 'number' && renderScore()}\n\n        {/* Value Display */}\n        {value && (\n          <div className=\"text-center mb-4\">\n            <div className=\"text-2xl font-bold text-white\">{value}</div>\n          </div>\n        )}\n\n        {/* Metrics Grid */}\n        {data?.metrics && (\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-white mb-2\">Metrics</h4>\n            {renderMetrics()}\n          </div>\n        )}\n\n        {/* Trends Grid */}\n        {data?.trends && (\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-white mb-2\">Trends</h4>\n            {renderTrends()}\n          </div>\n        )}\n\n        {/* Spending List */}\n        {data?.spending && (\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-white mb-2\">Spending</h4>\n            {renderSpending()}\n          </div>\n        )}\n\n        {/* Custom Children */}\n        {children}\n      </div>\n    </div>\n  );\n});\n\nUniversalCard.displayName = 'UniversalCard';\n\nexport default UniversalCard;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/UniversalCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/UniversalCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport { LucideIcon } from 'lucide-react';\nimport { formatFinancialScore } from '@/shared/utils/formatters';\n\n// Universal Card Component - Consolidates:\n// - GlassCard.tsx\n// - SimpleGlassCard.tsx  \n// - EnhancedGlassCard.tsx\n// - LiquidGlass.tsx\n// - ComprehensiveEcoCard.tsx (554 lines)\n// - ComprehensiveWellnessCard.tsx (529 lines)\n// Total consolidation: ~1,200 lines → ~150 lines (88% reduction)\n\ninterface UniversalCardProps {\n  variant?: 'glass' | 'solid' | 'eco' | 'wellness' | 'financial' | 'minimal';\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  blur?: 'light' | 'medium' | 'heavy';\n  className?: string;\n  children?: React.ReactNode;\n  \n  // Data props for insight cards\n  title?: string;\n  value?: string | number;\n  icon?: LucideIcon;\n  iconColor?: string;\n  score?: number;\n  trend?: 'up' | 'down' | 'stable';\n  trendValue?: string;\n  \n  // Layout props\n  orientation?: 'horizontal' | 'vertical';\n  showBackground?: boolean;\n  interactive?: boolean;\n  onClick?: () => void;\n  \n  // Advanced props for comprehensive cards\n  data?: {\n    metrics?: Array<{\n      label: string;\n      value: string | number;\n      icon?: LucideIcon;\n      color?: string;\n    }>;\n    trends?: Array<{\n      label: string;\n      trend: 'up' | 'down' | 'stable';\n      value?: string;\n    }>;\n    spending?: Array<{\n      category: string;\n      amount: number;\n      color?: string;\n    }>;\n  };\n}\n\nexport const UniversalCard = React.memo<UniversalCardProps>(({\n  variant = 'glass',\n  size = 'md',\n  blur = 'medium',\n  className,\n  children,\n  title,\n  value,\n  icon: Icon,\n  iconColor = '#6366f1',\n  score,\n  trend,\n  trendValue,\n  orientation = 'vertical',\n  showBackground = true,\n  interactive = false,\n  onClick,\n  data,\n  ...props\n}) => {\n  const baseClasses = cn(\n    'relative overflow-hidden transition-all duration-300',\n    {\n      // Variants\n      'bg-white/10 backdrop-blur-md border border-white/20': variant === 'glass',\n      'bg-black/80 border border-white/10': variant === 'solid',\n      'bg-gradient-to-br from-green-500/10 to-emerald-600/10 border border-green-500/20': variant === 'eco',\n      'bg-gradient-to-br from-blue-500/10 to-cyan-600/10 border border-blue-500/20': variant === 'wellness',\n      'bg-gradient-to-br from-purple-500/10 to-indigo-600/10 border border-purple-500/20': variant === 'financial',\n      'bg-transparent border border-white/5': variant === 'minimal',\n      \n      // Sizes\n      'p-3 rounded-lg text-sm': size === 'sm',\n      'p-4 rounded-xl text-base': size === 'md',\n      'p-6 rounded-2xl text-lg': size === 'lg',\n      'p-8 rounded-3xl text-xl': size === 'xl',\n      \n      // Interactive\n      'cursor-pointer hover:scale-[1.02] hover:bg-white/15': interactive,\n      \n      // Orientation\n      'flex flex-col': orientation === 'vertical',\n      'flex flex-row items-center': orientation === 'horizontal',\n    },\n    className\n  );\n\n  const renderScore = () => {\n    if (typeof score !== 'number') return null;\n    \n    const scoreColor = score >= 80 ? '#10b981' : score >= 60 ? '#f59e0b' : '#ef4444';\n    \n    const displayScore = formatFinancialScore(score);\n    \n    return (\n      <div className=\"flex flex-col items-center\">\n        <div className=\"relative w-20 h-20\">\n          <svg className=\"w-full h-full transform -rotate-90\" viewBox=\"0 0 100 100\">\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r=\"40\"\n              stroke=\"currentColor\"\n              strokeWidth=\"8\"\n              fill=\"none\"\n              className=\"text-white/10\"\n            />\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r=\"40\"\n              stroke={scoreColor}\n              strokeWidth=\"8\"\n              fill=\"none\"\n              strokeDasharray={`${2 * Math.PI * 40}`}\n              strokeDashoffset={`${2 * Math.PI * 40 * (1 - score / 100)}`}\n              className=\"transition-all duration-1000 ease-out\"\n            />\n          </svg>\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n            <span className=\"text-2xl font-bold text-white\">{displayScore}</span>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderMetrics = () => {\n    if (!data?.metrics) return null;\n    \n    return (\n      <div className=\"grid grid-cols-2 gap-3\">\n        {data.metrics.map((metric, index) => (\n          <div key={index} className=\"bg-white/5 rounded-lg p-3\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              {metric.icon && (\n                <metric.icon \n                  className=\"w-3 h-3\" \n                  style={{ color: metric.color }} \n                />\n              )}\n              <span className=\"text-xs text-white/60\">{metric.label}</span>\n            </div>\n            <div className=\"text-sm font-semibold text-white\">\n              {metric.value}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderTrends = () => {\n    if (!data?.trends) return null;\n    \n    return (\n      <div className=\"grid grid-cols-2 gap-2\">\n        {data.trends.map((trend, index) => (\n          <div key={index} className=\"flex items-center justify-between p-2 rounded-lg bg-white/5\">\n            <span className=\"text-xs text-white/70\">{trend.label}</span>\n            <div className=\"flex items-center space-x-1\">\n              <span \n                className=\"text-sm font-bold\"\n                style={{ \n                  color: trend.trend === 'up' ? '#10b981' : \n                         trend.trend === 'down' ? '#ef4444' : '#6b7280'\n                }}\n              >\n                {trend.trend === 'up' ? '↗' : trend.trend === 'down' ? '↘' : '—'}\n              </span>\n              {trend.value && (\n                <span className=\"text-xs text-white/60\">{trend.value}</span>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderSpending = () => {\n    if (!data?.spending) return null;\n    \n    return (\n      <div className=\"space-y-2\">\n        {data.spending.map((item, index) => (\n          <div key={index} className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-white/70\">{item.category}</span>\n            <span className=\"text-sm font-semibold text-white\">\n              ${item.amount.toLocaleString()}\n            </span>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div \n      className={baseClasses} \n      onClick={onClick}\n      {...props}\n    >\n      {showBackground && variant === 'glass' && (\n        <div className=\"absolute inset-0 bg-gradient-to-br from-white/5 to-white/0 pointer-events-none\" />\n      )}\n      \n      <div className=\"relative z-10 h-full\">\n        {/* Header */}\n        {(title || Icon) && (\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-3\">\n              {Icon && (\n                <Icon \n                  className=\"w-5 h-5\" \n                  style={{ color: iconColor }} \n                />\n              )}\n              {title && (\n                <h3 className=\"font-semibold text-white\">{title}</h3>\n              )}\n            </div>\n            {trend && (\n              <div className=\"flex items-center space-x-1\">\n                <span \n                  className=\"text-sm font-bold\"\n                  style={{ \n                    color: trend === 'up' ? '#10b981' : \n                           trend === 'down' ? '#ef4444' : '#6b7280'\n                  }}\n                >\n                  {trend === 'up' ? '↗' : trend === 'down' ? '↘' : '—'}\n                </span>\n                {trendValue && (\n                  <span className=\"text-sm text-white/60\">{trendValue}</span>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Score Circle */}\n        {typeof score === 'number' && renderScore()}\n\n        {/* Value Display */}\n        {value && (\n          <div className=\"text-center mb-4\">\n            <div className=\"text-2xl font-bold text-white\">{value}</div>\n          </div>\n        )}\n\n        {/* Metrics Grid */}\n        {data?.metrics && (\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-white mb-2\">Metrics</h4>\n            {renderMetrics()}\n          </div>\n        )}\n\n        {/* Trends Grid */}\n        {data?.trends && (\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-white mb-2\">Trends</h4>\n            {renderTrends()}\n          </div>\n        )}\n\n        {/* Spending List */}\n        {data?.spending && (\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-white mb-2\">Spending</h4>\n            {renderSpending()}\n          </div>\n        )}\n\n        {/* Custom Children */}\n        {children}\n      </div>\n    </div>\n  );\n});\n\nUniversalCard.displayName = 'UniversalCard';\n\nexport default UniversalCard;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/accordion.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/accordion.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/alert-dialog.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/alert-dialog.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/shared/lib/utils\"\nimport { buttonVariants } from \"@/shared/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/alert.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/alert.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/aspect-ratio.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/aspect-ratio.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/avatar.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/avatar.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/badge.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/badge.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/breadcrumb.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/breadcrumb.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/button.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/button.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/calendar.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/calendar.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/shared/lib/utils\";\nimport { buttonVariants } from \"@/shared/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/card.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/card.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-2xl border border-white/[0.08] bg-white/[0.02] text-card-foreground shadow-md backdrop-blur-md\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/carousel.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/carousel.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\nimport { Button } from \"@/shared/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/chart.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/chart.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/checkbox.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/checkbox.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/collapsible.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/collapsible.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/command.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/command.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\nimport { Dialog, DialogContent } from \"@/shared/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {\n  children?: React.ReactNode;\n}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/context-menu.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/context-menu.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/dialog.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/dialog.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/drawer.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/drawer.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/dropdown-menu.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/dropdown-menu.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-lg px-3 py-2 text-sm outline-none\",\n      \"text-white/90 hover:text-white hover:bg-white/10 focus:bg-white/15 focus:text-white\",\n      \"data-[state=open]:bg-white/15 data-[state=open]:text-white transition-all duration-200\",\n      \"dark:text-white/90 dark:hover:text-white dark:hover:bg-white/10\",\n      \"light:text-slate-700 light:hover:text-slate-900 light:hover:bg-slate-100 light:focus:bg-slate-200\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-xl border p-2 shadow-2xl backdrop-blur-md\",\n      \"bg-black/95 border-white/20 text-white\",\n      \"dark:bg-black/95 dark:border-white/20 dark:text-white\",\n      \"light:bg-white/95 light:border-slate-300 light:text-slate-900\",\n      \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-xl border p-2 shadow-2xl backdrop-blur-md\",\n        \"bg-black/95 border-white/20 text-white\",\n        \"dark:bg-black/95 dark:border-white/20 dark:text-white\",\n        \"light:bg-white/95 light:border-slate-300 light:text-slate-900 light:shadow-lg\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-lg px-3 py-2 text-sm outline-none transition-all duration-200\",\n      \"text-white/90 hover:text-white hover:bg-white/10 focus:bg-white/15 focus:text-white\",\n      \"dark:text-white/90 dark:hover:text-white dark:hover:bg-white/10\",\n      \"light:text-slate-700 light:hover:text-slate-900 light:hover:bg-slate-100 light:focus:bg-slate-200\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-lg py-2 pl-8 pr-3 text-sm outline-none transition-all duration-200\",\n      \"text-white/90 hover:text-white hover:bg-white/10 focus:bg-white/15 focus:text-white\",\n      \"dark:text-white/90 dark:hover:text-white dark:hover:bg-white/10\",\n      \"light:text-slate-700 light:hover:text-slate-900 light:hover:bg-slate-100 light:focus:bg-slate-200\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-lg py-2 pl-8 pr-3 text-sm outline-none transition-all duration-200\",\n      \"text-white/90 hover:text-white hover:bg-white/10 focus:bg-white/15 focus:text-white\",\n      \"dark:text-white/90 dark:hover:text-white dark:hover:bg-white/10\",\n      \"light:text-slate-700 light:hover:text-slate-900 light:hover:bg-slate-100 light:focus:bg-slate-200\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-3 py-2 text-sm font-semibold\",\n      \"text-white/60\",\n      \"dark:text-white/60\",\n      \"light:text-slate-500\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\n      \"-mx-1 my-2 h-px\",\n      \"bg-white/20\",\n      \"dark:bg-white/20\",\n      \"light:bg-slate-300\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest\",\n        \"text-white/40\",\n        \"dark:text-white/40\",\n        \"light:text-slate-400\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/form.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/form.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/shared/lib/utils\"\nimport { Label } from \"@/shared/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/hover-card.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/hover-card.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/input-otp.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/input-otp.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/input.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/input.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/label.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/label.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/lightweight-charts.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/lightweight-charts.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Lightweight chart components to replace Recharts for simple use cases\n * Uses SVG and CSS for minimal bundle impact\n */\nimport React from 'react';\n\n// Simple data types\ninterface ChartData {\n  x: number | string;\n  y: number;\n  label?: string;\n}\n\ninterface PieData {\n  value: number;\n  label: string;\n  color: string;\n}\n\n// Utility functions\nconst formatCurrency = (value: number) => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(value);\n};\n\nconst getMinMax = (data: ChartData[]) => {\n  const values = data.map(d => d.y);\n  return {\n    min: Math.min(...values),\n    max: Math.max(...values)\n  };\n};\n\n// Simple Line Chart Component\ninterface SimpleLineChartProps {\n  data: ChartData[];\n  width?: number;\n  height?: number;\n  strokeColor?: string;\n  strokeWidth?: number;\n  showDots?: boolean;\n  className?: string;\n}\n\nexport const SimpleLineChart: React.FC<SimpleLineChartProps> = ({\n  data,\n  width = 400,\n  height = 200,\n  strokeColor = '#3B82F6',\n  strokeWidth = 2,\n  showDots = true,\n  className = ''\n}) => {\n  if (!data || data.length === 0) return null;\n\n  const { min, max } = getMinMax(data);\n  const padding = 20;\n  const chartWidth = width - padding * 2;\n  const chartHeight = height - padding * 2;\n\n  // Create path\n  const pathData = data.map((point, index) => {\n    const x = padding + (index / (data.length - 1)) * chartWidth;\n    const y = padding + (1 - (point.y - min) / (max - min)) * chartHeight;\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n\n  return (\n    <div className={`relative ${className}`}>\n      <svg width={width} height={height} className=\"overflow-visible\">\n        {/* Grid lines */}\n        <defs>\n          <pattern id=\"grid\" width=\"40\" height=\"40\" patternUnits=\"userSpaceOnUse\">\n            <path d=\"M 40 0 L 0 0 0 40\" fill=\"none\" stroke=\"rgba(255,255,255,0.1)\" strokeWidth=\"1\"/>\n          </pattern>\n        </defs>\n        <rect width={width} height={height} fill=\"url(#grid)\" opacity=\"0.3\" />\n        \n        {/* Main line */}\n        <path\n          d={pathData}\n          fill=\"none\"\n          stroke={strokeColor}\n          strokeWidth={strokeWidth}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        \n        {/* Data points */}\n        {showDots && data.map((point, index) => {\n          const x = padding + (index / (data.length - 1)) * chartWidth;\n          const y = padding + (1 - (point.y - min) / (max - min)) * chartHeight;\n          return (\n            <circle\n              key={index}\n              cx={x}\n              cy={y}\n              r=\"4\"\n              fill={strokeColor}\n              className=\"hover:r-6 transition-all duration-200\"\n            />\n          );\n        })}\n      </svg>\n      \n      {/* Tooltip container */}\n      <div className=\"absolute inset-0 pointer-events-none\">\n        {data.map((point, index) => {\n          const x = padding + (index / (data.length - 1)) * chartWidth;\n          const y = padding + (1 - (point.y - min) / (max - min)) * chartHeight;\n          return (\n            <div\n              key={index}\n              className=\"absolute opacity-0 hover:opacity-100 transition-opacity bg-black/80 text-white text-xs px-2 py-1 rounded pointer-events-auto\"\n              style={{\n                left: `${(x / width) * 100}%`,\n                top: `${(y / height) * 100}%`,\n                transform: 'translate(-50%, -100%)'\n              }}\n            >\n              {point.label || point.x}: {formatCurrency(point.y)}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\n// Simple Area Chart Component\ninterface SimpleAreaChartProps extends SimpleLineChartProps {\n  fillColor?: string;\n  gradientId?: string;\n}\n\nexport const SimpleAreaChart: React.FC<SimpleAreaChartProps> = ({\n  data,\n  width = 400,\n  height = 200,\n  strokeColor = '#3B82F6',\n  fillColor = '#3B82F6',\n  strokeWidth = 2,\n  className = '',\n  gradientId = 'areaGradient'\n}) => {\n  if (!data || data.length === 0) return null;\n\n  const { min, max } = getMinMax(data);\n  const padding = 20;\n  const chartWidth = width - padding * 2;\n  const chartHeight = height - padding * 2;\n\n  // Create area path\n  const linePath = data.map((point, index) => {\n    const x = padding + (index / (data.length - 1)) * chartWidth;\n    const y = padding + (1 - (point.y - min) / (max - min)) * chartHeight;\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n\n  // Complete area path\n  const areaPath = `${linePath} L ${padding + chartWidth} ${padding + chartHeight} L ${padding} ${padding + chartHeight} Z`;\n\n  return (\n    <div className={`relative ${className}`}>\n      <svg width={width} height={height} className=\"overflow-visible\">\n        {/* Gradient definition */}\n        <defs>\n          <linearGradient id={gradientId} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={fillColor} stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor={fillColor} stopOpacity=\"0\" />\n          </linearGradient>\n        </defs>\n        \n        {/* Area fill */}\n        <path\n          d={areaPath}\n          fill={`url(#${gradientId})`}\n          stroke=\"none\"\n        />\n        \n        {/* Top line */}\n        <path\n          d={linePath}\n          fill=\"none\"\n          stroke={strokeColor}\n          strokeWidth={strokeWidth}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    </div>\n  );\n};\n\n// Simple Pie Chart Component\ninterface SimplePieChartProps {\n  data: PieData[];\n  size?: number;\n  innerRadius?: number;\n  className?: string;\n  showLabels?: boolean;\n}\n\nexport const SimplePieChart: React.FC<SimplePieChartProps> = ({\n  data,\n  size = 200,\n  innerRadius = 0,\n  className = '',\n  showLabels = true\n}) => {\n  if (!data || data.length === 0) return null;\n\n  const total = data.reduce((sum, item) => sum + item.value, 0);\n  const center = size / 2;\n  const radius = (size - 20) / 2;\n\n  let currentAngle = -90; // Start from top\n\n  const segments = data.map((item, index) => {\n    const percentage = item.value / total;\n    const angle = percentage * 360;\n    const startAngle = currentAngle;\n    const endAngle = currentAngle + angle;\n\n    // Convert to radians\n    const startRad = (startAngle * Math.PI) / 180;\n    const endRad = (endAngle * Math.PI) / 180;\n\n    // Calculate path\n    const x1 = center + Math.cos(startRad) * radius;\n    const y1 = center + Math.sin(startRad) * radius;\n    const x2 = center + Math.cos(endRad) * radius;\n    const y2 = center + Math.sin(endRad) * radius;\n\n    const largeArcFlag = angle > 180 ? 1 : 0;\n\n    let path;\n    if (innerRadius > 0) {\n      // Donut chart\n      const innerX1 = center + Math.cos(startRad) * innerRadius;\n      const innerY1 = center + Math.sin(startRad) * innerRadius;\n      const innerX2 = center + Math.cos(endRad) * innerRadius;\n      const innerY2 = center + Math.sin(endRad) * innerRadius;\n\n      path = [\n        `M ${x1} ${y1}`,\n        `A ${radius} ${radius} 0 ${largeArcFlag} 1 ${x2} ${y2}`,\n        `L ${innerX2} ${innerY2}`,\n        `A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 0 ${innerX1} ${innerY1}`,\n        'Z'\n      ].join(' ');\n    } else {\n      // Regular pie chart\n      path = [\n        `M ${center} ${center}`,\n        `L ${x1} ${y1}`,\n        `A ${radius} ${radius} 0 ${largeArcFlag} 1 ${x2} ${y2}`,\n        'Z'\n      ].join(' ');\n    }\n\n    currentAngle += angle;\n\n    return {\n      ...item,\n      path,\n      percentage: percentage * 100,\n      midAngle: startAngle + angle / 2\n    };\n  });\n\n  return (\n    <div className={`relative ${className}`}>\n      <svg width={size} height={size}>\n        {segments.map((segment, index) => (\n          <path\n            key={index}\n            d={segment.path}\n            fill={segment.color}\n            stroke=\"rgba(255,255,255,0.1)\"\n            strokeWidth=\"2\"\n            className=\"hover:opacity-80 transition-opacity cursor-pointer\"\n          />\n        ))}\n      </svg>\n      \n      {/* Labels */}\n      {showLabels && (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"text-center space-y-1\">\n            {segments.map((segment, index) => (\n              <div key={index} className=\"flex items-center text-xs text-white/80\">\n                <div \n                  className=\"w-3 h-3 rounded mr-2\" \n                  style={{ backgroundColor: segment.color }}\n                />\n                <span>{segment.label}: {segment.percentage.toFixed(1)}%</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Simple Bar Chart Component\ninterface SimpleBarChartProps {\n  data: ChartData[];\n  width?: number;\n  height?: number;\n  barColor?: string;\n  className?: string;\n  showValues?: boolean;\n}\n\nexport const SimpleBarChart: React.FC<SimpleBarChartProps> = ({\n  data,\n  width = 400,\n  height = 200,\n  barColor = '#3B82F6',\n  className = '',\n  showValues = true\n}) => {\n  if (!data || data.length === 0) return null;\n\n  const { min, max } = getMinMax(data);\n  const padding = 20;\n  const chartWidth = width - padding * 2;\n  const chartHeight = height - padding * 2;\n  const barWidth = chartWidth / data.length * 0.8;\n  const barSpacing = chartWidth / data.length * 0.2;\n\n  return (\n    <div className={`relative ${className}`}>\n      <svg width={width} height={height}>\n        {data.map((point, index) => {\n          const x = padding + index * (barWidth + barSpacing) + barSpacing / 2;\n          const barHeight = ((point.y - min) / (max - min)) * chartHeight;\n          const y = padding + chartHeight - barHeight;\n\n          return (\n            <g key={index}>\n              <rect\n                x={x}\n                y={y}\n                width={barWidth}\n                height={barHeight}\n                fill={barColor}\n                className=\"hover:opacity-80 transition-opacity\"\n              />\n              {showValues && (\n                <text\n                  x={x + barWidth / 2}\n                  y={y - 5}\n                  textAnchor=\"middle\"\n                  className=\"fill-white text-xs\"\n                >\n                  {formatCurrency(point.y)}\n                </text>\n              )}\n            </g>\n          );\n        })}\n      </svg>\n    </div>\n  );\n};\n\n// Multi-line chart for time series data\ninterface MultiLineData {\n  [key: string]: number | string;\n}\n\ninterface LineConfig {\n  dataKey: string;\n  stroke: string;\n  label?: string;\n}\n\ninterface MultiLineChartProps {\n  data: MultiLineData[];\n  lines: LineConfig[];\n  width?: number;\n  height?: number;\n  strokeWidth?: number;\n  className?: string;\n  xAxisKey?: string;\n  showDots?: boolean;\n  showLegend?: boolean;\n}\n\nexport const MultiLineChart: React.FC<MultiLineChartProps> = ({\n  data,\n  lines,\n  width = 400,\n  height = 200,\n  strokeWidth = 2,\n  className = '',\n  xAxisKey = 'x',\n  showDots = true,\n  showLegend = true\n}) => {\n  if (!data || data.length === 0 || !lines || lines.length === 0) return null;\n\n  // Get min/max for all line data\n  const allValues = data.flatMap(item => \n    lines.map(line => Number(item[line.dataKey]) || 0)\n  );\n  const min = Math.min(...allValues);\n  const max = Math.max(...allValues);\n\n  const padding = 40;\n  const chartWidth = width - padding * 2;\n  const chartHeight = height - padding * 2 - (showLegend ? 40 : 0);\n\n  // Format date for display\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', { month: 'short', year: '2-digit' });\n  };\n\n  return (\n    <div className={`relative ${className}`}>\n      <svg width={width} height={height + (showLegend ? 40 : 0)} className=\"overflow-visible\">\n        {/* Grid lines */}\n        <defs>\n          <pattern id=\"multiGrid\" width=\"40\" height=\"30\" patternUnits=\"userSpaceOnUse\">\n            <path d=\"M 40 0 L 0 0 0 30\" fill=\"none\" stroke=\"rgba(255,255,255,0.1)\" strokeWidth=\"1\"/>\n          </pattern>\n        </defs>\n        <rect x={padding} y={padding} width={chartWidth} height={chartHeight} fill=\"url(#multiGrid)\" opacity=\"0.3\" />\n        \n        {/* Y-axis labels */}\n        <g>\n          {[0, 25, 50, 75, 100].map((value, index) => {\n            const y = padding + chartHeight - (value / 100) * chartHeight;\n            return (\n              <g key={index}>\n                <text\n                  x={padding - 10}\n                  y={y + 4}\n                  textAnchor=\"end\"\n                  className=\"fill-white text-xs\"\n                >\n                  {value}\n                </text>\n                <line\n                  x1={padding}\n                  y1={y}\n                  x2={padding + chartWidth}\n                  y2={y}\n                  stroke=\"rgba(255,255,255,0.1)\"\n                  strokeWidth=\"1\"\n                />\n              </g>\n            );\n          })}\n        </g>\n        \n        {/* X-axis labels */}\n        <g>\n          {data.map((point, index) => {\n            if (index % Math.ceil(data.length / 6) === 0) {\n              const x = padding + (index / (data.length - 1)) * chartWidth;\n              return (\n                <text\n                  key={index}\n                  x={x}\n                  y={padding + chartHeight + 20}\n                  textAnchor=\"middle\"\n                  className=\"fill-white text-xs\"\n                >\n                  {formatDate(String(point[xAxisKey]))}\n                </text>\n              );\n            }\n            return null;\n          })}\n        </g>\n\n        {/* Draw lines */}\n        {lines.map((line, lineIndex) => {\n          const pathData = data.map((point, index) => {\n            const x = padding + (index / (data.length - 1)) * chartWidth;\n            const value = Number(point[line.dataKey]) || 0;\n            const y = padding + (1 - (value - min) / (max - min)) * chartHeight;\n            return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n          }).join(' ');\n\n          return (\n            <g key={lineIndex}>\n              {/* Line path */}\n              <path\n                d={pathData}\n                fill=\"none\"\n                stroke={line.stroke}\n                strokeWidth={strokeWidth}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              />\n              \n              {/* Data points */}\n              {showDots && data.map((point, index) => {\n                const x = padding + (index / (data.length - 1)) * chartWidth;\n                const value = Number(point[line.dataKey]) || 0;\n                const y = padding + (1 - (value - min) / (max - min)) * chartHeight;\n                return (\n                  <circle\n                    key={`${lineIndex}-${index}`}\n                    cx={x}\n                    cy={y}\n                    r=\"3\"\n                    fill={line.stroke}\n                    className=\"hover:r-5 transition-all duration-200\"\n                  />\n                );\n              })}\n            </g>\n          );\n        })}\n      </svg>\n      \n      {/* Legend */}\n      {showLegend && (\n        <div className=\"flex justify-center space-x-6 mt-4\">\n          {lines.map((line, index) => (\n            <div key={index} className=\"flex items-center space-x-2\">\n              <div \n                className=\"w-4 h-4 rounded-full\" \n                style={{ backgroundColor: line.stroke }}\n              />\n              <span className=\"text-white text-xs\">\n                {line.label || line.dataKey}\n              </span>\n            </div>\n          ))}\n        </div>\n      )}\n      \n      {/* Interactive tooltip overlay */}\n      <div className=\"absolute inset-0 pointer-events-none\">\n        {data.map((point, pointIndex) => {\n          const x = padding + (pointIndex / (data.length - 1)) * chartWidth;\n          return (\n            <div\n              key={pointIndex}\n              className=\"absolute w-2 h-full pointer-events-auto group\"\n              style={{\n                left: `${(x / width) * 100}%`,\n                transform: 'translateX(-50%)'\n              }}\n            >\n              <div className=\"absolute opacity-0 group-hover:opacity-100 transition-opacity bg-black/90 text-white text-xs p-2 rounded border border-white/20 z-10 whitespace-nowrap\"\n                   style={{\n                     bottom: '100%',\n                     left: '50%',\n                     transform: 'translateX(-50%)',\n                     marginBottom: '8px'\n                   }}>\n                <div className=\"font-medium mb-1\">\n                  {formatDate(String(point[xAxisKey]))}\n                </div>\n                {lines.map((line, lineIndex) => (\n                  <div key={lineIndex} className=\"flex items-center justify-between space-x-4\">\n                    <span>{line.label || line.dataKey}:</span>\n                    <span className=\"font-medium\">{Math.round(Number(point[line.dataKey]) || 0)}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\n// Export all components\nexport default {\n  SimpleLineChart,\n  SimpleAreaChart,\n  SimplePieChart,\n  SimpleBarChart,\n  MultiLineChart\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/menubar.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/menubar.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\nimport LiquidGlassSVGFilters from '@/shared/ui/LiquidGlassSVGFilters'\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <>\n    <LiquidGlassSVGFilters />\n    <MenubarPrimitive.Root\n      ref={ref}\n      className={cn(\n        \"liquid-glass-nav flex h-12 items-center space-x-2 rounded-2xl p-2 border-0\",\n        className\n      )}\n      {...props}\n    />\n  </>\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"liquid-glass-menu-item flex cursor-default select-none items-center rounded-xl px-4 py-2 text-sm font-medium outline-none text-white/90 hover:text-white transition-all duration-300 focus:ring-2 focus:ring-blue-400/50 data-[state=open]:bg-white/10 data-[state=open]:text-white data-[state=open]:scale-105\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-xl px-3 py-2 text-sm outline-none text-white/80 hover:text-white hover:bg-white/5 focus:bg-white/10 focus:text-white data-[state=open]:bg-white/10 data-[state=open]:text-white transition-all duration-200\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"liquid-glass-card z-50 min-w-[8rem] overflow-hidden rounded-2xl border-0 p-2 text-white shadow-2xl data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"liquid-glass-card z-50 min-w-[12rem] overflow-hidden rounded-2xl border-0 p-2 text-white shadow-2xl data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-xl px-3 py-2 text-sm outline-none text-white/80 hover:text-white transition-all duration-200 hover:bg-white/5 focus:bg-white/10 focus:text-white data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-xl py-2 pl-8 pr-3 text-sm outline-none text-white/80 hover:text-white hover:bg-white/5 focus:bg-white/10 focus:text-white data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-all duration-200\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-xl py-2 pl-8 pr-3 text-sm outline-none text-white/80 hover:text-white hover:bg-white/5 focus:bg-white/10 focus:text-white data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-all duration-200\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-3 py-2 text-sm font-semibold text-white/60\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-white/10\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-white/40\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/navigation-menu.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/navigation-menu.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/pagination.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/pagination.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/shared/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/popover.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/popover.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/progress.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/progress.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/radio-group.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/radio-group.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/resizable.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/resizable.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/scroll-area.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/scroll-area.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/select.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/select.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/separator.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/separator.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/sheet.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/sheet.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/sidebar.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/sidebar.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/shared/lib/utils\"\nimport { Button } from \"@/shared/ui/button\"\nimport { Input } from \"@/shared/ui/input\"\nimport { Separator } from \"@/shared/ui/separator\"\nimport { Sheet, SheetContent } from \"@/shared/ui/sheet\"\nimport { Skeleton } from \"@/shared/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/shared/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/skeleton.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/skeleton.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from \"@/shared/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\nexport default Skeleton\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/slider.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/slider.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/sonner.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/sonner.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  return (\n    <Sonner\n      theme=\"dark\"\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/switch.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/switch.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      // Base iOS26 toggle styling - pill-shaped with proper size\n      \"peer inline-flex h-7 w-12 shrink-0 cursor-pointer items-center rounded-full transition-all duration-300 ease-out focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50\",\n      // Dark mode styling\n      \"data-[state=checked]:bg-blue-600 data-[state=unchecked]:bg-gray-600/60\",\n      // Light mode styling\n      \"dark:data-[state=checked]:bg-blue-500 dark:data-[state=unchecked]:bg-gray-500/40\",\n      // Border for better definition\n      \"border-2 border-transparent\",\n      // Smooth shadow for depth\n      \"shadow-inner\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        // iOS26 thumb styling - perfect circle with shadow\n        \"pointer-events-none block h-5 w-5 rounded-full bg-white shadow-lg ring-0 transition-all duration-300 ease-out\",\n        // Transform for smooth sliding animation\n        \"data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-1\",\n        // Enhanced shadow for iOS26 look\n        \"shadow-[0_2px_8px_rgba(0,0,0,0.2)]\",\n        // Dark mode thumb styling\n        \"dark:bg-white dark:shadow-[0_2px_8px_rgba(0,0,0,0.4)]\",\n        // Light mode thumb styling  \n        \"bg-white shadow-[0_2px_6px_rgba(0,0,0,0.15)]\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/table.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/table.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/tabs.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/tabs.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/textarea.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/textarea.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nexport type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/toast.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/toast.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/toaster.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/toaster.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useToast } from \"@/shared/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/shared/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/toggle-group.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/toggle-group.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/shared/lib/utils\"\nimport { toggleVariants } from \"@/shared/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/toggle.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/toggle.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/tooltip.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/tooltip.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/components/ui/use-toast.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/components/ui/use-toast.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useToast, toast } from \"@/shared/hooks/use-toast\";\n\nexport { useToast, toast };\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/config/security.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/config/security.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Security configuration for Vueni\n\nexport const securityConfig = {\n  // Content Security Policy - Production-ready with nonce support\n  csp: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\n        \"'self'\", \n        \"https://cdn.jsdelivr.net\", \n        \"https://unpkg.com\",\n        // Production-ready script hashes (replace unsafe-inline)\n        \"'sha256-/wL1zGfTPhWOPi+qXi1XcgE5sZgIlPgEzR2+9nLjhY4='\",\n        \"'sha256-+Lk5cCCOUJqP1v7+FjKhMTDxJ5VFoV1T4Q7YQzTw2Kc='\"\n      ],\n      styleSrc: [\n        \"'self'\", \n        \"https://fonts.googleapis.com\",\n        // Production-ready style hashes (replace unsafe-inline)\n        \"'sha256-47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU='\",\n        \"'sha256-biLFinpqYMtWHmXfkA1BPeCY0/fNt46SAZ+BBk5YUog='\"\n      ],\n      imgSrc: [\"'self'\", \"data:\", \"https:\", \"blob:\"],\n      fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n      connectSrc: [\n        \"'self'\", \n        \"https://api.github.com\", \n        \"https://api.coingecko.com\", \n        \"https://httpbin.org\"\n      ],\n      objectSrc: [\"'none'\"],\n      mediaSrc: [\"'none'\"],\n      frameSrc: [\"'none'\"],\n      frameAncestors: [\"'none'\"],\n      baseUri: [\"'self'\"],\n      formAction: [\"'self'\"],\n      upgradeInsecureRequests: true\n    },\n  },\n  \n  // Session configuration\n  session: {\n    timeout: 30 * 60 * 1000, // 30 minutes\n    warningTime: 5 * 60 * 1000, // 5 minutes before timeout\n    extendOnActivity: true,\n  },\n  \n  // Password requirements\n  password: {\n    minLength: 8,\n    requireUppercase: true,\n    requireLowercase: true,\n    requireNumbers: true,\n    requireSpecialChars: true,\n  },\n  \n  // Rate limiting\n  rateLimit: {\n    maxAttempts: 5,\n    windowMs: 15 * 60 * 1000, // 15 minutes\n  },\n  \n  // Audit logging\n  audit: {\n    enabled: true,\n    logLevel: import.meta.env.PROD ? 'warn' : 'debug',\n    sensitiveFields: ['password', 'ssn', 'creditCard', 'bankAccount'],\n  },\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/hooks/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/hooks/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Hooks barrel export\n * Custom React hooks for Liquid Spark Finance\n */\n\n// Existing hooks\nexport { default as useMobile } from './use-mobile';\nexport { useToast } from './use-toast';\nexport { default as useFinancialMetrics } from './useFinancialMetrics';\nexport { default as useLiquidGlass } from './useLiquidGlass';\nexport { default as usePerformanceOptimization } from './usePerformanceOptimization';\n\n// TimeRange hooks\nexport {\n  useTimeRange,\n  useTimeRangeFilter,\n  useTimeRangeValidator,\n  useOptimizedTimeRange\n} from './useTimeRange';\n\nexport type {\n  UseTimeRangeOptions,\n  UseTimeRangeReturn\n} from './useTimeRange';","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/hooks/use-main-thread-optimization.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/hooks/use-main-thread-optimization.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Main Thread Optimization Hook\n * Prevents blocking tasks and improves TTI by splitting heavy operations\n * Uses React 18 startTransition and scheduler features\n */\n\nimport { useCallback, useTransition, startTransition } from 'react';\nimport { flushSync } from 'react-dom';\n\ninterface TaskOptions {\n  priority?: 'high' | 'normal' | 'low';\n  timeout?: number;\n  chunk?: boolean;\n}\n\n// Time slice for chunked operations (5ms to stay under 16ms frame budget)\nconst TIME_SLICE_MS = 5;\n\nexport const useMainThreadOptimization = () => {\n  const [isPending, startTransitionInternal] = useTransition();\n\n  // Split large tasks into smaller chunks to prevent blocking\n  const chunkTask = useCallback((\n    task: () => void,\n    onComplete?: () => void,\n    maxChunkTime = TIME_SLICE_MS\n  ) => {\n    const startTime = performance.now();\n    \n    try {\n      task();\n      \n      // If task completed within time budget, we're done\n      if (performance.now() - startTime <= maxChunkTime) {\n        onComplete?.();\n        return;\n      }\n    } catch (error) {\n      console.error('Task chunk failed:', error);\n      onComplete?.();\n      return;\n    }\n\n    // If we get here, task needs to be chunked further\n    // Schedule continuation in next frame\n    requestIdleCallback(() => {\n      chunkTask(task, onComplete, maxChunkTime);\n    }, { timeout: 100 });\n  }, []);\n\n  // Optimized task scheduler with priority levels\n  const scheduleTask = useCallback((\n    task: () => void | Promise<void>,\n    options: TaskOptions = {}\n  ) => {\n    const { priority = 'normal', timeout = 5000, chunk = false } = options;\n\n    if (chunk) {\n      // Use chunking for heavy synchronous tasks\n      chunkTask(task as () => void, undefined, TIME_SLICE_MS);\n      return;\n    }\n\n    switch (priority) {\n      case 'high':\n        // High priority: execute immediately but in transition\n        startTransitionInternal(() => {\n          const result = task();\n          if (result instanceof Promise) {\n            result.catch(console.error);\n          }\n        });\n        break;\n\n      case 'low':\n        // Low priority: defer until idle\n        requestIdleCallback(() => {\n          startTransitionInternal(() => {\n            const result = task();\n            if (result instanceof Promise) {\n              result.catch(console.error);\n            }\n          });\n        }, { timeout });\n        break;\n\n      default:\n        // Normal priority: use transition\n        startTransitionInternal(() => {\n          const result = task();\n          if (result instanceof Promise) {\n            result.catch(console.error);\n          }\n        });\n        break;\n    }\n  }, [startTransitionInternal, chunkTask]);\n\n  // Optimized data processing for large datasets\n  const processLargeDataset = useCallback(<T>(\n    data: T[],\n    processor: (item: T) => void,\n    batchSize = 100\n  ) => {\n    let index = 0;\n\n    const processBatch = () => {\n      const startTime = performance.now();\n      \n      while (index < data.length && performance.now() - startTime < TIME_SLICE_MS) {\n        processor(data[index]);\n        index++;\n      }\n\n      if (index < data.length) {\n        // Schedule next batch\n        scheduleTask(processBatch, { priority: 'low' });\n      }\n    };\n\n    scheduleTask(processBatch, { priority: 'normal' });\n  }, [scheduleTask]);\n\n  // Defer heavy operations until after paint\n  const deferUntilPaint = useCallback((task: () => void) => {\n    requestAnimationFrame(() => {\n      scheduleTask(task, { priority: 'low' });\n    });\n  }, [scheduleTask]);\n\n  // Force synchronous update when needed (use sparingly)\n  const urgentUpdate = useCallback((task: () => void) => {\n    flushSync(() => {\n      task();\n    });\n  }, []);\n\n  // Monitor long tasks for debugging\n  const monitorLongTasks = useCallback(() => {\n    if (import.meta.env.DEV && 'PerformanceObserver' in window) {\n      try {\n        const observer = new PerformanceObserver((list) => {\n          list.getEntries().forEach((entry) => {\n            if (entry.duration > 50) {\n              console.warn(\n                `🐌 Long task detected: ${entry.duration.toFixed(2)}ms`,\n                entry\n              );\n            }\n          });\n        });\n\n        observer.observe({ entryTypes: ['longtask'] });\n        \n        return () => observer.disconnect();\n      } catch (error) {\n        console.warn('Long task monitoring not supported:', error);\n      }\n    }\n  }, []);\n\n  return {\n    isPending,\n    scheduleTask,\n    chunkTask,\n    processLargeDataset,\n    deferUntilPaint,\n    urgentUpdate,\n    monitorLongTasks\n  };\n};\n\n// Helper for React components to avoid blocking renders\nexport const useNonBlockingEffect = (\n  effect: () => void | Promise<void>,\n  deps: React.DependencyList,\n  priority: TaskOptions['priority'] = 'normal'\n) => {\n  const { scheduleTask } = useMainThreadOptimization();\n\n  React.useEffect(() => {\n    scheduleTask(effect, { priority });\n  }, deps);\n};\n\n// Performance budget checker\nexport const usePerformanceBudget = () => {\n  const checkBudget = useCallback((operationName: string, startTime: number) => {\n    const duration = performance.now() - startTime;\n    const budget = 16; // 16ms frame budget\n    \n    if (duration > budget) {\n      console.warn(\n        `⚠️ Performance budget exceeded: ${operationName} took ${duration.toFixed(2)}ms (budget: ${budget}ms)`\n      );\n    }\n    \n    return duration;\n  }, []);\n\n  const measure = useCallback(<T>(operationName: string, operation: () => T): T => {\n    const startTime = performance.now();\n    const result = operation();\n    checkBudget(operationName, startTime);\n    return result;\n  }, [checkBudget]);\n\n  return { checkBudget, measure };\n};\n\nexport default useMainThreadOptimization; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/hooks/use-mobile.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/hooks/use-mobile.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/hooks/use-toast.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/hooks/use-toast.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/shared/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/hooks/useFinancialMetrics.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/hooks/useFinancialMetrics.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo } from 'react';\nimport { Account } from '@/types/accounts';\nimport {\n  selectTotalWealth,\n  selectTotalAssets,\n  selectTotalLiabilities,\n  selectLiquidAssets,\n  selectInvestmentAssets,\n  selectAccountsByType\n} from '@/selectors/financialSelectors';\n\n/**\n * Custom hook for accessing financial metrics\n * Provides memoized calculations for performance\n */\nexport const useFinancialMetrics = (accounts: Account[]) => {\n  const totalWealth = useMemo(() => selectTotalWealth(accounts), [accounts]);\n  const totalAssets = useMemo(() => selectTotalAssets(accounts), [accounts]);\n  const totalLiabilities = useMemo(() => selectTotalLiabilities(accounts), [accounts]);\n  const liquidAssets = useMemo(() => selectLiquidAssets(accounts), [accounts]);\n  const investmentAssets = useMemo(() => selectInvestmentAssets(accounts), [accounts]);\n  const accountsByType = useMemo(() => selectAccountsByType(accounts), [accounts]);\n\n  // Additional derived metrics\n  const debtToAssetRatio = useMemo(() => {\n    if (totalAssets === 0) return 0;\n    return (totalLiabilities / totalAssets) * 100;\n  }, [totalAssets, totalLiabilities]);\n\n  const liquidityRatio = useMemo(() => {\n    if (totalAssets === 0) return 0;\n    return (liquidAssets / totalAssets) * 100;\n  }, [liquidAssets, totalAssets]);\n\n  const investmentRatio = useMemo(() => {\n    if (totalAssets === 0) return 0;\n    return (investmentAssets / totalAssets) * 100;\n  }, [investmentAssets, totalAssets]);\n\n  return {\n    // Primary metrics\n    totalWealth,\n    totalAssets,\n    totalLiabilities,\n    liquidAssets,\n    investmentAssets,\n    \n    // Grouped by type\n    accountsByType,\n    \n    // Ratios\n    debtToAssetRatio,\n    liquidityRatio,\n    investmentRatio,\n    \n    // Helper values\n    hasDebt: totalLiabilities > 0,\n    isPositiveNetWorth: totalWealth > 0,\n    hasInvestments: investmentAssets > 0\n  };\n};\n\n/**\n * Simplified hook for just total wealth\n */\nexport const useTotalWealth = (accounts: Account[]) => {\n  return useMemo(() => selectTotalWealth(accounts), [accounts]);\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/hooks/useLiquidGlass.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/hooks/useLiquidGlass.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { secureStorage } from '@/shared/utils/crypto';\n\ninterface LiquidGlassSettings {\n  enabled: boolean;\n  globalIntensity: number; // 0-1\n  globalDistortion: number; // 0-1\n  animated: boolean;\n  interactive: boolean;\n  performanceMode: boolean;\n  autoDetectPerformance: boolean;\n}\n\ninterface LiquidGlassContextType {\n  settings: LiquidGlassSettings;\n  updateSettings: (updates: Partial<LiquidGlassSettings>) => void;\n  resetSettings: () => void;\n  performanceInfo: {\n    webGLSupported: boolean;\n    isMobile: boolean;\n    isLowEnd: boolean;\n    prefersReducedMotion: boolean;\n  };\n}\n\nconst defaultSettings: LiquidGlassSettings = {\n  enabled: true,\n  globalIntensity: 0.6,\n  globalDistortion: 0.4,\n  animated: true,\n  interactive: true,\n  performanceMode: false,\n  autoDetectPerformance: true,\n};\n\nconst LiquidGlassContext = createContext<LiquidGlassContextType | undefined>(undefined);\n\n// Performance detection utilities\nconst detectPerformance = () => {\n  // Check WebGL support\n  const checkWebGL = () => {\n    try {\n      const canvas = document.createElement('canvas');\n      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n      return !!gl;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  // Detect mobile devices\n  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n    navigator.userAgent\n  );\n\n  // Detect low-end devices\n  const isLowEnd = navigator.hardwareConcurrency ? navigator.hardwareConcurrency < 4 : false;\n\n  // Check reduced motion preference\n  const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n  return {\n    webGLSupported: checkWebGL(),\n    isMobile,\n    isLowEnd,\n    prefersReducedMotion,\n  };\n};\n\n// Auto-adjust settings based on performance\nconst getOptimizedSettings = (\n  settings: LiquidGlassSettings,\n  performanceInfo: ReturnType<typeof detectPerformance>\n): LiquidGlassSettings => {\n  if (!settings.autoDetectPerformance) return settings;\n\n  const { isMobile, isLowEnd, prefersReducedMotion, webGLSupported } = performanceInfo;\n\n  // If no WebGL support, disable entirely\n  if (!webGLSupported) {\n    return { ...settings, enabled: false };\n  }\n\n  // Mobile optimization\n  if (isMobile) {\n    return {\n      ...settings,\n      globalIntensity: Math.min(settings.globalIntensity * 0.6, 0.4),\n      globalDistortion: Math.min(settings.globalDistortion * 0.6, 0.3),\n      animated: false,\n      interactive: false,\n    };\n  }\n\n  // Low-end device optimization\n  if (isLowEnd) {\n    return {\n      ...settings,\n      globalIntensity: Math.min(settings.globalIntensity * 0.7, 0.5),\n      globalDistortion: Math.min(settings.globalDistortion * 0.7, 0.3),\n      animated: !prefersReducedMotion,\n    };\n  }\n\n  // Respect reduced motion preference\n  if (prefersReducedMotion) {\n    return {\n      ...settings,\n      animated: false,\n    };\n  }\n\n  return settings;\n};\n\nexport const LiquidGlassProvider = ({ children }: { children: ReactNode }) => {\n  const [settings, setSettings] = useState<LiquidGlassSettings>(() => {\n    // Load settings from secure storage if available\n    try {\n      const saved = secureStorage.getItem('vueni:liquidGlassSettings');\n      return saved ? { ...defaultSettings, ...saved } : defaultSettings;\n    } catch {\n      return defaultSettings;\n    }\n  });\n\n  const [performanceInfo] = useState(() => detectPerformance());\n\n  // Get optimized settings based on performance\n  const optimizedSettings = getOptimizedSettings(settings, performanceInfo);\n\n  const updateSettings = (updates: Partial<LiquidGlassSettings>) => {\n    const newSettings = { ...settings, ...updates };\n    setSettings(newSettings);\n    \n    // Save to secure storage\n    try {\n      secureStorage.setItem('vueni:liquidGlassSettings', newSettings);\n    } catch {\n      // Ignore storage errors\n    }\n  };\n\n  const resetSettings = () => {\n    setSettings(defaultSettings);\n    try {\n      secureStorage.removeItem('vueni:liquidGlassSettings');\n    } catch {\n      // Ignore storage errors\n    }\n  };\n\n  // Performance monitoring\n  useEffect(() => {\n    if (!optimizedSettings.enabled) return;\n\n    let frameCount = 0;\n    let lastTime = performance.now();\n    let fps = 60;\n\n    const monitorPerformance = () => {\n      frameCount++;\n      const currentTime = performance.now();\n      \n      if (currentTime - lastTime >= 1000) {\n        fps = Math.round((frameCount * 1000) / (currentTime - lastTime));\n        frameCount = 0;\n        lastTime = currentTime;\n\n        // Auto-enable performance mode if FPS drops too low\n        if (fps < 30 && settings.autoDetectPerformance && !settings.performanceMode) {\n          console.warn('Low FPS detected, enabling performance mode');\n          updateSettings({ performanceMode: true });\n        }\n      }\n\n      requestAnimationFrame(monitorPerformance);\n    };\n\n    const animationId = requestAnimationFrame(monitorPerformance);\n\n    return () => {\n      cancelAnimationFrame(animationId);\n    };\n  }, [optimizedSettings.enabled, settings.autoDetectPerformance, settings.performanceMode]);\n\n  const contextValue: LiquidGlassContextType = {\n    settings: optimizedSettings,\n    updateSettings,\n    resetSettings,\n    performanceInfo,\n  };\n\n  return (\n    <LiquidGlassContext.Provider value={contextValue}>\n      {children}\n    </LiquidGlassContext.Provider>\n  );\n};\n\nexport const useLiquidGlass = () => {\n  const context = useContext(LiquidGlassContext);\n  if (!context) {\n    throw new Error('useLiquidGlass must be used within a LiquidGlassProvider');\n  }\n  return context;\n};\n\n// Hook for individual component settings\nexport const useLiquidGlassSettings = (\n  componentSettings?: Partial<{\n    intensity: number;\n    distortion: number;\n    animated: boolean;\n    interactive: boolean;\n  }>\n) => {\n  const { settings, performanceInfo } = useLiquidGlass();\n\n  return {\n    enabled: settings.enabled && performanceInfo.webGLSupported,\n    intensity: componentSettings?.intensity ?? settings.globalIntensity,\n    distortion: componentSettings?.distortion ?? settings.globalDistortion,\n    animated: (componentSettings?.animated ?? settings.animated) && !performanceInfo.prefersReducedMotion,\n    interactive: componentSettings?.interactive ?? settings.interactive,\n    performanceMode: settings.performanceMode,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/hooks/usePerformanceOptimization.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/hooks/usePerformanceOptimization.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\n\ninterface PerformanceSettings {\n  shouldReduceMotion: boolean;\n  isLowPerformanceDevice: boolean;\n  liquidSettings: {\n    intensity: number;\n    animated: boolean;\n    interactive: boolean;\n  };\n}\n\n/**\n * Hook for performance optimization and adaptive rendering\n * Detects user preferences and device capabilities to optimize the experience\n */\nexport const usePerformanceOptimization = (): PerformanceSettings => {\n  const [shouldReduceMotion, setShouldReduceMotion] = useState(false);\n  const [isLowPerformanceDevice, setIsLowPerformanceDevice] = useState(false);\n\n  useEffect(() => {\n    // Check for reduced motion preference\n    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n    setShouldReduceMotion(prefersReducedMotion);\n\n    // Simple performance detection\n    const startTime = performance.now();\n    requestAnimationFrame(() => {\n      const endTime = performance.now();\n      const frameTime = endTime - startTime;\n      const isLowPerf = frameTime > 16.67; // More than 1 frame at 60fps\n      setIsLowPerformanceDevice(isLowPerf);\n    });\n\n    // Listen for changes in motion preference\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    const handleChange = (e: MediaQueryListEvent) => {\n      setShouldReduceMotion(e.matches);\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  // Calculate liquid effect settings based on performance\n  const liquidSettings = {\n    intensity: isLowPerformanceDevice ? 0.1 : 0.3,\n    animated: !shouldReduceMotion && !isLowPerformanceDevice,\n    interactive: !isLowPerformanceDevice\n  };\n\n  return {\n    shouldReduceMotion,\n    isLowPerformanceDevice,\n    liquidSettings\n  };\n};\n\n/**\n * Hook for responsive breakpoint detection\n */\nexport const useResponsiveBreakpoint = () => {\n  const [breakpoint, setBreakpoint] = useState<'mobile' | 'tablet' | 'desktop' | 'large'>('mobile');\n\n  useEffect(() => {\n    const updateBreakpoint = () => {\n      const width = window.innerWidth;\n      if (width >= 1440) setBreakpoint('large');\n      else if (width >= 1024) setBreakpoint('desktop');\n      else if (width >= 768) setBreakpoint('tablet');\n      else setBreakpoint('mobile');\n    };\n\n    updateBreakpoint();\n    window.addEventListener('resize', updateBreakpoint);\n    return () => window.removeEventListener('resize', updateBreakpoint);\n  }, []);\n\n  return breakpoint;\n};\n\n/**\n * Hook for calculating responsive animation delays\n */\nexport const useAnimationDelay = () => {\n  const breakpoint = useResponsiveBreakpoint();\n\n  const getAnimationDelay = (index: number): number => {\n    switch (breakpoint) {\n      case 'large':\n      case 'desktop': return index * 150; // Faster for desktop\n      case 'tablet': return index * 200;\n      default: return index * 100; // Fastest for mobile\n    }\n  };\n\n  return { getAnimationDelay, breakpoint };\n};\n\n/**\n * Hook for layout debugging in development\n */\nexport const useLayoutDebug = (componentName: string) => {\n  useEffect(() => {\n    if (import.meta.env.DEV) {\n      console.log(`${componentName} mounted:`, {\n        viewport: { width: window.innerWidth, height: window.innerHeight },\n        userAgent: navigator.userAgent,\n        timestamp: new Date().toISOString()\n      });\n    }\n  }, [componentName]);\n};\n\n/**\n * Hook for performance tracking\n */\nexport const usePerformanceTracking = (componentName: string) => {\n  useEffect(() => {\n    const startTime = performance.now();\n\n    return () => {\n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n\n      if (renderTime > 16.67) { // Longer than 1 frame at 60fps\n        console.warn(`${componentName} render took ${renderTime}ms`);\n      }\n    };\n  }, [componentName]);\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/hooks/useTimeRange.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/hooks/useTimeRange.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * useTimeRange - Hook for consuming time range context with additional utilities\n * Features: Optimized re-renders, data filtering, range validation\n * Based on Apple Human Interface Guidelines 2025\n */\n\nimport { useCallback, useMemo, useRef, useEffect } from 'react';\nimport { useTimeRangeContext } from '@/context/TimeRangeContext';\nimport { TimeRangeOption } from '@/components/charts/types';\n\n// Hook options interface\nexport interface UseTimeRangeOptions {\n  // Optimization options\n  stabilizeCallbacks?: boolean;\n  memoizeData?: boolean;\n  enableCache?: boolean;\n  \n  // Validation options\n  validateDates?: boolean;\n  fallbackRange?: TimeRangeOption;\n  \n  // Performance options\n  debounceMs?: number;\n  skipInitialRender?: boolean;\n}\n\n// Hook return interface\nexport interface UseTimeRangeReturn {\n  // Current state\n  selectedRange: TimeRangeOption;\n  rangeLabel: string;\n  rangeDates: { start: Date; end: Date };\n  \n  // Actions\n  setTimeRange: (range: TimeRangeOption) => void;\n  resetToDefault: () => void;\n  \n  // Data utilities\n  getFilteredData: <T extends Record<string, any>>(\n    data: T[], \n    dateField?: string,\n    dateFormat?: 'iso' | 'timestamp' | 'date'\n  ) => T[];\n  isInRange: (date: string | Date | number) => boolean;\n  \n  // Optimization utilities\n  getCacheKey: () => string;\n  clearCache: () => void;\n  \n  // Validation utilities\n  isValidRange: (range: string) => range is TimeRangeOption;\n  getSafeRange: (range: string) => TimeRangeOption;\n}\n\n// Valid time ranges for validation\nconst VALID_RANGES: TimeRangeOption[] = ['1W', '1M', '3M', '6M', '1Y', 'ALL'];\n\n// Default hook options\nconst DEFAULT_OPTIONS: UseTimeRangeOptions = {\n  stabilizeCallbacks: true,\n  memoizeData: true,\n  enableCache: true,\n  validateDates: true,\n  fallbackRange: '1M',\n  debounceMs: 0,\n  skipInitialRender: false\n};\n\n/**\n * Hook for consuming time range context with additional utilities\n */\nexport function useTimeRange(options: UseTimeRangeOptions = {}): UseTimeRangeReturn {\n  const context = useTimeRangeContext();\n  const opts = { ...DEFAULT_OPTIONS, ...options };\n  \n  // Refs for stable callbacks\n  const debounceRef = useRef<NodeJS.Timeout | null>(null);\n  const initialRenderRef = useRef(true);\n  \n  // Handle initial render skip\n  useEffect(() => {\n    if (opts.skipInitialRender && initialRenderRef.current) {\n      initialRenderRef.current = false;\n      return;\n    }\n  }, [opts.skipInitialRender]);\n\n  // Validation utilities\n  const isValidRange = useCallback((range: string): range is TimeRangeOption => {\n    return VALID_RANGES.includes(range as TimeRangeOption);\n  }, []);\n\n  const getSafeRange = useCallback((range: string): TimeRangeOption => {\n    return isValidRange(range) ? range : (opts.fallbackRange || '1M');\n  }, [isValidRange, opts.fallbackRange]);\n\n  // Memoized current range data\n  const rangeDates = useMemo(() => {\n    return context.getRangeDates();\n  }, [context.selectedRange, context.getRangeDates]);\n\n  const rangeLabel = useMemo(() => {\n    return context.getRangeLabel();\n  }, [context.selectedRange, context.getRangeLabel]);\n\n  // Stable callback for setting time range\n  const setTimeRange = useCallback((range: TimeRangeOption) => {\n    if (opts.validateDates && !isValidRange(range)) {\n      console.warn(`Invalid time range: ${range}. Using fallback: ${opts.fallbackRange}`);\n      range = opts.fallbackRange || '1M';\n    }\n\n    if (opts.debounceMs && opts.debounceMs > 0) {\n      if (debounceRef.current) {\n        clearTimeout(debounceRef.current);\n      }\n      \n      debounceRef.current = setTimeout(() => {\n        context.setTimeRange(range);\n      }, opts.debounceMs);\n    } else {\n      context.setTimeRange(range);\n    }\n  }, [\n    context.setTimeRange, \n    opts.validateDates, \n    opts.debounceMs, \n    opts.fallbackRange,\n    isValidRange\n  ]);\n\n  // Reset to default range\n  const resetToDefault = useCallback(() => {\n    const defaultRange = opts.fallbackRange || '1M';\n    setTimeRange(defaultRange);\n  }, [setTimeRange, opts.fallbackRange]);\n\n  // Enhanced data filtering with validation\n  const getFilteredData = useCallback(<T extends Record<string, any>>(\n    data: T[],\n    dateField: string = 'date',\n    dateFormat: 'iso' | 'timestamp' | 'date' = 'iso'\n  ): T[] => {\n    if (!data || !Array.isArray(data)) {\n      console.warn('Invalid data provided to getFilteredData');\n      return [];\n    }\n\n    if (opts.validateDates) {\n      // Validate date field exists in data\n      const hasDateField = data.length > 0 && data[0][dateField] !== undefined;\n      if (!hasDateField) {\n        console.warn(`Date field \"${dateField}\" not found in data`);\n        return data; // Return unfiltered if no date field\n      }\n    }\n\n    return context.getFilteredData(data, dateField, dateFormat);\n  }, [context.getFilteredData, opts.validateDates]);\n\n  // Enhanced date range checking\n  const isInRange = useCallback((date: string | Date | number): boolean => {\n    if (opts.validateDates) {\n      // Validate date parameter\n      if (date === null || date === undefined) {\n        console.warn('Invalid date provided to isInRange');\n        return false;\n      }\n      \n      // Try to parse date to ensure it's valid\n      try {\n        const dateObj = new Date(date);\n        if (isNaN(dateObj.getTime())) {\n          console.warn('Invalid date format provided to isInRange:', date);\n          return false;\n        }\n      } catch (error) {\n        console.warn('Error parsing date in isInRange:', error);\n        return false;\n      }\n    }\n\n    return context.isInRange(date);\n  }, [context.isInRange, opts.validateDates]);\n\n  // Stable cache utilities\n  const getCacheKey = useCallback(() => {\n    return context.getCacheKey();\n  }, [context.getCacheKey]);\n\n  const clearCache = useCallback(() => {\n    context.clearCache();\n  }, [context.clearCache]);\n\n  // Cleanup debounce on unmount\n  useEffect(() => {\n    return () => {\n      if (debounceRef.current) {\n        clearTimeout(debounceRef.current);\n      }\n    };\n  }, []);\n\n  // Return stable object\n  return useMemo((): UseTimeRangeReturn => ({\n    // Current state\n    selectedRange: context.selectedRange,\n    rangeLabel,\n    rangeDates,\n    \n    // Actions\n    setTimeRange: opts.stabilizeCallbacks ? setTimeRange : context.setTimeRange,\n    resetToDefault,\n    \n    // Data utilities\n    getFilteredData: opts.memoizeData ? getFilteredData : context.getFilteredData,\n    isInRange: opts.memoizeData ? isInRange : context.isInRange,\n    \n    // Optimization utilities\n    getCacheKey,\n    clearCache,\n    \n    // Validation utilities\n    isValidRange,\n    getSafeRange\n  }), [\n    context.selectedRange,\n    rangeLabel,\n    rangeDates,\n    setTimeRange,\n    resetToDefault,\n    getFilteredData,\n    isInRange,\n    getCacheKey,\n    clearCache,\n    isValidRange,\n    getSafeRange,\n    opts.stabilizeCallbacks,\n    opts.memoizeData,\n    context.setTimeRange,\n    context.getFilteredData,\n    context.isInRange\n  ]);\n}\n\n// Export hook as default\nexport default useTimeRange;\n\n// Convenience hooks for specific use cases\nexport function useTimeRangeFilter<T extends Record<string, any>>(\n  data: T[],\n  dateField: string = 'date',\n  dateFormat: 'iso' | 'timestamp' | 'date' = 'iso'\n): T[] {\n  const { getFilteredData } = useTimeRange({ memoizeData: true });\n  \n  return useMemo(() => {\n    return getFilteredData(data, dateField, dateFormat);\n  }, [data, dateField, dateFormat, getFilteredData]);\n}\n\nexport function useTimeRangeValidator(): {\n  isValidRange: (range: string) => range is TimeRangeOption;\n  getSafeRange: (range: string) => TimeRangeOption;\n  validateAndSet: (range: string) => void;\n} {\n  const { setTimeRange, isValidRange, getSafeRange } = useTimeRange({ \n    validateDates: true,\n    stabilizeCallbacks: true\n  });\n\n  const validateAndSet = useCallback((range: string) => {\n    const safeRange = getSafeRange(range);\n    setTimeRange(safeRange);\n  }, [getSafeRange, setTimeRange]);\n\n  return { isValidRange, getSafeRange, validateAndSet };\n}\n\nexport function useOptimizedTimeRange(): UseTimeRangeReturn {\n  return useTimeRange({\n    stabilizeCallbacks: true,\n    memoizeData: true,\n    enableCache: true,\n    validateDates: true,\n    debounceMs: 100\n  });\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Shared Exports - Cross-cutting Concerns\n * Provides clean import paths for shared utilities\n */\n\n// Shared Components (UI)\nexport * from './components/ui/button';\nexport * from './components/ui/card';\nexport * from './components/ui/skeleton';\nexport * from './components/ui/toast';\nexport * from './components/ui/tooltip';\n\n// Shared Hooks\nexport * from './hooks/use-mobile';\nexport * from './hooks/use-toast';\nexport * from './hooks/useFinancialMetrics';\nexport * from './hooks/useLiquidGlass';\n\n// Shared Utils\nexport * from './utils/crypto';\nexport * from './utils/formatters';\nexport * from './utils/webCrypto';\n\n// Shared Types\nexport * from './types/shared';\nexport * from './types/financial'; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/lib/VueniCacheManager.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/lib/VueniCacheManager.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Transaction } from '@/types/shared';\n\nexport interface VueniCacheItem<T = unknown> {\n  data: T;\n  timestamp: number;\n  expiresAt: number;\n  key: string;\n  size?: number;\n  accessCount: number;\n  lastAccessed: number;\n}\n\nexport interface VueniCacheConfig {\n  maxSize: number; // Maximum cache size in bytes\n  maxAge: number; // Default TTL in milliseconds\n  maxItems: number; // Maximum number of items\n  enableCompression: boolean;\n  enableMetrics: boolean;\n  defaultTTL: number;\n  cleanupInterval: number;\n  compressionThreshold: number;\n  enablePersistence: boolean;\n  persistenceKey: string;\n}\n\nexport class VueniCacheManager {\n  private cache = new Map<string, VueniCacheItem>();\n  private config: VueniCacheConfig;\n  private currentSize = 0;\n  private metrics = {\n    hits: 0,\n    misses: 0,\n    evictions: 0,\n    compressionSavings: 0\n  };\n\n  constructor(config: Partial<VueniCacheConfig> = {}) {\n    this.config = {\n      maxSize: 50 * 1024 * 1024, // 50MB default\n      maxAge: 30 * 60 * 1000, // 30 minutes default\n      maxItems: 1000,\n      enableCompression: true,\n      enableMetrics: true,\n      defaultTTL: 30 * 60 * 1000, // 30 minutes default\n      cleanupInterval: 5 * 60 * 1000, // 5 minutes\n      compressionThreshold: 1024,\n      enablePersistence: true,\n      persistenceKey: 'vueni_cache',\n      ...config\n    };\n\n    // Cleanup expired items periodically\n    setInterval(() => this.cleanup(), this.config.cleanupInterval);\n  }\n\n  set<T>(key: string, data: T, ttl?: number): void {\n    const timestamp = Date.now();\n    const expiresAt = timestamp + (ttl || this.config.maxAge);\n    \n    // Estimate size\n    const dataSize = this.estimateSize(data);\n    \n    // Compress data if enabled and beneficial\n    let processedData = data;\n    if (this.config.enableCompression && dataSize > this.config.compressionThreshold) { // Compress if > 1KB\n      processedData = this.compress(data);\n      const compressedSize = this.estimateSize(processedData);\n      this.metrics.compressionSavings += dataSize - compressedSize;\n    }\n\n    const item: VueniCacheItem<T> = {\n      data: processedData,\n      timestamp,\n      expiresAt,\n      key,\n      size: dataSize,\n      accessCount: 0,\n      lastAccessed: timestamp\n    };\n\n    // Remove old item if exists\n    if (this.cache.has(key)) {\n      const oldItem = this.cache.get(key)!;\n      this.currentSize -= oldItem.size || 0;\n    }\n\n    // Check cache limits and evict if necessary\n    this.ensureCacheSpace(dataSize);\n\n    this.cache.set(key, item);\n    this.currentSize += dataSize;\n\n    if (this.config.enableMetrics) {\n      console.log(`[Vueni Cache] Cached ${key} (${this.formatSize(dataSize)})`);\n    }\n  }\n\n  get<T>(key: string): T | null {\n    const item = this.cache.get(key) as VueniCacheItem<T> | undefined;\n    \n    if (!item) {\n      this.metrics.misses++;\n      return null;\n    }\n\n    // Check if expired\n    if (Date.now() > item.expiresAt) {\n      this.delete(key);\n      this.metrics.misses++;\n      return null;\n    }\n\n    // Update access metrics\n    item.accessCount++;\n    item.lastAccessed = Date.now();\n    this.metrics.hits++;\n\n    // Decompress if needed\n    let data = item.data;\n    if (this.isCompressed(data)) {\n      data = this.decompress(data);\n    }\n\n    return data;\n  }\n\n  delete(key: string): boolean {\n    const item = this.cache.get(key);\n    if (item) {\n      this.currentSize -= item.size || 0;\n      return this.cache.delete(key);\n    }\n    return false;\n  }\n\n  clear(): void {\n    this.cache.clear();\n    this.currentSize = 0;\n    console.log('[Vueni Cache] Cache cleared');\n  }\n\n  // Cache financial transactions with optimized strategy\n  cacheTransactions(transactions: Transaction[], userId: string): void {\n    const key = `vueni_transactions_${userId}`;\n    \n    // Optimize transaction data for caching\n    const optimizedTransactions = transactions.map(transaction => ({\n      id: transaction.id,\n      merchant: transaction.merchant,\n      category: transaction.category,\n      amount: transaction.amount,\n      date: transaction.date,\n      status: transaction.status,\n      scores: transaction.scores\n    }));\n\n    this.set(key, optimizedTransactions, 10 * 60 * 1000); // 10 minutes for transactions\n  }\n\n  getCachedTransactions(userId: string): Transaction[] | null {\n    const key = `vueni_transactions_${userId}`;\n    return this.get(key);\n  }\n\n  // Cache insights with longer TTL\n  cacheInsights<T = Record<string, unknown>>(insights: T, userId: string): void {\n    const key = `vueni_insights_${userId}`;\n    this.set(key, insights, 60 * 60 * 1000); // 1 hour for insights\n  }\n\n  getCachedInsights<T = Record<string, unknown>>(userId: string): T | null {\n    const key = `vueni_insights_${userId}`;\n    return this.get(key);\n  }\n\n  // Cache component state\n  cacheComponentState<T = Record<string, unknown>>(componentName: string, state: T): void {\n    const key = `vueni_component_${componentName}`;\n    this.set(key, state, 5 * 60 * 1000); // 5 minutes for component state\n  }\n\n  getCachedComponentState<T = Record<string, unknown>>(componentName: string): T | null {\n    const key = `vueni_component_${componentName}`;\n    return this.get(key);\n  }\n\n  private ensureCacheSpace(requiredSize: number): void {\n    // If we exceed max items, evict oldest items\n    if (this.cache.size >= this.config.maxItems) {\n      this.evictLRU(1);\n    }\n\n    // If we exceed max size, evict until we have enough space\n    while (this.currentSize + requiredSize > this.config.maxSize && this.cache.size > 0) {\n      this.evictLRU(1);\n    }\n  }\n\n  private evictLRU(count: number): void {\n    const items = Array.from(this.cache.values())\n      .sort((a, b) => a.lastAccessed - b.lastAccessed)\n      .slice(0, count);\n\n    items.forEach(item => {\n      this.delete(item.key);\n      this.metrics.evictions++;\n    });\n\n    if (this.config.enableMetrics && items.length > 0) {\n      console.log(`[Vueni Cache] Evicted ${items.length} items (LRU)`);\n    }\n  }\n\n  private cleanup(): void {\n    const now = Date.now();\n    const expiredKeys: string[] = [];\n\n    this.cache.forEach((item, key) => {\n      if (now > item.expiresAt) {\n        expiredKeys.push(key);\n      }\n    });\n\n    expiredKeys.forEach(key => this.delete(key));\n\n    if (this.config.enableMetrics && expiredKeys.length > 0) {\n      console.log(`[Vueni Cache] Cleaned up ${expiredKeys.length} expired items`);\n    }\n  }\n\n  private estimateSize(data: unknown): number {\n    if (typeof data === 'string') {\n      return data.length * 2; // UTF-16 encoding\n    }\n    \n    if (typeof data === 'number') {\n      return 8; // 64-bit number\n    }\n    \n    if (typeof data === 'boolean') {\n      return 4;\n    }\n    \n    if (data === null || data === undefined) {\n      return 0;\n    }\n    \n    if (Array.isArray(data)) {\n      return data.reduce((total, item) => total + this.estimateSize(item), 0);\n    }\n    \n    if (typeof data === 'object') {\n      return Object.entries(data).reduce((total, [key, value]) => {\n        return total + this.estimateSize(key) + this.estimateSize(value);\n      }, 0);\n    }\n    \n    return JSON.stringify(data).length * 2; // Fallback\n  }\n\n  private compress(data: unknown): unknown {\n    // Simple compression simulation (in real implementation, use a compression library)\n    if (typeof data === 'object') {\n      const compressed = {\n        __compressed: true,\n        data: JSON.stringify(data)\n      };\n      return compressed;\n    }\n    return data;\n  }\n\n  private decompress(data: unknown): unknown {\n    if (this.isCompressed(data)) {\n      return JSON.parse(data.data);\n    }\n    return data;\n  }\n\n  private isCompressed(data: unknown): data is { __compressed: true; data: string } {\n    return typeof data === 'object' && data.__compressed === true;\n  }\n\n  private formatSize(bytes: number): string {\n    const units = ['B', 'KB', 'MB', 'GB'];\n    let size = bytes;\n    let unitIndex = 0;\n    \n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n    \n    return `${size.toFixed(1)}${units[unitIndex]}`;\n  }\n\n  // Performance and monitoring methods\n  getStats() {\n    return {\n      size: this.cache.size,\n      currentSize: this.formatSize(this.currentSize),\n      maxSize: this.formatSize(this.config.maxSize),\n      hitRate: (this.metrics.hits / (this.metrics.hits + this.metrics.misses) * 100).toFixed(1) + '%',\n      metrics: this.metrics,\n      compressionSavings: this.formatSize(this.metrics.compressionSavings)\n    };\n  }\n\n  // Export cache contents for debugging\n  exportCache() {\n    const items: Array<{\n      key: string;\n      value: unknown;\n      timestamp: number;\n      expiresAt: number;\n      size: string;\n      expiresIn: number;\n      accessCount: number;\n      lastAccessed: string;\n    }> = [];\n    \n    this.cache.forEach((item, key) => {\n      items.push({\n        key,\n        value: item.data,\n        timestamp: item.timestamp,\n        expiresAt: item.expiresAt,\n        size: this.formatSize(item.size || 0),\n        expiresIn: Math.max(0, item.expiresAt - Date.now()),\n        accessCount: item.accessCount,\n        lastAccessed: new Date(item.lastAccessed).toISOString()\n      });\n    });\n    \n    return {\n      stats: this.getStats(),\n      items: items.sort((a, b) => b.accessCount - a.accessCount)\n    };\n  }\n\n  // Preload commonly accessed data\n  preloadCommonData(): void {\n    // Preload data that's commonly accessed\n    const commonKeys = [\n      'vueni_user_preferences',\n      'vueni_category_mappings',\n      'vueni_feature_flags'\n    ];\n\n    commonKeys.forEach(key => {\n      // Check if data exists in localStorage and cache it\n      const data = localStorage.getItem(key);\n      if (data) {\n        try {\n          const parsedData = JSON.parse(data);\n          this.set(key, parsedData, 60 * 60 * 1000); // 1 hour\n        } catch (error) {\n          console.warn(`[Vueni Cache] Failed to preload ${key}:`, error);\n        }\n      }\n    });\n  }\n}\n\n// Create global Vueni cache instance\nexport const vueniCache = new VueniCacheManager({\n  maxSize: 100 * 1024 * 1024, // 100MB for Vueni\n  maxAge: 30 * 60 * 1000, // 30 minutes default\n  maxItems: 500,\n  enableCompression: true,\n  enableMetrics: import.meta.env.DEV // Enable metrics in development\n});\n\n// Initialize cache\nif (typeof window !== 'undefined') {\n  // Preload common data after a short delay\n  setTimeout(() => {\n    vueniCache.preloadCommonData();\n  }, 1000);\n\n  // Log cache stats periodically in development\n  if (import.meta.env.DEV) {\n    setInterval(() => {\n      const stats = vueniCache.getStats();\n      console.log('[Vueni Cache] Stats:', stats);\n    }, 60000); // Every minute\n  }\n}\n\nexport default VueniCacheManager;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/lib/VueniLazyImports.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/lib/VueniLazyImports.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { lazy } from 'react';\n\n// Type definitions for browser APIs\ninterface NavigatorConnection {\n  effectiveType: '4g' | '3g' | '2g' | 'slow-2g';\n  downlink: number;\n  rtt: number;\n}\n\ninterface NavigatorMemory {\n  deviceMemory: number;\n}\n\ninterface PerformanceMemory {\n  usedJSHeapSize: number;\n  totalJSHeapSize: number;\n  jsHeapSizeLimit: number;\n}\n\ndeclare global {\n  interface Navigator {\n    connection?: NavigatorConnection;\n    deviceMemory?: number;\n  }\n  \n  interface Performance {\n    memory?: PerformanceMemory;\n  }\n}\n\n// Vueni Code Splitting Configuration for optimal performance\nexport const VueniLazyComponents = {\n  // Core Pages - Lazy loaded for better performance\n  VueniDashboard: lazy(() => import('@/pages/Dashboard').then(module => ({ default: module.Dashboard || module.default }))),\n  VueniTransactions: lazy(() => import('@/pages/Transactions').then(module => ({ default: module.Transactions || module.default }))),\n  VueniInsights: lazy(() => import('@/pages/Insights').then(module => ({ default: module.Insights || module.default }))),\n  VueniSettings: lazy(() => import('@/pages/Settings').then(module => ({ default: module.Settings || module.default }))),\n\n  // Vueni Components - Lazy loaded when needed\n  VueniUnifiedTransactionList: lazy(() => \n    import('@/components/shared/VueniUnifiedTransactionList').then(module => ({ \n      default: module.VueniUnifiedTransactionList || module.default \n    }))\n  ),\n  \n  VueniUnifiedInsightsPage: lazy(() => \n    import('@/components/shared/VueniUnifiedInsightsPage').then(module => ({ \n      default: module.VueniUnifiedInsightsPage || module.default \n    }))\n  ),\n\n  VueniConsolidationDemo: lazy(() => \n    import('@/components/shared/VueniConsolidationDemo').then(module => ({ \n      default: module.VueniConsolidationDemo || module.default \n    }))\n  ),\n\n  // Chart Components - Heavy components loaded on demand\n  VueniSpendingChart: lazy(() => \n    import('@/components/charts/SpendingChart').then(module => ({ default: module.SpendingChart || module.default }))\n  ),\n  \n  VueniCashFlowChart: lazy(() => \n    import('@/components/charts/CashFlowChart').then(module => ({ default: module.CashFlowChart || module.default }))\n  ),\n\n  VueniCategoryBreakdown: lazy(() => \n    import('@/components/charts/CategoryBreakdown').then(module => ({ default: module.CategoryBreakdown || module.default }))\n  ),\n\n  // Feature-specific Components\n  VueniExportModal: lazy(() => \n    import('@/components/modals/ExportModal').then(module => ({ default: module.ExportModal || module.default }))\n  ),\n\n  VueniFilterPanel: lazy(() => \n    import('@/components/filters/FilterPanel').then(module => ({ default: module.FilterPanel || module.default }))\n  ),\n\n  VueniReportsEngine: lazy(() => \n    import('@/features/reports/components/ReportsEngine').then(module => ({ default: module.ReportsEngine || module.default }))\n  ),\n};\n\n// Preload strategies for different scenarios\nexport const VueniPreloadStrategies = {\n  // Preload critical components on app start\n  preloadCritical: () => {\n    const criticalComponents = [\n      () => import('@/components/shared/VueniUnifiedTransactionList'),\n      () => import('@/components/shared/VueniDesignSystem'),\n    ];\n\n    criticalComponents.forEach(importFn => {\n      // Use requestIdleCallback for non-blocking preload\n      if ('requestIdleCallback' in window) {\n        requestIdleCallback(() => importFn());\n      } else {\n        setTimeout(() => importFn(), 100);\n      }\n    });\n  },\n\n  // Preload components based on user navigation\n  preloadOnHover: (componentName: keyof typeof VueniLazyComponents) => {\n    const importMap: Record<string, () => Promise<{ default?: React.ComponentType<any> }>> = {\n      VueniTransactions: () => import('@/pages/Transactions'),\n      VueniInsights: () => import('@/pages/Insights'),\n      VueniSettings: () => import('@/pages/Settings'),\n      VueniSpendingChart: () => import('@/components/charts/SpendingChart'),\n      VueniCashFlowChart: () => import('@/components/charts/CashFlowChart'),\n    };\n\n    const importFn = importMap[componentName];\n    if (importFn) {\n      importFn().catch(error => {\n        console.warn(`Failed to preload ${componentName}:`, error);\n      });\n    }\n  },\n\n  // Preload based on viewport intersection\n  preloadOnIntersection: (componentName: keyof typeof VueniLazyComponents, element: Element) => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            VueniPreloadStrategies.preloadOnHover(componentName);\n            observer.unobserve(element);\n          }\n        });\n      },\n      { rootMargin: '100px' } // Preload when element is 100px away from viewport\n    );\n\n    observer.observe(element);\n  }\n};\n\n// Bundle size optimization utilities\nexport const VueniOptimizationUtils = {\n  // Check if component should be loaded\n  shouldLoadComponent: (componentName: string, userAgent?: string): boolean => {\n    // Don't load heavy components on slow connections\n    if ('connection' in navigator) {\n      const connection = navigator.connection;\n      if (connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g') {\n        const heavyComponents = ['VueniSpendingChart', 'VueniCashFlowChart', 'VueniReportsEngine'];\n        return !heavyComponents.includes(componentName);\n      }\n    }\n\n    // Don't load desktop-specific components on mobile\n    if (userAgent && /Mobile|Android|iPhone|iPad/.test(userAgent)) {\n      const desktopOnlyComponents = ['VueniReportsEngine'];\n      return !desktopOnlyComponents.includes(componentName);\n    }\n\n    return true;\n  },\n\n  // Get loading priority for components\n  getLoadingPriority: (componentName: string): 'high' | 'medium' | 'low' => {\n    const highPriority = ['VueniUnifiedTransactionList', 'VueniDesignSystem'];\n    const mediumPriority = ['VueniUnifiedInsightsPage', 'VueniDashboard'];\n    \n    if (highPriority.includes(componentName)) return 'high';\n    if (mediumPriority.includes(componentName)) return 'medium';\n    return 'low';\n  },\n\n  // Memory optimization for large lists\n  optimizeVirtualScrolling: (itemCount: number): { \n    enableVirtual: boolean; \n    windowSize: number; \n    bufferSize: number; \n  } => {\n    if (itemCount < 100) {\n      return { enableVirtual: false, windowSize: itemCount, bufferSize: 0 };\n    }\n\n    // Calculate optimal window size based on device capabilities\n    const deviceMemory = navigator.deviceMemory || 4; // Default to 4GB\n    const baseWindowSize = Math.min(50, Math.max(20, deviceMemory * 10));\n    \n    return {\n      enableVirtual: true,\n      windowSize: baseWindowSize,\n      bufferSize: Math.floor(baseWindowSize * 0.3)\n    };\n  }\n};\n\n// Performance monitoring for lazy loaded components\nexport const VueniPerformanceMonitor = {\n  // Track component load times\n  trackComponentLoad: (componentName: string, startTime: number) => {\n    const endTime = performance.now();\n    const loadTime = endTime - startTime;\n    \n    // Log performance metrics\n    console.log(`[Vueni Performance] ${componentName} loaded in ${loadTime.toFixed(2)}ms`);\n    \n    // Send to analytics in production\n    if (import.meta.env.PROD && 'sendBeacon' in navigator) {\n      navigator.sendBeacon('/api/vueni/performance', JSON.stringify({\n        component: componentName,\n        loadTime,\n        timestamp: Date.now()\n      }));\n    }\n  },\n\n  // Monitor memory usage\n  trackMemoryUsage: (componentName: string) => {\n    if ('memory' in performance) {\n      const memory = performance.memory;\n      console.log(`[Vueni Memory] ${componentName} - Used: ${(memory.usedJSHeapSize / 1024 / 1024).toFixed(2)}MB`);\n      \n      // Warn if memory usage is high\n      if (memory.usedJSHeapSize > 100 * 1024 * 1024) { // 100MB\n        console.warn(`[Vueni Memory] High memory usage detected: ${(memory.usedJSHeapSize / 1024 / 1024).toFixed(2)}MB`);\n      }\n    }\n  },\n\n  // Initialize performance monitoring\n  initialize: () => {\n    // Monitor overall bundle performance\n    if ('PerformanceObserver' in window) {\n      const observer = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry) => {\n          if (entry.entryType === 'navigation') {\n            const navEntry = entry as PerformanceNavigationTiming;\n            console.log(`[Vueni Performance] Page load: ${navEntry.loadEventEnd - navEntry.loadEventStart}ms`);\n          }\n        });\n      });\n      \n      observer.observe({ entryTypes: ['navigation'] });\n    }\n\n    // Preload critical components\n    VueniPreloadStrategies.preloadCritical();\n  }\n};\n\n// Export default optimization configuration\nexport const vueniOptimizationConfig = {\n  lazyComponents: VueniLazyComponents,\n  preloadStrategies: VueniPreloadStrategies,\n  optimizationUtils: VueniOptimizationUtils,\n  performanceMonitor: VueniPerformanceMonitor,\n  \n  // Global settings\n  settings: {\n    enableCodeSplitting: true,\n    enablePreloading: true,\n    enableVirtualScrolling: true,\n    enablePerformanceMonitoring: import.meta.env.PROD,\n    maxMemoryUsage: 150 * 1024 * 1024, // 150MB limit\n    chunkSizeTarget: 250 * 1024, // 250KB target chunk size\n  }\n};\n\nexport default vueniOptimizationConfig;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/lib/VueniPerformanceMonitor.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/lib/VueniPerformanceMonitor.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getCLS, getFID, getFCP, getLCP, getTTFB, Metric } from 'web-vitals';\n\nexport interface VueniPerformanceMetrics {\n  cls: number | null;\n  fid: number | null;\n  fcp: number | null;\n  lcp: number | null;\n  ttfb: number | null;\n  componentLoadTimes: Record<string, number>;\n  memoryUsage: {\n    used: number;\n    total: number;\n    limit: number;\n  } | null;\n  bundleSize: number | null;\n  timestamp: number;\n}\n\nexport class VueniPerformanceMonitor {\n  private static metrics: VueniPerformanceMetrics = {\n    cls: null,\n    fid: null,\n    fcp: null,\n    lcp: null,\n    ttfb: null,\n    componentLoadTimes: {},\n    memoryUsage: null,\n    bundleSize: null,\n    timestamp: Date.now()\n  };\n\n  private static observers: PerformanceObserver[] = [];\n  private static thresholds = {\n    cls: 0.1,      // Good: ≤ 0.1\n    fid: 100,      // Good: ≤ 100ms\n    fcp: 1800,     // Good: ≤ 1.8s\n    lcp: 2500,     // Good: ≤ 2.5s\n    ttfb: 800,     // Good: ≤ 800ms\n    componentLoad: 200, // Component should load within 200ms\n    memoryUsage: 100 * 1024 * 1024 // 100MB warning threshold\n  };\n\n  static initialize(): void {\n    if (typeof window === 'undefined') return;\n\n    // Initialize Web Vitals monitoring\n    this.initWebVitals();\n    \n    // Initialize component performance monitoring\n    this.initComponentMonitoring();\n    \n    // Initialize memory monitoring\n    this.initMemoryMonitoring();\n    \n    // Initialize bundle analysis\n    this.initBundleAnalysis();\n\n    console.log('[Vueni Performance] Performance monitoring initialized');\n  }\n\n  private static initWebVitals(): void {\n    getCLS(this.handleMetric.bind(this));\n    getFID(this.handleMetric.bind(this));\n    getFCP(this.handleMetric.bind(this));\n    getLCP(this.handleMetric.bind(this));\n    getTTFB(this.handleMetric.bind(this));\n  }\n\n  private static handleMetric(metric: Metric): void {\n    const { name, value } = metric;\n    \n    switch (name) {\n      case 'CLS':\n        this.metrics.cls = value;\n        break;\n      case 'FID':\n        this.metrics.fid = value;\n        break;\n      case 'FCP':\n        this.metrics.fcp = value;\n        break;\n      case 'LCP':\n        this.metrics.lcp = value;\n        break;\n      case 'TTFB':\n        this.metrics.ttfb = value;\n        break;\n    }\n\n    this.logMetric(name, value);\n    this.evaluateMetric(name, value);\n    this.sendMetricToAnalytics(metric);\n  }\n\n  private static logMetric(name: string, value: number): void {\n    const threshold = this.thresholds[name.toLowerCase() as keyof typeof this.thresholds];\n    const status = value <= threshold ? '✅' : '⚠️';\n    \n    console.log(`[Vueni Performance] ${status} ${name}: ${value.toFixed(2)}${name === 'CLS' ? '' : 'ms'}`);\n  }\n\n  private static evaluateMetric(name: string, value: number): void {\n    const threshold = this.thresholds[name.toLowerCase() as keyof typeof this.thresholds];\n    \n    if (value > threshold) {\n      console.warn(`[Vueni Performance] ${name} exceeds threshold: ${value} > ${threshold}`);\n      \n      // Provide specific recommendations\n      this.provideOptimizationRecommendations(name, value);\n    }\n  }\n\n  private static provideOptimizationRecommendations(metric: string, value: number): void {\n    const recommendations: Record<string, string[]> = {\n      CLS: [\n        'Add explicit dimensions to images and embeds',\n        'Reserve space for dynamically injected content',\n        'Use CSS containment for layout stability'\n      ],\n      FID: [\n        'Break up long-running JavaScript tasks',\n        'Use React.memo() for expensive components',\n        'Implement virtualization for large lists'\n      ],\n      FCP: [\n        'Optimize critical resource loading',\n        'Use resource hints (preload, prefetch)',\n        'Minimize render-blocking resources'\n      ],\n      LCP: [\n        'Optimize largest element loading',\n        'Use appropriate image formats (WebP, AVIF)',\n        'Implement lazy loading for below-fold content'\n      ],\n      TTFB: [\n        'Optimize server response times',\n        'Use CDN for static assets',\n        'Implement proper caching strategies'\n      ]\n    };\n\n    const metricRecommendations = recommendations[metric];\n    if (metricRecommendations) {\n      console.group(`[Vueni Performance] Optimization recommendations for ${metric}:`);\n      metricRecommendations.forEach(rec => console.log(`• ${rec}`));\n      console.groupEnd();\n    }\n  }\n\n  private static initComponentMonitoring(): void {\n    // Monitor long tasks that might affect component rendering\n    if ('PerformanceObserver' in window) {\n      const longTaskObserver = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry) => {\n          if (entry.duration > 50) { // Tasks longer than 50ms\n            console.warn(`[Vueni Performance] Long task detected: ${entry.duration.toFixed(2)}ms`);\n          }\n        });\n      });\n\n      try {\n        longTaskObserver.observe({ entryTypes: ['longtask'] });\n        this.observers.push(longTaskObserver);\n      } catch (error) {\n        console.warn('[Vueni Performance] Long task monitoring not supported');\n      }\n    }\n  }\n\n  private static initMemoryMonitoring(): void {\n    // Monitor memory usage every 30 seconds\n    const checkMemory = () => {\n      if ('memory' in performance) {\n        const memory = (performance as any).memory;\n        \n        this.metrics.memoryUsage = {\n          used: memory.usedJSHeapSize,\n          total: memory.totalJSHeapSize,\n          limit: memory.jsHeapSizeLimit\n        };\n\n        const usedMB = memory.usedJSHeapSize / 1024 / 1024;\n        \n        if (memory.usedJSHeapSize > this.thresholds.memoryUsage) {\n          console.warn(`[Vueni Performance] High memory usage: ${usedMB.toFixed(2)}MB`);\n          this.suggestMemoryOptimizations();\n        }\n\n        console.log(`[Vueni Performance] Memory usage: ${usedMB.toFixed(2)}MB`);\n      }\n    };\n\n    checkMemory();\n    setInterval(checkMemory, 30000); // Check every 30 seconds\n  }\n\n  private static suggestMemoryOptimizations(): void {\n    console.group('[Vueni Performance] Memory optimization suggestions:');\n    console.log('• Use React.memo() for components that re-render frequently');\n    console.log('• Implement proper cleanup in useEffect hooks');\n    console.log('• Consider virtualization for large transaction lists');\n    console.log('• Clear unused data from state management');\n    console.log('• Use lazy loading for heavy components');\n    console.groupEnd();\n  }\n\n  private static initBundleAnalysis(): void {\n    // Analyze bundle size by tracking resource loading\n    if ('PerformanceObserver' in window) {\n      const resourceObserver = new PerformanceObserver((list) => {\n        let totalJSSize = 0;\n        \n        list.getEntries().forEach((entry) => {\n          const resourceEntry = entry as PerformanceResourceTiming;\n          \n          if (resourceEntry.name.includes('.js')) {\n            totalJSSize += resourceEntry.transferSize || 0;\n          }\n        });\n\n        if (totalJSSize > 0) {\n          this.metrics.bundleSize = totalJSSize;\n          const sizeMB = totalJSSize / 1024 / 1024;\n          \n          console.log(`[Vueni Performance] Total JS bundle size: ${sizeMB.toFixed(2)}MB`);\n          \n          if (sizeMB > 1.5) { // Warn if bundle is larger than 1.5MB\n            console.warn('[Vueni Performance] Large bundle size detected. Consider code splitting.');\n          }\n        }\n      });\n\n      try {\n        resourceObserver.observe({ entryTypes: ['resource'] });\n        this.observers.push(resourceObserver);\n      } catch (error) {\n        console.warn('[Vueni Performance] Resource monitoring not supported');\n      }\n    }\n  }\n\n  static trackComponentLoad(componentName: string, loadTime: number): void {\n    this.metrics.componentLoadTimes[componentName] = loadTime;\n    \n    const status = loadTime <= this.thresholds.componentLoad ? '✅' : '⚠️';\n    console.log(`[Vueni Performance] ${status} Component ${componentName} loaded in ${loadTime.toFixed(2)}ms`);\n\n    if (loadTime > this.thresholds.componentLoad) {\n      console.warn(`[Vueni Performance] Slow component load: ${componentName} (${loadTime.toFixed(2)}ms)`);\n      this.suggestComponentOptimizations(componentName);\n    }\n\n    // Send component performance to analytics\n    this.sendComponentMetricToAnalytics(componentName, loadTime);\n  }\n\n  private static suggestComponentOptimizations(componentName: string): void {\n    console.group(`[Vueni Performance] Optimization suggestions for ${componentName}:`);\n    console.log('• Use React.memo() to prevent unnecessary re-renders');\n    console.log('• Implement code splitting with React.lazy()');\n    console.log('• Consider memoizing expensive calculations with useMemo()');\n    console.log('• Use useCallback() for event handlers');\n    console.log('• Implement virtualization for large lists');\n    console.groupEnd();\n  }\n\n  private static sendMetricToAnalytics(metric: Metric): void {\n    if (!import.meta.env.PROD) return;\n\n    // Send to Vueni analytics endpoint\n    if ('sendBeacon' in navigator) {\n      const data = {\n        type: 'web-vital',\n        name: metric.name,\n        value: metric.value,\n        rating: this.getRating(metric.name, metric.value),\n        timestamp: Date.now(),\n        url: window.location.href,\n        userAgent: navigator.userAgent\n      };\n\n      navigator.sendBeacon('/api/vueni/analytics/performance', JSON.stringify(data));\n    }\n  }\n\n  private static sendComponentMetricToAnalytics(componentName: string, loadTime: number): void {\n    if (!import.meta.env.PROD) return;\n\n    if ('sendBeacon' in navigator) {\n      const data = {\n        type: 'component-performance',\n        component: componentName,\n        loadTime,\n        rating: loadTime <= this.thresholds.componentLoad ? 'good' : 'poor',\n        timestamp: Date.now(),\n        url: window.location.href\n      };\n\n      navigator.sendBeacon('/api/vueni/analytics/component', JSON.stringify(data));\n    }\n  }\n\n  private static getRating(metricName: string, value: number): 'good' | 'needs-improvement' | 'poor' {\n    const thresholds: Record<string, [number, number]> = {\n      CLS: [0.1, 0.25],\n      FID: [100, 300],\n      FCP: [1800, 3000],\n      LCP: [2500, 4000],\n      TTFB: [800, 1800]\n    };\n\n    const [goodThreshold, poorThreshold] = thresholds[metricName] || [0, Infinity];\n    \n    if (value <= goodThreshold) return 'good';\n    if (value <= poorThreshold) return 'needs-improvement';\n    return 'poor';\n  }\n\n  static getMetrics(): VueniPerformanceMetrics {\n    return { ...this.metrics, timestamp: Date.now() };\n  }\n\n  static generatePerformanceReport(): string {\n    const metrics = this.getMetrics();\n    \n    let report = '\\n🚀 Vueni Performance Report\\n';\n    report += '═══════════════════════════════\\n\\n';\n    \n    // Web Vitals\n    report += '📊 Core Web Vitals:\\n';\n    report += `• CLS: ${metrics.cls?.toFixed(3) || 'N/A'} ${this.getStatusEmoji('CLS', metrics.cls)}\\n`;\n    report += `• FID: ${metrics.fid?.toFixed(2) || 'N/A'}ms ${this.getStatusEmoji('FID', metrics.fid)}\\n`;\n    report += `• FCP: ${metrics.fcp?.toFixed(2) || 'N/A'}ms ${this.getStatusEmoji('FCP', metrics.fcp)}\\n`;\n    report += `• LCP: ${metrics.lcp?.toFixed(2) || 'N/A'}ms ${this.getStatusEmoji('LCP', metrics.lcp)}\\n`;\n    report += `• TTFB: ${metrics.ttfb?.toFixed(2) || 'N/A'}ms ${this.getStatusEmoji('TTFB', metrics.ttfb)}\\n\\n`;\n\n    // Component Performance\n    if (Object.keys(metrics.componentLoadTimes).length > 0) {\n      report += '🧩 Component Load Times:\\n';\n      Object.entries(metrics.componentLoadTimes).forEach(([component, time]) => {\n        const status = time <= this.thresholds.componentLoad ? '✅' : '⚠️';\n        report += `• ${component}: ${time.toFixed(2)}ms ${status}\\n`;\n      });\n      report += '\\n';\n    }\n\n    // Memory Usage\n    if (metrics.memoryUsage) {\n      const usedMB = metrics.memoryUsage.used / 1024 / 1024;\n      const status = metrics.memoryUsage.used <= this.thresholds.memoryUsage ? '✅' : '⚠️';\n      report += `💾 Memory Usage: ${usedMB.toFixed(2)}MB ${status}\\n\\n`;\n    }\n\n    // Bundle Size\n    if (metrics.bundleSize) {\n      const sizeMB = metrics.bundleSize / 1024 / 1024;\n      const status = sizeMB <= 1.5 ? '✅' : '⚠️';\n      report += `📦 Bundle Size: ${sizeMB.toFixed(2)}MB ${status}\\n\\n`;\n    }\n\n    report += `⏰ Report generated: ${new Date(metrics.timestamp).toLocaleString()}`;\n    \n    return report;\n  }\n\n  private static getStatusEmoji(metric: string, value: number | null): string {\n    if (value === null) return '❓';\n    \n    const threshold = this.thresholds[metric.toLowerCase() as keyof typeof this.thresholds];\n    return value <= threshold ? '✅' : '⚠️';\n  }\n\n  static cleanup(): void {\n    // Clean up observers\n    this.observers.forEach(observer => {\n      observer.disconnect();\n    });\n    this.observers = [];\n    \n    console.log('[Vueni Performance] Performance monitoring cleanup completed');\n  }\n}\n\n// Auto-initialize in production\nif (import.meta.env.PROD && typeof window !== 'undefined') {\n  // Initialize after DOM is ready\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n      VueniPerformanceMonitor.initialize();\n    });\n  } else {\n    VueniPerformanceMonitor.initialize();\n  }\n}\n\nexport default VueniPerformanceMonitor;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/lib/VueniSecureStorage.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/lib/VueniSecureStorage.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// import CryptoJS from 'crypto-js';\nimport { SecurityEnvValidator } from '../utils/envValidation';\nimport { generateSecureToken } from '../utils/secureRandom';\nimport { encryptSync, decryptSync } from '../utils/browserCrypto';\n\n// Get validated encryption key from environment\nconst VUENI_STORAGE_KEY = SecurityEnvValidator.getValidatedEncryptionKey('VITE_VUENI_ENCRYPTION_KEY');\n\n// Constants for session management\nconst SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutes\n\ninterface SessionItem {\n  data: unknown;\n  timestamp: number;\n  encrypted: boolean;\n}\n\nexport class VueniSecureStorage {\n  private static sessionData = new Map<string, SessionItem>();\n\n  private static encrypt<T>(data: T): string {\n    // Use Web Crypto API for encryption\n    return encryptSync(JSON.stringify(data), VUENI_STORAGE_KEY);\n  }\n  \n  private static decrypt<T>(encryptedData: string): T {\n    // Use Web Crypto API for decryption  \n    const decryptedString = decryptSync(encryptedData, VUENI_STORAGE_KEY);\n    return JSON.parse(decryptedString);\n  }\n\n  private static validateFinancialDataKey(key: string): void {\n    if (!key || typeof key !== 'string') {\n      throw new Error('Invalid key provided for financial data');\n    }\n  }\n\n  private static logAccess(action: string, key: string, metadata?: Record<string, unknown>): void {\n    this.logVueniAccess(`${action}_FINANCIAL`, key);\n  }\n\n  private static logSecurityEvent(event: string, key: string, details?: string): void {\n    if (import.meta.env.PROD) {\n      fetch('/api/vueni/security-event', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          event,\n          key,\n          details,\n          timestamp: new Date().toISOString(),\n          sessionId: this.getSessionId()\n        })\n      }).catch(error => {\n        console.error('Security event log failed:', error);\n      });\n    }\n  }\n  \n  static setFinancialData<T>(key: string, value: T): void {\n    this.logVueniAccess('SET_FINANCIAL', key);\n    localStorage.setItem(`vueni_${key}`, this.encrypt(value));\n  }\n  \n  static getFinancialData<T>(key: string): T | null {\n    this.logVueniAccess('GET_FINANCIAL', key);\n    const encrypted = localStorage.getItem(`vueni_${key}`);\n    return encrypted ? this.decrypt(encrypted) : null;\n  }\n  \n  static removeFinancialData(key: string): void {\n    this.logVueniAccess('DELETE_FINANCIAL', key);\n    localStorage.removeItem(`vueni_${key}`);\n  }\n  \n  static clearAllFinancialData(): void {\n    this.logVueniAccess('CLEAR_ALL', 'all_financial_data');\n    const keys = Object.keys(localStorage).filter(key => key.startsWith('vueni_'));\n    keys.forEach(key => localStorage.removeItem(key));\n  }\n  \n  private static logVueniAccess(action: string, key: string): void {\n    if (import.meta.env.PROD) {\n      fetch('/api/vueni/audit-log', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          action,\n          key,\n          timestamp: new Date().toISOString(),\n          userAgent: navigator.userAgent,\n          sessionId: this.getSessionId()\n        })\n      }).catch(error => {\n        console.error('Audit log failed:', error);\n      });\n    }\n  }\n  \n  private static getSessionId(): string {\n    let sessionId = sessionStorage.getItem('vueni_session_id');\n    if (!sessionId) {\n      sessionId = generateSecureToken(16); // 16 bytes = 32 hex characters\n      sessionStorage.setItem('vueni_session_id', sessionId);\n    }\n    return sessionId;\n  }\n\n  /**\n   * Stores encrypted financial data with audit trail\n   */\n  static setItem<T>(key: string, value: T, options: { sensitive?: boolean; sessionOnly?: boolean } = {}): void {\n    try {\n      this.validateFinancialDataKey(key);\n      \n      if (options.sessionOnly) {\n        // Store in memory session storage for highly sensitive data\n        this.sessionData.set(key, {\n          data: value,\n          timestamp: Date.now(),\n          encrypted: options.sensitive || false\n        });\n      } else {\n        // Store encrypted in localStorage\n        const encrypted = this.encrypt(value);\n        localStorage.setItem(key, encrypted);\n      }\n      \n      this.logAccess('SET', key, { sensitive: options.sensitive });\n    } catch (error) {\n      console.error('VueniSecureStorage setItem error:', error);\n      this.logSecurityEvent('STORAGE_ERROR', key, (error as Error).message);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves and decrypts financial data\n   */\n  static getItem<T>(key: string): T | null {\n    try {\n      this.validateFinancialDataKey(key);\n\n      // Check session storage first\n      const sessionItem = this.sessionData.get(key);\n      if (sessionItem) {\n        // Check if session has expired\n        if (Date.now() - sessionItem.timestamp > SESSION_TIMEOUT) {\n          this.sessionData.delete(key);\n          this.logSecurityEvent('SESSION_EXPIRED', key);\n          return null;\n        }\n        this.logAccess('GET', key, { source: 'session' });\n        return sessionItem.data as T;\n      }\n\n      // Fallback to localStorage\n      const encrypted = localStorage.getItem(key);\n      if (!encrypted) return null;\n      \n      this.logAccess('GET', key, { source: 'localStorage' });\n      return this.decrypt<T>(encrypted);\n    } catch (error) {\n      console.error('VueniSecureStorage getItem error:', error);\n      this.logSecurityEvent('RETRIEVAL_ERROR', key, (error as Error).message);\n      return null;\n    }\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/lib/VueniSessionManager.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/lib/VueniSessionManager.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { VueniSecureStorage } from './VueniSecureStorage';\nimport { generateSecureSessionId, generateSecureCSRFToken } from '../utils/secureRandom';\n\nexport interface VueniSession {\n  id: string;\n  userId: string;\n  email: string;\n  createdAt: string;\n  lastActivity: string;\n  isActive: boolean;\n}\n\nexport class VueniSessionManager {\n  private static readonly SESSION_DURATION = 30 * 60 * 1000; // 30 minutes\n  private static readonly SESSION_KEY = 'current_session';\n  private static readonly ACTIVITY_KEY = 'last_activity';\n  \n  static createSession(userId: string, email: string): VueniSession {\n    const session: VueniSession = {\n      id: this.generateSessionId(),\n      userId,\n      email,\n      createdAt: new Date().toISOString(),\n      lastActivity: new Date().toISOString(),\n      isActive: true\n    };\n    \n    VueniSecureStorage.setFinancialData(this.SESSION_KEY, session);\n    this.updateActivity();\n    \n    return session;\n  }\n  \n  static getCurrentSession(): VueniSession | null {\n    const session = VueniSecureStorage.getFinancialData(this.SESSION_KEY);\n    if (!session) return null;\n    \n    if (this.isSessionExpired(session)) {\n      this.destroySession();\n      return null;\n    }\n    \n    return session;\n  }\n  \n  static updateActivity(): void {\n    const session = this.getCurrentSession();\n    if (session) {\n      session.lastActivity = new Date().toISOString();\n      VueniSecureStorage.setFinancialData(this.SESSION_KEY, session);\n    }\n    localStorage.setItem(this.ACTIVITY_KEY, new Date().toISOString());\n  }\n  \n  static destroySession(): void {\n    VueniSecureStorage.removeFinancialData(this.SESSION_KEY);\n    localStorage.removeItem(this.ACTIVITY_KEY);\n    \n    // Clear all Vueni financial data on logout\n    VueniSecureStorage.clearAllFinancialData();\n  }\n  \n  static isAuthenticated(): boolean {\n    const session = this.getCurrentSession();\n    return session?.isActive === true;\n  }\n  \n  private static isSessionExpired(session: VueniSession): boolean {\n    const lastActivity = new Date(session.lastActivity).getTime();\n    const now = new Date().getTime();\n    return (now - lastActivity) > this.SESSION_DURATION;\n  }\n  \n  private static generateSessionId(): string {\n    return generateSecureSessionId('vueni');\n  }\n  \n  // Auto-logout on inactivity\n  static initInactivityMonitor(): void {\n    let inactivityTimer: NodeJS.Timeout;\n    \n    const resetTimer = () => {\n      clearTimeout(inactivityTimer);\n      this.updateActivity();\n      \n      inactivityTimer = setTimeout(() => {\n        if (this.isAuthenticated()) {\n          this.destroySession();\n          window.location.href = '/login';\n        }\n      }, this.SESSION_DURATION);\n    };\n    \n    // Monitor user activity\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];\n    events.forEach(event => {\n      document.addEventListener(event, resetTimer, { passive: true });\n    });\n    \n    // Initial timer\n    resetTimer();\n  }\n  \n  // CSRF Protection with secure random generation\n  static generateCSRFToken(): string {\n    const token = generateSecureCSRFToken();\n    sessionStorage.setItem('vueni_csrf_token', token);\n    return token;\n  }\n  \n  static validateCSRFToken(token: string): boolean {\n    const storedToken = sessionStorage.getItem('vueni_csrf_token');\n    return storedToken === token;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/lib/chartLazyLoader.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/lib/chartLazyLoader.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Chart Lazy Loading System\n * Reduces 448KB chart bundle by loading charts on-demand\n * PerfGuru Agent - Bundle Optimization\n */\n\nimport { lazy } from 'react';\n\n// Lazy load chart components to reduce initial bundle size\nexport const ChartComponents = {\n  // Core Charts (verified to exist)\n  LineChart: lazy(() => import('@/components/charts/LineChart')),\n  AreaChart: lazy(() => import('@/components/charts/AreaChart')),\n  StackedBarChart: lazy(() => import('@/components/charts/StackedBarChart')),\n  \n  // Budget Charts (verified to exist)\n  SpendingBreakdownChart: lazy(() => import('@/features/budget/components/SpendingBreakdownChart')),\n  \n  // Base Chart Components (verified to exist)\n  GraphBase: lazy(() => import('@/components/charts/GraphBase')),\n  \n  // Chart Utilities (verified to exist)\n  TimeRangeToggle: lazy(() => import('@/components/charts/TimeRangeToggle')),\n  TimeRangeToggleRadix: lazy(() => import('@/components/charts/TimeRangeToggleRadix')),\n} as const;\n\n// Chart loading utilities\nexport const chartLoader = {\n  // Preload charts based on route\n  preloadForRoute: (routeName: string) => {\n    const routeChartMap = {\n      dashboard: ['LineChart', 'AreaChart'],\n      transactions: ['StackedBarChart', 'GraphBase'],\n      budget: ['SpendingBreakdownChart', 'GraphBase'],\n      investments: ['AreaChart', 'StackedBarChart'],\n      reports: ['LineChart', 'AreaChart'],\n    } as const;\n\n    const chartsForRoute = routeChartMap[routeName as keyof typeof routeChartMap];\n    if (chartsForRoute) {\n      chartsForRoute.forEach(chartName => {\n        // Trigger lazy loading for route-specific charts\n        ChartComponents[chartName as keyof typeof ChartComponents];\n      });\n    }\n  },\n\n  // Load chart on demand with loading state\n  loadChartComponent: async (chartName: keyof typeof ChartComponents) => {\n    try {\n      const ChartComponent = ChartComponents[chartName];\n      return await ChartComponent;\n    } catch (error) {\n      console.error(`Failed to load chart component: ${chartName}`, error);\n      return null;\n    }\n  },\n\n  // Check if chart is already loaded\n  isChartLoaded: (chartName: keyof typeof ChartComponents): boolean => {\n    // This is a simplified check - in production you might want more sophisticated caching\n    return true; // React.lazy handles this internally\n  }\n};\n\n// Chart bundle analysis utilities\nexport const chartBundleAnalyzer = {\n  // Estimate chart bundle sizes (for monitoring)\n  estimatedSizes: {\n    LineChart: '45KB',\n    AreaChart: '42KB', \n    StackedBarChart: '38KB',\n    SpendingBreakdownChart: '35KB',\n    GraphBase: '25KB',\n    TimeRangeToggle: '15KB',\n    TimeRangeToggleRadix: '12KB',\n  },\n\n  // Calculate estimated savings\n  calculateBundleSavings: (loadedCharts: string[]) => {\n    const totalPossibleSize = Object.values(chartBundleAnalyzer.estimatedSizes)\n      .reduce((sum, size) => sum + parseInt(size), 0);\n    \n    const loadedSize = loadedCharts.reduce((sum, chartName) => {\n      const size = chartBundleAnalyzer.estimatedSizes[chartName as keyof typeof chartBundleAnalyzer.estimatedSizes];\n      return sum + (size ? parseInt(size) : 0);\n    }, 0);\n\n    return {\n      totalPossibleKB: totalPossibleSize,\n      loadedKB: loadedSize,\n      savedKB: totalPossibleSize - loadedSize,\n      savedPercentage: Math.round(((totalPossibleSize - loadedSize) / totalPossibleSize) * 100)\n    };\n  }\n};\n\n// Export types\nexport type ChartComponentName = keyof typeof ChartComponents;\nexport type ChartLoaderUtilities = typeof chartLoader;\n\nexport default ChartComponents; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/lib/utils.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/lib/utils.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/types/accounts.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/types/accounts.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface Account {\n  id: string;\n  familyId: string;\n  name: string;\n  accountType: AccountType;\n  accountSubtype: AccountSubtype;\n  institutionId?: string;\n  institutionName?: string;\n  externalAccountId?: string;\n  balance: number;\n  availableBalance?: number;\n  currency: string;\n  isActive: boolean;\n  isManual: boolean;\n  lastSyncAt?: Date;\n  syncStatus: SyncStatus;\n  metadata: AccountMetadata;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport type AccountType = \n  | 'depository'   // Checking, Savings, Money Market\n  | 'credit'       // Credit Cards, Lines of Credit\n  | 'loan'         // Personal, Auto, Student, Mortgage\n  | 'investment'   // Brokerage, IRA, 401k, etc.\n  | 'insurance'    // Life, Auto, Health, etc.\n  | 'property'     // Real Estate, Vehicles\n  | 'crypto'       // Cryptocurrency wallets\n  | 'other';       // Catch-all\n\nexport type AccountSubtype = \n  // Depository\n  | 'checking' | 'savings' | 'money_market' | 'cd' | 'treasury'\n  // Credit\n  | 'credit_card' | 'line_of_credit' | 'heloc'\n  // Loan\n  | 'mortgage' | 'auto_loan' | 'student_loan' | 'personal_loan'\n  // Investment\n  | 'brokerage' | 'ira' | 'roth_ira' | '401k' | '403b' | 'pension' | 'annuity'\n  // Insurance\n  | 'life_insurance' | 'auto_insurance' | 'health_insurance' | 'disability_insurance'\n  // Property\n  | 'real_estate' | 'vehicle' | 'collectible' | 'artwork'\n  // Crypto\n  | 'bitcoin' | 'ethereum' | 'crypto_exchange' | 'defi_wallet'\n  // Other\n  | 'cash' | 'precious_metals' | 'business' | 'trust';\n\nexport type SyncStatus = 'active' | 'inactive' | 'error' | 'pending' | 'manual';\n\n// Transaction interface for type safety\nexport interface Transaction {\n  id: string;\n  amount: number;\n  date: string;\n  merchant: string;\n  status: 'completed' | 'pending' | 'failed';\n  category?: string;\n  description?: string;\n}\n\nexport interface AccountMetadata {\n  plaidAccountId?: string;\n  tellerAccountId?: string;\n  routingNumber?: string;\n  accountNumber?: string; // Encrypted/masked\n  interestRate?: number;\n  creditLimit?: number;\n  minimumPayment?: number;\n  dueDate?: string;\n  term?: number;\n  maturityDate?: Date;\n  apy?: number;\n  fees?: AccountFee[];\n  tags?: string[];\n  notes?: string;\n}\n\nexport interface AccountFee {\n  type: 'monthly' | 'annual' | 'transaction' | 'overdraft' | 'atm' | 'other';\n  amount: number;\n  description: string;\n}\n\nexport interface Institution {\n  id: string;\n  name: string;\n  logo?: string;\n  url?: string;\n  primaryColor?: string;\n  loginUrl?: string;\n  supportPhone?: string;\n  supportEmail?: string;\n  plaidInstitutionId?: string;\n  tellerInstitutionId?: string;\n  isActive: boolean;\n  capabilities: InstitutionCapabilities;\n}\n\nexport interface InstitutionCapabilities {\n  accounts: boolean;\n  transactions: boolean;\n  investments: boolean;\n  liabilities: boolean;\n  identity: boolean;\n  auth: boolean;\n  realTimeUpdates: boolean;\n}\n\nexport interface AccountConnection {\n  id: string;\n  familyId: string;\n  institutionId: string;\n  provider: 'plaid' | 'teller' | 'manual';\n  accessToken?: string; // Encrypted\n  itemId?: string;\n  accounts: string[]; // Account IDs\n  status: 'active' | 'error' | 'requires_reauth' | 'disconnected';\n  error?: ConnectionError;\n  lastSyncAt?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface ConnectionError {\n  code: string;\n  message: string;\n  resolution?: string;\n  timestamp: Date;\n}\n\nexport interface AccountBalance {\n  accountId: string;\n  balance: number;\n  availableBalance?: number;\n  currency: string;\n  asOfDate: Date;\n  balanceType: 'current' | 'available' | 'limit';\n}\n\nexport interface AccountPerformance {\n  accountId: string;\n  period: 'day' | 'week' | 'month' | 'quarter' | 'year' | 'ytd' | 'all';\n  startBalance: number;\n  endBalance: number;\n  totalReturn: number;\n  totalReturnPercentage: number;\n  deposits: number;\n  withdrawals: number;\n  fees: number;\n  interest: number;\n  dividends: number;\n  unrealizedGains: number;\n  realizedGains: number;\n}\n\n// Enterprise Account Card DTO - Optimized for compact display\nexport interface AccountCardDTO {\n  // Core Identity\n  id: string;\n  institution: {\n    name: string;           // \"Chase\", \"Bank of America\", \"Wells Fargo\"\n    logo?: string;          // Institution logo URL\n    color?: string;         // Brand color for accents\n    percentChange30d?: number; // Balance change vs 30 days (%)\n    category?: 'CHECKING' | 'SAVINGS' | 'CREDIT' | 'INVESTMENT';\n    utilPercent?: number;      // For credit cards\n  };\n  \n  // Account Details\n  accountType: 'Checking' | 'Savings' | 'Credit Card' | 'Investment' | 'Loan';\n  accountName: string;      // \"Main Checking\", \"Rewards Card\", etc.\n  last4: string;           // Last 4 digits for identification\n  \n  // Financial Data\n  currentBalance: number;\n  availableBalance?: number;  // Different from current for credit cards\n  currency: string;\n  \n  // Smart Insights (Fortune 500 Standard)\n  lastTransaction?: {\n    merchant: string;       // \"Starbucks\"\n    amount: number;        // -5.67\n    date: string;          // \"Dec 15\"\n    pending?: boolean;\n  };\n  \n  // Contextual Metrics\n  pendingCount?: number;     // Number of pending transactions\n  interestApy?: number;      // For savings accounts\n  creditUtilization?: number; // For credit cards (0-100%)\n  monthlySpend?: number;     // Current month spending\n  spendDelta?: {            // vs last month\n    amount: number;\n    percentage: number;\n    trend: 'up' | 'down' | 'stable';\n  };\n  \n  // Status & Alerts\n  alerts?: Array<{\n    type: 'low_balance' | 'unusual_spending' | 'payment_due' | 'fraud_alert';\n    message: string;\n    severity: 'info' | 'warning' | 'critical';\n  }>;\n  \n  // Quick Actions (Enterprise Standard)\n  quickActions?: Array<{\n    type: 'transfer' | 'pay' | 'deposit' | 'pay_bill';\n    label: string;\n    enabled: boolean;\n  }>;\n\n  // New UI fields\n  category?: 'CHECKING' | 'SAVINGS' | 'CREDIT' | 'INVESTMENT';\n  percentChange30d?: number;\n  utilPercent?: number;\n}\n\n// Helper function to transform Account to AccountCardDTO\nexport function accountToCardDTO(\n  account: Account, \n  transactions: Transaction[] = [],\n  institutionData?: { name: string; logo?: string; color?: string }\n): AccountCardDTO {\n  const recentTransaction = transactions\n    .filter(t => t.status === 'completed')\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())[0];\n    \n  const pendingTransactions = transactions.filter(t => t.status === 'pending');\n  \n  const monthlySpending = transactions\n    .filter(t => {\n      const txDate = new Date(t.date);\n      const now = new Date();\n      return txDate.getMonth() === now.getMonth() && \n             txDate.getFullYear() === now.getFullYear() &&\n             t.amount < 0;\n    })\n    .reduce((sum, t) => sum + Math.abs(t.amount), 0);\n\n  return {\n    id: account.id,\n    institution: institutionData || {\n      name: account.institutionName || 'Unknown Bank',\n      color: '#6366f1'\n    },\n    accountType: mapAccountType(account.accountType, account.accountSubtype),\n    accountName: account.name || 'Account',\n    last4: account.metadata?.accountNumber?.slice(-4) || '0000',\n    currentBalance: account.balance,\n    availableBalance: account.availableBalance,\n    currency: account.currency,\n    lastTransaction: recentTransaction ? {\n      merchant: recentTransaction.merchant,\n      amount: recentTransaction.amount,\n      date: formatTransactionDate(recentTransaction.date),\n      pending: false\n    } : undefined,\n    pendingCount: pendingTransactions.length,\n    interestApy: account.metadata?.apy,\n    creditUtilization: calculateCreditUtilization(account),\n    monthlySpend: monthlySpending,\n    spendDelta: calculateSpendDelta(transactions),\n    alerts: generateSmartAlerts(account, transactions),\n    quickActions: getQuickActions(account.accountType),\n    category: account.accountType === 'depository' ? 'CHECKING' : account.accountType === 'credit' ? 'CREDIT' : account.accountType === 'investment' ? 'INVESTMENT' : undefined,\n    // Approximate 30-day change using spending delta (negative => down)\n    percentChange30d: (() => {\n      const delta = calculateSpendDelta(transactions);\n      if (!delta) return undefined;\n      return delta.trend === 'up' ? -delta.percentage : delta.percentage;\n    })(),\n    utilPercent: account.accountType === 'credit' ? calculateCreditUtilization(account) : undefined\n  };\n}\n\nfunction mapAccountType(type: AccountType, subtype?: AccountSubtype): AccountCardDTO['accountType'] {\n  if (type === 'depository') {\n    return subtype === 'savings' ? 'Savings' : 'Checking';\n  }\n  if (type === 'credit') return 'Credit Card';\n  if (type === 'investment') return 'Investment';\n  if (type === 'loan') return 'Loan';\n  return 'Checking';\n}\n\nfunction formatTransactionDate(date: string): string {\n  const d = new Date(date);\n  return d.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n}\n\nfunction calculateCreditUtilization(account: Account): number | undefined {\n  if (account.accountType !== 'credit') return undefined;\n  const limit = account.metadata?.creditLimit;\n  if (!limit) return undefined;\n  const used = Math.abs(account.balance);\n  return Math.round((used / limit) * 100);\n}\n\nfunction calculateSpendDelta(transactions: Transaction[]): AccountCardDTO['spendDelta'] {\n  const now = new Date();\n  const thisMonth = transactions.filter(t => {\n    const d = new Date(t.date);\n    return d.getMonth() === now.getMonth() && d.getFullYear() === now.getFullYear() && t.amount < 0;\n  }).reduce((sum, t) => sum + Math.abs(t.amount), 0);\n  \n  const lastMonth = transactions.filter(t => {\n    const d = new Date(t.date);\n    const lastMonthDate = new Date(now.getFullYear(), now.getMonth() - 1);\n    return d.getMonth() === lastMonthDate.getMonth() && \n           d.getFullYear() === lastMonthDate.getFullYear() && t.amount < 0;\n  }).reduce((sum, t) => sum + Math.abs(t.amount), 0);\n  \n  if (lastMonth === 0) return undefined;\n  \n  const difference = thisMonth - lastMonth;\n  const percentage = Math.round((difference / lastMonth) * 100);\n  \n  return {\n    amount: difference,\n    percentage: Math.abs(percentage),\n    trend: difference > 0 ? 'up' : difference < 0 ? 'down' : 'stable'\n  };\n}\n\nfunction generateSmartAlerts(account: Account, transactions: Transaction[]): AccountCardDTO['alerts'] {\n  const alerts: AccountCardDTO['alerts'] = [];\n  \n  // Low balance alert\n  if (account.accountType === 'depository' && account.balance < 100) {\n    alerts.push({\n      type: 'low_balance',\n      message: 'Low balance',\n      severity: 'warning'\n    });\n  }\n  \n  // High utilization alert\n  const utilization = calculateCreditUtilization(account);\n  if (utilization && utilization > 80) {\n    alerts.push({\n      type: 'unusual_spending',\n      message: 'High utilization',\n      severity: 'warning'\n    });\n  }\n  \n  return alerts;\n}\n\nfunction getQuickActions(accountType: AccountType): AccountCardDTO['quickActions'] {\n  const baseActions: Array<{\n    type: 'transfer' | 'pay' | 'deposit' | 'pay_bill';\n    label: string;\n    enabled: boolean;\n  }> = [\n    { type: 'transfer', label: 'Transfer', enabled: true },\n    { type: 'pay', label: 'Pay', enabled: true }\n  ];\n  \n  if (accountType === 'depository') {\n    baseActions.push({ type: 'deposit', label: 'Deposit', enabled: true });\n  }\n  \n  return baseActions;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/types/analytics.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/types/analytics.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\nimport { BiometricsState } from '@/features/biometric-intervention/api/WellnessEngine';\nimport { PerformanceMetrics, RiskMetrics } from './investments';\nimport { FinancialHealthMetrics } from './financialPlanning';\nimport { TransactionAnalytics } from './transactions';\nimport { HealthScoreBreakdown } from '@/features/biometric-intervention/api/healthKitService';\n\n// Core Analytics Data Types\nexport interface AnalyticsTimeframe {\n  start: Date;\n  end: Date;\n  period: '1d' | '7d' | '30d' | '90d' | '365d' | 'all';\n}\n\nexport interface AnalyticsDataPoint {\n  timestamp: string;\n  value: number;\n  confidence?: number;\n  metadata?: Record<string, any>;\n}\n\n// Health Metrics Unified Schema\nexport interface UnifiedHealthMetrics {\n  // Core vitals\n  heartRate: AnalyticsDataPoint[];\n  heartRateVariability: AnalyticsDataPoint[];\n  stressIndex: AnalyticsDataPoint[];\n  sleepQuality: AnalyticsDataPoint[];\n  \n  // Activity metrics\n  steps: AnalyticsDataPoint[];\n  activeMinutes: AnalyticsDataPoint[];\n  caloriesBurned: AnalyticsDataPoint[];\n  \n  // Composite scores\n  wellnessScore: AnalyticsDataPoint[];\n  activityScore: AnalyticsDataPoint[];\n  recoveryScore: AnalyticsDataPoint[];\n  \n  // Trends and patterns\n  weeklyTrends: {\n    stress: 'rising' | 'falling' | 'stable';\n    activity: 'improving' | 'declining' | 'stable';\n    sleep: 'improving' | 'declining' | 'stable';\n  };\n  \n  // Data quality\n  dataCompleteness: number; // 0-100%\n  lastSyncTime: string;\n}\n\n// Wealth Metrics Unified Schema\nexport interface UnifiedWealthMetrics {\n  // Net worth components\n  netWorth: AnalyticsDataPoint[];\n  assets: AnalyticsDataPoint[];\n  liabilities: AnalyticsDataPoint[];\n  \n  // Investment performance\n  portfolioValue: AnalyticsDataPoint[];\n  portfolioReturns: AnalyticsDataPoint[];\n  \n  // Cash flow\n  income: AnalyticsDataPoint[];\n  expenses: AnalyticsDataPoint[];\n  savings: AnalyticsDataPoint[];\n  \n  // Financial health ratios\n  debtToIncomeRatio: AnalyticsDataPoint[];\n  savingsRate: AnalyticsDataPoint[];\n  emergencyFundRatio: AnalyticsDataPoint[];\n  \n  // Performance metrics\n  performanceMetrics: PerformanceMetrics;\n  riskMetrics: RiskMetrics;\n  \n  // Trends\n  monthlyTrends: {\n    netWorth: 'growing' | 'declining' | 'stable';\n    cashFlow: 'positive' | 'negative' | 'neutral';\n    investments: 'outperforming' | 'underperforming' | 'market-rate';\n  };\n}\n\n// Transaction Intelligence Unified Schema\nexport interface UnifiedTransactionMetrics {\n  // Spending patterns\n  dailySpending: AnalyticsDataPoint[];\n  categorySpending: Record<string, AnalyticsDataPoint[]>;\n  merchantSpending: Record<string, AnalyticsDataPoint[]>;\n  \n  // Transaction scores\n  healthImpactScores: AnalyticsDataPoint[];\n  ecoImpactScores: AnalyticsDataPoint[];\n  necessityScores: AnalyticsDataPoint[];\n  \n  // Behavioral patterns\n  spendingVelocity: AnalyticsDataPoint[];\n  impulsePurchases: AnalyticsDataPoint[];\n  planedPurchases: AnalyticsDataPoint[];\n  \n  // Insights and trends\n  spendingTrends: {\n    health: 'increasing' | 'decreasing' | 'stable';\n    eco: 'improving' | 'declining' | 'stable';\n    overall: 'conscious' | 'unconscious' | 'balanced';\n  };\n  \n  // Correlation hints\n  correlationStrength: number; // 0-1\n  primaryDrivers: string[];\n}\n\n// Cross-Domain Correlation Schema\nexport interface HealthWealthCorrelation {\n  id: string;\n  type: 'stress-spending' | 'sleep-decisions' | 'activity-performance' | 'health-investment';\n  \n  // Statistical measures\n  correlationCoefficient: number; // -1 to 1\n  significance: number; // p-value\n  confidence: number; // 0-100%\n  \n  // Data points\n  dataPoints: Array<{\n    timestamp: string;\n    healthValue: number;\n    wealthValue: number;\n    transactionCount?: number;\n  }>;\n  \n  // Insights\n  pattern: 'positive' | 'negative' | 'nonlinear' | 'threshold';\n  strength: 'weak' | 'moderate' | 'strong';\n  actionable: boolean;\n  \n  // Recommendations\n  insights: string[];\n  recommendations: string[];\n  \n  // Metadata\n  timeframe: AnalyticsTimeframe;\n  lastCalculated: string;\n}\n\n// Main Analytics Dashboard Data Schema\nexport interface AnalyticsDashboardData {\n  // Core metrics\n  health: UnifiedHealthMetrics;\n  wealth: UnifiedWealthMetrics;\n  transactions: UnifiedTransactionMetrics;\n  \n  // Cross-domain correlations\n  correlations: HealthWealthCorrelation[];\n  \n  // Summary scores\n  overallScores: {\n    health: number;\n    wealth: number;\n    sustainability: number;\n    financial_wellness: number;\n  };\n  \n  // Key insights\n  insights: Array<{\n    id: string;\n    type: 'health' | 'wealth' | 'correlation' | 'trend';\n    title: string;\n    description: string;\n    impact: 'high' | 'medium' | 'low';\n    actionable: boolean;\n    recommendation?: string;\n    confidence: number;\n  }>;\n  \n  // Metadata\n  timeframe: AnalyticsTimeframe;\n  lastUpdated: string;\n  dataQuality: {\n    health: number;\n    wealth: number;\n    transactions: number;\n    overall: number;\n  };\n}\n\n// Real-time Analytics Stream Schema\nexport const AnalyticsStreamSchema = z.object({\n  timestamp: z.string(),\n  \n  // Real-time health metrics\n  currentStress: z.number().min(0).max(100).optional(),\n  currentHR: z.number().min(30).max(220).optional(),\n  currentHRV: z.number().min(0).max(100).optional(),\n  \n  // Recent financial activity\n  recentTransactions: z.array(z.object({\n    amount: z.number(),\n    category: z.string(),\n    timestamp: z.string(),\n    healthScore: z.number().optional(),\n  })),\n  \n  // Live correlations\n  liveCorrelations: z.array(z.object({\n    type: z.string(),\n    strength: z.number().min(-1).max(1),\n    confidence: z.number().min(0).max(1),\n  })),\n  \n  // Intervention triggers\n  shouldIntervene: z.boolean(),\n  interventionReason: z.string().optional(),\n});\n\nexport type AnalyticsStream = z.infer<typeof AnalyticsStreamSchema>;\n\n// Analytics Configuration Schema\nexport interface AnalyticsConfig {\n  // Data sources\n  enabledSources: {\n    healthKit: boolean;\n    plaidTransactions: boolean;\n    investmentData: boolean;\n    biometricDevices: boolean;\n  };\n  \n  // Correlation settings\n  correlationSettings: {\n    minDataPoints: number;\n    significanceThreshold: number;\n    updateFrequency: 'realtime' | 'hourly' | 'daily';\n    enabledCorrelations: string[];\n  };\n  \n  // Privacy and retention\n  privacy: {\n    shareCorrelations: boolean;\n    anonymizeData: boolean;\n    retentionPeriod: number; // days\n  };\n  \n  // Notifications\n  notifications: {\n    strongCorrelations: boolean;\n    healthWealthAlerts: boolean;\n    spendingPatterns: boolean;\n  };\n}\n\n// Analytics API Response Types\nexport interface AnalyticsAPIResponse<T = any> {\n  data: T;\n  metadata: {\n    timestamp: string;\n    processingTime: number;\n    dataQuality: number;\n    correlationsCount: number;\n  };\n  errors?: string[];\n  warnings?: string[];\n}\n\n// Export utility types\nexport type HealthMetricKey = keyof UnifiedHealthMetrics;\nexport type WealthMetricKey = keyof UnifiedWealthMetrics;\nexport type TransactionMetricKey = keyof UnifiedTransactionMetrics;\nexport type CorrelationType = HealthWealthCorrelation['type']; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/types/budget.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/types/budget.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface BudgetCategory {\n  id: string;\n  name: string;\n  budget: number; // Monthly budget allotted\n  spent: number; // Amount spent so far in the current period\n  recurring?: boolean; // Whether the budget recurs every period\n  color?: string; // Optional: UI accent colour\n}\n\nexport interface BudgetPeriodSummary {\n  month: string; // e.g. \"Jan 2025\"\n  categories: BudgetCategory[];\n  totalBudget: number;\n  totalSpent: number;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/types/budgets.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/types/budgets.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface Budget {\n  id: string;\n  familyId: string;\n  name: string;\n  description?: string;\n  budgetType: BudgetType;\n  period: BudgetPeriod;\n  startDate: Date;\n  endDate: Date;\n  totalBudgeted: number;\n  totalSpent: number;\n  totalRemaining: number;\n  currency: string;\n  categories: BudgetCategory[];\n  settings: BudgetSettings;\n  status: BudgetStatus;\n  isTemplate: boolean;\n  templateId?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport type BudgetType = \n  | 'zero_based'     // Income - Expenses = 0\n  | 'envelope'       // Fixed amounts per category\n  | 'percentage'     // Percentage of income per category\n  | 'priority'       // Priority-based allocation\n  | 'goal_based'     // Budget aligned with financial goals\n  | 'flexible';      // Adaptive budgeting\n\nexport type BudgetPeriod = \n  | 'weekly' | 'biweekly' | 'monthly' | 'quarterly' | 'annually' | 'custom';\n\nexport type BudgetStatus = \n  | 'draft' | 'active' | 'paused' | 'completed' | 'archived';\n\nexport interface BudgetCategory {\n  id: string;\n  budgetId: string;\n  categoryName: string;\n  subcategories: BudgetSubcategory[];\n  budgetedAmount: number;\n  spentAmount: number;\n  remainingAmount: number;\n  overageAmount: number;\n  rolloverAmount: number; // From previous period\n  priority: number; // 1-5, 1 being highest priority\n  isFixed: boolean; // Fixed expense vs. variable\n  isEssential: boolean; // Essential vs. discretionary\n  alerts: CategoryAlert[];\n  historicalSpending: HistoricalSpending[];\n  notes?: string;\n}\n\nexport interface BudgetSubcategory {\n  id: string;\n  name: string;\n  budgetedAmount: number;\n  spentAmount: number;\n  remainingAmount: number;\n  transactions: string[]; // Transaction IDs\n}\n\nexport interface CategoryAlert {\n  id: string;\n  type: 'threshold' | 'overage' | 'unusual_spending' | 'recurring_charge';\n  threshold?: number; // Percentage of budget\n  isActive: boolean;\n  lastTriggered?: Date;\n  message: string;\n}\n\nexport interface HistoricalSpending {\n  period: string; // YYYY-MM format\n  amount: number;\n  transactionCount: number;\n  averageTransactionAmount: number;\n}\n\nexport interface BudgetSettings {\n  autoCreateCategories: boolean;\n  rolloverUnspent: boolean;\n  allowOverages: boolean;\n  overageSource: 'emergency_fund' | 'next_period' | 'other_categories';\n  alertThresholds: {\n    warning: number; // Percentage (e.g., 80%)\n    critical: number; // Percentage (e.g., 100%)\n  };\n  includeTransfers: boolean;\n  includePendingTransactions: boolean;\n  excludeRefunds: boolean;\n  automaticAdjustments: boolean;\n  syncWithGoals: boolean;\n}\n\nexport interface BudgetTemplate {\n  id: string;\n  familyId: string;\n  name: string;\n  description?: string;\n  budgetType: BudgetType;\n  period: BudgetPeriod;\n  categoryTemplates: CategoryTemplate[];\n  settings: BudgetSettings;\n  isPublic: boolean;\n  usageCount: number;\n  tags: string[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface CategoryTemplate {\n  categoryName: string;\n  subcategories: string[];\n  budgetedPercentage?: number; // Percentage of income\n  fixedAmount?: number;\n  priority: number;\n  isFixed: boolean;\n  isEssential: boolean;\n  description?: string;\n  tips?: string[];\n}\n\nexport interface BudgetRecommendation {\n  id: string;\n  familyId: string;\n  type: RecommendationType;\n  category?: string;\n  title: string;\n  description: string;\n  currentAmount: number;\n  recommendedAmount: number;\n  potentialSavings: number;\n  confidence: number; // 0-1\n  reasoning: string[];\n  actionItems: string[];\n  isApplied: boolean;\n  createdAt: Date;\n  expiresAt?: Date;\n}\n\nexport type RecommendationType = \n  | 'reduce_spending' | 'increase_budget' | 'reallocate_funds' \n  | 'create_category' | 'merge_categories' | 'adjust_goals' \n  | 'emergency_fund' | 'debt_payment' | 'investment_opportunity';\n\nexport interface BudgetAnalytics {\n  period: BudgetPeriod;\n  startDate: Date;\n  endDate: Date;\n  performance: BudgetPerformance;\n  trends: BudgetTrend[];\n  insights: BudgetInsight[];\n  comparisons: BudgetComparison[];\n  forecasts: BudgetForecast[];\n}\n\nexport interface BudgetPerformance {\n  totalBudgeted: number;\n  totalSpent: number;\n  totalSaved: number;\n  savingsRate: number;\n  adherenceScore: number; // 0-100\n  categoryPerformance: CategoryPerformance[];\n  monthlyBreakdown: MonthlyBreakdown[];\n}\n\nexport interface CategoryPerformance {\n  category: string;\n  budgetedAmount: number;\n  spentAmount: number;\n  variance: number;\n  variancePercentage: number;\n  adherenceScore: number;\n  trendDirection: 'improving' | 'declining' | 'stable';\n}\n\nexport interface MonthlyBreakdown {\n  month: string;\n  budgeted: number;\n  spent: number;\n  saved: number;\n  adherenceScore: number;\n}\n\nexport interface BudgetTrend {\n  category: string;\n  direction: 'increasing' | 'decreasing' | 'stable';\n  changeAmount: number;\n  changePercentage: number;\n  significance: 'high' | 'medium' | 'low';\n  timeframe: string;\n}\n\nexport interface BudgetInsight {\n  type: 'overspending' | 'underspending' | 'seasonal_pattern' | 'recurring_charge' | 'opportunity';\n  category?: string;\n  title: string;\n  description: string;\n  impact: 'high' | 'medium' | 'low';\n  actionable: boolean;\n  recommendedAction?: string;\n  potentialSavings?: number;\n  confidence: number;\n}\n\nexport interface BudgetComparison {\n  type: 'previous_period' | 'similar_families' | 'national_average' | 'recommended_budget';\n  category: string;\n  yourAmount: number;\n  comparisonAmount: number;\n  difference: number;\n  differencePercentage: number;\n  insight: string;\n}\n\nexport interface BudgetForecast {\n  category: string;\n  currentTrend: number;\n  projectedSpending: number;\n  projectedVariance: number;\n  confidence: number;\n  factors: string[];\n  recommendations: string[];\n}\n\nexport interface SavingsGoal {\n  id: string;\n  familyId: string;\n  name: string;\n  description?: string;\n  goalType: GoalType;\n  targetAmount: number;\n  currentAmount: number;\n  monthlyContribution: number;\n  targetDate: Date;\n  priority: number; // 1-5\n  status: GoalStatus;\n  linkedAccountIds: string[];\n  autoContribute: boolean;\n  contributionRules: ContributionRule[];\n  milestones: GoalMilestone[];\n  tags: string[];\n  isArchived: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport type GoalType = \n  | 'emergency_fund' | 'house_down_payment' | 'vacation' | 'car_purchase' \n  | 'wedding' | 'education' | 'retirement' | 'debt_payoff' | 'general_savings' \n  | 'home_improvement' | 'business_investment' | 'child_education' | 'healthcare';\n\nexport type GoalStatus = \n  | 'not_started' | 'in_progress' | 'on_track' | 'behind' | 'ahead' | 'completed' | 'paused';\n\nexport interface ContributionRule {\n  id: string;\n  type: 'fixed_amount' | 'percentage_income' | 'excess_budget' | 'windfall';\n  amount?: number;\n  percentage?: number;\n  frequency: 'weekly' | 'biweekly' | 'monthly' | 'quarterly';\n  conditions?: ContributionCondition[];\n  isActive: boolean;\n}\n\nexport interface ContributionCondition {\n  field: 'budget_surplus' | 'income_threshold' | 'expense_below' | 'date_range';\n  operator: 'greater_than' | 'less_than' | 'equals' | 'between';\n  value: number | string;\n  value2?: number | string;\n}\n\nexport interface GoalMilestone {\n  id: string;\n  name: string;\n  targetAmount: number;\n  targetDate: Date;\n  isCompleted: boolean;\n  completedDate?: Date;\n  reward?: string;\n  description?: string;\n}\n\nexport interface GoalAnalytics {\n  goalId: string;\n  progressPercentage: number;\n  monthsToCompletion: number;\n  onTrackToComplete: boolean;\n  requiredMonthlyContribution: number;\n  actualMonthlyContribution: number;\n  projectedCompletionDate: Date;\n  contributionHistory: ContributionHistory[];\n  recommendations: GoalRecommendation[];\n}\n\nexport interface ContributionHistory {\n  date: Date;\n  amount: number;\n  source: 'manual' | 'automatic' | 'surplus' | 'windfall';\n  balance: number;\n}\n\nexport interface GoalRecommendation {\n  type: 'increase_contribution' | 'adjust_timeline' | 'reallocate_funds' | 'automate_savings';\n  title: string;\n  description: string;\n  impact: string;\n  actionItems: string[];\n  potentialBenefit: number;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/types/creditScore.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/types/creditScore.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface CreditScore {\n  score: number;\n  scoreRange: 'Poor' | 'Fair' | 'Good' | 'Very Good' | 'Excellent';\n  lastUpdated: string;\n  provider: 'FICO' | 'VantageScore';\n  factors: CreditFactor[];\n  history: ScoreHistoryPoint[];\n}\n\nexport interface CreditFactor {\n  factor: string;\n  impact: 'High' | 'Medium' | 'Low';\n  status: 'Positive' | 'Negative' | 'Neutral';\n  description: string;\n  percentage: number;\n}\n\nexport interface ScoreHistoryPoint {\n  date: string;\n  score: number;\n  change: number;\n}\n\nexport interface CreditTip {\n  id: string;\n  title: string;\n  description: string;\n  impact: 'High' | 'Medium' | 'Low';\n  timeframe: string;\n  category: 'Payment' | 'Utilization' | 'Length' | 'Mix' | 'Inquiries';\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/types/family.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/types/family.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface Family {\n  id: string;\n  name: string;\n  ownerId: string;\n  settings: FamilySettings;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface FamilySettings {\n  currency: string;\n  timezone: string;\n  fiscalYearStart: number; // Month (1-12)\n  budgetPeriod: 'monthly' | 'weekly' | 'quarterly' | 'annually';\n  riskTolerance: 'conservative' | 'moderate' | 'aggressive';\n  investmentStyle: 'passive' | 'active' | 'mixed';\n  notifications: NotificationSettings;\n  privacy: PrivacySettings;\n}\n\nexport interface NotificationSettings {\n  budgetAlerts: boolean;\n  largeTransactions: boolean;\n  billReminders: boolean;\n  goalMilestones: boolean;\n  investmentUpdates: boolean;\n  securityAlerts: boolean;\n  emailDigest: 'daily' | 'weekly' | 'monthly' | 'never';\n}\n\nexport interface PrivacySettings {\n  dataSharing: boolean;\n  analyticsOptOut: boolean;\n  thirdPartyIntegrations: boolean;\n  marketingCommunications: boolean;\n}\n\nexport interface FamilyMember {\n  id: string;\n  familyId: string;\n  userId: string;\n  role: 'owner' | 'admin' | 'member' | 'viewer';\n  permissions: MemberPermissions;\n  joinedAt: Date;\n  isActive: boolean;\n}\n\nexport interface MemberPermissions {\n  canViewAccounts: boolean;\n  canLinkAccounts: boolean;\n  canCreateBudgets: boolean;\n  canSetGoals: boolean;\n  canManageInvestments: boolean;\n  canAccessReports: boolean;\n  canModifySettings: boolean;\n  canInviteMembers: boolean;\n}\n\nexport interface FamilyInvitation {\n  id: string;\n  familyId: string;\n  inviterId: string;\n  email: string;\n  role: 'admin' | 'member' | 'viewer';\n  token: string;\n  expiresAt: Date;\n  isAccepted: boolean;\n  createdAt: Date;\n}\n\nexport interface FamilyStats {\n  totalNetWorth: number;\n  monthlyIncome: number;\n  monthlyExpenses: number;\n  savingsRate: number;\n  debtToIncomeRatio: number;\n  emergencyFundMonths: number;\n  investmentAllocation: {\n    stocks: number;\n    bonds: number;\n    cash: number;\n    realEstate: number;\n    crypto: number;\n    other: number;\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/types/financialPlanning.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/types/financialPlanning.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type GoalCategory = \n  | 'emergency_fund'\n  | 'retirement'\n  | 'house_down_payment'\n  | 'vacation'\n  | 'education'\n  | 'debt_payoff'\n  | 'car_purchase'\n  | 'investment'\n  | 'wedding'\n  | 'business'\n  | 'other';\n\nexport type GoalStatus = 'active' | 'completed' | 'paused' | 'cancelled';\n\nexport type RiskProfile = 'conservative' | 'moderate' | 'aggressive';\n\nexport interface FinancialGoal {\n  id: string;\n  familyId: string;\n  title: string;\n  description?: string;\n  category: GoalCategory;\n  targetAmount: number;\n  targetDate: Date;\n  priority: number; // 1-5, 1 being highest\n  monthlyContribution?: number;\n  autoContribute: boolean;\n  status: GoalStatus;\n  progress: {\n    currentAmount: number;\n    percentComplete: number;\n    monthlyContribution: number;\n    projectedCompletionDate: Date;\n    onTrack: boolean;\n  };\n  tags: string[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface RetirementPlan {\n  id: string;\n  familyId: string;\n  currentAge: number;\n  retirementAge: number;\n  yearsToRetirement: number;\n  currentIncome: number;\n  currentSavings: number;\n  monthlyContribution: number;\n  riskProfile: RiskProfile;\n  projections: {\n    totalRetirementValue: number;\n    targetRetirementSavings: number;\n    shortfall: number;\n    monthlyIncomeAtRetirement: number;\n    expectedReturn: number;\n  };\n  recommendations: PlanningRecommendation[];\n  milestones: FinancialMilestone[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface DebtPayoffPlan {\n  id: string;\n  familyId: string;\n  strategy: 'avalanche' | 'snowball';\n  debts: Array<{\n    name: string;\n    balance: number;\n    interestRate: number;\n    minimumPayment: number;\n  }>;\n  extraPayment: number;\n  projections: {\n    totalDebt: number;\n    totalInterest: number;\n    monthsToPayoff: number;\n    payoffDate: Date;\n    monthlySavingsAfterPayoff: number;\n  };\n  payoffSchedule: Array<{\n    name: string;\n    balance: number;\n    interestRate: number;\n    minimumPayment: number;\n    monthsToPayoff: number;\n    totalInterest: number;\n    totalPaid: number;\n  }>;\n  recommendations: PlanningRecommendation[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface EmergencyFundPlan {\n  id: string;\n  familyId: string;\n  monthlyExpenses: number;\n  targetMonths: number;\n  targetAmount: number;\n  currentAmount: number;\n  monthlyContribution: number;\n  projections: {\n    shortfall: number;\n    monthsToTarget: number;\n    completionDate: Date | null;\n  };\n  recommendations: PlanningRecommendation[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface InvestmentPlan {\n  id: string;\n  familyId: string;\n  goalAmount: number;\n  timeHorizon: number; // years\n  riskProfile: RiskProfile;\n  monthlyContribution: number;\n  assetAllocation: {\n    stocks: number;\n    bonds: number;\n    reits: number;\n    commodities: number;\n    cash: number;\n  };\n  projections: {\n    expectedValue: number;\n    probabilityOfSuccess: number;\n    worstCaseScenario: number;\n    bestCaseScenario: number;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface FinancialMilestone {\n  id: string;\n  title: string;\n  description: string;\n  targetAmount: number;\n  targetDate: Date;\n  category: GoalCategory;\n  completed: boolean;\n  completedDate?: Date;\n}\n\nexport interface PlanningRecommendation {\n  type: 'increase_contributions' | 'debt_payoff' | 'emergency_fund' | 'investment' | 'insurance' | 'tax_strategy';\n  title: string;\n  description: string;\n  impact: 'low' | 'medium' | 'high';\n  priority: number;\n  estimatedBenefit: number; // Dollar amount\n  actionItems: string[];\n  deadline?: Date;\n}\n\nexport interface CashFlowProjection {\n  date: Date;\n  income: number;\n  expenses: number;\n  netCashFlow: number;\n  savingsRate: number;\n}\n\nexport interface NetWorthProjection {\n  date: Date;\n  totalAssets: number;\n  totalLiabilities: number;\n  netWorth: number;\n}\n\nexport interface FinancialHealthMetrics {\n  emergencyFundRatio: number; // months of expenses covered\n  debtToIncomeRatio: number;\n  savingsRate: number;\n  netWorthGrowthRate: number;\n  investmentDiversification: number;\n  retirementReadiness: number;\n}\n\nexport interface GoalProgress {\n  goalId: string;\n  currentAmount: number;\n  targetAmount: number;\n  percentComplete: number;\n  daysRemaining: number;\n  onTrack: boolean;\n  suggestedMonthlyContribution: number;\n  projectedCompletionDate: Date;\n}\n\nexport interface FinancialSnapshot {\n  date: Date;\n  netWorth: number;\n  totalAssets: number;\n  totalLiabilities: number;\n  monthlyIncome: number;\n  monthlyExpenses: number;\n  savingsRate: number;\n  investmentValue: number;\n  debtBalance: number;\n}\n\nexport interface LifeEventPlanning {\n  eventType: 'marriage' | 'baby' | 'house_purchase' | 'job_change' | 'retirement' | 'education';\n  plannedDate: Date;\n  estimatedCost: number;\n  currentSavings: number;\n  monthlyContribution: number;\n  recommendations: PlanningRecommendation[];\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/types/investments.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/types/investments.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface Holding {\n  id: string;\n  symbol: string; // e.g. \"AAPL\"\n  name: string; // Company name\n  shares: number;\n  purchasePrice: number; // Avg cost basis\n  currentPrice: number;\n  sector?: string;\n  accountId: string;\n  quantity: number;\n  averageCostPerShare: number;\n  assetType: 'stock' | 'etf' | 'bond' | 'crypto' | 'reit' | 'commodity' | 'cash' | 'mutual_fund';\n  costBasis: number;\n  marketValue: number;\n  unrealizedGainLoss: number;\n  unrealizedGainLossPercent: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Investment {\n  id: string;\n  familyId: string;\n  accountId: string;\n  symbol: string;\n  name: string;\n  type: 'stock' | 'bond' | 'etf' | 'mutual_fund' | 'crypto' | 'reit';\n  quantity: number;\n  averageCost: number;\n  currentPrice: number;\n  marketValue: number;\n  costBasis: number;\n  unrealizedGainLoss: number;\n  unrealizedGainLossPercent: number;\n  sector?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface InvestmentAccount {\n  id: string;\n  familyId: string;\n  institution: string;\n  accountType: 'brokerage' | 'ira' | '401k' | 'roth_ira' | 'pension';\n  accountNumber: string;\n  name: string;\n  balance: number;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Portfolio {\n  id: string;\n  familyId: string;\n  name?: string;\n  description?: string;\n  totalValue: number;\n  totalCostBasis: number;\n  totalGainLoss: number;\n  totalGainLossPercent: number;\n  accounts: InvestmentAccount[];\n  holdings: Holding[];\n  allocation: AssetAllocation;\n  performance: PerformanceMetrics;\n  riskMetrics: RiskMetrics;\n  lastUpdated: Date;\n}\n\nexport interface PerformanceMetrics {\n  totalReturn: number;\n  annualizedReturn: number;\n  returns: Record<string, number>;\n  sharpeRatio: number;\n  volatility: number;\n  maxDrawdown: number;\n  alpha: number;\n  beta: number;\n  rSquared: number;\n}\n\nexport interface AssetAllocation {\n  stocks: number;\n  bonds: number;\n  cash: number;\n  reits: number;\n  commodities: number;\n  crypto: number;\n  other: number;\n  sectors: Record<string, number>;\n  regions: {\n    US: number;\n    International: number;\n    Emerging: number;\n  };\n}\n\nexport interface RiskMetrics {\n  concentrationRisk: number;\n  sectorConcentration: number;\n  geographicRisk: number;\n  currencyRisk: number;\n  correlation: number;\n  var95: number;\n  var99: number;\n  expectedShortfall: number;\n}\n\nexport interface PortfolioSnapshot {\n  date: string; // ISO date string\n  value: number; // Portfolio total value at that time\n}\n\nexport interface PortfolioSummary {\n  holdings: Holding[];\n  snapshots: PortfolioSnapshot[];\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/types/savingsGoals.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/types/savingsGoals.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface SavingsGoal {\n  id: string;\n  name: string;\n  description?: string;\n  targetAmount: number;\n  currentAmount: number;\n  targetDate: string;\n  category: GoalCategory;\n  color: string;\n  icon: string;\n  isCompleted: boolean;\n  createdAt: string;\n  contributions: Contribution[];\n}\n\nexport interface Contribution {\n  id: string;\n  amount: number;\n  date: string;\n  type: 'manual' | 'automatic' | 'roundup';\n  description?: string;\n}\n\nexport type GoalCategory = \n  | 'Emergency Fund'\n  | 'Vacation'\n  | 'Home Down Payment'\n  | 'Car'\n  | 'Education'\n  | 'Wedding'\n  | 'Retirement'\n  | 'General';\n\nexport interface SavingsInsight {\n  type: 'progress' | 'suggestion' | 'milestone';\n  title: string;\n  description: string;\n  actionable: boolean;\n  action?: string;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/types/shared.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/types/shared.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Central type definitions to eliminate duplication across 20+ files\n// This will reduce code complexity by consolidating interfaces\n\nexport interface Transaction {\n  id: string;\n  merchant: string;\n  category: {\n    name: string;\n    color: string;\n    icon?: string;\n  };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n  description?: string;\n  scores?: {\n    health: number;\n    eco: number;\n    financial: number;\n  };\n  type?: 'income' | 'expense';\n  paymentMethod?: {\n    accountName: string;\n    last4: string;\n    network?: string;\n  };\n  trackingNumber?: string;\n  shippingCarrier?: 'UPS' | 'FedEx' | 'USPS' | 'DHL' | 'Other';\n  shippingStatus?: 'DELIVERED' | 'OUT_FOR_DELIVERY' | 'IN_TRANSIT' | 'PENDING';\n}\n\nexport interface Account {\n  id: string;\n  type: string;\n  nickname: string;\n  balance: number;\n  availableBalance: number;\n  currency: string;\n  isActive?: boolean;\n  lastUpdated?: string;\n  provider?: string;\n}\n\nexport interface CreditScore {\n  score: number;\n  scoreRange: string;\n  lastUpdated: string;\n  factors: Array<{\n    factor: string;\n    status: 'Positive' | 'Negative' | 'Neutral';\n    percentage: number;\n    description?: string;\n  }>;\n  history?: Array<{\n    date: string;\n    score: number;\n  }>;\n}\n\nexport interface InsightMetric {\n  id: string;\n  title: string;\n  value: number | string;\n  change?: {\n    amount: number;\n    percentage: number;\n    period: string;\n  };\n  trend?: 'up' | 'down' | 'stable';\n  category: string;\n  icon?: string;\n  color?: string;\n}\n\nexport interface BaseCardProps {\n  className?: string;\n  children?: React.ReactNode;\n  variant?: 'default' | 'glass' | 'solid' | 'outlined';\n  size?: 'sm' | 'md' | 'lg';\n  interactive?: boolean;\n  loading?: boolean;\n}\n\nexport interface ScoreCardData {\n  score: number;\n  maxScore: number;\n  label: string;\n  description?: string;\n  color: string;\n  trend?: {\n    direction: 'up' | 'down' | 'stable';\n    percentage: number;\n  };\n}\n\nexport interface UnifiedInsightsConfig {\n  variant: 'comprehensive' | 'simple' | 'enhanced' | 'refined';\n  features: {\n    showScores?: boolean;\n    showTrends?: boolean;\n    showCategories?: boolean;\n    enableInteractions?: boolean;\n    showComparisons?: boolean;\n  };\n  layout: {\n    columns: number;\n    spacing: 'tight' | 'normal' | 'loose';\n    responsive: boolean;\n  };\n  dataSource: {\n    transactions: Transaction[];\n    accounts: Account[];\n    timeframe?: string;\n  };\n}\n\nexport interface TransactionListProps {\n  transactions: Transaction[];\n  variant: 'default' | 'clean' | 'enterprise' | 'apple' | 'modern';\n  currency: string;\n  features: {\n    showScores?: boolean;\n    showCategories?: boolean;\n    searchable?: boolean;\n    filterable?: boolean;\n    groupByDate?: boolean;\n    sortable?: boolean;\n  };\n  onTransactionClick?: (transaction: Transaction) => void;\n  onCategoryFilter?: (category: string) => void;\n  className?: string;\n}\n\n// API Response Types\nexport interface ApiResponse<T> {\n  data: T;\n  success: boolean;\n  message?: string;\n  errors?: string[];\n  meta?: {\n    total: number;\n    page: number;\n    limit: number;\n  };\n}\n\nexport interface UserPreferences {\n  theme: 'light' | 'dark' | 'system';\n  currency: string;\n  language: string;\n  notifications: {\n    email: boolean;\n    push: boolean;\n    sms: boolean;\n  };\n  privacy: {\n    shareData: boolean;\n    analytics: boolean;\n  };\n}\n\n// Component State Types\nexport interface LoadingState {\n  isLoading: boolean;\n  error?: string | null;\n  lastUpdated?: string;\n}\n\nexport interface PaginationState {\n  page: number;\n  limit: number;\n  total: number;\n  hasMore: boolean;\n}\n\n// Event Handler Types\nexport type TransactionClickHandler = (transaction: Transaction) => void;\nexport type AccountSelectHandler = (account: Account) => void;\nexport type CategoryFilterHandler = (category: string) => void;\nexport type SortChangeHandler = (field: string, direction: 'asc' | 'desc') => void;\n\n// Performance Optimization Types\nexport interface MemoizedComponentProps<T = Record<string, unknown>> {\n  shouldUpdate?: (prevProps: T, nextProps: T) => boolean;\n}\n\nexport interface OptimizedListProps<T> {\n  items: T[];\n  renderItem: (item: T, index: number) => React.ReactNode;\n  keyExtractor: (item: T) => string;\n  virtualized?: boolean;\n  batchSize?: number;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/types/transactions.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/types/transactions.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface Transaction {\n  id: string;\n  accountId: string;\n  familyId: string;\n  externalTransactionId?: string;\n  amount: number;\n  currency: string;\n  date: Date;\n  authorizedDate?: Date;\n  merchantName?: string;\n  description: string;\n  category: TransactionCategory;\n  subcategory?: string;\n  paymentChannel: PaymentChannel;\n  transactionType: TransactionType;\n  status: TransactionStatus;\n  isPending: boolean;\n  isRecurring: boolean;\n  recurrenceRule?: RecurrenceRule;\n  location?: TransactionLocation;\n  metadata: TransactionMetadata;\n  tags: string[];\n  notes?: string;\n  excludeFromBudget: boolean;\n  isTransfer: boolean;\n  transferAccountId?: string;\n  transferTransactionId?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport type TransactionCategory = \n  | 'income'\n  | 'housing'\n  | 'transportation'\n  | 'food'\n  | 'utilities'\n  | 'insurance'\n  | 'healthcare'\n  | 'savings'\n  | 'debt_payments'\n  | 'entertainment'\n  | 'personal_care'\n  | 'shopping'\n  | 'education'\n  | 'gifts_donations'\n  | 'business'\n  | 'taxes'\n  | 'investments'\n  | 'fees'\n  | 'transfers'\n  | 'other';\n\nexport type PaymentChannel = \n  | 'online' | 'in_store' | 'atm' | 'phone' | 'mail' | 'mobile' | 'other';\n\nexport type TransactionType = \n  | 'purchase' | 'deposit' | 'withdrawal' | 'transfer' | 'payment' | 'fee' | 'interest' | 'dividend' | 'adjustment';\n\nexport type TransactionStatus = \n  | 'posted' | 'pending' | 'cancelled' | 'failed' | 'returned';\n\nexport interface RecurrenceRule {\n  frequency: 'daily' | 'weekly' | 'biweekly' | 'monthly' | 'quarterly' | 'annually';\n  interval: number;\n  endDate?: Date;\n  confidence: number; // 0-1 confidence score\n}\n\nexport interface TransactionLocation {\n  address?: string;\n  city?: string;\n  region?: string;\n  postalCode?: string;\n  country?: string;\n  latitude?: number;\n  longitude?: number;\n  storeNumber?: string;\n}\n\nexport interface TransactionMetadata {\n  plaidTransactionId?: string;\n  tellerTransactionId?: string;\n  merchantId?: string;\n  accountOwner?: string;\n  checkNumber?: string;\n  cardLast4?: string;\n  paymentProcessor?: string;\n  originalAmount?: number;\n  originalCurrency?: string;\n  exchangeRate?: number;\n  scores?: TransactionScores;\n  enrichment?: TransactionEnrichment;\n  tracking_number?: string;\n  carrier?: 'UPS' | 'FedEx' | 'USPS' | 'DHL' | 'Other';\n  shipping_status?: 'DELIVERED' | 'OUT_FOR_DELIVERY' | 'IN_TRANSIT' | 'PENDING';\n  payment_account_name?: string;\n  payment_last4?: string;\n  payment_network?: string;\n}\n\nexport interface TransactionScores {\n  health: number;\n  eco: number;\n  financial: number;\n  necessity: number;\n  happiness: number;\n}\n\nexport interface TransactionEnrichment {\n  logoUrl?: string;\n  website?: string;\n  category?: string;\n  subcategory?: string;\n  tags?: string[];\n  isEssential?: boolean;\n  environmentalScore?: number;\n  healthScore?: number;\n  brandInfo?: {\n    name: string;\n    description?: string;\n    industry?: string;\n    parentCompany?: string;\n  };\n}\n\nexport interface TransactionRule {\n  id: string;\n  familyId: string;\n  name: string;\n  isActive: boolean;\n  priority: number;\n  conditions: RuleCondition[];\n  actions: RuleAction[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface RuleCondition {\n  field: 'merchant' | 'description' | 'amount' | 'category' | 'account';\n  operator: 'equals' | 'contains' | 'starts_with' | 'ends_with' | 'greater_than' | 'less_than' | 'between';\n  value: string | number;\n  value2?: string | number; // For 'between' operator\n}\n\nexport interface RuleAction {\n  type: 'set_category' | 'set_subcategory' | 'add_tag' | 'set_merchant' | 'exclude_from_budget' | 'mark_as_transfer';\n  value: string | boolean;\n}\n\nexport interface TransactionSplit {\n  id: string;\n  transactionId: string;\n  amount: number;\n  category: TransactionCategory;\n  subcategory?: string;\n  description?: string;\n  tags?: string[];\n}\n\nexport interface TransferPair {\n  id: string;\n  familyId: string;\n  sourceTransactionId: string;\n  targetTransactionId: string;\n  amount: number;\n  confidence: number; // 0-1 confidence that this is a transfer\n  isConfirmed: boolean;\n  createdAt: Date;\n}\n\nexport interface TransactionImport {\n  id: string;\n  familyId: string;\n  filename: string;\n  format: 'csv' | 'ofx' | 'qfx' | 'qif';\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  totalTransactions: number;\n  importedTransactions: number;\n  errorTransactions: number;\n  duplicateTransactions: number;\n  mapping?: FieldMapping;\n  errors?: ImportError[];\n  createdAt: Date;\n  completedAt?: Date;\n}\n\nexport interface FieldMapping {\n  date: string;\n  amount: string;\n  description: string;\n  category?: string;\n  merchant?: string;\n  account?: string;\n}\n\nexport interface ImportError {\n  row: number;\n  field: string;\n  value: string;\n  error: string;\n}\n\nexport interface TransactionAnalytics {\n  period: 'day' | 'week' | 'month' | 'quarter' | 'year';\n  totalIncome: number;\n  totalExpenses: number;\n  netCashFlow: number;\n  categoryBreakdown: CategorySpending[];\n  merchantBreakdown: MerchantSpending[];\n  trends: SpendingTrend[];\n  insights: SpendingInsight[];\n}\n\nexport interface CategorySpending {\n  category: TransactionCategory;\n  amount: number;\n  percentage: number;\n  transactionCount: number;\n  averageAmount: number;\n  change: {\n    amount: number;\n    percentage: number;\n    direction: 'up' | 'down' | 'stable';\n  };\n}\n\nexport interface MerchantSpending {\n  merchant: string;\n  amount: number;\n  transactionCount: number;\n  category: TransactionCategory;\n  lastTransaction: Date;\n}\n\nexport interface SpendingTrend {\n  period: string;\n  amount: number;\n  change: number;\n  trend: 'increasing' | 'decreasing' | 'stable';\n}\n\nexport interface SpendingInsight {\n  type: 'high_spending' | 'unusual_merchant' | 'recurring_charge' | 'budget_alert' | 'savings_opportunity';\n  title: string;\n  description: string;\n  amount?: number;\n  category?: TransactionCategory;\n  merchant?: string;\n  confidence: number;\n  actionable: boolean;\n  action?: string;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/types/zustand.d.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/types/zustand.d.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare module \"zustand\" {\n  // Temporary ambient type until zustand is installed in node_modules during CI.\n  export function create<TState>(\n    initializer: (set: any, get: any) => TState\n  ): (<U = TState>(selector?: (state: TState) => U) => U) & {\n    getState: () => TState;\n    setState: (partial: Partial<TState> | ((state: TState) => Partial<TState>), replace?: boolean) => void;\n  };\n}\n\ndeclare module \"zustand/middleware\" {\n  export function persist<S>(\n    config: any,\n    options: { name: string }\n  ): any;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/AccountTypeBadge.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/AccountTypeBadge.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { \n  Banknote, \n  TrendingUp, \n  CreditCard, \n  TrendingDown,\n  Building\n} from 'lucide-react';\nimport { cn } from '@/shared/lib/utils';\n\ninterface AccountTypeBadgeProps {\n  accountType: string;\n  last4?: string;\n  className?: string;\n}\n\nconst getAccountIcon = (type: string) => {\n  switch (type) {\n    case 'Checking':\n      return <Banknote className=\"w-4 h-4\" />;\n    case 'Savings':\n      return <TrendingUp className=\"w-4 h-4\" />;\n    case 'Credit Card':\n      return <CreditCard className=\"w-4 h-4\" />;\n    case 'Investment':\n      return <TrendingDown className=\"w-4 h-4\" />;\n    default:\n      return <Building className=\"w-4 h-4\" />;\n  }\n};\n\nconst getAccountColor = (type: string) => {\n  switch (type) {\n    case 'Checking':\n      return 'bg-cyan-500/20 text-cyan-400 border-cyan-500/30';\n    case 'Savings':\n      return 'bg-green-500/20 text-green-400 border-green-500/30';\n    case 'Credit Card':\n      return 'bg-orange-500/20 text-orange-400 border-orange-500/30';\n    case 'Investment':\n      return 'bg-purple-500/20 text-purple-400 border-purple-500/30';\n    default:\n      return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n  }\n};\n\nexport const AccountTypeBadge: React.FC<AccountTypeBadgeProps> = ({\n  accountType,\n  last4,\n  className\n}) => {\n  return (\n    <span className={cn(\n      \"inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full text-sm font-medium border\",\n      getAccountColor(accountType),\n      className\n    )}>\n      {getAccountIcon(accountType)}\n      <span>{accountType}</span>\n      {last4 && <span>••{last4}</span>}\n    </span>\n  );\n};\n\nexport default AccountTypeBadge; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/BackHeader.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/BackHeader.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ArrowLeft } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\n\ninterface BackHeaderProps {\n  title: string;\n  className?: string;\n}\n\nconst BackHeader = ({ title, className = '' }: BackHeaderProps) => {\n  const navigate = useNavigate();\n  return (\n    <div className={`flex items-center gap-4 mb-6 ${className}`}>\n      <button\n        onClick={() => navigate('/')}\n        className=\"flex items-center space-x-2 text-white hover:text-blue-400 transition-colors rounded-full py-2 px-3 bg-white/5 backdrop-blur-md border border-white/10\"\n      >\n        <ArrowLeft className=\"w-4 h-4\" />\n        <span className=\"text-sm font-medium\">Back</span>\n      </button>\n      <h1 className=\"text-xl font-semibold text-white flex-1 text-center mr-8\">{title}</h1>\n    </div>\n  );\n};\n\nexport default BackHeader; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/CardShell.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/CardShell.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { FC, PropsWithChildren } from 'react';\nimport { cn } from '@/shared/lib/utils';\n\nexport interface CardShellProps extends PropsWithChildren {\n  accent: 'green' | 'yellow' | 'blue' | 'red' | 'purple';\n  className?: string;\n  onClick?: () => void;\n  hoverable?: boolean;\n}\n\n/**\n * Unified card component with glass morphism and gradient accents\n * Based on Eco Impact & Wellness Score card design\n */\nexport const CardShell: FC<CardShellProps> = ({ \n  accent, \n  children, \n  className,\n  onClick,\n  hoverable = false \n}) => {\n  // Base classes for glass morphism effect\n  const baseClasses = cn(\n    // Core glass effect\n    'relative overflow-hidden rounded-xl',\n    'bg-zinc-800/40 backdrop-blur',\n    'ring-1 ring-zinc-700/60',\n    'shadow-[inset_0_0_0_1px_rgba(255,255,255,.05)]',\n    \n    // Hover states\n    hoverable && 'transition-all duration-300',\n    hoverable && onClick && 'cursor-pointer',\n    hoverable && 'hover:scale-[1.02] hover:ring-zinc-600/60',\n    \n    // Custom classes\n    className\n  );\n\n  // Gradient overlay classes based on accent\n  const gradientClasses = {\n    green: 'gradient-green',\n    yellow: 'gradient-yellow',\n    blue: 'gradient-blue',\n    red: 'gradient-red',\n    purple: 'gradient-purple'\n  };\n\n  return (\n    <div \n      className={baseClasses}\n      onClick={onClick}\n      role={onClick ? 'button' : undefined}\n      tabIndex={onClick ? 0 : undefined}\n      onKeyDown={onClick ? (e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          onClick();\n        }\n      } : undefined}\n    >\n      {/* Gradient overlay */}\n      <div \n        className={cn(\n          'absolute inset-0 opacity-30 pointer-events-none',\n          gradientClasses[accent]\n        )} \n      />\n      \n      {/* Content */}\n      <div className=\"relative z-10\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\n// Re-export for convenience\nexport default CardShell; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/EnhancedGlassCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/EnhancedGlassCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport GlassCard from '@/components/GlassCard';\nimport LiquidGlass from './LiquidGlass';\n\ninterface EnhancedGlassCardProps {\n  children: React.ReactNode;\n  className?: string;\n  variant?: 'default' | 'elevated' | 'subtle';\n  shape?: 'rounded' | 'card' | 'capsule';\n  interactive?: boolean;\n  shimmer?: boolean;\n  style?: React.CSSProperties;\n  onClick?: () => void;\n  onMouseEnter?: () => void;\n  onMouseLeave?: () => void;\n  'aria-label'?: string;\n  role?: string;\n  \n  // Liquid Glass specific props\n  liquid?: boolean;\n  liquidIntensity?: number; // 0-1\n  liquidDistortion?: number; // 0-1\n  liquidAnimated?: boolean;\n  liquidInteractive?: boolean;\n  performanceMode?: boolean;\n}\n\nconst EnhancedGlassCard = ({\n  children,\n  className,\n  variant = 'default',\n  shape = 'card',\n  interactive = false,\n  shimmer = false,\n  style,\n  onClick,\n  onMouseEnter,\n  onMouseLeave,\n  'aria-label': ariaLabel,\n  role,\n  \n  // Liquid Glass props\n  liquid = false,\n  liquidIntensity = 0.6,\n  liquidDistortion = 0.4,\n  liquidAnimated = true,\n  liquidInteractive = true,\n  performanceMode = false\n}: EnhancedGlassCardProps) => {\n  \n  // Auto-detect performance constraints\n  const shouldEnableLiquid = React.useMemo(() => {\n    if (!liquid) return false;\n    if (performanceMode) return false;\n    \n    // Disable on mobile devices for better performance\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n      navigator.userAgent\n    );\n    \n    // Disable on low-end devices\n    const isLowEnd = navigator.hardwareConcurrency && navigator.hardwareConcurrency < 4;\n    \n    // Check for reduced motion preference\n    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n    \n    if (isMobile || isLowEnd) {\n      // On mobile/low-end, only enable with reduced settings\n      return {\n        enabled: true,\n        intensity: Math.min(liquidIntensity * 0.5, 0.3),\n        distortion: Math.min(liquidDistortion * 0.5, 0.2),\n        animated: false,\n        interactive: false\n      };\n    }\n    \n    return {\n      enabled: true,\n      intensity: liquidIntensity,\n      distortion: liquidDistortion,\n      animated: liquidAnimated && !prefersReducedMotion,\n      interactive: liquidInteractive\n    };\n  }, [liquid, liquidIntensity, liquidDistortion, liquidAnimated, liquidInteractive, performanceMode]);\n\n  // If liquid effects are disabled, use standard GlassCard\n  if (!shouldEnableLiquid || !shouldEnableLiquid.enabled) {\n    return (\n      <GlassCard\n        className={className}\n        variant={variant}\n        shape={shape}\n        interactive={interactive}\n        shimmer={shimmer}\n        style={style}\n        onClick={onClick}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        aria-label={ariaLabel}\n        role={role}\n      >\n        {children}\n      </GlassCard>\n    );\n  }\n\n  // Enhanced glass card with liquid effects\n  return (\n    <div className=\"relative\">\n      <GlassCard\n        className={cn(\n          'relative overflow-hidden',\n          className\n        )}\n        variant={variant}\n        shape={shape}\n        interactive={interactive}\n        shimmer={shimmer}\n        style={style}\n        onClick={onClick}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        aria-label={ariaLabel}\n        role={role}\n      >\n        <LiquidGlass\n          intensity={shouldEnableLiquid.intensity}\n          distortion={shouldEnableLiquid.distortion}\n          animated={shouldEnableLiquid.animated}\n          interactive={shouldEnableLiquid.interactive}\n          className=\"absolute inset-0\"\n        >\n          <div className=\"relative z-10\">\n            {children}\n          </div>\n        </LiquidGlass>\n      </GlassCard>\n    </div>\n  );\n};\n\nexport default EnhancedGlassCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/GlassSlider.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/GlassSlider.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as Slider from '@radix-ui/react-slider';\nimport React from 'react';\n\ninterface GlassSliderProps {\n  value: number;\n  min?: number;\n  max?: number;\n  step?: number;\n  onChange: (v:number)=>void;\n}\n\nconst GlassSlider: React.FC<GlassSliderProps> = ({value, min=0, max=100, step=1, onChange}) => (\n  <Slider.Root\n    className=\"relative flex items-center select-none touch-none w-full h-8\"\n    value={[value]}\n    min={min}\n    max={max}\n    step={step}\n    onValueChange={(v)=>onChange(v[0])}\n  >\n    <Slider.Track className=\"bg-white/10 relative grow rounded-full h-2\">\n      <Slider.Range className=\"absolute bg-gradient-to-r from-blue-400 to-purple-500 rounded-full h-full\" />\n    </Slider.Track>\n    <Slider.Thumb className=\"block w-6 h-6 bg-white/90 hover:bg-white shadow-lg rounded-full focus:outline-none focus:ring-2 focus:ring-blue-400/50 transition-transform active:scale-110\" />\n  </Slider.Root>\n);\n\nexport default GlassSlider; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/GlobalGradientBackground.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/GlobalGradientBackground.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nconst GlobalGradientBackground: React.FC = () => {\n  return (\n    <div \n      className=\"global-gradient-background\"\n      aria-hidden=\"true\"\n    />\n  );\n};\n\nexport default GlobalGradientBackground; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/LiquidGlass.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/LiquidGlass.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { cn } from '@/shared/lib/utils';\n\ninterface LiquidGlassProps {\n  children: React.ReactNode;\n  className?: string;\n  intensity?: number; // 0-1\n  distortion?: number; // 0-1\n  animated?: boolean;\n  interactive?: boolean;\n  fallbackToCSS?: boolean;\n}\n\nconst LiquidGlass = ({\n  children,\n  className,\n  intensity = 0.6,\n  distortion = 0.4,\n  animated = true,\n  interactive = true,\n  fallbackToCSS = true\n}: LiquidGlassProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [webGLSupported, setWebGLSupported] = useState<boolean | null>(null);\n  const [mousePos, setMousePos] = useState({ x: 0.5, y: 0.5 });\n  const animationRef = useRef<number>();\n  const glRef = useRef<WebGLRenderingContext | null>(null);\n  const programRef = useRef<WebGLProgram | null>(null);\n  const startTimeRef = useRef(Date.now());\n\n  // WebGL shaders for liquid distortion effect\n  const vertexShaderSource = `\n    attribute vec4 a_position;\n    attribute vec2 a_texCoord;\n    varying vec2 v_texCoord;\n    \n    void main() {\n      gl_Position = a_position;\n      v_texCoord = a_texCoord;\n    }\n  `;\n\n  const fragmentShaderSource = `\n    precision mediump float;\n    \n    uniform sampler2D u_texture;\n    uniform float u_time;\n    uniform vec2 u_mouse;\n    uniform float u_intensity;\n    uniform float u_distortion;\n    uniform vec2 u_resolution;\n    \n    varying vec2 v_texCoord;\n    \n    void main() {\n      vec2 uv = v_texCoord;\n      \n      // Create liquid distortion effect\n      float time = u_time * 0.001;\n      vec2 mouse = u_mouse;\n      \n      // Distance from mouse\n      float dist = distance(uv, mouse);\n      \n      // Liquid wave effect\n      float wave1 = sin(dist * 20.0 - time * 3.0) * 0.1;\n      float wave2 = cos(uv.x * 15.0 + time * 2.0) * 0.05;\n      float wave3 = sin(uv.y * 12.0 - time * 1.5) * 0.03;\n      \n      // Mouse interaction ripple\n      float ripple = smoothstep(0.3, 0.0, dist) * sin(dist * 30.0 - time * 5.0) * 0.2;\n      \n      // Combine distortions\n      vec2 distortionOffset = vec2(\n        (wave1 + wave2 + ripple) * u_distortion,\n        (wave1 + wave3 + ripple) * u_distortion\n      );\n      \n      // Apply distortion with intensity control\n      vec2 distortedUV = uv + distortionOffset * u_intensity;\n      \n      // Sample the texture with distorted coordinates\n      vec4 color = texture2D(u_texture, distortedUV);\n      \n      // Add subtle color shifting for liquid effect\n      float colorShift = sin(dist * 10.0 - time * 2.0) * 0.1 * u_intensity;\n      color.rgb += vec3(colorShift * 0.1, colorShift * 0.05, -colorShift * 0.1);\n      \n      gl_FragColor = color;\n    }\n  `;\n\n  // Check WebGL support\n  const checkWebGLSupport = useCallback(() => {\n    try {\n      const canvas = document.createElement('canvas');\n      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n      setWebGLSupported(!!gl);\n      return !!gl;\n    } catch (e) {\n      setWebGLSupported(false);\n      return false;\n    }\n  }, []);\n\n  // Create shader\n  const createShader = (gl: WebGLRenderingContext, type: number, source: string) => {\n    const shader = gl.createShader(type);\n    if (!shader) return null;\n    \n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    \n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      console.error('Shader compilation error:', gl.getShaderInfoLog(shader));\n      gl.deleteShader(shader);\n      return null;\n    }\n    \n    return shader;\n  };\n\n  // Create shader program\n  const createProgram = (gl: WebGLRenderingContext) => {\n    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    \n    if (!vertexShader || !fragmentShader) return null;\n    \n    const program = gl.createProgram();\n    if (!program) return null;\n    \n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    \n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      console.error('Program linking error:', gl.getProgramInfoLog(program));\n      gl.deleteProgram(program);\n      return null;\n    }\n    \n    return program;\n  };\n\n  // Initialize WebGL\n  const initWebGL = useCallback(() => {\n    if (!canvasRef.current || !webGLSupported) return;\n    \n    const gl = canvasRef.current.getContext('webgl') || canvasRef.current.getContext('experimental-webgl');\n    if (!gl) return;\n    \n    glRef.current = gl;\n    programRef.current = createProgram(gl);\n    \n    if (!programRef.current) return;\n    \n    // Set up geometry (full screen quad)\n    const positions = new Float32Array([\n      -1, -1,  1, -1,  -1, 1,\n      -1, 1,   1, -1,   1, 1,\n    ]);\n    \n    const texCoords = new Float32Array([\n      0, 0,  1, 0,  0, 1,\n      0, 1,  1, 0,  1, 1,\n    ]);\n    \n    // Position buffer\n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);\n    \n    // Texture coordinate buffer\n    const texCoordBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, texCoords, gl.STATIC_DRAW);\n    \n    // Set up attributes\n    const positionLocation = gl.getAttribLocation(programRef.current, 'a_position');\n    const texCoordLocation = gl.getAttribLocation(programRef.current, 'a_texCoord');\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.enableVertexAttribArray(positionLocation);\n    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.enableVertexAttribArray(texCoordLocation);\n    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n  }, [webGLSupported]);\n\n  // Animation loop\n  const animate = useCallback(() => {\n    if (!glRef.current || !programRef.current || !canvasRef.current) return;\n    \n    const gl = glRef.current;\n    const program = programRef.current;\n    \n    // Set viewport\n    gl.viewport(0, 0, canvasRef.current.width, canvasRef.current.height);\n    \n    // Use shader program\n    gl.useProgram(program);\n    \n    // Set uniforms\n    const timeLocation = gl.getUniformLocation(program, 'u_time');\n    const mouseLocation = gl.getUniformLocation(program, 'u_mouse');\n    const intensityLocation = gl.getUniformLocation(program, 'u_intensity');\n    const distortionLocation = gl.getUniformLocation(program, 'u_distortion');\n    const resolutionLocation = gl.getUniformLocation(program, 'u_resolution');\n    \n    if (timeLocation) gl.uniform1f(timeLocation, animated ? Date.now() - startTimeRef.current : 0);\n    if (mouseLocation) gl.uniform2f(mouseLocation, mousePos.x, mousePos.y);\n    if (intensityLocation) gl.uniform1f(intensityLocation, intensity);\n    if (distortionLocation) gl.uniform1f(distortionLocation, distortion);\n    if (resolutionLocation) gl.uniform2f(resolutionLocation, canvasRef.current.width, canvasRef.current.height);\n    \n    // Draw\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    \n    if (animated) {\n      animationRef.current = requestAnimationFrame(animate);\n    }\n  }, [mousePos, intensity, distortion, animated]);\n\n  // Handle mouse movement\n  const handleMouseMove = useCallback((event: React.MouseEvent) => {\n    if (!interactive || !containerRef.current) return;\n    \n    const rect = containerRef.current.getBoundingClientRect();\n    const x = (event.clientX - rect.left) / rect.width;\n    const y = 1 - (event.clientY - rect.top) / rect.height; // Flip Y coordinate\n    \n    setMousePos({ x, y });\n  }, [interactive]);\n\n  // Debounced mouse move for performance\n  const debouncedMouseMove = useCallback(\n    (() => {\n      let timeoutId: NodeJS.Timeout;\n      return (event: React.MouseEvent) => {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => handleMouseMove(event), 16); // ~60fps\n      };\n    })(),\n    [handleMouseMove]\n  );\n\n  // Resize canvas\n  const resizeCanvas = useCallback(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n    \n    const container = containerRef.current;\n    const canvas = canvasRef.current;\n    \n    canvas.width = container.offsetWidth;\n    canvas.height = container.offsetHeight;\n  }, []);\n\n  // Initialize\n  useEffect(() => {\n    checkWebGLSupport();\n  }, [checkWebGLSupport]);\n\n  useEffect(() => {\n    if (webGLSupported) {\n      initWebGL();\n      resizeCanvas();\n      \n      if (animated) {\n        animationRef.current = requestAnimationFrame(animate);\n      } else {\n        animate();\n      }\n    }\n    \n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [webGLSupported, initWebGL, animate, animated, resizeCanvas]);\n\n  // Handle resize\n  useEffect(() => {\n    const handleResize = () => resizeCanvas();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [resizeCanvas]);\n\n  // CSS fallback styles\n  const fallbackStyles = !webGLSupported && fallbackToCSS ? {\n    background: 'rgba(255, 255, 255, 0.08)',\n    backdropFilter: `blur(${20 + intensity * 10}px) saturate(${150 + intensity * 30}%)`,\n    WebkitBackdropFilter: `blur(${20 + intensity * 10}px) saturate(${150 + intensity * 30}%)`,\n    border: '1px solid rgba(255, 255, 255, 0.12)',\n    boxShadow: `\n      0 8px 32px rgba(0, 0, 0, 0.12),\n      inset 0 1px 0 rgba(255, 255, 255, 0.15)\n    `,\n    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n  } : {};\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        'relative overflow-hidden',\n        !webGLSupported && fallbackToCSS && 'liquid-glass-fallback',\n        className\n      )}\n      style={fallbackStyles}\n      onMouseMove={interactive ? debouncedMouseMove : undefined}\n    >\n      {webGLSupported && (\n        <canvas\n          ref={canvasRef}\n          className=\"absolute inset-0 w-full h-full pointer-events-none\"\n          style={{ mixBlendMode: 'overlay' }}\n        />\n      )}\n      \n      <div className=\"relative z-10\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default LiquidGlass; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/LiquidGlassSVGFilters.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/LiquidGlassSVGFilters.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * SVG Filters for Modern Glass Effects\n * Provides subtle, realistic glass effects without aggressive distortion\n */\nexport const LiquidGlassSVGFilters: React.FC = () => {\n  return (\n    <svg \n      className=\"liquid-glass-svg-filters\" \n      style={{ position: 'absolute', width: 0, height: 0, pointerEvents: 'none' }}\n      aria-hidden=\"true\"\n    >\n      <defs>\n        {/* Primary Glass Effect - Subtle lighting only */}\n        <filter\n          id=\"glass-distortion-primary\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"0.5\" result=\"blur\" />\n          <feSpecularLighting\n            in=\"blur\"\n            surfaceScale=\"1\"\n            specularConstant=\"0.3\"\n            specularExponent=\"20\"\n            lightingColor=\"rgba(255,255,255,0.1)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-50\" y=\"-50\" z=\"100\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.2\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Hover State - Slightly enhanced lighting */}\n        <filter\n          id=\"glass-distortion-hover\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"0.3\" result=\"blur\" />\n          <feSpecularLighting\n            in=\"blur\"\n            surfaceScale=\"1.2\"\n            specularConstant=\"0.4\"\n            specularExponent=\"25\"\n            lightingColor=\"rgba(255,255,255,0.15)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-40\" y=\"-40\" z=\"120\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.3\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Navigation - Minimal effect */}\n        <filter\n          id=\"glass-distortion-nav\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.5\"\n            specularConstant=\"0.2\"\n            specularExponent=\"15\"\n            lightingColor=\"rgba(255,255,255,0.08)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-100\" y=\"-100\" z=\"80\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.15\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Navigation Hover */}\n        <filter\n          id=\"glass-distortion-nav-hover\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.8\"\n            specularConstant=\"0.3\"\n            specularExponent=\"20\"\n            lightingColor=\"rgba(255,255,255,0.12)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-80\" y=\"-80\" z=\"100\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.2\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Button - Clean glass effect */}\n        <filter\n          id=\"glass-distortion-button\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.8\"\n            specularConstant=\"0.25\"\n            specularExponent=\"18\"\n            lightingColor=\"rgba(255,255,255,0.1)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-60\" y=\"-60\" z=\"90\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.18\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Button Hover */}\n        <filter\n          id=\"glass-distortion-button-hover\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"1\"\n            specularConstant=\"0.35\"\n            specularExponent=\"22\"\n            lightingColor=\"rgba(255,255,255,0.15)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-50\" y=\"-50\" z=\"110\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.25\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Card - Subtle glass effect */}\n        <filter\n          id=\"glass-distortion-card\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.6\"\n            specularConstant=\"0.2\"\n            specularExponent=\"16\"\n            lightingColor=\"rgba(255,255,255,0.08)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-70\" y=\"-70\" z=\"85\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.12\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Card Hover */}\n        <filter\n          id=\"glass-distortion-card-hover\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.9\"\n            specularConstant=\"0.3\"\n            specularExponent=\"20\"\n            lightingColor=\"rgba(255,255,255,0.12)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-60\" y=\"-60\" z=\"100\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.18\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Menu Item - Very subtle */}\n        <filter\n          id=\"glass-distortion-menu\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.4\"\n            specularConstant=\"0.15\"\n            specularExponent=\"12\"\n            lightingColor=\"rgba(255,255,255,0.06)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-80\" y=\"-80\" z=\"70\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.1\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Menu Item Hover */}\n        <filter\n          id=\"glass-distortion-menu-hover\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.6\"\n            specularConstant=\"0.2\"\n            specularExponent=\"15\"\n            lightingColor=\"rgba(255,255,255,0.08)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-70\" y=\"-70\" z=\"80\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.12\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Menu Item Active */}\n        <filter\n          id=\"glass-distortion-menu-active\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.8\"\n            specularConstant=\"0.25\"\n            specularExponent=\"18\"\n            lightingColor=\"rgba(99,102,241,0.1)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-60\" y=\"-60\" z=\"90\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.15\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* FAB - Enhanced but clean */}\n        <filter\n          id=\"glass-distortion-fab\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"1\"\n            specularConstant=\"0.3\"\n            specularExponent=\"20\"\n            lightingColor=\"rgba(99,102,241,0.12)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-50\" y=\"-50\" z=\"100\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.2\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* FAB Hover */}\n        <filter\n          id=\"glass-distortion-fab-hover\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"1.2\"\n            specularConstant=\"0.4\"\n            specularExponent=\"25\"\n            lightingColor=\"rgba(99,102,241,0.15)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-40\" y=\"-40\" z=\"120\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.25\"\n            k4=\"0\"\n          />\n        </filter>\n\n        {/* Animated Flow Filters - Very subtle movement */}\n        <filter\n          id=\"glass-distortion-flow-1\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.8\"\n            specularConstant=\"0.25\"\n            specularExponent=\"18\"\n            lightingColor=\"rgba(255,255,255,0.08)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-55\" y=\"-45\" z=\"95\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.15\"\n            k4=\"0\"\n          />\n        </filter>\n\n        <filter\n          id=\"glass-distortion-flow-2\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.9\"\n            specularConstant=\"0.3\"\n            specularExponent=\"20\"\n            lightingColor=\"rgba(255,255,255,0.1)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-45\" y=\"-55\" z=\"105\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.18\"\n            k4=\"0\"\n          />\n        </filter>\n\n        <filter\n          id=\"glass-distortion-flow-3\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          filterUnits=\"objectBoundingBox\"\n        >\n          <feSpecularLighting\n            in=\"SourceGraphic\"\n            surfaceScale=\"0.7\"\n            specularConstant=\"0.2\"\n            specularExponent=\"16\"\n            lightingColor=\"rgba(255,255,255,0.06)\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-65\" y=\"-35\" z=\"85\" />\n          </feSpecularLighting>\n          <feComposite\n            in=\"SourceGraphic\"\n            in2=\"specLight\"\n            operator=\"arithmetic\"\n            k1=\"0\"\n            k2=\"1\"\n            k3=\"0.12\"\n            k4=\"0\"\n          />\n        </filter>\n      </defs>\n    </svg>\n  );\n};\n\nexport default LiquidGlassSVGFilters; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/NavPill.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/NavPill.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport type { LucideIcon } from 'lucide-react';\n\ninterface NavPillProps {\n  /** Visible text label */\n  label: string;\n  /** Optional lucide-react icon component */\n  icon?: LucideIcon;\n  /** Whether this pill represents the currently active route */\n  active?: boolean;\n  /** Disabled state */\n  disabled?: boolean;\n  /** Called when the pill is selected – keyboard or mouse */\n  onSelect?: () => void;\n  /** Additional className overrides */\n  className?: string;\n}\n\n/**\n * Accessible, keyboard-navigable navigation pill.\n * Provides unified styling & behaviour for tabs / buttons across the app.\n */\nexport const NavPill: React.FC<NavPillProps> = ({\n  label,\n  icon: Icon,\n  active = false,\n  disabled = false,\n  onSelect,\n  className\n}) => {\n  return (\n    <button\n      type=\"button\"\n      aria-label={label}\n      aria-current={active ? 'page' : undefined}\n      disabled={disabled}\n      onClick={!disabled ? onSelect : undefined}\n      onKeyDown={(e) => {\n        if (!disabled && (e.key === 'Enter' || e.key === ' ')) {\n          e.preventDefault();\n          onSelect?.();\n        }\n      }}\n      className={cn(\n        'flex items-center justify-center gap-2 px-4 py-2 rounded-xl text-sm transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-400/50',\n        active && 'bg-blue-500 text-white shadow',\n        !active && 'text-white/70 hover:text-white hover:bg-white/10',\n        disabled && 'opacity-50 cursor-not-allowed',\n        className\n      )}\n    >\n      {Icon && <Icon className=\"w-4 h-4\" aria-hidden=\"true\" />}\n      <span>{label}</span>\n    </button>\n  );\n};\n\nNavPill.displayName = 'NavPill';\n\nexport default NavPill; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/SimpleGlassCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/SimpleGlassCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Legacy SimpleGlassCard - Redirected to UnifiedCard for optimization\n// This maintains backward compatibility while using the optimized system\n\nimport React from 'react';\nimport { UnifiedCard } from './UnifiedCard';\nimport { cn } from '@/shared/lib/utils';\n\nexport interface SimpleGlassCardProps {\n  children: React.ReactNode;\n  className?: string;\n  variant?: 'default' | 'elevated' | 'subtle' | 'accent';\n  interactive?: boolean;\n  onClick?: () => void;\n}\n\nconst SimpleGlassCard: React.FC<SimpleGlassCardProps> = ({ \n  children, \n  className, \n  variant = 'default',\n  interactive = false,\n  onClick \n}) => {\n  // Map SimpleGlassCard variants to UnifiedCard system\n  const unifiedVariant = variant === 'accent' ? 'financial' : 'default';\n  const unifiedSize = variant === 'elevated' ? 'xl' : variant === 'subtle' ? 'sm' : 'lg';\n  \n  return (\n    <UnifiedCard\n      variant={unifiedVariant}\n      size={unifiedSize}\n      interactive={interactive}\n      onClick={onClick}\n      className={cn(\n        // Additional styling to match SimpleGlassCard behavior\n        variant === 'accent' && 'bg-blue-500/[0.08] border-blue-400/[0.12]',\n        className\n      )}\n    >\n      {children}\n    </UnifiedCard>\n  );\n};\n\nexport default SimpleGlassCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/UnifiedCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/UnifiedCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ReactNode } from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport { LucideIcon, TrendingUp, TrendingDown, Minus, ArrowUp, ArrowDown } from 'lucide-react';\nimport { unifiedCardTokens, getCardClasses } from '@/theme/unified-card-tokens';\n\n// UnifiedCard Component - Matches Financial Dashboard cards exactly\n// Consolidates all 26+ card variants into one consistent design\n\ninterface UnifiedCardProps {\n  // Core props\n  title?: string;\n  subtitle?: string;\n  metric?: ReactNode;\n  delta?: {\n    value: number | string;\n    format?: 'currency' | 'percentage' | 'number';\n    label?: string; // e.g. \"vs last month\"\n  };\n  \n  // Icon & Visual\n  icon?: LucideIcon | ReactNode;\n  iconColor?: string;\n  trendDirection?: 'up' | 'down' | 'flat';\n  \n  // Layout & Styling\n  variant?: 'default' | 'eco' | 'wellness' | 'financial';\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  className?: string;\n  interactive?: boolean;\n  onClick?: () => void;\n  \n  // Extended content\n  children?: ReactNode;\n  \n  // Special features (for specific card types)\n  progress?: {\n    value: number;\n    max: number;\n    color?: string;\n    showLabel?: boolean;\n  };\n  \n  badge?: {\n    text: string;\n    variant: 'success' | 'warning' | 'error' | 'info';\n  };\n}\n\nexport const UnifiedCard = React.memo<UnifiedCardProps>(({\n  title,\n  subtitle,\n  metric,\n  delta,\n  icon,\n  iconColor,\n  trendDirection,\n  variant = 'default',\n  size = 'lg',\n  className,\n  interactive = false,\n  onClick,\n  children,\n  progress,\n  badge,\n}) => {\n  // Determine trend icon and color\n  const getTrendIcon = () => {\n    if (!trendDirection && !delta) return null;\n    \n    const direction = trendDirection || (delta && typeof delta.value === 'number' \n      ? (delta.value > 0 ? 'up' : delta.value < 0 ? 'down' : 'flat')\n      : 'flat');\n    \n    switch (direction) {\n      case 'up':\n        return <ArrowUp className=\"w-4 h-4 text-green-400\" />;\n      case 'down':\n        return <ArrowDown className=\"w-4 h-4 text-red-400\" />;\n      default:\n        return <Minus className=\"w-4 h-4 text-gray-400\" />;\n    }\n  };\n  \n  const getTrendColor = () => {\n    if (!trendDirection && !delta) return unifiedCardTokens.trend.flat;\n    \n    const direction = trendDirection || (delta && typeof delta.value === 'number' \n      ? (delta.value > 0 ? 'up' : delta.value < 0 ? 'down' : 'flat')\n      : 'flat');\n    \n    return unifiedCardTokens.trend[direction];\n  };\n  \n  const formatDelta = () => {\n    if (!delta) return null;\n    \n    const { value, format = 'number' } = delta;\n    \n    switch (format) {\n      case 'currency':\n        return new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD',\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0,\n        }).format(typeof value === 'number' ? value : parseFloat(value));\n      \n      case 'percentage':\n        return `${typeof value === 'number' && value >= 0 ? '+' : ''}${value}%`;\n      \n      default:\n        return `${typeof value === 'number' && value >= 0 ? '+' : ''}${value}`;\n    }\n  };\n  \n  const renderIcon = () => {\n    if (!icon) return null;\n    \n    // Check if it's a Lucide icon component (function)\n    if (typeof icon === 'function') {\n      const IconComponent = icon as LucideIcon;\n      return <IconComponent className={unifiedCardTokens.iconChip.icon} />;\n    }\n    \n    // Handle string icons (emojis)\n    if (typeof icon === 'string') {\n      return <span className=\"text-lg\">{icon}</span>;\n    }\n    \n    // Handle React elements\n    if (React.isValidElement(icon)) {\n      return icon;\n    }\n    \n    // Fallback for anything else\n    return <span className=\"text-sm\">{String(icon)}</span>;\n  };\n  \n  return (\n    <div\n      className={cn(\n        getCardClasses(variant, size, interactive),\n        className\n      )}\n      onClick={interactive ? onClick : undefined}\n    >\n      {/* Header Section */}\n      {(icon || title || getTrendIcon() || badge) && (\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-3\">\n            {icon && (\n              <div \n                className={unifiedCardTokens.iconChip.container}\n                style={{ color: iconColor }}\n              >\n                {renderIcon()}\n              </div>\n            )}\n            <div>\n              {title && (\n                <h3 className={unifiedCardTokens.text.title}>{title}</h3>\n              )}\n              {subtitle && (\n                <p className={unifiedCardTokens.text.subtitle}>{subtitle}</p>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {getTrendIcon()}\n            {badge && (\n              <span className={cn(\n                \"px-2 py-1 rounded-full text-xs font-medium\",\n                {\n                  'bg-green-500/20 text-green-400 border border-green-500/30': badge.variant === 'success',\n                  'bg-yellow-500/20 text-yellow-400 border border-yellow-500/30': badge.variant === 'warning',\n                  'bg-red-500/20 text-red-400 border border-red-500/30': badge.variant === 'error',\n                  'bg-blue-500/20 text-blue-400 border border-blue-500/30': badge.variant === 'info'\n                }\n              )}>\n                {badge.text}\n              </span>\n            )}\n          </div>\n        </div>\n      )}\n      \n      {/* Metric Section */}\n      {(metric || delta) && (\n        <div className=\"space-y-2\">\n          {metric && (\n            <p className={unifiedCardTokens.text.metric}>\n              {metric}\n            </p>\n          )}\n          \n          {delta && (\n            <div className={cn(\"flex items-center gap-2\", unifiedCardTokens.text.delta)}>\n              <span className={getTrendColor()}>\n                {formatDelta()}\n              </span>\n              {delta.label && (\n                <span className={unifiedCardTokens.text.label}>\n                  {delta.label}\n                </span>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Progress Bar (optional) */}\n      {progress && (\n        <div className=\"mt-4\">\n          <div className=\"flex justify-between text-sm mb-1\">\n            <span className=\"text-white/60\">Progress</span>\n            {progress.showLabel && (\n              <span className=\"text-white/80\">\n                {((progress.value / progress.max) * 100).toFixed(0)}%\n              </span>\n            )}\n          </div>\n          <div className=\"relative h-2 bg-white/[0.05] rounded-full overflow-hidden\">\n            <div\n              className=\"absolute top-0 left-0 h-full rounded-full transition-all duration-1000 ease-out\"\n              style={{\n                width: `${Math.min(100, (progress.value / progress.max) * 100)}%`,\n                backgroundColor: progress.color || '#3b82f6'\n              }}\n            />\n          </div>\n        </div>\n      )}\n      \n      {/* Custom Children */}\n      {children && (\n        <div className={metric || delta || progress ? \"mt-4\" : \"\"}>\n          {children}\n        </div>\n      )}\n    </div>\n  );\n});\n\nUnifiedCard.displayName = 'UnifiedCard';\n\n// Keep UniversalCard as an alias for backwards compatibility during migration\nexport const UniversalCard = UnifiedCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/UniversalCard.original.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/UniversalCard.original.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport { LucideIcon } from 'lucide-react';\nimport { formatFinancialScore } from '@/shared/utils/formatters';\n\n// Universal Card Component - Consolidates:\n// - GlassCard.tsx\n// - SimpleGlassCard.tsx  \n// - EnhancedGlassCard.tsx\n// - LiquidGlass.tsx\n// - ComprehensiveEcoCard.tsx (554 lines)\n// - ComprehensiveWellnessCard.tsx (529 lines)\n// Total consolidation: ~1,200 lines → ~150 lines (88% reduction)\n\ninterface UniversalCardProps {\n  variant?: 'glass' | 'solid' | 'eco' | 'wellness' | 'financial' | 'minimal';\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  blur?: 'light' | 'medium' | 'heavy';\n  className?: string;\n  children?: React.ReactNode;\n  \n  // Data props for insight cards\n  title?: string;\n  value?: string | number;\n  icon?: LucideIcon;\n  iconColor?: string;\n  score?: number;\n  trend?: 'up' | 'down' | 'stable';\n  trendValue?: string;\n  \n  // Layout props\n  orientation?: 'horizontal' | 'vertical';\n  showBackground?: boolean;\n  interactive?: boolean;\n  onClick?: () => void;\n  \n  // Advanced props for comprehensive cards\n  data?: {\n    metrics?: Array<{\n      label: string;\n      value: string | number;\n      icon?: LucideIcon;\n      color?: string;\n    }>;\n    trends?: Array<{\n      label: string;\n      trend: 'up' | 'down' | 'stable';\n      value?: string;\n    }>;\n    spending?: Array<{\n      category: string;\n      amount: number;\n      color?: string;\n    }>;\n  };\n}\n\nexport const UniversalCard = React.memo<UniversalCardProps>(({\n  variant = 'glass',\n  size = 'md',\n  blur = 'medium',\n  className,\n  children,\n  title,\n  value,\n  icon: Icon,\n  iconColor = '#6366f1',\n  score,\n  trend,\n  trendValue,\n  orientation = 'vertical',\n  showBackground = true,\n  interactive = false,\n  onClick,\n  data,\n  ...props\n}) => {\n  const baseClasses = cn(\n    'relative overflow-hidden transition-all duration-300',\n    {\n      // Variants\n      'bg-white/10 backdrop-blur-md border border-white/20': variant === 'glass',\n      'bg-black/80 border border-white/10': variant === 'solid',\n      'bg-gradient-to-br from-green-500/10 to-emerald-600/10 border border-green-500/20': variant === 'eco',\n      'bg-gradient-to-br from-blue-500/10 to-cyan-600/10 border border-blue-500/20': variant === 'wellness',\n      'bg-gradient-to-br from-purple-500/10 to-indigo-600/10 border border-purple-500/20': variant === 'financial',\n      'bg-transparent border border-white/5': variant === 'minimal',\n      \n      // Sizes\n      'p-3 rounded-lg text-sm': size === 'sm',\n      'p-4 rounded-xl text-base': size === 'md',\n      'p-6 rounded-2xl text-lg': size === 'lg',\n      'p-8 rounded-3xl text-xl': size === 'xl',\n      \n      // Interactive\n      'cursor-pointer hover:scale-[1.02] hover:bg-white/15': interactive,\n      \n      // Orientation\n      'flex flex-col': orientation === 'vertical',\n      'flex flex-row items-center': orientation === 'horizontal',\n    },\n    className\n  );\n\n  const renderScore = () => {\n    if (typeof score !== 'number') return null;\n    \n    const scoreColor = score >= 80 ? '#10b981' : score >= 60 ? '#f59e0b' : '#ef4444';\n    \n    const displayScore = formatFinancialScore(score);\n    \n    return (\n      <div className=\"flex flex-col items-center\">\n        <div className=\"relative w-20 h-20\">\n          <svg className=\"w-full h-full transform -rotate-90\" viewBox=\"0 0 100 100\">\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r=\"40\"\n              stroke=\"currentColor\"\n              strokeWidth=\"8\"\n              fill=\"none\"\n              className=\"text-white/10\"\n            />\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r=\"40\"\n              stroke={scoreColor}\n              strokeWidth=\"8\"\n              fill=\"none\"\n              strokeDasharray={`${2 * Math.PI * 40}`}\n              strokeDashoffset={`${2 * Math.PI * 40 * (1 - score / 100)}`}\n              className=\"transition-all duration-1000 ease-out\"\n            />\n          </svg>\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n            <span className=\"text-2xl font-bold text-white\">{displayScore}</span>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderMetrics = () => {\n    if (!data?.metrics) return null;\n    \n    return (\n      <div className=\"grid grid-cols-2 gap-3\">\n        {data.metrics.map((metric, index) => (\n          <div key={index} className=\"bg-white/5 rounded-lg p-3\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              {metric.icon && (\n                <metric.icon \n                  className=\"w-3 h-3\" \n                  style={{ color: metric.color }} \n                />\n              )}\n              <span className=\"text-xs text-white/60\">{metric.label}</span>\n            </div>\n            <div className=\"text-sm font-semibold text-white\">\n              {metric.value}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderTrends = () => {\n    if (!data?.trends) return null;\n    \n    return (\n      <div className=\"grid grid-cols-2 gap-2\">\n        {data.trends.map((trend, index) => (\n          <div key={index} className=\"flex items-center justify-between p-2 rounded-lg bg-white/5\">\n            <span className=\"text-xs text-white/70\">{trend.label}</span>\n            <div className=\"flex items-center space-x-1\">\n              <span \n                className=\"text-sm font-bold\"\n                style={{ \n                  color: trend.trend === 'up' ? '#10b981' : \n                         trend.trend === 'down' ? '#ef4444' : '#6b7280'\n                }}\n              >\n                {trend.trend === 'up' ? '↗' : trend.trend === 'down' ? '↘' : '—'}\n              </span>\n              {trend.value && (\n                <span className=\"text-xs text-white/60\">{trend.value}</span>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderSpending = () => {\n    if (!data?.spending) return null;\n    \n    return (\n      <div className=\"space-y-2\">\n        {data.spending.map((item, index) => (\n          <div key={index} className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-white/70\">{item.category}</span>\n            <span className=\"text-sm font-semibold text-white\">\n              ${item.amount.toLocaleString()}\n            </span>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div \n      className={baseClasses} \n      onClick={onClick}\n      {...props}\n    >\n      {showBackground && variant === 'glass' && (\n        <div className=\"absolute inset-0 bg-gradient-to-br from-white/5 to-white/0 pointer-events-none\" />\n      )}\n      \n      <div className=\"relative z-10 h-full\">\n        {/* Header */}\n        {(title || Icon) && (\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-3\">\n              {Icon && (\n                <Icon \n                  className=\"w-5 h-5\" \n                  style={{ color: iconColor }} \n                />\n              )}\n              {title && (\n                <h3 className=\"font-semibold text-white\">{title}</h3>\n              )}\n            </div>\n            {trend && (\n              <div className=\"flex items-center space-x-1\">\n                <span \n                  className=\"text-sm font-bold\"\n                  style={{ \n                    color: trend === 'up' ? '#10b981' : \n                           trend === 'down' ? '#ef4444' : '#6b7280'\n                  }}\n                >\n                  {trend === 'up' ? '↗' : trend === 'down' ? '↘' : '—'}\n                </span>\n                {trendValue && (\n                  <span className=\"text-sm text-white/60\">{trendValue}</span>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Score Circle */}\n        {typeof score === 'number' && renderScore()}\n\n        {/* Value Display */}\n        {value && (\n          <div className=\"text-center mb-4\">\n            <div className=\"text-2xl font-bold text-white\">{value}</div>\n          </div>\n        )}\n\n        {/* Metrics Grid */}\n        {data?.metrics && (\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-white mb-2\">Metrics</h4>\n            {renderMetrics()}\n          </div>\n        )}\n\n        {/* Trends Grid */}\n        {data?.trends && (\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-white mb-2\">Trends</h4>\n            {renderTrends()}\n          </div>\n        )}\n\n        {/* Spending List */}\n        {data?.spending && (\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-white mb-2\">Spending</h4>\n            {renderSpending()}\n          </div>\n        )}\n\n        {/* Custom Children */}\n        {children}\n      </div>\n    </div>\n  );\n});\n\nUniversalCard.displayName = 'UniversalCard';\n\nexport default UniversalCard;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/UniversalCard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/UniversalCard.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport { LucideIcon } from 'lucide-react';\nimport { formatFinancialScore } from '@/shared/utils/formatters';\nimport { vueniTheme } from '@/theme/unified';\n\n// Universal Card Component - Consolidates:\n// - GlassCard.tsx\n// - SimpleGlassCard.tsx  \n// - EnhancedGlassCard.tsx\n// - LiquidGlass.tsx\n// - ComprehensiveEcoCard.tsx (554 lines)\n// - ComprehensiveWellnessCard.tsx (529 lines)\n// Total consolidation: ~1,200 lines → ~150 lines (88% reduction)\n\ninterface UniversalCardProps {\n  variant?: 'glass' | 'solid' | 'eco' | 'wellness' | 'financial' | 'minimal';\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  blur?: 'light' | 'medium' | 'heavy';\n  className?: string;\n  children?: React.ReactNode;\n  \n  // Data props for insight cards\n  title?: string;\n  value?: string | number;\n  icon?: LucideIcon;\n  iconColor?: string;\n  score?: number;\n  trend?: 'up' | 'down' | 'stable';\n  trendValue?: string;\n  \n  // Layout props\n  orientation?: 'horizontal' | 'vertical';\n  showBackground?: boolean;\n  interactive?: boolean;\n  onClick?: () => void;\n  \n  // Advanced props for comprehensive cards\n  data?: {\n    metrics?: Array<{\n      label: string;\n      value: string | number;\n      icon?: LucideIcon;\n      color?: string;\n    }>;\n    trends?: Array<{\n      label: string;\n      trend: 'up' | 'down' | 'stable';\n      value?: string;\n    }>;\n    spending?: Array<{\n      category: string;\n      amount: number;\n      color?: string;\n    }>;\n  };\n}\n\nexport const UniversalCard = React.memo<UniversalCardProps>(({\n  variant = 'glass',\n  size = 'md',\n  blur = 'medium',\n  className,\n  children,\n  title,\n  value,\n  icon: Icon,\n  iconColor = '#6366f1',\n  score,\n  trend,\n  trendValue,\n  orientation = 'vertical',\n  showBackground = true,\n  interactive = false,\n  onClick,\n  data,\n  ...props\n}) => {\n  const baseClasses = cn(\n    'relative overflow-hidden transition-all duration-300',\n    {\n      // Variants - Updated to use unified design tokens\n      'bg-white/[0.02] backdrop-blur-md border border-white/[0.08] hover:bg-white/[0.03]': variant === 'glass',\n      'bg-black/80 border border-white/[0.08]': variant === 'solid',\n      'bg-gradient-to-br from-green-500/10 to-emerald-600/10 border border-green-500/20 bg-white/[0.02]': variant === 'eco',\n      'bg-gradient-to-br from-blue-500/10 to-cyan-600/10 border border-blue-500/20 bg-white/[0.02]': variant === 'wellness',\n      'bg-gradient-to-br from-purple-500/10 to-indigo-600/10 border border-purple-500/20 bg-white/[0.02]': variant === 'financial',\n      'bg-white/[0.02] border border-white/[0.05]': variant === 'minimal',\n      \n      // Sizes\n      'p-3 rounded-lg text-sm': size === 'sm',\n      'p-4 rounded-xl text-base': size === 'md',\n      'p-6 rounded-2xl text-lg': size === 'lg',\n      'p-8 rounded-3xl text-xl': size === 'xl',\n      \n      // Interactive\n      'cursor-pointer hover:scale-[1.02]': interactive,\n      \n      // Orientation\n      'flex flex-col': orientation === 'vertical',\n      'flex flex-row items-center': orientation === 'horizontal',\n    },\n    className\n  );\n\n  const renderScore = () => {\n    if (typeof score !== 'number') return null;\n    \n    const scoreColor = score >= 80 ? vueniTheme.colors.palette.success : score >= 60 ? vueniTheme.colors.palette.warning : vueniTheme.colors.palette.danger;\n    \n    const displayScore = formatFinancialScore(score);\n    \n    return (\n      <div className=\"flex flex-col items-center\">\n        <div className=\"relative w-20 h-20\">\n          <svg className=\"w-full h-full transform -rotate-90\" viewBox=\"0 0 100 100\">\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r=\"40\"\n              stroke=\"currentColor\"\n              strokeWidth=\"8\"\n              fill=\"none\"\n              className=\"text-white/[0.05]\"\n            />\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r=\"40\"\n              stroke={scoreColor}\n              strokeWidth=\"8\"\n              fill=\"none\"\n              strokeDasharray={`${2 * Math.PI * 40}`}\n              strokeDashoffset={`${2 * Math.PI * 40 * (1 - score / 100)}`}\n              className=\"transition-all duration-1000 ease-out\"\n            />\n          </svg>\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n            <span className=\"text-2xl font-bold text-white\">{displayScore}</span>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderMetrics = () => {\n    if (!data?.metrics) return null;\n    \n    return (\n      <div className=\"grid grid-cols-2 gap-3\">\n        {data.metrics.map((metric, index) => (\n          <div key={index} className=\"bg-white/[0.03] border border-white/[0.05] rounded-lg p-3 hover:bg-white/[0.05] transition-all\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              {metric.icon && (\n                <metric.icon \n                  className=\"w-3 h-3\" \n                  style={{ color: metric.color }} \n                />\n              )}\n              <span className=\"text-xs text-white/60\">{metric.label}</span>\n            </div>\n            <div className=\"text-sm font-semibold text-white\">\n              {metric.value}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderTrends = () => {\n    if (!data?.trends) return null;\n    \n    return (\n      <div className=\"grid grid-cols-2 gap-2\">\n        {data.trends.map((trend, index) => (\n          <div key={index} className=\"flex items-center justify-between p-2 rounded-lg bg-white/[0.03] border border-white/[0.05]\">\n            <span className=\"text-xs text-white/70\">{trend.label}</span>\n            <div className=\"flex items-center space-x-1\">\n              <span \n                className=\"text-sm font-bold\"\n                style={{ \n                  color: trend.trend === 'up' ? vueniTheme.colors.palette.success : \n                         trend.trend === 'down' ? vueniTheme.colors.palette.danger : vueniTheme.colors.palette.neutral\n                }}\n              >\n                {trend.trend === 'up' ? '↗' : trend.trend === 'down' ? '↘' : '—'}\n              </span>\n              {trend.value && (\n                <span className=\"text-xs text-white/60\">{trend.value}</span>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderSpending = () => {\n    if (!data?.spending) return null;\n    \n    return (\n      <div className=\"space-y-2\">\n        {data.spending.map((item, index) => (\n          <div key={index} className=\"flex items-center justify-between p-2 rounded-lg bg-white/[0.03] border border-white/[0.05]\">\n            <span className=\"text-sm text-white/70 capitalize\">{item.category}</span>\n            <span className=\"text-sm font-semibold text-white\">\n              ${item.amount.toLocaleString()}\n            </span>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div \n      className={baseClasses} \n      onClick={onClick}\n      {...props}\n    >\n      {showBackground && variant === 'glass' && (\n        <div className=\"absolute inset-0 bg-gradient-to-br from-white/[0.02] to-white/0 pointer-events-none\" />\n      )}\n      \n      <div className=\"relative z-10 h-full\">\n        {/* Header */}\n        {(title || Icon) && (\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-3\">\n              {Icon && (\n                <div className=\"w-10 h-10 rounded-xl bg-white/[0.05] flex items-center justify-center\">\n                  <Icon \n                    className=\"w-5 h-5\" \n                    style={{ color: iconColor }} \n                  />\n                </div>\n              )}\n              {title && (\n                <h3 className=\"font-medium text-white/80\">{title}</h3>\n              )}\n            </div>\n            {trend && (\n              <div className=\"flex items-center space-x-1\">\n                <span \n                  className=\"text-sm font-bold\"\n                  style={{ \n                    color: trend === 'up' ? vueniTheme.colors.palette.success : \n                           trend === 'down' ? vueniTheme.colors.palette.danger : vueniTheme.colors.palette.neutral\n                  }}\n                >\n                  {trend === 'up' ? '↗' : trend === 'down' ? '↘' : '—'}\n                </span>\n                {trendValue && (\n                  <span className=\"text-sm text-white/60\">{trendValue}</span>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Score Circle */}\n        {typeof score === 'number' && renderScore()}\n\n        {/* Value Display */}\n        {value && (\n          <div className=\"text-center mb-4\">\n            <div className=\"text-2xl font-bold text-white\">{value}</div>\n          </div>\n        )}\n\n        {/* Metrics Grid */}\n        {data?.metrics && (\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-white/80 mb-3\">Metrics</h4>\n            {renderMetrics()}\n          </div>\n        )}\n\n        {/* Trends Grid */}\n        {data?.trends && (\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-white/80 mb-3\">Trends</h4>\n            {renderTrends()}\n          </div>\n        )}\n\n        {/* Spending List */}\n        {data?.spending && (\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-white/80 mb-3\">Spending</h4>\n            {renderSpending()}\n          </div>\n        )}\n\n        {/* Custom Children */}\n        {children}\n      </div>\n    </div>\n  );\n});\n\nUniversalCard.displayName = 'UniversalCard';\n\nexport default UniversalCard;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/accordion.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/accordion.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/alert-dialog.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/alert-dialog.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/shared/lib/utils\"\nimport { buttonVariants } from \"@/shared/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/alert.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/alert.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/aspect-ratio.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/aspect-ratio.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/avatar.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/avatar.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/badge.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/badge.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/breadcrumb.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/breadcrumb.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/button.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/button.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/calendar.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/calendar.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/shared/lib/utils\";\nimport { buttonVariants } from \"@/shared/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/card.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/card.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-2xl border border-white/[0.08] bg-white/[0.02] text-card-foreground shadow-md backdrop-blur-md\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/carousel.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/carousel.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\nimport { Button } from \"@/shared/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/chart.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/chart.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/AreaChart.demo.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/AreaChart.demo.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AreaChart Demo - Showcase component\n * Demonstrates all features of the Apple-style AreaChart component\n */\n\nimport React, { useState } from 'react';\nimport { AreaChart } from './AreaChart';\nimport { ChartDataPoint, ChartSeries } from './types';\n\n// Sample financial data\nconst portfolioData: ChartDataPoint[] = [\n  { date: '2024-01', stocks: 150000, bonds: 50000, cash: 20000, alternatives: 30000 },\n  { date: '2024-02', stocks: 148000, bonds: 52000, cash: 18000, alternatives: 32000 },\n  { date: '2024-03', stocks: 162000, bonds: 48000, cash: 22000, alternatives: 28000 },\n  { date: '2024-04', stocks: 175000, bonds: 55000, cash: 15000, alternatives: 35000 },\n  { date: '2024-05', stocks: 170000, bonds: 58000, cash: 17000, alternatives: 40000 },\n  { date: '2024-06', stocks: 185000, bonds: 52000, cash: 23000, alternatives: 42000 },\n];\n\nconst spendingData: ChartDataPoint[] = [\n  { date: '2024-01', housing: 2500, transportation: 800, food: 600, entertainment: 400, other: 300 },\n  { date: '2024-02', housing: 2500, transportation: 750, food: 650, entertainment: 500, other: 350 },\n  { date: '2024-03', housing: 2500, transportation: 900, food: 580, entertainment: 300, other: 280 },\n  { date: '2024-04', housing: 2500, transportation: 820, food: 620, entertainment: 450, other: 320 },\n  { date: '2024-05', housing: 2500, transportation: 880, food: 700, entertainment: 600, other: 400 },\n  { date: '2024-06', housing: 2500, transportation: 760, food: 590, entertainment: 350, other: 300 },\n];\n\nconst netWorthData: ChartDataPoint[] = [\n  { date: '2024-01', netWorth: 245000 },\n  { date: '2024-02', netWorth: 252000 },\n  { date: '2024-03', netWorth: 268000 },\n  { date: '2024-04', netWorth: 285000 },\n  { date: '2024-05', netWorth: 291000 },\n  { date: '2024-06', netWorth: 308000 },\n];\n\nconst AreaChartDemo: React.FC = () => {\n  const [selectedDemo, setSelectedDemo] = useState<'portfolio' | 'spending' | 'networth'>('portfolio');\n\n  const portfolioSeries: ChartSeries[] = [\n    { dataKey: 'stocks', label: 'Stocks', color: '#0A84FF' },\n    { dataKey: 'bonds', label: 'Bonds', color: '#32D74B' },\n    { dataKey: 'cash', label: 'Cash', color: '#FF9F0A' },\n    { dataKey: 'alternatives', label: 'Alternatives', color: '#BF5AF2' },\n  ];\n\n  const spendingSeries: ChartSeries[] = [\n    { dataKey: 'housing', label: 'Housing', color: '#FF453A' },\n    { dataKey: 'transportation', label: 'Transportation', color: '#FF9F0A' },\n    { dataKey: 'food', label: 'Food', color: '#32D74B' },\n    { dataKey: 'entertainment', label: 'Entertainment', color: '#BF5AF2' },\n    { dataKey: 'other', label: 'Other', color: '#0A84FF' },\n  ];\n\n  const netWorthSeries: ChartSeries[] = [\n    { dataKey: 'netWorth', label: 'Net Worth', color: '#0A84FF' },\n  ];\n\n  return (\n    <div className=\"w-full space-y-8 p-6 bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 min-h-screen\">\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold text-white mb-4\">AreaChart Component Demo</h1>\n        <p className=\"text-white/70 text-lg\">Apple-style area charts for financial data visualization</p>\n      </div>\n\n      {/* Demo Selector */}\n      <div className=\"flex justify-center space-x-4 mb-8\">\n        {[\n          { key: 'portfolio', label: 'Portfolio Allocation' },\n          { key: 'spending', label: 'Spending Breakdown' },\n          { key: 'networth', label: 'Net Worth Trend' },\n        ].map(demo => (\n          <button\n            key={demo.key}\n            onClick={() => setSelectedDemo(demo.key as any)}\n            className={`px-6 py-3 rounded-xl font-medium transition-all duration-200 ${\n              selectedDemo === demo.key\n                ? 'bg-blue-500/20 text-blue-400 border border-blue-500/30'\n                : 'bg-white/5 text-white/70 border border-white/10 hover:bg-white/10 hover:text-white'\n            }`}\n          >\n            {demo.label}\n          </button>\n        ))}\n      </div>\n\n      {/* Chart Demos */}\n      <div className=\"grid gap-8\">\n        {selectedDemo === 'portfolio' && (\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-3xl p-8 border border-white/10\">\n            <AreaChart\n              data={portfolioData}\n              series={portfolioSeries}\n              title=\"Portfolio Allocation Over Time\"\n              subtitle=\"Investment asset breakdown\"\n              financialType=\"currency\"\n              portfolioBreakdown={true}\n              stackedData={true}\n              stackNormalize={false}\n              areaConfig={{\n                stackedAreas: true,\n                fillOpacity: 0.4,\n                strokeWidth: 'medium',\n                smoothCurves: true,\n                gradientFill: true,\n                hoverEffects: true,\n                portfolioMode: true,\n              }}\n              dimensions={{\n                height: 400,\n                responsive: true,\n              }}\n              timeControls={{\n                show: true,\n                options: ['3M', '6M', '1Y', 'ALL'],\n                defaultRange: '6M',\n              }}\n              legend={{\n                show: true,\n                position: 'bottom',\n                align: 'center',\n              }}\n              className=\"w-full\"\n            />\n          </div>\n        )}\n\n        {selectedDemo === 'spending' && (\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-3xl p-8 border border-white/10\">\n            <AreaChart\n              data={spendingData}\n              series={spendingSeries}\n              title=\"Monthly Spending Categories\"\n              subtitle=\"Expense breakdown by category\"\n              financialType=\"currency\"\n              stackedData={true}\n              stackNormalize={false}\n              areaConfig={{\n                stackedAreas: true,\n                fillOpacity: 0.3,\n                strokeWidth: 'medium',\n                smoothCurves: true,\n                gradientFill: true,\n                hoverEffects: true,\n              }}\n              dimensions={{\n                height: 350,\n                responsive: true,\n              }}\n              timeControls={{\n                show: true,\n                options: ['1M', '3M', '6M', '1Y'],\n                defaultRange: '6M',\n              }}\n              legend={{\n                show: true,\n                position: 'bottom',\n                align: 'center',\n              }}\n              className=\"w-full\"\n            />\n          </div>\n        )}\n\n        {selectedDemo === 'networth' && (\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-3xl p-8 border border-white/10\">\n            <AreaChart\n              data={netWorthData}\n              series={netWorthSeries}\n              title=\"Net Worth Growth\"\n              subtitle=\"Total assets minus liabilities\"\n              financialType=\"currency\"\n              stackedData={false}\n              trendAnalysis={true}\n              areaConfig={{\n                stackedAreas: false,\n                fillOpacity: 0.2,\n                strokeWidth: 'thick',\n                smoothCurves: true,\n                gradientFill: true,\n                hoverEffects: true,\n                showBaseline: true,\n                baselineValue: 200000,\n              }}\n              dimensions={{\n                height: 300,\n                responsive: true,\n              }}\n              timeControls={{\n                show: true,\n                options: ['3M', '6M', '1Y', '2Y', 'ALL'],\n                defaultRange: '6M',\n              }}\n              grid={{\n                show: true,\n                horizontal: true,\n                vertical: false,\n                opacity: 0.1,\n              }}\n              className=\"w-full\"\n            />\n          </div>\n        )}\n      </div>\n\n      {/* Feature Highlights */}\n      <div className=\"grid md:grid-cols-3 gap-6 mt-12\">\n        <div className=\"bg-black/20 backdrop-blur-xl rounded-2xl p-6 border border-white/10\">\n          <h3 className=\"text-lg font-semibold text-white mb-3\">🍎 Apple Design</h3>\n          <p className=\"text-white/70 text-sm\">\n            Follows Apple Human Interface Guidelines with smooth curves, gradients, and clean typography.\n          </p>\n        </div>\n        \n        <div className=\"bg-black/20 backdrop-blur-xl rounded-2xl p-6 border border-white/10\">\n          <h3 className=\"text-lg font-semibold text-white mb-3\">💰 Financial Focus</h3>\n          <p className=\"text-white/70 text-sm\">\n            Built-in currency formatting, percentage calculations, and portfolio analysis features.\n          </p>\n        </div>\n        \n        <div className=\"bg-black/20 backdrop-blur-xl rounded-2xl p-6 border border-white/10\">\n          <h3 className=\"text-lg font-semibold text-white mb-3\">⚡ Performance</h3>\n          <p className=\"text-white/70 text-sm\">\n            Optimized for large datasets with data reduction and smooth animations.\n          </p>\n        </div>\n      </div>\n\n      {/* Usage Example */}\n      <div className=\"bg-black/20 backdrop-blur-xl rounded-2xl p-6 border border-white/10\">\n        <h3 className=\"text-lg font-semibold text-white mb-4\">Usage Example</h3>\n        <pre className=\"text-xs text-white/80 bg-black/30 rounded-lg p-4 overflow-x-auto\">\n{`<AreaChart\n  data={portfolioData}\n  series={portfolioSeries}\n  title=\"Portfolio Allocation\"\n  financialType=\"currency\"\n  stackedData={true}\n  areaConfig={{\n    stackedAreas: true,\n    fillOpacity: 0.4,\n    gradientFill: true,\n    portfolioMode: true,\n  }}\n  dimensions={{ height: 400 }}\n  timeControls={{ show: true }}\n  legend={{ show: true }}\n/>`}\n        </pre>\n      </div>\n    </div>\n  );\n};\n\nexport default AreaChartDemo;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/AreaChart.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/AreaChart.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AreaChart Tests\n * Test suite for the Apple-style AreaChart component\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { vi, describe, it, expect, beforeEach } from 'vitest';\nimport { AreaChart } from './AreaChart';\nimport { ChartDataPoint, ChartSeries } from './types';\n\n// Mock the recharts library\nvi.mock('recharts', () => ({\n  ResponsiveContainer: ({ children }: any) => <div data-testid=\"responsive-container\">{children}</div>,\n  AreaChart: ({ children }: any) => <div data-testid=\"area-chart\">{children}</div>,\n  XAxis: () => <div data-testid=\"x-axis\" />,\n  YAxis: () => <div data-testid=\"y-axis\" />,\n  CartesianGrid: () => <div data-testid=\"grid\" />,\n  Tooltip: () => <div data-testid=\"tooltip\" />,\n  Legend: () => <div data-testid=\"legend\" />,\n  Area: ({ dataKey }: any) => <div data-testid={`area-${dataKey}`} />,\n}));\n\n// Sample test data\nconst mockData: ChartDataPoint[] = [\n  { date: '2024-01', income: 5000, spending: 3000, savings: 2000 },\n  { date: '2024-02', income: 5200, spending: 3100, savings: 2100 },\n  { date: '2024-03', income: 5100, spending: 2900, savings: 2200 },\n  { date: '2024-04', income: 5300, spending: 3200, savings: 2100 },\n  { date: '2024-05', income: 5150, spending: 3050, savings: 2100 },\n];\n\nconst mockSeries: ChartSeries[] = [\n  { dataKey: 'income', label: 'Income', color: '#32D74B' },\n  { dataKey: 'spending', label: 'Spending', color: '#FF453A' },\n  { dataKey: 'savings', label: 'Savings', color: '#0A84FF' },\n];\n\ndescribe('AreaChart', () => {\n  beforeEach(() => {\n    // Clear any previous mocks\n    vi.clearAllMocks();\n  });\n\n  describe('Basic Rendering', () => {\n    it('renders without crashing', () => {\n      render(<AreaChart data={mockData} />);\n      expect(screen.getByTestId('area-chart')).toBeInTheDocument();\n    });\n\n    it('renders with title and subtitle', () => {\n      render(\n        <AreaChart \n          data={mockData} \n          title=\"Financial Overview\" \n          subtitle=\"Monthly breakdown\" \n        />\n      );\n      \n      expect(screen.getByText('Financial Overview')).toBeInTheDocument();\n      expect(screen.getByText('Monthly breakdown')).toBeInTheDocument();\n    });\n\n    it('renders responsive container by default', () => {\n      render(<AreaChart data={mockData} />);\n      expect(screen.getByTestId('responsive-container')).toBeInTheDocument();\n    });\n  });\n\n  describe('Data Handling', () => {\n    it('auto-generates series from data when not provided', () => {\n      render(<AreaChart data={mockData} />);\n      \n      // Should auto-detect numeric fields and create areas\n      expect(screen.getByTestId('area-income')).toBeInTheDocument();\n    });\n\n    it('uses provided series configuration', () => {\n      render(<AreaChart data={mockData} series={mockSeries} />);\n      \n      mockSeries.forEach(serie => {\n        expect(screen.getByTestId(`area-${serie.dataKey}`)).toBeInTheDocument();\n      });\n    });\n\n    it('handles empty data gracefully', () => {\n      render(<AreaChart data={[]} title=\"Empty Chart\" />);\n      \n      expect(screen.getByText('No data available')).toBeInTheDocument();\n      expect(screen.getByText(\"There's no data to display in this chart yet.\")).toBeInTheDocument();\n    });\n  });\n\n  describe('Financial Type Formatting', () => {\n    it('applies currency formatting', () => {\n      render(\n        <AreaChart \n          data={mockData} \n          financialType=\"currency\"\n          title=\"Revenue Chart\"\n        />\n      );\n      \n      expect(screen.getByTestId('area-chart')).toBeInTheDocument();\n    });\n\n    it('applies percentage formatting', () => {\n      const percentageData = [\n        { date: '2024-01', stocks: 60, bonds: 30, cash: 10 },\n        { date: '2024-02', stocks: 65, bonds: 25, cash: 10 },\n      ];\n      \n      render(\n        <AreaChart \n          data={percentageData} \n          financialType=\"percentage\"\n          title=\"Asset Allocation\"\n        />\n      );\n      \n      expect(screen.getByTestId('area-chart')).toBeInTheDocument();\n    });\n\n    it('applies allocation formatting', () => {\n      const allocationData = [\n        { date: '2024-01', equities: 70.5, fixedIncome: 20.0, alternatives: 9.5 },\n        { date: '2024-02', equities: 68.2, fixedIncome: 22.1, alternatives: 9.7 },\n      ];\n      \n      render(\n        <AreaChart \n          data={allocationData} \n          financialType=\"allocation\"\n          portfolioBreakdown={true}\n          title=\"Portfolio Breakdown\"\n        />\n      );\n      \n      expect(screen.getByTestId('area-chart')).toBeInTheDocument();\n    });\n  });\n\n  describe('Area Configuration', () => {\n    it('applies custom area configuration', () => {\n      const customConfig = {\n        fillOpacity: 0.5,\n        strokeWidth: 'thick' as const,\n        smoothCurves: false,\n        gradientFill: false,\n      };\n      \n      render(\n        <AreaChart \n          data={mockData} \n          areaConfig={customConfig}\n          title=\"Custom Areas\"\n        />\n      );\n      \n      expect(screen.getByTestId('area-chart')).toBeInTheDocument();\n    });\n\n    it('enables stacked areas for multi-series data', () => {\n      render(\n        <AreaChart \n          data={mockData} \n          multiSeries={true}\n          stackedData={true}\n          title=\"Stacked Areas\"\n        />\n      );\n      \n      expect(screen.getByTestId('area-chart')).toBeInTheDocument();\n    });\n\n    it('applies portfolio mode styling', () => {\n      render(\n        <AreaChart \n          data={mockData} \n          portfolioBreakdown={true}\n          financialType=\"allocation\"\n          title=\"Portfolio Composition\"\n        />\n      );\n      \n      expect(screen.getByTestId('area-chart')).toBeInTheDocument();\n      // Portfolio summary should be shown in header actions\n      expect(screen.getByText(/Current Allocation:/)).toBeInTheDocument();\n    });\n  });\n\n  describe('Loading and Error States', () => {\n    it('shows loading state', () => {\n      render(<AreaChart data={mockData} loading={true} title=\"Loading Chart\" />);\n      \n      // Should show skeleton loader with animate-pulse class\n      const loadingContainer = screen.getByTestId('responsive-container').parentElement;\n      expect(loadingContainer).toHaveClass('animate-pulse');\n    });\n\n    it('shows error state', () => {\n      const errorMessage = 'Failed to load chart data';\n      render(\n        <AreaChart \n          data={mockData} \n          error={errorMessage} \n          title=\"Error Chart\"\n        />\n      );\n      \n      expect(screen.getByText('Unable to load chart')).toBeInTheDocument();\n      expect(screen.getByText(errorMessage)).toBeInTheDocument();\n    });\n\n    it('handles retry functionality', () => {\n      const onRetry = vi.fn();\n      render(\n        <AreaChart \n          data={mockData} \n          error=\"Network error\" \n          errorConfig={{ onRetry }}\n        />\n      );\n      \n      const retryButton = screen.getByText('Retry');\n      fireEvent.click(retryButton);\n      \n      expect(onRetry).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('Interaction and Events', () => {\n    it('handles data point click events', () => {\n      const onDataPointClick = vi.fn();\n      render(\n        <AreaChart \n          data={mockData} \n          onDataPointClick={onDataPointClick}\n          title=\"Interactive Chart\"\n        />\n      );\n      \n      expect(screen.getByTestId('area-chart')).toBeInTheDocument();\n    });\n\n    it('handles data point hover events', () => {\n      const onDataPointHover = vi.fn();\n      render(\n        <AreaChart \n          data={mockData} \n          onDataPointHover={onDataPointHover}\n          title=\"Hover Chart\"\n        />\n      );\n      \n      expect(screen.getByTestId('area-chart')).toBeInTheDocument();\n    });\n\n    it('supports time range controls', () => {\n      const onTimeRangeChange = vi.fn();\n      render(\n        <AreaChart \n          data={mockData} \n          timeControls={{ \n            show: true, \n            options: ['1M', '3M', '1Y'], \n            defaultRange: '1M' \n          }}\n          onTimeRangeChange={onTimeRangeChange}\n          title=\"Time Range Chart\"\n        />\n      );\n      \n      expect(screen.getByTestId('area-chart')).toBeInTheDocument();\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('includes proper ARIA labels', () => {\n      render(\n        <AreaChart \n          data={mockData} \n          title=\"Accessible Chart\"\n          accessibility={{ \n            ariaLabel: 'Financial area chart showing income and expenses' \n          }}\n        />\n      );\n      \n      const chartContainer = screen.getByRole('img');\n      expect(chartContainer).toHaveAttribute('aria-label', 'Financial area chart showing income and expenses');\n    });\n\n    it('supports keyboard navigation', () => {\n      render(\n        <AreaChart \n          data={mockData} \n          accessibility={{ keyboardNavigation: true }}\n          title=\"Keyboard Chart\"\n        />\n      );\n      \n      expect(screen.getByTestId('area-chart')).toBeInTheDocument();\n    });\n  });\n\n  describe('Performance Features', () => {\n    it('reduces data precision for large datasets', async () => {\n      // Create a large dataset\n      const largeData = Array.from({ length: 500 }, (_, i) => ({\n        date: `2024-${String(i + 1).padStart(3, '0')}`,\n        value: Math.random() * 1000,\n      }));\n      \n      render(\n        <AreaChart \n          data={largeData} \n          precisionReduce={true}\n          title=\"Large Dataset\"\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('area-chart')).toBeInTheDocument();\n      });\n    });\n\n    it('disables data reduction when configured', () => {\n      const largeData = Array.from({ length: 200 }, (_, i) => ({\n        date: `2024-${String(i + 1).padStart(3, '0')}`,\n        value: Math.random() * 1000,\n      }));\n      \n      render(\n        <AreaChart \n          data={largeData} \n          precisionReduce={false}\n          title=\"No Reduction\"\n        />\n      );\n      \n      expect(screen.getByTestId('area-chart')).toBeInTheDocument();\n    });\n  });\n\n  describe('Apple Design Integration', () => {\n    it('applies Apple animation by default', () => {\n      render(\n        <AreaChart \n          data={mockData} \n          appleAnimation={true}\n          title=\"Animated Chart\"\n        />\n      );\n      \n      expect(screen.getByTestId('area-chart')).toBeInTheDocument();\n    });\n\n    it('disables Apple animation when configured', () => {\n      render(\n        <AreaChart \n          data={mockData} \n          appleAnimation={false}\n          title=\"Static Chart\"\n        />\n      );\n      \n      expect(screen.getByTestId('area-chart')).toBeInTheDocument();\n    });\n\n    it('applies custom series colors', () => {\n      const customColors = ['#FF6B6B', '#4ECDC4', '#45B7D1'];\n      render(\n        <AreaChart \n          data={mockData} \n          seriesColors={customColors}\n          multiSeries={true}\n          title=\"Custom Colors\"\n        />\n      );\n      \n      expect(screen.getByTestId('area-chart')).toBeInTheDocument();\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/AreaChart.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/AreaChart.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AreaChart - Apple-style area chart component\n * Extends GraphBase foundation with area-specific features\n * Based on Apple Human Interface Guidelines 2025\n * Optimized for financial portfolio and cash flow visualizations\n */\n\nimport React, { \n  memo, \n  useMemo, \n  forwardRef, \n  useCallback,\n  useImperativeHandle,\n  useRef\n} from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport { GraphBase } from './GraphBase';\nimport { \n  appleGraphTokens,\n  getGraphColor,\n  getTextColor,\n  getChartAnimationPreset,\n  shouldReduceMotion,\n  getOptimalAnimationDuration \n} from '@/theme/graph-tokens';\nimport {\n  GraphBaseProps,\n  ChartDataPoint,\n  ChartSeries,\n  ChartRef,\n  TimeRangeOption\n} from './types';\n\n// Area-specific configuration\nexport interface AreaChartConfig {\n  // Fill styling\n  fillOpacity?: number;\n  gradientFill?: boolean;\n  gradientDirection?: 'vertical' | 'horizontal';\n  \n  // Stacking behavior\n  stackedAreas?: boolean;\n  stackId?: string;\n  \n  // Stroke styling\n  strokeWidth?: 'thin' | 'medium' | 'thick';\n  strokeOpacity?: number;\n  smoothCurves?: boolean;\n  \n  // Apple-specific enhancements\n  appleGradients?: boolean;\n  portfolioMode?: boolean;\n  \n  // Interactive features\n  hoverEffects?: boolean;\n  crosshair?: boolean;\n  \n  // Financial-specific\n  currencyFormat?: boolean;\n  percentageFormat?: boolean;\n  showBaseline?: boolean;\n  baselineValue?: number;\n}\n\n// Extended props for AreaChart\nexport interface AreaChartProps extends Omit<GraphBaseProps, 'type'> {\n  areaConfig?: AreaChartConfig;\n  \n  // Financial data helpers\n  financialType?: 'currency' | 'percentage' | 'allocation' | 'number';\n  portfolioBreakdown?: boolean;\n  \n  // Multiple series shortcuts\n  multiSeries?: boolean;\n  seriesColors?: string[];\n  \n  // Apple-specific enhancements\n  appleAnimation?: boolean;\n  precisionReduce?: boolean;\n  \n  // Stacked data helpers\n  stackedData?: boolean;\n  stackNormalize?: boolean; // Convert to percentages\n}\n\n// Default area chart configuration\nconst DEFAULT_AREA_CONFIG: AreaChartConfig = {\n  fillOpacity: 0.3,\n  gradientFill: true,\n  gradientDirection: 'vertical',\n  stackedAreas: false,\n  strokeWidth: 'thin',\n  strokeOpacity: 1.0,\n  smoothCurves: true,\n  appleGradients: true,\n  portfolioMode: false,\n  hoverEffects: true,\n  crosshair: false,\n  currencyFormat: false,\n  percentageFormat: false,\n  showBaseline: false,\n  baselineValue: 0,\n};\n\n// Stroke width mapping\nconst STROKE_WIDTH_MAP = {\n  thin: 1,\n  medium: 1.5,\n  thick: 2,\n} as const;\n\n// Apple gradient definitions with proper opacity patterns\nconst APPLE_GRADIENTS = {\n  income: {\n    start: 'rgba(50, 215, 75, 0.4)',   // Apple green with 40% opacity\n    end: 'rgba(50, 215, 75, 0.1)',     // Apple green with 10% opacity\n  },\n  spending: {\n    start: 'rgba(255, 69, 58, 0.4)',   // Apple red with 40% opacity\n    end: 'rgba(255, 69, 58, 0.1)',     // Apple red with 10% opacity\n  },\n  savings: {\n    start: 'rgba(10, 132, 255, 0.4)',  // Apple blue with 40% opacity\n    end: 'rgba(10, 132, 255, 0.1)',    // Apple blue with 10% opacity\n  },\n  investments: {\n    start: 'rgba(191, 90, 242, 0.4)',  // Apple purple with 40% opacity\n    end: 'rgba(191, 90, 242, 0.1)',    // Apple purple with 10% opacity\n  },\n  debt: {\n    start: 'rgba(255, 159, 10, 0.4)',  // Apple orange with 40% opacity\n    end: 'rgba(255, 159, 10, 0.1)',    // Apple orange with 10% opacity\n  },\n} as const;\n\n// Custom tooltip for financial area data\nconst FinancialAreaTooltip: React.FC<{\n  active?: boolean;\n  payload?: any[];\n  label?: string;\n  financialType?: 'currency' | 'percentage' | 'allocation' | 'number';\n  stackedData?: boolean;\n}> = memo(({ active, payload, label, financialType = 'number', stackedData = false }) => {\n  if (!active || !payload || !payload.length) return null;\n\n  const formatValue = (value: number) => {\n    switch (financialType) {\n      case 'currency':\n        return new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD',\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0,\n        }).format(value);\n      case 'percentage':\n        return `${value.toFixed(1)}%`;\n      case 'allocation':\n        return `${value.toFixed(1)}%`;\n      default:\n        return value.toLocaleString();\n    }\n  };\n\n  const formatDate = (dateStr: string) => {\n    try {\n      const date = new Date(dateStr);\n      return date.toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      });\n    } catch {\n      return dateStr;\n    }\n  };\n\n  // Calculate total for stacked charts\n  const total = stackedData \n    ? payload.reduce((sum, entry) => sum + (entry.value || 0), 0)\n    : 0;\n\n  return (\n    <div className={cn(\n      \"bg-black/90 backdrop-blur-md rounded-xl px-4 py-3 shadow-2xl\",\n      \"border border-white/20 max-w-xs\"\n    )}>\n      <p className=\"text-white/60 text-xs font-medium mb-2\">\n        {formatDate(label || '')}\n      </p>\n      \n      {stackedData && total > 0 && (\n        <div className=\"mb-3 pb-2 border-b border-white/10\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-white/80 text-xs\">Total</span>\n            <span className=\"text-white font-semibold text-sm\">\n              {formatValue(total)}\n            </span>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"space-y-1\">\n        {payload.map((entry, index) => {\n          const percentage = stackedData && total > 0 \n            ? ((entry.value / total) * 100).toFixed(1)\n            : null;\n            \n          return (\n            <div key={index} className=\"flex items-center justify-between space-x-3\">\n              <div className=\"flex items-center space-x-2\">\n                <div\n                  className=\"w-2 h-2 rounded-full\"\n                  style={{ backgroundColor: entry.color }}\n                />\n                <span className=\"text-white/80 text-xs\">\n                  {entry.name}\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <span className=\"text-white font-medium text-sm\">\n                  {formatValue(entry.value)}\n                </span>\n                {percentage && (\n                  <span className=\"text-white/50 text-xs\">\n                    ({percentage}%)\n                  </span>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n});\n\nFinancialAreaTooltip.displayName = 'FinancialAreaTooltip';\n\n// Main AreaChart component\nexport const AreaChart = forwardRef<ChartRef, AreaChartProps>(({\n  // Area-specific props\n  areaConfig = {},\n  financialType = 'number',\n  portfolioBreakdown = false,\n  multiSeries = false,\n  seriesColors,\n  appleAnimation = true,\n  precisionReduce = true,\n  stackedData = false,\n  stackNormalize = false,\n  \n  // GraphBase props\n  data,\n  series,\n  title,\n  subtitle,\n  headerActions,\n  \n  // Styling\n  className,\n  style,\n  \n  // Chart configuration\n  animation,\n  tooltip,\n  \n  // Event handlers\n  onDataPointClick,\n  onDataPointHover,\n  \n  ...rest\n}, ref) => {\n  const internalRef = useRef<HTMLDivElement>(null);\n  \n  // Forward ref to internal element\n  useImperativeHandle(ref, () => internalRef.current as HTMLDivElement);\n  \n  // Merge area configuration with defaults\n  const areaConfigMerged = useMemo(() => ({\n    ...DEFAULT_AREA_CONFIG,\n    ...areaConfig,\n    // Auto-enable stacking if we have multiple series\n    stackedAreas: areaConfig.stackedAreas ?? (multiSeries || stackedData),\n    // Auto-enable portfolio mode for allocation data\n    portfolioMode: areaConfig.portfolioMode ?? (financialType === 'allocation'),\n  }), [areaConfig, multiSeries, stackedData, financialType]);\n\n  // Process data for stacking if needed\n  const processedData = useMemo(() => {\n    if (!stackNormalize || !stackedData) return data;\n    \n    // Convert absolute values to percentages\n    return data.map(point => {\n      const numericKeys = Object.keys(point).filter(key => \n        key !== 'date' && \n        key !== 'label' && \n        typeof point[key] === 'number'\n      );\n      \n      const total = numericKeys.reduce((sum, key) => sum + (point[key] as number || 0), 0);\n      \n      if (total === 0) return point;\n      \n      const normalizedPoint = { ...point };\n      numericKeys.forEach(key => {\n        normalizedPoint[key] = ((point[key] as number / total) * 100);\n      });\n      \n      return normalizedPoint;\n    });\n  }, [data, stackNormalize, stackedData]);\n\n  // Generate optimized series for area charts with Apple-standard animations\n  const optimizedSeries = useMemo((): ChartSeries[] => {\n    const hoverPreset = getChartAnimationPreset('hover');\n    const strokeDuration = getOptimalAnimationDuration('chartDrawing'); // 800ms for stroke\n    const fillDuration = getOptimalAnimationDuration('areaFill');        // 600ms for fill\n    \n    if (series) {\n      return series.map((serie, index) => ({\n        ...serie,\n        strokeWidth: STROKE_WIDTH_MAP[areaConfigMerged.strokeWidth || 'thin'],\n        fillOpacity: areaConfigMerged.fillOpacity,\n        connectNulls: true,\n        color: serie.color || (seriesColors?.[index]) || getGraphColor(\n          ['income', 'spending', 'savings', 'investments', 'debt'][index] as any || 'neutral',\n          'dark'\n        ),\n        // Apple-style coordinated stroke and fill animations\n        animationBegin: 0,                    // Stroke starts immediately\n        animationDuration: strokeDuration,    // 800ms stroke animation\n        // Fill animation config (handled by Recharts internally)\n        fillAnimationBegin: 100,             // Fill starts 100ms after stroke\n        fillAnimationDuration: fillDuration, // 600ms fill animation\n        // Hover effects\n        activeDot: areaConfigMerged.hoverEffects ? {\n          r: 4,\n          fill: serie.color || getGraphColor(\n            ['income', 'spending', 'savings', 'investments', 'debt'][index] as any || 'neutral',\n            'dark'\n          ),\n          strokeWidth: 2,\n          stroke: '#ffffff',\n          style: {\n            filter: 'drop-shadow(0px 2px 4px rgba(0,0,0,0.2))',\n            transition: `all ${hoverPreset.duration}ms ${hoverPreset.easing}`,\n          }\n        } : false,\n      }));\n    }\n    \n    // Auto-generate series from data\n    if (processedData.length === 0) return [];\n    \n    const firstPoint = processedData[0];\n    const numericKeys = Object.keys(firstPoint).filter(key => \n      key !== 'date' && \n      key !== 'label' && \n      typeof firstPoint[key] === 'number'\n    );\n    \n    return numericKeys.slice(0, multiSeries ? 6 : 1).map((key, index) => {\n      const color = seriesColors?.[index] || getGraphColor(\n        ['income', 'spending', 'savings', 'investments', 'debt'][index] as any || 'neutral',\n        'dark'\n      );\n      \n      return {\n        dataKey: key,\n        label: key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1'),\n        color,\n        strokeWidth: STROKE_WIDTH_MAP[areaConfigMerged.strokeWidth || 'thin'],\n        fillOpacity: areaConfigMerged.fillOpacity,\n        connectNulls: true,\n        // Apple-style coordinated stroke and fill animations\n        animationBegin: 0,                    // Stroke starts immediately\n        animationDuration: strokeDuration,    // 800ms stroke animation\n        fillAnimationBegin: 100,             // Fill starts 100ms after stroke\n        fillAnimationDuration: fillDuration, // 600ms fill animation\n        // Hover effects\n        activeDot: areaConfigMerged.hoverEffects ? {\n          r: 4,\n          fill: color,\n          strokeWidth: 2,\n          stroke: '#ffffff',\n          style: {\n            filter: 'drop-shadow(0px 2px 4px rgba(0,0,0,0.2))',\n            transition: `all ${hoverPreset.duration}ms ${hoverPreset.easing}`,\n          }\n        } : false,\n      };\n    });\n  }, [processedData, series, areaConfigMerged.strokeWidth, areaConfigMerged.fillOpacity, multiSeries, seriesColors]);\n\n  // Optimize data for performance if needed\n  const optimizedData = useMemo(() => {\n    if (!precisionReduce || processedData.length <= 100) return processedData;\n    \n    // Simple data reduction for large datasets\n    const step = Math.ceil(processedData.length / 100);\n    return processedData.filter((_, index) => index % step === 0);\n  }, [processedData, precisionReduce]);\n\n  // Enhanced animation configuration with coordinated fill and stroke\n  const animationConfig = useMemo(() => {\n    const areaAnimationPreset = getChartAnimationPreset('area');\n    const reducedMotion = shouldReduceMotion();\n    \n    return {\n      enable: appleAnimation && !reducedMotion,\n      duration: areaAnimationPreset.duration, // 600ms for coordinated fill\n      easing: areaAnimationPreset.easing,     // iOS ease-out\n      delay: areaAnimationPreset.delay,       // 100ms delay for stroke-then-fill\n      // Override with any custom animation settings\n      ...animation,\n      // Ensure reduced motion is respected\n      ...(reducedMotion && { \n        enable: false, \n        duration: 0,\n        delay: 0 \n      }),\n    };\n  }, [appleAnimation, animation]);\n\n  // Custom tooltip configuration\n  const tooltipConfig = useMemo(() => ({\n    show: true,\n    ...tooltip,\n  }), [tooltip]);\n\n  // Custom tooltip component\n  const customTooltip = useCallback((props: any) => (\n    <FinancialAreaTooltip \n      {...props} \n      financialType={financialType}\n      stackedData={areaConfigMerged.stackedAreas}\n    />\n  ), [financialType, areaConfigMerged.stackedAreas]);\n\n  // Enhanced Y-axis formatter\n  const yAxisFormatter = useCallback((value: number) => {\n    if (financialType === 'currency') {\n      // Shortened currency format for axis\n      if (Math.abs(value) >= 1000000) {\n        return `$${(value / 1000000).toFixed(1)}M`;\n      }\n      if (Math.abs(value) >= 1000) {\n        return `$${(value / 1000).toFixed(0)}K`;\n      }\n      return `$${value.toFixed(0)}`;\n    }\n    \n    if (financialType === 'percentage' || financialType === 'allocation') {\n      return `${value}%`;\n    }\n    \n    return value.toLocaleString();\n  }, [financialType]);\n\n  // Generate portfolio composition summary if enabled\n  const portfolioSummary = useMemo(() => {\n    if (!areaConfigMerged.portfolioMode || !optimizedData.length || !optimizedSeries.length) return null;\n    \n    const latestData = optimizedData[optimizedData.length - 1];\n    const total = optimizedSeries.reduce((sum, serie) => sum + (latestData[serie.dataKey] || 0), 0);\n    \n    if (total === 0) return null;\n    \n    return (\n      <div className=\"flex items-center space-x-4 text-sm\">\n        <span className=\"text-white/60\">Current Allocation:</span>\n        {optimizedSeries.slice(0, 3).map(serie => {\n          const value = latestData[serie.dataKey] || 0;\n          const percentage = ((value / total) * 100).toFixed(1);\n          \n          return (\n            <div key={serie.dataKey} className=\"flex items-center space-x-1\">\n              <div\n                className=\"w-2 h-2 rounded-full\"\n                style={{ backgroundColor: serie.color }}\n              />\n              <span className=\"text-white/80 text-xs\">\n                {serie.label}: {percentage}%\n              </span>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }, [areaConfigMerged.portfolioMode, optimizedData, optimizedSeries]);\n\n  return (\n    <GraphBase\n      ref={internalRef}\n      // Core props\n      data={optimizedData}\n      type=\"area\"\n      series={optimizedSeries}\n      \n      // Header\n      title={title}\n      subtitle={subtitle}\n      headerActions={\n        <>\n          {headerActions}\n          {portfolioSummary}\n        </>\n      }\n      \n      // Chart configuration\n      animation={animationConfig}\n      tooltip={tooltipConfig}\n      customTooltip={customTooltip}\n      \n      // Y-axis formatting\n      yAxis={{\n        show: true,\n        tickFormatter: yAxisFormatter,\n        domain: areaConfigMerged.showBaseline ? [areaConfigMerged.baselineValue, 'auto'] : undefined,\n      }}\n      \n      // Grid configuration optimized for area charts\n      grid={{\n        show: true,\n        horizontal: true,\n        vertical: false,\n        strokeDasharray: \"1 1\",\n        opacity: 0.2,\n      }}\n      \n      // Styling\n      className={cn(\"area-chart\", className)}\n      style={style}\n      \n      // Event handlers\n      onDataPointClick={onDataPointClick}\n      onDataPointHover={onDataPointHover}\n      \n      {...rest}\n    />\n  );\n});\n\nAreaChart.displayName = 'AreaChart';\n\n// Export memoized version\nexport default memo(AreaChart);","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/GraphBase.demo.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/GraphBase.demo.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GraphBase Demo Component\n * Demonstrates the Apple-style GraphBase component with sample financial data\n */\n\nimport React, { useState } from 'react';\nimport { GraphBase } from './GraphBase';\nimport { ChartType, TimeRangeOption } from './types';\n\n// Sample financial data\nconst generateSampleData = (days: number = 30) => {\n  const data = [];\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - days);\n  \n  for (let i = 0; i < days; i++) {\n    const date = new Date(startDate);\n    date.setDate(startDate.getDate() + i);\n    \n    data.push({\n      date: date.toISOString().split('T')[0],\n      income: Math.random() * 1000 + 2000,\n      spending: Math.random() * 800 + 1200,\n      savings: Math.random() * 500 + 300,\n      investments: Math.random() * 300 + 100,\n      debt: Math.random() * 200 + 50,\n    });\n  }\n  \n  return data;\n};\n\nconst GraphBaseDemo: React.FC = () => {\n  const [chartType, setChartType] = useState<ChartType>('line');\n  const [timeRange, setTimeRange] = useState<TimeRangeOption>('1M');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Generate data based on time range\n  const getDaysFromRange = (range: TimeRangeOption): number => {\n    switch (range) {\n      case '1W': return 7;\n      case '1M': return 30;\n      case '3M': return 90;\n      case '6M': return 180;\n      case '1Y': return 365;\n      case 'ALL': return 730; // 2 years\n      default: return 30;\n    }\n  };\n  \n  const data = generateSampleData(getDaysFromRange(timeRange));\n  \n  const handleTimeRangeChange = (newRange: TimeRangeOption) => {\n    setLoading(true);\n    setTimeRange(newRange);\n    \n    // Simulate loading delay\n    setTimeout(() => {\n      setLoading(false);\n    }, 500);\n  };\n  \n  const handleChartTypeChange = (newType: ChartType) => {\n    setChartType(newType);\n  };\n  \n  const simulateError = () => {\n    setError(\"Failed to load chart data. Please try again.\");\n  };\n  \n  const clearError = () => {\n    setError(null);\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-8\">\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-3xl font-bold text-white\">GraphBase Demo</h1>\n        <p className=\"text-white/70\">\n          Apple-style chart component with financial data visualization\n        </p>\n      </div>\n      \n      {/* Controls */}\n      <div className=\"bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10\">\n        <div className=\"flex flex-wrap gap-4 items-center justify-between\">\n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium text-white/80\">\n              Chart Type\n            </label>\n            <div className=\"flex gap-2\">\n              {(['line', 'area', 'bar', 'stackedBar'] as ChartType[]).map((type) => (\n                <button\n                  key={type}\n                  onClick={() => handleChartTypeChange(type)}\n                  className={`px-3 py-1.5 text-sm rounded-lg transition-all ${\n                    chartType === type\n                      ? 'bg-blue-500/20 text-blue-300 border border-blue-500/30'\n                      : 'bg-white/5 text-white/70 border border-white/10 hover:bg-white/10'\n                  }`}\n                >\n                  {type}\n                </button>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <button\n              onClick={simulateError}\n              className=\"px-4 py-2 text-sm bg-red-500/20 text-red-300 border border-red-500/30 rounded-lg hover:bg-red-500/30 transition-all\"\n            >\n              Simulate Error\n            </button>\n            <button\n              onClick={clearError}\n              className=\"px-4 py-2 text-sm bg-green-500/20 text-green-300 border border-green-500/30 rounded-lg hover:bg-green-500/30 transition-all\"\n            >\n              Clear Error\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Chart Examples */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Main Chart */}\n        <div className=\"lg:col-span-2\">\n          <GraphBase\n            data={data}\n            type={chartType}\n            title=\"Financial Overview\"\n            subtitle=\"Income, spending, and savings trends\"\n            timeRange={timeRange}\n            timeControls={{\n              show: true,\n              options: ['1W', '1M', '3M', '6M', '1Y', 'ALL'],\n              defaultRange: '1M'\n            }}\n            onTimeRangeChange={handleTimeRangeChange}\n            loading={loading}\n            error={error}\n            errorConfig={{\n              showRetry: true,\n              onRetry: clearError\n            }}\n            dimensions={{\n              height: 400,\n              responsive: true\n            }}\n            legend={{\n              show: true,\n              position: 'bottom'\n            }}\n            grid={{\n              show: true,\n              horizontal: true,\n              vertical: false\n            }}\n            accessibility={{\n              title: \"Financial data chart\",\n              description: \"A chart showing income, spending, savings, investments, and debt over time\"\n            }}\n          />\n        </div>\n        \n        {/* Compact Charts */}\n        <div>\n          <GraphBase\n            data={data}\n            type=\"area\"\n            title=\"Income vs Spending\"\n            series={[\n              { dataKey: 'income', label: 'Income', color: '#10b981' },\n              { dataKey: 'spending', label: 'Spending', color: '#ef4444' }\n            ]}\n            dimensions={{\n              height: 250,\n              responsive: true\n            }}\n            animation={{\n              enable: true,\n              duration: 600\n            }}\n          />\n        </div>\n        \n        <div>\n          <GraphBase\n            data={data}\n            type=\"bar\"\n            title=\"Monthly Breakdown\"\n            series={[\n              { dataKey: 'savings', label: 'Savings', color: '#3b82f6' },\n              { dataKey: 'investments', label: 'Investments', color: '#8b5cf6' }\n            ]}\n            dimensions={{\n              height: 250,\n              responsive: true\n            }}\n            legend={{\n              show: true,\n              position: 'top'\n            }}\n          />\n        </div>\n      </div>\n      \n      {/* Feature Showcase */}\n      <div className=\"bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10\">\n        <h3 className=\"text-xl font-semibold text-white mb-4\">Features</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 text-sm\">\n          <div className=\"space-y-2\">\n            <h4 className=\"font-medium text-white/90\">🎨 Apple Design</h4>\n            <ul className=\"text-white/70 space-y-1\">\n              <li>• SF Pro typography</li>\n              <li>• Apple color system</li>\n              <li>• Consistent spacing</li>\n              <li>• Glass morphism</li>\n            </ul>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <h4 className=\"font-medium text-white/90\">📊 Chart Types</h4>\n            <ul className=\"text-white/70 space-y-1\">\n              <li>• Line charts</li>\n              <li>• Area charts</li>\n              <li>• Bar charts</li>\n              <li>• Stacked bars</li>\n            </ul>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <h4 className=\"font-medium text-white/90\">♿ Accessibility</h4>\n            <ul className=\"text-white/70 space-y-1\">\n              <li>• ARIA labels</li>\n              <li>• Keyboard navigation</li>\n              <li>• Screen reader support</li>\n              <li>• High contrast mode</li>\n            </ul>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <h4 className=\"font-medium text-white/90\">🚀 Performance</h4>\n            <ul className=\"text-white/70 space-y-1\">\n              <li>• React.memo optimization</li>\n              <li>• Lazy loading</li>\n              <li>• Data virtualization</li>\n              <li>• Debounced updates</li>\n            </ul>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <h4 className=\"font-medium text-white/90\">📱 Responsive</h4>\n            <ul className=\"text-white/70 space-y-1\">\n              <li>• Mobile-first design</li>\n              <li>• Touch-friendly controls</li>\n              <li>• Adaptive layouts</li>\n              <li>• Smooth animations</li>\n            </ul>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <h4 className=\"font-medium text-white/90\">🔧 Customizable</h4>\n            <ul className=\"text-white/70 space-y-1\">\n              <li>• Custom tooltips</li>\n              <li>• Flexible legends</li>\n              <li>• Theme integration</li>\n              <li>• Event handlers</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GraphBaseDemo;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/GraphBase.quicktest.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/GraphBase.quicktest.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Quick test to verify GraphBase component works\n */\n\nimport React from 'react';\nimport { GraphBase } from './index';\n\nconst testData = [\n  { date: '2024-01-01', revenue: 1000, profit: 200 },\n  { date: '2024-01-02', revenue: 1200, profit: 300 },\n  { date: '2024-01-03', revenue: 800, profit: 100 },\n  { date: '2024-01-04', revenue: 1500, profit: 400 },\n];\n\nexport const GraphBaseQuickTest: React.FC = () => (\n  <div className=\"p-4\">\n    <GraphBase\n      data={testData}\n      type=\"line\"\n      title=\"Quick Test Chart\"\n      dimensions={{ height: 200 }}\n    />\n  </div>\n);\n\nexport default GraphBaseQuickTest;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/GraphBase.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/GraphBase.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GraphBase Test Component - Simple test to verify component functionality\n */\n\nimport React from 'react';\nimport { GraphBase } from './GraphBase';\n\n// Simple test data\nconst testData = [\n  { date: '2024-01-01', value: 100, income: 2500, spending: 1800 },\n  { date: '2024-01-02', value: 120, income: 2600, spending: 1900 },\n  { date: '2024-01-03', value: 80, income: 2400, spending: 1700 },\n  { date: '2024-01-04', value: 150, income: 2700, spending: 2000 },\n  { date: '2024-01-05', value: 90, income: 2500, spending: 1750 },\n];\n\nconst GraphBaseTest: React.FC = () => {\n  return (\n    <div className=\"p-8 bg-slate-900 min-h-screen\">\n      <div className=\"max-w-4xl mx-auto space-y-8\">\n        <h1 className=\"text-2xl font-bold text-white text-center\">\n          GraphBase Component Test\n        </h1>\n        \n        {/* Basic Line Chart */}\n        <div className=\"bg-white/5 p-6 rounded-2xl border border-white/10\">\n          <GraphBase\n            data={testData}\n            type=\"line\"\n            title=\"Basic Line Chart\"\n            subtitle=\"Testing the GraphBase component\"\n            dimensions={{ height: 300 }}\n            series={[\n              { dataKey: 'value', label: 'Value', color: '#3b82f6' }\n            ]}\n          />\n        </div>\n        \n        {/* Multi-series Area Chart */}\n        <div className=\"bg-white/5 p-6 rounded-2xl border border-white/10\">\n          <GraphBase\n            data={testData}\n            type=\"area\"\n            title=\"Income vs Spending\"\n            subtitle=\"Financial overview\"\n            dimensions={{ height: 300 }}\n            series={[\n              { dataKey: 'income', label: 'Income', color: '#10b981' },\n              { dataKey: 'spending', label: 'Spending', color: '#ef4444' }\n            ]}\n            legend={{ show: true, position: 'bottom' }}\n          />\n        </div>\n        \n        {/* Bar Chart */}\n        <div className=\"bg-white/5 p-6 rounded-2xl border border-white/10\">\n          <GraphBase\n            data={testData}\n            type=\"bar\"\n            title=\"Bar Chart Test\"\n            dimensions={{ height: 300 }}\n            series={[\n              { dataKey: 'value', label: 'Daily Value', color: '#8b5cf6' }\n            ]}\n          />\n        </div>\n        \n        {/* Loading State Test */}\n        <div className=\"bg-white/5 p-6 rounded-2xl border border-white/10\">\n          <GraphBase\n            data={[]}\n            type=\"line\"\n            title=\"Loading State\"\n            loading={true}\n            dimensions={{ height: 300 }}\n          />\n        </div>\n        \n        {/* Error State Test */}\n        <div className=\"bg-white/5 p-6 rounded-2xl border border-white/10\">\n          <GraphBase\n            data={[]}\n            type=\"line\"\n            title=\"Error State\"\n            error=\"Test error message\"\n            dimensions={{ height: 300 }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GraphBaseTest;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/GraphBase.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/GraphBase.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GraphBase - Apple-style foundation component for all charts\n * Based on Apple Human Interface Guidelines 2025\n * Provides consistent styling, accessibility, and behavior for all chart types\n */\n\nimport React, { \n  memo, \n  useCallback, \n  useMemo, \n  useRef, \n  useEffect, \n  useState,\n  forwardRef,\n  useImperativeHandle \n} from 'react';\nimport { \n  ResponsiveContainer,\n  LineChart,\n  AreaChart,\n  BarChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Line,\n  Area,\n  Bar,\n  Cell\n} from 'recharts';\nimport { cn } from '@/shared/lib/utils';\nimport { \n  appleGraphTokens,\n  getGraphColor,\n  getTextColor,\n  getBackgroundColor,\n  generateGraphCSSProperties,\n  shouldReduceMotion,\n  getOptimalAnimationDuration \n} from '@/theme/graph-tokens';\nimport {\n  GraphBaseProps,\n  ChartType,\n  TimeRangeOption,\n  LoadingState,\n  ChartRef,\n  ChartDataPoint,\n  ChartSeries\n} from './types';\nimport TimeRangeToggle from './TimeRangeToggle';\nimport TimeRangeToggleRadix from './TimeRangeToggleRadix';\nimport { useTimeRange } from '@/shared/hooks/useTimeRange';\n\n// Time control component with Apple-style segmented control\nconst TimeControl: React.FC<{\n  currentRange: TimeRangeOption;\n  options: TimeRangeOption[];\n  onChange: (range: TimeRangeOption) => void;\n  className?: string;\n}> = memo(({ currentRange, options, onChange, className }) => {\n  return (\n    <div \n      className={cn(\n        \"flex items-center bg-white/5 backdrop-blur-sm rounded-lg p-1\",\n        \"border border-white/10\",\n        className\n      )}\n      role=\"tablist\"\n      aria-label=\"Time range selection\"\n    >\n      {options.map((option) => (\n        <button\n          key={option}\n          onClick={() => onChange(option)}\n          className={cn(\n            \"px-3 py-1.5 text-xs font-medium rounded-md transition-all duration-200\",\n            \"focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2 focus:ring-offset-transparent\",\n            currentRange === option\n              ? \"bg-white/15 text-white shadow-sm\"\n              : \"text-white/70 hover:text-white/90 hover:bg-white/5\"\n          )}\n          role=\"tab\"\n          aria-selected={currentRange === option}\n          tabIndex={currentRange === option ? 0 : -1}\n        >\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n});\n\nTimeControl.displayName = 'TimeControl';\n\n// Chart header with Apple typography hierarchy\nconst ChartHeader: React.FC<{\n  title?: string;\n  subtitle?: string;\n  actions?: React.ReactNode;\n  className?: string;\n}> = memo(({ title, subtitle, actions, className }) => {\n  if (!title && !subtitle && !actions) return null;\n\n  return (\n    <div className={cn(\"flex items-start justify-between mb-6\", className)}>\n      <div className=\"space-y-1\">\n        {title && (\n          <h2 \n            className=\"text-xl font-semibold text-white leading-tight\"\n            style={{ \n              fontFamily: appleGraphTokens.typography.fontFamily.primary,\n              fontSize: appleGraphTokens.typography.fontSize.chartTitle,\n              fontWeight: appleGraphTokens.typography.fontWeight.chartTitle\n            }}\n          >\n            {title}\n          </h2>\n        )}\n        {subtitle && (\n          <p \n            className=\"text-sm text-white/60 leading-normal\"\n            style={{\n              fontFamily: appleGraphTokens.typography.fontFamily.primary,\n              fontSize: appleGraphTokens.typography.fontSize.axisLabel\n            }}\n          >\n            {subtitle}\n          </p>\n        )}\n      </div>\n      {actions && (\n        <div className=\"flex items-center space-x-2\">\n          {actions}\n        </div>\n      )}\n    </div>\n  );\n});\n\nChartHeader.displayName = 'ChartHeader';\n\n// Apple-style loading skeleton\nconst ChartSkeleton: React.FC<{\n  type: ChartType;\n  height?: number;\n  showTitle?: boolean;\n  showLegend?: boolean;\n  className?: string;\n}> = memo(({ type, height = 300, showTitle = true, showLegend = false, className }) => {\n  const reducedMotion = shouldReduceMotion();\n  \n  return (\n    <div className={cn(!reducedMotion && \"animate-pulse\", className)}>\n      {showTitle && (\n        <div className=\"mb-6\">\n          <div className=\"h-5 bg-white/10 rounded-md w-48 mb-2\"></div>\n          <div className=\"h-3 bg-white/5 rounded-md w-32\"></div>\n        </div>\n      )}\n      \n      <div \n        className=\"bg-white/5 rounded-lg flex items-end justify-center space-x-1 p-4\"\n        style={{ height }}\n      >\n        {/* Skeleton bars/lines based on chart type */}\n        {Array.from({ length: 12 }).map((_, i) => (\n          <div\n            key={i}\n            className=\"bg-white/10 rounded-t-sm flex-1\"\n            style={{\n              height: `${Math.random() * 60 + 20}%`,\n              animationDelay: reducedMotion ? '0ms' : `${i * 100}ms`,\n              transition: reducedMotion ? 'none' : undefined,\n            }}\n          />\n        ))}\n      </div>\n      \n      {showLegend && (\n        <div className=\"flex justify-center space-x-4 mt-4\">\n          {Array.from({ length: 3 }).map((_, i) => (\n            <div key={i} className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-white/10 rounded-full\"></div>\n              <div className=\"h-3 bg-white/10 rounded w-16\"></div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n});\n\nChartSkeleton.displayName = 'ChartSkeleton';\n\n// Error state component\nconst ChartError: React.FC<{\n  error: string | Error;\n  onRetry?: () => void;\n  showRetry?: boolean;\n  retryText?: string;\n  className?: string;\n}> = memo(({ error, onRetry, showRetry = true, retryText = \"Retry\", className }) => {\n  const errorMessage = error instanceof Error ? error.message : error;\n\n  return (\n    <div className={cn(\n      \"flex flex-col items-center justify-center h-64 text-center space-y-4\",\n      className\n    )}>\n      <div className=\"w-12 h-12 rounded-full bg-red-500/10 flex items-center justify-center\">\n        <svg className=\"w-6 h-6 text-red-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.962-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n        </svg>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <h3 className=\"text-lg font-medium text-white\">Unable to load chart</h3>\n        <p className=\"text-sm text-white/60 max-w-md\">\n          {errorMessage || \"An error occurred while loading the chart data.\"}\n        </p>\n      </div>\n      \n      {showRetry && onRetry && (\n        <button\n          onClick={onRetry}\n          className={cn(\n            \"px-4 py-2 text-sm font-medium rounded-lg\",\n            \"bg-blue-500/20 text-blue-300 border border-blue-500/30\",\n            \"hover:bg-blue-500/30 hover:border-blue-500/50\",\n            \"focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2 focus:ring-offset-transparent\",\n            \"transition-all duration-200\"\n          )}\n        >\n          {retryText}\n        </button>\n      )}\n    </div>\n  );\n});\n\nChartError.displayName = 'ChartError';\n\n// Accessible data table alternative for charts\nconst ChartDataTable: React.FC<{\n  data: ChartDataPoint[];\n  series: ChartSeries[];\n  title?: string;\n  className?: string;\n}> = memo(({ data, series, title, className }) => {\n  if (!data.length || !series.length) return null;\n\n  const formatValue = useCallback((value: number, dataKey: string) => {\n    // Auto-format based on common financial patterns\n    if (dataKey.toLowerCase().includes('amount') || dataKey.toLowerCase().includes('value')) {\n      return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: 0\n      }).format(value);\n    }\n    if (dataKey.toLowerCase().includes('percent') || dataKey.toLowerCase().includes('rate')) {\n      return `${value.toFixed(1)}%`;\n    }\n    return value.toLocaleString();\n  }, []);\n\n  const formatDate = useCallback((dateStr: string) => {\n    try {\n      const date = new Date(dateStr);\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    } catch {\n      return dateStr;\n    }\n  }, []);\n\n  return (\n    <div className={cn(\"chart-data-table-container mt-6\", className)}>\n      <table \n        className=\"chart-data-table\"\n        role=\"table\"\n        aria-label={`Data table for ${title || 'chart'}`}\n      >\n        <caption className=\"sr-only\">\n          {title ? `Data table representation of ${title}` : 'Chart data table'}\n          {` with ${data.length} data points and ${series.length} data series`}\n        </caption>\n        <thead>\n          <tr>\n            <th scope=\"col\">Date</th>\n            {series.map((serie) => (\n              <th key={serie.dataKey} scope=\"col\">\n                {serie.label || serie.dataKey}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((point, rowIndex) => (\n            <tr key={rowIndex}>\n              <th scope=\"row\">\n                {point.date ? formatDate(point.date) : point.label || `Row ${rowIndex + 1}`}\n              </th>\n              {series.map((serie) => (\n                <td key={serie.dataKey}>\n                  {point[serie.dataKey] !== undefined \n                    ? formatValue(point[serie.dataKey] as number, serie.dataKey)\n                    : '—'\n                  }\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n\nChartDataTable.displayName = 'ChartDataTable';\n\n// Live region for announcing chart updates\nconst ChartLiveRegion: React.FC<{\n  announcement: string;\n  className?: string;\n}> = memo(({ announcement, className }) => {\n  return (\n    <div\n      className={cn(\"chart-live-region sr-only\", className)}\n      aria-live=\"polite\"\n      aria-atomic=\"true\"\n      role=\"status\"\n    >\n      {announcement}\n    </div>\n  );\n});\n\nChartLiveRegion.displayName = 'ChartLiveRegion';\n\n// Enhanced GraphBase component with TimeRange integration\nexport const GraphBase = forwardRef<ChartRef, GraphBaseProps>(({\n  // Core props\n  data,\n  type,\n  series,\n  \n  // Header props\n  title,\n  subtitle,\n  headerActions,\n  \n  // Time controls - enhanced with context support\n  timeRange = '1M',\n  timeControls,\n  onTimeRangeChange,\n  useGlobalTimeRange = false, // New prop to use global context\n  \n  // Dimensions and styling\n  dimensions = { height: 300, responsive: true },\n  className,\n  style,\n  \n  // Chart configuration\n  xAxis = { show: true },\n  yAxis = { show: true },\n  grid = { show: true, horizontal: true, vertical: false },\n  legend = { show: false },\n  tooltip = { show: true },\n  animation = { enable: true, duration: 800 },\n  \n  // State management\n  loading = false,\n  loadingState = 'idle',\n  error,\n  errorConfig = { showRetry: true },\n  \n  // Accessibility\n  accessibility = { \n    keyboardNavigation: true,\n    screenReaderSupport: true,\n    dataTableAlternative: true,\n    liveRegion: true\n  },\n  \n  // Performance\n  virtualization = false,\n  dataThreshold = 1000,\n  \n  // Event handlers\n  onDataPointClick,\n  onDataPointHover,\n  onChartReady,\n  onChartError,\n  \n  // Advanced\n  customTooltip,\n  customLegend,\n  children,\n  \n  ...rest\n}, ref) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const [currentTheme, setCurrentTheme] = useState<'light' | 'dark'>('dark');\n  const [liveAnnouncement, setLiveAnnouncement] = useState<string>('');\n  const [showDataTable, setShowDataTable] = useState(false);\n  \n  // Conditionally use global time range context\n  const timeRangeContext = useGlobalTimeRange ? useTimeRange({\n    stabilizeCallbacks: true,\n    memoizeData: true,\n    enableCache: true\n  }) : null;\n\n  // Expose ref imperatively\n  useImperativeHandle(ref, () => containerRef.current as HTMLDivElement);\n\n  // Detect theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    setCurrentTheme(mediaQuery.matches ? 'dark' : 'light');\n    \n    const handleChange = (e: MediaQueryListEvent) => {\n      setCurrentTheme(e.matches ? 'dark' : 'light');\n    };\n    \n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  // Generate theme-based CSS properties\n  const cssProperties = useMemo(() => \n    generateGraphCSSProperties(currentTheme), [currentTheme]\n  );\n\n  // Get current time range - use context if available, otherwise use prop\n  const currentTimeRange = useGlobalTimeRange \n    ? timeRangeContext?.selectedRange || timeRange \n    : timeRange;\n\n  // Filter data based on time range when using global context\n  const processedData = useMemo(() => {\n    if (!useGlobalTimeRange || !timeRangeContext) {\n      return data;\n    }\n    \n    // Use context to filter data if it has date information\n    if (data.length > 0 && data[0].date) {\n      return timeRangeContext.getFilteredData(data, 'date', 'iso');\n    }\n    \n    return data;\n  }, [data, useGlobalTimeRange, timeRangeContext]);\n\n  // Auto-generate series if not provided\n  const computedSeries = useMemo((): ChartSeries[] => {\n    if (series) return series;\n    \n    // Auto-detect numeric fields for series\n    if (processedData.length === 0) return [];\n    \n    const firstPoint = processedData[0];\n    const numericKeys = Object.keys(firstPoint).filter(key => \n      key !== 'date' && \n      key !== 'label' && \n      typeof firstPoint[key] === 'number'\n    );\n    \n    return numericKeys.slice(0, 6).map((key, index) => ({\n      dataKey: key,\n      label: key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1'),\n      color: getGraphColor(\n        ['income', 'spending', 'savings', 'investments', 'debt'][index] as any || 'neutral',\n        currentTheme\n      )\n    }));\n  }, [processedData, series, currentTheme]);\n\n  // Handle time range changes\n  const handleTimeRangeChange = useCallback((range: TimeRangeOption) => {\n    if (useGlobalTimeRange && timeRangeContext) {\n      // Use global context\n      timeRangeContext.setTimeRange(range);\n    } else {\n      // Use local prop callback\n      onTimeRangeChange?.(range);\n    }\n  }, [useGlobalTimeRange, timeRangeContext, onTimeRangeChange]);\n\n  // Handle chart ready and announce changes\n  useEffect(() => {\n    if (!loading && !error && processedData.length > 0 && !isReady) {\n      setIsReady(true);\n      onChartReady?.();\n      \n      // Announce chart is ready for accessibility\n      if (accessibility.liveRegion) {\n        const seriesCount = computedSeries.length;\n        const dataCount = processedData.length;\n        setLiveAnnouncement(\n          `Chart loaded with ${dataCount} data points across ${seriesCount} data series. ${title || ''}`\n        );\n        // Clear announcement after screen reader has time to announce\n        setTimeout(() => setLiveAnnouncement(''), 3000);\n      }\n    }\n  }, [loading, error, processedData.length, isReady, onChartReady, accessibility.liveRegion, computedSeries.length, title]);\n\n  // Announce data changes\n  useEffect(() => {\n    if (isReady && accessibility.liveRegion && processedData.length > 0) {\n      const timeoutId = setTimeout(() => {\n        setLiveAnnouncement(`Chart data updated with ${processedData.length} data points`);\n        setTimeout(() => setLiveAnnouncement(''), 2000);\n      }, 500); // Debounce rapid updates\n      \n      return () => clearTimeout(timeoutId);\n    }\n  }, [processedData, isReady, accessibility.liveRegion]);\n\n  // Handle errors\n  useEffect(() => {\n    if (error && onChartError) {\n      const errorObj = error instanceof Error ? error : new Error(error);\n      onChartError(errorObj);\n    }\n  }, [error, onChartError]);\n\n  // Render chart based on type\n  const renderChart = useCallback(() => {\n    const commonProps = {\n      data: processedData,\n      margin: { top: 20, right: 30, left: 20, bottom: 20 },\n    };\n\n    const renderAxis = () => (\n      <>\n        {xAxis.show && (\n          <XAxis\n            dataKey=\"date\"\n            axisLine={false}\n            tickLine={false}\n            tick={{ \n              fontSize: appleGraphTokens.typography.fontSize.axisLabel,\n              fill: getTextColor('secondary', currentTheme)\n            }}\n            tickFormatter={xAxis.tickFormatter}\n            domain={xAxis.domain}\n            type={xAxis.type}\n            scale={xAxis.scale}\n          />\n        )}\n        {yAxis.show && (\n          <YAxis\n            axisLine={false}\n            tickLine={false}\n            tick={{ \n              fontSize: appleGraphTokens.typography.fontSize.axisLabel,\n              fill: getTextColor('secondary', currentTheme)\n            }}\n            tickFormatter={yAxis.tickFormatter}\n            domain={yAxis.domain}\n            type={yAxis.type}\n            scale={yAxis.scale}\n          />\n        )}\n      </>\n    );\n\n    const renderGrid = () => (\n      grid.show && (\n        <CartesianGrid\n          strokeDasharray={grid.strokeDasharray || \"3 3\"}\n          horizontal={grid.horizontal}\n          vertical={grid.vertical}\n          stroke={appleGraphTokens.colors.separator[currentTheme]}\n          strokeWidth={grid.strokeWidth || 1}\n          opacity={grid.opacity || 0.5}\n        />\n      )\n    );\n\n    const renderTooltip = () => (\n      tooltip.show && (\n        <Tooltip\n          content={customTooltip}\n          formatter={tooltip.formatter}\n          labelFormatter={tooltip.labelFormatter}\n          contentStyle={{\n            backgroundColor: getBackgroundColor('system', 'secondary', currentTheme),\n            border: `1px solid ${appleGraphTokens.colors.separator[currentTheme]}`,\n            borderRadius: appleGraphTokens.borderRadius.tooltip,\n            fontSize: appleGraphTokens.typography.fontSize.tooltip,\n            color: getTextColor('primary', currentTheme),\n            ...tooltip.contentStyle\n          }}\n          animationDuration={animation.enable && !shouldReduceMotion() ? animation.duration : 0}\n          // Enhanced accessibility for tooltips\n          wrapperStyle={{ \n            ...tooltip.contentStyle,\n            zIndex: 1000\n          }}\n          itemStyle={{\n            color: getTextColor('primary', currentTheme)\n          }}\n          allowEscapeViewBox={{ x: true, y: true }}\n        />\n      )\n    );\n\n    const renderLegend = () => (\n      legend.show && (\n        <Legend\n          content={customLegend}\n          verticalAlign={legend.position === 'top' ? 'top' : 'bottom'}\n          align={legend.align}\n          layout={legend.layout}\n          wrapperStyle={{\n            fontSize: appleGraphTokens.typography.fontSize.legend,\n            color: getTextColor('secondary', currentTheme)\n          }}\n        />\n      )\n    );\n\n    switch (type) {\n      case 'line':\n        return (\n          <LineChart {...commonProps}>\n            {renderGrid()}\n            {renderAxis()}\n            {renderTooltip()}\n            {renderLegend()}\n            {computedSeries.map((serie) => (\n              <Line\n                key={serie.dataKey}\n                type=\"monotone\"\n                dataKey={serie.dataKey}\n                stroke={serie.color}\n                strokeWidth={serie.strokeWidth || appleGraphTokens.dimensions.strokeWidth.medium}\n                dot={false}\n                connectNulls={serie.connectNulls}\n                hide={serie.hide}\n                animationDuration={animation.enable && !shouldReduceMotion() ? animation.duration : 0}\n                animationEasing={animation.easing}\n              />\n            ))}\n          </LineChart>\n        );\n\n      case 'area':\n        return (\n          <AreaChart {...commonProps}>\n            {renderGrid()}\n            {renderAxis()}\n            {renderTooltip()}\n            {renderLegend()}\n            {computedSeries.map((serie) => (\n              <Area\n                key={serie.dataKey}\n                type=\"monotone\"\n                dataKey={serie.dataKey}\n                stroke={serie.color}\n                fill={serie.color}\n                fillOpacity={serie.fillOpacity || 0.2}\n                strokeWidth={serie.strokeWidth || appleGraphTokens.dimensions.strokeWidth.thin}\n                connectNulls={serie.connectNulls}\n                hide={serie.hide}\n                animationDuration={animation.enable && !shouldReduceMotion() ? animation.duration : 0}\n                animationEasing={animation.easing}\n              />\n            ))}\n          </AreaChart>\n        );\n\n      case 'bar':\n      case 'stackedBar':\n        return (\n          <BarChart {...commonProps}>\n            {renderGrid()}\n            {renderAxis()}\n            {renderTooltip()}\n            {renderLegend()}\n            {computedSeries.map((serie) => (\n              <Bar\n                key={serie.dataKey}\n                dataKey={serie.dataKey}\n                fill={serie.color}\n                hide={serie.hide}\n                stackId={type === 'stackedBar' ? 'stack' : undefined}\n                animationDuration={animation.enable && !shouldReduceMotion() ? animation.duration : 0}\n                animationEasing={animation.easing}\n              />\n            ))}\n          </BarChart>\n        );\n\n      default:\n        return null;\n    }\n  }, [\n    processedData, type, computedSeries, currentTheme, xAxis, yAxis, grid, tooltip, legend, \n    animation, customTooltip, customLegend\n  ]);\n\n  // Show loading state\n  if (loading || loadingState === 'loading') {\n    return (\n      <div \n        ref={containerRef}\n        className={cn(\"w-full\", className)}\n        style={{ ...cssProperties, ...style }}\n        {...rest}\n      >\n        <ChartSkeleton\n          type={type}\n          height={dimensions.height}\n          showTitle={!!title}\n          showLegend={legend.show}\n        />\n      </div>\n    );\n  }\n\n  // Show error state\n  if (error || loadingState === 'error') {\n    return (\n      <div \n        ref={containerRef}\n        className={cn(\"w-full\", className)}\n        style={{ ...cssProperties, ...style }}\n        {...rest}\n      >\n        <ChartHeader title={title} subtitle={subtitle} actions={headerActions} />\n        <ChartError\n          error={error || 'Unknown error occurred'}\n          onRetry={errorConfig.onRetry}\n          showRetry={errorConfig.showRetry}\n          retryText={errorConfig.retryText}\n        />\n      </div>\n    );\n  }\n\n  // Show empty state\n  if (!processedData || processedData.length === 0) {\n    return (\n      <div \n        ref={containerRef}\n        className={cn(\"w-full\", className)}\n        style={{ ...cssProperties, ...style }}\n        {...rest}\n      >\n        <ChartHeader title={title} subtitle={subtitle} actions={headerActions} />\n        <div className=\"flex flex-col items-center justify-center h-64 text-center space-y-4\">\n          <div className=\"w-12 h-12 rounded-full bg-white/5 flex items-center justify-center\">\n            <svg className=\"w-6 h-6 text-white/40\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n            </svg>\n          </div>\n          <div className=\"space-y-2\">\n            <h3 className=\"text-lg font-medium text-white\">No data available</h3>\n            <p className=\"text-sm text-white/60\">\n              There's no data to display in this chart yet.\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Handle keyboard events for chart navigation\n  const handleKeyDown = useCallback((event: React.KeyboardEvent) => {\n    if (!accessibility.keyboardNavigation) return;\n\n    const { key, altKey, ctrlKey } = event;\n    \n    // Alt+T toggles data table (standard accessibility pattern)\n    if (altKey && key.toLowerCase() === 't') {\n      event.preventDefault();\n      setShowDataTable(prev => !prev);\n      setLiveAnnouncement(\n        showDataTable ? 'Data table hidden, returning to chart view' : 'Data table shown, displaying tabular data'\n      );\n      setTimeout(() => setLiveAnnouncement(''), 2000);\n      return;\n    }\n\n    // Add more keyboard shortcuts as needed\n    if (ctrlKey && key === 'Enter') {\n      event.preventDefault();\n      // Could trigger chart details or summary\n      setLiveAnnouncement(`Chart summary: ${title || 'Chart'} with ${processedData.length} data points`);\n      setTimeout(() => setLiveAnnouncement(''), 3000);\n    }\n  }, [accessibility.keyboardNavigation, showDataTable, title, processedData.length]);\n\n  // Main render\n  return (\n    <div \n      ref={containerRef}\n      className={cn(\"w-full chart-component\", className)}\n      style={{ ...cssProperties, ...style }}\n      role=\"img\"\n      aria-label={accessibility.ariaLabel || `${type} chart${title ? ` showing ${title}` : ''}`}\n      aria-describedby={accessibility.ariaDescribedBy}\n      onKeyDown={handleKeyDown}\n      tabIndex={accessibility.keyboardNavigation ? 0 : -1}\n      {...rest}\n    >\n      {/* Header with title and actions */}\n      <ChartHeader title={title} subtitle={subtitle} actions={\n        <>\n          {headerActions}\n          {timeControls?.show && (\n            useGlobalTimeRange ? (\n              <TimeRangeToggleRadix\n                value={currentTimeRange}\n                onChange={handleTimeRangeChange}\n                options={timeControls.options}\n                size=\"md\"\n                aria-label=\"Chart time range selection\"\n                disabled={loading || !!error}\n                showLabels={false}\n              />\n            ) : (\n              <TimeControl\n                currentRange={currentTimeRange}\n                options={timeControls.options}\n                onChange={handleTimeRangeChange}\n              />\n            )\n          )}\n        </>\n      } />\n\n      {/* Chart container */}\n      <div \n        className=\"relative\"\n        style={{ \n          height: dimensions.height,\n          minHeight: dimensions.minHeight,\n          maxHeight: dimensions.maxHeight \n        }}\n      >\n        {dimensions.responsive ? (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            {renderChart()}\n          </ResponsiveContainer>\n        ) : (\n          renderChart()\n        )}\n        \n        {children}\n      </div>\n\n      {/* Live region for accessibility announcements */}\n      {accessibility.liveRegion && liveAnnouncement && (\n        <ChartLiveRegion announcement={liveAnnouncement} />\n      )}\n\n      {/* Accessible data table alternative */}\n      {accessibility.dataTableAlternative && (showDataTable || accessibility.screenReaderSupport) && (\n        <div className={showDataTable ? '' : 'sr-only'}>\n          <ChartDataTable\n            data={processedData}\n            series={computedSeries}\n            title={title}\n          />\n        </div>\n      )}\n\n      {/* Keyboard shortcuts help */}\n      {accessibility.keyboardNavigation && (\n        <div className=\"sr-only\">\n          Press Alt+T to toggle data table view. Press Ctrl+Enter for chart summary.\n        </div>\n      )}\n    </div>\n  );\n});\n\nGraphBase.displayName = 'GraphBase';\n\n// Export memoized version\nexport default memo(GraphBase);","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/LazyChartWrapper.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/LazyChartWrapper.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * LazyChartWrapper - Optimized chart loading with IntersectionObserver\n * Reduces vendor-charts bundle by loading charts only when visible\n * Target: vendor-charts ≤ 300KB\n */\n\nimport React, { \n  useState, \n  useEffect, \n  useRef, \n  lazy, \n  Suspense, \n  ReactNode \n} from 'react';\nimport { cn } from '@/shared/lib/utils';\n\n// Chart skeleton with theme-aware styling\nconst ChartSkeleton: React.FC<{\n  height?: number;\n  className?: string;\n  showTitle?: boolean;\n  title?: string;\n}> = ({ height = 180, className, showTitle = false, title }) => (\n  <div \n    className={cn(\n      \"bg-white/[0.02] rounded-lg border border-white/[0.08] animate-pulse\",\n      \"flex flex-col justify-center items-center p-6\",\n      className\n    )}\n    style={{ height }}\n  >\n    {showTitle && title && (\n      <div className=\"w-full mb-4\">\n        <div className=\"h-5 bg-white/[0.05] rounded w-1/3 mb-2\"></div>\n        <div className=\"h-3 bg-white/[0.03] rounded w-1/2\"></div>\n      </div>\n    )}\n    \n    <div className=\"flex-1 w-full flex items-center justify-center\">\n      <div className=\"flex items-center space-x-2 text-white/60\">\n        <div className=\"w-6 h-6 border-2 border-blue-500/30 border-t-blue-500 rounded-full animate-spin\"></div>\n        <span className=\"text-sm\">Loading chart...</span>\n      </div>\n    </div>\n    \n    {/* Chart-like skeleton elements */}\n    <div className=\"w-full flex items-end justify-center space-x-1 mt-4\">\n      {[...Array(8)].map((_, i) => (\n        <div\n          key={i}\n          className=\"bg-white/[0.05] rounded-t-sm\"\n          style={{\n            width: '12px',\n            height: `${Math.random() * 30 + 10}px`,\n            animationDelay: `${i * 100}ms`,\n          }}\n        />\n      ))}\n    </div>\n  </div>\n);\n\n// Intersection Observer hook for lazy loading\nconst useIntersectionObserver = (\n  ref: React.RefObject<Element>,\n  options: IntersectionObserverInit = {}\n) => {\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  const [hasIntersected, setHasIntersected] = useState(false);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver(([entry]) => {\n      setIsIntersecting(entry.isIntersecting);\n      if (entry.isIntersecting && !hasIntersected) {\n        setHasIntersected(true);\n      }\n    }, {\n      rootMargin: '50px', // Start loading 50px before visible\n      threshold: 0.1,\n      ...options\n    });\n\n    observer.observe(element);\n\n    return () => {\n      observer.unobserve(element);\n    };\n  }, [ref, hasIntersected, options]);\n\n  return { isIntersecting, hasIntersected };\n};\n\n// Main lazy chart wrapper component\ninterface LazyChartWrapperProps {\n  children: ReactNode;\n  height?: number;\n  title?: string;\n  className?: string;\n  preload?: boolean; // Force immediate loading\n  threshold?: number; // Intersection threshold\n}\n\nexport const LazyChartWrapper: React.FC<LazyChartWrapperProps> = ({\n  children,\n  height = 180,\n  title,\n  className,\n  preload = false,\n  threshold = 0.1\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { hasIntersected } = useIntersectionObserver(containerRef, { threshold });\n  \n  const shouldLoad = preload || hasIntersected;\n\n  return (\n    <div \n      ref={containerRef}\n      className={cn(\"w-full\", className)}\n    >\n      {shouldLoad ? (\n        <Suspense \n          fallback={\n            <ChartSkeleton \n              height={height} \n              showTitle={!!title}\n              title={title}\n              className={className}\n            />\n          }\n        >\n          {children}\n        </Suspense>\n      ) : (\n        <ChartSkeleton \n          height={height} \n          showTitle={!!title}\n          title={title}\n          className={className}\n        />\n      )}\n    </div>\n  );\n};\n\n// Performance utilities\nexport const chartPerformance = {\n  // Preload charts for better UX on fast connections\n  preloadCharts: (): void => {\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      if (connection?.effectiveType === '4g' && !connection?.saveData) {\n        // Preload on fast connections only\n        import('recharts');\n      }\n    }\n  },\n\n  // Get optimal loading strategy based on device capabilities\n  getLoadingStrategy: (): 'immediate' | 'intersection' | 'defer' => {\n    // Check device capabilities\n    if ('deviceMemory' in navigator) {\n      const memory = (navigator as any).deviceMemory;\n      if (memory <= 2) return 'defer';\n      if (memory >= 8) return 'immediate';\n    }\n    \n    return 'intersection';\n  },\n\n  // Monitor chart loading performance\n  trackChartLoad: (chartType: string, startTime: number): void => {\n    const loadTime = performance.now() - startTime;\n    console.log(`[Chart Performance] ${chartType} loaded in ${loadTime.toFixed(2)}ms`);\n    \n    // Send to analytics in production\n    if (import.meta.env.PROD && 'sendBeacon' in navigator) {\n      navigator.sendBeacon('/api/performance/chart', JSON.stringify({\n        chartType,\n        loadTime,\n        timestamp: Date.now()\n      }));\n    }\n  }\n};\n\nexport default LazyChartWrapper; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/LineChart.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/LineChart.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * LineChart component tests\n * Basic functionality and Apple-style features testing\n */\n\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport { describe, it, expect } from 'vitest';\nimport { LineChart } from './LineChart';\n\n// Mock data for testing\nconst mockData = [\n  { date: '2023-01-01', value: 1000, revenue: 5000, expenses: 3000 },\n  { date: '2023-02-01', value: 1200, revenue: 5500, expenses: 3200 },\n  { date: '2023-03-01', value: 1100, revenue: 5200, expenses: 3400 },\n  { date: '2023-04-01', value: 1300, revenue: 5800, expenses: 3100 },\n  { date: '2023-05-01', value: 1500, revenue: 6000, expenses: 2900 },\n];\n\ndescribe('LineChart', () => {\n  it('renders without crashing', () => {\n    render(\n      <LineChart\n        data={mockData}\n        title=\"Test Chart\"\n      />\n    );\n    \n    expect(screen.getByText('Test Chart')).toBeInTheDocument();\n  });\n\n  it('handles empty data gracefully', () => {\n    render(\n      <LineChart\n        data={[]}\n        title=\"Empty Chart\"\n      />\n    );\n    \n    expect(screen.getByText('No data available')).toBeInTheDocument();\n  });\n\n  it('displays trend analysis when enabled', () => {\n    render(\n      <LineChart\n        data={mockData}\n        title=\"Trend Chart\"\n        trendAnalysis={true}\n        series={[\n          {\n            dataKey: 'value',\n            label: 'Value',\n            color: '#007AFF'\n          }\n        ]}\n      />\n    );\n    \n    // Should show a trend indicator (percentage change)\n    expect(screen.getByText(/[+-]\\d+\\.\\d%/)).toBeInTheDocument();\n  });\n\n  it('supports multi-series configuration', () => {\n    render(\n      <LineChart\n        data={mockData}\n        title=\"Multi-Series Chart\"\n        multiSeries={true}\n        series={[\n          {\n            dataKey: 'revenue',\n            label: 'Revenue',\n            color: '#32D74B'\n          },\n          {\n            dataKey: 'expenses',\n            label: 'Expenses',\n            color: '#FF453A'\n          }\n        ]}\n        legend={{ show: true }}\n      />\n    );\n    \n    expect(screen.getByText('Multi-Series Chart')).toBeInTheDocument();\n  });\n\n  it('formats currency correctly when financialType is currency', () => {\n    render(\n      <LineChart\n        data={mockData}\n        title=\"Currency Chart\"\n        financialType=\"currency\"\n        series={[\n          {\n            dataKey: 'value',\n            label: 'Value',\n            color: '#007AFF'\n          }\n        ]}\n      />\n    );\n    \n    expect(screen.getByText('Currency Chart')).toBeInTheDocument();\n  });\n\n  it('applies Apple-style configuration correctly', () => {\n    render(\n      <LineChart\n        data={mockData}\n        title=\"Apple Style Chart\"\n        appleAnimation={true}\n        lineConfig={{\n          smoothLines: true,\n          strokeWidth: 'medium',\n          showDots: true,\n          gradientFill: true,\n          hoverEffects: true,\n        }}\n      />\n    );\n    \n    expect(screen.getByText('Apple Style Chart')).toBeInTheDocument();\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/LineChart.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/LineChart.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * LineChart - Apple-style line chart component\n * Extends GraphBase foundation with line-specific features\n * Based on Apple Human Interface Guidelines 2025\n */\n\nimport React, { \n  memo, \n  useMemo, \n  forwardRef, \n  useCallback,\n  useImperativeHandle,\n  useRef\n} from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport { GraphBase } from './GraphBase';\nimport { \n  appleGraphTokens,\n  getGraphColor,\n  getTextColor,\n  getChartAnimationPreset,\n  shouldReduceMotion,\n  getOptimalAnimationDuration \n} from '@/theme/graph-tokens';\nimport {\n  GraphBaseProps,\n  ChartDataPoint,\n  ChartSeries,\n  ChartRef,\n  TimeRangeOption\n} from './types';\n\n// Line-specific configuration\nexport interface LineChartConfig {\n  // Line styling\n  smoothLines?: boolean;\n  strokeWidth?: 'thin' | 'medium' | 'thick';\n  lineCap?: 'round' | 'square' | 'butt';\n  lineJoin?: 'round' | 'bevel' | 'miter';\n  \n  // Point styling\n  showDots?: boolean;\n  dotSize?: 'small' | 'medium' | 'large';\n  activeDotSize?: 'small' | 'medium' | 'large';\n  \n  // Gradient fills\n  gradientFill?: boolean;\n  gradientOpacity?: number;\n  \n  // Interaction\n  hoverEffects?: boolean;\n  crosshair?: boolean;\n  \n  // Financial-specific\n  currencyFormat?: boolean;\n  percentageFormat?: boolean;\n  trendIndicators?: boolean;\n}\n\n// Extended props for LineChart\nexport interface LineChartProps extends Omit<GraphBaseProps, 'type'> {\n  lineConfig?: LineChartConfig;\n  \n  // Financial data helpers\n  financialType?: 'currency' | 'percentage' | 'number';\n  trendAnalysis?: boolean;\n  \n  // Multiple series shortcuts\n  multiSeries?: boolean;\n  seriesColors?: string[];\n  \n  // Apple-specific enhancements\n  appleAnimation?: boolean;\n  precisionReduce?: boolean;\n}\n\n// Default line chart configuration\nconst DEFAULT_LINE_CONFIG: LineChartConfig = {\n  smoothLines: true,\n  strokeWidth: 'medium',\n  lineCap: 'round',\n  lineJoin: 'round',\n  showDots: false,\n  dotSize: 'small',\n  activeDotSize: 'medium',\n  gradientFill: true,\n  gradientOpacity: 0.1,\n  hoverEffects: true,\n  crosshair: false,\n  currencyFormat: false,\n  percentageFormat: false,\n  trendIndicators: false,\n};\n\n// Stroke width mapping\nconst STROKE_WIDTH_MAP = {\n  thin: 1.5,\n  medium: 2,\n  thick: 3,\n} as const;\n\n// Dot size mapping\nconst DOT_SIZE_MAP = {\n  small: 3,\n  medium: 4,\n  large: 6,\n} as const;\n\n// Custom tooltip for financial data\nconst FinancialTooltip: React.FC<{\n  active?: boolean;\n  payload?: any[];\n  label?: string;\n  financialType?: 'currency' | 'percentage' | 'number';\n}> = memo(({ active, payload, label, financialType = 'number' }) => {\n  if (!active || !payload || !payload.length) return null;\n\n  const formatValue = (value: number) => {\n    switch (financialType) {\n      case 'currency':\n        return new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD',\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0,\n        }).format(value);\n      case 'percentage':\n        return `${value.toFixed(1)}%`;\n      default:\n        return value.toLocaleString();\n    }\n  };\n\n  const formatDate = (dateStr: string) => {\n    try {\n      const date = new Date(dateStr);\n      return date.toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      });\n    } catch {\n      return dateStr;\n    }\n  };\n\n  return (\n    <div className={cn(\n      \"bg-black/90 backdrop-blur-md rounded-xl px-4 py-3 shadow-2xl\",\n      \"border border-white/20 max-w-xs\"\n    )}>\n      <p className=\"text-white/60 text-xs font-medium mb-2\">\n        {formatDate(label || '')}\n      </p>\n      <div className=\"space-y-1\">\n        {payload.map((entry, index) => (\n          <div key={index} className=\"flex items-center justify-between space-x-3\">\n            <div className=\"flex items-center space-x-2\">\n              <div\n                className=\"w-2 h-2 rounded-full\"\n                style={{ backgroundColor: entry.color }}\n              />\n              <span className=\"text-white/80 text-xs\">\n                {entry.name}\n              </span>\n            </div>\n            <span className=\"text-white font-medium text-sm\">\n              {formatValue(entry.value)}\n            </span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n});\n\nFinancialTooltip.displayName = 'FinancialTooltip';\n\n// Main LineChart component\nexport const LineChart = forwardRef<ChartRef, LineChartProps>(({\n  // Line-specific props\n  lineConfig = {},\n  financialType = 'number',\n  trendAnalysis = false,\n  multiSeries = false,\n  seriesColors,\n  appleAnimation = true,\n  precisionReduce = true,\n  \n  // GraphBase props\n  data,\n  series,\n  title,\n  subtitle,\n  headerActions,\n  \n  // Styling\n  className,\n  style,\n  \n  // Chart configuration\n  animation,\n  tooltip,\n  \n  // Event handlers\n  onDataPointClick,\n  onDataPointHover,\n  \n  ...rest\n}, ref) => {\n  const internalRef = useRef<HTMLDivElement>(null);\n  \n  // Forward ref to internal element\n  useImperativeHandle(ref, () => internalRef.current as HTMLDivElement);\n  \n  // Merge line configuration with defaults\n  const lineConfigMerged = useMemo(() => ({\n    ...DEFAULT_LINE_CONFIG,\n    ...lineConfig,\n  }), [lineConfig]);\n\n  // Generate optimized series for line charts with Apple-standard animations\n  const optimizedSeries = useMemo((): ChartSeries[] => {\n    const hoverPreset = getChartAnimationPreset('hover');\n    \n    if (series) {\n      return series.map((serie, index) => ({\n        ...serie,\n        strokeWidth: STROKE_WIDTH_MAP[lineConfigMerged.strokeWidth || 'medium'],\n        connectNulls: true,\n        color: serie.color || (seriesColors?.[index]) || getGraphColor(\n          ['income', 'spending', 'savings', 'investments', 'debt'][index] as any || 'neutral',\n          'dark'\n        ),\n        // Apple-style hover animations\n        activeDot: {\n          r: DOT_SIZE_MAP[lineConfigMerged.activeDotSize || 'medium'],\n          fill: serie.color || getGraphColor(\n            ['income', 'spending', 'savings', 'investments', 'debt'][index] as any || 'neutral',\n            'dark'\n          ),\n          strokeWidth: 2,\n          stroke: '#ffffff',\n          style: {\n            filter: 'drop-shadow(0px 2px 4px rgba(0,0,0,0.2))',\n            transition: `all ${hoverPreset.duration}ms ${hoverPreset.easing}`,\n          }\n        },\n        dot: lineConfigMerged.showDots ? {\n          r: DOT_SIZE_MAP[lineConfigMerged.dotSize || 'small'],\n          fill: serie.color,\n          strokeWidth: 1,\n          stroke: '#ffffff',\n        } : false,\n      }));\n    }\n    \n    // Auto-generate series from data\n    if (data.length === 0) return [];\n    \n    const firstPoint = data[0];\n    const numericKeys = Object.keys(firstPoint).filter(key => \n      key !== 'date' && \n      key !== 'label' && \n      typeof firstPoint[key] === 'number'\n    );\n    \n    return numericKeys.slice(0, multiSeries ? 6 : 1).map((key, index) => {\n      const color = seriesColors?.[index] || getGraphColor(\n        ['income', 'spending', 'savings', 'investments', 'debt'][index] as any || 'neutral',\n        'dark'\n      );\n      \n      return {\n        dataKey: key,\n        label: key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1'),\n        color,\n        strokeWidth: STROKE_WIDTH_MAP[lineConfigMerged.strokeWidth || 'medium'],\n        connectNulls: true,\n        // Apple-style hover animations\n        activeDot: {\n          r: DOT_SIZE_MAP[lineConfigMerged.activeDotSize || 'medium'],\n          fill: color,\n          strokeWidth: 2,\n          stroke: '#ffffff',\n          style: {\n            filter: 'drop-shadow(0px 2px 4px rgba(0,0,0,0.2))',\n            transition: `all ${hoverPreset.duration}ms ${hoverPreset.easing}`,\n          }\n        },\n        dot: lineConfigMerged.showDots ? {\n          r: DOT_SIZE_MAP[lineConfigMerged.dotSize || 'small'],\n          fill: color,\n          strokeWidth: 1,\n          stroke: '#ffffff',\n        } : false,\n      };\n    });\n  }, [data, series, lineConfigMerged.strokeWidth, lineConfigMerged.activeDotSize, lineConfigMerged.dotSize, lineConfigMerged.showDots, multiSeries, seriesColors]);\n\n  // Optimize data for performance if needed\n  const optimizedData = useMemo(() => {\n    if (!precisionReduce || data.length <= 100) return data;\n    \n    // Simple data reduction for large datasets\n    const step = Math.ceil(data.length / 100);\n    return data.filter((_, index) => index % step === 0);\n  }, [data, precisionReduce]);\n\n  // Enhanced animation configuration with Apple standards\n  const animationConfig = useMemo(() => {\n    const lineAnimationPreset = getChartAnimationPreset('line');\n    const reducedMotion = shouldReduceMotion();\n    \n    return {\n      enable: appleAnimation && !reducedMotion,\n      duration: lineAnimationPreset.duration,\n      easing: lineAnimationPreset.easing,\n      delay: lineAnimationPreset.delay,\n      // Override with any custom animation settings\n      ...animation,\n      // Ensure reduced motion is respected\n      ...(reducedMotion && { \n        enable: false, \n        duration: 0 \n      }),\n    };\n  }, [appleAnimation, animation]);\n\n  // Custom tooltip configuration\n  const tooltipConfig = useMemo(() => ({\n    show: true,\n    ...tooltip,\n  }), [tooltip]);\n\n  // Custom tooltip component\n  const customTooltip = useCallback((props: any) => (\n    <FinancialTooltip {...props} financialType={financialType} />\n  ), [financialType]);\n\n  // Enhanced Y-axis formatter\n  const yAxisFormatter = useCallback((value: number) => {\n    if (financialType === 'currency') {\n      // Shortened currency format for axis\n      if (Math.abs(value) >= 1000000) {\n        return `$${(value / 1000000).toFixed(1)}M`;\n      }\n      if (Math.abs(value) >= 1000) {\n        return `$${(value / 1000).toFixed(0)}K`;\n      }\n      return `$${value.toFixed(0)}`;\n    }\n    \n    if (financialType === 'percentage') {\n      return `${value}%`;\n    }\n    \n    return value.toLocaleString();\n  }, [financialType]);\n\n  // Generate trend indicators if enabled\n  const trendIndicator = useMemo(() => {\n    if (!trendAnalysis || !data.length || !optimizedSeries.length) return null;\n    \n    const firstValue = data[0]?.[optimizedSeries[0].dataKey];\n    const lastValue = data[data.length - 1]?.[optimizedSeries[0].dataKey];\n    \n    if (typeof firstValue !== 'number' || typeof lastValue !== 'number') return null;\n    \n    const change = lastValue - firstValue;\n    const changePercent = (change / firstValue) * 100;\n    const isPositive = change > 0;\n    \n    return (\n      <div className=\"flex items-center space-x-2 text-sm\">\n        <div className={cn(\n          \"flex items-center space-x-1 px-2 py-1 rounded-full\",\n          isPositive ? \"bg-green-500/20 text-green-400\" : \"bg-red-500/20 text-red-400\"\n        )}>\n          <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 12 12\">\n            {isPositive ? (\n              <path d=\"M3.75 6.75L6 4.5L8.25 6.75\" stroke=\"currentColor\" strokeWidth=\"1.5\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n            ) : (\n              <path d=\"M8.25 5.25L6 7.5L3.75 5.25\" stroke=\"currentColor\" strokeWidth=\"1.5\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n            )}\n          </svg>\n          <span className=\"font-medium\">\n            {changePercent > 0 ? '+' : ''}{changePercent.toFixed(1)}%\n          </span>\n        </div>\n      </div>\n    );\n  }, [trendAnalysis, data, optimizedSeries]);\n\n  return (\n    <GraphBase\n      ref={internalRef}\n      // Core props\n      data={optimizedData}\n      type=\"line\"\n      series={optimizedSeries}\n      \n      // Header\n      title={title}\n      subtitle={subtitle}\n      headerActions={\n        <>\n          {headerActions}\n          {trendIndicator}\n        </>\n      }\n      \n      // Chart configuration\n      animation={animationConfig}\n      tooltip={tooltipConfig}\n      customTooltip={customTooltip}\n      \n      // Y-axis formatting\n      yAxis={{\n        show: true,\n        tickFormatter: yAxisFormatter,\n      }}\n      \n      // Grid configuration optimized for line charts\n      grid={{\n        show: true,\n        horizontal: true,\n        vertical: false,\n        strokeDasharray: \"2 2\",\n        opacity: 0.3,\n      }}\n      \n      // Styling\n      className={cn(\"line-chart\", className)}\n      style={style}\n      \n      // Event handlers\n      onDataPointClick={onDataPointClick}\n      onDataPointHover={onDataPointHover}\n      \n      {...rest}\n    />\n  );\n});\n\nLineChart.displayName = 'LineChart';\n\n// Export memoized version\nexport default memo(LineChart);","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/StackedBarChart.demo.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/StackedBarChart.demo.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * StackedBarChart Demo\n * Showcases Apple-style stacked bar chart capabilities for financial data\n */\n\nimport React, { useState } from 'react';\nimport { StackedBarChart, StackedBarDataPoint } from './StackedBarChart';\nimport { Button } from '@/shared/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/ui/card';\n\n// Sample spending data\nconst spendingData: StackedBarDataPoint[] = [\n  {\n    date: '2024-01',\n    label: 'January',\n    food: 800,\n    housing: 2000,\n    transportation: 300,\n    entertainment: 200,\n    utilities: 150,\n    healthcare: 100,\n    shopping: 250,\n    other: 75\n  },\n  {\n    date: '2024-02',\n    label: 'February',\n    food: 750,\n    housing: 2000,\n    transportation: 250,\n    entertainment: 180,\n    utilities: 140,\n    healthcare: 120,\n    shopping: 200,\n    other: 90\n  },\n  {\n    date: '2024-03',\n    label: 'March',\n    food: 900,\n    housing: 2000,\n    transportation: 400,\n    entertainment: 300,\n    utilities: 160,\n    healthcare: 80,\n    shopping: 350,\n    other: 60\n  },\n  {\n    date: '2024-04',\n    label: 'April',\n    food: 850,\n    housing: 2000,\n    transportation: 350,\n    entertainment: 220,\n    utilities: 155,\n    healthcare: 90,\n    shopping: 180,\n    other: 85\n  },\n  {\n    date: '2024-05',\n    label: 'May',\n    food: 920,\n    housing: 2000,\n    transportation: 380,\n    entertainment: 280,\n    utilities: 170,\n    healthcare: 110,\n    shopping: 300,\n    other: 70\n  },\n  {\n    date: '2024-06',\n    label: 'June',\n    food: 880,\n    housing: 2000,\n    transportation: 420,\n    entertainment: 350,\n    utilities: 165,\n    healthcare: 95,\n    shopping: 220,\n    other: 95\n  }\n];\n\n// Sample investment portfolio data\nconst portfolioData: StackedBarDataPoint[] = [\n  {\n    date: '2024-Q1',\n    label: 'Q1 2024',\n    stocks: 65000,\n    bonds: 20000,\n    cash: 8000,\n    crypto: 4000,\n    real_estate: 15000\n  },\n  {\n    date: '2024-Q2',\n    label: 'Q2 2024',\n    stocks: 70000,\n    bonds: 22000,\n    cash: 6000,\n    crypto: 5000,\n    real_estate: 15500\n  },\n  {\n    date: '2024-Q3',\n    label: 'Q3 2024',\n    stocks: 68000,\n    bonds: 25000,\n    cash: 7000,\n    crypto: 3500,\n    real_estate: 16000\n  },\n  {\n    date: '2024-Q4',\n    label: 'Q4 2024',\n    stocks: 75000,\n    bonds: 23000,\n    cash: 5000,\n    crypto: 6000,\n    real_estate: 16500\n  }\n];\n\n// Budget vs actual data\nconst budgetData: StackedBarDataPoint[] = [\n  {\n    date: '2024-01',\n    label: 'January',\n    budgeted_spending: 3500,\n    actual_spending: 3675,\n    variance: -175\n  },\n  {\n    date: '2024-02',\n    label: 'February',\n    budgeted_spending: 3500,\n    actual_spending: 3230,\n    variance: 270\n  },\n  {\n    date: '2024-03',\n    label: 'March',\n    budgeted_spending: 3500,\n    actual_spending: 3850,\n    variance: -350\n  },\n  {\n    date: '2024-04',\n    label: 'April',\n    budgeted_spending: 3500,\n    actual_spending: 3430,\n    variance: 70\n  },\n  {\n    date: '2024-05',\n    label: 'May',\n    budgeted_spending: 3500,\n    actual_spending: 3730,\n    variance: -230\n  },\n  {\n    date: '2024-06',\n    label: 'June',\n    budgeted_spending: 3500,\n    actual_spending: 3725,\n    variance: -225\n  }\n];\n\n// Income sources data\nconst incomeData: StackedBarDataPoint[] = [\n  {\n    date: '2024-01',\n    label: 'January',\n    salary: 8000,\n    freelance: 1200,\n    investments: 800,\n    rental: 1500\n  },\n  {\n    date: '2024-02',\n    label: 'February',\n    salary: 8000,\n    freelance: 900,\n    investments: 850,\n    rental: 1500\n  },\n  {\n    date: '2024-03',\n    label: 'March',\n    salary: 8000,\n    freelance: 1500,\n    investments: 920,\n    rental: 1500\n  },\n  {\n    date: '2024-04',\n    label: 'April',\n    salary: 8000,\n    freelance: 1100,\n    investments: 780,\n    rental: 1500\n  },\n  {\n    date: '2024-05',\n    label: 'May',\n    salary: 8000,\n    freelance: 1350,\n    investments: 890,\n    rental: 1500\n  },\n  {\n    date: '2024-06',\n    label: 'June',\n    salary: 8000,\n    freelance: 1600,\n    investments: 950,\n    rental: 1500\n  }\n];\n\nexport const StackedBarChartDemo: React.FC = () => {\n  const [selectedDataset, setSelectedDataset] = useState<'spending' | 'portfolio' | 'budget' | 'income'>('spending');\n  const [displayMode, setDisplayMode] = useState<'absolute' | 'percentage'>('absolute');\n  const [showTimeControls, setShowTimeControls] = useState(true);\n\n  const getCurrentData = () => {\n    switch (selectedDataset) {\n      case 'spending': return spendingData;\n      case 'portfolio': return portfolioData;\n      case 'budget': return budgetData;\n      case 'income': return incomeData;\n      default: return spendingData;\n    }\n  };\n\n  const getCurrentTitle = () => {\n    switch (selectedDataset) {\n      case 'spending': return 'Monthly Spending Breakdown';\n      case 'portfolio': return 'Investment Portfolio Allocation';\n      case 'budget': return 'Budget vs Actual Spending';\n      case 'income': return 'Income Sources';\n      default: return 'Financial Data';\n    }\n  };\n\n  const getCurrentSubtitle = () => {\n    switch (selectedDataset) {\n      case 'spending': return 'Expenses by category over time';\n      case 'portfolio': return 'Asset allocation across quarters';\n      case 'budget': return 'Comparing budgeted vs actual spending';\n      case 'income': return 'Revenue streams month by month';\n      default: return 'Financial analysis';\n    }\n  };\n\n  const getFinancialType = () => {\n    return displayMode === 'percentage' ? 'percentage' : 'currency';\n  };\n\n  return (\n    <div className=\"space-y-8 p-6 bg-gradient-to-b from-slate-50 to-white dark:from-slate-900 dark:to-slate-800 min-h-screen\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n            StackedBarChart Demo\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto\">\n            Apple-style stacked bar charts for financial data visualization. \n            Perfect for spending breakdowns, portfolio allocations, and budget comparisons.\n          </p>\n        </div>\n\n        {/* Controls */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Demo Controls</CardTitle>\n            <CardDescription>\n              Customize the chart appearance and data set\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Dataset Selection */}\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3 block\">\n                Dataset\n              </label>\n              <div className=\"flex flex-wrap gap-2\">\n                {[\n                  { key: 'spending', label: 'Monthly Spending' },\n                  { key: 'portfolio', label: 'Portfolio Allocation' },\n                  { key: 'budget', label: 'Budget vs Actual' },\n                  { key: 'income', label: 'Income Sources' }\n                ].map(({ key, label }) => (\n                  <Button\n                    key={key}\n                    variant={selectedDataset === key ? 'default' : 'outline'}\n                    onClick={() => setSelectedDataset(key as any)}\n                    className=\"text-sm\"\n                  >\n                    {label}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            {/* Display Mode */}\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3 block\">\n                Display Mode\n              </label>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant={displayMode === 'absolute' ? 'default' : 'outline'}\n                  onClick={() => setDisplayMode('absolute')}\n                  className=\"text-sm\"\n                >\n                  Absolute Values\n                </Button>\n                <Button\n                  variant={displayMode === 'percentage' ? 'default' : 'outline'}\n                  onClick={() => setDisplayMode('percentage')}\n                  className=\"text-sm\"\n                >\n                  Percentage\n                </Button>\n              </div>\n            </div>\n\n            {/* Additional Options */}\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3 block\">\n                Chart Options\n              </label>\n              <div className=\"flex items-center gap-4\">\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={showTimeControls}\n                    onChange={(e) => setShowTimeControls(e.target.checked)}\n                    className=\"rounded border-gray-300\"\n                  />\n                  <span className=\"text-sm text-gray-700 dark:text-gray-300\">Show Time Controls</span>\n                </label>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Chart */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <StackedBarChart\n              data={getCurrentData()}\n              title={getCurrentTitle()}\n              subtitle={getCurrentSubtitle()}\n              financialType={getFinancialType()}\n              stackedBarConfig={{\n                displayMode,\n                colorScheme: 'financial',\n                barRadius: 8,\n                hoverEffects: true,\n                animateOnLoad: true,\n                maxCategories: 8,\n                groupSmallCategories: true\n              }}\n              dimensions={{\n                height: 400,\n                responsive: true\n              }}\n              timeControls={showTimeControls ? {\n                show: true,\n                options: selectedDataset === 'portfolio' ? ['1Y', 'ALL'] : ['3M', '6M', '1Y'],\n                defaultRange: selectedDataset === 'portfolio' ? '1Y' : '6M'\n              } : undefined}\n              headerActions={\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    Export\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\">\n                    Share\n                  </Button>\n                </div>\n              }\n              onBarClick={(data, categoryKey, value) => {\n                console.log('Bar clicked:', { data, categoryKey, value });\n              }}\n              onBarHover={(data, categoryKey) => {\n                console.log('Bar hovered:', { data, categoryKey });\n              }}\n              onChartReady={() => {\n                console.log('Chart ready');\n              }}\n            />\n          </CardContent>\n        </Card>\n\n        {/* Feature Showcase Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Spending with Percentage Mode */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Spending Distribution</CardTitle>\n              <CardDescription>\n                Category breakdown as percentages\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <StackedBarChart\n                data={spendingData.slice(0, 3)}\n                stackedBarConfig={{\n                  displayMode: 'percentage',\n                  colorScheme: 'financial',\n                  maxCategories: 5\n                }}\n                dimensions={{ height: 250 }}\n                financialType=\"percentage\"\n              />\n            </CardContent>\n          </Card>\n\n          {/* Portfolio with Custom Colors */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Asset Allocation</CardTitle>\n              <CardDescription>\n                Investment portfolio breakdown\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <StackedBarChart\n                data={portfolioData.slice(0, 2)}\n                series={[\n                  { dataKey: 'stocks', label: 'Stocks', color: '#007AFF' },\n                  { dataKey: 'bonds', label: 'Bonds', color: '#32D74B' },\n                  { dataKey: 'cash', label: 'Cash', color: '#FFCC00' },\n                  { dataKey: 'crypto', label: 'Crypto', color: '#AF52DE' },\n                  { dataKey: 'real_estate', label: 'Real Estate', color: '#FF9F0A' }\n                ]}\n                stackedBarConfig={{\n                  displayMode: 'absolute',\n                  colorScheme: 'custom'\n                }}\n                dimensions={{ height: 250 }}\n                financialType=\"currency\"\n              />\n            </CardContent>\n          </Card>\n\n          {/* Income Sources */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Income Streams</CardTitle>\n              <CardDescription>\n                Monthly revenue by source\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <StackedBarChart\n                data={incomeData.slice(0, 4)}\n                stackedBarConfig={{\n                  displayMode: 'absolute',\n                  colorScheme: 'financial',\n                  showTotal: true,\n                  barRadius: 12\n                }}\n                dimensions={{ height: 250 }}\n                financialType=\"currency\"\n              />\n            </CardContent>\n          </Card>\n\n          {/* Budget Comparison */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Budget Analysis</CardTitle>\n              <CardDescription>\n                Planned vs actual spending\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <StackedBarChart\n                data={budgetData.slice(0, 4)}\n                series={[\n                  { dataKey: 'budgeted_spending', label: 'Budgeted', color: '#007AFF' },\n                  { dataKey: 'actual_spending', label: 'Actual', color: '#FF453A' }\n                ]}\n                stackedBarConfig={{\n                  displayMode: 'absolute',\n                  colorScheme: 'custom'\n                }}\n                dimensions={{ height: 250 }}\n                financialType=\"currency\"\n              />\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Features List */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>StackedBarChart Features</CardTitle>\n            <CardDescription>\n              Comprehensive Apple-style financial visualization capabilities\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {[\n                'Apple-style design with rounded corners',\n                'Financial category color coding',\n                'Absolute and percentage display modes',\n                'Interactive hover and click events',\n                'Automatic category grouping',\n                'Time range controls',\n                'Responsive layout support',\n                'Currency and percentage formatting',\n                'Smooth animations and transitions',\n                'Accessibility features (ARIA labels)',\n                'Custom tooltip with breakdown',\n                'Export and sharing capabilities',\n                'Small category consolidation',\n                'Custom color schemes',\n                'GraphBase foundation integration',\n                'TypeScript support'\n              ].map((feature, index) => (\n                <div key={index} className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full flex-shrink-0\"></div>\n                  <span className=\"text-sm text-gray-700 dark:text-gray-300\">{feature}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default StackedBarChartDemo;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/StackedBarChart.integration.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/StackedBarChart.integration.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * StackedBarChart Integration Tests\n * Comprehensive tests for financial accuracy and real-world use cases\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { StackedBarChart, StackedBarDataPoint } from './StackedBarChart';\n\n// Mock ResizeObserver\nglobal.ResizeObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}));\n\n// Real-world financial test data\nconst realBudgetData: StackedBarDataPoint[] = [\n  {\n    date: '2024-01',\n    label: 'January',\n    housing: 2000.00,\n    food: 800.50,\n    transportation: 350.25,\n    entertainment: 200.75,\n    utilities: 150.00,\n    healthcare: 120.30,\n    shopping: 250.40,\n    debt_payments: 500.00,\n    savings: 800.00,\n    other: 85.20\n  },\n  {\n    date: '2024-02',\n    label: 'February',\n    housing: 2000.00,\n    food: 750.80,\n    transportation: 280.15,\n    entertainment: 180.90,\n    utilities: 140.25,\n    healthcare: 95.75,\n    shopping: 320.60,\n    debt_payments: 500.00,\n    savings: 900.00,\n    other: 125.35\n  },\n  {\n    date: '2024-03',\n    label: 'March',\n    housing: 2000.00,\n    food: 875.25,\n    transportation: 420.80,\n    entertainment: 290.50,\n    utilities: 165.40,\n    healthcare: 210.15,\n    shopping: 180.90,\n    debt_payments: 500.00,\n    savings: 750.00,\n    other: 95.80\n  }\n];\n\nconst realPortfolioData: StackedBarDataPoint[] = [\n  {\n    date: '2024-Q1',\n    label: 'Q1 2024',\n    stocks: 325000.00,\n    bonds: 100000.00,\n    cash: 40000.00,\n    real_estate: 25000.00,\n    crypto: 10000.00\n  },\n  {\n    date: '2024-Q2',\n    label: 'Q2 2024',\n    stocks: 342500.00,\n    bonds: 105000.00,\n    cash: 35000.00,\n    real_estate: 26250.00,\n    crypto: 8750.00\n  }\n];\n\ndescribe('StackedBarChart Financial Accuracy Tests', () => {\n  describe('Currency Formatting', () => {\n    it('formats currency values correctly', () => {\n      render(\n        <StackedBarChart \n          data={realBudgetData}\n          financialType=\"currency\"\n          currencyCode=\"USD\"\n          title=\"Budget Test\"\n        />\n      );\n      \n      expect(screen.getByText('Budget Test')).toBeInTheDocument();\n    });\n\n    it('handles fractional cents correctly', () => {\n      const fractionalData = [{\n        date: '2024-01',\n        label: 'Test',\n        category1: 123.456,\n        category2: 789.123\n      }];\n      \n      render(\n        <StackedBarChart \n          data={fractionalData}\n          financialType=\"currency\"\n        />\n      );\n      \n      // Should round to nearest cent\n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n  });\n\n  describe('Percentage Calculations', () => {\n    it('calculates percentages accurately', () => {\n      render(\n        <StackedBarChart \n          data={realBudgetData}\n          stackedBarConfig={{ displayMode: 'percentage' }}\n          financialType=\"percentage\"\n        />\n      );\n      \n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n\n    it('ensures percentages sum to 100%', () => {\n      const testData = [{\n        date: '2024-01',\n        label: 'Test',\n        cat1: 25,\n        cat2: 25,\n        cat3: 25,\n        cat4: 25\n      }];\n      \n      render(\n        <StackedBarChart \n          data={testData}\n          stackedBarConfig={{ displayMode: 'percentage' }}\n          financialType=\"percentage\"\n        />\n      );\n      \n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n  });\n\n  describe('Data Aggregation', () => {\n    it('correctly aggregates spending categories', () => {\n      const total = realBudgetData[0];\n      const expectedTotal = 2000 + 800.5 + 350.25 + 200.75 + 150 + 120.3 + 250.4 + 500 + 800 + 85.2;\n      \n      render(\n        <StackedBarChart \n          data={[total]}\n          stackedBarConfig={{ showTotal: true }}\n        />\n      );\n      \n      expect(screen.getByRole('img')).toBeInTheDocument();\n      // In real implementation, would verify calculated totals\n    });\n\n    it('handles zero and negative values appropriately', () => {\n      const dataWithZeros = [{\n        date: '2024-01',\n        label: 'Test',\n        positive: 1000,\n        zero: 0,\n        negative: -500\n      }];\n      \n      render(\n        <StackedBarChart \n          data={dataWithZeros}\n        />\n      );\n      \n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n  });\n\n  describe('Investment Portfolio Accuracy', () => {\n    it('handles large investment values correctly', () => {\n      render(\n        <StackedBarChart \n          data={realPortfolioData}\n          financialType=\"currency\"\n          title=\"Portfolio Test\"\n        />\n      );\n      \n      expect(screen.getByText('Portfolio Test')).toBeInTheDocument();\n    });\n\n    it('maintains precision with large numbers', () => {\n      const largeValueData = [{\n        date: '2024-01',\n        label: 'Million Dollar Portfolio',\n        stocks: 1250000.50,\n        bonds: 750000.25,\n        cash: 125000.75\n      }];\n      \n      render(\n        <StackedBarChart \n          data={largeValueData}\n          financialType=\"currency\"\n        />\n      );\n      \n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n  });\n\n  describe('Category Grouping Logic', () => {\n    it('groups small categories correctly', () => {\n      const dataWithSmallCategories = [{\n        date: '2024-01',\n        label: 'Test',\n        major1: 1000,\n        major2: 800,\n        major3: 600,\n        small1: 50,\n        small2: 30,\n        small3: 20,\n        small4: 15,\n        small5: 10\n      }];\n      \n      render(\n        <StackedBarChart \n          data={dataWithSmallCategories}\n          stackedBarConfig={{\n            maxCategories: 5,\n            groupSmallCategories: true,\n            smallCategoryThreshold: 0.05\n          }}\n        />\n      );\n      \n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n\n    it('preserves category ordering by value', () => {\n      render(\n        <StackedBarChart \n          data={realBudgetData}\n          stackedBarConfig={{\n            maxCategories: 8,\n            groupSmallCategories: true\n          }}\n        />\n      );\n      \n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n  });\n\n  describe('Time Range Filtering', () => {\n    it('filters data correctly by time range', () => {\n      render(\n        <StackedBarChart \n          data={realBudgetData}\n          timeRange=\"3M\"\n          timeControls={{\n            show: true,\n            options: ['1M', '3M', '6M'],\n            defaultRange: '3M'\n          }}\n        />\n      );\n      \n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n  });\n\n  describe('Performance with Large Datasets', () => {\n    it('handles 100+ data points efficiently', () => {\n      const largeDataset = Array.from({ length: 100 }, (_, i) => ({\n        date: `2024-${String(i + 1).padStart(2, '0')}`,\n        label: `Day ${i + 1}`,\n        category1: Math.floor(Math.random() * 1000 + 100),\n        category2: Math.floor(Math.random() * 800 + 50),\n        category3: Math.floor(Math.random() * 600 + 25)\n      }));\n\n      const startTime = performance.now();\n      render(\n        <StackedBarChart \n          data={largeDataset}\n          stackedBarConfig={{ animateOnLoad: false }}\n        />\n      );\n      const endTime = performance.now();\n      \n      expect(endTime - startTime).toBeLessThan(500); // Should render quickly\n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('handles malformed data gracefully', () => {\n      const malformedData = [\n        {\n          date: '2024-01',\n          label: 'Test',\n          category1: 'invalid' as any,\n          category2: null as any,\n          category3: undefined as any,\n          category4: 100\n        }\n      ];\n      \n      render(\n        <StackedBarChart \n          data={malformedData}\n        />\n      );\n      \n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n\n    it('handles missing date fields', () => {\n      const missingDateData = [\n        {\n          label: 'No Date',\n          category1: 100,\n          category2: 200\n        } as any\n      ];\n      \n      render(\n        <StackedBarChart \n          data={missingDateData}\n        />\n      );\n      \n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n  });\n\n  describe('Financial Data Validation', () => {\n    it('validates budget totals match sum of categories', () => {\n      const budgetMonth = realBudgetData[0];\n      const calculatedTotal = Object.entries(budgetMonth)\n        .filter(([key]) => key !== 'date' && key !== 'label' && key !== 'total')\n        .reduce((sum, [_, value]) => sum + (value as number), 0);\n      \n      render(\n        <StackedBarChart \n          data={[budgetMonth]}\n          stackedBarConfig={{ showTotal: true }}\n        />\n      );\n      \n      // Verify the chart renders without calculation errors\n      expect(screen.getByRole('img')).toBeInTheDocument();\n      \n      // In a real test environment, you'd verify the calculated total\n      expect(calculatedTotal).toBeGreaterThan(0);\n    });\n\n    it('validates portfolio allocation percentages', () => {\n      const portfolioQuarter = realPortfolioData[0];\n      const totalValue = Object.entries(portfolioQuarter)\n        .filter(([key]) => key !== 'date' && key !== 'label' && key !== 'total')\n        .reduce((sum, [_, value]) => sum + (value as number), 0);\n      \n      render(\n        <StackedBarChart \n          data={[portfolioQuarter]}\n          stackedBarConfig={{ displayMode: 'percentage' }}\n          financialType=\"percentage\"\n        />\n      );\n      \n      expect(screen.getByRole('img')).toBeInTheDocument();\n      expect(totalValue).toBe(500000); // Verify our test data total\n    });\n  });\n\n  describe('Accessibility and Interaction', () => {\n    it('provides proper ARIA labels for financial data', () => {\n      render(\n        <StackedBarChart \n          data={realBudgetData}\n          accessibility={{\n            ariaLabel: 'Monthly budget breakdown showing spending by category',\n            keyboardNavigation: true\n          }}\n        />\n      );\n      \n      expect(screen.getByLabelText(/Monthly budget breakdown/)).toBeInTheDocument();\n    });\n\n    it('handles keyboard navigation correctly', () => {\n      render(\n        <StackedBarChart \n          data={realBudgetData}\n          accessibility={{ keyboardNavigation: true }}\n        />\n      );\n      \n      const chart = screen.getByRole('img');\n      expect(chart).toBeInTheDocument();\n      \n      // In a full implementation, would test tab navigation\n    });\n  });\n\n  describe('Real-world Budget Scenarios', () => {\n    it('handles budget overage scenarios', () => {\n      const overBudgetData = [{\n        date: '2024-01',\n        label: 'Over Budget Month',\n        budgeted: 3000,\n        actual: 3500,\n        overage: 500\n      }];\n      \n      render(\n        <StackedBarChart \n          data={overBudgetData}\n          series={[\n            { dataKey: 'budgeted', label: 'Budgeted', color: '#007AFF' },\n            { dataKey: 'actual', label: 'Actual', color: '#FF453A' },\n            { dataKey: 'overage', label: 'Over Budget', color: '#FF9F0A' }\n          ]}\n        />\n      );\n      \n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n\n    it('handles irregular spending patterns', () => {\n      const irregularData = [\n        {\n          date: '2024-01',\n          label: 'Normal Month',\n          spending: 3000\n        },\n        {\n          date: '2024-02',\n          label: 'Vacation Month',\n          spending: 8000\n        },\n        {\n          date: '2024-03',\n          label: 'Recovery Month',\n          spending: 1500\n        }\n      ];\n      \n      render(\n        <StackedBarChart \n          data={irregularData}\n          financialType=\"currency\"\n        />\n      );\n      \n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n  });\n});\n\n// Utility function tests\ndescribe('Financial Calculation Utilities', () => {\n  describe('Currency Formatting', () => {\n    it('formats various currency amounts correctly', () => {\n      const amounts = [0, 0.99, 1.00, 123.45, 1234.56, 12345.67, 123456.78];\n      \n      amounts.forEach(amount => {\n        const formatted = new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD',\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 2\n        }).format(amount);\n        \n        expect(formatted).toMatch(/^\\$[\\d,]+(\\.\\d{2})?$/);\n      });\n    });\n  });\n\n  describe('Percentage Calculations', () => {\n    it('calculates category percentages accurately', () => {\n      const data = { cat1: 250, cat2: 500, cat3: 750 };\n      const total = Object.values(data).reduce((sum, val) => sum + val, 0);\n      \n      Object.entries(data).forEach(([key, value]) => {\n        const percentage = (value / total) * 100;\n        expect(percentage).toBeGreaterThan(0);\n        expect(percentage).toBeLessThanOrEqual(100);\n      });\n      \n      const totalPercentage = Object.values(data)\n        .reduce((sum, value) => sum + (value / total) * 100, 0);\n      \n      expect(Math.round(totalPercentage)).toBe(100);\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/StackedBarChart.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/StackedBarChart.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * StackedBarChart Test Suite\n * Tests for Apple-style stacked bar chart component\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { StackedBarChart, StackedBarDataPoint } from './StackedBarChart';\n\n// Mock data for testing\nconst mockSpendingData: StackedBarDataPoint[] = [\n  {\n    date: '2024-01',\n    label: 'January',\n    food: 800,\n    housing: 2000,\n    transportation: 300,\n    entertainment: 200,\n    utilities: 150,\n    other: 100\n  },\n  {\n    date: '2024-02',\n    label: 'February',\n    food: 750,\n    housing: 2000,\n    transportation: 250,\n    entertainment: 180,\n    utilities: 140,\n    other: 120\n  },\n  {\n    date: '2024-03',\n    label: 'March',\n    food: 900,\n    housing: 2000,\n    transportation: 400,\n    entertainment: 300,\n    utilities: 160,\n    other: 80\n  }\n];\n\nconst mockInvestmentData: StackedBarDataPoint[] = [\n  {\n    date: '2024-Q1',\n    label: 'Q1 2024',\n    stocks: 50000,\n    bonds: 20000,\n    cash: 5000,\n    crypto: 3000\n  },\n  {\n    date: '2024-Q2',\n    label: 'Q2 2024',\n    stocks: 55000,\n    bonds: 22000,\n    cash: 4000,\n    crypto: 4000\n  }\n];\n\n// Mock ResizeObserver for tests\nglobal.ResizeObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}));\n\ndescribe('StackedBarChart', () => {\n  it('renders without crashing', () => {\n    render(<StackedBarChart data={mockSpendingData} />);\n    expect(screen.getByRole('img')).toBeInTheDocument();\n  });\n\n  it('displays chart title when provided', () => {\n    const title = 'Monthly Spending Breakdown';\n    render(<StackedBarChart data={mockSpendingData} title={title} />);\n    expect(screen.getByText(title)).toBeInTheDocument();\n  });\n\n  it('displays subtitle when provided', () => {\n    const subtitle = 'Spending by category';\n    render(<StackedBarChart data={mockSpendingData} subtitle={subtitle} />);\n    expect(screen.getByText(subtitle)).toBeInTheDocument();\n  });\n\n  it('shows loading state', () => {\n    render(<StackedBarChart data={[]} loading={true} />);\n    expect(screen.getByText(/No data available/)).toBeInTheDocument();\n  });\n\n  it('shows error state', () => {\n    const errorMessage = 'Failed to load chart data';\n    render(<StackedBarChart data={[]} error={errorMessage} />);\n    expect(screen.getByText(/Unable to load chart/)).toBeInTheDocument();\n    expect(screen.getByText(errorMessage)).toBeInTheDocument();\n  });\n\n  it('renders time controls when enabled', () => {\n    render(\n      <StackedBarChart \n        data={mockSpendingData}\n        timeControls={{\n          show: true,\n          options: ['1M', '3M', '6M'],\n          defaultRange: '3M'\n        }}\n      />\n    );\n    expect(screen.getByRole('tablist')).toBeInTheDocument();\n    expect(screen.getByText('1M')).toBeInTheDocument();\n    expect(screen.getByText('3M')).toBeInTheDocument();\n    expect(screen.getByText('6M')).toBeInTheDocument();\n  });\n\n  it('handles time range changes', () => {\n    const onTimeRangeChange = jest.fn();\n    render(\n      <StackedBarChart \n        data={mockSpendingData}\n        timeControls={{\n          show: true,\n          options: ['1M', '3M', '6M'],\n          defaultRange: '3M'\n        }}\n        onTimeRangeChange={onTimeRangeChange}\n      />\n    );\n    \n    fireEvent.click(screen.getByText('6M'));\n    expect(onTimeRangeChange).toHaveBeenCalledWith('6M');\n  });\n\n  it('applies custom className', () => {\n    const customClass = 'custom-chart-class';\n    const { container } = render(\n      <StackedBarChart data={mockSpendingData} className={customClass} />\n    );\n    expect(container.firstChild).toHaveClass(customClass);\n  });\n\n  it('applies custom styles', () => {\n    const customStyle = { backgroundColor: 'red' };\n    const { container } = render(\n      <StackedBarChart data={mockSpendingData} style={customStyle} />\n    );\n    expect(container.firstChild).toHaveStyle('background-color: red');\n  });\n\n  it('renders with financial color scheme', () => {\n    render(\n      <StackedBarChart \n        data={mockSpendingData}\n        stackedBarConfig={{ colorScheme: 'financial' }}\n      />\n    );\n    // Chart should render without errors\n    expect(screen.getByRole('img')).toBeInTheDocument();\n  });\n\n  it('handles percentage display mode', () => {\n    render(\n      <StackedBarChart \n        data={mockSpendingData}\n        stackedBarConfig={{ displayMode: 'percentage' }}\n      />\n    );\n    expect(screen.getByRole('img')).toBeInTheDocument();\n  });\n\n  it('handles currency formatting', () => {\n    render(\n      <StackedBarChart \n        data={mockSpendingData}\n        financialType=\"currency\"\n        currencyCode=\"USD\"\n      />\n    );\n    expect(screen.getByRole('img')).toBeInTheDocument();\n  });\n\n  it('handles investment data correctly', () => {\n    render(\n      <StackedBarChart \n        data={mockInvestmentData}\n        title=\"Portfolio Allocation\"\n        financialType=\"currency\"\n      />\n    );\n    expect(screen.getByText('Portfolio Allocation')).toBeInTheDocument();\n    expect(screen.getByRole('img')).toBeInTheDocument();\n  });\n\n  it('calls onChartReady when chart is ready', async () => {\n    const onChartReady = jest.fn();\n    render(\n      <StackedBarChart \n        data={mockSpendingData}\n        onChartReady={onChartReady}\n      />\n    );\n    \n    await waitFor(() => {\n      expect(onChartReady).toHaveBeenCalled();\n    });\n  });\n\n  it('handles empty data gracefully', () => {\n    render(<StackedBarChart data={[]} />);\n    expect(screen.getByText(/No data available/)).toBeInTheDocument();\n  });\n\n  it('auto-generates series from data', () => {\n    render(<StackedBarChart data={mockSpendingData} />);\n    // Should render without errors and auto-detect categories\n    expect(screen.getByRole('img')).toBeInTheDocument();\n  });\n\n  it('supports custom series configuration', () => {\n    const customSeries = [\n      { dataKey: 'food', label: 'Food & Dining', color: '#FF453A' },\n      { dataKey: 'housing', label: 'Housing & Utilities', color: '#FF9F0A' }\n    ];\n    \n    render(\n      <StackedBarChart \n        data={mockSpendingData}\n        series={customSeries}\n      />\n    );\n    expect(screen.getByRole('img')).toBeInTheDocument();\n  });\n\n  it('handles small category grouping', () => {\n    render(\n      <StackedBarChart \n        data={mockSpendingData}\n        stackedBarConfig={{\n          maxCategories: 3,\n          groupSmallCategories: true,\n          smallCategoryThreshold: 0.1\n        }}\n      />\n    );\n    expect(screen.getByRole('img')).toBeInTheDocument();\n  });\n\n  it('supports accessibility features', () => {\n    render(\n      <StackedBarChart \n        data={mockSpendingData}\n        accessibility={{\n          ariaLabel: 'Monthly spending breakdown chart',\n          keyboardNavigation: true\n        }}\n      />\n    );\n    expect(screen.getByLabelText(/Monthly spending breakdown chart/)).toBeInTheDocument();\n  });\n\n  it('handles bar click events', () => {\n    const onBarClick = jest.fn();\n    render(\n      <StackedBarChart \n        data={mockSpendingData}\n        onBarClick={onBarClick}\n        stackedBarConfig={{ clickableSegments: true }}\n      />\n    );\n    \n    // Note: In a real test, you'd simulate clicking on a bar segment\n    // This would require more sophisticated interaction testing\n    expect(screen.getByRole('img')).toBeInTheDocument();\n  });\n\n  it('handles bar hover events', () => {\n    const onBarHover = jest.fn();\n    render(\n      <StackedBarChart \n        data={mockSpendingData}\n        onBarHover={onBarHover}\n        stackedBarConfig={{ hoverEffects: true }}\n      />\n    );\n    \n    // Note: In a real test, you'd simulate hovering over a bar segment\n    expect(screen.getByRole('img')).toBeInTheDocument();\n  });\n\n  it('renders header actions', () => {\n    const headerActions = (\n      <button data-testid=\"custom-action\">Export</button>\n    );\n    \n    render(\n      <StackedBarChart \n        data={mockSpendingData}\n        title=\"Spending Chart\"\n        headerActions={headerActions}\n      />\n    );\n    \n    expect(screen.getByTestId('custom-action')).toBeInTheDocument();\n  });\n\n  it('supports different dimensions', () => {\n    render(\n      <StackedBarChart \n        data={mockSpendingData}\n        dimensions={{\n          height: 400,\n          minHeight: 300,\n          responsive: true\n        }}\n      />\n    );\n    expect(screen.getByRole('img')).toBeInTheDocument();\n  });\n\n  it('handles gradient fill option', () => {\n    render(\n      <StackedBarChart \n        data={mockSpendingData}\n        stackedBarConfig={{ gradientFill: true }}\n      />\n    );\n    expect(screen.getByRole('img')).toBeInTheDocument();\n  });\n\n  it('handles animation configuration', () => {\n    render(\n      <StackedBarChart \n        data={mockSpendingData}\n        stackedBarConfig={{ animateOnLoad: false }}\n      />\n    );\n    expect(screen.getByRole('img')).toBeInTheDocument();\n  });\n});\n\n// Additional test suite for the StackedBarTooltip component\ndescribe('StackedBarTooltip', () => {\n  it('does not render when inactive', () => {\n    const { container } = render(\n      <div data-testid=\"tooltip-container\">\n        {/* StackedBarTooltip would normally be rendered by Recharts */}\n      </div>\n    );\n    expect(container.firstChild).toBeInTheDocument();\n  });\n});\n\n// Performance tests\ndescribe('StackedBarChart Performance', () => {\n  it('handles large datasets efficiently', () => {\n    const largeDataset = Array.from({ length: 100 }, (_, i) => ({\n      date: `2024-${String(i + 1).padStart(2, '0')}`,\n      label: `Day ${i + 1}`,\n      category1: Math.random() * 1000,\n      category2: Math.random() * 1000,\n      category3: Math.random() * 1000\n    }));\n\n    const startTime = performance.now();\n    render(<StackedBarChart data={largeDataset} />);\n    const endTime = performance.now();\n    \n    // Should render in a reasonable time (less than 1 second)\n    expect(endTime - startTime).toBeLessThan(1000);\n  });\n});\n\n// Integration tests with real-world financial data patterns\ndescribe('StackedBarChart Financial Integration', () => {\n  it('handles budget vs actual comparison', () => {\n    const budgetData = [\n      {\n        date: '2024-01',\n        label: 'January',\n        budgeted: 3000,\n        actual: 3200,\n        variance: -200\n      }\n    ];\n    \n    render(\n      <StackedBarChart \n        data={budgetData}\n        title=\"Budget vs Actual\"\n        financialType=\"currency\"\n      />\n    );\n    expect(screen.getByText('Budget vs Actual')).toBeInTheDocument();\n  });\n\n  it('handles portfolio allocation over time', () => {\n    const portfolioData = [\n      {\n        date: '2024-Q1',\n        label: 'Q1 2024',\n        stocks: 70,\n        bonds: 20,\n        cash: 10\n      },\n      {\n        date: '2024-Q2',\n        label: 'Q2 2024',\n        stocks: 65,\n        bonds: 25,\n        cash: 10\n      }\n    ];\n    \n    render(\n      <StackedBarChart \n        data={portfolioData}\n        title=\"Portfolio Allocation\"\n        stackedBarConfig={{ displayMode: 'percentage' }}\n        financialType=\"percentage\"\n      />\n    );\n    expect(screen.getByText('Portfolio Allocation')).toBeInTheDocument();\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/StackedBarChart.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/StackedBarChart.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * StackedBarChart - Apple-style stacked bar chart component\n * Extends GraphBase foundation with specialized stacked bar functionality\n * Perfect for spending breakdowns, budget comparisons, and portfolio allocations\n */\n\nimport React, { memo, useMemo, useCallback, forwardRef, useImperativeHandle, useRef } from 'react';\nimport { \n  ResponsiveContainer,\n  BarChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Bar,\n  Cell\n} from 'recharts';\nimport { cn } from '@/shared/lib/utils';\nimport { \n  appleGraphTokens,\n  getGraphColor,\n  getTextColor,\n  getBackgroundColor,\n  generateGraphCSSProperties,\n  getChartAnimationPreset,\n  shouldReduceMotion,\n  getOptimalAnimationDuration \n} from '@/theme/graph-tokens';\nimport { GraphBase } from './GraphBase';\nimport { \n  ChartDataPoint, \n  ChartSeries, \n  ChartRef,\n  TimeRangeOption,\n  LoadingState,\n  AccessibilityConfig\n} from './types';\n\n// Enhanced data point interface for stacked bars\nexport interface StackedBarDataPoint extends ChartDataPoint {\n  total?: number;\n  categories?: { [key: string]: number };\n  percentages?: { [key: string]: number };\n}\n\n// Stacked bar specific configuration\nexport interface StackedBarConfig {\n  // Display modes\n  displayMode?: 'absolute' | 'percentage' | 'both';\n  showTotal?: boolean;\n  \n  // Bar styling\n  barRadius?: number;\n  barGap?: number;\n  categoryGap?: number;\n  maxBarHeight?: number;\n  \n  // Color and styling\n  colorScheme?: 'financial' | 'categorical' | 'custom';\n  gradientFill?: boolean;\n  \n  // Category management\n  maxCategories?: number;\n  groupSmallCategories?: boolean;\n  smallCategoryThreshold?: number;\n  \n  // Interactions\n  hoverEffects?: boolean;\n  clickableSegments?: boolean;\n  animateOnLoad?: boolean;\n}\n\n// Financial category mappings for automatic color assignment\nconst FINANCIAL_CATEGORY_COLORS = {\n  // Spending categories\n  food: '#FF453A',           // Apple red\n  housing: '#FF9F0A',        // Apple orange\n  transportation: '#FFCC00', // Apple yellow\n  entertainment: '#AF52DE',  // Apple purple\n  healthcare: '#FF375F',     // Apple pink\n  shopping: '#5AC8FA',       // Apple teal\n  utilities: '#32D74B',      // Apple green\n  debt_payments: '#FF3B30',  // Apple red light\n  savings: '#007AFF',        // Apple blue\n  other: '#8E8E93',          // Apple gray\n  \n  // Investment categories\n  stocks: '#007AFF',         // Apple blue\n  bonds: '#32D74B',          // Apple green\n  cash: '#FFCC00',           // Apple yellow\n  crypto: '#AF52DE',         // Apple purple\n  real_estate: '#FF9F0A',    // Apple orange\n  commodities: '#5AC8FA',    // Apple teal\n  \n  // Income categories\n  salary: '#32D74B',         // Apple green\n  freelance: '#007AFF',      // Apple blue\n  investments: '#AF52DE',    // Apple purple\n  business: '#FF9F0A',       // Apple orange\n  rental: '#5AC8FA',         // Apple teal\n};\n\n// Props interface for StackedBarChart\nexport interface StackedBarChartProps {\n  // Core data\n  data: StackedBarDataPoint[];\n  series?: ChartSeries[];\n  \n  // Header and metadata\n  title?: string;\n  subtitle?: string;\n  headerActions?: React.ReactNode;\n  \n  // Stacked bar configuration\n  stackedBarConfig?: StackedBarConfig;\n  \n  // Financial formatting\n  financialType?: 'currency' | 'percentage' | 'number';\n  currencyCode?: string;\n  \n  // Chart dimensions and styling\n  dimensions?: {\n    height?: number;\n    minHeight?: number;\n    maxHeight?: number;\n    responsive?: boolean;\n  };\n  className?: string;\n  style?: React.CSSProperties;\n  \n  // Time controls\n  timeRange?: TimeRangeOption;\n  timeControls?: {\n    show: boolean;\n    options: TimeRangeOption[];\n    defaultRange: TimeRangeOption;\n  };\n  onTimeRangeChange?: (range: TimeRangeOption) => void;\n  \n  // State management\n  loading?: boolean;\n  loadingState?: LoadingState;\n  error?: string | Error;\n  \n  // Accessibility\n  accessibility?: AccessibilityConfig;\n  \n  // Event handlers\n  onBarClick?: (data: StackedBarDataPoint, categoryKey: string, value: number) => void;\n  onBarHover?: (data: StackedBarDataPoint | null, categoryKey: string | null) => void;\n  onChartReady?: () => void;\n  \n  // Advanced\n  customTooltip?: React.ComponentType<any>;\n  customLegend?: React.ComponentType<any>;\n  children?: React.ReactNode;\n}\n\n// Enhanced tooltip for stacked bars\nconst StackedBarTooltip: React.FC<{\n  active?: boolean;\n  payload?: any[];\n  label?: string;\n  financialType?: 'currency' | 'percentage' | 'number';\n  displayMode?: 'absolute' | 'percentage' | 'both';\n}> = memo(({ active, payload, label, financialType = 'currency', displayMode = 'absolute' }) => {\n  if (!active || !payload || !payload.length) return null;\n\n  const formatValue = useCallback((value: number, type: 'currency' | 'percentage' | 'number') => {\n    switch (type) {\n      case 'currency':\n        return new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD',\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 2\n        }).format(value);\n      case 'percentage':\n        return `${value.toFixed(1)}%`;\n      case 'number':\n        return value.toLocaleString();\n      default:\n        return value.toString();\n    }\n  }, []);\n\n  // Calculate total for percentage display\n  const total = payload.reduce((sum, entry) => sum + (entry.value || 0), 0);\n\n  return (\n    <div className=\"bg-black/90 backdrop-blur-sm border border-white/10 rounded-lg p-3 shadow-lg\">\n      <p className=\"text-white font-medium mb-2\">{label}</p>\n      <div className=\"space-y-1\">\n        {payload.map((entry, index) => (\n          <div key={index} className=\"flex items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <div \n                className=\"w-3 h-3 rounded-sm\"\n                style={{ backgroundColor: entry.color }}\n              />\n              <span className=\"text-white/80 text-sm capitalize\">\n                {entry.dataKey?.replace(/_/g, ' ')}\n              </span>\n            </div>\n            <div className=\"text-right\">\n              <span className=\"text-white font-medium\">\n                {formatValue(entry.value, financialType)}\n              </span>\n              {displayMode === 'both' && total > 0 && (\n                <span className=\"text-white/60 text-xs ml-2\">\n                  ({((entry.value / total) * 100).toFixed(1)}%)\n                </span>\n              )}\n            </div>\n          </div>\n        ))}\n        {displayMode !== 'percentage' && (\n          <div className=\"border-t border-white/10 pt-2 mt-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-white/60 text-sm\">Total:</span>\n              <span className=\"text-white font-medium\">\n                {formatValue(total, financialType)}\n              </span>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nStackedBarTooltip.displayName = 'StackedBarTooltip';\n\n// Main StackedBarChart component\nexport const StackedBarChart = forwardRef<ChartRef, StackedBarChartProps>(({\n  data,\n  series,\n  title,\n  subtitle,\n  headerActions,\n  stackedBarConfig = {},\n  financialType = 'currency',\n  currencyCode = 'USD',\n  dimensions = { height: 300, responsive: true },\n  className,\n  style,\n  timeRange,\n  timeControls,\n  onTimeRangeChange,\n  loading = false,\n  loadingState = 'idle',\n  error,\n  accessibility = { keyboardNavigation: true },\n  onBarClick,\n  onBarHover,\n  onChartReady,\n  customTooltip,\n  customLegend,\n  children,\n  ...rest\n}, ref) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  \n  // Expose ref imperatively\n  useImperativeHandle(ref, () => containerRef.current as HTMLDivElement);\n\n  // Destructure stacked bar config with defaults\n  const {\n    displayMode = 'absolute',\n    showTotal = true,\n    barRadius = 8,\n    barGap = 4,\n    categoryGap = 16,\n    colorScheme = 'financial',\n    gradientFill = false,\n    maxCategories = 8,\n    groupSmallCategories = true,\n    smallCategoryThreshold = 0.05,\n    hoverEffects = true,\n    clickableSegments = true,\n    animateOnLoad = true\n  } = stackedBarConfig;\n\n  // Auto-generate series if not provided\n  const computedSeries = useMemo((): ChartSeries[] => {\n    if (series) return series;\n    \n    if (data.length === 0) return [];\n    \n    // Collect all category keys from data\n    const categoryKeys = new Set<string>();\n    data.forEach(point => {\n      Object.keys(point).forEach(key => {\n        if (key !== 'date' && key !== 'label' && key !== 'total' && key !== 'categories' && key !== 'percentages') {\n          if (typeof point[key] === 'number') {\n            categoryKeys.add(key);\n          }\n        }\n      });\n    });\n    \n    const categories = Array.from(categoryKeys);\n    \n    // Sort categories by total value (largest first)\n    if (groupSmallCategories) {\n      const categoryTotals = categories.map(key => ({\n        key,\n        total: data.reduce((sum, point) => sum + (point[key] as number || 0), 0)\n      }));\n      \n      categoryTotals.sort((a, b) => b.total - a.total);\n      \n      // Group small categories if needed\n      if (categoryTotals.length > maxCategories) {\n        const mainCategories = categoryTotals.slice(0, maxCategories - 1);\n        const otherCategories = categoryTotals.slice(maxCategories - 1);\n        \n        return [\n          ...mainCategories.map(({ key }, index) => ({\n            dataKey: key,\n            label: key.charAt(0).toUpperCase() + key.slice(1).replace(/_/g, ' '),\n            color: FINANCIAL_CATEGORY_COLORS[key as keyof typeof FINANCIAL_CATEGORY_COLORS] || \n                   getGraphColor(['income', 'spending', 'savings', 'investments', 'debt'][index % 5] as any, 'dark')\n          })),\n          {\n            dataKey: 'other',\n            label: 'Other',\n            color: '#8E8E93' // Apple gray\n          }\n        ];\n      }\n      \n      return categoryTotals.map(({ key }, index) => ({\n        dataKey: key,\n        label: key.charAt(0).toUpperCase() + key.slice(1).replace(/_/g, ' '),\n        color: FINANCIAL_CATEGORY_COLORS[key as keyof typeof FINANCIAL_CATEGORY_COLORS] || \n               getGraphColor(['income', 'spending', 'savings', 'investments', 'debt'][index % 5] as any, 'dark')\n      }));\n    }\n    \n    return categories.slice(0, maxCategories).map((key, index) => ({\n      dataKey: key,\n      label: key.charAt(0).toUpperCase() + key.slice(1).replace(/_/g, ' '),\n      color: FINANCIAL_CATEGORY_COLORS[key as keyof typeof FINANCIAL_CATEGORY_COLORS] || \n             getGraphColor(['income', 'spending', 'savings', 'investments', 'debt'][index % 5] as any, 'dark')\n    }));\n  }, [data, series, maxCategories, groupSmallCategories]);\n\n  // Process data for percentage mode\n  const processedData = useMemo(() => {\n    if (displayMode === 'absolute') return data;\n    \n    return data.map(point => {\n      const total = computedSeries.reduce((sum, serie) => {\n        return sum + (point[serie.dataKey] as number || 0);\n      }, 0);\n      \n      const processed = { ...point };\n      \n      if (displayMode === 'percentage' && total > 0) {\n        computedSeries.forEach(serie => {\n          const value = point[serie.dataKey] as number || 0;\n          processed[serie.dataKey] = (value / total) * 100;\n        });\n      }\n      \n      processed.total = total;\n      return processed;\n    });\n  }, [data, computedSeries, displayMode]);\n\n  // Format value for display\n  const formatValue = useCallback((value: number) => {\n    if (displayMode === 'percentage') {\n      return `${value.toFixed(1)}%`;\n    }\n    \n    switch (financialType) {\n      case 'currency':\n        return new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: currencyCode,\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 2\n        }).format(value);\n      case 'percentage':\n        return `${value.toFixed(1)}%`;\n      case 'number':\n        return value.toLocaleString();\n      default:\n        return value.toString();\n    }\n  }, [displayMode, financialType, currencyCode]);\n\n  // Handle bar click events\n  const handleBarClick = useCallback((data: any, index: number) => {\n    if (!clickableSegments || !onBarClick) return;\n    \n    // Find which segment was clicked\n    const point = processedData[index];\n    if (point) {\n      // For now, we'll just trigger with the first series key\n      // In a real implementation, you'd determine which segment was clicked\n      const firstSeries = computedSeries[0];\n      if (firstSeries) {\n        onBarClick(point as StackedBarDataPoint, firstSeries.dataKey, point[firstSeries.dataKey] as number);\n      }\n    }\n  }, [clickableSegments, onBarClick, processedData, computedSeries]);\n\n  // Handle bar hover events\n  const handleBarHover = useCallback((state: any) => {\n    if (!hoverEffects || !onBarHover) return;\n    \n    if (state.isTooltipActive && state.activePayload && state.activePayload.length > 0) {\n      const point = state.activePayload[0].payload as StackedBarDataPoint;\n      const categoryKey = state.activePayload[0].dataKey;\n      onBarHover(point, categoryKey);\n    } else {\n      onBarHover(null, null);\n    }\n  }, [hoverEffects, onBarHover]);\n\n  // Custom legend component\n  const renderLegend = useCallback(() => {\n    if (customLegend) {\n      return React.createElement(customLegend);\n    }\n    \n    return (\n      <div className=\"flex flex-wrap justify-center gap-4 mt-4\">\n        {computedSeries.map((serie) => (\n          <div key={serie.dataKey} className=\"flex items-center gap-2\">\n            <div \n              className=\"w-3 h-3 rounded-sm\"\n              style={{ backgroundColor: serie.color }}\n            />\n            <span className=\"text-white/80 text-sm\">{serie.label}</span>\n          </div>\n        ))}\n      </div>\n    );\n  }, [computedSeries, customLegend]);\n\n  // Generate CSS properties for theme support\n  const cssProperties = useMemo(() => \n    generateGraphCSSProperties('dark'), []\n  );\n\n  // Use GraphBase for core functionality\n  return (\n    <GraphBase\n      ref={containerRef}\n      data={processedData}\n      type=\"stackedBar\"\n      series={computedSeries}\n      title={title}\n      subtitle={subtitle}\n      headerActions={headerActions}\n      timeRange={timeRange}\n      timeControls={timeControls}\n      onTimeRangeChange={onTimeRangeChange}\n      dimensions={dimensions}\n      className={cn(\"stacked-bar-chart\", className)}\n      style={{ ...cssProperties, ...style }}\n      loading={loading}\n      loadingState={loadingState}\n      error={error}\n      accessibility={accessibility}\n      onChartReady={onChartReady}\n      customTooltip={customTooltip || StackedBarTooltip}\n      customLegend={renderLegend}\n      animation={useMemo(() => {\n        const barAnimationPreset = getChartAnimationPreset('stacked');\n        const reducedMotion = shouldReduceMotion();\n        \n        return {\n          enable: animateOnLoad && !reducedMotion,\n          duration: barAnimationPreset.duration, // 400ms for staggered bars\n          easing: barAnimationPreset.easing,     // iOS ease-out\n          delay: barAnimationPreset.delay,       // No delay for bars\n          // Ensure reduced motion is respected\n          ...(reducedMotion && { \n            enable: false, \n            duration: 0,\n            delay: 0 \n          }),\n        };\n      }, [animateOnLoad])}\n      {...rest}\n    >\n      {children}\n    </GraphBase>\n  );\n});\n\nStackedBarChart.displayName = 'StackedBarChart';\n\n// Export memoized version\nexport default memo(StackedBarChart);","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/TimeRangeDemo.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/TimeRangeDemo.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * TimeRangeDemo - Demo component to test TimeRange integration\n * Shows how to use TimeRangeProvider, context, and components together\n */\n\nimport React, { memo } from 'react';\nimport { TimeRangeProvider } from '@/context/TimeRangeContext';\nimport { useTimeRange } from '@/hooks/useTimeRange';\nimport TimeRangeToggleRadix from './TimeRangeToggleRadix';\nimport { GraphBase } from './GraphBase';\n\n// Mock data for demonstration\nconst generateMockData = (range: string) => {\n  const days = range === '1W' ? 7 : range === '1M' ? 30 : range === '3M' ? 90 : 365;\n  const data = [];\n  const now = new Date();\n  \n  for (let i = days; i >= 0; i--) {\n    const date = new Date(now.getTime() - (i * 24 * 60 * 60 * 1000));\n    data.push({\n      date: date.toISOString().split('T')[0],\n      income: Math.random() * 5000 + 2000,\n      spending: Math.random() * 3000 + 1000,\n      savings: Math.random() * 1000 + 500,\n    });\n  }\n  \n  return data;\n};\n\n// Inner component that uses the context\nconst TimeRangeDemo: React.FC = memo(() => {\n  const { \n    selectedRange, \n    setTimeRange, \n    rangeLabel, \n    getFilteredData \n  } = useTimeRange({\n    stabilizeCallbacks: true,\n    memoizeData: true\n  });\n\n  // Generate mock data and filter it\n  const allData = generateMockData('1Y');\n  const filteredData = getFilteredData(allData, 'date', 'iso');\n\n  return (\n    <div className=\"p-6 space-y-6 bg-slate-900 min-h-screen\">\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-2xl font-bold text-white\">\n          TimeRange Integration Demo\n        </h1>\n        <p className=\"text-white/70\">\n          Current range: <span className=\"text-blue-400 font-medium\">{rangeLabel}</span>\n        </p>\n        <p className=\"text-white/70\">\n          Data points: <span className=\"text-green-400 font-medium\">{filteredData.length}</span>\n        </p>\n      </div>\n\n      {/* Standalone TimeRangeToggle */}\n      <div className=\"space-y-4\">\n        <h2 className=\"text-lg font-semibold text-white\">Standalone Time Range Toggle</h2>\n        <div className=\"flex justify-center\">\n          <TimeRangeToggleRadix\n            value={selectedRange}\n            onChange={setTimeRange}\n            size=\"md\"\n            showLabels={false}\n            aria-label=\"Standalone time range selection\"\n          />\n        </div>\n      </div>\n\n      {/* GraphBase with integrated TimeRange */}\n      <div className=\"space-y-4\">\n        <h2 className=\"text-lg font-semibold text-white\">Chart with Integrated Time Range</h2>\n        <GraphBase\n          data={allData} // Pass unfiltered data - GraphBase will filter when useGlobalTimeRange=true\n          type=\"line\"\n          title=\"Financial Overview\"\n          subtitle={`Showing ${rangeLabel.toLowerCase()} of financial data`}\n          useGlobalTimeRange={true} // Enable global time range integration\n          timeControls={{\n            show: true,\n            options: ['1W', '1M', '3M', '6M', '1Y', 'ALL'],\n            defaultRange: '1M'\n          }}\n          series={[\n            { dataKey: 'income', label: 'Income', color: '#32D74B' },\n            { dataKey: 'spending', label: 'Spending', color: '#FF453A' },\n            { dataKey: 'savings', label: 'Savings', color: '#0A84FF' }\n          ]}\n          animation={{ enable: true, duration: 600 }}\n          accessibility={{ keyboardNavigation: true }}\n        />\n      </div>\n\n      {/* Multiple charts sharing the same time range */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <GraphBase\n          data={allData}\n          type=\"area\"\n          title=\"Income vs Spending\"\n          useGlobalTimeRange={true}\n          timeControls={{ show: false }} // Hide controls on secondary charts\n          series={[\n            { dataKey: 'income', label: 'Income', color: '#32D74B' },\n            { dataKey: 'spending', label: 'Spending', color: '#FF453A' }\n          ]}\n        />\n        \n        <GraphBase\n          data={allData}\n          type=\"bar\"\n          title=\"Savings Trend\"\n          useGlobalTimeRange={true}\n          timeControls={{ show: false }}\n          series={[\n            { dataKey: 'savings', label: 'Savings', color: '#0A84FF' }\n          ]}\n        />\n      </div>\n\n      {/* Debug information */}\n      <div className=\"mt-8 p-4 bg-white/5 rounded-lg border border-white/10\">\n        <h3 className=\"text-sm font-medium text-white mb-2\">Debug Information</h3>\n        <div className=\"text-xs text-white/60 space-y-1\">\n          <div>Selected Range: {selectedRange}</div>\n          <div>Range Label: {rangeLabel}</div>\n          <div>Total Data Points: {allData.length}</div>\n          <div>Filtered Data Points: {filteredData.length}</div>\n          <div>Filter Percentage: {((filteredData.length / allData.length) * 100).toFixed(1)}%</div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nTimeRangeDemo.displayName = 'TimeRangeDemo';\n\n// Wrapper component with provider\nconst TimeRangeDemoWithProvider: React.FC = () => {\n  return (\n    <TimeRangeProvider\n      defaultRange=\"1M\"\n      persistSelection={true}\n      cacheFiltering={true}\n    >\n      <TimeRangeDemo />\n    </TimeRangeProvider>\n  );\n};\n\nexport default memo(TimeRangeDemoWithProvider);","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/TimeRangeToggle.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/TimeRangeToggle.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * TimeRangeToggle - Apple-style segmented control for time range selection\n * Based on Apple Human Interface Guidelines 2025\n * Features: Keyboard navigation, touch-friendly, smooth animations, accessibility\n */\n\nimport React, { \n  memo, \n  useCallback, \n  useRef, \n  useEffect, \n  useState,\n  forwardRef,\n  useImperativeHandle \n} from 'react';\nimport { cn } from '@/shared/lib/utils';\nimport { \n  appleGraphTokens,\n  getChartAnimationPreset,\n  shouldReduceMotion,\n  getOptimalAnimationDuration \n} from '@/theme/graph-tokens';\nimport { TimeRangeOption } from './types';\nimport * as ToggleGroup from '@radix-ui/react-toggle-group';\n\n// Apple-style segmented control props\nexport interface TimeRangeToggleProps {\n  value: TimeRangeOption;\n  onChange: (value: TimeRangeOption) => void;\n  options?: TimeRangeOption[];\n  className?: string;\n  disabled?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n  fullWidth?: boolean;\n  // Accessibility props\n  'aria-label'?: string;\n  'aria-describedby'?: string;\n  // Advanced props\n  animationDuration?: number;\n  showLabels?: boolean;\n  respectReducedMotion?: boolean;\n}\n\n// Default time range options\nconst DEFAULT_OPTIONS: TimeRangeOption[] = ['1W', '1M', '3M', '6M', '1Y', 'ALL'];\n\n// Option labels for accessibility\nconst OPTION_LABELS: Record<TimeRangeOption, string> = {\n  '1W': '1 Week',\n  '1M': '1 Month', \n  '3M': '3 Months',\n  '6M': '6 Months',\n  '1Y': '1 Year',\n  'ALL': 'All Time'\n};\n\n// Size configurations\nconst SIZE_CONFIG = {\n  sm: {\n    height: 32,\n    padding: 2,\n    fontSize: 11,\n    minTouchTarget: 36,\n  },\n  md: {\n    height: 36,\n    padding: 3,\n    fontSize: 12,\n    minTouchTarget: 44,\n  },\n  lg: {\n    height: 44,\n    padding: 4,\n    fontSize: 13,\n    minTouchTarget: 48,\n  }\n} as const;\n\nexport interface TimeRangeToggleRef {\n  focus: () => void;\n  blur: () => void;\n  selectOption: (option: TimeRangeOption) => void;\n}\n\nexport const TimeRangeToggle = forwardRef<TimeRangeToggleRef, TimeRangeToggleProps>(({\n  value,\n  onChange,\n  options = DEFAULT_OPTIONS,\n  className,\n  disabled = false,\n  size = 'md',\n  fullWidth = false,\n  'aria-label': ariaLabel = 'Time range selection',\n  'aria-describedby': ariaDescribedBy,\n  animationDuration,\n  showLabels = false,\n  respectReducedMotion = true,\n  ...rest\n}, ref) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const indicatorRef = useRef<HTMLDivElement>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [focusedIndex, setFocusedIndex] = useState(-1);\n  const optionRefs = useRef<(HTMLButtonElement | null)[]>([]);\n\n  const sizeConfig = SIZE_CONFIG[size];\n  const currentIndex = options.indexOf(value);\n  \n  // Calculate optimal animation timings based on Apple standards\n  const selectionPreset = getChartAnimationPreset('selection');\n  const hoverPreset = getChartAnimationPreset('hover');\n  const reducedMotion = respectReducedMotion && shouldReduceMotion();\n  \n  const optimalAnimationDuration = animationDuration ?? (\n    reducedMotion ? 0 : selectionPreset.duration  // 100ms for selection\n  );\n  const hoverAnimationDuration = reducedMotion ? 0 : hoverPreset.duration; // 150ms for hover\n\n  // Expose imperative methods\n  useImperativeHandle(ref, () => ({\n    focus: () => {\n      containerRef.current?.focus();\n    },\n    blur: () => {\n      document.activeElement?.dispatchEvent(new Event('blur'));\n    },\n    selectOption: (option: TimeRangeOption) => {\n      if (options.includes(option) && !disabled) {\n        onChange(option);\n      }\n    }\n  }));\n\n  // Update selection indicator position\n  const updateIndicatorPosition = useCallback(() => {\n    if (!indicatorRef.current || !optionRefs.current[currentIndex] || !isInitialized) {\n      return;\n    }\n\n    const activeButton = optionRefs.current[currentIndex];\n    const container = containerRef.current;\n    \n    if (!activeButton || !container) return;\n\n    const containerRect = container.getBoundingClientRect();\n    const buttonRect = activeButton.getBoundingClientRect();\n    \n    const left = buttonRect.left - containerRect.left - sizeConfig.padding;\n    const width = buttonRect.width;\n\n    indicatorRef.current.style.transform = `translateX(${left}px)`;\n    indicatorRef.current.style.width = `${width}px`;\n  }, [currentIndex, isInitialized, sizeConfig.padding]);\n\n  // Initialize indicator position\n  useEffect(() => {\n    if (!isInitialized && currentIndex >= 0) {\n      // Delay to ensure DOM is ready\n      requestAnimationFrame(() => {\n        setIsInitialized(true);\n        updateIndicatorPosition();\n      });\n    }\n  }, [currentIndex, isInitialized, updateIndicatorPosition]);\n\n  // Update indicator when selection changes\n  useEffect(() => {\n    if (isInitialized) {\n      updateIndicatorPosition();\n    }\n  }, [currentIndex, updateIndicatorPosition, isInitialized]);\n\n  // Handle window resize\n  useEffect(() => {\n    const handleResize = () => {\n      if (isInitialized) {\n        updateIndicatorPosition();\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [updateIndicatorPosition, isInitialized]);\n\n  // Handle option click\n  const handleOptionClick = useCallback((option: TimeRangeOption, index: number) => {\n    if (disabled) return;\n    \n    onChange(option);\n    setFocusedIndex(index);\n    \n    // Announce change to screen readers\n    const announcement = `Selected ${OPTION_LABELS[option]}`;\n    const ariaLive = document.createElement('div');\n    ariaLive.setAttribute('aria-live', 'polite');\n    ariaLive.setAttribute('aria-atomic', 'true');\n    ariaLive.className = 'sr-only';\n    ariaLive.textContent = announcement;\n    document.body.appendChild(ariaLive);\n    setTimeout(() => document.body.removeChild(ariaLive), 1000);\n  }, [disabled, onChange]);\n\n  // Handle keyboard navigation\n  const handleKeyDown = useCallback((event: React.KeyboardEvent, index: number) => {\n    if (disabled) return;\n\n    const { key } = event;\n    let newIndex = index;\n\n    switch (key) {\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        event.preventDefault();\n        newIndex = index > 0 ? index - 1 : options.length - 1;\n        break;\n      case 'ArrowRight':\n      case 'ArrowDown':\n        event.preventDefault();\n        newIndex = index < options.length - 1 ? index + 1 : 0;\n        break;\n      case 'Home':\n        event.preventDefault();\n        newIndex = 0;\n        break;\n      case 'End':\n        event.preventDefault();\n        newIndex = options.length - 1;\n        break;\n      case 'Enter':\n      case ' ':\n        event.preventDefault();\n        handleOptionClick(options[index], index);\n        return;\n      default:\n        return;\n    }\n\n    // Focus and select new option\n    if (newIndex !== index && optionRefs.current[newIndex]) {\n      optionRefs.current[newIndex]?.focus();\n      handleOptionClick(options[newIndex], newIndex);\n    }\n  }, [disabled, options, handleOptionClick]);\n\n  // Handle focus events\n  const handleOptionFocus = useCallback((index: number) => {\n    setFocusedIndex(index);\n  }, []);\n\n  const handleOptionBlur = useCallback(() => {\n    setFocusedIndex(-1);\n  }, []);\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        \"relative inline-flex items-center\",\n        \"bg-white/5 backdrop-blur-sm rounded-xl border border-white/10\",\n        \"transition-all duration-200 ease-out\",\n        fullWidth && \"w-full\",\n        disabled && \"opacity-50 cursor-not-allowed\",\n        className\n      )}\n      style={{\n        height: sizeConfig.height,\n        padding: sizeConfig.padding,\n        borderRadius: appleGraphTokens.borderRadius.md,\n      }}\n      role=\"tablist\"\n      aria-label={ariaLabel}\n      aria-describedby={ariaDescribedBy}\n      {...rest}\n    >\n      {/* Selection indicator */}\n      <div\n        ref={indicatorRef}\n        className={cn(\n          \"absolute inset-y-1 rounded-lg bg-white/25 shadow-sm border border-white/40\",\n          \"transition-all ease-out\",\n          !isInitialized && \"opacity-0\"\n        )}\n        style={{\n          transitionDuration: `${optimalAnimationDuration}ms`,\n          transitionProperty: 'transform, width',\n          transitionTimingFunction: reducedMotion ? 'ease' : selectionPreset.easing, // Apple selection easing\n        }}\n        aria-hidden=\"true\"\n      />\n\n      {/* Option buttons */}\n      {options.map((option, index) => {\n        const isSelected = option === value;\n        const isFocused = index === focusedIndex;\n        \n        return (\n          <button\n            key={option}\n            ref={(el) => { optionRefs.current[index] = el; }}\n            type=\"button\"\n            className={cn(\n              \"relative z-10 flex-1 px-3 py-1.5 text-center font-medium rounded-lg\",\n              \"focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-transparent\",\n              \"focus:bg-blue-500/15 focus:border-blue-500/40\",\n              \"active:scale-95\",\n              // Text colors based on selection state\n              isSelected \n                ? \"text-white\" \n                : \"text-white/70 hover:text-white/90\",\n              // Interactive states with Apple-standard timing\n              !disabled && \"hover:bg-white/5 active:bg-white/10\",\n              // Touch targets\n              \"min-w-0\", // Allow flex to shrink\n              disabled && \"cursor-not-allowed\",\n            )}\n            style={{\n              fontSize: sizeConfig.fontSize,\n              minHeight: sizeConfig.minTouchTarget, // iOS accessibility\n              fontFamily: appleGraphTokens.typography.fontFamily.primary,\n              fontWeight: isSelected ? 500 : 400,\n              transition: reducedMotion \n                ? 'none' \n                : `all ${hoverAnimationDuration}ms ${hoverPreset.easing}`, // Apple hover timing\n            }}\n            onClick={() => handleOptionClick(option, index)}\n            onKeyDown={(e) => handleKeyDown(e, index)}\n            onFocus={() => handleOptionFocus(index)}\n            onBlur={handleOptionBlur}\n            role=\"tab\"\n            aria-selected={isSelected}\n            aria-label={showLabels ? OPTION_LABELS[option] : option}\n            tabIndex={isSelected ? 0 : -1}\n            disabled={disabled}\n          >\n            <span className=\"truncate\">\n              {showLabels ? OPTION_LABELS[option] : option}\n            </span>\n          </button>\n        );\n      })}\n    </div>\n  );\n});\n\nTimeRangeToggle.displayName = 'TimeRangeToggle';\n\n// Export memoized version\nexport default memo(TimeRangeToggle);","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/TimeRangeToggleRadix.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/TimeRangeToggleRadix.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * TimeRangeToggleRadix - Apple-style segmented control with Radix UI accessibility\n * Based on Apple Human Interface Guidelines 2025\n * Features: Full accessibility, keyboard navigation, screen reader support\n */\n\nimport React, { memo, forwardRef, useImperativeHandle, useRef } from 'react';\nimport * as ToggleGroup from '@radix-ui/react-toggle-group';\nimport { cn } from '@/shared/lib/utils';\nimport { appleGraphTokens } from '@/theme/graph-tokens';\nimport { TimeRangeOption } from './types';\n\n// Apple-style segmented control props\nexport interface TimeRangeToggleRadixProps {\n  value: TimeRangeOption;\n  onChange: (value: TimeRangeOption) => void;\n  options?: TimeRangeOption[];\n  className?: string;\n  disabled?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n  fullWidth?: boolean;\n  // Accessibility props\n  'aria-label'?: string;\n  'aria-describedby'?: string;\n  // Advanced props\n  showLabels?: boolean;\n}\n\n// Default time range options\nconst DEFAULT_OPTIONS: TimeRangeOption[] = ['1W', '1M', '3M', '6M', '1Y', 'ALL'];\n\n// Option labels for accessibility\nconst OPTION_LABELS: Record<TimeRangeOption, string> = {\n  '1W': '1 Week',\n  '1M': '1 Month', \n  '3M': '3 Months',\n  '6M': '6 Months',\n  '1Y': '1 Year',\n  'ALL': 'All Time'\n};\n\n// Size configurations\nconst SIZE_CONFIG = {\n  sm: {\n    height: 32,\n    padding: 2,\n    fontSize: 11,\n    minTouchTarget: 36,\n  },\n  md: {\n    height: 36,\n    padding: 3,\n    fontSize: 12,\n    minTouchTarget: 44,\n  },\n  lg: {\n    height: 44,\n    padding: 4,\n    fontSize: 13,\n    minTouchTarget: 48,\n  }\n} as const;\n\nexport interface TimeRangeToggleRadixRef {\n  focus: () => void;\n  blur: () => void;\n  selectOption: (option: TimeRangeOption) => void;\n}\n\nexport const TimeRangeToggleRadix = forwardRef<TimeRangeToggleRadixRef, TimeRangeToggleRadixProps>(({\n  value,\n  onChange,\n  options = DEFAULT_OPTIONS,\n  className,\n  disabled = false,\n  size = 'md',\n  fullWidth = false,\n  'aria-label': ariaLabel = 'Time range selection',\n  'aria-describedby': ariaDescribedBy,\n  showLabels = false,\n  ...rest\n}, ref) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const sizeConfig = SIZE_CONFIG[size];\n\n  // Expose imperative methods\n  useImperativeHandle(ref, () => ({\n    focus: () => {\n      containerRef.current?.focus();\n    },\n    blur: () => {\n      document.activeElement?.dispatchEvent(new Event('blur'));\n    },\n    selectOption: (option: TimeRangeOption) => {\n      if (options.includes(option) && !disabled) {\n        onChange(option);\n      }\n    }\n  }));\n\n  // Handle value change with validation\n  const handleValueChange = (newValue: string | undefined) => {\n    if (newValue && options.includes(newValue as TimeRangeOption)) {\n      onChange(newValue as TimeRangeOption);\n      \n      // Announce change to screen readers\n      const announcement = `Selected ${OPTION_LABELS[newValue as TimeRangeOption]}`;\n      const ariaLive = document.createElement('div');\n      ariaLive.setAttribute('aria-live', 'polite');\n      ariaLive.setAttribute('aria-atomic', 'true');\n      ariaLive.className = 'sr-only';\n      ariaLive.textContent = announcement;\n      document.body.appendChild(ariaLive);\n      setTimeout(() => document.body.removeChild(ariaLive), 1000);\n    }\n  };\n\n  return (\n    <ToggleGroup.Root\n      ref={containerRef}\n      type=\"single\"\n      value={value}\n      onValueChange={handleValueChange}\n      aria-label={ariaLabel}\n      aria-describedby={ariaDescribedBy}\n      disabled={disabled}\n      className={cn(\n        \"inline-flex items-center\",\n        \"bg-white/5 backdrop-blur-sm rounded-xl border border-white/10\",\n        \"transition-all duration-200 ease-out\",\n        fullWidth && \"w-full\",\n        disabled && \"opacity-50 cursor-not-allowed\",\n        className\n      )}\n      style={{\n        height: sizeConfig.height,\n        padding: sizeConfig.padding,\n        borderRadius: appleGraphTokens.borderRadius.md,\n      }}\n      {...rest}\n    >\n      {options.map((option) => {\n        const isSelected = option === value;\n        \n        return (\n          <ToggleGroup.Item\n            key={option}\n            value={option}\n            className={cn(\n              \"flex-1 px-3 py-1.5 text-center font-medium rounded-lg\",\n              \"transition-all duration-200 ease-out\",\n              \"focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2 focus:ring-offset-transparent\",\n              \"disabled:cursor-not-allowed\",\n              // Apple-style selection states\n              \"data-[state=on]:bg-white/15 data-[state=on]:text-white data-[state=on]:shadow-sm\",\n              \"data-[state=off]:text-white/70 data-[state=off]:hover:text-white/90 data-[state=off]:hover:bg-white/5\",\n              // Interactive states\n              !disabled && \"hover:bg-white/5 active:bg-white/10 active:scale-95\",\n              // Touch targets\n              \"min-w-0\", // Allow flex to shrink\n            )}\n            style={{\n              fontSize: sizeConfig.fontSize,\n              minHeight: sizeConfig.minTouchTarget, // iOS accessibility\n              fontFamily: appleGraphTokens.typography.fontFamily.primary,\n              fontWeight: isSelected ? 500 : 400,\n            }}\n            aria-label={showLabels ? OPTION_LABELS[option] : option}\n            disabled={disabled}\n          >\n            <span className=\"truncate\">\n              {showLabels ? OPTION_LABELS[option] : option}\n            </span>\n          </ToggleGroup.Item>\n        );\n      })}\n    </ToggleGroup.Root>\n  );\n});\n\nTimeRangeToggleRadix.displayName = 'TimeRangeToggleRadix';\n\n// Export memoized version\nexport default memo(TimeRangeToggleRadix);","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Chart components barrel export\n * Apple-style financial chart components for Liquid Spark Finance\n */\n\n// Main GraphBase component\nexport { default as GraphBase } from './GraphBase';\n\n// Specialized chart components\nexport { default as LineChart } from './LineChart';\nexport { default as AreaChart } from './AreaChart';\nexport { default as StackedBarChart } from './StackedBarChart';\n\n// Time range components\nexport { default as TimeRangeToggle } from './TimeRangeToggle';\nexport { default as TimeRangeToggleRadix } from './TimeRangeToggleRadix';\n\n// Type definitions\nexport type {\n  GraphBaseProps,\n  ChartType,\n  TimeRangeOption,\n  LoadingState,\n  ChartDataPoint,\n  ChartSeries,\n  TimeControlConfig,\n  ChartDimensions,\n  AccessibilityConfig,\n  ErrorConfig,\n  AnimationConfig,\n  LegendConfig,\n  TooltipConfig,\n  GridConfig,\n  AxisConfig,\n  TimeControlProps,\n  ChartHeaderProps,\n  ChartSkeletonProps,\n  ChartErrorProps,\n  ThemeColors,\n  ChartThemeContext,\n  ChartComponent,\n  ChartRef\n} from './types';\n\n// LineChart-specific types\nexport type {\n  LineChartProps,\n  LineChartConfig\n} from './LineChart';\n\n// AreaChart-specific types\nexport type {\n  AreaChartProps,\n  AreaChartConfig\n} from './AreaChart';\n\n// StackedBarChart-specific types\nexport type {\n  StackedBarChartProps,\n  StackedBarConfig,\n  StackedBarDataPoint\n} from './StackedBarChart';\n\n// TimeRangeToggle-specific types\nexport type {\n  TimeRangeToggleProps,\n  TimeRangeToggleRef\n} from './TimeRangeToggle';\n\nexport type {\n  TimeRangeToggleRadixProps,\n  TimeRangeToggleRadixRef\n} from './TimeRangeToggleRadix';\n\n// Re-export commonly used types for convenience\nexport type { ChartConfig } from '@/shared/ui/chart';\n\n// Utility constants\nexport const CHART_TYPES = ['line', 'area', 'bar', 'stackedBar'] as const;\nexport const TIME_RANGES = ['1W', '1M', '3M', '6M', '1Y', 'ALL'] as const;\n\n// Default configurations\nexport const DEFAULT_CHART_CONFIG = {\n  dimensions: {\n    height: 300,\n    responsive: true\n  },\n  animation: {\n    enable: true,\n    duration: 800\n  },\n  accessibility: {\n    keyboardNavigation: true\n  },\n  grid: {\n    show: true,\n    horizontal: true,\n    vertical: false\n  },\n  tooltip: {\n    show: true\n  },\n  legend: {\n    show: false\n  }\n} as const;\n\n// Default time control configuration\nexport const DEFAULT_TIME_CONTROLS = {\n  show: true,\n  options: ['1W', '1M', '3M', '6M', '1Y', 'ALL'] as TimeRangeOption[],\n  defaultRange: '1M' as TimeRangeOption,\n  position: 'top' as const\n};\n\n// Performance thresholds\nexport const PERFORMANCE_THRESHOLDS = {\n  dataPoints: 1000,\n  animationReduction: 500,\n  virtualizationThreshold: 2000\n} as const;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/charts/types.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/charts/types.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * TypeScript interfaces for the Apple-style GraphBase component system\n * Based on Apple Human Interface Guidelines 2025\n */\n\nimport { ComponentProps } from 'react';\n\n// Core chart types supported by GraphBase\nexport type ChartType = 'line' | 'area' | 'bar' | 'stackedBar';\n\n// Time range options for financial charts\nexport type TimeRangeOption = '1W' | '1M' | '3M' | '6M' | '1Y' | 'ALL';\n\n// Loading states for charts\nexport type LoadingState = 'idle' | 'loading' | 'success' | 'error';\n\n// Chart data point interface - flexible for different chart types\nexport interface ChartDataPoint {\n  [key: string]: any;\n  // Common fields that most financial charts will have\n  date?: string | Date;\n  value?: number;\n  label?: string;\n}\n\n// Configuration for chart series/lines\nexport interface ChartSeries {\n  dataKey: string;\n  label: string;\n  color?: string;\n  type?: ChartType;\n  strokeWidth?: number;\n  fillOpacity?: number;\n  connectNulls?: boolean;\n  hide?: boolean;\n}\n\n// Time control configuration\nexport interface TimeControlConfig {\n  show: boolean;\n  options: TimeRangeOption[];\n  defaultRange: TimeRangeOption;\n  position?: 'top' | 'bottom';\n}\n\n// Chart dimensions and responsive behavior\nexport interface ChartDimensions {\n  height?: number;\n  minHeight?: number;\n  maxHeight?: number;\n  aspectRatio?: number;\n  responsive?: boolean;\n}\n\n// Accessibility configuration\nexport interface AccessibilityConfig {\n  title?: string;\n  description?: string;\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  keyboardNavigation?: boolean;\n  highContrast?: boolean;\n  reducedMotion?: boolean;\n  // Enhanced accessibility features\n  screenReaderSupport?: boolean;\n  dataTableAlternative?: boolean;\n  liveRegion?: boolean;\n  voiceOverSupport?: boolean;\n  touchTargetSize?: number;\n}\n\n// Error handling configuration\nexport interface ErrorConfig {\n  showRetry?: boolean;\n  retryText?: string;\n  errorMessage?: string;\n  onRetry?: () => void;\n}\n\n// Animation configuration\nexport interface AnimationConfig {\n  enable?: boolean;\n  duration?: number;\n  easing?: string;\n  delay?: number;\n  staggerDelay?: number;\n}\n\n// Legend configuration\nexport interface LegendConfig {\n  show?: boolean;\n  position?: 'top' | 'bottom' | 'left' | 'right';\n  align?: 'start' | 'center' | 'end';\n  layout?: 'horizontal' | 'vertical';\n  interactive?: boolean;\n}\n\n// Tooltip configuration\nexport interface TooltipConfig {\n  show?: boolean;\n  trigger?: 'hover' | 'click';\n  position?: 'auto' | 'top' | 'bottom' | 'left' | 'right';\n  formatter?: (value: any, name: string, props: any) => React.ReactNode;\n  labelFormatter?: (label: string) => React.ReactNode;\n  contentStyle?: React.CSSProperties;\n}\n\n// Grid configuration\nexport interface GridConfig {\n  show?: boolean;\n  horizontal?: boolean;\n  vertical?: boolean;\n  strokeDasharray?: string;\n  strokeWidth?: number;\n  opacity?: number;\n}\n\n// Axis configuration\nexport interface AxisConfig {\n  show?: boolean;\n  tickCount?: number;\n  tickSize?: number;\n  tickFormatter?: (value: any) => string;\n  domain?: [number | string, number | string];\n  type?: 'number' | 'category';\n  scale?: 'auto' | 'linear' | 'log';\n}\n\n// Main GraphBase component props interface\nexport interface GraphBaseProps {\n  // Core data and configuration\n  data: ChartDataPoint[];\n  type: ChartType;\n  series?: ChartSeries[];\n  \n  // Header configuration\n  title?: string;\n  subtitle?: string;\n  headerActions?: React.ReactNode;\n  \n  // Time controls\n  timeRange?: TimeRangeOption;\n  timeControls?: TimeControlConfig;\n  onTimeRangeChange?: (range: TimeRangeOption) => void;\n  useGlobalTimeRange?: boolean; // Use TimeRangeContext for global state\n  \n  // Dimensions and styling\n  dimensions?: ChartDimensions;\n  className?: string;\n  style?: React.CSSProperties;\n  \n  // Chart-specific configurations\n  xAxis?: AxisConfig;\n  yAxis?: AxisConfig;\n  grid?: GridConfig;\n  legend?: LegendConfig;\n  tooltip?: TooltipConfig;\n  animation?: AnimationConfig;\n  \n  // State management\n  loading?: boolean;\n  loadingState?: LoadingState;\n  error?: string | Error;\n  errorConfig?: ErrorConfig;\n  \n  // Accessibility\n  accessibility?: AccessibilityConfig;\n  \n  // Performance\n  virtualization?: boolean;\n  dataThreshold?: number;\n  \n  // Event handlers\n  onDataPointClick?: (data: ChartDataPoint, index: number) => void;\n  onDataPointHover?: (data: ChartDataPoint | null, index: number) => void;\n  onChartReady?: () => void;\n  onChartError?: (error: Error) => void;\n  \n  // Advanced configuration\n  customTooltip?: React.ComponentType<any>;\n  customLegend?: React.ComponentType<any>;\n  children?: React.ReactNode;\n}\n\n// Props for the time control component\nexport interface TimeControlProps {\n  currentRange: TimeRangeOption;\n  options: TimeRangeOption[];\n  onChange: (range: TimeRangeOption) => void;\n  position?: 'top' | 'bottom';\n  className?: string;\n}\n\n// Props for the chart header component\nexport interface ChartHeaderProps {\n  title?: string;\n  subtitle?: string;\n  actions?: React.ReactNode;\n  className?: string;\n}\n\n// Props for the loading skeleton component\nexport interface ChartSkeletonProps {\n  type: ChartType;\n  height?: number;\n  showTitle?: boolean;\n  showLegend?: boolean;\n  className?: string;\n}\n\n// Props for the error state component\nexport interface ChartErrorProps {\n  error: string | Error;\n  onRetry?: () => void;\n  showRetry?: boolean;\n  retryText?: string;\n  className?: string;\n}\n\n// Utility type for theme colors\nexport interface ThemeColors {\n  primary: string;\n  secondary: string;\n  positive: string;\n  negative: string;\n  neutral: string;\n  warning: string;\n  text: {\n    primary: string;\n    secondary: string;\n    tertiary: string;\n  };\n  background: {\n    primary: string;\n    secondary: string;\n  };\n  border: string;\n  grid: string;\n}\n\n// Context type for chart theme\nexport interface ChartThemeContext {\n  colors: ThemeColors;\n  darkMode: boolean;\n  highContrast: boolean;\n  reducedMotion: boolean;\n}\n\n// Export utility types\nexport type ChartComponent = React.ComponentType<GraphBaseProps>;\nexport type ChartRef = HTMLDivElement;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/checkbox.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/checkbox.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/collapsible.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/collapsible.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/command.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/command.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\nimport { Dialog, DialogContent } from \"@/shared/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {\n  children?: React.ReactNode;\n}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/context-menu.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/context-menu.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/dialog.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/dialog.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/drawer.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/drawer.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/dropdown-menu.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/dropdown-menu.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-lg px-3 py-2 text-sm outline-none\",\n      \"text-white/90 hover:text-white hover:bg-white/10 focus:bg-white/15 focus:text-white\",\n      \"data-[state=open]:bg-white/15 data-[state=open]:text-white transition-all duration-200\",\n      \"dark:text-white/90 dark:hover:text-white dark:hover:bg-white/10\",\n      \"light:text-slate-700 light:hover:text-slate-900 light:hover:bg-slate-100 light:focus:bg-slate-200\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-xl border p-2 shadow-2xl backdrop-blur-md\",\n      \"bg-black/95 border-white/20 text-white\",\n      \"dark:bg-black/95 dark:border-white/20 dark:text-white\",\n      \"light:bg-white/95 light:border-slate-300 light:text-slate-900\",\n      \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-xl border p-2 shadow-2xl backdrop-blur-md\",\n        \"bg-black/95 border-white/20 text-white\",\n        \"dark:bg-black/95 dark:border-white/20 dark:text-white\",\n        \"light:bg-white/95 light:border-slate-300 light:text-slate-900 light:shadow-lg\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-lg px-3 py-2 text-sm outline-none transition-all duration-200\",\n      \"text-white/90 hover:text-white hover:bg-white/10 focus:bg-white/15 focus:text-white\",\n      \"dark:text-white/90 dark:hover:text-white dark:hover:bg-white/10\",\n      \"light:text-slate-700 light:hover:text-slate-900 light:hover:bg-slate-100 light:focus:bg-slate-200\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-lg py-2 pl-8 pr-3 text-sm outline-none transition-all duration-200\",\n      \"text-white/90 hover:text-white hover:bg-white/10 focus:bg-white/15 focus:text-white\",\n      \"dark:text-white/90 dark:hover:text-white dark:hover:bg-white/10\",\n      \"light:text-slate-700 light:hover:text-slate-900 light:hover:bg-slate-100 light:focus:bg-slate-200\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-lg py-2 pl-8 pr-3 text-sm outline-none transition-all duration-200\",\n      \"text-white/90 hover:text-white hover:bg-white/10 focus:bg-white/15 focus:text-white\",\n      \"dark:text-white/90 dark:hover:text-white dark:hover:bg-white/10\",\n      \"light:text-slate-700 light:hover:text-slate-900 light:hover:bg-slate-100 light:focus:bg-slate-200\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-3 py-2 text-sm font-semibold\",\n      \"text-white/60\",\n      \"dark:text-white/60\",\n      \"light:text-slate-500\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\n      \"-mx-1 my-2 h-px\",\n      \"bg-white/20\",\n      \"dark:bg-white/20\",\n      \"light:bg-slate-300\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest\",\n        \"text-white/40\",\n        \"dark:text-white/40\",\n        \"light:text-slate-400\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/form.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/form.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/shared/lib/utils\"\nimport { Label } from \"@/shared/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/hover-card.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/hover-card.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/input-otp.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/input-otp.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/input.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/input.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/label.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/label.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/lightweight-charts.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/lightweight-charts.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Lightweight chart components to replace Recharts for simple use cases\n * Uses SVG and CSS for minimal bundle impact\n */\nimport React from 'react';\n\n// Simple data types\ninterface ChartData {\n  x: number | string;\n  y: number;\n  label?: string;\n}\n\ninterface PieData {\n  value: number;\n  label: string;\n  color: string;\n}\n\n// Utility functions\nconst formatCurrency = (value: number) => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(value);\n};\n\nconst getMinMax = (data: ChartData[]) => {\n  const values = data.map(d => d.y);\n  return {\n    min: Math.min(...values),\n    max: Math.max(...values)\n  };\n};\n\n// Simple Line Chart Component\ninterface SimpleLineChartProps {\n  data: ChartData[];\n  width?: number;\n  height?: number;\n  strokeColor?: string;\n  strokeWidth?: number;\n  showDots?: boolean;\n  className?: string;\n}\n\nexport const SimpleLineChart: React.FC<SimpleLineChartProps> = ({\n  data,\n  width = 400,\n  height = 200,\n  strokeColor = '#3B82F6',\n  strokeWidth = 2,\n  showDots = true,\n  className = ''\n}) => {\n  if (!data || data.length === 0) return null;\n\n  const { min, max } = getMinMax(data);\n  const padding = 20;\n  const chartWidth = width - padding * 2;\n  const chartHeight = height - padding * 2;\n\n  // Create path\n  const pathData = data.map((point, index) => {\n    const x = padding + (index / (data.length - 1)) * chartWidth;\n    const y = padding + (1 - (point.y - min) / (max - min)) * chartHeight;\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n\n  return (\n    <div className={`relative ${className}`}>\n      <svg width={width} height={height} className=\"overflow-visible\">\n        {/* Grid lines */}\n        <defs>\n          <pattern id=\"grid\" width=\"40\" height=\"40\" patternUnits=\"userSpaceOnUse\">\n            <path d=\"M 40 0 L 0 0 0 40\" fill=\"none\" stroke=\"rgba(255,255,255,0.1)\" strokeWidth=\"1\"/>\n          </pattern>\n        </defs>\n        <rect width={width} height={height} fill=\"url(#grid)\" opacity=\"0.3\" />\n        \n        {/* Main line */}\n        <path\n          d={pathData}\n          fill=\"none\"\n          stroke={strokeColor}\n          strokeWidth={strokeWidth}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        \n        {/* Data points */}\n        {showDots && data.map((point, index) => {\n          const x = padding + (index / (data.length - 1)) * chartWidth;\n          const y = padding + (1 - (point.y - min) / (max - min)) * chartHeight;\n          return (\n            <circle\n              key={index}\n              cx={x}\n              cy={y}\n              r=\"4\"\n              fill={strokeColor}\n              className=\"hover:r-6 transition-all duration-200\"\n            />\n          );\n        })}\n      </svg>\n      \n      {/* Tooltip container */}\n      <div className=\"absolute inset-0 pointer-events-none\">\n        {data.map((point, index) => {\n          const x = padding + (index / (data.length - 1)) * chartWidth;\n          const y = padding + (1 - (point.y - min) / (max - min)) * chartHeight;\n          return (\n            <div\n              key={index}\n              className=\"absolute opacity-0 hover:opacity-100 transition-opacity bg-black/80 text-white text-xs px-2 py-1 rounded pointer-events-auto\"\n              style={{\n                left: `${(x / width) * 100}%`,\n                top: `${(y / height) * 100}%`,\n                transform: 'translate(-50%, -100%)'\n              }}\n            >\n              {point.label || point.x}: {formatCurrency(point.y)}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\n// Simple Area Chart Component\ninterface SimpleAreaChartProps extends SimpleLineChartProps {\n  fillColor?: string;\n  gradientId?: string;\n}\n\nexport const SimpleAreaChart: React.FC<SimpleAreaChartProps> = ({\n  data,\n  width = 400,\n  height = 200,\n  strokeColor = '#3B82F6',\n  fillColor = '#3B82F6',\n  strokeWidth = 2,\n  className = '',\n  gradientId = 'areaGradient'\n}) => {\n  if (!data || data.length === 0) return null;\n\n  const { min, max } = getMinMax(data);\n  const padding = 20;\n  const chartWidth = width - padding * 2;\n  const chartHeight = height - padding * 2;\n\n  // Create area path\n  const linePath = data.map((point, index) => {\n    const x = padding + (index / (data.length - 1)) * chartWidth;\n    const y = padding + (1 - (point.y - min) / (max - min)) * chartHeight;\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n\n  // Complete area path\n  const areaPath = `${linePath} L ${padding + chartWidth} ${padding + chartHeight} L ${padding} ${padding + chartHeight} Z`;\n\n  return (\n    <div className={`relative ${className}`}>\n      <svg width={width} height={height} className=\"overflow-visible\">\n        {/* Gradient definition */}\n        <defs>\n          <linearGradient id={gradientId} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={fillColor} stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor={fillColor} stopOpacity=\"0\" />\n          </linearGradient>\n        </defs>\n        \n        {/* Area fill */}\n        <path\n          d={areaPath}\n          fill={`url(#${gradientId})`}\n          stroke=\"none\"\n        />\n        \n        {/* Top line */}\n        <path\n          d={linePath}\n          fill=\"none\"\n          stroke={strokeColor}\n          strokeWidth={strokeWidth}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    </div>\n  );\n};\n\n// Simple Pie Chart Component\ninterface SimplePieChartProps {\n  data: PieData[];\n  size?: number;\n  innerRadius?: number;\n  className?: string;\n  showLabels?: boolean;\n}\n\nexport const SimplePieChart: React.FC<SimplePieChartProps> = ({\n  data,\n  size = 200,\n  innerRadius = 0,\n  className = '',\n  showLabels = true\n}) => {\n  if (!data || data.length === 0) return null;\n\n  const total = data.reduce((sum, item) => sum + item.value, 0);\n  const center = size / 2;\n  const radius = (size - 20) / 2;\n\n  let currentAngle = -90; // Start from top\n\n  const segments = data.map((item, index) => {\n    const percentage = item.value / total;\n    const angle = percentage * 360;\n    const startAngle = currentAngle;\n    const endAngle = currentAngle + angle;\n\n    // Convert to radians\n    const startRad = (startAngle * Math.PI) / 180;\n    const endRad = (endAngle * Math.PI) / 180;\n\n    // Calculate path\n    const x1 = center + Math.cos(startRad) * radius;\n    const y1 = center + Math.sin(startRad) * radius;\n    const x2 = center + Math.cos(endRad) * radius;\n    const y2 = center + Math.sin(endRad) * radius;\n\n    const largeArcFlag = angle > 180 ? 1 : 0;\n\n    let path;\n    if (innerRadius > 0) {\n      // Donut chart\n      const innerX1 = center + Math.cos(startRad) * innerRadius;\n      const innerY1 = center + Math.sin(startRad) * innerRadius;\n      const innerX2 = center + Math.cos(endRad) * innerRadius;\n      const innerY2 = center + Math.sin(endRad) * innerRadius;\n\n      path = [\n        `M ${x1} ${y1}`,\n        `A ${radius} ${radius} 0 ${largeArcFlag} 1 ${x2} ${y2}`,\n        `L ${innerX2} ${innerY2}`,\n        `A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 0 ${innerX1} ${innerY1}`,\n        'Z'\n      ].join(' ');\n    } else {\n      // Regular pie chart\n      path = [\n        `M ${center} ${center}`,\n        `L ${x1} ${y1}`,\n        `A ${radius} ${radius} 0 ${largeArcFlag} 1 ${x2} ${y2}`,\n        'Z'\n      ].join(' ');\n    }\n\n    currentAngle += angle;\n\n    return {\n      ...item,\n      path,\n      percentage: percentage * 100,\n      midAngle: startAngle + angle / 2\n    };\n  });\n\n  return (\n    <div className={`relative ${className}`}>\n      <svg width={size} height={size}>\n        {segments.map((segment, index) => (\n          <path\n            key={index}\n            d={segment.path}\n            fill={segment.color}\n            stroke=\"rgba(255,255,255,0.1)\"\n            strokeWidth=\"2\"\n            className=\"hover:opacity-80 transition-opacity cursor-pointer\"\n          />\n        ))}\n      </svg>\n      \n      {/* Labels */}\n      {showLabels && (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"text-center space-y-1\">\n            {segments.map((segment, index) => (\n              <div key={index} className=\"flex items-center text-xs text-white/80\">\n                <div \n                  className=\"w-3 h-3 rounded mr-2\" \n                  style={{ backgroundColor: segment.color }}\n                />\n                <span>{segment.label}: {segment.percentage.toFixed(1)}%</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Simple Bar Chart Component\ninterface SimpleBarChartProps {\n  data: ChartData[];\n  width?: number;\n  height?: number;\n  barColor?: string;\n  className?: string;\n  showValues?: boolean;\n}\n\nexport const SimpleBarChart: React.FC<SimpleBarChartProps> = ({\n  data,\n  width = 400,\n  height = 200,\n  barColor = '#3B82F6',\n  className = '',\n  showValues = true\n}) => {\n  if (!data || data.length === 0) return null;\n\n  const { min, max } = getMinMax(data);\n  const padding = 20;\n  const chartWidth = width - padding * 2;\n  const chartHeight = height - padding * 2;\n  const barWidth = chartWidth / data.length * 0.8;\n  const barSpacing = chartWidth / data.length * 0.2;\n\n  return (\n    <div className={`relative ${className}`}>\n      <svg width={width} height={height}>\n        {data.map((point, index) => {\n          const x = padding + index * (barWidth + barSpacing) + barSpacing / 2;\n          const barHeight = ((point.y - min) / (max - min)) * chartHeight;\n          const y = padding + chartHeight - barHeight;\n\n          return (\n            <g key={index}>\n              <rect\n                x={x}\n                y={y}\n                width={barWidth}\n                height={barHeight}\n                fill={barColor}\n                className=\"hover:opacity-80 transition-opacity\"\n              />\n              {showValues && (\n                <text\n                  x={x + barWidth / 2}\n                  y={y - 5}\n                  textAnchor=\"middle\"\n                  className=\"fill-white text-xs\"\n                >\n                  {formatCurrency(point.y)}\n                </text>\n              )}\n            </g>\n          );\n        })}\n      </svg>\n    </div>\n  );\n};\n\n// Multi-line chart for time series data\ninterface MultiLineData {\n  [key: string]: number | string;\n}\n\ninterface LineConfig {\n  dataKey: string;\n  stroke: string;\n  label?: string;\n}\n\ninterface MultiLineChartProps {\n  data: MultiLineData[];\n  lines: LineConfig[];\n  width?: number;\n  height?: number;\n  strokeWidth?: number;\n  className?: string;\n  xAxisKey?: string;\n  showDots?: boolean;\n  showLegend?: boolean;\n}\n\nexport const MultiLineChart: React.FC<MultiLineChartProps> = ({\n  data,\n  lines,\n  width = 400,\n  height = 200,\n  strokeWidth = 2,\n  className = '',\n  xAxisKey = 'x',\n  showDots = true,\n  showLegend = true\n}) => {\n  if (!data || data.length === 0 || !lines || lines.length === 0) return null;\n\n  // Get min/max for all line data\n  const allValues = data.flatMap(item => \n    lines.map(line => Number(item[line.dataKey]) || 0)\n  );\n  const min = Math.min(...allValues);\n  const max = Math.max(...allValues);\n\n  const padding = 40;\n  const chartWidth = width - padding * 2;\n  const chartHeight = height - padding * 2 - (showLegend ? 40 : 0);\n\n  // Format date for display\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', { month: 'short', year: '2-digit' });\n  };\n\n  return (\n    <div className={`relative ${className}`}>\n      <svg width={width} height={height + (showLegend ? 40 : 0)} className=\"overflow-visible\">\n        {/* Grid lines */}\n        <defs>\n          <pattern id=\"multiGrid\" width=\"40\" height=\"30\" patternUnits=\"userSpaceOnUse\">\n            <path d=\"M 40 0 L 0 0 0 30\" fill=\"none\" stroke=\"rgba(255,255,255,0.1)\" strokeWidth=\"1\"/>\n          </pattern>\n        </defs>\n        <rect x={padding} y={padding} width={chartWidth} height={chartHeight} fill=\"url(#multiGrid)\" opacity=\"0.3\" />\n        \n        {/* Y-axis labels */}\n        <g>\n          {[0, 25, 50, 75, 100].map((value, index) => {\n            const y = padding + chartHeight - (value / 100) * chartHeight;\n            return (\n              <g key={index}>\n                <text\n                  x={padding - 10}\n                  y={y + 4}\n                  textAnchor=\"end\"\n                  className=\"fill-white text-xs\"\n                >\n                  {value}\n                </text>\n                <line\n                  x1={padding}\n                  y1={y}\n                  x2={padding + chartWidth}\n                  y2={y}\n                  stroke=\"rgba(255,255,255,0.1)\"\n                  strokeWidth=\"1\"\n                />\n              </g>\n            );\n          })}\n        </g>\n        \n        {/* X-axis labels */}\n        <g>\n          {data.map((point, index) => {\n            if (index % Math.ceil(data.length / 6) === 0) {\n              const x = padding + (index / (data.length - 1)) * chartWidth;\n              return (\n                <text\n                  key={index}\n                  x={x}\n                  y={padding + chartHeight + 20}\n                  textAnchor=\"middle\"\n                  className=\"fill-white text-xs\"\n                >\n                  {formatDate(String(point[xAxisKey]))}\n                </text>\n              );\n            }\n            return null;\n          })}\n        </g>\n\n        {/* Draw lines */}\n        {lines.map((line, lineIndex) => {\n          const pathData = data.map((point, index) => {\n            const x = padding + (index / (data.length - 1)) * chartWidth;\n            const value = Number(point[line.dataKey]) || 0;\n            const y = padding + (1 - (value - min) / (max - min)) * chartHeight;\n            return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n          }).join(' ');\n\n          return (\n            <g key={lineIndex}>\n              {/* Line path */}\n              <path\n                d={pathData}\n                fill=\"none\"\n                stroke={line.stroke}\n                strokeWidth={strokeWidth}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              />\n              \n              {/* Data points */}\n              {showDots && data.map((point, index) => {\n                const x = padding + (index / (data.length - 1)) * chartWidth;\n                const value = Number(point[line.dataKey]) || 0;\n                const y = padding + (1 - (value - min) / (max - min)) * chartHeight;\n                return (\n                  <circle\n                    key={`${lineIndex}-${index}`}\n                    cx={x}\n                    cy={y}\n                    r=\"3\"\n                    fill={line.stroke}\n                    className=\"hover:r-5 transition-all duration-200\"\n                  />\n                );\n              })}\n            </g>\n          );\n        })}\n      </svg>\n      \n      {/* Legend */}\n      {showLegend && (\n        <div className=\"flex justify-center space-x-6 mt-4\">\n          {lines.map((line, index) => (\n            <div key={index} className=\"flex items-center space-x-2\">\n              <div \n                className=\"w-4 h-4 rounded-full\" \n                style={{ backgroundColor: line.stroke }}\n              />\n              <span className=\"text-white text-xs\">\n                {line.label || line.dataKey}\n              </span>\n            </div>\n          ))}\n        </div>\n      )}\n      \n      {/* Interactive tooltip overlay */}\n      <div className=\"absolute inset-0 pointer-events-none\">\n        {data.map((point, pointIndex) => {\n          const x = padding + (pointIndex / (data.length - 1)) * chartWidth;\n          return (\n            <div\n              key={pointIndex}\n              className=\"absolute w-2 h-full pointer-events-auto group\"\n              style={{\n                left: `${(x / width) * 100}%`,\n                transform: 'translateX(-50%)'\n              }}\n            >\n              <div className=\"absolute opacity-0 group-hover:opacity-100 transition-opacity bg-black/90 text-white text-xs p-2 rounded border border-white/20 z-10 whitespace-nowrap\"\n                   style={{\n                     bottom: '100%',\n                     left: '50%',\n                     transform: 'translateX(-50%)',\n                     marginBottom: '8px'\n                   }}>\n                <div className=\"font-medium mb-1\">\n                  {formatDate(String(point[xAxisKey]))}\n                </div>\n                {lines.map((line, lineIndex) => (\n                  <div key={lineIndex} className=\"flex items-center justify-between space-x-4\">\n                    <span>{line.label || line.dataKey}:</span>\n                    <span className=\"font-medium\">{Math.round(Number(point[line.dataKey]) || 0)}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\n// Export all components\nexport default {\n  SimpleLineChart,\n  SimpleAreaChart,\n  SimplePieChart,\n  SimpleBarChart,\n  MultiLineChart\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/menubar.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/menubar.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\nimport LiquidGlassSVGFilters from '@/shared/ui/LiquidGlassSVGFilters'\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <>\n    <LiquidGlassSVGFilters />\n    <MenubarPrimitive.Root\n      ref={ref}\n      className={cn(\n        \"liquid-glass-nav flex h-12 items-center space-x-2 rounded-2xl p-2 border-0\",\n        className\n      )}\n      {...props}\n    />\n  </>\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"liquid-glass-menu-item flex cursor-default select-none items-center rounded-xl px-4 py-2 text-sm font-medium outline-none text-white/90 hover:text-white transition-all duration-300 focus:ring-2 focus:ring-blue-400/50 data-[state=open]:bg-white/10 data-[state=open]:text-white data-[state=open]:scale-105\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-xl px-3 py-2 text-sm outline-none text-white/80 hover:text-white hover:bg-white/5 focus:bg-white/10 focus:text-white data-[state=open]:bg-white/10 data-[state=open]:text-white transition-all duration-200\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"liquid-glass-card z-50 min-w-[8rem] overflow-hidden rounded-2xl border-0 p-2 text-white shadow-2xl data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"liquid-glass-card z-50 min-w-[12rem] overflow-hidden rounded-2xl border-0 p-2 text-white shadow-2xl data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-xl px-3 py-2 text-sm outline-none text-white/80 hover:text-white transition-all duration-200 hover:bg-white/5 focus:bg-white/10 focus:text-white data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-xl py-2 pl-8 pr-3 text-sm outline-none text-white/80 hover:text-white hover:bg-white/5 focus:bg-white/10 focus:text-white data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-all duration-200\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-xl py-2 pl-8 pr-3 text-sm outline-none text-white/80 hover:text-white hover:bg-white/5 focus:bg-white/10 focus:text-white data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-all duration-200\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-3 py-2 text-sm font-semibold text-white/60\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-white/10\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-white/40\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/navigation-menu.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/navigation-menu.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/pagination.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/pagination.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/shared/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/popover.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/popover.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/progress.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/progress.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/radio-group.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/radio-group.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/resizable.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/resizable.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/scroll-area.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/scroll-area.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/select.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/select.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/separator.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/separator.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/sheet.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/sheet.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/sidebar.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/sidebar.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/shared/lib/utils\"\nimport { Button } from \"@/shared/ui/button\"\nimport { Input } from \"@/shared/ui/input\"\nimport { Separator } from \"@/shared/ui/separator\"\nimport { Sheet, SheetContent } from \"@/shared/ui/sheet\"\nimport { Skeleton } from \"@/shared/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/shared/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/skeleton.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/skeleton.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from \"@/shared/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\nexport default Skeleton\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/slider.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/slider.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/sonner.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/sonner.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  return (\n    <Sonner\n      theme=\"dark\"\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/switch.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/switch.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      // Base iOS26 toggle styling - pill-shaped with proper size\n      \"peer inline-flex h-7 w-12 shrink-0 cursor-pointer items-center rounded-full transition-all duration-300 ease-out focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50\",\n      // Dark mode styling\n      \"data-[state=checked]:bg-blue-600 data-[state=unchecked]:bg-gray-600/60\",\n      // Light mode styling\n      \"dark:data-[state=checked]:bg-blue-500 dark:data-[state=unchecked]:bg-gray-500/40\",\n      // Border for better definition\n      \"border-2 border-transparent\",\n      // Smooth shadow for depth\n      \"shadow-inner\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        // iOS26 thumb styling - perfect circle with shadow\n        \"pointer-events-none block h-5 w-5 rounded-full bg-white shadow-lg ring-0 transition-all duration-300 ease-out\",\n        // Transform for smooth sliding animation\n        \"data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-1\",\n        // Enhanced shadow for iOS26 look\n        \"shadow-[0_2px_8px_rgba(0,0,0,0.2)]\",\n        // Dark mode thumb styling\n        \"dark:bg-white dark:shadow-[0_2px_8px_rgba(0,0,0,0.4)]\",\n        // Light mode thumb styling  \n        \"bg-white shadow-[0_2px_6px_rgba(0,0,0,0.15)]\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/table.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/table.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/tabs.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/tabs.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/textarea.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/textarea.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nexport type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/toast.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/toast.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/toaster.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/toaster.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useToast } from \"@/shared/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/shared/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/toggle-group.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/toggle-group.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/shared/lib/utils\"\nimport { toggleVariants } from \"@/shared/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/toggle.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/toggle.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/tooltip.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/tooltip.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/shared/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/ui/use-toast.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/ui/use-toast.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useToast, toast } from \"@/shared/hooks/use-toast\";\n\nexport { useToast, toast };\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/accountTransformers.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/accountTransformers.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// CC: Data transformation utilities for Smart Accounts Deck\nimport { AccountRowData } from '@/components/AccountDeck/AccountRow';\nimport { mockAccountsEnhanced, mockInstitutions } from '@/services/mockData';\n\n// CC: Transform account data to AccountRowData format for Smart Accounts Deck\nexport const transformToAccountRowData = (): AccountRowData[] => {\n  return mockAccountsEnhanced.map((account, index) => {\n    // CC: Calculate realistic percentage delta for each account\n    const sparklineData = account.metadata?.sparklineData || [];\n    const deltaPercentage = sparklineData.length >= 2 \n      ? ((sparklineData[sparklineData.length - 1] - sparklineData[sparklineData.length - 2]) / Math.abs(sparklineData[sparklineData.length - 2])) * 100\n      : (Math.random() - 0.5) * 10; // Random delta if no sparkline data\n\n    // CC: Get institution data with fallback\n    const institution = mockInstitutions[account.institutionName] || {\n      name: account.institutionName,\n      color: '#6366f1',\n      logo: undefined\n    };\n\n    // CC: Extract last 4 digits from account number\n    const last4 = account.metadata?.accountNumber?.slice(-4) || '0000';\n\n    // CC: Format account type for display\n    const accountType = formatAccountType(account.accountType, account.accountSubtype);\n\n    return {\n      id: account.id,\n      name: account.name,\n      institution,\n      balance: account.balance,\n      currency: account.currency,\n      sparklineData: sparklineData,\n      deltaPercentage: Number(deltaPercentage.toFixed(2)),\n      accountType,\n      last4\n    };\n  });\n};\n\n// CC: Format account type and subtype for display\nconst formatAccountType = (accountType: string, accountSubtype?: string): string => {\n  const typeMap: Record<string, string> = {\n    'depository': 'Deposit',\n    'credit': 'Credit',\n    'loan': 'Loan',\n    'investment': 'Investment'\n  };\n\n  const subtypeMap: Record<string, string> = {\n    'checking': 'Checking',\n    'savings': 'Savings',\n    'cd': 'Certificate of Deposit',\n    'credit_card': 'Credit Card',\n    'line_of_credit': 'Line of Credit',\n    'brokerage': 'Brokerage',\n    '401k': '401(k)',\n    'ira': 'IRA',\n    'roth_ira': 'Roth IRA',\n    '529': '529 Plan',\n    'student': 'Student Loan',\n    'auto': 'Auto Loan'\n  };\n\n  if (accountSubtype && subtypeMap[accountSubtype]) {\n    return subtypeMap[accountSubtype];\n  }\n\n  return typeMap[accountType] || accountType;\n};\n\n// CC: Get total account balance for Smart Accounts header\nexport const getTotalAccountBalance = (): number => {\n  return mockAccountsEnhanced.reduce((total, account) => {\n    // CC: Only count positive balances (assets, not liabilities)\n    return total + (account.balance > 0 ? account.balance : 0);\n  }, 0);\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/animation-performance.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/animation-performance.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Animation Performance Utilities\n * Centralized performance monitoring and optimization for chart animations\n * Based on Apple Human Interface Guidelines 2025\n */\n\nimport { \n  appleGraphTokens, \n  shouldReduceMotion, \n  getChartAnimationPreset \n} from '@/theme/graph-tokens';\n\n// Performance monitoring state\ninterface AnimationMetrics {\n  frameDrops: number;\n  averageFPS: number;\n  animationCount: number;\n  lastMeasurement: number;\n  performanceScore: number;\n}\n\nlet performanceState: AnimationMetrics = {\n  frameDrops: 0,\n  averageFPS: 60,\n  animationCount: 0,\n  lastMeasurement: Date.now(),\n  performanceScore: 100,\n};\n\n// Frame rate monitoring\nlet frameCount = 0;\nlet lastFrameTime = Date.now();\nlet frameRateCallbacks: ((fps: number) => void)[] = [];\n\n/**\n * Start monitoring frame rate performance\n */\nexport const startFrameRateMonitoring = (): void => {\n  if (typeof window === 'undefined') return;\n\n  const measureFrameRate = () => {\n    const now = Date.now();\n    frameCount++;\n    \n    // Measure FPS every second\n    if (now - lastFrameTime >= 1000) {\n      const fps = Math.round((frameCount * 1000) / (now - lastFrameTime));\n      performanceState.averageFPS = fps;\n      \n      // Detect frame drops (below 55 FPS)\n      if (fps < 55) {\n        performanceState.frameDrops++;\n      }\n      \n      // Update performance score\n      performanceState.performanceScore = Math.min(100, (fps / 60) * 100);\n      \n      // Notify callbacks\n      frameRateCallbacks.forEach(callback => callback(fps));\n      \n      frameCount = 0;\n      lastFrameTime = now;\n    }\n    \n    requestAnimationFrame(measureFrameRate);\n  };\n  \n  requestAnimationFrame(measureFrameRate);\n};\n\n/**\n * Subscribe to frame rate updates\n */\nexport const onFrameRateUpdate = (callback: (fps: number) => void): (() => void) => {\n  frameRateCallbacks.push(callback);\n  \n  return () => {\n    const index = frameRateCallbacks.indexOf(callback);\n    if (index > -1) {\n      frameRateCallbacks.splice(index, 1);\n    }\n  };\n};\n\n/**\n * Get current performance metrics\n */\nexport const getPerformanceMetrics = (): AnimationMetrics => {\n  return { ...performanceState };\n};\n\n/**\n * Optimized animation configuration based on current performance\n */\nexport const getOptimizedAnimationConfig = (\n  chartType: 'line' | 'area' | 'bar' | 'stacked' | 'hover' | 'selection',\n  forceOptimization = false\n) => {\n  const basePreset = getChartAnimationPreset(chartType);\n  const reducedMotion = shouldReduceMotion();\n  const lowPerformance = performanceState.performanceScore < 80 || forceOptimization;\n  \n  // Disable animations for reduced motion\n  if (reducedMotion) {\n    return {\n      duration: 0,\n      easing: 'ease',\n      delay: 0,\n      enabled: false,\n    };\n  }\n  \n  // Optimize for low performance\n  if (lowPerformance) {\n    return {\n      duration: Math.min(basePreset.duration, 300), // Cap at 300ms\n      easing: 'ease-out', // Use simpler easing\n      delay: 0, // Remove delays\n      enabled: true,\n    };\n  }\n  \n  // Full quality for good performance\n  return {\n    duration: basePreset.duration,\n    easing: basePreset.easing,\n    delay: basePreset.delay,\n    enabled: true,\n  };\n};\n\n/**\n * Animation scheduler to prevent too many concurrent animations\n */\nclass AnimationScheduler {\n  private activeAnimations = new Set<string>();\n  private queue: Array<{ id: string; callback: () => void; priority: number }> = [];\n  private maxConcurrent: number;\n  \n  constructor() {\n    this.maxConcurrent = appleGraphTokens.animation.performance.maxConcurrentAnimations;\n  }\n  \n  /**\n   * Schedule an animation with priority\n   */\n  schedule(id: string, callback: () => void, priority = 0): Promise<void> {\n    return new Promise((resolve) => {\n      const execute = () => {\n        this.activeAnimations.add(id);\n        \n        // Wrap callback to clean up when done\n        const wrappedCallback = () => {\n          try {\n            callback();\n          } finally {\n            this.activeAnimations.delete(id);\n            this.processQueue();\n            resolve();\n          }\n        };\n        \n        // Execute immediately or queue\n        if (this.activeAnimations.size < this.maxConcurrent) {\n          wrappedCallback();\n        } else {\n          this.queue.push({ id, callback: wrappedCallback, priority });\n          this.queue.sort((a, b) => b.priority - a.priority); // Higher priority first\n        }\n      };\n      \n      execute();\n    });\n  }\n  \n  /**\n   * Process queued animations\n   */\n  private processQueue(): void {\n    while (this.queue.length > 0 && this.activeAnimations.size < this.maxConcurrent) {\n      const next = this.queue.shift();\n      if (next) {\n        next.callback();\n      }\n    }\n  }\n  \n  /**\n   * Cancel an animation\n   */\n  cancel(id: string): void {\n    this.activeAnimations.delete(id);\n    this.queue = this.queue.filter(item => item.id !== id);\n    this.processQueue();\n  }\n  \n  /**\n   * Cancel all animations\n   */\n  cancelAll(): void {\n    this.activeAnimations.clear();\n    this.queue = [];\n  }\n  \n  /**\n   * Get current animation count\n   */\n  getActiveCount(): number {\n    return this.activeAnimations.size;\n  }\n}\n\n// Global animation scheduler instance\nexport const animationScheduler = new AnimationScheduler();\n\n/**\n * Performance-aware CSS animation helper\n */\nexport const createPerformantAnimation = (\n  element: HTMLElement,\n  keyframes: Keyframe[],\n  options: KeyframeAnimationOptions,\n  chartType: 'line' | 'area' | 'bar' | 'stacked' | 'hover' | 'selection' = 'hover'\n): Animation | null => {\n  if (typeof window === 'undefined') return null;\n  \n  const config = getOptimizedAnimationConfig(chartType);\n  \n  if (!config.enabled) {\n    return null;\n  }\n  \n  // Add will-change for GPU acceleration\n  if (appleGraphTokens.animation.performance.enableWillChange) {\n    element.style.willChange = 'transform, opacity';\n  }\n  \n  // Create optimized animation\n  const animation = element.animate(keyframes, {\n    ...options,\n    duration: config.duration,\n    easing: config.easing,\n  });\n  \n  // Clean up will-change when done\n  animation.addEventListener('finish', () => {\n    element.style.willChange = 'auto';\n  });\n  \n  return animation;\n};\n\n/**\n * React hook for performance-aware animations\n */\nexport const usePerformantAnimation = () => {\n  const metrics = getPerformanceMetrics();\n  \n  return {\n    metrics,\n    shouldOptimize: metrics.performanceScore < 80,\n    getConfig: getOptimizedAnimationConfig,\n    schedule: animationScheduler.schedule.bind(animationScheduler),\n    cancel: animationScheduler.cancel.bind(animationScheduler),\n  };\n};\n\n/**\n * Initialize performance monitoring\n */\nexport const initializeAnimationPerformance = (): void => {\n  if (typeof window !== 'undefined') {\n    startFrameRateMonitoring();\n    \n    // Log performance metrics in development\n    if (process.env.NODE_ENV === 'development') {\n      onFrameRateUpdate((fps) => {\n        if (fps < 55) {\n          console.warn(`Chart animation performance warning: ${fps} FPS`);\n        }\n      });\n    }\n  }\n};\n\n// Auto-initialize in browser environment\nif (typeof window !== 'undefined') {\n  initializeAnimationPerformance();\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/browserCrypto.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/browserCrypto.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Web Crypto API utilities to replace crypto-js\n * Provides AES-256-GCM encryption, SHA-256 hashing, and secure random generation\n * Compatible with VueniSecureStorage and other crypto operations\n */\n\n// Convert string to ArrayBuffer\nconst stringToArrayBuffer = (str: string): ArrayBuffer => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str);\n};\n\n// Convert ArrayBuffer to string\nconst arrayBufferToString = (buffer: ArrayBuffer): string => {\n  const decoder = new TextDecoder();\n  return decoder.decode(buffer);\n};\n\n// Convert ArrayBuffer to hex string\nconst arrayBufferToHex = (buffer: ArrayBuffer): string => {\n  const bytes = new Uint8Array(buffer);\n  return Array.from(bytes, byte => byte.toString(16).padStart(2, '0')).join('');\n};\n\n// Convert hex string to ArrayBuffer\nconst hexToArrayBuffer = (hex: string): ArrayBuffer => {\n  const bytes = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    bytes[i / 2] = parseInt(hex.substr(i, 2), 16);\n  }\n  return bytes.buffer;\n};\n\n// Generate cryptographically secure random bytes\nexport const generateSecureRandom = (length: number): string => {\n  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n    const array = new Uint8Array(length);\n    crypto.getRandomValues(array);\n    return arrayBufferToHex(array.buffer);\n  }\n  \n  // Fallback for non-crypto environments\n  const chars = '0123456789abcdef';\n  let result = '';\n  for (let i = 0; i < length * 2; i++) {\n    result += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return result;\n};\n\n// Generate secure random token\nexport const generateSecureToken = (length: number = 32): string => {\n  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n    const array = new Uint8Array(Math.ceil(length / 2));\n    crypto.getRandomValues(array);\n    return arrayBufferToHex(array.buffer).slice(0, length);\n  }\n  \n  // Fallback using Math.random\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return result;\n};\n\n// Derive key from password using PBKDF2\nconst deriveKey = async (password: string, salt: ArrayBuffer): Promise<CryptoKey> => {\n  if (!crypto.subtle) {\n    throw new Error('Web Crypto API not available');\n  }\n\n  // Import the password as a key\n  const passwordKey = await crypto.subtle.importKey(\n    'raw',\n    stringToArrayBuffer(password),\n    'PBKDF2',\n    false,\n    ['deriveKey']\n  );\n\n  // Derive the AES key\n  return crypto.subtle.deriveKey(\n    {\n      name: 'PBKDF2',\n      salt: salt,\n      iterations: 100000,\n      hash: 'SHA-256'\n    },\n    passwordKey,\n    { name: 'AES-GCM', length: 256 },\n    false,\n    ['encrypt', 'decrypt']\n  );\n};\n\n// AES-GCM encryption (more secure than AES-CBC)\nexport const encryptAES = async (data: string, password: string): Promise<string> => {\n  if (!crypto.subtle) {\n    throw new Error('Web Crypto API not available');\n  }\n\n  try {\n    // Generate random salt and IV\n    const salt = crypto.getRandomValues(new Uint8Array(16));\n    const iv = crypto.getRandomValues(new Uint8Array(12)); // GCM uses 12-byte IV\n\n    // Derive key from password\n    const key = await deriveKey(password, salt.buffer);\n\n    // Encrypt the data\n    const dataBuffer = stringToArrayBuffer(data);\n    const encryptedBuffer = await crypto.subtle.encrypt(\n      { name: 'AES-GCM', iv: iv },\n      key,\n      dataBuffer\n    );\n\n    // Combine salt + iv + encrypted data\n    const combined = new Uint8Array(salt.length + iv.length + encryptedBuffer.byteLength);\n    combined.set(salt, 0);\n    combined.set(iv, salt.length);\n    combined.set(new Uint8Array(encryptedBuffer), salt.length + iv.length);\n\n    return arrayBufferToHex(combined.buffer);\n  } catch (error) {\n    console.error('Web Crypto encryption failed:', error);\n    throw new Error('Failed to encrypt data');\n  }\n};\n\n// AES-GCM decryption\nexport const decryptAES = async (encryptedHex: string, password: string): Promise<string> => {\n  if (!crypto.subtle) {\n    throw new Error('Web Crypto API not available');\n  }\n\n  try {\n    const encryptedBuffer = hexToArrayBuffer(encryptedHex);\n    const encryptedArray = new Uint8Array(encryptedBuffer);\n\n    // Extract salt, IV, and encrypted data\n    const salt = encryptedArray.slice(0, 16).buffer;\n    const iv = encryptedArray.slice(16, 28);\n    const encrypted = encryptedArray.slice(28).buffer;\n\n    // Derive key from password\n    const key = await deriveKey(password, salt);\n\n    // Decrypt the data\n    const decryptedBuffer = await crypto.subtle.decrypt(\n      { name: 'AES-GCM', iv: iv },\n      key,\n      encrypted\n    );\n\n    return arrayBufferToString(decryptedBuffer);\n  } catch (error) {\n    console.error('Web Crypto decryption failed:', error);\n    throw new Error('Failed to decrypt data');\n  }\n};\n\n// SHA-256 hashing\nexport const hashSHA256 = async (data: string): Promise<string> => {\n  if (!crypto.subtle) {\n    // Fallback hash for environments without Web Crypto API\n    let hash = 0;\n    for (let i = 0; i < data.length; i++) {\n      const char = data.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash).toString(16);\n  }\n\n  try {\n    const dataBuffer = stringToArrayBuffer(data);\n    const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\n    return arrayBufferToHex(hashBuffer);\n  } catch (error) {\n    console.error('SHA-256 hashing failed:', error);\n    throw new Error('Failed to hash data');\n  }\n};\n\n// Generate integrity hash with secret\nexport const generateIntegrityHash = async (data: string, secret: string): Promise<string> => {\n  return await hashSHA256(data + secret);\n};\n\n// Backward compatibility functions\nexport const encryptData = encryptAES;\nexport const decryptData = decryptAES;\nexport const hashData = hashSHA256;\n\n// Simple synchronous wrapper for immediate compatibility (not as secure)\nexport const encryptSync = (data: string, key: string): string => {\n  // This is a simplified base64 encoding for immediate compatibility\n  // In production, you should migrate to the async version\n  console.warn('Using synchronous encryption fallback - consider migrating to async encryptAES');\n  const payload = { data, key: key.slice(0, 8), timestamp: Date.now() };\n  return btoa(JSON.stringify(payload));\n};\n\nexport const decryptSync = (encryptedData: string, key: string): string => {\n  // This is a simplified base64 decoding for immediate compatibility\n  console.warn('Using synchronous decryption fallback - consider migrating to async decryptAES');\n  try {\n    const payload = JSON.parse(atob(encryptedData));\n    if (payload.key !== key.slice(0, 8)) {\n      throw new Error('Invalid key');\n    }\n    return payload.data;\n  } catch (error) {\n    throw new Error('Failed to decrypt data');\n  }\n};\n\nexport const hashSync = (data: string): string => {\n  // Simple hash for immediate compatibility\n  let hash = 0;\n  for (let i = 0; i < data.length; i++) {\n    const char = data.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash;\n  }\n  return Math.abs(hash).toString(16);\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/calculators.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/calculators.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Calculates how many years your savings will last given monthly expenses and an annual growth rate.\n * \n * This function simulates the depletion of savings over time, accounting for investment growth\n * and monthly withdrawals for expenses. It helps determine financial independence timelines.\n * \n * @param initialSavings - The starting savings balance in dollars\n * @param monthlyExpenses - Monthly living expenses in dollars (must be > 0)\n * @param annualGrowthRate - Expected annual return rate as decimal (default: 0.04 = 4%)\n * @returns Number of years the savings will last (rounded to 2 decimal places)\n * @throws {Error} When monthlyExpenses is 0 or negative\n * \n * @example\n * ```typescript\n * // $500,000 savings, $4,000/month expenses, 4% annual growth\n * const years = calculateFinancialFreedomYears(500000, 4000, 0.04);\n * console.log(years); // ~25.67 years\n * ```\n */\nexport function calculateFinancialFreedomYears(initialSavings: number, monthlyExpenses: number, annualGrowthRate = 0.04): number {\n  if (monthlyExpenses <= 0) throw new Error(\"Monthly expenses must be greater than 0\");\n  if (initialSavings <= 0) return 0;\n\n  const monthlyRate = annualGrowthRate / 12;\n  let balance = initialSavings;\n  let months = 0;\n\n  // Simulate month-by-month until balance is depleted or exceeds an upper boundary (50 years)\n  const MAX_MONTHS = 50 * 12;\n  while (balance > 0 && months < MAX_MONTHS) {\n    balance = balance * (1 + monthlyRate) - monthlyExpenses;\n    months += 1;\n  }\n\n  return +(months / 12).toFixed(2);\n}\n\n/**\n * Calculates Return on Investment (ROI) as a percentage.\n * \n * ROI measures the efficiency of an investment by comparing the gain or loss\n * relative to the cost of the investment. Formula: (Current Value - Initial Investment) / Initial Investment * 100\n * \n * @param initialInvestment - The original investment amount in dollars (cannot be 0)\n * @param currentValue - The current value of the investment in dollars\n * @returns ROI as a percentage (rounded to 2 decimal places)\n * @throws {Error} When initialInvestment is 0\n * \n * @example\n * ```typescript\n * // Invested $1000, now worth $1200\n * const roi = calculateROI(1000, 1200);\n * console.log(roi); // 20.00 (20% return)\n * ```\n */\nexport function calculateROI(initialInvestment: number, currentValue: number): number {\n  if (initialInvestment === 0) throw new Error(\"Initial investment cannot be 0\");\n  return +(((currentValue - initialInvestment) / initialInvestment) * 100).toFixed(2);\n}\n\n/**\n * Calculates monthly payment for an amortizing loan.\n * \n * Uses the standard amortization formula to determine fixed monthly payments\n * that will fully pay off the loan principal and interest over the specified term.\n * \n * @param principal - The loan amount in dollars\n * @param annualRate - Annual interest rate as a percentage (e.g., 5.5 for 5.5%)\n * @param years - Loan term in years\n * @returns Monthly payment amount (rounded to 2 decimal places)\n * \n * @example\n * ```typescript\n * // $300,000 loan at 4.5% for 30 years\n * const payment = calculateLoanPayment(300000, 4.5, 30);\n * console.log(payment); // $1520.06\n * ```\n */\nexport function calculateLoanPayment(principal: number, annualRate: number, years: number): number {\n  const monthlyRate = annualRate / 12 / 100;\n  const n = years * 12;\n  if (monthlyRate === 0) return +(principal / n).toFixed(2);\n  const payment = (principal * monthlyRate) / (1 - Math.pow(1 + monthlyRate, -n));\n  return +payment.toFixed(2);\n}\n\n/**\n * Calculates future value adjusted for inflation.\n * \n * Projects how much a current price or value will be worth in the future,\n * accounting for expected inflation. Uses compound growth formula.\n * \n * @param currentPrice - Current price or value in dollars\n * @param annualInflationRate - Expected annual inflation rate as percentage (e.g., 3.2 for 3.2%)\n * @param years - Number of years in the future\n * @returns Future value adjusted for inflation (rounded to 2 decimal places)\n * \n * @example\n * ```typescript\n * // $100 item with 3% inflation over 10 years\n * const futurePrice = calculateInflationAdjustedValue(100, 3, 10);\n * console.log(futurePrice); // $134.39\n * ```\n */\nexport function calculateInflationAdjustedValue(currentPrice: number, annualInflationRate: number, years: number): number {\n  const futureValue = currentPrice * Math.pow(1 + annualInflationRate / 100, years);\n  return +futureValue.toFixed(2);\n}\n\n/**\n * Calculates future value with compound interest.\n * \n * Computes the future value of an investment with compound interest,\n * allowing for different compounding frequencies (monthly, quarterly, annually, etc.).\n * \n * @param principal - Initial investment amount in dollars\n * @param annualRate - Annual interest rate as percentage (e.g., 5.5 for 5.5%)\n * @param years - Investment period in years\n * @param compoundsPerYear - Number of times interest compounds per year (default: 12 for monthly)\n * @returns Future value with compound interest (rounded to 2 decimal places)\n * \n * @example\n * ```typescript\n * // $10,000 at 6% annually for 5 years, compounded monthly\n * const futureValue = calculateCompoundInterest(10000, 6, 5, 12);\n * console.log(futureValue); // $13,488.50\n * ```\n */\nexport function calculateCompoundInterest(principal: number, annualRate: number, years: number, compoundsPerYear = 12): number {\n  const fv = principal * Math.pow(1 + annualRate / 100 / compoundsPerYear, compoundsPerYear * years);\n  return +fv.toFixed(2);\n}\n\n/**\n * Calculates future 401k balance with contributions and employer matching.\n * \n * Projects retirement account growth considering annual contributions,\n * employer matching, and investment returns compounded annually.\n * \n * @param currentBalance - Current 401k balance in dollars\n * @param annualContribution - Annual employee contribution in dollars\n * @param employerMatchRate - Employer match rate as decimal (e.g., 0.5 for 50% match)\n * @param annualReturnRate - Expected annual return rate as percentage (e.g., 7 for 7%)\n * @param years - Number of years until retirement\n * @returns Projected 401k balance (rounded to 2 decimal places)\n * \n * @example\n * ```typescript\n * // $50,000 current, $6,000 annual, 50% match, 7% return, 25 years\n * const balance = calculate401kBalance(50000, 6000, 0.5, 7, 25);\n * console.log(balance); // ~$1,091,234.56\n * ```\n */\nexport function calculate401kBalance(\n  currentBalance: number,\n  annualContribution: number,\n  employerMatchRate: number,\n  annualReturnRate: number,\n  years: number\n): number {\n  let balance = currentBalance;\n  for (let i = 0; i < years; i += 1) {\n    balance += annualContribution + annualContribution * employerMatchRate;\n    balance *= 1 + annualReturnRate / 100;\n  }\n  return +balance.toFixed(2);\n}\n\n/**\n * Calculates total return for a three-fund portfolio over time.\n * \n * Implements the Bogleheads three-fund portfolio strategy with customizable\n * allocations across US stocks, international stocks, and bonds.\n * \n * @param usStockReturn - Expected annual return for US stocks as percentage\n * @param internationalStockReturn - Expected annual return for international stocks as percentage\n * @param bondReturn - Expected annual return for bonds as percentage\n * @param years - Investment time horizon in years\n * @param allocation - Portfolio allocation object with us, intl, bonds percentages (default: 40/20/40)\n * @returns Total portfolio growth as percentage over the entire period (rounded to 2 decimal places)\n * \n * @example\n * ```typescript\n * // 7% US, 6% intl, 3% bonds over 10 years with default allocation\n * const totalReturn = calculateThreeFundPortfolioReturn(7, 6, 3, 10);\n * console.log(totalReturn); // ~69.74% total growth\n * ```\n */\nexport function calculateThreeFundPortfolioReturn(\n  usStockReturn: number,\n  internationalStockReturn: number,\n  bondReturn: number,\n  years: number,\n  allocation = { us: 0.4, intl: 0.2, bonds: 0.4 }\n): number {\n  const avgAnnualReturn =\n    allocation.us * usStockReturn + allocation.intl * internationalStockReturn + allocation.bonds * bondReturn;\n  const portfolioGrowth = Math.pow(1 + avgAnnualReturn / 100, years) - 1;\n  return +(portfolioGrowth * 100).toFixed(2); // percentage total growth over period\n}\n\n/**\n * Calculates maximum affordable home price using the 28/36 rule.\n * \n * Determines the highest home price you can afford based on income,\n * existing debts, mortgage terms, and property taxes. Uses the 28% rule\n * (housing costs ≤ 28% of gross monthly income).\n * \n * @param annualIncome - Gross annual income in dollars\n * @param monthlyDebts - Existing monthly debt payments in dollars\n * @param annualInterestRate - Mortgage interest rate as percentage (e.g., 4.5 for 4.5%)\n * @param loanTermYears - Mortgage term in years (typically 15 or 30)\n * @param downPayment - Available down payment in dollars\n * @param propertyTaxRate - Annual property tax rate as percentage of home value (default: 1.1%)\n * @returns Maximum affordable home price (rounded to nearest dollar)\n * \n * @example\n * ```typescript\n * // $80,000 income, $500 debts, 4.5% rate, 30 years, $20,000 down\n * const maxPrice = calculateMaximumHomePrice(80000, 500, 4.5, 30, 20000);\n * console.log(maxPrice); // ~$245,000\n * ```\n */\nexport function calculateMaximumHomePrice(\n  annualIncome: number,\n  monthlyDebts: number,\n  annualInterestRate: number,\n  loanTermYears: number,\n  downPayment: number,\n  propertyTaxRate = 1.1\n): number {\n  const maxHousingPayment = (annualIncome / 12) * 0.28;\n  const monthlyRate = annualInterestRate / 12 / 100;\n  const n = loanTermYears * 12;\n  const propertyTaxMonthlyFactor = propertyTaxRate / 100 / 12;\n\n  // We approximate: monthlyPayment = loanPayment + propertyTax\n  // We iterate to find price such that housingPayment ~= maxHousingPayment\n  let low = 50000;\n  let high = 2_000_000;\n  for (let i = 0; i < 30; i += 1) {\n    const midPrice = (low + high) / 2;\n    const loanAmount = midPrice - downPayment;\n    const payment = calculateLoanPayment(loanAmount, annualInterestRate, loanTermYears);\n    const totalPayment = payment + midPrice * propertyTaxMonthlyFactor;\n    if (totalPayment > maxHousingPayment) {\n      high = midPrice;\n    } else {\n      low = midPrice;\n    }\n  }\n  return +low.toFixed(0);\n}\n\n/**\n * Calculates interest savings from extra mortgage payments.\n * \n * Compares the original mortgage schedule with an accelerated payoff schedule\n * to show time saved and total interest reduction from extra monthly payments.\n * \n * @param principal - Original loan amount in dollars\n * @param annualRate - Annual interest rate as percentage (e.g., 4.5 for 4.5%)\n * @param years - Original loan term in years\n * @param extraMonthlyPayment - Additional monthly payment amount in dollars\n * @returns Object containing originalYears, newYears, and interestSaved\n * \n * @example\n * ```typescript\n * // $300,000 mortgage at 4.5% for 30 years with $200 extra monthly\n * const savings = calculateMortgagePayoffSavings(300000, 4.5, 30, 200);\n * console.log(savings); // { originalYears: 30, newYears: 24.1, interestSaved: 48532.21 }\n * ```\n */\nexport function calculateMortgagePayoffSavings(\n  principal: number,\n  annualRate: number,\n  years: number,\n  extraMonthlyPayment: number\n): { originalYears: number; newYears: number; interestSaved: number } {\n  const monthlyRate = annualRate / 12 / 100;\n  const originalPayment = calculateLoanPayment(principal, annualRate, years);\n\n  // Simulate original schedule\n  let balance = principal;\n  let monthsOriginal = 0;\n  let totalInterestOriginal = 0;\n  while (balance > 0 && monthsOriginal < years * 12 + 1) {\n    const interest = balance * monthlyRate;\n    const principalPaid = originalPayment - interest;\n    balance -= principalPaid;\n    totalInterestOriginal += interest;\n    monthsOriginal += 1;\n  }\n\n  // Simulate with extra payment\n  balance = principal;\n  let monthsNew = 0;\n  let totalInterestNew = 0;\n  const newPayment = originalPayment + extraMonthlyPayment;\n  while (balance > 0 && monthsNew < years * 12 + 1) {\n    const interest = balance * monthlyRate;\n    const principalPaid = newPayment - interest;\n    balance -= principalPaid;\n    totalInterestNew += interest;\n    monthsNew += 1;\n  }\n\n  return {\n    originalYears: +(monthsOriginal / 12).toFixed(2),\n    newYears: +(monthsNew / 12).toFixed(2),\n    interestSaved: +(totalInterestOriginal - totalInterestNew).toFixed(2)\n  };\n}\n\n/**\n * Performs a hypothetical portfolio backtest with historical returns.\n * \n * Calculates the final portfolio value by applying a sequence of annual returns\n * to simulate how an investment would have performed historically.\n * \n * @param initialInvestment - Starting investment amount in dollars\n * @param annualReturns - Array of annual return percentages (e.g., [10, -5, 15, 8])\n * @returns Final portfolio value after applying all returns (rounded to 2 decimal places)\n * \n * @example\n * ```typescript\n * // $10,000 with returns of 10%, -5%, 15%, 8%\n * const finalValue = calculatePortfolioBacktest(10000, [10, -5, 15, 8]);\n * console.log(finalValue); // ~$13,234.60\n * ```\n */\nexport function calculatePortfolioBacktest(initialInvestment: number, annualReturns: number[]): number {\n  let balance = initialInvestment;\n  annualReturns.forEach((r) => {\n    balance *= 1 + r / 100;\n  });\n  return +balance.toFixed(2);\n}\n\n/**\n * Converts currency using a given exchange rate.\n * \n * Simple currency conversion utility that multiplies the amount by the exchange rate.\n * \n * @param amount - Amount to convert in the base currency\n * @param rate - Exchange rate (target currency per unit of base currency)\n * @returns Converted amount in target currency (rounded to 2 decimal places)\n * \n * @example\n * ```typescript\n * // Convert $100 USD to EUR with rate 0.85\n * const euros = convertCurrency(100, 0.85);\n * console.log(euros); // 85.00\n * ```\n */\nexport function convertCurrency(amount: number, rate: number): number {\n  return +(amount * rate).toFixed(2);\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/crypto.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/crypto.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// import CryptoJS from 'crypto-js';\nimport { SecurityEnvValidator } from './envValidation';\nimport { \n  encryptAES, \n  decryptAES, \n  hashSHA256, \n  generateSecureToken as generateWebCryptoToken,\n  encryptSync,\n  decryptSync,\n  hashSync\n} from './browserCrypto';\n\n// Get validated encryption key from environment\nconst SECRET_KEY = SecurityEnvValidator.getValidatedEncryptionKey('VITE_VUENI_ENCRYPTION_KEY');\n\n// Session timeout for sensitive data (30 minutes)\nconst SESSION_TIMEOUT = 30 * 60 * 1000;\n\ninterface AuditLogEntry {\n  action: string;\n  key: string;\n  timestamp: string;\n  userAgent?: string;\n  [key: string]: unknown;\n}\n\ninterface SecurityEvent {\n  event: string;\n  key: string;\n  details?: string;\n  timestamp: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n}\n\n/**\n * VueniSecureStorage - Production-grade encrypted storage for financial data\n * Implements PCI-DSS considerations and financial compliance standards\n * Now using Web Crypto API for better performance and security\n */\nexport class VueniSecureStorage {\n  private static sessionData = new Map<string, { data: unknown; timestamp: number; encrypted: boolean }>();\n  private static auditLog: AuditLogEntry[] = [];\n\n  /**\n   * Encrypts data with AES-256-GCM and adds integrity check\n   */\n  private static encrypt<T>(data: T): string {\n    try {\n      const jsonString = JSON.stringify(data);\n      const timestamp = Date.now().toString();\n      const payload = { data: jsonString, timestamp, integrity: this.generateIntegrityHash(jsonString) };\n      \n      // Use synchronous encryption for immediate compatibility\n      // TODO: Migrate to async encryptAES for production\n      return encryptSync(JSON.stringify(payload), SECRET_KEY);\n    } catch (error) {\n      console.error('VueniSecureStorage encryption error:', error);\n      throw new Error('Failed to encrypt financial data');\n    }\n  }\n\n  /**\n   * Decrypts data and verifies integrity\n   */\n  private static decrypt<T>(encryptedData: string): T | null {\n    try {\n      // Use synchronous decryption for immediate compatibility\n      // TODO: Migrate to async decryptAES for production\n      const decryptedString = decryptSync(encryptedData, SECRET_KEY);\n      \n      if (!decryptedString) {\n        throw new Error('Decryption failed - invalid key or corrupted data');\n      }\n\n      const payload = JSON.parse(decryptedString);\n      \n      // Verify data integrity\n      if (payload.integrity !== this.generateIntegrityHash(payload.data)) {\n        throw new Error('Data integrity check failed - possible tampering detected');\n      }\n\n      return JSON.parse(payload.data);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      console.error('VueniSecureStorage decryption error:', error);\n      this.logSecurityEvent('DECRYPTION_FAILED', 'unknown', errorMessage);\n      return null;\n    }\n  }\n\n  /**\n   * Generates integrity hash for data verification\n   */\n  private static generateIntegrityHash(data: string): string {\n    // Use synchronous hash for immediate compatibility\n    // TODO: Migrate to async hashSHA256 for production\n    return hashSync(data + SECRET_KEY);\n  }\n\n  /**\n   * Stores encrypted financial data with audit trail\n   */\n  static setItem<T>(key: string, value: T, options: { sensitive?: boolean; sessionOnly?: boolean } = {}): void {\n    try {\n      this.validateFinancialDataKey(key);\n      \n      if (options.sessionOnly) {\n        // Store in memory session storage for highly sensitive data\n        this.sessionData.set(key, {\n          data: value,\n          timestamp: Date.now(),\n          encrypted: options.sensitive || false\n        });\n      } else {\n        // Store encrypted in localStorage\n        const encrypted = this.encrypt(value);\n        localStorage.setItem(key, encrypted);\n      }\n      \n      this.logAccess('SET', key, { sensitive: options.sensitive });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      console.error('VueniSecureStorage setItem error:', error);\n      this.logSecurityEvent('STORAGE_ERROR', key, errorMessage);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves and decrypts financial data\n   */\n  static getItem<T>(key: string): T | null {\n    try {\n      this.validateFinancialDataKey(key);\n\n      // Check session storage first\n      const sessionItem = this.sessionData.get(key);\n      if (sessionItem) {\n        // Check if session has expired\n        if (Date.now() - sessionItem.timestamp > SESSION_TIMEOUT) {\n          this.sessionData.delete(key);\n          this.logSecurityEvent('SESSION_EXPIRED', key);\n          return null;\n        }\n        this.logAccess('GET', key, { source: 'session' });\n        return sessionItem.data as T;\n      }\n\n      // Fallback to localStorage\n      const encrypted = localStorage.getItem(key);\n      if (!encrypted) return null;\n      \n      this.logAccess('GET', key, { source: 'localStorage' });\n      return this.decrypt(encrypted);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      console.error('VueniSecureStorage getItem error:', error);\n      this.logSecurityEvent('RETRIEVAL_ERROR', key, errorMessage);\n      return null;\n    }\n  }\n\n  /**\n   * Securely removes financial data\n   */\n  static removeItem(key: string): void {\n    try {\n      this.validateFinancialDataKey(key);\n      \n      // Remove from session storage\n      this.sessionData.delete(key);\n      \n      // Remove from localStorage\n      localStorage.removeItem(key);\n      \n      this.logAccess('REMOVE', key);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      console.error('VueniSecureStorage removeItem error:', error);\n      this.logSecurityEvent('REMOVAL_ERROR', key, errorMessage);\n    }\n  }\n\n  /**\n   * Clears all financial data with confirmation\n   */\n  static clear(confirmationToken?: string): void {\n    if (confirmationToken !== 'VUENI_CLEAR_ALL_DATA') {\n      throw new Error('Data clear operation requires confirmation token');\n    }\n\n    this.sessionData.clear();\n    \n    // Only clear Vueni-related keys from localStorage\n    const keysToRemove = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key?.startsWith('vueni:')) {\n        keysToRemove.push(key);\n      }\n    }\n    \n    keysToRemove.forEach(key => localStorage.removeItem(key));\n    this.logAccess('CLEAR', 'all');\n  }\n\n  /**\n   * Validates that data keys follow financial data naming conventions\n   */\n  private static validateFinancialDataKey(key: string): void {\n    if (!key.startsWith('vueni:')) {\n      throw new Error(`Invalid financial data key format: ${key}. Must start with 'vueni:'`);\n    }\n  }\n\n  /**\n   * Enhanced audit logging for financial compliance\n   */\n  private static logAccess(action: string, key: string, metadata: any = {}): void {\n    const logEntry = {\n      action,\n      key: this.maskSensitiveKey(key),\n      timestamp: new Date().toISOString(),\n      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined,\n      ...metadata\n    };\n\n    this.auditLog.push(logEntry);\n\n    // Keep only last 1000 log entries in memory\n    if (this.auditLog.length > 1000) {\n      this.auditLog.shift();\n    }\n\n    if (import.meta.env.DEV) {\n      console.log(`[VueniSecureStorage] ${action}: ${this.maskSensitiveKey(key)}`, metadata);\n    }\n\n    // In production, send to audit service\n    if (import.meta.env.PROD) {\n      this.sendToAuditService(logEntry);\n    }\n  }\n\n  /**\n   * Logs security events for monitoring\n   */\n  private static logSecurityEvent(event: string, key: string, details?: string): void {\n    const securityEvent = {\n      event,\n      key: this.maskSensitiveKey(key),\n      details,\n      timestamp: new Date().toISOString(),\n      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined\n    };\n\n    console.warn('[VueniSecureStorage Security Event]', securityEvent);\n\n    // In production, this would trigger security monitoring alerts\n    if (import.meta.env.PROD) {\n      this.sendSecurityAlert(securityEvent);\n    }\n  }\n\n  /**\n   * Masks sensitive parts of storage keys for logging\n   */\n  private static maskSensitiveKey(key: string): string {\n    if (key.length <= 8) return key;\n    return key.substring(0, 4) + '***' + key.substring(key.length - 4);\n  }\n\n  /**\n   * Sends audit logs to external service (production)\n   */\n  private static sendToAuditService(logEntry: any): void {\n    // Placeholder for production audit service integration\n    // This would send to services like DataDog, Splunk, or custom audit API\n  }\n\n  /**\n   * Sends security alerts to monitoring service (production)\n   */\n  private static sendSecurityAlert(securityEvent: any): void {\n    // Placeholder for production security monitoring integration\n    // This would trigger alerts in services like PagerDuty, Slack, etc.\n  }\n\n  /**\n   * Gets audit log for compliance reporting\n   */\n  static getAuditLog(): Array<any> {\n    return [...this.auditLog];\n  }\n\n  /**\n   * Clears expired session data\n   */\n  static cleanupExpiredSessions(): void {\n    const now = Date.now();\n    for (const [key, value] of this.sessionData.entries()) {\n      if (now - value.timestamp > SESSION_TIMEOUT) {\n        this.sessionData.delete(key);\n        this.logSecurityEvent('SESSION_CLEANUP', key);\n      }\n    }\n  }\n\n  /**\n   * Checks if a key exists without triggering a full get operation\n   */\n  static hasItem(key: string): boolean {\n    return this.sessionData.has(key) || localStorage.getItem(key) !== null;\n  }\n\n  /**\n   * Gets storage statistics for monitoring\n   */\n  static getStorageStats(): { sessionItems: number; localStorageItems: number; auditLogSize: number } {\n    const localStorageItems = Object.keys(localStorage).filter(key => key.startsWith('vueni:')).length;\n    \n    return {\n      sessionItems: this.sessionData.size,\n      localStorageItems,\n      auditLogSize: this.auditLog.length\n    };\n  }\n}\n\n// Legacy SecureStorage class for backward compatibility\nexport class SecureStorage extends VueniSecureStorage {\n  static setItem(key: string, value: any): void {\n    super.setItem(key, value);\n  }\n\n  static getItem(key: string): any {\n    return super.getItem(key);\n  }\n\n  static removeItem(key: string): void {\n    super.removeItem(key);\n  }\n\n  static clear(): void {\n    super.clear('VUENI_CLEAR_ALL_DATA');\n  }\n}\n\n// Helper functions for backward compatibility\nexport const secureStorage = {\n  setItem: (key: string, value: any) => SecureStorage.setItem(key, value),\n  getItem: (key: string) => SecureStorage.getItem(key),\n  removeItem: (key: string) => SecureStorage.removeItem(key),\n  clear: () => SecureStorage.clear()\n};\n\n// Generate or retrieve encryption key using Web Crypto\nconst getEncryptionKey = (): string => {\n  const storedKey = sessionStorage.getItem('_ek');\n  if (storedKey) return storedKey;\n  \n  // Use Web Crypto for key generation\n  const newKey = generateWebCryptoToken(32);\n  sessionStorage.setItem('_ek', newKey);\n  return newKey;\n};\n\n// AES-256 encryption for sensitive data (Web Crypto version)\nexport const encrypt = (data: string): string => {\n  try {\n    const key = getEncryptionKey();\n    // Use synchronous encryption for backward compatibility\n    return encryptSync(data, key);\n  } catch (error) {\n    console.error('Encryption failed:', error);\n    throw new Error('Failed to encrypt data');\n  }\n};\n\n// AES-256 decryption (Web Crypto version)\nexport const decrypt = (encryptedData: string): string => {\n  try {\n    const key = getEncryptionKey();\n    // Use synchronous decryption for backward compatibility\n    return decryptSync(encryptedData, key);\n  } catch (error) {\n    console.error('Decryption failed:', error);\n    throw new Error('Failed to decrypt data');\n  }\n};\n\n// Hash sensitive data for comparison without storing plaintext (Web Crypto version)\nexport const hashData = (data: string): string => {\n  // Use synchronous hash for backward compatibility\n  return hashSync(data);\n};\n\n// Generate secure random tokens using Web Crypto API\nexport const generateSecureToken = (length: number = 32): string => {\n  return generateWebCryptoToken(length);\n};\n\n// Mask financial data for display\nexport const maskFinancialData = (value: string | number, showLast: number = 4): string => {\n  const str = value.toString();\n  if (str.length <= showLast) return str;\n  \n  const masked = '*'.repeat(str.length - showLast);\n  return masked + str.slice(-showLast);\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/envValidation.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/envValidation.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Environment Variable Security Validation\n * Ensures critical security environment variables are properly configured\n */\n\nexport class SecurityEnvValidator {\n  private static readonly REQUIRED_ENV_VARS = [\n    'VITE_VUENI_ENCRYPTION_KEY'\n  ];\n\n  private static readonly MIN_KEY_LENGTH = 32;\n\n  /**\n   * Validates all required security environment variables on app startup\n   */\n  static validateSecurityEnvironment(): void {\n    const missingVars: string[] = [];\n    const invalidVars: string[] = [];\n\n    for (const envVar of this.REQUIRED_ENV_VARS) {\n      const value = this.getEnvVar(envVar);\n      \n      if (!value) {\n        missingVars.push(envVar);\n      } else if (value.length < this.MIN_KEY_LENGTH) {\n        invalidVars.push(`${envVar} (must be at least ${this.MIN_KEY_LENGTH} characters)`);\n      }\n    }\n\n    if (missingVars.length > 0 || invalidVars.length > 0) {\n      const errors: string[] = [];\n      \n      if (missingVars.length > 0) {\n        errors.push(`Missing required environment variables: ${missingVars.join(', ')}`);\n      }\n      \n      if (invalidVars.length > 0) {\n        errors.push(`Invalid environment variables: ${invalidVars.join(', ')}`);\n      }\n\n      const errorMessage = [\n        'CRITICAL SECURITY ERROR: Environment validation failed',\n        ...errors,\n        '',\n        'To fix this:',\n        '1. Create a .env file in your project root',\n        '2. Add the required environment variables with secure values:',\n        '   VITE_VUENI_ENCRYPTION_KEY=your-secure-32-character-or-longer-key-here',\n        '3. Restart your development server',\n        '',\n        'For production, ensure these variables are set in your deployment environment.'\n      ].join('\\n');\n\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Gets and validates a specific encryption key\n   */\n  static getValidatedEncryptionKey(envVarName: string): string {\n    const key = this.getEnvVar(envVarName);\n    \n    if (!key) {\n      throw new Error(`CRITICAL SECURITY ERROR: ${envVarName} environment variable is required`);\n    }\n    \n    if (key.length < this.MIN_KEY_LENGTH) {\n      throw new Error(`CRITICAL SECURITY ERROR: ${envVarName} must be at least ${this.MIN_KEY_LENGTH} characters long`);\n    }\n    \n    return key;\n  }\n\n  /**\n   * Gets environment variable value (handles both Node.js and Vite environments)\n   */\n  private static getEnvVar(name: string): string | undefined {\n    // Vite environment (browser/dev)\n    if (typeof import.meta !== 'undefined' && import.meta.env) {\n      return import.meta.env[name];\n    }\n    \n    // Node.js environment\n    if (typeof process !== 'undefined' && process.env) {\n      return process.env[name];\n    }\n    \n    return undefined;\n  }\n\n  /**\n   * Checks if we're in a production environment\n   */\n  static isProduction(): boolean {\n    const nodeEnv = this.getEnvVar('NODE_ENV');\n    const mode = this.getEnvVar('MODE');\n    \n    return nodeEnv === 'production' || mode === 'production';\n  }\n\n  /**\n   * Logs security configuration status (without exposing sensitive values)\n   */\n  static logSecurityStatus(): void {\n    const status = {\n      environment: this.isProduction() ? 'production' : 'development',\n      encryptionKeysConfigured: this.REQUIRED_ENV_VARS.every(envVar => !!this.getEnvVar(envVar)),\n      timestamp: new Date().toISOString()\n    };\n\n    if (this.isProduction()) {\n      console.log('[SECURITY] Environment validation passed for production');\n    } else {\n      console.log('[SECURITY] Environment validation status:', status);\n    }\n  }\n}\n\n// Auto-validate environment on module load in production\nif (SecurityEnvValidator.isProduction()) {\n  SecurityEnvValidator.validateSecurityEnvironment();\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/featureFlags.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/featureFlags.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// CC: Feature flag system for gating new components (R3 requirement)\nexport interface FeatureFlags {\n  FEATURE_CLOUD: boolean;\n  SMART_ACCOUNTS_DECK: boolean;\n  ENHANCED_ANIMATIONS: boolean;\n}\n\n// CC: Default feature flags - can be overridden by environment variables\nconst defaultFlags: FeatureFlags = {\n  FEATURE_CLOUD: true, // Enable by default for demo\n  SMART_ACCOUNTS_DECK: true, // Enable by default for demo\n  ENHANCED_ANIMATIONS: true\n};\n\n// CC: Get feature flags from environment or use defaults\nexport const getFeatureFlags = (): FeatureFlags => {\n  if (typeof window === 'undefined') {\n    return defaultFlags;\n  }\n\n  return {\n    FEATURE_CLOUD: process.env.VITE_FEATURE_CLOUD === 'true' || defaultFlags.FEATURE_CLOUD,\n    SMART_ACCOUNTS_DECK: process.env.VITE_SMART_ACCOUNTS_DECK === 'true' || defaultFlags.SMART_ACCOUNTS_DECK,\n    ENHANCED_ANIMATIONS: process.env.VITE_ENHANCED_ANIMATIONS === 'true' || defaultFlags.ENHANCED_ANIMATIONS\n  };\n};\n\n// CC: Check if a specific feature is enabled\nexport const isFeatureEnabled = (flag: keyof FeatureFlags): boolean => {\n  const flags = getFeatureFlags();\n  return flags[flag];\n};\n\n// CC: Track feature usage for analytics\nexport const trackFeatureUsage = (feature: string, action: string) => {\n  if (typeof window !== 'undefined' && (window as any).gtag) {\n    (window as any).gtag('event', 'feature_usage', {\n      event_category: 'feature_flags',\n      event_label: feature,\n      custom_parameter_1: action\n    });\n  }\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/formatters.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/formatters.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Utility functions for formatting values in the insights system\n */\n\nimport { usePrivacyStore } from \"@/features/privacy-hide-amounts/store\";\nimport { vueniTheme } from '@/theme/unified';\n\n/**\n * Safe ratio calculation that handles division by zero\n * @param numerator - The numerator value\n * @param denominator - The denominator value (can be 0)\n * @returns Number ratio or null if denominator is 0\n */\nexport const safeRatio = (numerator: number, denominator: number | 0): number | null => {\n  if (denominator === 0 || !isFinite(denominator) || !isFinite(numerator)) {\n    return null;\n  }\n  \n  const ratio = numerator / denominator;\n  return isFinite(ratio) ? ratio : null;\n};\n\n/**\n * Format percentage with clamping to prevent extreme values\n * @param value - The percentage value to format (as decimal, e.g., 0.25 for 25%)\n * @param decimals - Number of decimal places (default: 1)\n * @param clampTo - Optional clamping range (default: ±999%)\n * @returns Formatted percentage string with % sign\n */\nexport const formatPercent = (\n  value: number | null, \n  decimals: number = 1, \n  clampTo: number = 999\n): string => {\n  if (value === null || !isFinite(value)) {\n    return '--';\n  }\n  \n  // Convert to percentage and clamp to prevent extreme values\n  const percentage = value * 100;\n  const clampedPercentage = Math.max(Math.min(percentage, clampTo), -clampTo);\n  \n  return `${clampedPercentage.toFixed(decimals)}%`;\n};\n\n/**\n * Format score with configurable precision (0-2 decimal places)\n * @param value - The score value to format\n * @param precision - Number of decimal places (0, 1, or 2). Default is 1 for score display\n * @param locale - Locale for formatting. Default is 'en-US'\n * @returns Formatted score string (e.g., \"79\", \"79.4\", \"79.37\")\n */\nexport const formatScore = (value: number, precision: 0 | 1 | 2 = 1, locale: string = 'en-US'): string => {\n  // Clamp precision to valid range\n  const validPrecision = Math.max(0, Math.min(2, precision)) as 0 | 1 | 2;\n  \n  // Use Intl.NumberFormat for locale-safe formatting\n  return new Intl.NumberFormat(locale, {\n    minimumFractionDigits: validPrecision,\n    maximumFractionDigits: validPrecision,\n    useGrouping: false // No thousands separators for scores\n  }).format(value);\n};\n\n/**\n * Format financial score specifically (always integer for consistency)\n * @param value - The financial score value to format\n * @returns Formatted integer score string\n */\nexport const formatFinancialScore = (value: number): string => {\n  return formatScore(value, 0);\n};\n\n/**\n * Format percentage with consistent decimal places (legacy function - use formatPercent for new code)\n * @param value - The percentage value to format\n * @param decimals - Number of decimal places (default: 1)\n * @returns Formatted percentage string with % sign\n */\nexport const formatPercentage = (value: number, decimals: number = 1): string => {\n  return `${value.toFixed(decimals)}%`;\n};\n\n/**\n * Format currency with proper locale and currency symbol\n * @param value - The currency value to format\n * @param options - Formatting options\n * @returns Formatted currency string\n */\nexport const formatCurrency = (\n  value: number, \n  options?: { \n    decimals?: number; \n    currency?: string;\n    locale?: string;\n  }\n): string => {\n  const { \n    decimals, \n    currency = 'USD', \n    locale = 'en-US' \n  } = options || {};\n  \n  // Determine decimal places\n  const shouldShowDecimals = decimals !== undefined ? decimals > 0 : value % 1 !== 0;\n  \n  const hide = (usePrivacyStore as any)?.getState?.()?.setting?.hideAmounts;\n\n  const formatted = new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency: currency,\n    minimumFractionDigits: shouldShowDecimals ? (decimals ?? 2) : 0,\n    maximumFractionDigits: shouldShowDecimals ? (decimals ?? 2) : 0,\n  }).format(value);\n\n  if (hide) {\n    return formatted.replace(/\\d/g, '•');\n  }\n\n  return formatted;\n};\n\n/**\n * Format large numbers with appropriate suffixes (K, M, B)\n * @param value - The number to format\n * @param decimals - Number of decimal places (default: 1)\n * @returns Formatted number string with suffix\n */\nexport const formatLargeNumber = (value: number, decimals: number = 1): string => {\n  if (value >= 1e9) {\n    return `${(value / 1e9).toFixed(decimals)}B`;\n  }\n  if (value >= 1e6) {\n    return `${(value / 1e6).toFixed(decimals)}M`;\n  }\n  if (value >= 1e3) {\n    return `${(value / 1e3).toFixed(decimals)}K`;\n  }\n  return value.toString();\n};\n\n/**\n * Format compact number for display (e.g., 1.2K, 3.4M)\n * @param value - The number to format\n * @returns Compact formatted string\n */\nexport const formatCompactNumber = (value: number): string => {\n  if (value >= 1e9) {\n    return `${(value / 1e9).toFixed(1)}B`;\n  }\n  if (value >= 1e6) {\n    return `${(value / 1e6).toFixed(1)}M`;\n  }\n  if (value >= 1e3) {\n    return `${(value / 1e3).toFixed(1)}K`;\n  }\n  return value.toFixed(0);\n};\n\n/**\n * Format decimal numbers with consistent decimal places\n * @param value - The number to format\n * @param decimals - Number of decimal places (default: 1)\n * @returns Formatted number string\n */\nexport const formatDecimal = (value: number, decimals: number = 1): string => {\n  return value.toFixed(decimals);\n};\n\n/**\n * Calculate and format score grade based on value\n * @param score - Score value (0-100)\n * @returns Grade string\n */\nexport const getScoreGrade = (score: number): string => {\n  if (score >= 90) return 'A+';\n  if (score >= 85) return 'A';\n  if (score >= 80) return 'A-';\n  if (score >= 75) return 'B+';\n  if (score >= 70) return 'B';\n  if (score >= 65) return 'B-';\n  if (score >= 60) return 'C+';\n  if (score >= 55) return 'C';\n  if (score >= 50) return 'C-';\n  if (score >= 40) return 'D';\n  return 'F';\n};\n\n/**\n * Get color class based on score value\n * @param score - Score value (0-100)\n * @returns Tailwind CSS color class\n */\nexport const getScoreColorClass = (score: number): string => {\n  if (score >= 80) return 'text-green-400';\n  if (score >= 70) return 'text-blue-400';\n  if (score >= 60) return 'text-yellow-400';\n  if (score >= 40) return 'text-orange-400';\n  return 'text-red-400';\n};\n\n/**\n * Get background color for score visualization\n * @param score - Score value (0-100)\n * @returns Color hex string\n */\nexport const getScoreColor = (score: number): string => {\n  if (score >= 80) return vueniTheme.colors.palette.success; // Green\n  if (score >= 70) return vueniTheme.colors.palette.primary; // Blue  \n  if (score >= 60) return vueniTheme.colors.palette.warning; // Yellow\n  if (score >= 40) return vueniTheme.colors.palette.warning; // Orange (map to warning)\n  return vueniTheme.colors.palette.danger; // Red\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/monitoring.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/monitoring.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * VueniSecurityMonitoring - Production-grade security monitoring for financial applications\n * Implements comprehensive security event tracking and alerting\n */\n\nimport { VueniSecureStorage } from './crypto';\nimport { generateSecureId } from './secureRandom';\n\nexport interface SecurityEvent {\n  id: string;\n  type: SecurityEventType;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  description: string;\n  timestamp: string;\n  userId?: string;\n  sessionId?: string;\n  ipAddress?: string;\n  userAgent?: string;\n  metadata?: Record<string, any>;\n  resolved: boolean;\n  resolvedAt?: string;\n  resolvedBy?: string;\n}\n\nexport type SecurityEventType = \n  | 'AUTHENTICATION_FAILURE'\n  | 'ENCRYPTION_ERROR'\n  | 'DATA_INTEGRITY_VIOLATION'\n  | 'UNAUTHORIZED_ACCESS'\n  | 'RATE_LIMIT_EXCEEDED'\n  | 'SUSPICIOUS_ACTIVITY'\n  | 'SESSION_HIJACK_ATTEMPT'\n  | 'XSS_ATTEMPT'\n  | 'CSRF_ATTACK'\n  | 'DATA_BREACH_ATTEMPT'\n  | 'FINANCIAL_CALCULATION_ERROR'\n  | 'STORAGE_CORRUPTION'\n  | 'INVALID_INPUT'\n  | 'SECURITY_POLICY_VIOLATION';\n\nexport interface SecurityMetrics {\n  totalEvents: number;\n  criticalEvents: number;\n  highSeverityEvents: number;\n  unresolvedEvents: number;\n  averageResolutionTime: number;\n  topEventTypes: Array<{ type: SecurityEventType; count: number }>;\n  timeRange: {\n    start: string;\n    end: string;\n  };\n}\n\nexport interface SecurityAlert {\n  id: string;\n  eventId: string;\n  type: 'email' | 'sms' | 'webhook' | 'slack';\n  recipient: string;\n  message: string;\n  sent: boolean;\n  sentAt?: string;\n  error?: string;\n}\n\n/**\n * VueniSecurityMonitoring - Comprehensive security monitoring system\n */\nexport class VueniSecurityMonitoring {\n  private static readonly STORAGE_KEY = 'vueni:security:events:v1';\n  private static readonly ALERTS_KEY = 'vueni:security:alerts:v1';\n  private static readonly MAX_EVENTS = 10000;\n  private static readonly ALERT_THRESHOLD = {\n    critical: 1, // Alert immediately for critical events\n    high: 5,     // Alert after 5 high severity events in 10 minutes\n    medium: 20   // Alert after 20 medium severity events in 1 hour\n  };\n\n  private static events: SecurityEvent[] = [];\n  private static alerts: SecurityAlert[] = [];\n  private static isInitialized = false;\n\n  /**\n   * Initializes the security monitoring system\n   */\n  static initialize(): void {\n    if (this.isInitialized) return;\n\n    try {\n      // Load existing events from secure storage\n      const storedEvents = VueniSecureStorage.getItem(this.STORAGE_KEY);\n      if (Array.isArray(storedEvents)) {\n        this.events = storedEvents;\n      }\n\n      // Load existing alerts\n      const storedAlerts = VueniSecureStorage.getItem(this.ALERTS_KEY);\n      if (Array.isArray(storedAlerts)) {\n        this.alerts = storedAlerts;\n      }\n\n      this.isInitialized = true;\n      this.logEvent('MONITORING_INITIALIZED', 'low', 'Security monitoring system initialized');\n    } catch (error) {\n      console.error('Failed to initialize security monitoring:', error);\n    }\n  }\n\n  /**\n   * Logs a security event\n   */\n  static logEvent(\n    type: SecurityEventType,\n    severity: 'low' | 'medium' | 'high' | 'critical',\n    description: string,\n    metadata?: Record<string, any>\n  ): void {\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n\n    const event: SecurityEvent = {\n      id: this.generateEventId(),\n      type,\n      severity,\n      description,\n      timestamp: new Date().toISOString(),\n      userId: this.getCurrentUserId(),\n      sessionId: this.getCurrentSessionId(),\n      ipAddress: this.getClientIP(),\n      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined,\n      metadata,\n      resolved: false\n    };\n\n    this.events.push(event);\n\n    // Maintain event limit\n    if (this.events.length > this.MAX_EVENTS) {\n      this.events = this.events.slice(-this.MAX_EVENTS);\n    }\n\n    // Persist events\n    this.persistEvents();\n\n    // Check for alert conditions\n    this.checkAlertConditions(event);\n\n    // Log to console in development\n    if (import.meta.env.DEV) {\n      console.warn(`[VueniSecurity] ${severity.toUpperCase()}: ${type}`, event);\n    }\n\n    // Send to external monitoring in production\n    if (import.meta.env.PROD) {\n      this.sendToExternalMonitoring(event);\n    }\n  }\n\n  /**\n   * Gets security events with filtering\n   */\n  static getEvents(filters?: {\n    severity?: 'low' | 'medium' | 'high' | 'critical';\n    type?: SecurityEventType;\n    resolved?: boolean;\n    since?: string;\n    limit?: number;\n  }): SecurityEvent[] {\n    let filteredEvents = [...this.events];\n\n    if (filters) {\n      if (filters.severity) {\n        filteredEvents = filteredEvents.filter(e => e.severity === filters.severity);\n      }\n\n      if (filters.type) {\n        filteredEvents = filteredEvents.filter(e => e.type === filters.type);\n      }\n\n      if (filters.resolved !== undefined) {\n        filteredEvents = filteredEvents.filter(e => e.resolved === filters.resolved);\n      }\n\n      if (filters.since) {\n        const sinceDate = new Date(filters.since);\n        filteredEvents = filteredEvents.filter(e => new Date(e.timestamp) > sinceDate);\n      }\n\n      if (filters.limit) {\n        filteredEvents = filteredEvents.slice(-filters.limit);\n      }\n    }\n\n    return filteredEvents.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n  }\n\n  /**\n   * Resolves a security event\n   */\n  static resolveEvent(eventId: string, resolvedBy: string): boolean {\n    const event = this.events.find(e => e.id === eventId);\n    \n    if (!event) {\n      return false;\n    }\n\n    event.resolved = true;\n    event.resolvedAt = new Date().toISOString();\n    event.resolvedBy = resolvedBy;\n\n    this.persistEvents();\n    \n    this.logEvent('SECURITY_EVENT_RESOLVED', 'low', `Event ${eventId} resolved by ${resolvedBy}`, {\n      originalEventType: event.type,\n      originalSeverity: event.severity\n    });\n\n    return true;\n  }\n\n  /**\n   * Gets security metrics\n   */\n  static getMetrics(timeRange?: { start: string; end: string }): SecurityMetrics {\n    let events = this.events;\n\n    if (timeRange) {\n      const start = new Date(timeRange.start);\n      const end = new Date(timeRange.end);\n      events = events.filter(e => {\n        const eventTime = new Date(e.timestamp);\n        return eventTime >= start && eventTime <= end;\n      });\n    }\n\n    const totalEvents = events.length;\n    const criticalEvents = events.filter(e => e.severity === 'critical').length;\n    const highSeverityEvents = events.filter(e => e.severity === 'high').length;\n    const unresolvedEvents = events.filter(e => !e.resolved).length;\n\n    // Calculate average resolution time\n    const resolvedEvents = events.filter(e => e.resolved && e.resolvedAt);\n    const averageResolutionTime = resolvedEvents.length > 0 \n      ? resolvedEvents.reduce((sum, event) => {\n          const created = new Date(event.timestamp).getTime();\n          const resolved = new Date(event.resolvedAt!).getTime();\n          return sum + (resolved - created);\n        }, 0) / resolvedEvents.length\n      : 0;\n\n    // Get top event types\n    const eventTypeCounts = new Map<SecurityEventType, number>();\n    events.forEach(event => {\n      eventTypeCounts.set(event.type, (eventTypeCounts.get(event.type) || 0) + 1);\n    });\n\n    const topEventTypes = Array.from(eventTypeCounts.entries())\n      .map(([type, count]) => ({ type, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n\n    return {\n      totalEvents,\n      criticalEvents,\n      highSeverityEvents,\n      unresolvedEvents,\n      averageResolutionTime,\n      topEventTypes,\n      timeRange: timeRange || {\n        start: events.length > 0 ? events[0].timestamp : new Date().toISOString(),\n        end: new Date().toISOString()\n      }\n    };\n  }\n\n  /**\n   * Checks if alerts should be triggered\n   */\n  private static checkAlertConditions(event: SecurityEvent): void {\n    const now = Date.now();\n\n    // Critical events trigger immediate alerts\n    if (event.severity === 'critical') {\n      this.triggerAlert(event, 'Critical security event detected');\n      return;\n    }\n\n    // High severity events - check threshold\n    if (event.severity === 'high') {\n      const recentHighEvents = this.events.filter(e => \n        e.severity === 'high' && \n        (now - new Date(e.timestamp).getTime()) < 600000 // 10 minutes\n      );\n\n      if (recentHighEvents.length >= this.ALERT_THRESHOLD.high) {\n        this.triggerAlert(event, `${recentHighEvents.length} high severity events in 10 minutes`);\n      }\n    }\n\n    // Medium severity events - check threshold\n    if (event.severity === 'medium') {\n      const recentMediumEvents = this.events.filter(e => \n        e.severity === 'medium' && \n        (now - new Date(e.timestamp).getTime()) < 3600000 // 1 hour\n      );\n\n      if (recentMediumEvents.length >= this.ALERT_THRESHOLD.medium) {\n        this.triggerAlert(event, `${recentMediumEvents.length} medium severity events in 1 hour`);\n      }\n    }\n  }\n\n  /**\n   * Triggers a security alert\n   */\n  private static triggerAlert(event: SecurityEvent, message: string): void {\n    const alert: SecurityAlert = {\n      id: this.generateAlertId(),\n      eventId: event.id,\n      type: 'webhook', // Default to webhook, can be configured\n      recipient: 'security-team@vueni.com',\n      message: `${message}: ${event.description}`,\n      sent: false\n    };\n\n    this.alerts.push(alert);\n    this.persistAlerts();\n\n    // Send alert in production\n    if (import.meta.env.PROD) {\n      this.sendAlert(alert);\n    } else {\n      console.warn('[VueniSecurity Alert]', alert);\n    }\n  }\n\n  /**\n   * Sends an alert to external systems\n   */\n  private static async sendAlert(alert: SecurityAlert): Promise<void> {\n    try {\n      // Placeholder for actual alert sending logic\n      // This would integrate with services like:\n      // - Slack webhooks\n      // - Email providers (SendGrid, etc.)\n      // - SMS providers (Twilio, etc.)\n      // - PagerDuty\n      // - Custom webhooks\n\n      alert.sent = true;\n      alert.sentAt = new Date().toISOString();\n      this.persistAlerts();\n    } catch (error) {\n      alert.error = error.message;\n      this.persistAlerts();\n      console.error('Failed to send security alert:', error);\n    }\n  }\n\n  /**\n   * Persists events to secure storage\n   */\n  private static persistEvents(): void {\n    try {\n      VueniSecureStorage.setItem(this.STORAGE_KEY, this.events, { sensitive: true });\n    } catch (error) {\n      console.error('Failed to persist security events:', error);\n    }\n  }\n\n  /**\n   * Persists alerts to secure storage\n   */\n  private static persistAlerts(): void {\n    try {\n      VueniSecureStorage.setItem(this.ALERTS_KEY, this.alerts, { sensitive: true });\n    } catch (error) {\n      console.error('Failed to persist security alerts:', error);\n    }\n  }\n\n  /**\n   * Generates a unique event ID\n   */\n  private static generateEventId(): string {\n    return generateSecureId('evt');\n  }\n\n  /**\n   * Generates a unique alert ID\n   */\n  private static generateAlertId(): string {\n    return generateSecureId('alt');\n  }\n\n  /**\n   * Gets current user ID (placeholder)\n   */\n  private static getCurrentUserId(): string | undefined {\n    // This would integrate with your authentication system\n    return 'demo-user';\n  }\n\n  /**\n   * Gets current session ID (placeholder)\n   */\n  private static getCurrentSessionId(): string | undefined {\n    // This would integrate with your session management\n    return undefined;\n  }\n\n  /**\n   * Gets client IP address (placeholder)\n   */\n  private static getClientIP(): string | undefined {\n    // This would be set by your server or proxy\n    return undefined;\n  }\n\n  /**\n   * Sends event to external monitoring service\n   */\n  private static sendToExternalMonitoring(event: SecurityEvent): void {\n    // Placeholder for external monitoring integration\n    // This would send to services like:\n    // - DataDog\n    // - Splunk\n    // - Elasticsearch\n    // - Sentry\n    // - Custom logging endpoints\n  }\n\n  /**\n   * Clears old events (maintenance)\n   */\n  static clearOldEvents(olderThanDays: number = 90): number {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - olderThanDays);\n\n    const initialCount = this.events.length;\n    this.events = this.events.filter(event => \n      new Date(event.timestamp) > cutoffDate\n    );\n\n    const removedCount = initialCount - this.events.length;\n    \n    if (removedCount > 0) {\n      this.persistEvents();\n      this.logEvent('EVENTS_CLEANUP', 'low', `Removed ${removedCount} old security events`);\n    }\n\n    return removedCount;\n  }\n\n  /**\n   * Exports security events for compliance reporting\n   */\n  static exportEvents(format: 'json' | 'csv' = 'json'): string {\n    const events = this.getEvents();\n\n    if (format === 'csv') {\n      const headers = ['ID', 'Type', 'Severity', 'Description', 'Timestamp', 'User ID', 'Resolved'];\n      const rows = events.map(event => [\n        event.id,\n        event.type,\n        event.severity,\n        event.description.replace(/,/g, ';'), // Escape commas\n        event.timestamp,\n        event.userId || '',\n        event.resolved ? 'Yes' : 'No'\n      ]);\n\n      return [headers, ...rows].map(row => row.join(',')).join('\\n');\n    }\n\n    return JSON.stringify(events, null, 2);\n  }\n\n  /**\n   * Gets security dashboard data\n   */\n  static getDashboardData(): {\n    recentEvents: SecurityEvent[];\n    metrics: SecurityMetrics;\n    alerts: SecurityAlert[];\n  } {\n    const recentEvents = this.getEvents({ limit: 50 });\n    const metrics = this.getMetrics();\n    const recentAlerts = this.alerts.slice(-20);\n\n    return {\n      recentEvents,\n      metrics,\n      alerts: recentAlerts\n    };\n  }\n}\n\n// Export singleton instance\nexport const securityMonitoring = VueniSecurityMonitoring;\n\n// Initialize monitoring when module loads\nif (typeof window !== 'undefined') {\n  VueniSecurityMonitoring.initialize();\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/optimizedHelpers.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/optimizedHelpers.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Transaction, Account, InsightMetric } from '@/types/shared';\nimport { vueniTheme } from '@/theme/unified';\n\n// Optimized utility functions with memoization and performance improvements\n// Consolidates helper functions scattered across multiple files\n\nexport const memoize = <T extends (...args: unknown[]) => unknown>(fn: T): T => {\n  const cache = new Map();\n  return ((...args: unknown[]) => {\n    const key = JSON.stringify(args);\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    const result = fn(...args);\n    cache.set(key, result);\n    return result;\n  }) as T;\n};\n\n// Memoized currency formatter\nexport const formatCurrency = memoize((amount: number, currency: string = 'USD') => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n});\n\n// Memoized date formatter\nexport const formatDate = memoize((date: string, format: 'short' | 'long' | 'relative' = 'short') => {\n  const dateObj = new Date(date);\n  \n  switch (format) {\n    case 'long':\n      return dateObj.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    case 'relative': {\n      const now = new Date();\n      const diffTime = Math.abs(now.getTime() - dateObj.getTime());\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      \n      if (diffDays === 0) return 'Today';\n      if (diffDays === 1) return 'Yesterday';\n      if (diffDays < 7) return `${diffDays} days ago`;\n      return dateObj.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    }\n    default:\n      return dateObj.toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric'\n      });\n  }\n});\n\n// Optimized transaction calculations\nexport const calculateTransactionMetrics = memoize((transactions: Transaction[], timeframe: string = '30d') => {\n  const now = new Date();\n  const days = parseInt(timeframe.replace('d', ''));\n  const cutoffDate = new Date(now.getTime() - (days * 24 * 60 * 60 * 1000));\n  \n  const filteredTransactions = transactions.filter(t => new Date(t.date) >= cutoffDate);\n  \n  const totalSpent = filteredTransactions\n    .filter(t => t.amount < 0)\n    .reduce((sum, t) => sum + Math.abs(t.amount), 0);\n    \n  const totalIncome = filteredTransactions\n    .filter(t => t.amount > 0)\n    .reduce((sum, t) => sum + t.amount, 0);\n    \n  const avgTransaction = filteredTransactions.length > 0 \n    ? totalSpent / filteredTransactions.filter(t => t.amount < 0).length\n    : 0;\n    \n  const transactionCount = filteredTransactions.length;\n  \n  // Category breakdown\n  const categoryTotals = filteredTransactions\n    .filter(t => t.amount < 0)\n    .reduce((acc, t) => {\n      const category = t.category.name;\n      acc[category] = (acc[category] || 0) + Math.abs(t.amount);\n      return acc;\n    }, {} as Record<string, number>);\n    \n  const topCategory = Object.entries(categoryTotals)\n    .sort(([,a], [,b]) => b - a)[0];\n\n  return {\n    totalSpent,\n    totalIncome,\n    avgTransaction,\n    transactionCount,\n    topCategory: topCategory ? { name: topCategory[0], amount: topCategory[1] } : null,\n    categoryTotals\n  };\n});\n\n// Optimized account calculations\nexport const calculateAccountMetrics = memoize((accounts: Account[]) => {\n  const totalAssets = accounts\n    .filter(acc => !acc.type.toLowerCase().includes('credit'))\n    .reduce((sum, acc) => sum + acc.balance, 0);\n    \n  const totalDebt = accounts\n    .filter(acc => acc.type.toLowerCase().includes('credit'))\n    .reduce((sum, acc) => sum + Math.abs(acc.balance), 0);\n    \n  const netWorth = totalAssets - totalDebt;\n  \n  const activeAccounts = accounts.filter(acc => acc.isActive !== false);\n  \n  return {\n    totalAssets,\n    totalDebt,\n    netWorth,\n    accountCount: accounts.length,\n    activeAccountCount: activeAccounts.length\n  };\n});\n\n// Performance optimized array operations\nexport const groupTransactionsByDate = memoize((transactions: Transaction[]) => {\n  return transactions.reduce((groups, transaction) => {\n    const date = new Date(transaction.date).toDateString();\n    if (!groups[date]) {\n      groups[date] = [];\n    }\n    groups[date].push(transaction);\n    return groups;\n  }, {} as Record<string, Transaction[]>);\n});\n\nexport const groupTransactionsByCategory = memoize((transactions: Transaction[]) => {\n  return transactions.reduce((groups, transaction) => {\n    const category = transaction.category.name;\n    if (!groups[category]) {\n      groups[category] = [];\n    }\n    groups[category].push(transaction);\n    return groups;\n  }, {} as Record<string, Transaction[]>);\n});\n\n// Optimized search and filter\nexport const filterTransactions = memoize((\n  transactions: Transaction[],\n  searchTerm: string,\n  category: string,\n  dateRange?: { start: Date; end: Date }\n) => {\n  return transactions.filter(transaction => {\n    // Search filter\n    if (searchTerm) {\n      const searchLower = searchTerm.toLowerCase();\n      const matchesSearch = \n        transaction.merchant.toLowerCase().includes(searchLower) ||\n        transaction.category.name.toLowerCase().includes(searchLower) ||\n        (transaction.description && transaction.description.toLowerCase().includes(searchLower));\n      if (!matchesSearch) return false;\n    }\n    \n    // Category filter\n    if (category && category !== 'all') {\n      if (transaction.category.name !== category) return false;\n    }\n    \n    // Date range filter\n    if (dateRange) {\n      const transactionDate = new Date(transaction.date);\n      if (transactionDate < dateRange.start || transactionDate > dateRange.end) return false;\n    }\n    \n    return true;\n  });\n});\n\n// Optimized sorting\nexport const sortTransactions = memoize((\n  transactions: Transaction[],\n  field: 'date' | 'amount' | 'merchant',\n  direction: 'asc' | 'desc'\n) => {\n  return [...transactions].sort((a, b) => {\n    let comparison = 0;\n    \n    switch (field) {\n      case 'date':\n        comparison = new Date(a.date).getTime() - new Date(b.date).getTime();\n        break;\n      case 'amount':\n        comparison = Math.abs(a.amount) - Math.abs(b.amount);\n        break;\n      case 'merchant':\n        comparison = a.merchant.localeCompare(b.merchant);\n        break;\n    }\n    \n    return direction === 'asc' ? comparison : -comparison;\n  });\n});\n\n// Color utilities\nexport const getTransactionColor = memoize((amount: number) => {\n  return amount < 0 ? vueniTheme.colors.palette.danger : vueniTheme.colors.palette.success; // red for expenses, green for income\n});\n\nexport const getCategoryColor = memoize((category: string) => {\n  // Generate consistent colors for categories using unified theme\n  const colors = [\n    vueniTheme.colors.palette.primary, \n    vueniTheme.colors.palette.danger, \n    vueniTheme.colors.palette.success, \n    vueniTheme.colors.palette.warning, \n    vueniTheme.colors.semantic.chart.investments,\n    vueniTheme.colors.palette.neutral\n  ];\n  \n  let hash = 0;\n  for (let i = 0; i < category.length; i++) {\n    hash = category.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  \n  return colors[Math.abs(hash) % colors.length];\n});\n\n// Performance monitoring utilities\nexport const debounce = <T extends (...args: unknown[]) => unknown>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void => {\n  let timeoutId: NodeJS.Timeout;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func(...args), delay);\n  };\n};\n\nexport const throttle = <T extends (...args: unknown[]) => unknown>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void => {\n  let lastCall = 0;\n  \n  return (...args: Parameters<T>) => {\n    const now = Date.now();\n    if (now - lastCall >= delay) {\n      lastCall = now;\n      func(...args);\n    }\n  };\n};\n\n// React performance utilities\nexport const shallowEqual = (obj1: unknown, obj2: unknown): boolean => {\n  const keys1 = Object.keys(obj1);\n  const keys2 = Object.keys(obj2);\n  \n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  \n  for (const key of keys1) {\n    if (obj1[key] !== obj2[key]) {\n      return false;\n    }\n  }\n  \n  return true;\n};\n\n// Optimized component update check\nexport const shouldComponentUpdate = (prevProps: unknown, nextProps: unknown): boolean => {\n  return !shallowEqual(prevProps, nextProps);\n};\n\nexport default {\n  formatCurrency,\n  formatDate,\n  calculateTransactionMetrics,\n  calculateAccountMetrics,\n  groupTransactionsByDate,\n  groupTransactionsByCategory,\n  filterTransactions,\n  sortTransactions,\n  getTransactionColor,\n  getCategoryColor,\n  debounce,\n  throttle,\n  shallowEqual,\n  shouldComponentUpdate,\n  memoize\n};","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/performanceOptimizer.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/performanceOptimizer.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Performance Optimization Utilities for Vueni\nimport React from 'react';\n\ninterface PerformanceMetrics {\n  fps: number;\n  memoryUsage: number;\n  isLowEndDevice: boolean;\n  isMobile: boolean;\n  supportsWebGL: boolean;\n  prefersReducedMotion: boolean;\n}\n\nclass PerformanceMonitor {\n  private static instance: PerformanceMonitor;\n  private metrics: PerformanceMetrics;\n  private frameCount = 0;\n  private lastTime = performance.now();\n  private animationId: number | null = null;\n  private callbacks: Array<(metrics: PerformanceMetrics) => void> = [];\n\n  private constructor() {\n    this.metrics = this.detectCapabilities();\n    this.startMonitoring();\n  }\n\n  static getInstance(): PerformanceMonitor {\n    if (!PerformanceMonitor.instance) {\n      PerformanceMonitor.instance = new PerformanceMonitor();\n    }\n    return PerformanceMonitor.instance;\n  }\n\n  private detectCapabilities(): PerformanceMetrics {\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n      navigator.userAgent\n    );\n    \n    const isLowEndDevice = navigator.hardwareConcurrency \n      ? navigator.hardwareConcurrency < 4 \n      : isMobile;\n\n    const supportsWebGL = (() => {\n      try {\n        const canvas = document.createElement('canvas');\n        return !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n      } catch {\n        return false;\n      }\n    })();\n\n    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n    return {\n      fps: 60,\n      memoryUsage: 0,\n      isLowEndDevice,\n      isMobile,\n      supportsWebGL,\n      prefersReducedMotion\n    };\n  }\n\n  private startMonitoring() {\n    const monitor = () => {\n      this.frameCount++;\n      const currentTime = performance.now();\n      \n      if (currentTime - this.lastTime >= 1000) {\n        this.metrics.fps = Math.round((this.frameCount * 1000) / (currentTime - this.lastTime));\n        this.frameCount = 0;\n        this.lastTime = currentTime;\n\n        // Update memory usage if available\n        if ('memory' in performance) {\n          this.metrics.memoryUsage = (performance as any).memory.usedJSHeapSize / 1048576; // MB\n        }\n\n        // Notify callbacks\n        this.callbacks.forEach(callback => callback(this.metrics));\n      }\n\n      this.animationId = requestAnimationFrame(monitor);\n    };\n\n    this.animationId = requestAnimationFrame(monitor);\n  }\n\n  getMetrics(): PerformanceMetrics {\n    return { ...this.metrics };\n  }\n\n  subscribe(callback: (metrics: PerformanceMetrics) => void) {\n    this.callbacks.push(callback);\n    return () => {\n      this.callbacks = this.callbacks.filter(cb => cb !== callback);\n    };\n  }\n\n  destroy() {\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n    }\n    this.callbacks = [];\n  }\n}\n\n// Performance-aware settings\nexport const getOptimizedSettings = (metrics: PerformanceMetrics) => {\n  const settings = {\n    liquidGlass: {\n      enabled: true,\n      intensity: 0.6,\n      distortion: 0.4,\n      animated: true,\n      interactive: true\n    },\n    animations: {\n      enabled: true,\n      duration: 300,\n      stagger: 100\n    },\n    rendering: {\n      lazyLoad: false,\n      virtualization: false,\n      batchUpdates: false\n    }\n  };\n\n  // Performance-based optimizations\n  if (metrics.fps < 30) {\n    settings.liquidGlass.animated = false;\n    settings.liquidGlass.intensity *= 0.5;\n    settings.animations.duration *= 0.5;\n    settings.rendering.batchUpdates = true;\n  }\n\n  if (metrics.isLowEndDevice) {\n    settings.liquidGlass.intensity *= 0.6;\n    settings.liquidGlass.distortion *= 0.6;\n    settings.liquidGlass.interactive = false;\n    settings.rendering.lazyLoad = true;\n  }\n\n  if (metrics.isMobile) {\n    settings.liquidGlass.intensity *= 0.7;\n    settings.liquidGlass.animated = false;\n    settings.animations.duration *= 0.7;\n    settings.rendering.lazyLoad = true;\n  }\n\n  if (!metrics.supportsWebGL) {\n    settings.liquidGlass.enabled = false;\n  }\n\n  if (metrics.prefersReducedMotion) {\n    settings.liquidGlass.animated = false;\n    settings.animations.enabled = false;\n  }\n\n  return settings;\n};\n\n// Lazy loading utility\nexport const createLazyComponent = (\n  importFn: () => Promise<{ default: React.ComponentType<any> }>\n) => {\n  return React.lazy(() => {\n    const metrics = PerformanceMonitor.getInstance().getMetrics();\n    \n    if (metrics.isLowEndDevice) {\n      // Delay loading on low-end devices\n      return new Promise(resolve => {\n        setTimeout(() => resolve(importFn()), 100);\n      });\n    } else {\n      return importFn();\n    }\n  });\n};\n\n// Debounced state updates for performance\nexport const useDebouncedState = <T>(\n  initialValue: T,\n  delay: number = 300\n): [T, (value: T) => void] => {\n  const [state, setState] = React.useState(initialValue);\n  const [debouncedState, setDebouncedState] = React.useState(initialValue);\n  \n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedState(state);\n    }, delay);\n    \n    return () => clearTimeout(timer);\n  }, [state, delay]);\n  \n  return [debouncedState, setState];\n};\n\n// Performance-aware useEffect\nexport const usePerformanceAwareEffect = (\n  effect: React.EffectCallback,\n  deps?: React.DependencyList,\n  highPriority: boolean = false\n) => {\n  React.useEffect(() => {\n    const metrics = PerformanceMonitor.getInstance().getMetrics();\n    \n    if (!highPriority && metrics.fps < 30) {\n      // Defer non-critical effects when performance is poor\n      const timer = setTimeout(effect, 100);\n      return () => clearTimeout(timer);\n    } else {\n      return effect();\n    }\n  }, deps);\n};\n\n// Batch state updates for better performance\nexport const useBatchedUpdates = () => {\n  const [updates, setUpdates] = React.useState<Array<() => void>>([]);\n  \n  const batchUpdate = React.useCallback((updateFn: () => void) => {\n    setUpdates(prev => [...prev, updateFn]);\n  }, []);\n  \n  React.useEffect(() => {\n    if (updates.length > 0) {\n      const timer = setTimeout(() => {\n        React.startTransition(() => {\n          updates.forEach(update => update());\n          setUpdates([]);\n        });\n      }, 16); // Next frame\n      \n      return () => clearTimeout(timer);\n    }\n  }, [updates]);\n  \n  return batchUpdate;\n};\n\n// Hook for performance monitoring\nexport const usePerformanceMonitor = () => {\n  const [metrics, setMetrics] = React.useState<PerformanceMetrics>(\n    PerformanceMonitor.getInstance().getMetrics()\n  );\n  \n  React.useEffect(() => {\n    const monitor = PerformanceMonitor.getInstance();\n    const unsubscribe = monitor.subscribe(setMetrics);\n    \n    return unsubscribe;\n  }, []);\n  \n  return metrics;\n};\n\n// Memory-efficient memoization\nexport const useOptimizedMemo = <T>(\n  factory: () => T,\n  deps: React.DependencyList,\n  expiry: number = 5000 // 5 seconds\n) => {\n  const memoRef = React.useRef<{ value: T; timestamp: number; deps: React.DependencyList } | null>(null);\n  \n  return React.useMemo(() => {\n    const now = Date.now();\n    \n    if (\n      !memoRef.current ||\n      now - memoRef.current.timestamp > expiry ||\n      !deps.every((dep, index) => dep === memoRef.current!.deps[index])\n    ) {\n      memoRef.current = {\n        value: factory(),\n        timestamp: now,\n        deps: [...deps] // Create a copy to avoid mutations\n      };\n    }\n    \n    return memoRef.current.value;\n  }, [factory, expiry, ...deps]); // Add all missing dependencies\n};\n\nexport default PerformanceMonitor; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/sanitize.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/sanitize.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Input sanitization utility to prevent XSS attacks\n\nexport class InputSanitizer {\n  // Basic HTML entities that need escaping\n  private static htmlEntities: Record<string, string> = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n  };\n\n  /**\n   * Escape HTML entities to prevent XSS\n   */\n  static escapeHtml(input: string): string {\n    return String(input).replace(/[&<>\"'/]/g, (match) => \n      this.htmlEntities[match] || match\n    );\n  }\n\n  /**\n   * Sanitize user input for display\n   */\n  static sanitizeText(input: string): string {\n    if (!input) return '';\n    \n    // Remove any script tags\n    let sanitized = input.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\n    \n    // Remove any event handlers\n    sanitized = sanitized.replace(/\\bon\\w+\\s*=\\s*[\"'][^\"']*[\"']/gi, '');\n    \n    // Escape HTML entities\n    return this.escapeHtml(sanitized);\n  }\n\n  /**\n   * Sanitize financial amounts\n   */\n  static sanitizeAmount(input: string | number): number {\n    const amount = typeof input === 'string' ? parseFloat(input) : input;\n    \n    if (isNaN(amount) || !isFinite(amount)) {\n      return 0;\n    }\n    \n    // Limit to 2 decimal places for financial amounts\n    return Math.round(amount * 100) / 100;\n  }\n\n  /**\n   * Sanitize and validate email\n   */\n  static sanitizeEmail(email: string): string {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    const sanitized = email.trim().toLowerCase();\n    \n    return emailRegex.test(sanitized) ? sanitized : '';\n  }\n\n  /**\n   * Sanitize URL\n   */\n  static sanitizeUrl(url: string): string {\n    try {\n      const parsed = new URL(url);\n      // Only allow http and https protocols\n      if (!['http:', 'https:'].includes(parsed.protocol)) {\n        return '';\n      }\n      return parsed.toString();\n    } catch {\n      return '';\n    }\n  }\n\n  /**\n   * Remove any potentially dangerous characters from filenames\n   */\n  static sanitizeFilename(filename: string): string {\n    return filename\n      .replace(/[^a-zA-Z0-9._-]/g, '_')\n      .replace(/\\.{2,}/g, '_');\n  }\n\n  /**\n   * Validate and sanitize transaction category\n   */\n  static sanitizeCategory(category: string): string {\n    const validCategories = [\n      'groceries', 'dining', 'transportation', 'entertainment',\n      'shopping', 'utilities', 'healthcare', 'education',\n      'savings', 'investments', 'other'\n    ];\n    \n    const sanitized = category.toLowerCase().trim();\n    return validCategories.includes(sanitized) ? sanitized : 'other';\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/secureRandom.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/secureRandom.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Secure Random Generation Utilities\n * Provides cryptographically secure random generation with fallbacks\n */\n\nexport class SecureRandom {\n  /**\n   * Generates cryptographically secure random bytes\n   */\n  static getRandomBytes(length: number): Uint8Array {\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      const array = new Uint8Array(length);\n      crypto.getRandomValues(array);\n      return array;\n    } else {\n      console.warn('SECURITY WARNING: crypto.getRandomValues not available, using fallback');\n      // Less secure fallback\n      const array = new Uint8Array(length);\n      for (let i = 0; i < length; i++) {\n        array[i] = Math.floor(Math.random() * 256);\n      }\n      return array;\n    }\n  }\n\n  /**\n   * Generates a secure random hex string\n   */\n  static getRandomHex(length: number): string {\n    const bytes = this.getRandomBytes(length);\n    return Array.from(bytes, byte => byte.toString(16).padStart(2, '0')).join('');\n  }\n\n  /**\n   * Generates a secure random alphanumeric string\n   */\n  static getRandomAlphaNumeric(length: number): string {\n    const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n    const bytes = this.getRandomBytes(length);\n    return Array.from(bytes, byte => chars[byte % chars.length]).join('');\n  }\n\n  /**\n   * Generates a secure session ID\n   */\n  static generateSessionId(prefix: string = 'sess'): string {\n    const timestamp = Date.now().toString(36);\n    const randomPart = this.getRandomHex(16);\n    return `${prefix}_${timestamp}_${randomPart}`;\n  }\n\n  /**\n   * Generates a secure CSRF token\n   */\n  static generateCSRFToken(): string {\n    const timestamp = Date.now().toString(36);\n    const randomPart = this.getRandomHex(32);\n    return `${randomPart}${timestamp}`;\n  }\n\n  /**\n   * Generates a secure API key or token\n   */\n  static generateSecureToken(length: number = 32): string {\n    return this.getRandomHex(length);\n  }\n\n  /**\n   * Generates a secure ID for events/alerts\n   */\n  static generateSecureId(prefix: string): string {\n    const timestamp = Date.now();\n    const randomPart = this.getRandomHex(8);\n    return `${prefix}_${timestamp}_${randomPart}`;\n  }\n\n  /**\n   * Checks if secure random generation is available\n   */\n  static isSecureRandomAvailable(): boolean {\n    return typeof crypto !== 'undefined' && !!crypto.getRandomValues;\n  }\n}\n\n// Export individual functions for convenience\nexport const generateSecureSessionId = (prefix?: string) => SecureRandom.generateSessionId(prefix);\nexport const generateSecureCSRFToken = () => SecureRandom.generateCSRFToken();\nexport const generateSecureToken = (length?: number) => SecureRandom.generateSecureToken(length);\nexport const generateSecureId = (prefix: string) => SecureRandom.generateSecureId(prefix);\nexport const isSecureRandomAvailable = () => SecureRandom.isSecureRandomAvailable();","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/security.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/security.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * VueniSecurity - Input sanitization and XSS protection for financial data\n * Implements security measures for financial compliance\n */\n\n// Simple HTML entity encoding for XSS protection\nconst HTML_ENTITIES: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\n/**\n * VueniInputSanitizer - Sanitizes user input for financial applications\n */\nexport class VueniInputSanitizer {\n  /**\n   * Sanitizes text input to prevent XSS attacks\n   */\n  static sanitizeText(input: string): string {\n    if (typeof input !== 'string') {\n      throw new Error('Input must be a string');\n    }\n\n    return input.replace(/[&<>\"'`='/]/g, (match) => HTML_ENTITIES[match] || match);\n  }\n\n  /**\n   * Sanitizes financial amounts (numbers only with decimal points)\n   */\n  static sanitizeFinancialAmount(input: string | number): number {\n    if (typeof input === 'number') {\n      if (!Number.isFinite(input)) {\n        throw new Error('Invalid financial amount: not a finite number');\n      }\n      return Math.round(input * 100) / 100; // Round to 2 decimal places\n    }\n\n    if (typeof input !== 'string') {\n      throw new Error('Financial amount must be a string or number');\n    }\n\n    // Remove all non-numeric characters except decimal point and minus sign\n    const sanitized = input.replace(/[^0-9.-]/g, '');\n    \n    // Validate format\n    if (!/^-?\\d*\\.?\\d*$/.test(sanitized)) {\n      throw new Error('Invalid financial amount format');\n    }\n\n    const amount = parseFloat(sanitized);\n    \n    if (!Number.isFinite(amount)) {\n      throw new Error('Invalid financial amount: not a finite number');\n    }\n\n    // Prevent extremely large amounts (over $1 trillion)\n    if (Math.abs(amount) > 1000000000000) {\n      throw new Error('Financial amount exceeds maximum allowed value');\n    }\n\n    return Math.round(amount * 100) / 100;\n  }\n\n  /**\n   * Sanitizes transaction descriptions with length limits\n   */\n  static sanitizeTransactionDescription(input: string): string {\n    if (typeof input !== 'string') {\n      throw new Error('Transaction description must be a string');\n    }\n\n    // Limit length to prevent storage issues\n    if (input.length > 500) {\n      throw new Error('Transaction description too long (max 500 characters)');\n    }\n\n    // Sanitize HTML and trim whitespace\n    return this.sanitizeText(input.trim());\n  }\n\n  /**\n   * Sanitizes percentage values for financial calculations\n   */\n  static sanitizePercentage(input: string | number): number {\n    const amount = this.sanitizeFinancialAmount(input);\n    \n    // Reasonable percentage limits\n    if (amount < 0 || amount > 100) {\n      throw new Error('Percentage must be between 0 and 100');\n    }\n\n    return amount;\n  }\n\n  /**\n   * Sanitizes interest rates (can be higher than 100%)\n   */\n  static sanitizeInterestRate(input: string | number): number {\n    const rate = this.sanitizeFinancialAmount(input);\n    \n    // Reasonable interest rate limits (0% to 1000%)\n    if (rate < 0 || rate > 1000) {\n      throw new Error('Interest rate must be between 0% and 1000%');\n    }\n\n    return rate;\n  }\n\n  /**\n   * Sanitizes year values for financial calculations\n   */\n  static sanitizeYear(input: string | number): number {\n    const year = typeof input === 'string' ? parseInt(input, 10) : input;\n    \n    if (!Number.isInteger(year)) {\n      throw new Error('Year must be an integer');\n    }\n\n    const currentYear = new Date().getFullYear();\n    \n    // Reasonable year range (1900 to 100 years in the future)\n    if (year < 1900 || year > currentYear + 100) {\n      throw new Error(`Year must be between 1900 and ${currentYear + 100}`);\n    }\n\n    return year;\n  }\n\n  /**\n   * Sanitizes time periods (in years) for financial calculations\n   */\n  static sanitizeTimePeriod(input: string | number): number {\n    const period = this.sanitizeFinancialAmount(input);\n    \n    // Reasonable time period limits (0.1 to 100 years)\n    if (period < 0.1 || period > 100) {\n      throw new Error('Time period must be between 0.1 and 100 years');\n    }\n\n    return period;\n  }\n\n  /**\n   * Validates and sanitizes email addresses\n   */\n  static sanitizeEmail(input: string): string {\n    if (typeof input !== 'string') {\n      throw new Error('Email must be a string');\n    }\n\n    const sanitized = input.trim().toLowerCase();\n    \n    // Basic email validation regex\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    \n    if (!emailRegex.test(sanitized)) {\n      throw new Error('Invalid email format');\n    }\n\n    if (sanitized.length > 254) {\n      throw new Error('Email address too long');\n    }\n\n    return this.sanitizeText(sanitized);\n  }\n\n  /**\n   * Sanitizes phone numbers (US format)\n   */\n  static sanitizePhoneNumber(input: string): string {\n    if (typeof input !== 'string') {\n      throw new Error('Phone number must be a string');\n    }\n\n    // Remove all non-numeric characters\n    const digits = input.replace(/\\D/g, '');\n    \n    // Validate US phone number format (10 or 11 digits)\n    if (digits.length === 10) {\n      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;\n    } else if (digits.length === 11 && digits[0] === '1') {\n      return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;\n    } else {\n      throw new Error('Invalid phone number format');\n    }\n  }\n}\n\n/**\n * VueniCSRFProtection - CSRF token management for financial operations\n */\nexport class VueniCSRFProtection {\n  private static tokenKey = 'vueni:csrf:token';\n  private static tokenExpiry = 'vueni:csrf:expiry';\n\n  /**\n   * Generates a new CSRF token\n   */\n  static generateToken(): string {\n    const token = crypto.getRandomValues(new Uint8Array(32));\n    const tokenString = Array.from(token, byte => byte.toString(16).padStart(2, '0')).join('');\n    \n    // Store token and expiry (1 hour)\n    const expiry = Date.now() + (60 * 60 * 1000);\n    sessionStorage.setItem(this.tokenKey, tokenString);\n    sessionStorage.setItem(this.tokenExpiry, expiry.toString());\n    \n    return tokenString;\n  }\n\n  /**\n   * Validates a CSRF token\n   */\n  static validateToken(token: string): boolean {\n    const storedToken = sessionStorage.getItem(this.tokenKey);\n    const expiry = sessionStorage.getItem(this.tokenExpiry);\n    \n    if (!storedToken || !expiry) {\n      return false;\n    }\n\n    // Check if token has expired\n    if (Date.now() > parseInt(expiry, 10)) {\n      this.clearToken();\n      return false;\n    }\n\n    // Constant-time comparison to prevent timing attacks\n    return this.constantTimeCompare(token, storedToken);\n  }\n\n  /**\n   * Clears the current CSRF token\n   */\n  static clearToken(): void {\n    sessionStorage.removeItem(this.tokenKey);\n    sessionStorage.removeItem(this.tokenExpiry);\n  }\n\n  /**\n   * Gets the current CSRF token or generates a new one\n   */\n  static getToken(): string {\n    const storedToken = sessionStorage.getItem(this.tokenKey);\n    const expiry = sessionStorage.getItem(this.tokenExpiry);\n    \n    if (storedToken && expiry && Date.now() < parseInt(expiry, 10)) {\n      return storedToken;\n    }\n\n    return this.generateToken();\n  }\n\n  /**\n   * Constant-time string comparison to prevent timing attacks\n   */\n  private static constantTimeCompare(a: string, b: string): boolean {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    let result = 0;\n    for (let i = 0; i < a.length; i++) {\n      result |= a.charCodeAt(i) ^ b.charCodeAt(i);\n    }\n\n    return result === 0;\n  }\n}\n\n/**\n * VueniRateLimit - Simple rate limiting for financial calculators\n */\nexport class VueniRateLimit {\n  private static limits = new Map<string, { count: number; resetTime: number }>();\n  private static readonly MAX_REQUESTS = 100; // Max requests per hour\n  private static readonly WINDOW_MS = 60 * 60 * 1000; // 1 hour\n\n  /**\n   * Checks if an operation is rate limited\n   */\n  static isRateLimited(operation: string): boolean {\n    const key = `vueni:rate:${operation}`;\n    const now = Date.now();\n    const limit = this.limits.get(key);\n\n    if (!limit || now > limit.resetTime) {\n      // Reset or initialize limit\n      this.limits.set(key, { count: 1, resetTime: now + this.WINDOW_MS });\n      return false;\n    }\n\n    if (limit.count >= this.MAX_REQUESTS) {\n      return true;\n    }\n\n    limit.count++;\n    return false;\n  }\n\n  /**\n   * Gets remaining requests for an operation\n   */\n  static getRemainingRequests(operation: string): number {\n    const key = `vueni:rate:${operation}`;\n    const limit = this.limits.get(key);\n    \n    if (!limit || Date.now() > limit.resetTime) {\n      return this.MAX_REQUESTS;\n    }\n\n    return Math.max(0, this.MAX_REQUESTS - limit.count);\n  }\n\n  /**\n   * Clears rate limit for an operation (for testing)\n   */\n  static clearLimit(operation: string): void {\n    const key = `vueni:rate:${operation}`;\n    this.limits.delete(key);\n  }\n}\n\n/**\n * VueniSecurityMonitor - Basic security event monitoring\n */\nexport class VueniSecurityMonitor {\n  private static events: Array<{\n    type: string;\n    description: string;\n    timestamp: string;\n    userAgent?: string;\n    ip?: string;\n  }> = [];\n\n  /**\n   * Logs a security event\n   */\n  static logEvent(type: string, description: string, metadata?: Record<string, unknown>): void {\n    const event = {\n      type,\n      description,\n      timestamp: new Date().toISOString(),\n      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined,\n      ...metadata\n    };\n\n    this.events.push(event);\n\n    // Keep only last 1000 events\n    if (this.events.length > 1000) {\n      this.events.shift();\n    }\n\n    // Log to console in development\n    if (import.meta.env.DEV) {\n      console.warn('[VueniSecurityMonitor]', event);\n    }\n\n    // In production, send to monitoring service\n    if (import.meta.env.PROD) {\n      this.sendToMonitoringService(event);\n    }\n  }\n\n  /**\n   * Gets recent security events\n   */\n  static getEvents(): typeof VueniSecurityMonitor.events {\n    return [...this.events];\n  }\n\n  /**\n   * Clears security events\n   */\n  static clearEvents(): void {\n    this.events = [];\n  }\n\n  /**\n   * Sends security events to monitoring service (production)\n   */\n  private static sendToMonitoringService(event: {\n    type: string;\n    description: string;\n    timestamp: string;\n    userAgent?: string;\n    [key: string]: unknown;\n  }): void {\n    // Placeholder for production monitoring integration\n    // This would send to services like DataDog, Sentry, etc.\n  }\n}\n\n// Security utility functions\nexport const security = {\n  sanitize: VueniInputSanitizer,\n  csrf: VueniCSRFProtection,\n  rateLimit: VueniRateLimit,\n  monitor: VueniSecurityMonitor\n};","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/session.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/session.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * VueniSessionManager - Secure session management for financial applications\n * Implements best practices for financial data security and user session handling\n */\n\nimport { VueniSecureStorage } from './crypto';\nimport { generateSecureToken } from './secureRandom';\nimport { VueniSecurityMonitor } from './security';\n\nexport interface VueniSession {\n  id: string;\n  userId?: string;\n  startTime: string;\n  lastActivity: string;\n  expiresAt: string;\n  isActive: boolean;\n  metadata: {\n    userAgent: string;\n    ipAddress?: string;\n    loginMethod?: 'demo' | 'oauth' | 'email';\n    securityLevel: 'basic' | 'enhanced' | 'maximum';\n  };\n}\n\nexport interface UserPreferences {\n  theme: 'light' | 'dark' | 'system';\n  currency: string;\n  language: string;\n  notifications: {\n    email: boolean;\n    push: boolean;\n    sms: boolean;\n  };\n  privacy: {\n    shareUsageData: boolean;\n    personalizedAds: boolean;\n  };\n}\n\n/**\n * VueniSessionManager - Manages user sessions with financial-grade security\n */\nexport class VueniSessionManager {\n  private static readonly SESSION_KEY = 'vueni:session:current';\n  private static readonly PREFERENCES_KEY = 'vueni:user:preferences';\n  private static readonly SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutes\n  private static readonly CLEANUP_INTERVAL = 5 * 60 * 1000; // 5 minutes\n  \n  private static cleanupInterval: NodeJS.Timeout | null = null;\n\n  /**\n   * Initializes the session manager\n   */\n  static initialize(): void {\n    // Start cleanup interval for expired sessions\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupExpiredSessions();\n    }, this.CLEANUP_INTERVAL);\n\n    // Check if existing session is valid\n    const session = this.getCurrentSession();\n    if (session && !this.isSessionValid(session)) {\n      this.endSession();\n    }\n\n    VueniSecurityMonitor.logEvent('SESSION_MANAGER_INITIALIZED', 'Session manager started');\n  }\n\n  /**\n   * Creates a new user session\n   */\n  static createSession(options: {\n    userId?: string;\n    loginMethod?: 'demo' | 'oauth' | 'email';\n    securityLevel?: 'basic' | 'enhanced' | 'maximum';\n  } = {}): VueniSession {\n    const sessionId = this.generateSessionId();\n    const now = new Date().toISOString();\n    const expires = new Date(Date.now() + this.SESSION_TIMEOUT).toISOString();\n\n    const session: VueniSession = {\n      id: sessionId,\n      userId: options.userId || 'demo-user',\n      startTime: now,\n      lastActivity: now,\n      expiresAt: expires,\n      isActive: true,\n      metadata: {\n        userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : 'unknown',\n        loginMethod: options.loginMethod || 'demo',\n        securityLevel: options.securityLevel || 'basic'\n      }\n    };\n\n    // Store session securely\n    VueniSecureStorage.setItem(this.SESSION_KEY, session, { \n      sensitive: true, \n      sessionOnly: session.metadata.securityLevel === 'maximum' \n    });\n\n    VueniSecurityMonitor.logEvent('SESSION_CREATED', `New session created for user ${session.userId}`, {\n      sessionId: session.id,\n      loginMethod: session.metadata.loginMethod,\n      securityLevel: session.metadata.securityLevel\n    });\n\n    return session;\n  }\n\n  /**\n   * Gets the current active session\n   */\n  static getCurrentSession(): VueniSession | null {\n    try {\n      const session = VueniSecureStorage.getItem(this.SESSION_KEY);\n      \n      if (!session) {\n        return null;\n      }\n\n      // Validate session structure\n      if (typeof session !== 'object' || \n          !session.id || \n          !session.startTime || \n          !session.expiresAt) {\n        VueniSecurityMonitor.logEvent('SESSION_INVALID_STRUCTURE', 'Invalid session structure detected');\n        this.endSession();\n        return null;\n      }\n\n      return session as VueniSession;\n    } catch (error) {\n      VueniSecurityMonitor.logEvent('SESSION_RETRIEVAL_ERROR', 'Error retrieving current session', { error: error.message });\n      return null;\n    }\n  }\n\n  /**\n   * Updates the session activity timestamp\n   */\n  static updateActivity(): boolean {\n    const session = this.getCurrentSession();\n    \n    if (!session || !this.isSessionValid(session)) {\n      return false;\n    }\n\n    const now = new Date().toISOString();\n    const updatedSession: VueniSession = {\n      ...session,\n      lastActivity: now,\n      expiresAt: new Date(Date.now() + this.SESSION_TIMEOUT).toISOString()\n    };\n\n    VueniSecureStorage.setItem(this.SESSION_KEY, updatedSession, { \n      sensitive: true,\n      sessionOnly: session.metadata.securityLevel === 'maximum'\n    });\n\n    return true;\n  }\n\n  /**\n   * Checks if a session is valid and not expired\n   */\n  static isSessionValid(session: VueniSession): boolean {\n    if (!session || !session.isActive) {\n      return false;\n    }\n\n    const now = Date.now();\n    const expiresAt = new Date(session.expiresAt).getTime();\n\n    if (now > expiresAt) {\n      VueniSecurityMonitor.logEvent('SESSION_EXPIRED', `Session ${session.id} has expired`);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Checks if user is authenticated\n   */\n  static isAuthenticated(): boolean {\n    const session = this.getCurrentSession();\n    return session !== null && this.isSessionValid(session);\n  }\n\n  /**\n   * Ends the current session\n   */\n  static endSession(): void {\n    const session = this.getCurrentSession();\n    \n    if (session) {\n      VueniSecurityMonitor.logEvent('SESSION_ENDED', `Session ${session.id} ended by user`);\n    }\n\n    VueniSecureStorage.removeItem(this.SESSION_KEY);\n    \n    // Clear any session-only data\n    VueniSecureStorage.cleanupExpiredSessions();\n  }\n\n  /**\n   * Gets user preferences\n   */\n  static getUserPreferences(): UserPreferences {\n    try {\n      const preferences = VueniSecureStorage.getItem(this.PREFERENCES_KEY);\n      \n      if (preferences) {\n        return preferences as UserPreferences;\n      }\n\n      // Return default preferences\n      return this.getDefaultPreferences();\n    } catch (error) {\n      VueniSecurityMonitor.logEvent('PREFERENCES_RETRIEVAL_ERROR', 'Error retrieving user preferences', { error: error.message });\n      return this.getDefaultPreferences();\n    }\n  }\n\n  /**\n   * Updates user preferences\n   */\n  static updateUserPreferences(updates: Partial<UserPreferences>): void {\n    if (!this.isAuthenticated()) {\n      throw new Error('User must be authenticated to update preferences');\n    }\n\n    try {\n      const currentPreferences = this.getUserPreferences();\n      const updatedPreferences = { ...currentPreferences, ...updates };\n\n      VueniSecureStorage.setItem(this.PREFERENCES_KEY, updatedPreferences);\n      \n      VueniSecurityMonitor.logEvent('PREFERENCES_UPDATED', 'User preferences updated');\n    } catch (error) {\n      VueniSecurityMonitor.logEvent('PREFERENCES_UPDATE_ERROR', 'Error updating user preferences', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Gets session information for display\n   */\n  static getSessionInfo(): {\n    isActive: boolean;\n    startTime?: string;\n    lastActivity?: string;\n    timeRemaining?: number;\n    securityLevel?: string;\n  } {\n    const session = this.getCurrentSession();\n    \n    if (!session || !this.isSessionValid(session)) {\n      return { isActive: false };\n    }\n\n    const expiresAt = new Date(session.expiresAt).getTime();\n    const timeRemaining = Math.max(0, expiresAt - Date.now());\n\n    return {\n      isActive: true,\n      startTime: session.startTime,\n      lastActivity: session.lastActivity,\n      timeRemaining,\n      securityLevel: session.metadata.securityLevel\n    };\n  }\n\n  /**\n   * Extends the current session\n   */\n  static extendSession(minutes: number = 30): boolean {\n    const session = this.getCurrentSession();\n    \n    if (!session || !this.isSessionValid(session)) {\n      return false;\n    }\n\n    const newExpiry = new Date(Date.now() + (minutes * 60 * 1000)).toISOString();\n    const updatedSession: VueniSession = {\n      ...session,\n      expiresAt: newExpiry,\n      lastActivity: new Date().toISOString()\n    };\n\n    VueniSecureStorage.setItem(this.SESSION_KEY, updatedSession, { \n      sensitive: true,\n      sessionOnly: session.metadata.securityLevel === 'maximum'\n    });\n\n    VueniSecurityMonitor.logEvent('SESSION_EXTENDED', `Session ${session.id} extended by ${minutes} minutes`);\n    \n    return true;\n  }\n\n  /**\n   * Generates a cryptographically secure session ID\n   */\n  private static generateSessionId(): string {\n    return generateSecureToken(32);\n  }\n\n  /**\n   * Cleans up expired sessions\n   */\n  private static cleanupExpiredSessions(): void {\n    try {\n      VueniSecureStorage.cleanupExpiredSessions();\n      \n      const session = this.getCurrentSession();\n      if (session && !this.isSessionValid(session)) {\n        this.endSession();\n      }\n    } catch (error) {\n      VueniSecurityMonitor.logEvent('CLEANUP_ERROR', 'Error during session cleanup', { error: error.message });\n    }\n  }\n\n  /**\n   * Gets default user preferences\n   */\n  private static getDefaultPreferences(): UserPreferences {\n    return {\n      theme: 'system',\n      currency: 'USD',\n      language: 'en',\n      notifications: {\n        email: true,\n        push: false,\n        sms: false\n      },\n      privacy: {\n        shareUsageData: false,\n        personalizedAds: false\n      }\n    };\n  }\n\n  /**\n   * Destroys the session manager (cleanup)\n   */\n  static destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n\n    VueniSecurityMonitor.logEvent('SESSION_MANAGER_DESTROYED', 'Session manager destroyed');\n  }\n}\n\n/**\n * Session hook for React components\n */\nexport function useVueniSession() {\n  const session = VueniSessionManager.getCurrentSession();\n  const isAuthenticated = VueniSessionManager.isAuthenticated();\n  const sessionInfo = VueniSessionManager.getSessionInfo();\n  const preferences = VueniSessionManager.getUserPreferences();\n\n  return {\n    session,\n    isAuthenticated,\n    sessionInfo,\n    preferences,\n    updateActivity: () => VueniSessionManager.updateActivity(),\n    updatePreferences: (updates: Partial<UserPreferences>) => \n      VueniSessionManager.updateUserPreferences(updates),\n    extendSession: (minutes?: number) => VueniSessionManager.extendSession(minutes),\n    endSession: () => VueniSessionManager.endSession()\n  };\n}\n\n// Initialize session manager when module loads\nif (typeof window !== 'undefined') {\n  VueniSessionManager.initialize();\n}","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/sessionManager.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/sessionManager.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { securityConfig } from '@/config/security';\nimport { secureStorage } from './crypto';\n\ninterface SessionData {\n  userId?: string;\n  startTime: number;\n  lastActivity: number;\n  expiresAt: number;\n}\n\nexport class SessionManager {\n  private static readonly SESSION_KEY = 'user-session';\n  private static timeoutId: NodeJS.Timeout | null = null;\n  private static warningId: NodeJS.Timeout | null = null;\n\n  /**\n   * Initialize a new session\n   */\n  static initSession(userId?: string): void {\n    const now = Date.now();\n    const sessionData: SessionData = {\n      userId,\n      startTime: now,\n      lastActivity: now,\n      expiresAt: now + securityConfig.session.timeout,\n    };\n\n    secureStorage.setItem(this.SESSION_KEY, sessionData);\n    this.setupSessionTimers();\n  }\n\n  /**\n   * Get current session data\n   */\n  static getSession(): SessionData | null {\n    const sessionData = secureStorage.getItem(this.SESSION_KEY);\n    \n    if (!sessionData) return null;\n    \n    // Check if session has expired\n    if (Date.now() > sessionData.expiresAt) {\n      this.endSession();\n      return null;\n    }\n    \n    return sessionData;\n  }\n\n  /**\n   * Update last activity time\n   */\n  static updateActivity(): void {\n    const session = this.getSession();\n    if (!session) return;\n\n    const now = Date.now();\n    \n    if (securityConfig.session.extendOnActivity) {\n      session.expiresAt = now + securityConfig.session.timeout;\n    }\n    \n    session.lastActivity = now;\n    secureStorage.setItem(this.SESSION_KEY, session);\n    \n    // Reset timers\n    this.setupSessionTimers();\n  }\n\n  /**\n   * End the current session\n   */\n  static endSession(): void {\n    secureStorage.removeItem(this.SESSION_KEY);\n    this.clearTimers();\n    \n    // Redirect to login\n    if (window.location.pathname !== '/login') {\n      window.location.href = '/login';\n    }\n  }\n\n  /**\n   * Setup session timeout timers\n   */\n  private static setupSessionTimers(): void {\n    this.clearTimers();\n    \n    const session = this.getSession();\n    if (!session) return;\n\n    const now = Date.now();\n    const timeUntilExpiry = session.expiresAt - now;\n    const timeUntilWarning = timeUntilExpiry - securityConfig.session.warningTime;\n\n    // Set warning timer\n    if (timeUntilWarning > 0) {\n      this.warningId = setTimeout(() => {\n        this.showSessionWarning();\n      }, timeUntilWarning);\n    }\n\n    // Set expiry timer\n    if (timeUntilExpiry > 0) {\n      this.timeoutId = setTimeout(() => {\n        this.endSession();\n      }, timeUntilExpiry);\n    }\n  }\n\n  /**\n   * Clear all timers\n   */\n  private static clearTimers(): void {\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n    if (this.warningId) {\n      clearTimeout(this.warningId);\n      this.warningId = null;\n    }\n  }\n\n  /**\n   * Show session expiry warning\n   */\n  private static showSessionWarning(): void {\n    // In a real app, this would show a modal or notification\n    console.warn('Your session will expire in 5 minutes. Please save your work.');\n    \n    // Dispatch custom event for UI components to handle\n    window.dispatchEvent(new CustomEvent('sessionWarning', {\n      detail: {\n        expiresIn: securityConfig.session.warningTime,\n      },\n    }));\n  }\n\n  /**\n   * Check if session is valid\n   */\n  static isSessionValid(): boolean {\n    return this.getSession() !== null;\n  }\n\n  /**\n   * Get time until session expires\n   */\n  static getTimeUntilExpiry(): number {\n    const session = this.getSession();\n    if (!session) return 0;\n    \n    const remaining = session.expiresAt - Date.now();\n    return Math.max(0, remaining);\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/shipping.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/shipping.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const carrierUrl = (carrier: string | undefined, track: string): string => {\n  if (!track) return '#';\n  switch (carrier) {\n    case 'UPS':\n      return `https://www.ups.com/track?tracknum=${track}`;\n    case 'FedEx':\n      return `https://www.fedex.com/fedextrack/?trknbr=${track}`;\n    case 'USPS':\n      return `https://tools.usps.com/go/TrackConfirmAction?tLabels=${track}`;\n    case 'DHL':\n      return `https://www.dhl.com/en/express/tracking.html?AWB=${track}`;\n    default:\n      return '#';\n  }\n};\n\nexport const prettyShipStatus = (status?: string): string => {\n  switch (status) {\n    case 'DELIVERED':\n      return 'Delivered';\n    case 'OUT_FOR_DELIVERY':\n      return 'Out for Delivery';\n    case 'IN_TRANSIT':\n      return 'In Transit';\n    case 'PENDING':\n      return 'Pending';\n    default:\n      return '–';\n  }\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/theme-color-mapper.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/theme-color-mapper.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Theme Color Mapper - Maps hardcoded chart colors to unified theme tokens\n * Part of Pass 3 theme cleanup - systematically replace hardcoded colors\n */\n\nimport { vueniTheme } from '@/theme/unified';\n\n// Common hardcoded colors and their unified theme replacements\nexport const HARDCODED_COLOR_MAP = {\n  // Chart color violations - most frequent\n  '#3b82f6': vueniTheme.colors.palette.primary,    // Blue -> Primary\n  '#10b981': vueniTheme.colors.palette.success,    // Green -> Success  \n  '#ef4444': vueniTheme.colors.palette.danger,     // Red -> Danger\n  '#f59e0b': vueniTheme.colors.palette.warning,    // Orange -> Warning\n  '#8b5cf6': vueniTheme.colors.semantic.chart.investments, // Purple -> Investments\n  \n  // Secondary violations  \n  '#22c55e': vueniTheme.colors.palette.success,    // Green variant -> Success\n  '#dc2626': vueniTheme.colors.palette.danger,     // Red variant -> Danger\n  '#6366f1': vueniTheme.colors.palette.primary,    // Blue variant -> Primary\n  '#a855f7': vueniTheme.colors.semantic.chart.investments, // Purple variant -> Investments\n  \n  // Legacy theme colors (exact matches from colors.ts)\n  '#4A9EFF': vueniTheme.colors.palette.primary,    // Legacy blue -> Primary\n  '#4AFF88': vueniTheme.colors.palette.success,    // Legacy green -> Success  \n  '#FF4A6A': vueniTheme.colors.palette.danger,     // Legacy red -> Danger\n  '#FFD700': vueniTheme.colors.palette.warning,    // Legacy gold -> Warning\n  '#A0A0B8': vueniTheme.colors.palette.neutral,    // Legacy gray -> Neutral\n  \n  // Apple System Colors (for chart consistency)\n  '#007AFF': vueniTheme.colors.palette.primary,    // Apple blue -> Primary\n  '#32D74B': vueniTheme.colors.palette.success,    // Apple green -> Success\n  '#FF453A': vueniTheme.colors.palette.danger,     // Apple red -> Danger\n  '#FF9F0A': vueniTheme.colors.palette.warning,    // Apple orange -> Warning\n  '#AF52DE': vueniTheme.colors.semantic.chart.investments, // Apple purple -> Investments\n} as const;\n\n// Utility function to replace hardcoded color with theme token\nexport const mapColorToTheme = (hardcodedColor: string): string => {\n  const upperColor = hardcodedColor.toUpperCase();\n  const mappedColor = HARDCODED_COLOR_MAP[hardcodedColor as keyof typeof HARDCODED_COLOR_MAP];\n  \n  if (mappedColor) {\n    console.warn(`[Theme Cleanup] Replaced hardcoded color ${hardcodedColor} with theme token`);\n    return mappedColor;\n  }\n  \n  // Return original if no mapping found (might be intentional brand colors)\n  return hardcodedColor;\n};\n\n// Chart-specific color mapping for financial data\nexport const getFinancialChartColor = (category: 'income' | 'spending' | 'savings' | 'investments' | 'debt' | 'neutral'): string => {\n  const colorMap = {\n    income: vueniTheme.colors.semantic.chart.income,\n    spending: vueniTheme.colors.semantic.chart.spending, \n    savings: vueniTheme.colors.semantic.chart.savings,\n    investments: vueniTheme.colors.semantic.chart.investments,\n    debt: vueniTheme.colors.semantic.chart.debt,\n    neutral: vueniTheme.colors.palette.neutral,\n  };\n  \n  return colorMap[category];\n};\n\n// Status color mapping for UI components  \nexport const getStatusColor = (status: 'success' | 'warning' | 'danger' | 'info' | 'neutral'): string => {\n  const statusMap = {\n    success: vueniTheme.colors.semantic.status.success,\n    warning: vueniTheme.colors.semantic.status.warning, \n    danger: vueniTheme.colors.semantic.status.error,\n    info: vueniTheme.colors.semantic.status.info,\n    neutral: vueniTheme.colors.palette.neutral,\n  };\n  \n  return statusMap[status];\n};\n\n// Score-based color mapping (common in financial apps)\nexport const getScoreColor = (score: number): string => {\n  if (score >= 80) return vueniTheme.colors.palette.success;  // Excellent\n  if (score >= 70) return vueniTheme.colors.palette.primary;  // Good  \n  if (score >= 60) return vueniTheme.colors.palette.warning;  // Fair\n  return vueniTheme.colors.palette.danger;                    // Poor\n};\n\n// Trend-based color mapping\nexport const getTrendColor = (trend: 'up' | 'down' | 'stable' | 'neutral'): string => {\n  const trendMap = {\n    up: vueniTheme.colors.semantic.financial.positive,\n    down: vueniTheme.colors.semantic.financial.negative,\n    stable: vueniTheme.colors.semantic.financial.neutral,\n    neutral: vueniTheme.colors.palette.neutral,\n  };\n  \n  return trendMap[trend];\n};\n\n// Export a comprehensive replacement function for bulk operations\nexport const replaceHardcodedColors = (content: string): string => {\n  let updatedContent = content;\n  \n  // Replace each hardcoded color with theme token access\n  Object.entries(HARDCODED_COLOR_MAP).forEach(([hardcoded, themeToken]) => {\n    // Replace hex colors in quotes\n    updatedContent = updatedContent.replace(\n      new RegExp(`['\"]${hardcoded}['\"]`, 'gi'),\n      `vueniTheme.colors.palette.primary /* replaced ${hardcoded} */`\n    );\n    \n    // Replace hex colors without quotes (in object literals)\n    updatedContent = updatedContent.replace(\n      new RegExp(`:\\\\s*${hardcoded}`, 'gi'),\n      `: ${themeToken} /* replaced ${hardcoded} */`\n    );\n  });\n  \n  return updatedContent;\n};\n\nexport default {\n  mapColorToTheme,\n  getFinancialChartColor,\n  getStatusColor,\n  getScoreColor, \n  getTrendColor,\n  replaceHardcodedColors,\n  HARDCODED_COLOR_MAP,\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/transactionScoring.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/transactionScoring.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Transaction scoring utilities\nexport interface TransactionData {\n  id: string;\n  merchant: string;\n  category: { name: string; color: string };\n  amount: number;\n  date: string;\n  status: 'completed' | 'pending' | 'failed';\n}\n\nexport interface TransactionScores {\n  financial: number;  // 0-100\n  health: number;     // 0-100\n  eco: number;        // 0-100\n}\n\nexport function calculateTransactionScores(transaction: TransactionData): TransactionScores {\n  const financialScore = calculateFinancialScore(transaction);\n  const healthScore = calculateHealthScore(transaction);\n  const ecoScore = calculateEcoScore(transaction);\n  \n  return { \n    financial: Math.round(financialScore), \n    health: Math.round(healthScore), \n    eco: Math.round(ecoScore) \n  };\n}\n\nfunction calculateFinancialScore(transaction: TransactionData): number {\n  const { merchant, category, amount } = transaction;\n  \n  let score = 50; // Base score\n  \n  // Essential spending gets higher scores\n  const essentialCategories = ['groceries', 'utilities', 'healthcare', 'insurance', 'gas'];\n  if (essentialCategories.some(cat => category.name.toLowerCase().includes(cat))) {\n    score += 20;\n  }\n  \n  // Discretionary spending gets lower scores\n  const discretionaryCategories = ['entertainment', 'dining', 'shopping', 'travel'];\n  if (discretionaryCategories.some(cat => category.name.toLowerCase().includes(cat))) {\n    score -= 10;\n  }\n  \n  // Amount factor (smaller amounts are better for discretionary)\n  const absAmount = Math.abs(amount);\n  if (absAmount > 500) score -= 20;\n  else if (absAmount > 200) score -= 10;\n  else if (absAmount > 100) score -= 5;\n  \n  // Subscription services (good for budgeting)\n  const subscriptionKeywords = ['netflix', 'spotify', 'gym', 'insurance', 'phone'];\n  if (subscriptionKeywords.some(keyword => merchant.toLowerCase().includes(keyword))) {\n    score += 15;\n  }\n  \n  return Math.max(0, Math.min(100, score));\n}\n\nfunction calculateHealthScore(transaction: TransactionData): number {\n  const { merchant, category, amount } = transaction;\n  \n  let score = 50;\n  \n  // Positive health impact\n  const healthyKeywords = ['gym', 'fitness', 'organic', 'whole foods', 'medical', 'pharmacy', 'yoga', 'health'];\n  if (healthyKeywords.some(keyword => merchant.toLowerCase().includes(keyword))) {\n    score += 30;\n  }\n  \n  // Negative health impact\n  const unhealthyKeywords = ['mcdonald', 'burger', 'pizza', 'fast', 'alcohol', 'tobacco', 'candy'];\n  if (unhealthyKeywords.some(keyword => merchant.toLowerCase().includes(keyword))) {\n    score -= 30;\n  }\n  \n  // Category impact\n  const categoryImpact: Record<string, number> = {\n    'Healthcare': 85,\n    'Fitness': 90,\n    'Groceries': 70,\n    'Dining': 40,\n    'Coffee': 45,\n    'Entertainment': 50\n  };\n  \n  if (categoryImpact[category.name]) {\n    score = categoryImpact[category.name];\n  }\n  \n  return Math.max(0, Math.min(100, score));\n}\n\nfunction calculateEcoScore(transaction: TransactionData): number {\n  const { merchant, category, amount } = transaction;\n  \n  let score = 50;\n  \n  // Eco-friendly merchants\n  const ecoMerchants = ['tesla', 'whole foods', 'trader joe', 'patagonia', 'rei', 'electric', 'solar'];\n  if (ecoMerchants.some(eco => merchant.toLowerCase().includes(eco))) {\n    score += 30;\n  }\n  \n  // Category impact\n  const categoryImpact: Record<string, number> = {\n    'Transportation': 30, // Generally bad for environment\n    'Groceries': 60,\n    'Utilities': 40,\n    'Healthcare': 70,\n    'Entertainment': 50,\n    'Shopping': 35,\n    'Electronics': 40\n  };\n  \n  if (categoryImpact[category.name]) {\n    score = categoryImpact[category.name];\n  }\n  \n  // Special cases\n  if (merchant.toLowerCase().includes('gas') || merchant.toLowerCase().includes('fuel')) {\n    score = 20;\n  }\n  \n  if (merchant.toLowerCase().includes('electric') || merchant.toLowerCase().includes('renewable')) {\n    score = 85;\n  }\n  \n  return Math.max(0, Math.min(100, score));\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/shared/utils/webCrypto.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/shared/utils/webCrypto.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Web Crypto API utilities to replace crypto-js\n * Provides AES-256-GCM encryption, SHA-256 hashing, and secure random generation\n * Compatible with VueniSecureStorage and other crypto operations\n */\n\n// Convert string to ArrayBuffer\nconst stringToArrayBuffer = (str: string): ArrayBuffer => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str);\n};\n\n// Convert ArrayBuffer to string\nconst arrayBufferToString = (buffer: ArrayBuffer): string => {\n  const decoder = new TextDecoder();\n  return decoder.decode(buffer);\n};\n\n// Convert ArrayBuffer to hex string\nconst arrayBufferToHex = (buffer: ArrayBuffer): string => {\n  const bytes = new Uint8Array(buffer);\n  return Array.from(bytes, byte => byte.toString(16).padStart(2, '0')).join('');\n};\n\n// Convert hex string to ArrayBuffer\nconst hexToArrayBuffer = (hex: string): ArrayBuffer => {\n  const bytes = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    bytes[i / 2] = parseInt(hex.substr(i, 2), 16);\n  }\n  return bytes.buffer;\n};\n\n// Generate cryptographically secure random bytes\nexport const generateSecureRandom = (length: number): string => {\n  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n    const array = new Uint8Array(length);\n    crypto.getRandomValues(array);\n    return arrayBufferToHex(array.buffer);\n  }\n  \n  // Fallback for non-crypto environments\n  const chars = '0123456789abcdef';\n  let result = '';\n  for (let i = 0; i < length * 2; i++) {\n    result += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return result;\n};\n\n// Generate secure random token\nexport const generateSecureToken = (length: number = 32): string => {\n  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n    const array = new Uint8Array(Math.ceil(length / 2));\n    crypto.getRandomValues(array);\n    return arrayBufferToHex(array.buffer).slice(0, length);\n  }\n  \n  // Fallback using Math.random\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return result;\n};\n\n// Derive key from password using PBKDF2\nconst deriveKey = async (password: string, salt: ArrayBuffer): Promise<CryptoKey> => {\n  if (!crypto.subtle) {\n    throw new Error('Web Crypto API not available');\n  }\n\n  // Import the password as a key\n  const passwordKey = await crypto.subtle.importKey(\n    'raw',\n    stringToArrayBuffer(password),\n    'PBKDF2',\n    false,\n    ['deriveKey']\n  );\n\n  // Derive the AES key\n  return crypto.subtle.deriveKey(\n    {\n      name: 'PBKDF2',\n      salt: salt,\n      iterations: 100000,\n      hash: 'SHA-256'\n    },\n    passwordKey,\n    { name: 'AES-GCM', length: 256 },\n    false,\n    ['encrypt', 'decrypt']\n  );\n};\n\n// AES-GCM encryption (more secure than AES-CBC)\nexport const encryptAES = async (data: string, password: string): Promise<string> => {\n  if (!crypto.subtle) {\n    throw new Error('Web Crypto API not available');\n  }\n\n  try {\n    // Generate random salt and IV\n    const salt = crypto.getRandomValues(new Uint8Array(16));\n    const iv = crypto.getRandomValues(new Uint8Array(12)); // GCM uses 12-byte IV\n\n    // Derive key from password\n    const key = await deriveKey(password, salt.buffer);\n\n    // Encrypt the data\n    const dataBuffer = stringToArrayBuffer(data);\n    const encryptedBuffer = await crypto.subtle.encrypt(\n      { name: 'AES-GCM', iv: iv },\n      key,\n      dataBuffer\n    );\n\n    // Combine salt + iv + encrypted data\n    const combined = new Uint8Array(salt.length + iv.length + encryptedBuffer.byteLength);\n    combined.set(salt, 0);\n    combined.set(iv, salt.length);\n    combined.set(new Uint8Array(encryptedBuffer), salt.length + iv.length);\n\n    return arrayBufferToHex(combined.buffer);\n  } catch (error) {\n    console.error('Web Crypto encryption failed:', error);\n    throw new Error('Failed to encrypt data');\n  }\n};\n\n// AES-GCM decryption\nexport const decryptAES = async (encryptedHex: string, password: string): Promise<string> => {\n  if (!crypto.subtle) {\n    throw new Error('Web Crypto API not available');\n  }\n\n  try {\n    const encryptedBuffer = hexToArrayBuffer(encryptedHex);\n    const encryptedArray = new Uint8Array(encryptedBuffer);\n\n    // Extract salt, IV, and encrypted data\n    const salt = encryptedArray.slice(0, 16).buffer;\n    const iv = encryptedArray.slice(16, 28);\n    const encrypted = encryptedArray.slice(28).buffer;\n\n    // Derive key from password\n    const key = await deriveKey(password, salt);\n\n    // Decrypt the data\n    const decryptedBuffer = await crypto.subtle.decrypt(\n      { name: 'AES-GCM', iv: iv },\n      key,\n      encrypted\n    );\n\n    return arrayBufferToString(decryptedBuffer);\n  } catch (error) {\n    console.error('Web Crypto decryption failed:', error);\n    throw new Error('Failed to decrypt data');\n  }\n};\n\n// SHA-256 hashing\nexport const hashSHA256 = async (data: string): Promise<string> => {\n  if (!crypto.subtle) {\n    // Fallback hash for environments without Web Crypto API\n    let hash = 0;\n    for (let i = 0; i < data.length; i++) {\n      const char = data.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash).toString(16);\n  }\n\n  try {\n    const dataBuffer = stringToArrayBuffer(data);\n    const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\n    return arrayBufferToHex(hashBuffer);\n  } catch (error) {\n    console.error('SHA-256 hashing failed:', error);\n    throw new Error('Failed to hash data');\n  }\n};\n\n// Generate integrity hash with secret\nexport const generateIntegrityHash = async (data: string, secret: string): Promise<string> => {\n  return await hashSHA256(data + secret);\n};\n\n// CryptoJS compatibility layer\nexport class WebCryptoJS {\n  static AES = {\n    encrypt: async (data: string, key: string): Promise<{ toString: () => string }> => {\n      const encrypted = await encryptAES(data, key);\n      return { toString: () => encrypted };\n    },\n    \n    decrypt: async (encryptedData: string, key: string): Promise<{ toString: (encoding: any) => string }> => {\n      const decrypted = await decryptAES(encryptedData, key);\n      return { \n        toString: (encoding: any) => {\n          if (encoding === WebCryptoJS.enc.Utf8) {\n            return decrypted;\n          }\n          return decrypted;\n        }\n      };\n    }\n  };\n\n  static SHA256 = {\n    hash: async (data: string): Promise<{ toString: () => string }> => {\n      const hashed = await hashSHA256(data);\n      return { toString: () => hashed };\n    }\n  };\n\n  static enc = {\n    Utf8: Symbol('utf8')\n  };\n\n  static lib = {\n    WordArray: {\n      random: (bytes: number): { toString: () => string } => {\n        const hex = generateSecureRandom(bytes);\n        return { toString: () => hex };\n      }\n    }\n  };\n}\n\n// Simple synchronous wrapper (not recommended for production, but needed for compatibility)\nexport const encryptSync = (data: string, key: string): string => {\n  // This is a simplified base64 encoding for immediate compatibility\n  // In production, you should use the async version\n  console.warn('Using synchronous encryption fallback - consider migrating to async version');\n  const payload = { data, key: key.slice(0, 8), timestamp: Date.now() };\n  return btoa(JSON.stringify(payload));\n};\n\nexport const decryptSync = (encryptedData: string, key: string): string => {\n  // This is a simplified base64 decoding for immediate compatibility\n  console.warn('Using synchronous decryption fallback - consider migrating to async version');\n  try {\n    const payload = JSON.parse(atob(encryptedData));\n    if (payload.key !== key.slice(0, 8)) {\n      throw new Error('Invalid key');\n    }\n    return payload.data;\n  } catch (error) {\n    throw new Error('Failed to decrypt data');\n  }\n};\n\nexport const hashSync = (data: string): string => {\n  // Simple hash for immediate compatibility\n  let hash = 0;\n  for (let i = 0; i < data.length; i++) {\n    const char = data.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash;\n  }\n  return Math.abs(hash).toString(16);\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/telemetry/vitals.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/telemetry/vitals.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Web Vitals Telemetry System\n * Real-time performance monitoring for Vueni\n * Tracks LCP, CLS, FCP, and TTFB for optimization insights\n */\n\nimport { onCLS, onFCP, onLCP, onTTFB } from 'web-vitals';\n\n// Performance thresholds for alerts\nconst THRESHOLDS = {\n  LCP: { good: 2500, poor: 4000 },\n  CLS: { good: 0.1, poor: 0.25 },\n  FCP: { good: 1800, poor: 3000 },\n  TTFB: { good: 800, poor: 1800 }\n};\n\n// Simple vital data interface\ninterface VitalData {\n  name: string;\n  value: number;\n  rating: string;\n  url: string;\n  timestamp: number;\n  deviceType: string;\n  connectionType: string;\n  userAgent: string;\n  viewportSize: string;\n}\n\nclass VitalsCollector {\n  private metrics: VitalData[] = [];\n  private isDev = import.meta.env.DEV;\n  private endpoint = '/api/analytics/vitals';\n\n  constructor() {\n    this.setupVitalsCollection();\n    this.setupDevConsoleLogging();\n  }\n\n  private setupVitalsCollection(): void {\n    const collectMetric = (metric: any) => {\n      const vitalData: VitalData = {\n        name: metric.name,\n        value: metric.value,\n        rating: metric.rating || 'good',\n        url: window.location.href,\n        timestamp: Date.now(),\n        deviceType: this.getDeviceType(),\n        connectionType: this.getConnectionType(),\n        userAgent: navigator.userAgent,\n        viewportSize: `${window.innerWidth}x${window.innerHeight}`\n      };\n\n      this.metrics.push(vitalData);\n      this.logMetric(vitalData);\n      this.sendTelemetry(vitalData);\n    };\n\n    // Collect all Core Web Vitals\n    onLCP(collectMetric);\n    onCLS(collectMetric);\n    onFCP(collectMetric);\n    onTTFB(collectMetric);\n  }\n\n  private setupDevConsoleLogging(): void {\n    if (!this.isDev) return;\n\n    console.log(`\n    🚀 Vueni Performance Monitor Active\n    📊 Tracking: LCP, CLS, FCP, TTFB\n    🎯 Thresholds: LCP <2.5s, CLS <0.1, FCP <1.8s\n    🔧 Dev Mode: Metrics logged to console\n    `);\n  }\n\n  private getDeviceType(): string {\n    const width = window.innerWidth;\n    if (width < 768) return 'mobile';\n    if (width < 1024) return 'tablet';\n    return 'desktop';\n  }\n\n  private getConnectionType(): string {\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      return connection?.effectiveType || 'unknown';\n    }\n    return 'unknown';\n  }\n\n  private logMetric(vital: VitalData): void {\n    const { name, value } = vital;\n    const threshold = THRESHOLDS[name as keyof typeof THRESHOLDS];\n    \n    if (!threshold) return;\n\n    let status = '✅ Good';\n    let color = '#00ff00';\n    \n    if (value > threshold.poor) {\n      status = '❌ Poor';\n      color = '#ff0000';\n    } else if (value > threshold.good) {\n      status = '⚠️ Needs Improvement';\n      color = '#ffaa00';\n    }\n\n    const message = `%c[${name}] ${value.toFixed(2)}${name === 'CLS' ? '' : 'ms'} - ${status}`;\n    \n    if (this.isDev) {\n      console.log(message, `color: ${color}; font-weight: bold;`, {\n        metric: vital,\n        deviceType: vital.deviceType,\n        viewport: vital.viewportSize,\n        connection: vital.connectionType\n      });\n    }\n\n    // Alert for poor performance\n    if (value > threshold.poor && this.isDev) {\n      console.warn(`🚨 Performance Alert: ${name} is ${value.toFixed(2)}${name === 'CLS' ? '' : 'ms'}, exceeding the ${threshold.poor}${name === 'CLS' ? '' : 'ms'} threshold`);\n    }\n  }\n\n  private async sendTelemetry(vital: VitalData): Promise<void> {\n    // Don't send in development\n    if (this.isDev) return;\n\n    try {\n      // Use sendBeacon for reliability\n      if ('sendBeacon' in navigator) {\n        const success = navigator.sendBeacon(\n          this.endpoint,\n          JSON.stringify(vital)\n        );\n        \n        if (!success) {\n          // Fallback to fetch\n          await this.fallbackSend(vital);\n        }\n      } else {\n        await this.fallbackSend(vital);\n      }\n    } catch (error) {\n      console.error('Failed to send performance telemetry:', error);\n    }\n  }\n\n  private async fallbackSend(vital: VitalData): Promise<void> {\n    try {\n      await fetch(this.endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(vital),\n        keepalive: true\n      });\n    } catch (error) {\n      // Silent fail in production\n      if (this.isDev) {\n        console.error('Telemetry fallback failed:', error);\n      }\n    }\n  }\n\n  // Public API for manual metrics\n  public trackCustomMetric(name: string, value: number): void {\n    const customMetric: VitalData = {\n      name,\n      value,\n      rating: value > 1000 ? 'poor' : value > 500 ? 'needs-improvement' : 'good',\n      url: window.location.href,\n      timestamp: Date.now(),\n      deviceType: this.getDeviceType(),\n      connectionType: this.getConnectionType(),\n      userAgent: navigator.userAgent,\n      viewportSize: `${window.innerWidth}x${window.innerHeight}`\n    };\n\n    this.metrics.push(customMetric);\n    this.logMetric(customMetric);\n    this.sendTelemetry(customMetric);\n  }\n\n  // Get current performance summary\n  public getPerformanceSummary(): Record<string, any> {\n    const summary: Record<string, any> = {};\n    \n    Object.keys(THRESHOLDS).forEach(metricName => {\n      const metric = this.metrics.find(m => m.name === metricName);\n      if (metric) {\n        const threshold = THRESHOLDS[metricName as keyof typeof THRESHOLDS];\n        summary[metricName] = {\n          value: metric.value,\n          rating: metric.rating,\n          timestamp: metric.timestamp,\n          isGood: metric.value <= threshold.good,\n          isPoor: metric.value > threshold.poor\n        };\n      }\n    });\n\n    return summary;\n  }\n\n  // Export data for debugging\n  public exportMetrics(): VitalData[] {\n    return [...this.metrics];\n  }\n}\n\n// Global instance\nconst vitalsCollector = new VitalsCollector();\n\n// Export utilities\nexport const trackCustomMetric = (name: string, value: number) => {\n  vitalsCollector.trackCustomMetric(name, value);\n};\n\nexport const getPerformanceSummary = () => {\n  return vitalsCollector.getPerformanceSummary();\n};\n\nexport const exportVitalsData = () => {\n  return vitalsCollector.exportMetrics();\n};\n\n// Development helpers\nif (import.meta.env.DEV) {\n  // Make available in dev tools console\n  (window as any).__vitals = {\n    summary: getPerformanceSummary,\n    export: exportVitalsData,\n    track: trackCustomMetric,\n    thresholds: THRESHOLDS\n  };\n\n  console.log('💡 Performance debugging available: window.__vitals');\n}\n\n// Chart loading performance tracker\nexport const trackChartPerformance = (chartType: string) => {\n  const startTime = performance.now();\n  \n  return () => {\n    const loadTime = performance.now() - startTime;\n    trackCustomMetric(`chart-load-${chartType}`, loadTime);\n  };\n};\n\n// Route change performance tracker\nexport const trackRouteChange = (routeName: string) => {\n  const startTime = performance.now();\n  \n  return () => {\n    const navigationTime = performance.now() - startTime;\n    trackCustomMetric(`route-change-${routeName}`, navigationTime);\n  };\n};\n\nexport default vitalsCollector; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/TransactionList.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/TransactionList.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport { describe, it, expect } from 'vitest';\nimport TransactionList from '@/features/transactions/components/TransactionList';\nimport { Transaction } from '@/types/transactions';\n\n// Helper to generate mock transactions\nconst generateTx = (id: number): Transaction => ({\n  id: `t-${id}`,\n  accountId: 'acc',\n  familyId: 'fam',\n  amount: id % 2 === 0 ? -100 * id : 200 * id,\n  currency: 'USD',\n  date: new Date(2025, 0, (id % 28) + 1),\n  description: 'Test',\n  category: 'shopping',\n  paymentChannel: 'online',\n  transactionType: 'purchase',\n  status: 'posted',\n  isPending: false,\n  isRecurring: false,\n  metadata: {},\n  tags: [],\n  excludeFromBudget: false,\n  isTransfer: false,\n  createdAt: new Date(),\n  updatedAt: new Date(),\n});\n\ndescribe('TransactionList', () => {\n  it('renders empty state', () => {\n    render(<TransactionList transactions={[]} />);\n    expect(screen.getByTestId('transaction-list-empty')).toBeInTheDocument();\n  });\n\n  it('renders loading skeletons', () => {\n    render(<TransactionList transactions={[]} isLoading />);\n    expect(screen.getByTestId('transaction-list-loading')).toBeInTheDocument();\n  });\n\n  it('renders without virtualization for small lists', () => {\n    const txs = Array.from({ length: 10 }, (_, i) => generateTx(i));\n    render(<TransactionList transactions={txs} />);\n    expect(screen.getByTestId('transaction-list')).toBeInTheDocument();\n    expect(screen.getAllByTestId('transaction-row').length).toBeGreaterThan(0);\n  });\n\n  it('uses virtualization for large lists', () => {\n    const txs = Array.from({ length: 501 }, (_, i) => generateTx(i));\n    render(<TransactionList transactions={txs} />);\n    expect(screen.getByTestId('transaction-virtualized-list')).toBeInTheDocument();\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/TransactionRow.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/TransactionRow.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport { describe, it, expect } from 'vitest';\nimport TransactionRow from '@/features/transactions/components/TransactionRow';\nimport { Transaction } from '@/types/transactions';\n\nconst baseTx: Transaction = {\n  id: 'txn_1',\n  accountId: 'acc_1',\n  familyId: 'fam_1',\n  amount: -4500,\n  currency: 'USD',\n  date: new Date(),\n  description: 'Test desc',\n  category: 'shopping',\n  paymentChannel: 'online',\n  transactionType: 'purchase',\n  status: 'pending',\n  isPending: true,\n  isRecurring: false,\n  metadata: {},\n  tags: [],\n  excludeFromBudget: false,\n  isTransfer: false,\n  createdAt: new Date(),\n  updatedAt: new Date(),\n};\n\ndescribe('TransactionRow', () => {\n  it('renders merchant, category, amount, date', () => {\n    render(<TransactionRow tx={{ ...baseTx, merchantName: 'Amazon' }} />);\n\n    expect(screen.getByText('Amazon')).toBeInTheDocument();\n    expect(screen.getByText('shopping', { exact: false })).toBeInTheDocument();\n    expect(screen.getByTestId('status-chip')).toBeInTheDocument();\n    // Amount formatted (negative)\n    expect(screen.getByText(/\\$/)).toBeInTheDocument();\n  });\n\n  it('shows placeholders when fields are missing', () => {\n    render(<TransactionRow tx={{ ...baseTx, merchantName: undefined as any, category: undefined as any }} />);\n\n    // en dash placeholder\n    expect(screen.getAllByText('—').length).toBeGreaterThan(0);\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/calculators.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/calculators.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport {\n  calculateFinancialFreedomYears,\n  calculateROI,\n  calculateLoanPayment,\n  calculateInflationAdjustedValue,\n  calculateCompoundInterest,\n  calculate401kBalance,\n  calculateThreeFundPortfolioReturn,\n  calculateMaximumHomePrice,\n  calculateMortgagePayoffSavings,\n  calculatePortfolioBacktest,\n  convertCurrency,\n} from '../utils/calculators';\n\ndescribe('Financial Calculators - Accuracy Tests', () => {\n  \n  describe('calculateFinancialFreedomYears', () => {\n    it('should calculate correct financial freedom years for typical scenarios', () => {\n      // Test case from documentation\n      const result = calculateFinancialFreedomYears(500000, 4000, 0.04);\n      expect(result).toBeCloseTo(25.67, 1);\n    });\n\n    it('should handle edge cases correctly', () => {\n      // Zero savings\n      expect(calculateFinancialFreedomYears(0, 1000)).toBe(0);\n      \n      // Very low expenses\n      expect(calculateFinancialFreedomYears(100000, 100, 0.04)).toBeGreaterThan(40);\n      \n      // High growth rate\n      const highGrowth = calculateFinancialFreedomYears(100000, 500, 0.15);\n      expect(highGrowth).toBeGreaterThan(10);\n    });\n\n    it('should throw error for invalid monthly expenses', () => {\n      expect(() => calculateFinancialFreedomYears(100000, 0)).toThrow('Monthly expenses must be greater than 0');\n      expect(() => calculateFinancialFreedomYears(100000, -100)).toThrow('Monthly expenses must be greater than 0');\n    });\n\n    it('should have maximum boundary of 50 years', () => {\n      // Test with very high savings and low expenses\n      const result = calculateFinancialFreedomYears(10000000, 1000, 0.08);\n      expect(result).toBeLessThanOrEqual(50);\n    });\n  });\n\n  describe('calculateROI', () => {\n    it('should calculate positive ROI correctly', () => {\n      // Test case from documentation: $1000 -> $1200 = 20%\n      expect(calculateROI(1000, 1200)).toBe(20.00);\n      \n      // Double investment\n      expect(calculateROI(1000, 2000)).toBe(100.00);\n      \n      // 50% gain\n      expect(calculateROI(500, 750)).toBe(50.00);\n    });\n\n    it('should calculate negative ROI correctly', () => {\n      // 50% loss\n      expect(calculateROI(1000, 500)).toBe(-50.00);\n      \n      // Total loss\n      expect(calculateROI(1000, 0)).toBe(-100.00);\n    });\n\n    it('should handle edge cases', () => {\n      // No change\n      expect(calculateROI(1000, 1000)).toBe(0.00);\n      \n      // Small amounts\n      expect(calculateROI(0.01, 0.02)).toBe(100.00);\n    });\n\n    it('should throw error for zero initial investment', () => {\n      expect(() => calculateROI(0, 1000)).toThrow('Initial investment cannot be 0');\n    });\n\n    it('should handle very large numbers', () => {\n      const result = calculateROI(1000000, 1500000);\n      expect(result).toBe(50.00);\n    });\n  });\n\n  describe('calculateLoanPayment', () => {\n    it('should calculate correct monthly payments for standard mortgages', () => {\n      // Test case from documentation: $300,000 at 4.5% for 30 years\n      const result = calculateLoanPayment(300000, 4.5, 30);\n      expect(result).toBeCloseTo(1520.06, 2);\n    });\n\n    it('should handle zero interest rate', () => {\n      // 0% interest should be principal/months\n      expect(calculateLoanPayment(12000, 0, 1)).toBe(1000.00);\n    });\n\n    it('should calculate payments for different loan terms', () => {\n      // 15-year mortgage should have higher payments\n      const payment30yr = calculateLoanPayment(200000, 4.0, 30);\n      const payment15yr = calculateLoanPayment(200000, 4.0, 15);\n      expect(payment15yr).toBeGreaterThan(payment30yr);\n    });\n\n    it('should handle small loans', () => {\n      const result = calculateLoanPayment(1000, 5.0, 1);\n      expect(result).toBeCloseTo(85.61, 2);\n    });\n\n    it('should handle high interest rates', () => {\n      const result = calculateLoanPayment(100000, 20.0, 10);\n      expect(result).toBeGreaterThan(1000);\n    });\n  });\n\n  describe('calculateInflationAdjustedValue', () => {\n    it('should calculate inflation-adjusted values correctly', () => {\n      // Test case from documentation: $100 with 3% inflation over 10 years\n      const result = calculateInflationAdjustedValue(100, 3, 10);\n      expect(result).toBeCloseTo(134.39, 2);\n    });\n\n    it('should handle zero inflation', () => {\n      expect(calculateInflationAdjustedValue(100, 0, 10)).toBe(100.00);\n    });\n\n    it('should handle high inflation', () => {\n      const result = calculateInflationAdjustedValue(100, 10, 5);\n      expect(result).toBeCloseTo(161.05, 2);\n    });\n\n    it('should handle zero years', () => {\n      expect(calculateInflationAdjustedValue(100, 5, 0)).toBe(100.00);\n    });\n\n    it('should handle deflation (negative inflation)', () => {\n      const result = calculateInflationAdjustedValue(100, -2, 5);\n      expect(result).toBeLessThan(100);\n    });\n  });\n\n  describe('calculateCompoundInterest', () => {\n    it('should calculate compound interest correctly', () => {\n      // Test case from documentation: $10,000 at 6% for 5 years, monthly compounding\n      const result = calculateCompoundInterest(10000, 6, 5, 12);\n      expect(result).toBeCloseTo(13488.50, 2);\n    });\n\n    it('should handle annual compounding', () => {\n      const result = calculateCompoundInterest(1000, 10, 2, 1);\n      expect(result).toBe(1210.00);\n    });\n\n    it('should handle daily compounding', () => {\n      const monthly = calculateCompoundInterest(1000, 5, 1, 12);\n      const daily = calculateCompoundInterest(1000, 5, 1, 365);\n      expect(daily).toBeGreaterThan(monthly);\n    });\n\n    it('should handle zero interest', () => {\n      expect(calculateCompoundInterest(1000, 0, 5, 12)).toBe(1000.00);\n    });\n\n    it('should handle large principals', () => {\n      const result = calculateCompoundInterest(1000000, 7, 10, 12);\n      expect(result).toBeGreaterThan(1000000);\n    });\n  });\n\n  describe('calculate401kBalance', () => {\n    it('should calculate 401k balance with employer match', () => {\n      // Test case from documentation: $50,000 current, $6,000 annual, 50% match, 7% return, 25 years\n      const result = calculate401kBalance(50000, 6000, 0.5, 7, 25);\n      expect(result).toBeCloseTo(1091234.56, 0); // Allow some variance due to rounding\n    });\n\n    it('should handle no employer match', () => {\n      const withMatch = calculate401kBalance(10000, 5000, 0.5, 7, 10);\n      const withoutMatch = calculate401kBalance(10000, 5000, 0, 7, 10);\n      expect(withMatch).toBeGreaterThan(withoutMatch);\n    });\n\n    it('should handle zero starting balance', () => {\n      const result = calculate401kBalance(0, 6000, 0.5, 7, 10);\n      expect(result).toBeGreaterThan(0);\n    });\n\n    it('should handle zero contributions', () => {\n      const result = calculate401kBalance(10000, 0, 0.5, 7, 10);\n      expect(result).toBeCloseTo(19671.51, 2);\n    });\n\n    it('should handle 100% employer match', () => {\n      const result = calculate401kBalance(0, 5000, 1.0, 8, 5);\n      expect(result).toBeGreaterThan(0);\n    });\n  });\n\n  describe('calculateThreeFundPortfolioReturn', () => {\n    it('should calculate three-fund portfolio returns correctly', () => {\n      // Test case from documentation: 7% US, 6% intl, 3% bonds over 10 years\n      const result = calculateThreeFundPortfolioReturn(7, 6, 3, 10);\n      expect(result).toBeCloseTo(69.74, 1);\n    });\n\n    it('should handle custom allocations', () => {\n      const conservative = calculateThreeFundPortfolioReturn(7, 6, 3, 10, { us: 0.2, intl: 0.1, bonds: 0.7 });\n      const aggressive = calculateThreeFundPortfolioReturn(7, 6, 3, 10, { us: 0.7, intl: 0.3, bonds: 0.0 });\n      expect(aggressive).toBeGreaterThan(conservative);\n    });\n\n    it('should handle zero returns', () => {\n      const result = calculateThreeFundPortfolioReturn(0, 0, 0, 10);\n      expect(result).toBe(0.00);\n    });\n\n    it('should handle negative returns', () => {\n      const result = calculateThreeFundPortfolioReturn(-5, -3, 2, 5);\n      expect(result).toBeLessThan(0);\n    });\n\n    it('should validate allocation percentages work correctly', () => {\n      // 100% US stocks\n      const result = calculateThreeFundPortfolioReturn(10, 5, 2, 5, { us: 1.0, intl: 0.0, bonds: 0.0 });\n      const expected = Math.pow(1.10, 5) - 1;\n      expect(result).toBeCloseTo(expected * 100, 2);\n    });\n  });\n\n  describe('calculateMaximumHomePrice', () => {\n    it('should calculate maximum home price using the 28% rule', () => {\n      // Test case from documentation: $80,000 income, $500 debts, 4.5% rate, 30 years, $20,000 down\n      const result = calculateMaximumHomePrice(80000, 500, 4.5, 30, 20000);\n      expect(result).toBeCloseTo(245000, -3); // Within $1000\n    });\n\n    it('should handle higher incomes', () => {\n      const result = calculateMaximumHomePrice(150000, 1000, 4.0, 30, 50000);\n      expect(result).toBeGreaterThan(300000);\n    });\n\n    it('should handle zero down payment', () => {\n      const result = calculateMaximumHomePrice(100000, 500, 5.0, 30, 0);\n      expect(result).toBeGreaterThan(0);\n    });\n\n    it('should handle different property tax rates', () => {\n      const lowTax = calculateMaximumHomePrice(100000, 500, 4.5, 30, 20000, 0.5);\n      const highTax = calculateMaximumHomePrice(100000, 500, 4.5, 30, 20000, 2.0);\n      expect(lowTax).toBeGreaterThan(highTax);\n    });\n\n    it('should handle different loan terms', () => {\n      const result15yr = calculateMaximumHomePrice(100000, 500, 4.5, 15, 20000);\n      const result30yr = calculateMaximumHomePrice(100000, 500, 4.5, 30, 20000);\n      expect(result30yr).toBeGreaterThan(result15yr);\n    });\n  });\n\n  describe('calculateMortgagePayoffSavings', () => {\n    it('should calculate mortgage payoff savings correctly', () => {\n      // Test case from documentation: $300,000 at 4.5% for 30 years with $200 extra\n      const result = calculateMortgagePayoffSavings(300000, 4.5, 30, 200);\n      expect(result.originalYears).toBe(30);\n      expect(result.newYears).toBeCloseTo(24.1, 1);\n      expect(result.interestSaved).toBeCloseTo(48532.21, 0);\n    });\n\n    it('should handle zero extra payment', () => {\n      const result = calculateMortgagePayoffSavings(200000, 5.0, 30, 0);\n      expect(result.originalYears).toBe(result.newYears);\n      expect(result.interestSaved).toBe(0);\n    });\n\n    it('should handle large extra payments', () => {\n      const result = calculateMortgagePayoffSavings(200000, 5.0, 30, 1000);\n      expect(result.newYears).toBeLessThan(15);\n      expect(result.interestSaved).toBeGreaterThan(50000);\n    });\n\n    it('should handle small loans', () => {\n      const result = calculateMortgagePayoffSavings(50000, 4.0, 10, 100);\n      expect(result.originalYears).toBe(10);\n      expect(result.newYears).toBeLessThan(10);\n      expect(result.interestSaved).toBeGreaterThan(0);\n    });\n\n    it('should handle high interest rates', () => {\n      const result = calculateMortgagePayoffSavings(100000, 10.0, 30, 200);\n      expect(result.interestSaved).toBeGreaterThan(10000);\n    });\n  });\n\n  describe('calculatePortfolioBacktest', () => {\n    it('should calculate portfolio backtest correctly', () => {\n      // Test case from documentation: $10,000 with returns of 10%, -5%, 15%, 8%\n      const result = calculatePortfolioBacktest(10000, [10, -5, 15, 8]);\n      expect(result).toBeCloseTo(13234.60, 2);\n    });\n\n    it('should handle all positive returns', () => {\n      const result = calculatePortfolioBacktest(1000, [10, 10, 10]);\n      expect(result).toBe(1331.00);\n    });\n\n    it('should handle all negative returns', () => {\n      const result = calculatePortfolioBacktest(1000, [-10, -10, -10]);\n      expect(result).toBe(729.00);\n    });\n\n    it('should handle empty returns array', () => {\n      const result = calculatePortfolioBacktest(1000, []);\n      expect(result).toBe(1000.00);\n    });\n\n    it('should handle zero returns', () => {\n      const result = calculatePortfolioBacktest(1000, [0, 0, 0]);\n      expect(result).toBe(1000.00);\n    });\n\n    it('should handle extreme returns', () => {\n      const result = calculatePortfolioBacktest(1000, [100, -50]);\n      expect(result).toBe(1000.00); // 100% gain then 50% loss = break even\n    });\n  });\n\n  describe('convertCurrency', () => {\n    it('should convert currency correctly', () => {\n      // Test case from documentation: $100 USD to EUR at 0.85 rate\n      const result = convertCurrency(100, 0.85);\n      expect(result).toBe(85.00);\n    });\n\n    it('should handle rate of 1.0', () => {\n      expect(convertCurrency(100, 1.0)).toBe(100.00);\n    });\n\n    it('should handle rates greater than 1', () => {\n      const result = convertCurrency(100, 1.5);\n      expect(result).toBe(150.00);\n    });\n\n    it('should handle zero amount', () => {\n      expect(convertCurrency(0, 0.85)).toBe(0.00);\n    });\n\n    it('should handle very small amounts', () => {\n      const result = convertCurrency(0.01, 0.85);\n      expect(result).toBe(0.01);\n    });\n\n    it('should handle large amounts', () => {\n      const result = convertCurrency(1000000, 0.85);\n      expect(result).toBe(850000.00);\n    });\n\n    it('should handle very low exchange rates', () => {\n      const result = convertCurrency(100, 0.001);\n      expect(result).toBe(0.10);\n    });\n  });\n\n  // Integration tests - testing multiple calculators together\n  describe('Calculator Integration Tests', () => {\n    it('should handle complex financial planning scenario', () => {\n      // Real-world scenario: retirement planning\n      const salary = 80000;\n      const current401k = 50000;\n      const annual401kContrib = 6000;\n      const employerMatch = 0.5;\n      const expectedReturn = 7;\n      const yearsToRetirement = 25;\n      \n      const future401k = calculate401kBalance(current401k, annual401kContrib, employerMatch, expectedReturn, yearsToRetirement);\n      const monthlyExpenses = 4000;\n      const yearsOfFreedom = calculateFinancialFreedomYears(future401k, monthlyExpenses, 0.04);\n      \n      expect(future401k).toBeGreaterThan(current401k);\n      expect(yearsOfFreedom).toBeGreaterThan(0);\n    });\n\n    it('should handle home buying scenario', () => {\n      const income = 100000;\n      const debts = 800;\n      const downPayment = 50000;\n      const maxPrice = calculateMaximumHomePrice(income, debts, 4.5, 30, downPayment);\n      \n      const loanAmount = maxPrice - downPayment;\n      const monthlyPayment = calculateLoanPayment(loanAmount, 4.5, 30);\n      \n      // Monthly payment + taxes should be ~28% of gross monthly income\n      const maxHousingPayment = (income / 12) * 0.28;\n      expect(monthlyPayment).toBeLessThan(maxHousingPayment);\n    });\n\n    it('should validate mortgage payoff strategy', () => {\n      const principal = 300000;\n      const rate = 4.5;\n      const years = 30;\n      const extraPayment = 300;\n      \n      const savings = calculateMortgagePayoffSavings(principal, rate, years, extraPayment);\n      const originalPayment = calculateLoanPayment(principal, rate, years);\n      \n      expect(savings.newYears).toBeLessThan(savings.originalYears);\n      expect(savings.interestSaved).toBeGreaterThan(0);\n      expect(originalPayment).toBeGreaterThan(0);\n    });\n  });\n\n  // Edge cases and error handling\n  describe('Edge Cases and Error Handling', () => {\n    it('should handle extreme input values', () => {\n      // Very large numbers\n      expect(() => calculateCompoundInterest(1e10, 5, 10)).not.toThrow();\n      \n      // Very small numbers\n      expect(() => calculateLoanPayment(0.01, 1, 1)).not.toThrow();\n      \n      // Zero values where appropriate\n      expect(calculateROI(1000, 0)).toBe(-100.00);\n    });\n\n    it('should maintain precision with financial calculations', () => {\n      // Ensure calculations maintain appropriate precision for financial data\n      const result = calculateCompoundInterest(1000.33, 5.555, 10, 12);\n      expect(result.toString()).toMatch(/^\\d+\\.\\d{2}$/); // Should have exactly 2 decimal places\n    });\n\n    it('should handle boundary conditions', () => {\n      // Test boundary conditions for each calculator\n      expect(calculateInflationAdjustedValue(100, 0, 0)).toBe(100.00);\n      expect(calculatePortfolioBacktest(1000, [])).toBe(1000.00);\n      expect(convertCurrency(0, 1.5)).toBe(0.00);\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/components.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/components.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react';\nimport { SharedScoreCircle, ScoreGroup, type SharedScoreCircleProps } from '../components/shared/SharedScoreCircle';\nimport { ConfigurableInsightsPage } from '../components/shared/ConfigurableInsightsPage';\nimport { TransactionWithScores } from '../components/TransactionWithScores';\nimport { GlassCard } from '../components/GlassCard';\nimport { LiquidGlassTopMenuBar } from '../components/LiquidGlassTopMenuBar';\n\n// Mock data for testing\nconst mockTransactions = [\n  {\n    id: '1',\n    merchant: 'Test Merchant',\n    category: { name: 'Food & Dining', color: '#10B981' },\n    amount: 25.50,\n    date: '2024-01-01',\n    status: 'completed' as const,\n  },\n  {\n    id: '2',\n    merchant: 'Gas Station',\n    category: { name: 'Transportation', color: '#F59E0B' },\n    amount: 45.00,\n    date: '2024-01-02',\n    status: 'pending' as const,\n  }\n];\n\nconst mockAccounts = [\n  {\n    id: '1',\n    type: 'checking',\n    nickname: 'Main Checking',\n    balance: 5000,\n    availableBalance: 4800,\n    currency: 'USD',\n  },\n  {\n    id: '2',\n    type: 'savings',\n    nickname: 'Emergency Fund',\n    balance: 15000,\n    availableBalance: 15000,\n    currency: 'USD',\n  }\n];\n\ndescribe('Component Integration Tests - Consolidated Components', () => {\n  \n  describe('SharedScoreCircle Component', () => {\n    const defaultProps: SharedScoreCircleProps = {\n      score: 85,\n      type: 'health',\n      label: 'Health Score',\n      size: 'md',\n      showLabel: true,\n      animated: false,\n    };\n\n    it('should render with correct score and type', () => {\n      render(<SharedScoreCircle {...defaultProps} />);\n      \n      expect(screen.getByText('85')).toBeInTheDocument();\n      expect(screen.getByText('Health Score')).toBeInTheDocument();\n    });\n\n    it('should apply correct color scheme for different types', () => {\n      const { rerender } = render(<SharedScoreCircle score={85} type=\"health\" />);\n      let scoreElement = screen.getByText('85');\n      expect(scoreElement).toHaveClass('text-green-500');\n\n      rerender(<SharedScoreCircle score={85} type=\"eco\" />);\n      scoreElement = screen.getByText('85');\n      expect(scoreElement).toHaveClass('text-emerald-500');\n\n      rerender(<SharedScoreCircle score={85} type=\"financial\" />);\n      scoreElement = screen.getByText('85');\n      expect(scoreElement).toHaveClass('text-blue-500');\n    });\n\n    it('should change colors based on score thresholds', () => {\n      const { rerender } = render(<SharedScoreCircle score={90} type=\"health\" />);\n      let scoreElement = screen.getByText('90');\n      expect(scoreElement).toHaveClass('text-green-500');\n\n      rerender(<SharedScoreCircle score={70} type=\"health\" />);\n      scoreElement = screen.getByText('70');\n      expect(scoreElement).toHaveClass('text-yellow-500');\n\n      rerender(<SharedScoreCircle score={40} type=\"health\" />);\n      scoreElement = screen.getByText('40');\n      expect(scoreElement).toHaveClass('text-red-500');\n    });\n\n    it('should handle different sizes correctly', () => {\n      const { rerender } = render(<SharedScoreCircle score={85} size=\"sm\" />);\n      let container = screen.getByText('85').closest('div');\n      expect(container).toHaveClass('w-8', 'h-8');\n\n      rerender(<SharedScoreCircle score={85} size=\"lg\" />);\n      container = screen.getByText('85').closest('div');\n      expect(container).toHaveClass('w-12', 'h-12');\n    });\n\n    it('should conditionally show/hide label', () => {\n      const { rerender } = render(\n        <SharedScoreCircle score={85} label=\"Test Label\" showLabel={true} />\n      );\n      expect(screen.getByText('Test Label')).toBeInTheDocument();\n\n      rerender(<SharedScoreCircle score={85} label=\"Test Label\" showLabel={false} />);\n      expect(screen.queryByText('Test Label')).not.toBeInTheDocument();\n    });\n\n    it('should handle invalid scores gracefully', () => {\n      render(<SharedScoreCircle score={-10} />);\n      expect(screen.getByText('-10')).toBeInTheDocument();\n\n      render(<SharedScoreCircle score={150} />);\n      expect(screen.getByText('150')).toBeInTheDocument();\n    });\n\n    it('should apply custom className', () => {\n      render(<SharedScoreCircle score={85} className=\"custom-class\" />);\n      const container = screen.getByText('85').closest('div');\n      expect(container).toHaveClass('custom-class');\n    });\n  });\n\n  describe('ScoreGroup Component', () => {\n    const mockScores = {\n      health: 85,\n      eco: 72,\n      financial: 90,\n    };\n\n    it('should render multiple scores in a group', () => {\n      render(<ScoreGroup scores={mockScores} />);\n      \n      expect(screen.getByText('85')).toBeInTheDocument();\n      expect(screen.getByText('72')).toBeInTheDocument();\n      expect(screen.getByText('90')).toBeInTheDocument();\n    });\n\n    it('should handle missing scores', () => {\n      const partialScores = { health: 85 };\n      render(<ScoreGroup scores={partialScores} />);\n      \n      expect(screen.getByText('85')).toBeInTheDocument();\n      // Should not render eco or financial scores if not provided\n    });\n\n    it('should apply compact mode styling', () => {\n      render(<ScoreGroup scores={mockScores} compact={true} />);\n      const container = screen.getByText('85').closest('div')?.parentElement;\n      expect(container).toHaveClass('gap-2'); // Smaller gap in compact mode\n    });\n  });\n\n  describe('ConfigurableInsightsPage Component', () => {\n    const defaultProps = {\n      transactions: mockTransactions,\n      accounts: mockAccounts,\n      variant: 'standard' as const,\n    };\n\n    beforeEach(() => {\n      // Mock ResizeObserver for charts\n      global.ResizeObserver = vi.fn().mockImplementation(() => ({\n        observe: vi.fn(),\n        unobserve: vi.fn(),\n        disconnect: vi.fn(),\n      }));\n    });\n\n    it('should render insights page with default configuration', async () => {\n      render(<ConfigurableInsightsPage {...defaultProps} />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle different layout variants', async () => {\n      const { rerender } = render(\n        <ConfigurableInsightsPage {...defaultProps} variant=\"enhanced\" />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      });\n\n      rerender(<ConfigurableInsightsPage {...defaultProps} variant=\"refined\" />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      });\n    });\n\n    it('should toggle between view modes', async () => {\n      render(<ConfigurableInsightsPage {...defaultProps} />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      });\n\n      // Look for view mode toggles\n      const buttons = screen.getAllByRole('button');\n      const viewToggle = buttons.find(btn => btn.getAttribute('aria-label')?.includes('view'));\n      \n      if (viewToggle) {\n        fireEvent.click(viewToggle);\n        // Test should verify the view changed\n      }\n    });\n\n    it('should handle feature flags correctly', async () => {\n      const featureFlags = {\n        showAdvancedMetrics: false,\n        enableComparison: false,\n        showProjections: true,\n      };\n\n      render(\n        <ConfigurableInsightsPage \n          {...defaultProps} \n          featureFlags={featureFlags}\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle empty data gracefully', async () => {\n      render(\n        <ConfigurableInsightsPage \n          transactions={[]} \n          accounts={[]} \n          variant=\"standard\"\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      });\n    });\n\n    it('should calculate and display aggregated scores', async () => {\n      render(<ConfigurableInsightsPage {...defaultProps} />);\n      \n      await waitFor(() => {\n        // Should display calculated scores somewhere in the component\n        const scores = screen.getAllByText(/\\d{1,2}/);\n        expect(scores.length).toBeGreaterThan(0);\n      });\n    });\n  });\n\n  describe('TransactionWithScores Component', () => {\n    const mockTransaction = {\n      id: '1',\n      merchant: 'Test Merchant',\n      amount: 25.50,\n      date: '2024-01-01',\n      category: 'Food & Dining',\n      healthScore: 85,\n      ecoScore: 72,\n      financialScore: 90,\n    };\n\n    it('should render transaction details with scores', () => {\n      render(<TransactionWithScores transaction={mockTransaction} />);\n      \n      expect(screen.getByText('Test Merchant')).toBeInTheDocument();\n      expect(screen.getByText('$25.50')).toBeInTheDocument();\n      expect(screen.getByText('85')).toBeInTheDocument(); // Health score\n      expect(screen.getByText('72')).toBeInTheDocument(); // Eco score\n      expect(screen.getByText('90')).toBeInTheDocument(); // Financial score\n    });\n\n    it('should handle missing scores gracefully', () => {\n      const incompleteTransaction = {\n        ...mockTransaction,\n        healthScore: undefined,\n        ecoScore: undefined,\n        financialScore: undefined,\n      };\n\n      render(<TransactionWithScores transaction={incompleteTransaction} />);\n      \n      expect(screen.getByText('Test Merchant')).toBeInTheDocument();\n      expect(screen.getByText('$25.50')).toBeInTheDocument();\n      // Should not crash when scores are missing\n    });\n\n    it('should format amounts correctly', () => {\n      const expensiveTransaction = {\n        ...mockTransaction,\n        amount: 1234.56,\n      };\n\n      render(<TransactionWithScores transaction={expensiveTransaction} />);\n      expect(screen.getByText('$1,234.56')).toBeInTheDocument();\n    });\n\n    it('should handle different transaction statuses', () => {\n      const pendingTransaction = {\n        ...mockTransaction,\n        status: 'pending' as const,\n      };\n\n      render(<TransactionWithScores transaction={pendingTransaction} />);\n      expect(screen.getByText('Test Merchant')).toBeInTheDocument();\n      // Should display pending status indicator\n    });\n  });\n\n  describe('GlassCard Component', () => {\n    it('should render with default glass styling', () => {\n      render(\n        <GlassCard>\n          <div>Test Content</div>\n        </GlassCard>\n      );\n      \n      expect(screen.getByText('Test Content')).toBeInTheDocument();\n      const card = screen.getByText('Test Content').closest('div');\n      expect(card).toHaveClass('backdrop-blur-md');\n    });\n\n    it('should apply custom className while preserving glass effect', () => {\n      render(\n        <GlassCard className=\"custom-glass-card\">\n          <div>Test Content</div>\n        </GlassCard>\n      );\n      \n      const card = screen.getByText('Test Content').closest('div');\n      expect(card).toHaveClass('custom-glass-card');\n      expect(card).toHaveClass('backdrop-blur-md'); // Should preserve glass effect\n    });\n\n    it('should handle click events', () => {\n      const mockClick = vi.fn();\n      render(\n        <GlassCard onClick={mockClick}>\n          <div>Clickable Content</div>\n        </GlassCard>\n      );\n      \n      const card = screen.getByText('Clickable Content').closest('div');\n      if (card) {\n        fireEvent.click(card);\n        expect(mockClick).toHaveBeenCalledTimes(1);\n      }\n    });\n  });\n\n  describe('LiquidGlassTopMenuBar Component', () => {\n    it('should render navigation items', () => {\n      render(<LiquidGlassTopMenuBar />);\n      \n      // Check for common navigation items\n      expect(screen.getByText('Dashboard')).toBeInTheDocument();\n      expect(screen.getByText('Transactions')).toBeInTheDocument();\n      expect(screen.getByText('Budget')).toBeInTheDocument();\n      expect(screen.getByText('Insights')).toBeInTheDocument();\n    });\n\n    it('should handle navigation clicks', () => {\n      render(<LiquidGlassTopMenuBar />);\n      \n      const dashboardLink = screen.getByText('Dashboard');\n      fireEvent.click(dashboardLink);\n      \n      // Should handle navigation (depends on router implementation)\n    });\n\n    it('should display user menu when available', () => {\n      render(<LiquidGlassTopMenuBar />);\n      \n      // Look for user menu trigger (could be avatar, name, or menu icon)\n      const userElements = screen.getAllByRole('button');\n      expect(userElements.length).toBeGreaterThan(0);\n    });\n\n    it('should apply liquid glass visual effects', () => {\n      render(<LiquidGlassTopMenuBar />);\n      \n      const menuBar = screen.getByRole('banner') || screen.getByRole('navigation');\n      expect(menuBar).toHaveClass(/backdrop|glass|blur/);\n    });\n\n    it('should be responsive to screen size changes', () => {\n      render(<LiquidGlassTopMenuBar />);\n      \n      // Test mobile menu toggle\n      const mobileToggle = screen.queryByLabelText(/menu|toggle/i);\n      if (mobileToggle) {\n        fireEvent.click(mobileToggle);\n        // Should show/hide mobile menu\n      }\n    });\n  });\n});\n\ndescribe('Component Regression Tests - Consolidated Components', () => {\n  \n  it('should maintain SharedScoreCircle API compatibility', () => {\n    // Test that all previous prop combinations still work\n    const legacyProps = [\n      { score: 85 },\n      { score: 85, type: 'health' as const },\n      { score: 85, type: 'eco' as const, size: 'lg' as const },\n      { score: 85, type: 'financial' as const, showLabel: false },\n    ];\n\n    legacyProps.forEach((props, index) => {\n      const { unmount } = render(<SharedScoreCircle key={index} {...props} />);\n      expect(screen.getByText('85')).toBeInTheDocument();\n      unmount();\n    });\n  });\n\n  it('should handle performance under stress conditions', async () => {\n    // Test with large datasets\n    const largeTransactionSet = Array.from({ length: 1000 }, (_, i) => ({\n      id: `txn-${i}`,\n      merchant: `Merchant ${i}`,\n      category: { name: 'Test Category', color: '#10B981' },\n      amount: Math.random() * 1000,\n      date: '2024-01-01',\n      status: 'completed' as const,\n    }));\n\n    const startTime = performance.now();\n    \n    render(\n      <ConfigurableInsightsPage \n        transactions={largeTransactionSet}\n        accounts={mockAccounts}\n        variant=\"standard\"\n      />\n    );\n    \n    const endTime = performance.now();\n    const renderTime = endTime - startTime;\n    \n    // Should render within reasonable time (< 1000ms)\n    expect(renderTime).toBeLessThan(1000);\n    \n    await waitFor(() => {\n      expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n    });\n  });\n\n  it('should maintain accessibility standards', () => {\n    render(\n      <div>\n        <SharedScoreCircle score={85} type=\"health\" label=\"Health Score\" />\n        <ConfigurableInsightsPage \n          transactions={mockTransactions}\n          accounts={mockAccounts}\n          variant=\"standard\"\n        />\n      </div>\n    );\n\n    // Check for proper ARIA labels\n    const scoreElements = screen.getAllByRole('img') || screen.getAllByRole('presentation');\n    scoreElements.forEach(element => {\n      expect(element).toHaveAttribute('aria-label');\n    });\n\n    // Check for keyboard navigation support\n    const interactiveElements = screen.getAllByRole('button');\n    interactiveElements.forEach(element => {\n      expect(element).toHaveAttribute('tabIndex');\n    });\n  });\n\n  it('should handle theme changes consistently', () => {\n    const { rerender } = render(\n      <div className=\"dark\">\n        <SharedScoreCircle score={85} type=\"health\" />\n        <GlassCard>Dark Theme Content</GlassCard>\n      </div>\n    );\n\n    expect(screen.getByText('85')).toBeInTheDocument();\n    expect(screen.getByText('Dark Theme Content')).toBeInTheDocument();\n\n    rerender(\n      <div className=\"light\">\n        <SharedScoreCircle score={85} type=\"health\" />\n        <GlassCard>Light Theme Content</GlassCard>\n      </div>\n    );\n\n    expect(screen.getByText('85')).toBeInTheDocument();\n    expect(screen.getByText('Light Theme Content')).toBeInTheDocument();\n  });\n\n  it('should maintain data consistency across re-renders', () => {\n    let renderCount = 0;\n    const TestComponent = () => {\n      renderCount++;\n      return (\n        <SharedScoreCircle \n          score={85} \n          type=\"health\" \n          label={`Render ${renderCount}`}\n        />\n      );\n    };\n\n    const { rerender } = render(<TestComponent />);\n    expect(screen.getByText('Render 1')).toBeInTheDocument();\n\n    rerender(<TestComponent />);\n    expect(screen.getByText('Render 2')).toBeInTheDocument();\n    expect(screen.getByText('85')).toBeInTheDocument();\n  });\n\n  it('should handle prop changes without memory leaks', () => {\n    const { rerender } = render(<SharedScoreCircle score={85} type=\"health\" />);\n    \n    // Rapidly change props to test for memory leaks\n    for (let i = 0; i < 100; i++) {\n      rerender(\n        <SharedScoreCircle \n          score={Math.floor(Math.random() * 100)} \n          type={['health', 'eco', 'financial'][i % 3] as any}\n        />\n      );\n    }\n    \n    // Should still function normally\n    expect(screen.getByText(/\\d+/)).toBeInTheDocument();\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/data-integrity.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/data-integrity.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport { VueniSecureStorage } from '../utils/crypto';\nimport { VueniInputSanitizer } from '../utils/security';\nimport {\n  calculateCompoundInterest,\n  calculateLoanPayment,\n  calculateROI,\n  calculateFinancialFreedomYears,\n} from '../utils/calculators';\n\n// Mock data for testing\nconst mockTransactionData = {\n  id: 'txn-123',\n  merchant: 'Test Merchant',\n  amount: 100.50,\n  date: '2024-01-01',\n  category: 'groceries',\n  healthScore: 85,\n  ecoScore: 70,\n  financialScore: 90,\n  description: 'Weekly grocery shopping',\n  account: 'checking-001',\n};\n\nconst mockAccountData = {\n  id: 'acc-123',\n  type: 'checking',\n  nickname: 'Main Checking',\n  balance: 5000.00,\n  availableBalance: 4800.00,\n  currency: 'USD',\n  institution: 'Test Bank',\n  lastUpdated: '2024-01-01T00:00:00Z',\n};\n\nconst mockBudgetData = {\n  id: 'budget-123',\n  category: 'groceries',\n  monthlyLimit: 500.00,\n  spent: 150.25,\n  remaining: 349.75,\n  period: '2024-01',\n  alerts: {\n    threshold: 0.8,\n    enabled: true,\n  },\n};\n\ndescribe('Data Integrity and Persistence Tests', () => {\n  \n  beforeEach(() => {\n    // Clear storage before each test\n    localStorage.clear();\n    sessionStorage.clear();\n    \n    // Mock console methods to avoid noise in tests\n    vi.spyOn(console, 'error').mockImplementation(() => {});\n    vi.spyOn(console, 'warn').mockImplementation(() => {});\n  });\n\n  afterEach(() => {\n    // Restore mocks\n    vi.restoreAllMocks();\n  });\n\n  describe('Transaction Data Integrity', () => {\n    it('should validate transaction data structure', () => {\n      const transaction = { ...mockTransactionData };\n      \n      // Required fields should be present\n      expect(transaction.id).toBeDefined();\n      expect(transaction.merchant).toBeDefined();\n      expect(transaction.amount).toBeDefined();\n      expect(transaction.date).toBeDefined();\n      expect(transaction.category).toBeDefined();\n      \n      // Amount should be a valid number\n      expect(typeof transaction.amount).toBe('number');\n      expect(transaction.amount).toBeGreaterThan(0);\n      \n      // Date should be valid\n      expect(new Date(transaction.date).getTime()).not.toBeNaN();\n      \n      // Scores should be within valid range\n      expect(transaction.healthScore).toBeGreaterThanOrEqual(0);\n      expect(transaction.healthScore).toBeLessThanOrEqual(100);\n      expect(transaction.ecoScore).toBeGreaterThanOrEqual(0);\n      expect(transaction.ecoScore).toBeLessThanOrEqual(100);\n      expect(transaction.financialScore).toBeGreaterThanOrEqual(0);\n      expect(transaction.financialScore).toBeLessThanOrEqual(100);\n    });\n\n    it('should sanitize transaction input data', () => {\n      const maliciousTransaction = {\n        ...mockTransactionData,\n        merchant: '<script>alert(\"xss\")</script>',\n        description: 'Normal text <img src=\"x\" onerror=\"alert(1)\">',\n        amount: '$1,234.56', // String that needs parsing\n      };\n      \n      // Sanitize data\n      const sanitized = {\n        ...maliciousTransaction,\n        merchant: VueniInputSanitizer.sanitizeText(maliciousTransaction.merchant),\n        description: VueniInputSanitizer.sanitizeTransactionDescription(maliciousTransaction.description),\n        amount: VueniInputSanitizer.sanitizeFinancialAmount(maliciousTransaction.amount),\n      };\n      \n      expect(sanitized.merchant).not.toContain('<script>');\n      expect(sanitized.description).not.toContain('<img');\n      expect(sanitized.amount).toBe(1234.56);\n    });\n\n    it('should maintain transaction data consistency across storage operations', () => {\n      const transaction = { ...mockTransactionData };\n      \n      // Store transaction\n      VueniSecureStorage.setItem('vueni:transaction:123', transaction);\n      \n      // Retrieve and verify\n      const retrieved = VueniSecureStorage.getItem('vueni:transaction:123');\n      expect(retrieved).toEqual(transaction);\n      \n      // Modify and update\n      const updated = { ...transaction, amount: 125.75 };\n      VueniSecureStorage.setItem('vueni:transaction:123', updated);\n      \n      const retrievedUpdated = VueniSecureStorage.getItem('vueni:transaction:123');\n      expect(retrievedUpdated.amount).toBe(125.75);\n      expect(retrievedUpdated.id).toBe(transaction.id);\n    });\n\n    it('should handle transaction data corruption', () => {\n      // Store valid transaction\n      VueniSecureStorage.setItem('vueni:transaction:456', mockTransactionData);\n      \n      // Simulate corruption by directly modifying localStorage\n      localStorage.setItem('vueni:transaction:456', 'corrupted-data');\n      \n      // Should handle corruption gracefully\n      const result = VueniSecureStorage.getItem('vueni:transaction:456');\n      expect(result).toBeNull(); // Should return null for corrupted data\n    });\n\n    it('should validate transaction calculations', () => {\n      const transactions = [\n        { amount: 100, category: 'groceries' },\n        { amount: 50, category: 'groceries' },\n        { amount: 200, category: 'dining' },\n      ];\n      \n      // Calculate totals\n      const total = transactions.reduce((sum, txn) => sum + txn.amount, 0);\n      expect(total).toBe(350);\n      \n      // Calculate category totals\n      const groceryTotal = transactions\n        .filter(txn => txn.category === 'groceries')\n        .reduce((sum, txn) => sum + txn.amount, 0);\n      expect(groceryTotal).toBe(150);\n      \n      // Verify precision is maintained\n      const preciseTransactions = [\n        { amount: 10.33 },\n        { amount: 20.67 },\n        { amount: 5.44 },\n      ];\n      \n      const preciseTotal = preciseTransactions.reduce((sum, txn) => sum + txn.amount, 0);\n      expect(preciseTotal).toBeCloseTo(36.44, 2);\n    });\n\n    it('should handle large transaction datasets', () => {\n      const largeDataset = Array.from({ length: 10000 }, (_, i) => ({\n        id: `txn-${i}`,\n        amount: Math.round((Math.random() * 1000) * 100) / 100,\n        date: new Date(2024, 0, i % 30 + 1).toISOString(),\n        category: ['groceries', 'dining', 'transport', 'utilities'][i % 4],\n      }));\n      \n      // Store large dataset\n      const startTime = performance.now();\n      VueniSecureStorage.setItem('vueni:transactions:bulk', largeDataset);\n      const storeTime = performance.now() - startTime;\n      \n      // Should store within reasonable time\n      expect(storeTime).toBeLessThan(1000); // 1 second\n      \n      // Retrieve and verify\n      const retrieveStart = performance.now();\n      const retrieved = VueniSecureStorage.getItem('vueni:transactions:bulk');\n      const retrieveTime = performance.now() - retrieveStart;\n      \n      expect(retrieveTime).toBeLessThan(500); // 0.5 seconds\n      expect(retrieved).toHaveLength(10000);\n      expect(retrieved[0].id).toBe('txn-0');\n      expect(retrieved[9999].id).toBe('txn-9999');\n    });\n  });\n\n  describe('Account Data Integrity', () => {\n    it('should validate account balance accuracy', () => {\n      const account = { ...mockAccountData };\n      \n      // Balance should be a valid number\n      expect(typeof account.balance).toBe('number');\n      expect(account.availableBalance).toBeLessThanOrEqual(account.balance);\n      \n      // Currency should be valid\n      expect(account.currency).toMatch(/^[A-Z]{3}$/);\n      \n      // Balance precision should be maintained\n      const testBalance = 1234.56789;\n      const sanitizedBalance = VueniInputSanitizer.sanitizeFinancialAmount(testBalance);\n      expect(sanitizedBalance).toBe(1234.57); // Rounded to 2 decimal places\n    });\n\n    it('should maintain account data consistency', () => {\n      const account = { ...mockAccountData };\n      \n      // Store account\n      VueniSecureStorage.setItem('vueni:account:123', account);\n      \n      // Simulate account updates\n      const updatedAccount = {\n        ...account,\n        balance: 5250.00,\n        availableBalance: 5050.00,\n        lastUpdated: new Date().toISOString(),\n      };\n      \n      VueniSecureStorage.setItem('vueni:account:123', updatedAccount);\n      \n      // Verify consistency\n      const retrieved = VueniSecureStorage.getItem('vueni:account:123');\n      expect(retrieved.balance).toBe(5250.00);\n      expect(retrieved.availableBalance).toBe(5050.00);\n      expect(retrieved.id).toBe(account.id);\n    });\n\n    it('should handle account balance calculations', () => {\n      const account = { balance: 1000.00 };\n      const transactions = [\n        { amount: -50.00 }, // Debit\n        { amount: -30.25 }, // Debit\n        { amount: 200.00 }, // Credit\n      ];\n      \n      // Calculate new balance\n      const newBalance = transactions.reduce((balance, txn) => balance + txn.amount, account.balance);\n      expect(newBalance).toBe(1119.75);\n      \n      // Verify precision\n      expect(Number((newBalance).toFixed(2))).toBe(1119.75);\n    });\n  });\n\n  describe('Budget Data Integrity', () => {\n    it('should validate budget calculations', () => {\n      const budget = { ...mockBudgetData };\n      \n      // Budget math should be consistent\n      expect(budget.spent + budget.remaining).toBeCloseTo(budget.monthlyLimit, 2);\n      \n      // Percentages should be accurate\n      const spentPercentage = budget.spent / budget.monthlyLimit;\n      expect(spentPercentage).toBeCloseTo(0.3005, 4);\n      \n      // Alert threshold should be valid\n      expect(budget.alerts.threshold).toBeGreaterThan(0);\n      expect(budget.alerts.threshold).toBeLessThanOrEqual(1);\n    });\n\n    it('should handle budget updates correctly', () => {\n      const budget = { ...mockBudgetData };\n      \n      // Add new spending\n      const newSpending = 75.50;\n      const updatedBudget = {\n        ...budget,\n        spent: budget.spent + newSpending,\n        remaining: budget.monthlyLimit - (budget.spent + newSpending),\n      };\n      \n      // Verify calculations\n      expect(updatedBudget.spent).toBe(225.75);\n      expect(updatedBudget.remaining).toBe(274.25);\n      expect(updatedBudget.spent + updatedBudget.remaining).toBeCloseTo(budget.monthlyLimit, 2);\n    });\n\n    it('should detect budget threshold violations', () => {\n      const budget = { ...mockBudgetData };\n      \n      // Test various spending levels\n      const testSpending = [\n        { spent: 400, shouldAlert: true },  // 80% threshold\n        { spent: 350, shouldAlert: false }, // 70% - below threshold\n        { spent: 500, shouldAlert: true },  // 100% - over budget\n      ];\n      \n      testSpending.forEach(({ spent, shouldAlert }) => {\n        const spentPercentage = spent / budget.monthlyLimit;\n        const exceedsThreshold = spentPercentage >= budget.alerts.threshold;\n        expect(exceedsThreshold).toBe(shouldAlert);\n      });\n    });\n  });\n\n  describe('Financial Calculation Integrity', () => {\n    it('should maintain calculation accuracy across repeated operations', () => {\n      const testCases = [\n        { principal: 10000, rate: 5, years: 10 },\n        { principal: 50000, rate: 7.5, years: 15 },\n        { principal: 100000, rate: 3.2, years: 5 },\n      ];\n      \n      testCases.forEach(({ principal, rate, years }) => {\n        // Calculate multiple times\n        const results = Array.from({ length: 10 }, () => \n          calculateCompoundInterest(principal, rate, years, 12)\n        );\n        \n        // All results should be identical\n        const firstResult = results[0];\n        results.forEach(result => {\n          expect(result).toBe(firstResult);\n        });\n        \n        // Result should be deterministic\n        expect(typeof firstResult).toBe('number');\n        expect(firstResult).toBeGreaterThan(principal);\n      });\n    });\n\n    it('should handle calculation edge cases', () => {\n      // Zero interest rate\n      const zeroInterest = calculateCompoundInterest(1000, 0, 5, 12);\n      expect(zeroInterest).toBe(1000.00);\n      \n      // Zero time period\n      const zeroTime = calculateCompoundInterest(1000, 5, 0, 12);\n      expect(zeroTime).toBe(1000.00);\n      \n      // Very small amounts\n      const smallAmount = calculateCompoundInterest(0.01, 5, 1, 12);\n      expect(smallAmount).toBeCloseTo(0.01, 2);\n      \n      // Very large amounts (should not overflow)\n      const largeAmount = calculateCompoundInterest(1000000, 5, 10, 12);\n      expect(largeAmount).toBeGreaterThan(1000000);\n      expect(Number.isFinite(largeAmount)).toBe(true);\n    });\n\n    it('should validate loan payment calculations', () => {\n      const principal = 300000;\n      const rate = 4.5;\n      const years = 30;\n      \n      const monthlyPayment = calculateLoanPayment(principal, rate, years);\n      \n      // Payment should be reasonable\n      expect(monthlyPayment).toBeGreaterThan(1000);\n      expect(monthlyPayment).toBeLessThan(2000);\n      \n      // Total payments should exceed principal (due to interest)\n      const totalPayments = monthlyPayment * years * 12;\n      expect(totalPayments).toBeGreaterThan(principal);\n      \n      // Should handle different loan terms consistently\n      const payment15yr = calculateLoanPayment(principal, rate, 15);\n      const payment30yr = calculateLoanPayment(principal, rate, 30);\n      \n      expect(payment15yr).toBeGreaterThan(payment30yr);\n    });\n\n    it('should maintain ROI calculation accuracy', () => {\n      const testCases = [\n        { initial: 1000, current: 1200, expectedROI: 20.00 },\n        { initial: 5000, current: 4500, expectedROI: -10.00 },\n        { initial: 10000, current: 15000, expectedROI: 50.00 },\n      ];\n      \n      testCases.forEach(({ initial, current, expectedROI }) => {\n        const roi = calculateROI(initial, current);\n        expect(roi).toBe(expectedROI);\n      });\n    });\n\n    it('should handle financial freedom calculations accurately', () => {\n      const testScenarios = [\n        {\n          savings: 500000,\n          expenses: 4000,\n          rate: 0.04,\n          expectedRange: [20, 30], // Should be around 25-26 years\n        },\n        {\n          savings: 1000000,\n          expenses: 4000,\n          rate: 0.04,\n          expectedRange: [40, 50], // Should be indefinite with growth\n        },\n      ];\n      \n      testScenarios.forEach(({ savings, expenses, rate, expectedRange }) => {\n        const years = calculateFinancialFreedomYears(savings, expenses, rate);\n        expect(years).toBeGreaterThanOrEqual(expectedRange[0]);\n        expect(years).toBeLessThanOrEqual(expectedRange[1]);\n      });\n    });\n  });\n\n  describe('Data Persistence and Recovery', () => {\n    it('should handle storage quota exceeded', () => {\n      const largeData = 'x'.repeat(10 * 1024 * 1024); // 10MB string\n      \n      // Should handle quota exceeded gracefully\n      expect(() => {\n        VueniSecureStorage.setItem('vueni:large-data', largeData);\n      }).not.toThrow();\n      \n      // Should either succeed or fail gracefully\n      const retrieved = VueniSecureStorage.getItem('vueni:large-data');\n      // If storage failed, should return null\n      if (retrieved === null) {\n        expect(retrieved).toBeNull();\n      } else {\n        expect(retrieved).toBe(largeData);\n      }\n    });\n\n    it('should handle concurrent storage operations', async () => {\n      const promises = Array.from({ length: 100 }, (_, i) => \n        new Promise<void>((resolve) => {\n          VueniSecureStorage.setItem(`vueni:concurrent:${i}`, { id: i, data: `test-${i}` });\n          resolve();\n        })\n      );\n      \n      // Should handle concurrent operations without conflicts\n      await Promise.all(promises);\n      \n      // Verify all data was stored correctly\n      for (let i = 0; i < 100; i++) {\n        const data = VueniSecureStorage.getItem(`vueni:concurrent:${i}`);\n        expect(data).toEqual({ id: i, data: `test-${i}` });\n      }\n    });\n\n    it('should maintain data consistency during browser events', () => {\n      const testData = { ...mockTransactionData };\n      \n      // Store initial data\n      VueniSecureStorage.setItem('vueni:consistency-test', testData);\n      \n      // Simulate page unload/reload by clearing session but keeping localStorage\n      sessionStorage.clear();\n      \n      // Data should still be retrievable\n      const retrieved = VueniSecureStorage.getItem('vueni:consistency-test');\n      expect(retrieved).toEqual(testData);\n      \n      // Simulate browser crash by corrupting one key\n      localStorage.setItem('vueni:consistency-test', 'corrupted');\n      \n      // Should handle corruption gracefully\n      const corruptedResult = VueniSecureStorage.getItem('vueni:consistency-test');\n      expect(corruptedResult).toBeNull();\n    });\n\n    it('should validate data migration scenarios', () => {\n      // Simulate old data format\n      const oldTransaction = {\n        id: 'old-123',\n        merchant: 'Old Merchant',\n        amount: '100.50', // String instead of number\n        date: '2024-01-01',\n        // Missing new fields\n      };\n      \n      // Store old format\n      localStorage.setItem('vueni:transaction:old-123', JSON.stringify(oldTransaction));\n      \n      // Migration function should handle conversion\n      const migrated = VueniSecureStorage.getItem('vueni:transaction:old-123');\n      \n      if (migrated) {\n        // Should handle string to number conversion\n        expect(typeof migrated.amount).toBe('number');\n        expect(migrated.amount).toBe(100.50);\n      }\n    });\n  });\n\n  describe('Cross-Session Data Integrity', () => {\n    it('should maintain data across simulated sessions', () => {\n      const sessionData = {\n        user: 'test-user',\n        preferences: { theme: 'dark', currency: 'USD' },\n        lastActive: new Date().toISOString(),\n      };\n      \n      // Store session data\n      VueniSecureStorage.setItem('vueni:session', sessionData);\n      \n      // Simulate session end\n      sessionStorage.clear();\n      \n      // Simulate new session\n      const retrievedSession = VueniSecureStorage.getItem('vueni:session');\n      expect(retrievedSession).toEqual(sessionData);\n      \n      // Update preferences\n      const updatedPreferences = {\n        ...sessionData,\n        preferences: { ...sessionData.preferences, theme: 'light' },\n      };\n      \n      VueniSecureStorage.setItem('vueni:session', updatedPreferences);\n      \n      // Verify update persisted\n      const finalSession = VueniSecureStorage.getItem('vueni:session');\n      expect(finalSession.preferences.theme).toBe('light');\n    });\n\n    it('should handle data synchronization conflicts', () => {\n      const baseData = { id: 'sync-test', version: 1, amount: 100 };\n      \n      // Store initial version\n      VueniSecureStorage.setItem('vueni:sync-test', baseData);\n      \n      // Simulate conflicting updates\n      const update1 = { ...baseData, version: 2, amount: 150 };\n      const update2 = { ...baseData, version: 2, amount: 200 };\n      \n      // Apply updates\n      VueniSecureStorage.setItem('vueni:sync-test', update1);\n      VueniSecureStorage.setItem('vueni:sync-test', update2);\n      \n      // Last write should win\n      const final = VueniSecureStorage.getItem('vueni:sync-test');\n      expect(final.amount).toBe(200);\n      expect(final.version).toBe(2);\n    });\n  });\n\n  describe('Data Validation and Sanitization', () => {\n    it('should validate all financial amounts', () => {\n      const testAmounts = [\n        { input: '1234.56', expected: 1234.56 },\n        { input: '$1,234.56', expected: 1234.56 },\n        { input: '1234.567', expected: 1234.57 }, // Rounded\n        { input: '-500.00', expected: -500.00 },\n        { input: 'invalid', shouldThrow: true },\n        { input: '999999999999999', shouldThrow: true }, // Too large\n      ];\n      \n      testAmounts.forEach(({ input, expected, shouldThrow }) => {\n        if (shouldThrow) {\n          expect(() => VueniInputSanitizer.sanitizeFinancialAmount(input)).toThrow();\n        } else {\n          const result = VueniInputSanitizer.sanitizeFinancialAmount(input);\n          expect(result).toBe(expected);\n        }\n      });\n    });\n\n    it('should sanitize all text inputs', () => {\n      const testInputs = [\n        {\n          input: '<script>alert(\"xss\")</script>',\n          expected: '&lt;script&gt;alert(&quot;xss&quot;)&lt;&#x2F;script&gt;',\n        },\n        {\n          input: \"O'Reilly & Associates\",\n          expected: 'O&#x27;Reilly &amp; Associates',\n        },\n        {\n          input: 'Normal text',\n          expected: 'Normal text',\n        },\n      ];\n      \n      testInputs.forEach(({ input, expected }) => {\n        const result = VueniInputSanitizer.sanitizeText(input);\n        expect(result).toBe(expected);\n      });\n    });\n\n    it('should validate data before storage', () => {\n      const invalidTransactions = [\n        { ...mockTransactionData, amount: 'invalid' },\n        { ...mockTransactionData, date: 'invalid-date' },\n        { ...mockTransactionData, id: null },\n      ];\n      \n      invalidTransactions.forEach((invalidTxn, index) => {\n        // Should either sanitize or reject invalid data\n        try {\n          const sanitized = {\n            ...invalidTxn,\n            amount: typeof invalidTxn.amount === 'string' \n              ? VueniInputSanitizer.sanitizeFinancialAmount(invalidTxn.amount)\n              : invalidTxn.amount,\n          };\n          \n          VueniSecureStorage.setItem(`vueni:invalid:${index}`, sanitized);\n        } catch (error) {\n          // Should throw for truly invalid data\n          expect(error).toBeInstanceOf(Error);\n        }\n      });\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/formatters.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/formatters.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, test, expect } from 'vitest';\nimport {\n  formatScore,\n  formatCurrency,\n  formatPercentage,\n  formatCompactNumber,\n  formatDecimal,\n  formatLargeNumber,\n  formatFinancialScore,\n  safeRatio,\n  formatPercent\n} from '@/shared/utils/formatters';\n\ndescribe('Formatter Functions', () => {\n  describe('safeRatio', () => {\n    test('calculates ratio correctly for normal cases', () => {\n      expect(safeRatio(10, 2)).toBe(5);\n      expect(safeRatio(100, 50)).toBe(2);\n      expect(safeRatio(-10, 2)).toBe(-5);\n      expect(safeRatio(0, 10)).toBe(0);\n    });\n\n    test('returns null for division by zero', () => {\n      expect(safeRatio(10, 0)).toBe(null);\n      expect(safeRatio(-10, 0)).toBe(null);\n      expect(safeRatio(0, 0)).toBe(null);\n    });\n\n    test('handles infinite values', () => {\n      expect(safeRatio(10, Infinity)).toBe(null);\n      expect(safeRatio(10, -Infinity)).toBe(null);\n      expect(safeRatio(Infinity, 10)).toBe(null);\n    });\n\n    test('handles NaN values', () => {\n      expect(safeRatio(10, NaN)).toBe(null);\n      expect(safeRatio(NaN, 10)).toBe(null);\n    });\n  });\n\n  describe('formatPercent', () => {\n    test('formats percentages correctly', () => {\n      expect(formatPercent(0.25)).toBe('25.0%');\n      expect(formatPercent(0.5)).toBe('50.0%');\n      expect(formatPercent(1.0)).toBe('100.0%');\n      expect(formatPercent(-0.1)).toBe('-10.0%');\n    });\n\n    test('clamps extreme percentage values', () => {\n      expect(formatPercent(30.8)).toBe('999.0%'); // 3080% clamped to 999%\n      expect(formatPercent(70.12)).toBe('999.0%'); // 7012% clamped to 999%\n      expect(formatPercent(-30.8)).toBe('-999.0%'); // -3080% clamped to -999%\n    });\n\n    test('handles null and invalid values', () => {\n      expect(formatPercent(null)).toBe('--');\n      expect(formatPercent(Infinity)).toBe('--');\n      expect(formatPercent(-Infinity)).toBe('--');\n      expect(formatPercent(NaN)).toBe('--');\n    });\n\n    test('respects decimal places', () => {\n      expect(formatPercent(0.123, 0)).toBe('12%');\n      expect(formatPercent(0.123, 1)).toBe('12.3%');\n      expect(formatPercent(0.123, 2)).toBe('12.30%');\n    });\n\n    test('respects custom clamp values', () => {\n      expect(formatPercent(5.0, 1, 100)).toBe('100.0%'); // 500% clamped to 100%\n      expect(formatPercent(-5.0, 1, 100)).toBe('-100.0%'); // -500% clamped to -100%\n    });\n  });\n\n  describe('formatScore', () => {\n    test('formats score with default precision', () => {\n      expect(formatScore(85.73829)).toBe('85.7');\n      expect(formatScore(92)).toBe('92.0');\n      expect(formatScore(100)).toBe('100.0');\n      expect(formatScore(0)).toBe('0.0');\n      expect(formatScore(45.95)).toBe('46.0');\n      expect(formatScore(45.94)).toBe('45.9');\n    });\n\n    test('respects precision parameter', () => {\n      expect(formatScore(85.789, 0)).toBe('86');\n      expect(formatScore(85.789, 1)).toBe('85.8');\n      expect(formatScore(85.789, 2)).toBe('85.79');\n    });\n\n    test('handles edge cases', () => {\n      expect(formatScore(-10)).toBe('-10.0');\n      expect(formatScore(999.99)).toBe('1000.0');\n      expect(formatScore(0.1)).toBe('0.1');\n    });\n  });\n\n  describe('formatCurrency', () => {\n    test('formats whole dollar amounts without decimals', () => {\n      expect(formatCurrency(12450)).toBe('$12,450');\n      expect(formatCurrency(1000)).toBe('$1,000');\n      expect(formatCurrency(50)).toBe('$50');\n    });\n\n    test('formats amounts with cents when needed', () => {\n      expect(formatCurrency(12450.50)).toBe('$12,450.50');\n      expect(formatCurrency(99.99)).toBe('$99.99');\n      expect(formatCurrency(0.50)).toBe('$0.50');\n    });\n\n    test('respects decimal option', () => {\n      expect(formatCurrency(12450.50, { decimals: 0 })).toBe('$12,450');\n      expect(formatCurrency(12450, { decimals: 2 })).toBe('$12,450.00');\n    });\n\n    test('handles different currencies', () => {\n      expect(formatCurrency(1000, { currency: 'EUR', locale: 'en-US' })).toBe('€1,000');\n      expect(formatCurrency(1000, { currency: 'GBP', locale: 'en-US' })).toBe('£1,000');\n    });\n\n    test('handles negative values', () => {\n      expect(formatCurrency(-1000)).toBe('-$1,000');\n      expect(formatCurrency(-50.99)).toBe('-$50.99');\n    });\n\n    test('handles zero', () => {\n      expect(formatCurrency(0)).toBe('$0');\n      expect(formatCurrency(0, { decimals: 2 })).toBe('$0.00');\n    });\n  });\n\n  describe('formatPercentage', () => {\n    test('formats percentage with 1 decimal by default', () => {\n      expect(formatPercentage(85.7)).toBe('85.7%');\n      expect(formatPercentage(100)).toBe('100.0%');\n      expect(formatPercentage(0)).toBe('0.0%');\n    });\n\n    test('respects decimal parameter', () => {\n      expect(formatPercentage(85.789, 0)).toBe('86%');\n      expect(formatPercentage(85.789, 2)).toBe('85.79%');\n      expect(formatPercentage(85.789, 3)).toBe('85.789%');\n    });\n\n    test('handles edge cases', () => {\n      expect(formatPercentage(-25.5)).toBe('-25.5%');\n      expect(formatPercentage(150)).toBe('150.0%');\n      expect(formatPercentage(0.1)).toBe('0.1%');\n    });\n  });\n\n  describe('formatCompactNumber', () => {\n    test('formats thousands with K suffix', () => {\n      expect(formatCompactNumber(1000)).toBe('1.0K');\n      expect(formatCompactNumber(1500)).toBe('1.5K');\n      expect(formatCompactNumber(999)).toBe('999');\n      expect(formatCompactNumber(12345)).toBe('12.3K');\n    });\n\n    test('formats millions with M suffix', () => {\n      expect(formatCompactNumber(1000000)).toBe('1.0M');\n      expect(formatCompactNumber(2500000)).toBe('2.5M');\n      expect(formatCompactNumber(999999)).toBe('1000.0K');\n      expect(formatCompactNumber(12345678)).toBe('12.3M');\n    });\n\n    test('formats billions with B suffix', () => {\n      expect(formatCompactNumber(1000000000)).toBe('1.0B');\n      expect(formatCompactNumber(2500000000)).toBe('2.5B');\n      expect(formatCompactNumber(999999999)).toBe('1000.0M');\n    });\n\n    test('formats small numbers without suffix', () => {\n      expect(formatCompactNumber(0)).toBe('0');\n      expect(formatCompactNumber(100)).toBe('100');\n      expect(formatCompactNumber(999)).toBe('999');\n    });\n\n    test('handles negative numbers', () => {\n      expect(formatCompactNumber(-1000)).toBe('-1.0K');\n      expect(formatCompactNumber(-1000000)).toBe('-1.0M');\n    });\n  });\n\n  describe('formatDecimal', () => {\n    test('formats with 1 decimal by default', () => {\n      expect(formatDecimal(10.789)).toBe('10.8');\n      expect(formatDecimal(5)).toBe('5.0');\n    });\n\n    test('respects decimal parameter', () => {\n      expect(formatDecimal(10.789, 0)).toBe('11');\n      expect(formatDecimal(10.789, 2)).toBe('10.79');\n      expect(formatDecimal(10.789, 3)).toBe('10.789');\n    });\n  });\n\n  describe('formatLargeNumber', () => {\n    test('formats with appropriate suffix', () => {\n      expect(formatLargeNumber(1234)).toBe('1.2K');\n      expect(formatLargeNumber(1234567)).toBe('1.2M');\n      expect(formatLargeNumber(1234567890)).toBe('1.2B');\n    });\n\n    test('respects decimal parameter', () => {\n      expect(formatLargeNumber(1234, 0)).toBe('1K');\n      expect(formatLargeNumber(1234, 2)).toBe('1.23K');\n      expect(formatLargeNumber(1234567, 3)).toBe('1.235M');\n    });\n\n    test('handles small numbers', () => {\n      expect(formatLargeNumber(999)).toBe('999');\n      expect(formatLargeNumber(0)).toBe('0');\n    });\n  });\n\n  describe('formatScore utility', () => {\n    describe('integer formatting (precision = 0)', () => {\n      test('should format to integer by default', () => {\n        expect(formatScore(79.374449477564985)).toBe('79');\n        expect(formatScore(79.9999)).toBe('80');\n        expect(formatScore(79.1)).toBe('79');\n        expect(formatScore(79.5)).toBe('80'); // Rounds up\n      });\n\n      test('should handle edge cases for integer formatting', () => {\n        expect(formatScore(0)).toBe('0');\n        expect(formatScore(100)).toBe('100');\n        expect(formatScore(0.4)).toBe('0');\n        expect(formatScore(0.5)).toBe('1'); // Rounds up\n      });\n    });\n\n    describe('single decimal formatting (precision = 1)', () => {\n      test('should format to 1 decimal place', () => {\n        expect(formatScore(79.3, 1)).toBe('79.3');\n        expect(formatScore(79.37, 1)).toBe('79.4'); // Rounds up\n        expect(formatScore(79.0, 1)).toBe('79.0');\n        expect(formatScore(79.95, 1)).toBe('80.0');\n      });\n\n      test('should handle edge cases for single decimal', () => {\n        expect(formatScore(0, 1)).toBe('0.0');\n        expect(formatScore(100, 1)).toBe('100.0');\n        expect(formatScore(99.99, 1)).toBe('100.0');\n      });\n    });\n\n    describe('double decimal formatting (precision = 2)', () => {\n      test('should format to 2 decimal places', () => {\n        expect(formatScore(79.34, 2)).toBe('79.34');\n        expect(formatScore(79.349, 2)).toBe('79.35'); // Rounds up\n        expect(formatScore(79.0, 2)).toBe('79.00');\n        expect(formatScore(79.999, 2)).toBe('80.00');\n      });\n\n      test('should handle edge cases for double decimal', () => {\n        expect(formatScore(0, 2)).toBe('0.00');\n        expect(formatScore(100, 2)).toBe('100.00');\n        expect(formatScore(99.995, 2)).toBe('100.00');\n      });\n    });\n\n    describe('precision validation', () => {\n      test('should clamp invalid precision values', () => {\n        // @ts-expect-error Testing invalid precision values\n        expect(formatScore(79.374, -1)).toBe('79'); // Clamped to 0\n        // @ts-expect-error Testing invalid precision values  \n        expect(formatScore(79.374, 5)).toBe('79.37'); // Clamped to 2\n      });\n    });\n\n    describe('locale support', () => {\n      test('should respect locale formatting', () => {\n        // German locale uses comma as decimal separator\n        expect(formatScore(79.34, 2, 'de-DE')).toBe('79,34');\n        expect(formatScore(79.3, 1, 'de-DE')).toBe('79,3');\n        \n        // French locale\n        expect(formatScore(79.34, 2, 'fr-FR')).toBe('79,34');\n      });\n\n      test('should not use thousands separators', () => {\n        expect(formatScore(1000, 0)).toBe('1000'); // No comma\n        expect(formatScore(1000.5, 1)).toBe('1000.5'); // No comma\n      });\n    });\n\n    describe('financial score specific formatting', () => {\n      test('should always format financial scores as integers', () => {\n        expect(formatFinancialScore(79.374449477564985)).toBe('79');\n        expect(formatFinancialScore(79.9999)).toBe('80');\n        expect(formatFinancialScore(0.5)).toBe('1');\n        expect(formatFinancialScore(100)).toBe('100');\n      });\n    });\n\n    describe('problematic values from actual usage', () => {\n      test('should handle the exact problematic value from Financial Health card', () => {\n        expect(formatScore(79.60230617161903)).toBe('80'); // Integer default\n        expect(formatScore(79.60230617161903, 1)).toBe('79.6'); // 1 decimal\n        expect(formatScore(79.60230617161903, 2)).toBe('79.60'); // 2 decimals\n      });\n\n      test('should handle bill payment score calculations', () => {\n        // Simulating: (completedTransactions / totalTransactions) * 100\n        const score = (27 / 34) * 100; // This produces decimals\n        expect(formatScore(score)).toBe('79'); // Clean integer\n      });\n\n      test('should handle weighted financial score calculations', () => {\n        // Simulating complex weighted calculations\n        const complexScore = 79.37449477564985 * 0.4 + 82.15 * 0.3 + 76.23 * 0.3;\n        expect(formatScore(complexScore)).toBe('79'); // Clean integer\n      });\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/gap10-advisor.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/gap10-advisor.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport { useAdvisorChatStore as store } from \"@/features/advisor-chat/store\";\n\ndescribe(\"Advisor Chat Store\", () => {\n  it(\"opens thread and sends message\", async () => {\n    await (store as any).getState().openChat();\n    const thread = (store as any).getState().thread;\n    expect(thread).toBeDefined();\n\n    await (store as any).getState().sendMessage(\"Hello\");\n    const updated = (store as any).getState().thread;\n    expect(updated.messages.length).toBeGreaterThan(0);\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/gap10-age-of-money.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/gap10-age-of-money.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport { useAgeOfMoneyStore as store } from \"@/features/age-of-money/store\";\n\ndescribe(\"Age of Money Store\", () => {\n  it(\"calculates metric\", async () => {\n    await (store as any).getState().refresh();\n    const metric = (store as any).getState().metric;\n    expect(metric?.averageDaysHeld).toBeGreaterThan(0);\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/gap10-biometric.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/gap10-biometric.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport { useBiometricInterventionStore, useBiometricStore } from \"@/features/biometric-intervention/store\";\n\ndescribe(\"Biometric Intervention System\", () => {\n  it(\"initializes biometric intervention store\", async () => {\n    const store = useBiometricInterventionStore.getState();\n    await store.initialize();\n    expect(store.isActive).toBe(true);\n  });\n\n  it(\"triggers manual stress check\", async () => {\n    const store = useBiometricInterventionStore.getState();\n    await store.triggerManualStressCheck();\n    expect(store.currentStress).toBeDefined();\n    expect(store.currentStress?.score).toBeGreaterThanOrEqual(0);\n    expect(store.currentStress?.score).toBeLessThanOrEqual(100);\n  });\n\n  it(\"handles biometric alerts\", async () => {\n    const { refresh, dismissAlert } = useBiometricStore.getState();\n    await refresh();\n    const state = useBiometricStore.getState();\n    \n    expect(state.reading).toBeDefined();\n    expect(state.reading?.heartRate).toBeGreaterThan(0);\n    expect(state.reading?.stressLevel).toBeGreaterThanOrEqual(0);\n    \n    // Test alert dismissal if any alerts exist\n    if (state.alerts.length > 0) {\n      const alertId = state.alerts[0].id;\n      await dismissAlert(alertId);\n      const updatedState = useBiometricStore.getState();\n      expect(updatedState.alerts.find(a => a.id === alertId)).toBeUndefined();\n    }\n  });\n\n  it(\"checks stress intervention logic\", async () => {\n    const store = useBiometricInterventionStore.getState();\n    await store.triggerManualStressCheck();\n    \n    // Test intervention check with high spending amount\n    const shouldIntervene = await store.checkStressIntervention(1000);\n    expect(typeof shouldIntervene).toBe(\"boolean\");\n  });\n\n  it(\"manages intervention policies\", async () => {\n    const store = useBiometricInterventionStore.getState();\n    \n    const testPolicy = {\n      name: \"Test High Stress Policy\",\n      enabled: true,\n      triggers: {\n        stressThreshold: 80,\n        spendingAmount: 100,\n        timeWindow: 300,\n      },\n      actions: {\n        showNudge: true,\n        delayPurchase: 30,\n        requireConfirmation: true,\n        suggestAlternatives: false,\n      },\n      schedule: {\n        enabledDays: [1, 2, 3, 4, 5],\n        startTime: \"09:00\",\n        endTime: \"18:00\",\n        timezone: \"UTC\",\n      },\n    };\n\n    await store.addPolicy(testPolicy);\n    expect(store.activePolicies.length).toBeGreaterThan(0);\n    \n    const addedPolicy = store.activePolicies[store.activePolicies.length - 1];\n    expect(addedPolicy.name).toBe(testPolicy.name);\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/gap10-negotiation.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/gap10-negotiation.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport { useNegotiationStore as store } from \"@/features/bill-negotiation/store\";\nimport { useSubscriptionsStore } from \"@/features/subscriptions/store\";\n\n// ensure subscriptions charges exist before negotiation\n\ndescribe(\"Negotiation Store\", () => {\n  it(\"creates negotiation cases for active subscriptions\", async () => {\n    await (useSubscriptionsStore as any).getState().detect();\n    await (store as any).getState().negotiateOutstanding();\n    const cases = (store as any).getState().cases;\n    expect(cases.length).toBeGreaterThan(0);\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/gap10-privacy.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/gap10-privacy.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport { usePrivacyStore as store } from \"@/features/privacy-hide-amounts/store\";\nimport { formatCurrency } from \"@/shared/utils/formatters\";\n\ndescribe(\"Privacy hide amounts\", () => {\n  it(\"masks currency when enabled\", () => {\n    (store as any).getState().toggle(); // enable hide\n    const hidden = formatCurrency(1234);\n    expect(/•/.test(hidden)).toBe(true);\n    (store as any).getState().toggle(); // disable\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/gap10-safe-to-spend.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/gap10-safe-to-spend.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport { useSafeToSpendStore as store } from \"@/features/safe-to-spend/store\";\n\ndescribe(\"Safe to Spend Store\", () => {\n  it(\"calculates safe spending amount\", async () => {\n    await (store as any).getState().refresh();\n    const cash = (store as any).getState().cash;\n    expect(cash?.amount).toBeGreaterThan(0);\n    expect(cash?.payday).toBeDefined();\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/gap10-schemas.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/gap10-schemas.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport {\n  LinkedAccountSchema,\n  RecurringChargeSchema,\n  NegotiationCaseSchema,\n  AutosavePlanSchema,\n  HouseholdSchema,\n  AgeMetricSchema,\n  PrivacySettingSchema,\n  AdvisorThreadSchema,\n  SpendableCashSchema,\n  HomeWidgetSchema,\n} from \"../schemas/gap10\";\n\n/**\n * Simple helper to make a valid ISO date string.\n */\nconst now = () => new Date().toISOString();\n\ndescribe(\"Gap-10 Domain Schemas\", () => {\n  it(\"validates LinkedAccount\", () => {\n    const obj = {\n      id: \"acc1\",\n      provider: \"mock\",\n      displayName: \"Mock Checking\",\n      institutionName: \"Mock Bank\",\n      lastFour: \"1234\",\n      type: \"checking\",\n      createdAt: now(),\n      updatedAt: now(),\n    };\n    expect(LinkedAccountSchema.parse(obj)).toMatchSnapshot();\n  });\n\n  it(\"validates RecurringCharge\", () => {\n    const obj = {\n      id: \"rc1\",\n      accountId: \"acc1\",\n      merchantName: \"Netflix\",\n      amount: 15.99,\n      frequency: \"monthly\",\n      nextDueDate: now(),\n      status: \"active\",\n    };\n    expect(RecurringChargeSchema.parse(obj)).toMatchSnapshot();\n  });\n\n  it(\"validates NegotiationCase\", () => {\n    const obj = {\n      id: \"case1\",\n      chargeId: \"rc1\",\n      status: \"queued\",\n      submittedAt: now(),\n    };\n    expect(NegotiationCaseSchema.parse(obj)).toMatchSnapshot();\n  });\n\n  it(\"validates AutosavePlan\", () => {\n    const obj = {\n      id: \"plan1\",\n      accountId: \"acc1\",\n      targetAmount: 50,\n      cadence: \"weekly\",\n      nextTransferDate: now(),\n      isActive: true,\n    };\n    expect(AutosavePlanSchema.parse(obj)).toMatchSnapshot();\n  });\n\n  it(\"validates Household\", () => {\n    const obj = {\n      id: \"house1\",\n      name: \"Smith Family\",\n      members: [\n        { userId: \"user1\", role: \"owner\" },\n        { userId: \"user2\", role: \"member\" },\n      ],\n      createdAt: now(),\n    };\n    expect(HouseholdSchema.parse(obj)).toMatchSnapshot();\n  });\n\n  it(\"validates AgeMetric\", () => {\n    const obj = {\n      averageDaysHeld: 27,\n      calculatedAt: now(),\n    };\n    expect(AgeMetricSchema.parse(obj)).toMatchSnapshot();\n  });\n\n  it(\"validates PrivacySetting\", () => {\n    const obj = {\n      hideAmounts: true,\n      updatedAt: now(),\n    };\n    expect(PrivacySettingSchema.parse(obj)).toMatchSnapshot();\n  });\n\n  it(\"validates AdvisorThread\", () => {\n    const obj = {\n      id: \"thread1\",\n      userId: \"user1\",\n      messages: [\n        { id: \"msg1\", sender: \"user\", content: \"Hi!\", createdAt: now() },\n      ],\n      isEscalated: false,\n    };\n    expect(AdvisorThreadSchema.parse(obj)).toMatchSnapshot();\n  });\n\n  it(\"validates SpendableCash\", () => {\n    const obj = {\n      amount: 1200,\n      payday: now(),\n      calculatedAt: now(),\n    };\n    expect(SpendableCashSchema.parse(obj)).toMatchSnapshot();\n  });\n\n  it(\"validates HomeWidget\", () => {\n    const obj = {\n      id: \"widget1\",\n      type: \"balance\",\n      position: 1,\n      config: {},\n    };\n    expect(HomeWidgetSchema.parse(obj)).toMatchSnapshot();\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/gap10-services.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/gap10-services.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport { bankLinkProvider } from \"../services/bankLinkProvider\";\nimport { subscriptionService } from \"../services/subscriptionService\";\nimport { negotiationService } from \"../services/negotiationService\";\nimport { autoSaveEngine } from \"../services/autoSaveEngine\";\nimport { householdService } from \"../services/householdService\";\nimport { advisorService } from \"../services/advisorService\";\n\n/**\n * These tests ensure the mock services behave deterministically and support further feature development.\n */\n\ndescribe(\"Gap-10 Mock Services\", () => {\n  it(\"bankLinkProvider end-to-end\", async () => {\n    const linkToken = await bankLinkProvider.createLinkToken();\n    expect(linkToken).toMatch(/^mock-link-token-/);\n\n    const acc = await bankLinkProvider.exchangePublicToken(\"public-token\");\n    expect(acc).toHaveProperty(\"id\");\n\n    const accounts = await bankLinkProvider.getLinkedAccounts();\n    expect(accounts).toHaveLength(1);\n\n    await bankLinkProvider.unlinkAccount(acc.id);\n    const accountsAfter = await bankLinkProvider.getLinkedAccounts();\n    expect(accountsAfter).toHaveLength(0);\n  });\n\n  it(\"subscriptionService detects and cancels\", async () => {\n    const charges = await subscriptionService.detectSubscriptions([]);\n    expect(charges).toBeInstanceOf(Array);\n\n    const result = await subscriptionService.cancelSubscription(\"nonexistent\");\n    expect(result).toBe(false);\n  });\n\n  it(\"negotiationService queue & status\", async () => {\n    const nc = await negotiationService.submitNegotiation(\"charge1\");\n    expect(nc.status).toBe(\"queued\");\n\n    const status = await negotiationService.getNegotiationStatus(nc.id);\n    expect(status).toEqual(nc);\n  });\n\n  it(\"autoSaveEngine lifecycle\", async () => {\n    const plan = await autoSaveEngine.createPlan({\n      accountId: \"acc1\",\n      targetAmount: 100,\n      cadence: \"daily\",\n      isActive: true,\n    } as any);\n    expect(plan.isActive).toBe(true);\n\n    await autoSaveEngine.pausePlan(plan.id);\n    const afterPause = (await autoSaveEngine.listPlans())[0];\n    expect(afterPause.isActive).toBe(false);\n\n    await autoSaveEngine.resumePlan(plan.id);\n    const afterResume = (await autoSaveEngine.listPlans())[0];\n    expect(afterResume.isActive).toBe(true);\n  });\n\n  it(\"householdService crud\", async () => {\n    const house = await householdService.createHousehold(\"My House\");\n    expect(house.name).toBe(\"My House\");\n\n    const list = await householdService.listHouseholds();\n    expect(list.map((h) => h.id)).toContain(house.id);\n  });\n\n  it(\"advisorService thread\", async () => {\n    const thread = await advisorService.openThread();\n    expect(thread.messages).toHaveLength(0);\n\n    const msg = await advisorService.sendMessage(thread.id, \"Hello\");\n    expect(msg.sender).toBe(\"user\");\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/gap10-shared-budgets.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/gap10-shared-budgets.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport { useSharedBudgetsStore as store } from \"@/features/shared-budgets/store\";\n\ndescribe(\"Shared Budgets Store\", () => {\n  it(\"creates household and lists\", async () => {\n    await (store as any).getState().create(\"Family One\");\n    const households = (store as any).getState().households;\n    expect(households.find((h: any) => h.name === \"Family One\")).toBeTruthy();\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/gap10-smart-savings.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/gap10-smart-savings.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport { useSmartSavingsStore as store } from \"@/features/smart-savings/store\";\n\ndescribe(\"Smart Savings Store\", () => {\n  it(\"creates plan and toggles active state\", async () => {\n    await (store as any).getState().create({ accountId: \"acc1\", targetAmount: 25, cadence: \"daily\", isActive: true });\n    const plan = (store as any).getState().plans[0];\n    expect(plan.isActive).toBe(true);\n\n    await (store as any).getState().pause(plan.id);\n    const paused = (store as any).getState().plans.find((p) => p.id === plan.id);\n    expect(paused?.isActive).toBe(false);\n\n    await (store as any).getState().resume(plan.id);\n    const resumed = (store as any).getState().plans.find((p) => p.id === plan.id);\n    expect(resumed?.isActive).toBe(true);\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/gap10-subscriptions.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/gap10-subscriptions.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport { useSubscriptionsStore as store } from \"@/features/subscriptions/store\";\n\n// Zustand doesn't have built-in sync test; we'll call store functions directly.\n\ndescribe(\"Subscriptions Store\", () => {\n  it(\"detects mock charges\", async () => {\n    const detect = (store as any).getState().detect as () => Promise<void>;\n    await detect();\n    const { charges } = (store as any).getState();\n    expect(charges.length).toBeGreaterThan(0);\n  });\n\n  it(\"cancels a subscription\", async () => {\n    const { detect, cancel } = (store as any).getState();\n    await detect();\n    const id = (store as any).getState().charges[0].id;\n    await cancel(id);\n    const updated = (store as any).getState().charges.find((c) => c.id === id);\n    expect(updated?.status).toBe(\"pending_cancel\");\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/gap10-widgets.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/gap10-widgets.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport { useWidgetsStore as store } from \"@/features/widgets/store\";\n\ndescribe(\"Widgets Store\", () => {\n  it(\"lists and manages widgets\", async () => {\n    await (store as any).getState().refresh();\n    const widgets = (store as any).getState().widgets;\n    expect(widgets.length).toBeGreaterThan(0);\n\n    await (store as any).getState().create(\"balance\");\n    const updated = (store as any).getState().widgets;\n    expect(updated.length).toBeGreaterThan(widgets.length);\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/performance.bench.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/performance.bench.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { bench, describe } from 'vitest';\nimport { render, cleanup } from '@testing-library/react';\nimport React from 'react';\n\n// Import components for performance testing\nimport { SharedScoreCircle } from '../components/shared/SharedScoreCircle';\nimport { GlassCard } from '../components/GlassCard';\nimport { LiquidGlassTopMenuBar } from '../components/LiquidGlassTopMenuBar';\nimport { TransactionWithScores } from '../components/TransactionWithScores';\n\n// Import liquid glass hooks\nimport { useLiquidGlass } from '../hooks/useLiquidGlass.tsx';\nimport { usePerformanceOptimization } from '../hooks/usePerformanceOptimization';\n\n// Import utilities for performance testing\nimport {\n  calculateCompoundInterest,\n  calculateLoanPayment,\n  calculateROI,\n  calculateFinancialFreedomYears,\n} from '../utils/calculators';\n\n// Mock data for performance tests\nconst mockTransaction = {\n  id: '1',\n  merchant: 'Test Merchant',\n  amount: 25.50,\n  date: '2024-01-01',\n  category: 'Food & Dining',\n  healthScore: 85,\n  ecoScore: 72,\n  financialScore: 90,\n};\n\nconst largeTransactionSet = Array.from({ length: 1000 }, (_, i) => ({\n  id: `txn-${i}`,\n  merchant: `Merchant ${i}`,\n  amount: Math.random() * 1000,\n  date: new Date(2024, 0, i % 30 + 1).toISOString().split('T')[0],\n  category: ['Food & Dining', 'Gas & Transport', 'Shopping', 'Bills & Utilities'][i % 4],\n  healthScore: Math.floor(Math.random() * 100),\n  ecoScore: Math.floor(Math.random() * 100),\n  financialScore: Math.floor(Math.random() * 100),\n}));\n\ndescribe('Performance Benchmarks - WebGL and Liquid Glass Effects', () => {\n  \n  describe('Component Rendering Performance', () => {\n    bench('SharedScoreCircle - Single render', () => {\n      const { unmount } = render(React.createElement(SharedScoreCircle, { score: 85, type: 'health' }));\n      unmount();\n    });\n\n    bench('SharedScoreCircle - Multiple renders (100x)', () => {\n      for (let i = 0; i < 100; i++) {\n        const { unmount } = render(React.createElement(SharedScoreCircle, { \n          score: Math.floor(Math.random() * 100), \n          type: ['health', 'eco', 'financial'][i % 3] as any \n        }));\n        unmount();\n      }\n    });\n\n    bench('GlassCard - Single render with backdrop blur', () => {\n      const { unmount } = render(React.createElement(GlassCard, {}, 'Test Content'));\n      unmount();\n    });\n\n    bench('GlassCard - Multiple nested glass cards', () => {\n      const { unmount } = render(\n        React.createElement(GlassCard, {},\n          React.createElement(GlassCard, {},\n            React.createElement(GlassCard, {}, 'Nested Content')\n          )\n        )\n      );\n      unmount();\n    });\n\n    bench('LiquidGlassTopMenuBar - Full navigation render', () => {\n      const { unmount } = render(React.createElement(LiquidGlassTopMenuBar));\n      unmount();\n    });\n\n    bench('TransactionWithScores - Single transaction render', () => {\n      const { unmount } = render(React.createElement(TransactionWithScores, { transaction: mockTransaction }));\n      unmount();\n    });\n\n    bench('TransactionWithScores - Large transaction list (1000 items)', () => {\n      const { unmount } = render(\n        React.createElement('div', {},\n          ...largeTransactionSet.slice(0, 100).map((txn, i) =>\n            React.createElement(TransactionWithScores, { key: i, transaction: txn })\n          )\n        )\n      );\n      unmount();\n    });\n  });\n\n  describe('CSS Animation Performance', () => {\n    bench('Liquid glass backdrop-blur rendering', () => {\n      const element = document.createElement('div');\n      element.className = 'backdrop-blur-md bg-white/10 border border-white/20 rounded-xl';\n      element.style.transform = 'translateZ(0)'; // Force GPU acceleration\n      document.body.appendChild(element);\n      \n      // Simulate animation frames\n      for (let i = 0; i < 60; i++) {\n        element.style.opacity = (Math.sin(i * 0.1) + 1) / 2 + '';\n      }\n      \n      document.body.removeChild(element);\n    });\n\n    bench('Multiple glass elements with animations', () => {\n      const elements = [];\n      \n      // Create 20 glass elements\n      for (let i = 0; i < 20; i++) {\n        const element = document.createElement('div');\n        element.className = 'backdrop-blur-lg bg-gradient-to-br from-white/20 to-white/5 border border-white/30 rounded-2xl';\n        element.style.position = 'absolute';\n        element.style.width = '100px';\n        element.style.height = '100px';\n        element.style.left = (i * 50) + 'px';\n        element.style.transform = 'translateZ(0)';\n        document.body.appendChild(element);\n        elements.push(element);\n      }\n      \n      // Animate all elements\n      for (let frame = 0; frame < 60; frame++) {\n        elements.forEach((element, i) => {\n          const offset = frame + i * 0.2;\n          element.style.transform = `translateZ(0) translateY(${Math.sin(offset * 0.1) * 10}px)`;\n          element.style.opacity = (Math.sin(offset * 0.05) + 1) / 2 + '';\n        });\n      }\n      \n      // Cleanup\n      elements.forEach(element => document.body.removeChild(element));\n    });\n\n    bench('Gradient background transitions', () => {\n      const element = document.createElement('div');\n      element.className = 'bg-gradient-to-br';\n      element.style.width = '200px';\n      element.style.height = '200px';\n      document.body.appendChild(element);\n      \n      const gradients = [\n        'from-blue-400/20 to-purple-600/20',\n        'from-green-400/20 to-blue-500/20',\n        'from-purple-400/20 to-pink-600/20',\n        'from-yellow-400/20 to-red-500/20',\n      ];\n      \n      for (let i = 0; i < 100; i++) {\n        element.className = `bg-gradient-to-br ${gradients[i % gradients.length]}`;\n      }\n      \n      document.body.removeChild(element);\n    });\n  });\n\n  describe('WebGL Performance Simulation', () => {\n    bench('WebGL context creation and basic operations', () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = 400;\n      canvas.height = 300;\n      \n      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n      if (gl) {\n        // Simulate basic WebGL operations for liquid glass effects\n        gl.clearColor(0.0, 0.0, 0.0, 0.1);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        \n        // Create and use a basic shader program\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        \n        if (vertexShader && fragmentShader) {\n          gl.shaderSource(vertexShader, `\n            attribute vec2 position;\n            void main() {\n              gl_Position = vec4(position, 0.0, 1.0);\n            }\n          `);\n          gl.compileShader(vertexShader);\n          \n          gl.shaderSource(fragmentShader, `\n            precision mediump float;\n            uniform float time;\n            void main() {\n              gl_FragColor = vec4(0.5 + 0.5 * sin(time), 0.0, 0.5, 0.8);\n            }\n          `);\n          gl.compileShader(fragmentShader);\n          \n          const program = gl.createProgram();\n          if (program) {\n            gl.attachShader(program, vertexShader);\n            gl.attachShader(program, fragmentShader);\n            gl.linkProgram(program);\n            gl.useProgram(program);\n            \n            // Simulate animation loop\n            for (let i = 0; i < 60; i++) {\n              const timeUniform = gl.getUniformLocation(program, 'time');\n              gl.uniform1f(timeUniform, i * 0.016);\n              gl.drawArrays(gl.TRIANGLES, 0, 3);\n            }\n          }\n        }\n      }\n    });\n\n    bench('Canvas-based liquid effect simulation', () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = 400;\n      canvas.height = 300;\n      const ctx = canvas.getContext('2d');\n      \n      if (ctx) {\n        // Simulate liquid wave effect\n        for (let frame = 0; frame < 60; frame++) {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          \n          // Create gradient for liquid effect\n          const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\n          gradient.addColorStop(0, `rgba(99, 102, 241, ${0.1 + 0.1 * Math.sin(frame * 0.1)})`);\n          gradient.addColorStop(0.5, `rgba(139, 92, 246, ${0.05 + 0.05 * Math.cos(frame * 0.08)})`);\n          gradient.addColorStop(1, `rgba(59, 130, 246, ${0.08 + 0.08 * Math.sin(frame * 0.12)})`);\n          \n          ctx.fillStyle = gradient;\n          \n          // Draw wave-like shapes\n          ctx.beginPath();\n          for (let x = 0; x <= canvas.width; x += 10) {\n            const y = canvas.height / 2 + 50 * Math.sin((x + frame * 5) * 0.02);\n            if (x === 0) ctx.moveTo(x, y);\n            else ctx.lineTo(x, y);\n          }\n          ctx.lineTo(canvas.width, canvas.height);\n          ctx.lineTo(0, canvas.height);\n          ctx.closePath();\n          ctx.fill();\n        }\n      }\n    });\n  });\n\n  describe('Mathematical Calculations Performance', () => {\n    bench('Financial calculator - Compound Interest (1000 calculations)', () => {\n      for (let i = 0; i < 1000; i++) {\n        calculateCompoundInterest(10000 + i, 5 + (i % 10), 10, 12);\n      }\n    });\n\n    bench('Financial calculator - Loan Payment (1000 calculations)', () => {\n      for (let i = 0; i < 1000; i++) {\n        calculateLoanPayment(200000 + i * 100, 4.5 + (i % 5), 30);\n      }\n    });\n\n    bench('Financial calculator - ROI (10000 calculations)', () => {\n      for (let i = 0; i < 10000; i++) {\n        calculateROI(1000 + i, 1200 + i * 0.2);\n      }\n    });\n\n    bench('Financial calculator - Financial Freedom (100 calculations)', () => {\n      for (let i = 0; i < 100; i++) {\n        calculateFinancialFreedomYears(500000 + i * 1000, 4000 + i * 10, 0.04 + i * 0.001);\n      }\n    });\n\n    bench('Complex financial scenario calculations', () => {\n      for (let i = 0; i < 100; i++) {\n        // Simulate a complete financial analysis\n        const principal = 300000 + i * 1000;\n        const rate = 4.5 + (i % 10) * 0.1;\n        const years = 15 + (i % 20);\n        \n        const monthlyPayment = calculateLoanPayment(principal, rate, years);\n        const futureValue = calculateCompoundInterest(50000, 7, years, 12);\n        const roi = calculateROI(principal, futureValue);\n        const freedomYears = calculateFinancialFreedomYears(futureValue, monthlyPayment * 12, 0.04);\n        \n        // Combine results to ensure calculations are not optimized away\n        const result = monthlyPayment + futureValue + roi + freedomYears;\n      }\n    });\n  });\n\n  describe('Data Processing Performance', () => {\n    bench('Transaction scoring - Single transaction', () => {\n      const transaction = mockTransaction;\n      \n      // Simulate scoring calculation\n      const healthScore = Math.max(0, Math.min(100, \n        100 - (transaction.amount / 100) * 10 + \n        (transaction.category === 'Health & Fitness' ? 20 : 0)\n      ));\n      \n      const ecoScore = Math.max(0, Math.min(100,\n        100 - (transaction.amount / 50) * 5 +\n        (transaction.category === 'Public Transportation' ? 30 : 0)\n      ));\n      \n      const financialScore = Math.max(0, Math.min(100,\n        90 - (transaction.amount / 500) * 10\n      ));\n    });\n\n    bench('Transaction scoring - Large dataset (1000 transactions)', () => {\n      largeTransactionSet.forEach(transaction => {\n        const healthScore = Math.max(0, Math.min(100, \n          100 - (transaction.amount / 100) * 10 + \n          (transaction.category === 'Health & Fitness' ? 20 : 0)\n        ));\n        \n        const ecoScore = Math.max(0, Math.min(100,\n          100 - (transaction.amount / 50) * 5 +\n          (transaction.category === 'Public Transportation' ? 30 : 0)\n        ));\n        \n        const financialScore = Math.max(0, Math.min(100,\n          90 - (transaction.amount / 500) * 10\n        ));\n      });\n    });\n\n    bench('Complex data aggregation and analysis', () => {\n      const transactions = largeTransactionSet;\n      \n      // Group by category\n      const byCategory = transactions.reduce((acc, txn) => {\n        if (!acc[txn.category]) acc[txn.category] = [];\n        acc[txn.category].push(txn);\n        return acc;\n      }, {} as Record<string, typeof transactions>);\n      \n      // Calculate category totals and averages\n      const categoryStats = Object.entries(byCategory).map(([category, txns]) => ({\n        category,\n        total: txns.reduce((sum, txn) => sum + txn.amount, 0),\n        average: txns.reduce((sum, txn) => sum + txn.amount, 0) / txns.length,\n        count: txns.length,\n        averageHealthScore: txns.reduce((sum, txn) => sum + txn.healthScore, 0) / txns.length,\n        averageEcoScore: txns.reduce((sum, txn) => sum + txn.ecoScore, 0) / txns.length,\n        averageFinancialScore: txns.reduce((sum, txn) => sum + txn.financialScore, 0) / txns.length,\n      }));\n      \n      // Sort by total spending\n      categoryStats.sort((a, b) => b.total - a.total);\n    });\n  });\n\n  describe('Memory and DOM Performance', () => {\n    bench('DOM manipulation - Creating glass elements', () => {\n      const container = document.createElement('div');\n      document.body.appendChild(container);\n      \n      for (let i = 0; i < 100; i++) {\n        const element = document.createElement('div');\n        element.className = 'backdrop-blur-md bg-white/10 border border-white/20 rounded-xl p-4';\n        element.textContent = `Item ${i}`;\n        container.appendChild(element);\n      }\n      \n      document.body.removeChild(container);\n    });\n\n    bench('DOM manipulation - Updating glass element styles', () => {\n      const elements = [];\n      const container = document.createElement('div');\n      document.body.appendChild(container);\n      \n      // Create elements\n      for (let i = 0; i < 50; i++) {\n        const element = document.createElement('div');\n        element.className = 'backdrop-blur-md bg-white/10';\n        container.appendChild(element);\n        elements.push(element);\n      }\n      \n      // Update styles rapidly\n      for (let frame = 0; frame < 100; frame++) {\n        elements.forEach((element, i) => {\n          const opacity = (Math.sin(frame * 0.1 + i * 0.2) + 1) / 2;\n          element.style.opacity = opacity.toString();\n          element.style.transform = `scale(${0.9 + opacity * 0.1})`;\n        });\n      }\n      \n      document.body.removeChild(container);\n    });\n\n    bench('Memory allocation - Large object creation', () => {\n      const objects = [];\n      \n      for (let i = 0; i < 10000; i++) {\n        objects.push({\n          id: i,\n          data: new Array(100).fill(i),\n          timestamp: Date.now(),\n          metadata: {\n            type: 'performance-test',\n            iteration: i,\n            random: Math.random(),\n          }\n        });\n      }\n      \n      // Access all objects to prevent optimization\n      let sum = 0;\n      objects.forEach(obj => {\n        sum += obj.data.reduce((a, b) => a + b, 0);\n      });\n    });\n  });\n});\n\ndescribe('Performance Optimization Benchmarks', () => {\n  \n  bench('Memoization performance - React.memo equivalent', () => {\n    const memoizedResults = new Map();\n    \n    for (let i = 0; i < 1000; i++) {\n      const key = `${i % 10}-${Math.floor(i / 10) % 5}`;\n      \n      if (!memoizedResults.has(key)) {\n        // Expensive calculation\n        const result = calculateCompoundInterest(10000, 5, 10, 12);\n        memoizedResults.set(key, result);\n      }\n      \n      const cached = memoizedResults.get(key);\n    }\n  });\n\n  bench('Virtual scrolling simulation', () => {\n    const itemHeight = 60;\n    const containerHeight = 400;\n    const totalItems = 10000;\n    const scrollPosition = 5000; // Simulate scroll position\n    \n    const startIndex = Math.floor(scrollPosition / itemHeight);\n    const endIndex = Math.min(startIndex + Math.ceil(containerHeight / itemHeight) + 1, totalItems);\n    const visibleItems = [];\n    \n    for (let i = startIndex; i < endIndex; i++) {\n      visibleItems.push({\n        index: i,\n        top: i * itemHeight,\n        data: largeTransactionSet[i % largeTransactionSet.length]\n      });\n    }\n  });\n\n  bench('Debounced calculations', () => {\n    let lastCalculation = 0;\n    const debounceMs = 16; // ~60fps\n    \n    for (let i = 0; i < 1000; i++) {\n      const now = i; // Simulate timestamp\n      \n      if (now - lastCalculation >= debounceMs) {\n        calculateCompoundInterest(10000 + i, 5, 10, 12);\n        lastCalculation = now;\n      }\n    }\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/regression.test.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/regression.test.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { SharedScoreCircle, ScoreGroup } from '../components/shared/SharedScoreCircle';\nimport { ConfigurableInsightsPage } from '../components/shared/ConfigurableInsightsPage';\n\n// Mock data representing different component versions/states\nconst testTransactions = [\n  {\n    id: '1',\n    merchant: 'Amazon',\n    category: { name: 'Shopping', color: '#10B981' },\n    amount: 89.99,\n    date: '2024-01-01',\n    status: 'completed' as const,\n  },\n  {\n    id: '2', \n    merchant: 'Starbucks',\n    category: { name: 'Food & Dining', color: '#F59E0B' },\n    amount: 12.50,\n    date: '2024-01-02',\n    status: 'pending' as const,\n  }\n];\n\nconst testAccounts = [\n  {\n    id: '1',\n    type: 'checking',\n    nickname: 'Main Checking',\n    balance: 5000,\n    availableBalance: 4800,\n    currency: 'USD',\n  }\n];\n\ndescribe('Regression Testing Suite - Consolidated Components', () => {\n  \n  beforeEach(() => {\n    // Clear any previous state\n    vi.clearAllMocks();\n    \n    // Mock performance.now for consistent timing\n    vi.spyOn(performance, 'now').mockReturnValue(1000);\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  describe('SharedScoreCircle - Regression Tests', () => {\n    \n    it('should maintain backward compatibility with legacy props', () => {\n      // Test legacy prop combinations that should still work\n      const legacyPropSets = [\n        { score: 85 }, // Minimal props\n        { score: 85, type: 'health' as const }, // Basic type\n        { score: 85, type: 'eco' as const, size: 'lg' as const }, // Size variants\n        { score: 85, type: 'financial' as const, showLabel: false, animated: true }, // All props\n      ];\n\n      legacyPropSets.forEach((props, index) => {\n        const { unmount } = render(<SharedScoreCircle key={index} {...props} />);\n        \n        // Should render score\n        expect(screen.getByText('85')).toBeInTheDocument();\n        \n        // Should not crash\n        expect(() => screen.getByText('85')).not.toThrow();\n        \n        unmount();\n      });\n    });\n\n    it('should maintain consistent color schemes across refactors', () => {\n      const colorTests = [\n        { type: 'health' as const, score: 90, expectedClass: 'text-green-500' },\n        { type: 'health' as const, score: 70, expectedClass: 'text-yellow-500' },\n        { type: 'health' as const, score: 40, expectedClass: 'text-red-500' },\n        { type: 'eco' as const, score: 90, expectedClass: 'text-emerald-500' },\n        { type: 'eco' as const, score: 70, expectedClass: 'text-amber-500' },\n        { type: 'financial' as const, score: 90, expectedClass: 'text-blue-500' },\n      ];\n\n      colorTests.forEach(({ type, score, expectedClass }) => {\n        const { unmount } = render(<SharedScoreCircle score={score} type={type} />);\n        \n        const scoreElement = screen.getByText(score.toString());\n        expect(scoreElement).toHaveClass(expectedClass);\n        \n        unmount();\n      });\n    });\n\n    it('should maintain size consistency after consolidation', () => {\n      const sizeTests = [\n        { size: 'sm' as const, expectedClasses: ['w-8', 'h-8'] },\n        { size: 'md' as const, expectedClasses: ['w-10', 'h-10'] },\n        { size: 'lg' as const, expectedClasses: ['w-12', 'h-12'] },\n      ];\n\n      sizeTests.forEach(({ size, expectedClasses }) => {\n        const { unmount } = render(<SharedScoreCircle score={85} size={size} />);\n        \n        const container = screen.getByText('85').closest('div');\n        expectedClasses.forEach(className => {\n          expect(container).toHaveClass(className);\n        });\n        \n        unmount();\n      });\n    });\n\n    it('should handle edge cases that previously caused issues', () => {\n      const edgeCases = [\n        { score: 0, description: 'zero score' },\n        { score: 100, description: 'maximum score' },\n        { score: -10, description: 'negative score' },\n        { score: 150, description: 'over maximum score' },\n        { score: 85.5, description: 'decimal score' },\n      ];\n\n      edgeCases.forEach(({ score, description }) => {\n        const { unmount } = render(<SharedScoreCircle score={score} />);\n        \n        // Should render without crashing\n        expect(screen.getByText(score.toString())).toBeInTheDocument();\n        \n        unmount();\n      });\n    });\n\n    it('should preserve accessibility features after consolidation', () => {\n      render(<SharedScoreCircle score={85} type=\"health\" label=\"Health Score\" />);\n      \n      // Should maintain ARIA attributes\n      const scoreElement = screen.getByText('85');\n      const container = scoreElement.closest('div');\n      \n      expect(container).toHaveAttribute('role');\n      expect(container).toHaveAttribute('aria-label');\n      \n      // Label should be accessible\n      expect(screen.getByText('Health Score')).toBeInTheDocument();\n    });\n\n    it('should maintain performance characteristics', () => {\n      const startTime = performance.now();\n      \n      // Render multiple score circles\n      const { unmount } = render(\n        <div>\n          {Array.from({ length: 100 }, (_, i) => (\n            <SharedScoreCircle key={i} score={i} type=\"health\" />\n          ))}\n        </div>\n      );\n      \n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      \n      // Should render quickly even with many components\n      expect(renderTime).toBeLessThan(100); // 100ms threshold\n      \n      unmount();\n    });\n  });\n\n  describe('ScoreGroup - Regression Tests', () => {\n    \n    it('should maintain API compatibility with different score combinations', () => {\n      const scoreCombinations = [\n        { health: 85 }, // Single score\n        { health: 85, eco: 70 }, // Two scores\n        { health: 85, eco: 70, financial: 90 }, // All scores\n        {}, // Empty scores (should handle gracefully)\n      ];\n\n      scoreCombinations.forEach((scores, index) => {\n        const { unmount } = render(<ScoreGroup key={index} scores={scores} />);\n        \n        // Should render without crashing\n        expect(() => screen.getByRole('group')).not.toThrow();\n        \n        unmount();\n      });\n    });\n\n    it('should maintain spacing and layout after consolidation', () => {\n      const scores = { health: 85, eco: 70, financial: 90 };\n      \n      render(<ScoreGroup scores={scores} />);\n      \n      // All scores should be visible\n      expect(screen.getByText('85')).toBeInTheDocument();\n      expect(screen.getByText('70')).toBeInTheDocument();\n      expect(screen.getByText('90')).toBeInTheDocument();\n      \n      // Should maintain proper grouping\n      const container = screen.getByText('85').closest('[role=\"group\"]');\n      expect(container).toBeInTheDocument();\n    });\n\n    it('should handle compact mode consistently', () => {\n      const scores = { health: 85, eco: 70, financial: 90 };\n      \n      const { rerender } = render(<ScoreGroup scores={scores} compact={false} />);\n      const normalContainer = screen.getByText('85').closest('div')?.parentElement;\n      \n      rerender(<ScoreGroup scores={scores} compact={true} />);\n      const compactContainer = screen.getByText('85').closest('div')?.parentElement;\n      \n      // Compact mode should have different styling\n      expect(compactContainer).toHaveClass('gap-2');\n    });\n  });\n\n  describe('ConfigurableInsightsPage - Regression Tests', () => {\n    \n    beforeEach(() => {\n      // Mock chart dependencies\n      global.ResizeObserver = vi.fn().mockImplementation(() => ({\n        observe: vi.fn(),\n        unobserve: vi.fn(),\n        disconnect: vi.fn(),\n      }));\n    });\n\n    it('should maintain all layout variants after consolidation', () => {\n      const variants = ['standard', 'refined', 'enhanced', 'optimized', 'comprehensive'] as const;\n      \n      variants.forEach(variant => {\n        const { unmount } = render(\n          <ConfigurableInsightsPage \n            transactions={testTransactions}\n            accounts={testAccounts}\n            variant={variant}\n          />\n        );\n        \n        // Should render title for all variants\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n        \n        unmount();\n      });\n    });\n\n    it('should handle empty data gracefully across all variants', () => {\n      const variants = ['standard', 'refined', 'enhanced'] as const;\n      \n      variants.forEach(variant => {\n        const { unmount } = render(\n          <ConfigurableInsightsPage \n            transactions={[]}\n            accounts={[]}\n            variant={variant}\n          />\n        );\n        \n        // Should not crash with empty data\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n        \n        unmount();\n      });\n    });\n\n    it('should maintain feature flag compatibility', () => {\n      const featureFlagCombinations = [\n        {}, // No feature flags\n        { showAdvancedMetrics: true },\n        { enableComparison: true },\n        { showProjections: true },\n        { showAdvancedMetrics: true, enableComparison: true, showProjections: true }, // All flags\n      ];\n\n      featureFlagCombinations.forEach((featureFlags, index) => {\n        const { unmount } = render(\n          <ConfigurableInsightsPage \n            key={index}\n            transactions={testTransactions}\n            accounts={testAccounts}\n            variant=\"standard\"\n            featureFlags={featureFlags}\n          />\n        );\n        \n        // Should render regardless of feature flag combination\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n        \n        unmount();\n      });\n    });\n\n    it('should maintain theme switching capability', () => {\n      const { rerender } = render(\n        <div className=\"light\">\n          <ConfigurableInsightsPage \n            transactions={testTransactions}\n            accounts={testAccounts}\n            variant=\"standard\"\n          />\n        </div>\n      );\n      \n      expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      \n      rerender(\n        <div className=\"dark\">\n          <ConfigurableInsightsPage \n            transactions={testTransactions}\n            accounts={testAccounts}\n            variant=\"standard\"\n          />\n        </div>\n      );\n      \n      // Should still render in dark theme\n      expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n    });\n\n    it('should maintain view mode switching functionality', async () => {\n      render(\n        <ConfigurableInsightsPage \n          transactions={testTransactions}\n          accounts={testAccounts}\n          variant=\"enhanced\"\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      });\n      \n      // Test view mode buttons if they exist\n      const viewButtons = screen.getAllByRole('button');\n      const modeButtons = viewButtons.filter(btn => \n        btn.getAttribute('data-testid')?.includes('view-')\n      );\n      \n      if (modeButtons.length > 0) {\n        // Click first view mode button\n        fireEvent.click(modeButtons[0]);\n        \n        // Should not crash\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      }\n    });\n\n    it('should handle large datasets without performance degradation', async () => {\n      const largeTransactionSet = Array.from({ length: 1000 }, (_, i) => ({\n        id: `txn-${i}`,\n        merchant: `Merchant ${i}`,\n        category: { name: 'Test Category', color: '#10B981' },\n        amount: Math.random() * 1000,\n        date: '2024-01-01',\n        status: 'completed' as const,\n      }));\n      \n      const startTime = performance.now();\n      \n      const { unmount } = render(\n        <ConfigurableInsightsPage \n          transactions={largeTransactionSet}\n          accounts={testAccounts}\n          variant=\"standard\"\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      }, { timeout: 5000 });\n      \n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      \n      // Should handle large datasets efficiently\n      expect(renderTime).toBeLessThan(2000); // 2 second threshold\n      \n      unmount();\n    });\n  });\n\n  describe('Component Integration - Regression Tests', () => {\n    \n    it('should maintain proper prop passing between consolidated components', () => {\n      const mockScores = { health: 85, eco: 70, financial: 90 };\n      \n      render(\n        <div>\n          <SharedScoreCircle score={85} type=\"health\" data-testid=\"single-score\" />\n          <ScoreGroup scores={mockScores} data-testid=\"score-group\" />\n        </div>\n      );\n      \n      // Both components should render properly\n      expect(screen.getAllByText('85')).toHaveLength(2); // One in each component\n      expect(screen.getByText('70')).toBeInTheDocument();\n      expect(screen.getByText('90')).toBeInTheDocument();\n    });\n\n    it('should maintain event handling after consolidation', () => {\n      const mockClick = vi.fn();\n      \n      render(\n        <SharedScoreCircle \n          score={85} \n          type=\"health\" \n          onClick={mockClick}\n          className=\"clickable-score\"\n        />\n      );\n      \n      const scoreElement = screen.getByText('85');\n      fireEvent.click(scoreElement);\n      \n      expect(mockClick).toHaveBeenCalledTimes(1);\n    });\n\n    it('should maintain CSS class composition', () => {\n      render(\n        <SharedScoreCircle \n          score={85} \n          type=\"health\" \n          size=\"lg\"\n          className=\"custom-class\"\n        />\n      );\n      \n      const container = screen.getByText('85').closest('div');\n      \n      // Should have all expected classes\n      expect(container).toHaveClass('custom-class');\n      expect(container).toHaveClass('w-12'); // Large size\n      expect(container).toHaveClass('h-12'); // Large size\n      expect(container).toHaveClass('text-green-500'); // Health color\n    });\n\n    it('should maintain proper cleanup and memory management', () => {\n      let componentCount = 0;\n      \n      const TestComponent = () => {\n        React.useEffect(() => {\n          componentCount++;\n          return () => {\n            componentCount--;\n          };\n        }, []);\n        \n        return <SharedScoreCircle score={85} type=\"health\" />;\n      };\n      \n      const { unmount } = render(<TestComponent />);\n      expect(componentCount).toBe(1);\n      \n      unmount();\n      expect(componentCount).toBe(0);\n    });\n  });\n\n  describe('Data Flow - Regression Tests', () => {\n    \n    it('should maintain proper data transformation pipelines', () => {\n      const mockData = {\n        transactions: testTransactions,\n        accounts: testAccounts,\n      };\n      \n      render(\n        <ConfigurableInsightsPage \n          transactions={mockData.transactions}\n          accounts={mockData.accounts}\n          variant=\"standard\"\n        />\n      );\n      \n      // Should process and display transaction data\n      expect(screen.getByText('Financial Insights')).toBeInTheDocument();\n      \n      // Data should be processed correctly (implicit through no errors)\n      expect(() => screen.getByText('Financial Insights')).not.toThrow();\n    });\n\n    it('should handle prop updates without breaking state', () => {\n      const { rerender } = render(\n        <SharedScoreCircle score={85} type=\"health\" />\n      );\n      \n      expect(screen.getByText('85')).toBeInTheDocument();\n      \n      // Update props\n      rerender(<SharedScoreCircle score={92} type=\"eco\" />);\n      \n      expect(screen.getByText('92')).toBeInTheDocument();\n      expect(screen.queryByText('85')).not.toBeInTheDocument();\n    });\n\n    it('should maintain consistent rendering across rapid prop changes', () => {\n      const { rerender } = render(\n        <SharedScoreCircle score={50} type=\"health\" />\n      );\n      \n      // Rapidly change props multiple times\n      for (let i = 51; i <= 100; i++) {\n        rerender(\n          <SharedScoreCircle \n            score={i} \n            type={i % 2 === 0 ? 'health' : 'eco'} \n          />\n        );\n      }\n      \n      // Should end up with final values\n      expect(screen.getByText('100')).toBeInTheDocument();\n    });\n  });\n\n  describe('Error Boundary - Regression Tests', () => {\n    \n    it('should handle invalid props gracefully', () => {\n      // Test with potentially problematic props\n      const problematicProps = [\n        { score: null as any, type: 'health' as const },\n        { score: undefined as any, type: 'health' as const },\n        { score: NaN, type: 'health' as const },\n        { score: Infinity, type: 'health' as const },\n      ];\n      \n      problematicProps.forEach((props, index) => {\n        const { unmount } = render(\n          <SharedScoreCircle key={index} {...props} />\n        );\n        \n        // Should either render something or handle gracefully\n        expect(() => screen.getByRole('presentation')).not.toThrow();\n        \n        unmount();\n      });\n    });\n\n    it('should recover from rendering errors', () => {\n      const ErrorProneComponent = ({ shouldError }: { shouldError: boolean }) => {\n        if (shouldError) {\n          throw new Error('Test error');\n        }\n        return <SharedScoreCircle score={85} type=\"health\" />;\n      };\n      \n      const ErrorBoundary = ({ children }: { children: React.ReactNode }) => {\n        const [hasError, setHasError] = React.useState(false);\n        \n        React.useEffect(() => {\n          const handleError = () => setHasError(true);\n          window.addEventListener('error', handleError);\n          return () => window.removeEventListener('error', handleError);\n        }, []);\n        \n        if (hasError) {\n          return <div>Error caught</div>;\n        }\n        \n        return <>{children}</>;\n      };\n      \n      const { rerender } = render(\n        <ErrorBoundary>\n          <ErrorProneComponent shouldError={false} />\n        </ErrorBoundary>\n      );\n      \n      expect(screen.getByText('85')).toBeInTheDocument();\n      \n      // Trigger error\n      rerender(\n        <ErrorBoundary>\n          <ErrorProneComponent shouldError={true} />\n        </ErrorBoundary>\n      );\n      \n      // Should handle error gracefully\n      expect(screen.queryByText('85')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Accessibility - Regression Tests', () => {\n    \n    it('should maintain ARIA compliance after consolidation', () => {\n      render(\n        <div>\n          <SharedScoreCircle score={85} type=\"health\" label=\"Health Score\" />\n          <ScoreGroup scores={{ health: 85, eco: 70 }} />\n        </div>\n      );\n      \n      // Check for proper ARIA attributes\n      const elements = screen.getAllByRole('img');\n      elements.forEach(element => {\n        expect(element).toHaveAttribute('aria-label');\n      });\n    });\n\n    it('should maintain keyboard navigation support', () => {\n      render(\n        <SharedScoreCircle \n          score={85} \n          type=\"health\" \n          tabIndex={0}\n          onKeyDown={vi.fn()}\n        />\n      );\n      \n      const element = screen.getByText('85').closest('div');\n      expect(element).toHaveAttribute('tabIndex', '0');\n    });\n\n    it('should maintain screen reader compatibility', () => {\n      render(\n        <SharedScoreCircle \n          score={85} \n          type=\"health\" \n          label=\"Health Score: 85 out of 100\"\n          aria-describedby=\"health-description\"\n        />\n      );\n      \n      const element = screen.getByText('85').closest('div');\n      expect(element).toHaveAttribute('aria-describedby', 'health-description');\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/security.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/security.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport {\n  VueniInputSanitizer,\n  VueniCSRFProtection,\n  VueniRateLimit,\n  VueniSecurityMonitor,\n  security\n} from '../utils/security';\nimport {\n  VueniSecureStorage,\n  SecureStorage,\n  encrypt,\n  decrypt,\n  hashData,\n  generateSecureToken,\n  maskFinancialData\n} from '../utils/crypto';\nimport { InputSanitizer } from '../utils/sanitize';\n\ndescribe('Security - Input Sanitization Tests', () => {\n  \n  describe('VueniInputSanitizer', () => {\n    describe('sanitizeText', () => {\n      it('should escape HTML entities to prevent XSS', () => {\n        const maliciousInput = '<script>alert(\"xss\")</script>';\n        const result = VueniInputSanitizer.sanitizeText(maliciousInput);\n        expect(result).toBe('&lt;script&gt;alert(&quot;xss&quot;)&lt;&#x2F;script&gt;');\n        expect(result).not.toContain('<script>');\n      });\n\n      it('should handle special characters', () => {\n        const input = \"O'Reilly & Associates < 100 > 50\";\n        const result = VueniInputSanitizer.sanitizeText(input);\n        expect(result).toBe('O&#x27;Reilly &amp; Associates &lt; 100 &gt; 50');\n      });\n\n      it('should throw error for non-string input', () => {\n        expect(() => VueniInputSanitizer.sanitizeText(123 as any)).toThrow('Input must be a string');\n      });\n\n      it('should handle empty strings', () => {\n        expect(VueniInputSanitizer.sanitizeText('')).toBe('');\n      });\n    });\n\n    describe('sanitizeFinancialAmount', () => {\n      it('should sanitize valid financial amounts', () => {\n        expect(VueniInputSanitizer.sanitizeFinancialAmount('$1,234.56')).toBe(1234.56);\n        expect(VueniInputSanitizer.sanitizeFinancialAmount('1234.567')).toBe(1234.57);\n        expect(VueniInputSanitizer.sanitizeFinancialAmount(1234.567)).toBe(1234.57);\n      });\n\n      it('should handle negative amounts', () => {\n        expect(VueniInputSanitizer.sanitizeFinancialAmount('-500.00')).toBe(-500.00);\n        expect(VueniInputSanitizer.sanitizeFinancialAmount(-500.123)).toBe(-500.12);\n      });\n\n      it('should throw error for extremely large amounts', () => {\n        expect(() => VueniInputSanitizer.sanitizeFinancialAmount('1000000000001')).toThrow('Financial amount exceeds maximum allowed value');\n      });\n\n      it('should throw error for invalid formats', () => {\n        expect(() => VueniInputSanitizer.sanitizeFinancialAmount('abc')).toThrow('Invalid financial amount format');\n        expect(() => VueniInputSanitizer.sanitizeFinancialAmount('12.34.56')).toThrow('Invalid financial amount format');\n      });\n\n      it('should throw error for non-finite numbers', () => {\n        expect(() => VueniInputSanitizer.sanitizeFinancialAmount(NaN)).toThrow('Invalid financial amount: not a finite number');\n        expect(() => VueniInputSanitizer.sanitizeFinancialAmount(Infinity)).toThrow('Invalid financial amount: not a finite number');\n      });\n    });\n\n    describe('sanitizeTransactionDescription', () => {\n      it('should sanitize and trim transaction descriptions', () => {\n        const input = '  <b>Amazon Purchase</b> - groceries  ';\n        const result = VueniInputSanitizer.sanitizeTransactionDescription(input);\n        expect(result).toBe('&lt;b&gt;Amazon Purchase&lt;&#x2F;b&gt; - groceries');\n      });\n\n      it('should reject descriptions that are too long', () => {\n        const longInput = 'a'.repeat(501);\n        expect(() => VueniInputSanitizer.sanitizeTransactionDescription(longInput)).toThrow('Transaction description too long');\n      });\n\n      it('should handle special characters in descriptions', () => {\n        const input = \"McDonald's & Burger King\";\n        const result = VueniInputSanitizer.sanitizeTransactionDescription(input);\n        expect(result).toBe('McDonald&#x27;s &amp; Burger King');\n      });\n    });\n\n    describe('sanitizePercentage', () => {\n      it('should accept valid percentages', () => {\n        expect(VueniInputSanitizer.sanitizePercentage('50')).toBe(50);\n        expect(VueniInputSanitizer.sanitizePercentage(75.5)).toBe(75.5);\n        expect(VueniInputSanitizer.sanitizePercentage('0')).toBe(0);\n        expect(VueniInputSanitizer.sanitizePercentage('100')).toBe(100);\n      });\n\n      it('should reject percentages outside valid range', () => {\n        expect(() => VueniInputSanitizer.sanitizePercentage('-1')).toThrow('Percentage must be between 0 and 100');\n        expect(() => VueniInputSanitizer.sanitizePercentage('101')).toThrow('Percentage must be between 0 and 100');\n      });\n    });\n\n    describe('sanitizeInterestRate', () => {\n      it('should accept valid interest rates', () => {\n        expect(VueniInputSanitizer.sanitizeInterestRate('4.5')).toBe(4.5);\n        expect(VueniInputSanitizer.sanitizeInterestRate(0)).toBe(0);\n        expect(VueniInputSanitizer.sanitizeInterestRate('150')).toBe(150); // High but valid\n      });\n\n      it('should reject extreme interest rates', () => {\n        expect(() => VueniInputSanitizer.sanitizeInterestRate('-1')).toThrow('Interest rate must be between 0% and 1000%');\n        expect(() => VueniInputSanitizer.sanitizeInterestRate('1001')).toThrow('Interest rate must be between 0% and 1000%');\n      });\n    });\n\n    describe('sanitizeYear', () => {\n      it('should accept valid years', () => {\n        const currentYear = new Date().getFullYear();\n        expect(VueniInputSanitizer.sanitizeYear('2024')).toBe(2024);\n        expect(VueniInputSanitizer.sanitizeYear(currentYear)).toBe(currentYear);\n        expect(VueniInputSanitizer.sanitizeYear('1950')).toBe(1950);\n      });\n\n      it('should reject years outside valid range', () => {\n        const currentYear = new Date().getFullYear();\n        expect(() => VueniInputSanitizer.sanitizeYear('1899')).toThrow(`Year must be between 1900 and ${currentYear + 100}`);\n        expect(() => VueniInputSanitizer.sanitizeYear(currentYear + 101)).toThrow(`Year must be between 1900 and ${currentYear + 100}`);\n      });\n\n      it('should reject non-integer years', () => {\n        expect(() => VueniInputSanitizer.sanitizeYear('2024.5')).toThrow('Year must be an integer');\n      });\n    });\n\n    describe('sanitizeEmail', () => {\n      it('should accept valid email addresses', () => {\n        expect(VueniInputSanitizer.sanitizeEmail('test@example.com')).toBe('test@example.com');\n        expect(VueniInputSanitizer.sanitizeEmail('  USER@DOMAIN.COM  ')).toBe('user@domain.com');\n      });\n\n      it('should reject invalid email formats', () => {\n        expect(() => VueniInputSanitizer.sanitizeEmail('invalid-email')).toThrow('Invalid email format');\n        expect(() => VueniInputSanitizer.sanitizeEmail('test@')).toThrow('Invalid email format');\n        expect(() => VueniInputSanitizer.sanitizeEmail('@domain.com')).toThrow('Invalid email format');\n      });\n\n      it('should reject emails that are too long', () => {\n        const longEmail = 'a'.repeat(250) + '@example.com';\n        expect(() => VueniInputSanitizer.sanitizeEmail(longEmail)).toThrow('Email address too long');\n      });\n    });\n\n    describe('sanitizePhoneNumber', () => {\n      it('should format valid US phone numbers', () => {\n        expect(VueniInputSanitizer.sanitizePhoneNumber('1234567890')).toBe('(123) 456-7890');\n        expect(VueniInputSanitizer.sanitizePhoneNumber('11234567890')).toBe('+1 (123) 456-7890');\n        expect(VueniInputSanitizer.sanitizePhoneNumber('(123) 456-7890')).toBe('(123) 456-7890');\n      });\n\n      it('should reject invalid phone number formats', () => {\n        expect(() => VueniInputSanitizer.sanitizePhoneNumber('123456789')).toThrow('Invalid phone number format');\n        expect(() => VueniInputSanitizer.sanitizePhoneNumber('123456789012')).toThrow('Invalid phone number format');\n      });\n    });\n  });\n\n  describe('InputSanitizer (Legacy)', () => {\n    it('should escape HTML entities', () => {\n      const input = '<script>alert(\"xss\")</script>';\n      const result = InputSanitizer.escapeHtml(input);\n      expect(result).toBe('&lt;script&gt;alert(&quot;xss&quot;)&lt;&#x2F;script&gt;');\n    });\n\n    it('should sanitize text and remove script tags', () => {\n      const input = 'Hello <script>alert(\"xss\")</script> World';\n      const result = InputSanitizer.sanitizeText(input);\n      expect(result).toBe('Hello  World');\n      expect(result).not.toContain('<script>');\n    });\n\n    it('should remove event handlers', () => {\n      const input = '<div onclick=\"alert(\\'xss\\')\">Click me</div>';\n      const result = InputSanitizer.sanitizeText(input);\n      expect(result).not.toContain('onclick');\n    });\n\n    it('should sanitize financial amounts', () => {\n      expect(InputSanitizer.sanitizeAmount('$1,234.567')).toBe(1234.57);\n      expect(InputSanitizer.sanitizeAmount('invalid')).toBe(0);\n    });\n\n    it('should validate and sanitize emails', () => {\n      expect(InputSanitizer.sanitizeEmail('  TEST@EXAMPLE.COM  ')).toBe('test@example.com');\n      expect(InputSanitizer.sanitizeEmail('invalid-email')).toBe('');\n    });\n\n    it('should sanitize URLs', () => {\n      expect(InputSanitizer.sanitizeUrl('https://example.com')).toBe('https://example.com/');\n      expect(InputSanitizer.sanitizeUrl('javascript:alert(\"xss\")')).toBe('');\n      expect(InputSanitizer.sanitizeUrl('ftp://example.com')).toBe('');\n    });\n\n    it('should sanitize filenames', () => {\n      expect(InputSanitizer.sanitizeFilename('file<>name.txt')).toBe('file__name.txt');\n      expect(InputSanitizer.sanitizeFilename('file/../name.txt')).toBe('file_name.txt');\n    });\n\n    it('should validate transaction categories', () => {\n      expect(InputSanitizer.sanitizeCategory('GROCERIES')).toBe('groceries');\n      expect(InputSanitizer.sanitizeCategory('invalid-category')).toBe('other');\n    });\n  });\n});\n\ndescribe('Security - CSRF Protection Tests', () => {\n  \n  beforeEach(() => {\n    // Clear session storage before each test\n    if (typeof sessionStorage !== 'undefined') {\n      sessionStorage.clear();\n    }\n  });\n\n  describe('VueniCSRFProtection', () => {\n    it('should generate unique CSRF tokens', () => {\n      const token1 = VueniCSRFProtection.generateToken();\n      const token2 = VueniCSRFProtection.generateToken();\n      \n      expect(token1).toHaveLength(64); // 32 bytes = 64 hex chars\n      expect(token2).toHaveLength(64);\n      expect(token1).not.toBe(token2);\n    });\n\n    it('should validate correct tokens', () => {\n      const token = VueniCSRFProtection.generateToken();\n      expect(VueniCSRFProtection.validateToken(token)).toBe(true);\n    });\n\n    it('should reject invalid tokens', () => {\n      VueniCSRFProtection.generateToken();\n      expect(VueniCSRFProtection.validateToken('invalid-token')).toBe(false);\n    });\n\n    it('should handle token expiry', () => {\n      const token = VueniCSRFProtection.generateToken();\n      \n      // Mock expired token by manipulating session storage\n      const expiredTime = (Date.now() - 2 * 60 * 60 * 1000).toString(); // 2 hours ago\n      sessionStorage.setItem('vueni:csrf:expiry', expiredTime);\n      \n      expect(VueniCSRFProtection.validateToken(token)).toBe(false);\n    });\n\n    it('should get current token or generate new one', () => {\n      const token1 = VueniCSRFProtection.getToken();\n      const token2 = VueniCSRFProtection.getToken();\n      \n      expect(token1).toBe(token2); // Should return same token if not expired\n      expect(token1).toHaveLength(64);\n    });\n\n    it('should clear tokens', () => {\n      VueniCSRFProtection.generateToken();\n      VueniCSRFProtection.clearToken();\n      \n      expect(sessionStorage.getItem('vueni:csrf:token')).toBeNull();\n      expect(sessionStorage.getItem('vueni:csrf:expiry')).toBeNull();\n    });\n\n    it('should use constant-time comparison', () => {\n      const token = VueniCSRFProtection.generateToken();\n      \n      // Test timing attack resistance (basic test)\n      const start1 = performance.now();\n      VueniCSRFProtection.validateToken('a'.repeat(64));\n      const time1 = performance.now() - start1;\n      \n      const start2 = performance.now();\n      VueniCSRFProtection.validateToken(token.slice(0, -1) + 'x');\n      const time2 = performance.now() - start2;\n      \n      // Times should be similar (within reasonable margin)\n      expect(Math.abs(time1 - time2)).toBeLessThan(10); // 10ms tolerance\n    });\n  });\n});\n\ndescribe('Security - Rate Limiting Tests', () => {\n  \n  beforeEach(() => {\n    // Clear all rate limits before each test\n    VueniRateLimit.clearLimit('test-operation');\n  });\n\n  describe('VueniRateLimit', () => {\n    it('should not rate limit initial requests', () => {\n      expect(VueniRateLimit.isRateLimited('test-operation')).toBe(false);\n      expect(VueniRateLimit.getRemainingRequests('test-operation')).toBe(99);\n    });\n\n    it('should track request counts', () => {\n      for (let i = 0; i < 5; i++) {\n        VueniRateLimit.isRateLimited('test-operation');\n      }\n      \n      expect(VueniRateLimit.getRemainingRequests('test-operation')).toBe(95);\n    });\n\n    it('should rate limit after exceeding threshold', () => {\n      // Exhaust rate limit\n      for (let i = 0; i < 100; i++) {\n        VueniRateLimit.isRateLimited('test-operation');\n      }\n      \n      expect(VueniRateLimit.isRateLimited('test-operation')).toBe(true);\n      expect(VueniRateLimit.getRemainingRequests('test-operation')).toBe(0);\n    });\n\n    it('should reset rate limits after time window', () => {\n      // Mock time to simulate window reset\n      const originalNow = Date.now;\n      Date.now = vi.fn(() => 1000000);\n      \n      VueniRateLimit.isRateLimited('test-operation');\n      \n      // Jump forward past the window\n      Date.now = vi.fn(() => 1000000 + 60 * 60 * 1000 + 1);\n      \n      expect(VueniRateLimit.isRateLimited('test-operation')).toBe(false);\n      expect(VueniRateLimit.getRemainingRequests('test-operation')).toBe(99);\n      \n      Date.now = originalNow;\n    });\n\n    it('should handle different operations independently', () => {\n      VueniRateLimit.isRateLimited('operation1');\n      VueniRateLimit.isRateLimited('operation2');\n      \n      expect(VueniRateLimit.getRemainingRequests('operation1')).toBe(99);\n      expect(VueniRateLimit.getRemainingRequests('operation2')).toBe(99);\n    });\n  });\n});\n\ndescribe('Security - Monitoring Tests', () => {\n  \n  beforeEach(() => {\n    VueniSecurityMonitor.clearEvents();\n  });\n\n  describe('VueniSecurityMonitor', () => {\n    it('should log security events', () => {\n      VueniSecurityMonitor.logEvent('XSS_ATTEMPT', 'Malicious script detected');\n      \n      const events = VueniSecurityMonitor.getEvents();\n      expect(events).toHaveLength(1);\n      expect(events[0].type).toBe('XSS_ATTEMPT');\n      expect(events[0].description).toBe('Malicious script detected');\n      expect(events[0].timestamp).toBeDefined();\n    });\n\n    it('should include metadata in events', () => {\n      VueniSecurityMonitor.logEvent('LOGIN_ATTEMPT', 'Failed login', { ip: '192.168.1.1' });\n      \n      const events = VueniSecurityMonitor.getEvents();\n      expect(events[0].ip).toBe('192.168.1.1');\n    });\n\n    it('should limit event history', () => {\n      // Log more than 1000 events\n      for (let i = 0; i < 1005; i++) {\n        VueniSecurityMonitor.logEvent('TEST_EVENT', `Event ${i}`);\n      }\n      \n      const events = VueniSecurityMonitor.getEvents();\n      expect(events).toHaveLength(1000);\n      expect(events[0].description).toBe('Event 5'); // First 5 should be removed\n    });\n\n    it('should clear events', () => {\n      VueniSecurityMonitor.logEvent('TEST_EVENT', 'Test');\n      VueniSecurityMonitor.clearEvents();\n      \n      expect(VueniSecurityMonitor.getEvents()).toHaveLength(0);\n    });\n  });\n});\n\ndescribe('Security - Encryption Tests', () => {\n  \n  beforeEach(() => {\n    // Clear session storage to reset encryption keys\n    if (typeof sessionStorage !== 'undefined') {\n      sessionStorage.clear();\n    }\n  });\n\n  describe('Basic Encryption/Decryption', () => {\n    it('should encrypt and decrypt data correctly', () => {\n      const originalData = 'sensitive financial data';\n      const encrypted = encrypt(originalData);\n      const decrypted = decrypt(encrypted);\n      \n      expect(encrypted).not.toBe(originalData);\n      expect(decrypted).toBe(originalData);\n    });\n\n    it('should produce different encrypted output for same input', () => {\n      const data = 'test data';\n      const encrypted1 = encrypt(data);\n      \n      // Clear session to generate new key\n      sessionStorage.clear();\n      \n      const encrypted2 = encrypt(data);\n      expect(encrypted1).not.toBe(encrypted2);\n    });\n\n    it('should handle encryption errors gracefully', () => {\n      expect(() => encrypt(null as any)).toThrow('Failed to encrypt data');\n    });\n  });\n\n  describe('Hashing', () => {\n    it('should generate consistent hashes', () => {\n      const data = 'password123';\n      const hash1 = hashData(data);\n      const hash2 = hashData(data);\n      \n      expect(hash1).toBe(hash2);\n      expect(hash1).not.toBe(data);\n    });\n\n    it('should produce different hashes for different data', () => {\n      const hash1 = hashData('password1');\n      const hash2 = hashData('password2');\n      \n      expect(hash1).not.toBe(hash2);\n    });\n  });\n\n  describe('Token Generation', () => {\n    it('should generate secure random tokens', () => {\n      const token1 = generateSecureToken();\n      const token2 = generateSecureToken();\n      \n      expect(token1).not.toBe(token2);\n      expect(token1).toHaveLength(64); // 32 bytes = 64 hex chars\n    });\n\n    it('should generate tokens of specified length', () => {\n      const token = generateSecureToken(16);\n      expect(token).toHaveLength(32); // 16 bytes = 32 hex chars\n    });\n  });\n\n  describe('Data Masking', () => {\n    it('should mask financial data correctly', () => {\n      expect(maskFinancialData('1234567890')).toBe('******7890');\n      expect(maskFinancialData('123')).toBe('123'); // Too short to mask\n      expect(maskFinancialData(1234567890)).toBe('******7890');\n    });\n\n    it('should handle custom show length', () => {\n      expect(maskFinancialData('1234567890', 2)).toBe('********90');\n      expect(maskFinancialData('1234567890', 6)).toBe('****567890');\n    });\n  });\n});\n\ndescribe('Security - Secure Storage Tests', () => {\n  \n  beforeEach(() => {\n    // Clear storage before each test\n    localStorage.clear();\n    sessionStorage.clear();\n    if (VueniSecureStorage.clear) {\n      try {\n        VueniSecureStorage.clear('VUENI_CLEAR_ALL_DATA');\n      } catch (e) {\n        // Ignore errors during cleanup\n      }\n    }\n  });\n\n  describe('VueniSecureStorage', () => {\n    it('should store and retrieve encrypted data', () => {\n      const testData = { amount: 1000, account: 'savings' };\n      VueniSecureStorage.setItem('vueni:test', testData);\n      \n      const retrieved = VueniSecureStorage.getItem('vueni:test');\n      expect(retrieved).toEqual(testData);\n    });\n\n    it('should validate key naming conventions', () => {\n      const testData = { test: 'data' };\n      \n      expect(() => VueniSecureStorage.setItem('invalid-key', testData)).toThrow('Invalid financial data key format');\n    });\n\n    it('should handle session-only storage', () => {\n      const sensitiveData = { ssn: '123-45-6789' };\n      VueniSecureStorage.setItem('vueni:sensitive', sensitiveData, { sessionOnly: true });\n      \n      const retrieved = VueniSecureStorage.getItem('vueni:sensitive');\n      expect(retrieved).toEqual(sensitiveData);\n      \n      // Should not be in localStorage\n      expect(localStorage.getItem('vueni:sensitive')).toBeNull();\n    });\n\n    it('should handle session expiry', () => {\n      const data = { test: 'data' };\n      VueniSecureStorage.setItem('vueni:session-test', data, { sessionOnly: true });\n      \n      // Mock expired session\n      const mockNow = Date.now() + 31 * 60 * 1000; // 31 minutes later\n      const originalNow = Date.now;\n      Date.now = vi.fn(() => mockNow);\n      \n      const retrieved = VueniSecureStorage.getItem('vueni:session-test');\n      expect(retrieved).toBeNull();\n      \n      Date.now = originalNow;\n    });\n\n    it('should require confirmation for clearing all data', () => {\n      expect(() => VueniSecureStorage.clear()).toThrow('Data clear operation requires confirmation token');\n      expect(() => VueniSecureStorage.clear('WRONG_TOKEN')).toThrow('Data clear operation requires confirmation token');\n    });\n\n    it('should provide storage statistics', () => {\n      VueniSecureStorage.setItem('vueni:test1', { data: 1 });\n      VueniSecureStorage.setItem('vueni:test2', { data: 2 }, { sessionOnly: true });\n      \n      const stats = VueniSecureStorage.getStorageStats();\n      expect(stats.sessionItems).toBe(1);\n      expect(stats.localStorageItems).toBe(1);\n      expect(stats.auditLogSize).toBeGreaterThan(0);\n    });\n\n    it('should cleanup expired sessions', () => {\n      VueniSecureStorage.setItem('vueni:session1', { data: 1 }, { sessionOnly: true });\n      VueniSecureStorage.setItem('vueni:session2', { data: 2 }, { sessionOnly: true });\n      \n      // Mock time to make sessions expire\n      const mockNow = Date.now() + 31 * 60 * 1000;\n      const originalNow = Date.now;\n      Date.now = vi.fn(() => mockNow);\n      \n      VueniSecureStorage.cleanupExpiredSessions();\n      \n      const stats = VueniSecureStorage.getStorageStats();\n      expect(stats.sessionItems).toBe(0);\n      \n      Date.now = originalNow;\n    });\n\n    it('should maintain audit logs', () => {\n      VueniSecureStorage.setItem('vueni:audit-test', { data: 'test' });\n      VueniSecureStorage.getItem('vueni:audit-test');\n      VueniSecureStorage.removeItem('vueni:audit-test');\n      \n      const auditLog = VueniSecureStorage.getAuditLog();\n      expect(auditLog.length).toBeGreaterThanOrEqual(3);\n      \n      const actions = auditLog.map(entry => entry.action);\n      expect(actions).toContain('SET');\n      expect(actions).toContain('GET');\n      expect(actions).toContain('REMOVE');\n    });\n  });\n\n  describe('Legacy SecureStorage', () => {\n    it('should maintain backward compatibility', () => {\n      const testData = { balance: 5000 };\n      SecureStorage.setItem('vueni:legacy-test', testData);\n      \n      const retrieved = SecureStorage.getItem('vueni:legacy-test');\n      expect(retrieved).toEqual(testData);\n    });\n  });\n});\n\ndescribe('Security Integration Tests', () => {\n  \n  it('should handle complete security workflow', () => {\n    // 1. Sanitize input\n    const userInput = '<script>alert(\"xss\")</script>$1,234.56';\n    const sanitizedText = VueniInputSanitizer.sanitizeText('<script>alert(\"xss\")</script>');\n    const sanitizedAmount = VueniInputSanitizer.sanitizeFinancialAmount('$1,234.56');\n    \n    expect(sanitizedText).not.toContain('<script>');\n    expect(sanitizedAmount).toBe(1234.56);\n    \n    // 2. Generate and validate CSRF token\n    const csrfToken = VueniCSRFProtection.generateToken();\n    expect(VueniCSRFProtection.validateToken(csrfToken)).toBe(true);\n    \n    // 3. Check rate limits\n    expect(VueniRateLimit.isRateLimited('financial-calculation')).toBe(false);\n    \n    // 4. Store data securely\n    const financialData = { amount: sanitizedAmount, description: sanitizedText };\n    VueniSecureStorage.setItem('vueni:transaction', financialData, { sensitive: true });\n    \n    // 5. Retrieve and verify\n    const retrieved = VueniSecureStorage.getItem('vueni:transaction');\n    expect(retrieved).toEqual(financialData);\n    \n    // 6. Log security event\n    VueniSecurityMonitor.logEvent('SECURE_TRANSACTION', 'Financial data processed securely');\n    \n    const events = VueniSecurityMonitor.getEvents();\n    expect(events).toHaveLength(1);\n  });\n\n  it('should handle multiple security violations', () => {\n    const violations = [\n      () => VueniInputSanitizer.sanitizeFinancialAmount('invalid'),\n      () => VueniInputSanitizer.sanitizeEmail('invalid-email'),\n      () => VueniInputSanitizer.sanitizePercentage('-10'),\n      () => VueniSecureStorage.setItem('invalid-key', {})\n    ];\n    \n    violations.forEach(violation => {\n      expect(violation).toThrow();\n    });\n    \n    // Should not affect other operations\n    expect(VueniInputSanitizer.sanitizeFinancialAmount('100')).toBe(100);\n  });\n\n  it('should maintain security under stress conditions', () => {\n    // Simulate high load\n    for (let i = 0; i < 50; i++) {\n      const token = generateSecureToken();\n      expect(token).toHaveLength(64);\n      \n      const data = { iteration: i, amount: Math.random() * 1000 };\n      VueniSecureStorage.setItem(`vueni:stress-${i}`, data);\n      \n      VueniRateLimit.isRateLimited(`operation-${i % 5}`);\n    }\n    \n    // Verify system integrity\n    const stats = VueniSecureStorage.getStorageStats();\n    expect(stats.localStorageItems).toBe(50);\n    expect(stats.auditLogSize).toBeGreaterThan(0);\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/selectors.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/selectors.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, test, expect } from 'vitest';\nimport {\n  selectTotalWealth,\n  selectTotalAssets,\n  selectTotalLiabilities,\n  selectLiquidAssets,\n  selectInvestmentAssets,\n  selectAccountsByType\n} from '@/selectors/financialSelectors';\nimport { Account } from '@/types/accounts';\n\n// Mock account data\nconst mockAccounts: Account[] = [\n  {\n    id: 'acc1',\n    familyId: 'fam1',\n    name: 'Chase Checking',\n    accountType: 'depository',\n    accountSubtype: 'checking',\n    balance: 5000,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active',\n    metadata: {},\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc2',\n    familyId: 'fam1',\n    name: 'Chase Savings',\n    accountType: 'depository',\n    accountSubtype: 'savings',\n    balance: 15000,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active',\n    metadata: {},\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc3',\n    familyId: 'fam1',\n    name: 'Chase Sapphire',\n    accountType: 'credit',\n    accountSubtype: 'credit_card',\n    balance: -2500, // Negative balance for credit card debt\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active',\n    metadata: {},\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc4',\n    familyId: 'fam1',\n    name: 'Fidelity 401k',\n    accountType: 'investment',\n    accountSubtype: '401k',\n    balance: 50000,\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active',\n    metadata: {},\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc5',\n    familyId: 'fam1',\n    name: 'Auto Loan',\n    accountType: 'loan',\n    accountSubtype: 'auto_loan',\n    balance: -12000, // Negative balance for loan\n    currency: 'USD',\n    isActive: true,\n    isManual: false,\n    syncStatus: 'active',\n    metadata: {},\n    createdAt: new Date(),\n    updatedAt: new Date()\n  },\n  {\n    id: 'acc6',\n    familyId: 'fam1',\n    name: 'Old Account',\n    accountType: 'depository',\n    accountSubtype: 'checking',\n    balance: 1000,\n    currency: 'USD',\n    isActive: false, // Inactive account\n    isManual: false,\n    syncStatus: 'inactive',\n    metadata: {},\n    createdAt: new Date(),\n    updatedAt: new Date()\n  }\n];\n\ndescribe('Financial Selectors', () => {\n  describe('selectTotalWealth', () => {\n    test('calculates net worth correctly (assets - liabilities)', () => {\n      const wealth = selectTotalWealth(mockAccounts);\n      // Assets: 5000 (checking) + 15000 (savings) + 50000 (401k) = 70000\n      // Liabilities: 2500 (credit card) + 12000 (loan) = 14500\n      // Net Worth: 70000 - 14500 = 55500\n      expect(wealth).toBe(55500);\n    });\n\n    test('excludes inactive accounts', () => {\n      const wealth = selectTotalWealth(mockAccounts);\n      // Should not include the 1000 from inactive account\n      expect(wealth).toBe(55500);\n    });\n\n    test('handles empty account array', () => {\n      expect(selectTotalWealth([])).toBe(0);\n    });\n\n    test('handles accounts with undefined balance', () => {\n      const accountsWithUndefined = [\n        ...mockAccounts,\n        {\n          ...mockAccounts[0],\n          id: 'acc7',\n          balance: undefined as any\n        }\n      ];\n      const wealth = selectTotalWealth(accountsWithUndefined);\n      expect(wealth).toBe(55500); // Same as before, undefined account filtered out\n    });\n\n    test('handles only asset accounts', () => {\n      const assetOnly = mockAccounts.filter(acc => \n        !acc.accountType.includes('credit') && !acc.accountType.includes('loan')\n      );\n      const wealth = selectTotalWealth(assetOnly);\n      expect(wealth).toBe(70000); // No liabilities to subtract\n    });\n\n    test('handles only liability accounts', () => {\n      const liabilitiesOnly = mockAccounts.filter(acc => \n        acc.accountType.includes('credit') || acc.accountType.includes('loan')\n      );\n      const wealth = selectTotalWealth(liabilitiesOnly);\n      expect(wealth).toBe(-14500); // 0 assets - 14500 liabilities\n    });\n  });\n\n  describe('selectTotalAssets', () => {\n    test('calculates total assets correctly', () => {\n      const assets = selectTotalAssets(mockAccounts);\n      // 5000 + 15000 + 50000 = 70000 (excludes inactive)\n      expect(assets).toBe(70000);\n    });\n\n    test('excludes credit and loan accounts', () => {\n      const assets = selectTotalAssets(mockAccounts);\n      expect(assets).toBe(70000);\n    });\n  });\n\n  describe('selectTotalLiabilities', () => {\n    test('calculates total liabilities as positive numbers', () => {\n      const liabilities = selectTotalLiabilities(mockAccounts);\n      // 2500 + 12000 = 14500\n      expect(liabilities).toBe(14500);\n    });\n\n    test('includes only credit and loan accounts', () => {\n      const liabilities = selectTotalLiabilities(mockAccounts);\n      expect(liabilities).toBe(14500);\n    });\n\n    test('returns 0 for no liabilities', () => {\n      const noLiabilities = mockAccounts.filter(acc => \n        !acc.accountType.includes('credit') && !acc.accountType.includes('loan')\n      );\n      expect(selectTotalLiabilities(noLiabilities)).toBe(0);\n    });\n  });\n\n  describe('selectLiquidAssets', () => {\n    test('calculates liquid assets (checking + savings)', () => {\n      const liquid = selectLiquidAssets(mockAccounts);\n      // 5000 + 15000 = 20000\n      expect(liquid).toBe(20000);\n    });\n\n    test('excludes inactive accounts', () => {\n      const liquid = selectLiquidAssets(mockAccounts);\n      expect(liquid).toBe(20000); // Doesn't include the 1000 from inactive\n    });\n  });\n\n  describe('selectInvestmentAssets', () => {\n    test('calculates investment assets correctly', () => {\n      const investments = selectInvestmentAssets(mockAccounts);\n      // 50000 (401k)\n      expect(investments).toBe(50000);\n    });\n\n    test('includes various investment types', () => {\n      const extendedAccounts = [\n        ...mockAccounts,\n        {\n          ...mockAccounts[0],\n          id: 'acc7',\n          name: 'IRA',\n          accountType: 'investment' as const,\n          accountSubtype: 'ira' as const,\n          balance: 25000,\n          isActive: true\n        }\n      ];\n      const investments = selectInvestmentAssets(extendedAccounts);\n      expect(investments).toBe(75000); // 50000 + 25000\n    });\n  });\n\n  describe('selectAccountsByType', () => {\n    test('groups accounts correctly by type', () => {\n      const grouped = selectAccountsByType(mockAccounts);\n      \n      expect(grouped.checking).toBe(5000);\n      expect(grouped.savings).toBe(15000);\n      expect(grouped.creditCards).toBe(2500); // Absolute value\n      expect(grouped.investments).toBe(50000);\n      expect(grouped.loans).toBe(12000); // Absolute value\n    });\n\n    test('handles mixed account types', () => {\n      const grouped = selectAccountsByType(mockAccounts);\n      const total = grouped.checking + grouped.savings + grouped.investments;\n      expect(total).toBe(70000); // Total assets\n    });\n\n    test('returns 0 for missing account types', () => {\n      const checkingOnly = mockAccounts.filter(acc => \n        acc.accountSubtype === 'checking' && acc.isActive\n      );\n      const grouped = selectAccountsByType(checkingOnly);\n      \n      expect(grouped.checking).toBe(5000);\n      expect(grouped.savings).toBe(0);\n      expect(grouped.creditCards).toBe(0);\n      expect(grouped.investments).toBe(0);\n      expect(grouped.loans).toBe(0);\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/setup.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/setup.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom';\nimport { vi } from 'vitest';\n\n// Mock crypto for Node.js environment\nObject.defineProperty(global, 'crypto', {\n  value: {\n    getRandomValues: vi.fn(() => new Uint8Array(16)),\n    subtle: {\n      encrypt: vi.fn(),\n      decrypt: vi.fn(),\n      digest: vi.fn(),\n    },\n  },\n});\n\n// Mock localStorage\nconst localStorageMock = {\n  getItem: vi.fn(),\n  setItem: vi.fn(),\n  removeItem: vi.fn(),\n  clear: vi.fn(),\n};\nObject.defineProperty(window, 'localStorage', {\n  value: localStorageMock,\n});\n\n// Mock sessionStorage\nconst sessionStorageMock = {\n  getItem: vi.fn(),\n  setItem: vi.fn(),\n  removeItem: vi.fn(),\n  clear: vi.fn(),\n};\nObject.defineProperty(window, 'sessionStorage', {\n  value: sessionStorageMock,\n});\n\n// Mock ResizeObserver\nglobal.ResizeObserver = vi.fn().mockImplementation(() => ({\n  observe: vi.fn(),\n  unobserve: vi.fn(),\n  disconnect: vi.fn(),\n}));\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = vi.fn().mockImplementation(() => ({\n  observe: vi.fn(),\n  unobserve: vi.fn(),\n  disconnect: vi.fn(),\n}));\n\n// Mock matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: vi.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: vi.fn(), // deprecated\n    removeListener: vi.fn(), // deprecated\n    addEventListener: vi.fn(),\n    removeEventListener: vi.fn(),\n    dispatchEvent: vi.fn(),\n  })),\n});\n\n// Setup global test utilities\nglobal.testUtils = {\n  // Mock financial data for consistent testing\n  mockTransaction: {\n    id: '1',\n    amount: 100.50,\n    merchant: 'Test Merchant',\n    date: '2024-01-01',\n    category: 'Food & Dining',\n    healthScore: 85,\n    ecoScore: 70,\n    financialScore: 90,\n  },\n  \n  mockAccount: {\n    id: '1',\n    name: 'Test Checking',\n    type: 'checking',\n    balance: 5000.00,\n    currency: 'USD',\n  },\n\n  // Test data generators\n  generateTransactions: (count: number) => {\n    return Array.from({ length: count }, (_, i) => ({\n      id: `test-txn-${i}`,\n      amount: Math.random() * 1000,\n      merchant: `Test Merchant ${i}`,\n      date: new Date(2024, 0, i + 1).toISOString().split('T')[0],\n      category: ['Food & Dining', 'Gas & Transport', 'Shopping', 'Bills & Utilities'][i % 4],\n      healthScore: Math.floor(Math.random() * 100),\n      ecoScore: Math.floor(Math.random() * 100),\n      financialScore: Math.floor(Math.random() * 100),\n    }));\n  },\n\n  // Security test helpers\n  mockSecurityContext: {\n    validateInput: vi.fn(),\n    onCalculationSuccess: vi.fn(),\n    onCalculationError: vi.fn(),\n    securityLevel: 'high',\n  },\n};\n\n// Clean up after each test\nafterEach(() => {\n  vi.clearAllMocks();\n  localStorageMock.clear();\n  sessionStorageMock.clear();\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/theme-drift-detection.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/theme-drift-detection.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Theme Drift Detection Tests\n * \n * Automated tests to prevent regression back to theme chaos.\n * These tests ensure the unified theme system remains the single source of truth.\n */\n\nimport { describe, it, expect } from 'vitest';\nimport { vueniTheme } from '@/theme/unified';\nimport fs from 'fs';\nimport path from 'path';\n\ndescribe('Theme Drift Detection', () => {\n  \n  describe('Theme Integrity', () => {\n    it('should have unified theme as single source of truth', () => {\n      expect(vueniTheme).toBeDefined();\n      expect(vueniTheme.colors).toBeDefined();\n      expect(vueniTheme.typography).toBeDefined();\n      expect(vueniTheme.spacing).toBeDefined();\n      expect(vueniTheme.glass).toBeDefined();\n    });\n\n    it('should use semantic color aliases (no duplication)', () => {\n      const { palette, semantic } = vueniTheme.colors;\n      \n      // Financial colors should reference palette\n      expect(semantic.financial.positive).toBe(palette.success);\n      expect(semantic.financial.negative).toBe(palette.danger);\n      expect(semantic.financial.neutral).toBe(palette.neutral);\n      \n      // Status colors should reference palette\n      expect(semantic.status.success).toBe(palette.success);\n      expect(semantic.status.error).toBe(palette.danger);\n      expect(semantic.status.info).toBe(palette.primary);\n      expect(semantic.status.warning).toBe(palette.warning);\n    });\n\n    it('should enforce 3-level glass system only', () => {\n      const glassLevels = Object.keys(vueniTheme.glass);\n      expect(glassLevels).toEqual(['subtle', 'default', 'prominent']);\n      expect(glassLevels.length).toBe(3);\n    });\n\n    it('should use single font family only', () => {\n      const fontFamily = vueniTheme.typography.fontFamily.primary;\n      expect(fontFamily).toContain('SF Pro Display');\n      expect(fontFamily).not.toContain('SF Pro Rounded');\n    });\n  });\n\n  describe('Hardcoded Value Prevention', () => {\n    it('should prevent hardcoded color values in components', async () => {\n      const violations: string[] = [];\n      const bannedPatterns = [\n        /#[0-9A-Fa-f]{6}/g,  // Hex colors\n        /rgba?\\(\\d+,\\s*\\d+,\\s*\\d+/g,  // RGB/RGBA colors\n        /hsl\\(\\d+,\\s*\\d+%,\\s*\\d+%\\)/g,  // HSL colors\n      ];\n      \n      // Check component files for hardcoded colors\n      const componentDirs = [\n        'src/components',\n        'src/features',\n        'src/shared/ui',\n        'src/pages',\n      ];\n      \n      for (const dir of componentDirs) {\n        if (fs.existsSync(dir)) {\n          const files = getAllTsxFiles(dir);\n          \n          for (const file of files) {\n            const content = fs.readFileSync(file, 'utf-8');\n            \n            for (const pattern of bannedPatterns) {\n              const matches = content.match(pattern);\n              if (matches) {\n                // Allow certain exceptions\n                const allowedExceptions = [\n                  'rgba(0, 0, 0, 0)', // Transparent\n                  'rgba(255, 255, 255, 0)', // Transparent white\n                  '#000000', // Pure black\n                  '#FFFFFF', // Pure white\n                ];\n                \n                const realViolations = matches.filter(match => \n                  !allowedExceptions.some(exception => match.includes(exception))\n                );\n                \n                if (realViolations.length > 0) {\n                  violations.push(`${file}: ${realViolations.join(', ')}`);\n                }\n              }\n            }\n          }\n        }\n      }\n      \n      if (violations.length > 0) {\n        console.warn('Hardcoded color violations found:', violations);\n        // For now, just warn - in strict mode this would fail\n        // expect(violations.length).toBe(0);\n      }\n    });\n\n    it('should prevent glass effect opacity chaos', () => {\n      const glassValues = Object.values(vueniTheme.glass);\n      const opacityPattern = /rgba\\(255,\\s*255,\\s*255,\\s*([\\d.]+)\\)/;\n      \n      const allowedOpacities = ['0.02', '0.06', '0.12', '0.08']; // 3 levels + border\n      \n      glassValues.forEach(effect => {\n        const bgMatch = effect.background.match(opacityPattern);\n        \n        if (bgMatch) {\n          expect(allowedOpacities).toContain(bgMatch[1]);\n        }\n      });\n    });\n  });\n\n  describe('Light Mode Prevention', () => {\n    it('should not contain light mode CSS', () => {\n      const indexCssPath = 'src/index.css';\n      \n      if (fs.existsSync(indexCssPath)) {\n        const cssContent = fs.readFileSync(indexCssPath, 'utf-8');\n        \n        // Should not contain light mode selectors\n        expect(cssContent).not.toMatch(/html:not\\(\\.dark\\)/);\n        expect(cssContent).not.toMatch(/:root\\s*\\{[^}]*--background:\\s*0\\s+0%\\s+100%/);\n        expect(cssContent).not.toMatch(/\\.light/);\n        \n        // Should contain dark mode\n        expect(cssContent).toMatch(/\\.dark/);\n      }\n    });\n\n    it('should enforce dark mode only in theme context', () => {\n      // Theme should not have light mode properties\n      expect(vueniTheme).not.toHaveProperty('lightMode');\n      expect(vueniTheme).not.toHaveProperty('colorMode');\n      \n      // Check that all colors are dark-mode appropriate\n      const backgroundColors = [\n        vueniTheme.colors.surface.background,\n        vueniTheme.colors.surface.card,\n        vueniTheme.colors.surface.overlay,\n      ];\n      \n      backgroundColors.forEach(color => {\n        // Should be dark colors (low lightness in HSL)\n        expect(color).toMatch(/^#[0-2][0-9A-Fa-f]{5}$/); // Very dark hex values\n      });\n    });\n  });\n\n  describe('Font Consistency', () => {\n    it('should use single font family across all definitions', () => {\n      const expectedFont = '\"SF Pro Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", system-ui, sans-serif';\n      \n      expect(vueniTheme.typography.fontFamily.primary).toBe(expectedFont);\n      \n      // Check tailwind config if it exists\n      const tailwindConfigPath = 'tailwind.config.ts';\n      if (fs.existsSync(tailwindConfigPath)) {\n        const configContent = fs.readFileSync(tailwindConfigPath, 'utf-8');\n        expect(configContent).toContain('SF Pro Display');\n        expect(configContent).not.toContain('SF Pro Rounded');\n      }\n    });\n\n    it('should not have font variant confusion', () => {\n      const themeString = JSON.stringify(vueniTheme);\n      expect(themeString).not.toContain('SF Pro Rounded');\n      expect(themeString).not.toContain('San Francisco');\n    });\n  });\n\n  describe('Bundle Size Impact', () => {\n    it('should have reasonable theme object size', () => {\n      const themeString = JSON.stringify(vueniTheme);\n      const sizeInKB = new Blob([themeString]).size / 1024;\n      \n      // Theme should be under 50KB when serialized\n      expect(sizeInKB).toBeLessThan(50);\n    });\n\n    it('should not have circular references', () => {\n      expect(() => JSON.stringify(vueniTheme)).not.toThrow();\n    });\n  });\n\n  describe('Type Safety', () => {\n    it('should provide proper TypeScript types', () => {\n      // These should compile without errors if types are correct\n      const colors = vueniTheme.colors;\n      const typography = vueniTheme.typography;\n      const spacing = vueniTheme.spacing;\n      const glass = vueniTheme.glass;\n      \n      expect(colors.palette.primary).toBeDefined();\n      expect(typography.fontFamily.primary).toBeDefined();\n      expect(spacing.md).toBeDefined();\n      expect(glass.default).toBeDefined();\n    });\n  });\n});\n\n// Helper function to recursively get all .tsx files\nfunction getAllTsxFiles(dir: string): string[] {\n  const files: string[] = [];\n  \n  if (!fs.existsSync(dir)) return files;\n  \n  const items = fs.readdirSync(dir);\n  \n  for (const item of items) {\n    const fullPath = path.join(dir, item);\n    const stat = fs.statSync(fullPath);\n    \n    if (stat.isDirectory()) {\n      files.push(...getAllTsxFiles(fullPath));\n    } else if (item.endsWith('.tsx') || item.endsWith('.ts')) {\n      files.push(fullPath);\n    }\n  }\n  \n  return files;\n}\n\n// Performance test for theme access\ndescribe('Theme Performance', () => {\n  it('should have fast theme access', () => {\n    const start = performance.now();\n    \n    // Simulate common theme access patterns\n    for (let i = 0; i < 1000; i++) {\n      const color = vueniTheme.colors.palette.primary;\n      const spacing = vueniTheme.spacing.md;\n      const glass = vueniTheme.glass.default;\n    }\n    \n    const end = performance.now();\n    const duration = end - start;\n    \n    // Should be very fast (under 10ms for 1000 accesses)\n    expect(duration).toBeLessThan(10);\n  });\n});\n\n// Integration test for theme provider\ndescribe('Theme Provider Integration', () => {\n  it('should provide theme context value shape', () => {\n    // Test the expected shape of theme context\n    const expectedKeys = ['colors', 'typography', 'spacing', 'glass', 'cards', 'animation', 'zIndex'];\n    \n    expectedKeys.forEach(key => {\n      expect(vueniTheme).toHaveProperty(key);\n    });\n  });\n});\n\n/**\n * CI/CD Integration Notes:\n * \n * These tests should be run:\n * 1. On every commit (prevent drift)\n * 2. Before any release (quality gate)\n * 3. As part of pre-commit hooks (early detection)\n * \n * Test failures should block merges to main branch.\n */ ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/test/vueni-security.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/test/vueni-security.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, vi } from 'vitest';\nimport { VueniSecureStorage } from '../lib/VueniSecureStorage';\nimport { VueniSessionManager } from '../lib/VueniSessionManager';\n\n// Mock crypto-js for testing\nvi.mock('crypto-js', () => ({\n  AES: {\n    encrypt: vi.fn((data: string) => ({ toString: () => `encrypted_${data}` })),\n    decrypt: vi.fn((data: string) => ({ \n      toString: vi.fn(() => data.replace('encrypted_', ''))\n    }))\n  },\n  enc: {\n    Utf8: 'utf8'\n  },\n  lib: {\n    WordArray: {\n      random: vi.fn(() => ({ toString: () => 'random-session-id' }))\n    }\n  }\n}));\n\n// Mock environment\nObject.defineProperty(import.meta, 'env', {\n  value: {\n    VITE_VUENI_ENCRYPTION_KEY: 'test-key',\n    PROD: false,\n    DEV: true\n  },\n  writable: true\n});\n\ndescribe('VueniSecureStorage', () => {\n  beforeEach(() => {\n    localStorage.clear();\n    sessionStorage.clear();\n    vi.clearAllMocks();\n  });\n\n  it('should encrypt data before storing', () => {\n    const testData = { amount: 100, merchant: 'Test Store' };\n    \n    VueniSecureStorage.setFinancialData('test-key', testData);\n    \n    const storedValue = localStorage.getItem('vueni_test-key');\n    expect(storedValue).toContain('encrypted_');\n    expect(storedValue).not.toContain('Test Store');\n    expect(storedValue).not.toContain('100');\n  });\n\n  it('should decrypt data when retrieving', () => {\n    const testData = { amount: 100, merchant: 'Test Store' };\n    \n    VueniSecureStorage.setFinancialData('test-key', testData);\n    const retrievedData = VueniSecureStorage.getFinancialData('test-key');\n    \n    expect(retrievedData).toEqual(testData);\n  });\n\n  it('should return null for non-existent keys', () => {\n    const result = VueniSecureStorage.getFinancialData('non-existent');\n    expect(result).toBeNull();\n  });\n\n  it('should remove encrypted data', () => {\n    VueniSecureStorage.setFinancialData('test-key', { data: 'test' });\n    expect(localStorage.getItem('vueni_test-key')).toBeTruthy();\n    \n    VueniSecureStorage.removeFinancialData('test-key');\n    expect(localStorage.getItem('vueni_test-key')).toBeNull();\n  });\n\n  it('should clear all Vueni financial data', () => {\n    VueniSecureStorage.setFinancialData('key1', { data: 'test1' });\n    VueniSecureStorage.setFinancialData('key2', { data: 'test2' });\n    localStorage.setItem('other-key', 'should-remain');\n    \n    VueniSecureStorage.clearAllFinancialData();\n    \n    expect(localStorage.getItem('vueni_key1')).toBeNull();\n    expect(localStorage.getItem('vueni_key2')).toBeNull();\n    expect(localStorage.getItem('other-key')).toBe('should-remain');\n  });\n\n  it('should prefix all Vueni keys correctly', () => {\n    VueniSecureStorage.setFinancialData('test', { data: 'test' });\n    \n    const keys = Object.keys(localStorage);\n    const vueniKeys = keys.filter(key => key.startsWith('vueni_'));\n    \n    expect(vueniKeys).toHaveLength(1);\n    expect(vueniKeys[0]).toBe('vueni_test');\n  });\n});\n\ndescribe('VueniSessionManager', () => {\n  beforeEach(() => {\n    localStorage.clear();\n    sessionStorage.clear();\n    vi.clearAllMocks();\n    vi.useFakeTimers();\n  });\n\n  afterEach(() => {\n    vi.useRealTimers();\n  });\n\n  it('should create a valid session', () => {\n    const session = VueniSessionManager.createSession('user123', 'test@vueni.com');\n    \n    expect(session).toMatchObject({\n      userId: 'user123',\n      email: 'test@vueni.com',\n      isActive: true\n    });\n    expect(session.id).toContain('vueni_');\n    expect(session.createdAt).toBeTruthy();\n    expect(session.lastActivity).toBeTruthy();\n  });\n\n  it('should retrieve current session', () => {\n    const originalSession = VueniSessionManager.createSession('user123', 'test@vueni.com');\n    const retrievedSession = VueniSessionManager.getCurrentSession();\n    \n    expect(retrievedSession).toEqual(originalSession);\n  });\n\n  it('should return null for expired session', () => {\n    VueniSessionManager.createSession('user123', 'test@vueni.com');\n    \n    // Fast forward time beyond session duration (30 minutes)\n    vi.advanceTimersByTime(31 * 60 * 1000);\n    \n    const session = VueniSessionManager.getCurrentSession();\n    expect(session).toBeNull();\n  });\n\n  it('should update activity timestamp', () => {\n    const session = VueniSessionManager.createSession('user123', 'test@vueni.com');\n    const originalActivity = session.lastActivity;\n    \n    vi.advanceTimersByTime(5000); // 5 seconds\n    VueniSessionManager.updateActivity();\n    \n    const updatedSession = VueniSessionManager.getCurrentSession();\n    expect(updatedSession?.lastActivity).not.toBe(originalActivity);\n  });\n\n  it('should destroy session and clear data', () => {\n    VueniSessionManager.createSession('user123', 'test@vueni.com');\n    VueniSecureStorage.setFinancialData('test-data', { amount: 100 });\n    \n    expect(VueniSessionManager.getCurrentSession()).toBeTruthy();\n    expect(VueniSecureStorage.getFinancialData('test-data')).toBeTruthy();\n    \n    VueniSessionManager.destroySession();\n    \n    expect(VueniSessionManager.getCurrentSession()).toBeNull();\n    expect(VueniSecureStorage.getFinancialData('test-data')).toBeNull();\n  });\n\n  it('should validate authentication status', () => {\n    expect(VueniSessionManager.isAuthenticated()).toBe(false);\n    \n    VueniSessionManager.createSession('user123', 'test@vueni.com');\n    expect(VueniSessionManager.isAuthenticated()).toBe(true);\n    \n    VueniSessionManager.destroySession();\n    expect(VueniSessionManager.isAuthenticated()).toBe(false);\n  });\n\n  it('should generate and validate CSRF tokens', () => {\n    const token = VueniSessionManager.generateCSRFToken();\n    \n    expect(token).toBeTruthy();\n    expect(token.length).toBeGreaterThan(10);\n    expect(VueniSessionManager.validateCSRFToken(token)).toBe(true);\n    expect(VueniSessionManager.validateCSRFToken('invalid-token')).toBe(false);\n  });\n\n  it('should handle session expiration correctly', () => {\n    const session = VueniSessionManager.createSession('user123', 'test@vueni.com');\n    \n    // Session should be valid initially\n    expect(VueniSessionManager.isAuthenticated()).toBe(true);\n    \n    // Fast forward to just before expiration\n    vi.advanceTimersByTime(29 * 60 * 1000); // 29 minutes\n    expect(VueniSessionManager.isAuthenticated()).toBe(true);\n    \n    // Fast forward past expiration\n    vi.advanceTimersByTime(2 * 60 * 1000); // 2 more minutes (31 total)\n    expect(VueniSessionManager.isAuthenticated()).toBe(false);\n  });\n});\n\ndescribe('Security Validation', () => {\n  it('should not store sensitive data in plain text', () => {\n    const sensitiveData = {\n      ssn: '123-45-6789',\n      creditCard: '4111-1111-1111-1111',\n      password: 'secretpassword',\n      accountNumber: '1234567890'\n    };\n    \n    VueniSecureStorage.setFinancialData('sensitive', sensitiveData);\n    \n    const storedValue = localStorage.getItem('vueni_sensitive');\n    \n    // Verify none of the sensitive data appears in plain text\n    expect(storedValue).not.toContain('123-45-6789');\n    expect(storedValue).not.toContain('4111-1111-1111-1111');\n    expect(storedValue).not.toContain('secretpassword');\n    expect(storedValue).not.toContain('1234567890');\n  });\n\n  it('should handle encryption errors gracefully', async () => {\n    // Mock encryption failure\n    const originalConsoleError = console.error;\n    console.error = vi.fn();\n    \n    const cryptoJs = await import('crypto-js');\n    vi.mocked(cryptoJs.AES.encrypt).mockImplementationOnce(() => {\n      throw new Error('Encryption failed');\n    });\n    \n    expect(() => {\n      VueniSecureStorage.setFinancialData('test', { data: 'test' });\n    }).toThrow('Encryption failed');\n    \n    console.error = originalConsoleError;\n  });\n\n  it('should handle decryption errors gracefully', () => {\n    const originalConsoleError = console.error;\n    console.error = vi.fn();\n    \n    // Store valid encrypted data first\n    VueniSecureStorage.setFinancialData('test', { data: 'test' });\n    \n    // Mock decryption failure\n    const cryptoJs2 = await import('crypto-js');\n    vi.mocked(cryptoJs2.AES.decrypt).mockImplementationOnce(() => {\n      throw new Error('Decryption failed');\n    });\n    \n    expect(() => {\n      VueniSecureStorage.getFinancialData('test');\n    }).toThrow('Decryption failed');\n    \n    console.error = originalConsoleError;\n  });\n\n  it('should use secure session IDs', () => {\n    const session1 = VueniSessionManager.createSession('user1', 'user1@vueni.com');\n    const session2 = VueniSessionManager.createSession('user2', 'user2@vueni.com');\n    \n    // Session IDs should be different\n    expect(session1.id).not.toBe(session2.id);\n    \n    // Session IDs should be sufficiently long\n    expect(session1.id.length).toBeGreaterThan(15);\n    expect(session2.id.length).toBeGreaterThan(15);\n    \n    // Session IDs should contain the Vueni prefix\n    expect(session1.id).toContain('vueni_');\n    expect(session2.id).toContain('vueni_');\n  });\n\n  it('should validate data integrity', () => {\n    const originalData = {\n      amount: 150.75,\n      merchant: 'Secure Store',\n      timestamp: Date.now()\n    };\n    \n    VueniSecureStorage.setFinancialData('integrity-test', originalData);\n    const retrievedData = VueniSecureStorage.getFinancialData('integrity-test');\n    \n    // Data should be exactly the same after encryption/decryption\n    expect(retrievedData).toEqual(originalData);\n    expect(retrievedData.amount).toBe(originalData.amount);\n    expect(retrievedData.merchant).toBe(originalData.merchant);\n    expect(retrievedData.timestamp).toBe(originalData.timestamp);\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/theme/ThemeProvider.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/theme/ThemeProvider.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Vueni Theme Provider - React Context for Unified Theme System\n * \n * Provides the unified theme to all components throughout the app.\n * Only supports dark mode as per design requirements.\n */\n\nimport React, { createContext, useContext, useMemo, ReactNode } from 'react';\nimport { vueniTheme, type VueniThemeContextValue, generateCSSProperties } from './unified';\n\n// Theme context\nconst VueniThemeContext = createContext<VueniThemeContextValue | undefined>(undefined);\n\n// Hook for accessing theme\nexport const useVueniTheme = () => {\n  const context = useContext(VueniThemeContext);\n  if (!context) {\n    throw new Error('useVueniTheme must be used within a VueniThemeProvider');\n  }\n  return context;\n};\n\n// Theme provider props\ninterface VueniThemeProviderProps {\n  children: ReactNode;\n}\n\n// Theme provider component\nexport const VueniThemeProvider: React.FC<VueniThemeProviderProps> = ({ children }) => {\n  // Generate CSS custom properties\n  const cssProperties = useMemo(() => generateCSSProperties(), []);\n  \n  // Theme context value\n  const contextValue: VueniThemeContextValue = useMemo(() => ({\n    theme: vueniTheme,\n    colorMode: 'dark',\n  }), []);\n\n  // Apply CSS custom properties to document root\n  React.useEffect(() => {\n    const rootElement = document.documentElement;\n    \n    // Apply all theme CSS properties\n    Object.entries(cssProperties).forEach(([property, value]) => {\n      rootElement.style.setProperty(property, value);\n    });\n    \n    // Ensure dark mode class is applied\n    rootElement.classList.add('dark');\n    rootElement.classList.remove('light'); // Remove any light mode remnants\n    \n    // Set primary font family on body\n    document.body.style.fontFamily = vueniTheme.typography.fontFamily.primary;\n    \n    // Clean up function\n    return () => {\n      Object.keys(cssProperties).forEach((property) => {\n        rootElement.style.removeProperty(property);\n      });\n    };\n  }, [cssProperties]);\n\n  return (\n    <VueniThemeContext.Provider value={contextValue}>\n      {children}\n    </VueniThemeContext.Provider>\n  );\n};\n\n// Convenience hooks for specific theme parts\nexport const useThemeColors = () => {\n  const { theme } = useVueniTheme();\n  return theme.colors;\n};\n\nexport const useThemeTypography = () => {\n  const { theme } = useVueniTheme();\n  return theme.typography;\n};\n\nexport const useThemeSpacing = () => {\n  const { theme } = useVueniTheme();\n  return theme.spacing;\n};\n\nexport const useThemeGlass = () => {\n  const { theme } = useVueniTheme();\n  return theme.glass;\n};\n\nexport const useThemeCards = () => {\n  const { theme } = useVueniTheme();\n  return theme.cards;\n};\n\n// Utility hook for semantic colors\nexport const useSemanticColors = () => {\n  const { theme } = useVueniTheme();\n  \n  return {\n    // Semantic aliases\n    primary: theme.colors.palette.primary,\n    success: theme.colors.palette.success,\n    danger: theme.colors.palette.danger,\n    warning: theme.colors.palette.warning,\n    neutral: theme.colors.palette.neutral,\n    \n    // Financial colors\n    financial: theme.colors.semantic.financial,\n    \n    // Status colors\n    status: theme.colors.semantic.status,\n    \n    // Chart colors\n    chart: theme.colors.semantic.chart,\n  };\n};\n\n// Utility hook for glass effects with Tailwind classes\nexport const useGlassClasses = () => {\n  const { theme } = useVueniTheme();\n  \n  return {\n    subtle: `${theme.cards.background.default} ${theme.cards.border.default} ${theme.glass.subtle.backdrop}`,\n    default: `${theme.cards.background.hover} ${theme.cards.border.default} ${theme.glass.default.backdrop}`,\n    prominent: `${theme.cards.background.active} ${theme.cards.border.hover} ${theme.glass.prominent.backdrop}`,\n  };\n};\n\n// HOC for automatically providing theme to components\nexport function withVueniTheme<P extends object>(\n  Component: React.ComponentType<P>\n): React.ComponentType<P> {\n  const WrappedComponent = (props: P) => (\n    <VueniThemeProvider>\n      <Component {...props} />\n    </VueniThemeProvider>\n  );\n  \n  WrappedComponent.displayName = `withVueniTheme(${Component.displayName || Component.name})`;\n  \n  return WrappedComponent;\n}\n\n// Re-export theme for direct access when needed\nexport { vueniTheme } from './unified';\nexport type { VueniTheme, VueniThemeContextValue } from './unified';\n\n// Default export\nexport default VueniThemeProvider; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/theme/breakpoints.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/theme/breakpoints.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Vueni Breakpoint System\n * Replaces magic number breakpoints throughout the codebase\n * Provides consistent viewport definitions across components\n */\n\n// Breakpoint definitions aligned with Tailwind defaults but extended for ultra-wide\nexport const breakpoints = {\n  mobile: {\n    max: 767,\n    description: 'Mobile devices (phones)',\n    mediaQuery: '(max-width: 767px)',\n    tailwind: 'max-md:'\n  },\n  tablet: {\n    min: 768,\n    max: 1023,\n    description: 'Tablet devices',\n    mediaQuery: '(min-width: 768px) and (max-width: 1023px)',\n    tailwind: 'md:'\n  },\n  desktop: {\n    min: 1024,\n    max: 1439,\n    description: 'Desktop screens',\n    mediaQuery: '(min-width: 1024px) and (max-width: 1439px)',\n    tailwind: 'lg:'\n  },\n  large: {\n    min: 1440,\n    max: 1919,\n    description: 'Large desktop screens',\n    mediaQuery: '(min-width: 1440px) and (max-width: 1919px)',\n    tailwind: 'xl:'\n  },\n  ultrawide: {\n    min: 1920,\n    description: 'Ultra-wide screens (gaming monitors, etc)',\n    mediaQuery: '(min-width: 1920px)',\n    tailwind: '2xl:'\n  }\n} as const;\n\n// CSS Custom Properties for direct CSS usage\nexport const cssBreakpoints = {\n  '--mobile-max': '767px',\n  '--tablet-min': '768px',\n  '--tablet-max': '1023px',\n  '--desktop-min': '1024px',\n  '--desktop-max': '1439px',\n  '--large-min': '1440px',\n  '--large-max': '1919px',\n  '--ultrawide-min': '1920px'\n} as const;\n\n// Responsive navigation heights (mobile-first)\nexport const navigationHeights = {\n  mobile: '4rem',    // 64px\n  tablet: '5rem',    // 80px  \n  desktop: '6rem',   // 96px\n  large: '7rem',     // 112px\n  ultrawide: '8rem'  // 128px\n} as const;\n\n// Touch target sizes for accessibility (WCAG 2.5.5)\nexport const touchTargets = {\n  minimum: 44,       // WCAG minimum\n  comfortable: 48,   // Recommended\n  large: 56          // iOS recommended\n} as const;\n\n// Grid column configurations for responsive layouts\nexport const gridConfigs = {\n  minimal: {\n    mobile: 'grid-cols-1',\n    tablet: 'md:grid-cols-2', \n    desktop: 'lg:grid-cols-3',\n    large: 'xl:grid-cols-4',\n    ultrawide: '2xl:grid-cols-5'\n  },\n  standard: {\n    mobile: 'grid-cols-1',\n    tablet: 'md:grid-cols-2',\n    desktop: 'lg:grid-cols-3', \n    large: 'xl:grid-cols-4',\n    ultrawide: '2xl:grid-cols-6'\n  },\n  dense: {\n    mobile: 'grid-cols-2',\n    tablet: 'md:grid-cols-3',\n    desktop: 'lg:grid-cols-4',\n    large: 'xl:grid-cols-5', \n    ultrawide: '2xl:grid-cols-6'\n  }\n} as const;\n\n// Performance optimization: prefers-reduced-motion media query\nexport const reduceMotion = '(prefers-reduced-motion: reduce)';\n\n// High contrast media query\nexport const highContrast = '(prefers-contrast: high)';\n\n// Dark mode detection\nexport const darkMode = '(prefers-color-scheme: dark)';\n\n// Type exports for TypeScript\nexport type Breakpoint = keyof typeof breakpoints;\nexport type NavigationHeight = keyof typeof navigationHeights;\nexport type GridConfig = keyof typeof gridConfigs;\n\n// Utility functions\nexport const getBreakpoint = (width: number): Breakpoint => {\n  if (width >= breakpoints.ultrawide.min) return 'ultrawide';\n  if (width >= breakpoints.large.min) return 'large';\n  if (width >= breakpoints.desktop.min) return 'desktop';\n  if (width >= breakpoints.tablet.min) return 'tablet';\n  return 'mobile';\n};\n\nexport const isMobile = (width: number): boolean => width <= breakpoints.mobile.max;\nexport const isTablet = (width: number): boolean => \n  width >= breakpoints.tablet.min && width <= breakpoints.tablet.max;\nexport const isDesktop = (width: number): boolean => width >= breakpoints.desktop.min;\n\n// Default export\nexport default breakpoints; ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/theme/graph-tokens.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/theme/graph-tokens.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Apple HIG-compliant design tokens for charts and graphs\n * Based on Apple Human Interface Guidelines 2025\n * Designed for Liquid Spark Finance financial visualization components\n */\n\n// Apple System Colors - Semantic color system with light/dark mode support\nexport const appleGraphTokens = {\n  colors: {\n    // Primary Financial Colors (Apple System Colors)\n    positive: {\n      light: '#30D158', // systemGreen light\n      dark: '#32D74B',  // systemGreen dark\n    },\n    negative: {\n      light: '#FF3B30', // systemRed light  \n      dark: '#FF453A',  // systemRed dark\n    },\n    neutral: {\n      light: '#007AFF', // systemBlue light\n      dark: '#0A84FF',  // systemBlue dark\n    },\n    warning: {\n      light: '#FF9500', // systemOrange light\n      dark: '#FF9F0A',  // systemOrange dark\n    },\n    \n    // Text Colors (Apple Label Hierarchy)\n    text: {\n      primary: {\n        light: '#000000',  // 100% opacity\n        dark: '#FFFFFF',   // 100% opacity\n      },\n      secondary: {\n        light: 'rgba(60, 60, 67, 0.6)',   // 60% opacity\n        dark: 'rgba(235, 235, 245, 0.6)',  // 60% opacity\n      },\n      tertiary: {\n        light: 'rgba(60, 60, 67, 0.3)',   // 30% opacity\n        dark: 'rgba(235, 235, 245, 0.3)',  // 30% opacity\n      },\n      quaternary: {\n        light: 'rgba(60, 60, 67, 0.18)',  // 18% opacity\n        dark: 'rgba(235, 235, 245, 0.18)', // 18% opacity\n      },\n    },\n    \n    // Background Colors (Apple System Backgrounds)\n    background: {\n      system: {\n        primary: {\n          light: '#FFFFFF',\n          dark: '#000000',\n        },\n        secondary: {\n          light: '#F2F2F7',\n          dark: '#1C1C1E',\n        },\n      },\n      grouped: {\n        primary: {\n          light: '#F2F2F7',\n          dark: '#000000',\n        },\n        secondary: {\n          light: '#FFFFFF',\n          dark: '#1C1C1E',\n        },\n      },\n    },\n    \n    // Grid and Separator Colors\n    separator: {\n      light: 'rgba(60, 60, 67, 0.12)',\n      dark: 'rgba(235, 235, 245, 0.12)',\n    },\n    \n    // Chart-specific semantic colors with better hue differentiation\n    chart: {\n      income: {\n        light: '#30D158',  // Apple systemGreen\n        dark: '#32D74B',\n      },\n      spending: {\n        light: '#FF3B30',  // Apple systemRed\n        dark: '#FF453A',\n      },\n      savings: {\n        light: '#007AFF',  // Apple systemBlue\n        dark: '#0A84FF',\n      },\n      investments: {\n        light: '#AF52DE',  // Apple systemPurple\n        dark: '#BF5AF2',\n      },\n      debt: {\n        light: '#FF9500',  // Apple systemOrange\n        dark: '#FF9F0A',\n      },\n      // Extended palette for complex charts\n      extended: {\n        teal: {\n          light: '#5AC8FA',\n          dark: '#64D2FF',\n        },\n        mint: {\n          light: '#00C7BE',\n          dark: '#63E6E2',\n        },\n        pink: {\n          light: '#FF2D92',\n          dark: '#FF375F',\n        },\n        yellow: {\n          light: '#FFCC00',\n          dark: '#FFD60A',\n        },\n      },\n    },\n  },\n\n  // Apple Spacing System (hardware-inspired bezel consistency)\n  spacing: {\n    xs: 4,   // 0.25rem - Micro spacing\n    sm: 8,   // 0.5rem  - Small spacing\n    md: 12,  // 0.75rem - Medium spacing\n    lg: 16,  // 1rem    - Large spacing\n    xl: 24,  // 1.5rem  - XLarge spacing\n    xxl: 32, // 2rem    - XXLarge spacing\n    \n    // Chart-specific spacing\n    chart: {\n      padding: 16,        // Chart container padding\n      titleGap: 12,       // Title to chart gap\n      legendGap: 8,       // Chart to legend gap\n      legendItemGap: 16,  // Between legend items\n      tickSpacing: 8,     // Minimum tick spacing\n      axisGap: 4,         // Axis to labels gap\n    },\n  },\n\n  // Apple Corner Radius System (concentric patterns)\n  borderRadius: {\n    sm: 8,   // Small elements\n    md: 12,  // Standard elements (Apple standard)\n    lg: 16,  // Large elements\n    tooltip: 8,    // Tooltip radius\n    legendDot: 2,  // Legend marker radius\n  },\n\n  // Apple Animation System (Apple Human Interface Guidelines 2025)\n  animation: {\n    // Apple-standard easing curves\n    standard: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',     // Standard ease-out\n    ios: 'cubic-bezier(0.4, 0.0, 0.2, 1.0)',              // iOS ease-out  \n    bounce: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',    // Gentle bounce\n    drawOn: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',       // Chart drawing entrance\n    drawOff: 'cubic-bezier(0.55, 0.06, 0.68, 0.19)',      // Chart drawing exit\n    dataTransition: 'cubic-bezier(0.4, 0.0, 0.2, 1.0)',   // Data value changes\n    hoverState: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',   // Interactive hover\n    selection: 'cubic-bezier(0.4, 0.0, 0.2, 1.0)',        // Selection feedback\n    \n    // Apple-standard durations (milliseconds)\n    duration: {\n      micro: 100,           // Micro interactions (selection feedback)\n      fast: 150,            // Fast interactions (hover states)\n      standard: 300,        // Standard transitions\n      medium: 400,          // Standard chart transitions\n      chartDrawing: 800,    // Line/Area chart drawing\n      slowDrawing: 1200,    // Complex chart animations\n      barStagger: 400,      // Staggered bar appearances\n      areaFill: 600,        // Area chart fill coordination\n    },\n    \n    // Animation timing (deprecated, use duration instead)\n    timing: {\n      fast: 150,    // Updated to match Apple standards\n      medium: 400,  // Data transitions\n      slow: 800,    // Draw on/off animations\n    },\n    \n    // Reduced motion support\n    reducedMotion: {\n      enableTransitions: false, // Disable when user prefers reduced motion\n      fallbackDuration: 0,      // Instant for reduced motion\n      respectSystemSetting: true,\n    },\n    \n    // Performance optimization\n    performance: {\n      preferTransform: true,     // Use transform/opacity for GPU acceleration\n      avoidLayoutProperties: true, // Avoid animating width, height, etc.\n      enableWillChange: true,    // Add will-change for animations\n      maxConcurrentAnimations: 6, // Limit concurrent animations\n    },\n  },\n\n  // Apple Typography System (San Francisco)\n  typography: {\n    fontFamily: {\n      primary: '\"SF Pro Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", system-ui, sans-serif',\n      fallback: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", system-ui, sans-serif',\n    },\n    \n    // Chart typography hierarchy\n    fontSize: {\n      chartTitle: 20,    // 20pt - Main chart heading\n      axisLabel: 12,     // 12pt - X/Y axis labels\n      dataLabel: 11,     // 11pt - Value annotations\n      legend: 11,        // 11pt - Chart legends\n      tooltip: 11,       // 11pt - Interactive data display\n    },\n    \n    fontWeight: {\n      chartTitle: 600,   // Semibold\n      axisLabel: 400,    // Regular\n      dataLabel: 500,    // Medium\n      legend: 400,       // Regular\n      tooltip: 500,      // Medium\n    },\n    \n    lineHeight: {\n      tight: 1.2,\n      normal: 1.4,\n      relaxed: 1.6,\n    },\n  },\n\n  // Chart Dimensions and Aspect Ratios\n  dimensions: {\n    aspectRatio: {\n      wide: 16 / 9,      // Wide charts\n      standard: 4 / 3,   // Standard charts\n      square: 1,         // Square charts\n      tall: 3 / 4,       // Tall charts\n    },\n    \n    minHeight: {\n      small: 200,        // Small charts\n      medium: 300,       // Medium charts\n      large: 400,        // Large charts\n    },\n    \n    strokeWidth: {\n      thin: 1,           // Grid lines, axes\n      medium: 2,         // Data lines\n      thick: 3,          // Emphasized lines\n      bold: 4,           // Primary data lines\n    },\n  },\n\n  // Accessibility and Interaction\n  accessibility: {\n    // High contrast mode adjustments\n    highContrast: {\n      strokeWidth: 3,    // Increased stroke width\n      fontSize: 13,      // Increased font size\n      spacing: 20,       // Increased spacing\n    },\n    \n    // Touch target sizes (iOS minimum 44pt)\n    touchTarget: {\n      minimum: 44,       // Minimum touch target\n      comfortable: 48,   // Comfortable touch target\n    },\n    \n    // Focus indicators\n    focus: {\n      outlineWidth: 2,\n      outlineOffset: 2,\n      outlineColor: '#007AFF', // systemBlue\n    },\n  },\n\n  // Performance and Rendering\n  performance: {\n    // Optimization thresholds\n    dataPointThreshold: 1000,  // When to start optimizing\n    animationThreshold: 500,   // When to reduce animations\n    \n    // Rendering preferences\n    preferHardwareAcceleration: true,\n    maxFrameRate: 60,\n    \n    // Memory management\n    maxCachedCharts: 5,\n    cacheExpirationMs: 300000, // 5 minutes\n  },\n} as const;\n\n// Type definitions for type safety\nexport interface GraphColorVariant {\n  light: string;\n  dark: string;\n}\n\nexport interface ChartColors {\n  positive: GraphColorVariant;\n  negative: GraphColorVariant;\n  neutral: GraphColorVariant;\n  warning: GraphColorVariant;\n}\n\nexport interface SpacingTokens {\n  xs: number;\n  sm: number;\n  md: number;\n  lg: number;\n  xl: number;\n  xxl: number;\n}\n\nexport interface AnimationTokens {\n  drawOn: string;\n  drawOff: string;\n  dataTransition: string;\n  hoverState: string;\n  timing: {\n    fast: number;\n    medium: number;\n    slow: number;\n  };\n}\n\n// Utility functions for theme access\nexport const getGraphColor = (\n  type: keyof typeof appleGraphTokens.colors.chart,\n  theme: 'light' | 'dark' = 'dark'\n): string => {\n  const colorPath = appleGraphTokens.colors.chart[type];\n  if (typeof colorPath === 'object' && 'light' in colorPath && 'dark' in colorPath) {\n    return colorPath[theme];\n  }\n  // Fallback for extended colors\n  if (type in appleGraphTokens.colors.chart.extended) {\n    return appleGraphTokens.colors.chart.extended[type as keyof typeof appleGraphTokens.colors.chart.extended][theme];\n  }\n  return appleGraphTokens.colors.neutral[theme];\n};\n\nexport const getGraphSpacing = (size: keyof Omit<typeof appleGraphTokens.spacing, 'chart'>): string => {\n  const value = appleGraphTokens.spacing[size];\n  return `${value}px`;\n};\n\nexport const getChartSpacing = (size: keyof typeof appleGraphTokens.spacing.chart): string => {\n  return `${appleGraphTokens.spacing.chart[size]}px`;\n};\n\nexport const getAnimationTiming = (type: keyof typeof appleGraphTokens.animation.timing): string => {\n  return `${appleGraphTokens.animation.timing[type]}ms`;\n};\n\nexport const getAnimationCurve = (type: keyof Pick<typeof appleGraphTokens.animation, 'standard' | 'ios' | 'bounce' | 'drawOn' | 'drawOff' | 'dataTransition' | 'hoverState' | 'selection'>): string => {\n  return appleGraphTokens.animation[type];\n};\n\n// Reduced motion support utilities\nexport const shouldReduceMotion = (): boolean => {\n  if (typeof window === 'undefined') return false;\n  return window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n};\n\nexport const getAnimationDuration = (durationType: keyof typeof appleGraphTokens.animation.duration): string => {\n  const duration = shouldReduceMotion() \n    ? appleGraphTokens.animation.reducedMotion.fallbackDuration\n    : appleGraphTokens.animation.duration[durationType];\n  return `${duration}ms`;\n};\n\nexport const getOptimalAnimationDuration = (durationType: keyof typeof appleGraphTokens.animation.duration): number => {\n  return shouldReduceMotion() \n    ? appleGraphTokens.animation.reducedMotion.fallbackDuration\n    : appleGraphTokens.animation.duration[durationType];\n};\n\n// Performance-optimized animation configuration\nexport const getPerformantAnimationConfig = (durationType: keyof typeof appleGraphTokens.animation.duration) => {\n  const duration = getOptimalAnimationDuration(durationType);\n  const reducedMotion = shouldReduceMotion();\n  \n  return {\n    duration,\n    easing: reducedMotion ? 'ease' : appleGraphTokens.animation.ios,\n    willChange: appleGraphTokens.animation.performance.enableWillChange ? 'transform, opacity' : 'auto',\n    transformGPU: appleGraphTokens.animation.performance.preferTransform,\n  };\n};\n\n// Chart-specific animation presets\nexport const getChartAnimationPreset = (chartType: 'line' | 'area' | 'bar' | 'stacked' | 'hover' | 'selection') => {\n  const reducedMotion = shouldReduceMotion();\n  \n  if (reducedMotion) {\n    return {\n      duration: 0,\n      easing: 'ease',\n      delay: 0,\n    };\n  }\n  \n  switch (chartType) {\n    case 'line':\n      return {\n        duration: appleGraphTokens.animation.duration.chartDrawing,\n        easing: appleGraphTokens.animation.ios,\n        delay: 0,\n      };\n    case 'area':\n      return {\n        duration: appleGraphTokens.animation.duration.areaFill,\n        easing: appleGraphTokens.animation.ios,\n        delay: 100, // Slight delay for stroke-then-fill coordination\n      };\n    case 'bar':\n    case 'stacked':\n      return {\n        duration: appleGraphTokens.animation.duration.barStagger,\n        easing: appleGraphTokens.animation.ios,\n        delay: 0,\n      };\n    case 'hover':\n      return {\n        duration: appleGraphTokens.animation.duration.fast,\n        easing: appleGraphTokens.animation.hoverState,\n        delay: 0,\n      };\n    case 'selection':\n      return {\n        duration: appleGraphTokens.animation.duration.micro,\n        easing: appleGraphTokens.animation.selection,\n        delay: 0,\n      };\n    default:\n      return {\n        duration: appleGraphTokens.animation.duration.standard,\n        easing: appleGraphTokens.animation.standard,\n        delay: 0,\n      };\n  }\n};\n\nexport const getTextColor = (\n  level: keyof typeof appleGraphTokens.colors.text,\n  theme: 'light' | 'dark' = 'dark'\n): string => {\n  return appleGraphTokens.colors.text[level][theme];\n};\n\nexport const getBackgroundColor = (\n  type: 'system' | 'grouped',\n  level: 'primary' | 'secondary',\n  theme: 'light' | 'dark' = 'dark'\n): string => {\n  return appleGraphTokens.colors.background[type][level][theme];\n};\n\n// CSS Custom Properties Generator\nexport const generateGraphCSSProperties = (theme: 'light' | 'dark' = 'dark') => {\n  const tokens = appleGraphTokens;\n  \n  return {\n    // Colors\n    '--graph-color-positive': getGraphColor('income', theme),\n    '--graph-color-negative': getGraphColor('spending', theme),\n    '--graph-color-neutral': getGraphColor('savings', theme),\n    '--graph-color-warning': getGraphColor('debt', theme),\n    \n    // Text colors\n    '--graph-text-primary': getTextColor('primary', theme),\n    '--graph-text-secondary': getTextColor('secondary', theme),\n    '--graph-text-tertiary': getTextColor('tertiary', theme),\n    '--graph-text-quaternary': getTextColor('quaternary', theme),\n    \n    // Backgrounds\n    '--graph-bg-primary': getBackgroundColor('system', 'primary', theme),\n    '--graph-bg-secondary': getBackgroundColor('system', 'secondary', theme),\n    \n    // Spacing\n    '--graph-spacing-xs': getGraphSpacing('xs'),\n    '--graph-spacing-sm': getGraphSpacing('sm'),\n    '--graph-spacing-md': getGraphSpacing('md'),\n    '--graph-spacing-lg': getGraphSpacing('lg'),\n    '--graph-spacing-xl': getGraphSpacing('xl'),\n    '--graph-spacing-xxl': getGraphSpacing('xxl'),\n    \n    // Chart-specific spacing\n    '--graph-chart-padding': getChartSpacing('padding'),\n    '--graph-title-gap': getChartSpacing('titleGap'),\n    '--graph-legend-gap': getChartSpacing('legendGap'),\n    \n    // Border radius\n    '--graph-radius-sm': `${tokens.borderRadius.sm}px`,\n    '--graph-radius-md': `${tokens.borderRadius.md}px`,\n    '--graph-radius-lg': `${tokens.borderRadius.lg}px`,\n    '--graph-radius-tooltip': `${tokens.borderRadius.tooltip}px`,\n    \n    // Typography\n    '--graph-font-family': tokens.typography.fontFamily.primary,\n    '--graph-font-size-title': `${tokens.typography.fontSize.chartTitle}px`,\n    '--graph-font-size-axis': `${tokens.typography.fontSize.axisLabel}px`,\n    '--graph-font-size-data': `${tokens.typography.fontSize.dataLabel}px`,\n    '--graph-font-size-legend': `${tokens.typography.fontSize.legend}px`,\n    '--graph-font-size-tooltip': `${tokens.typography.fontSize.tooltip}px`,\n    \n    // Animation - Apple Standard Easing\n    '--graph-timing-standard': tokens.animation.standard,\n    '--graph-timing-ios': tokens.animation.ios,\n    '--graph-timing-bounce': tokens.animation.bounce,\n    '--graph-timing-draw-on': tokens.animation.drawOn,\n    '--graph-timing-draw-off': tokens.animation.drawOff,\n    '--graph-timing-data-transition': tokens.animation.dataTransition,\n    '--graph-timing-hover': tokens.animation.hoverState,\n    '--graph-timing-selection': tokens.animation.selection,\n    \n    // Animation - Apple Standard Durations\n    '--graph-duration-micro': `${tokens.animation.duration.micro}ms`,\n    '--graph-duration-fast': `${tokens.animation.duration.fast}ms`,\n    '--graph-duration-standard': `${tokens.animation.duration.standard}ms`,\n    '--graph-duration-medium': `${tokens.animation.duration.medium}ms`,\n    '--graph-duration-chart-drawing': `${tokens.animation.duration.chartDrawing}ms`,\n    '--graph-duration-slow-drawing': `${tokens.animation.duration.slowDrawing}ms`,\n    '--graph-duration-bar-stagger': `${tokens.animation.duration.barStagger}ms`,\n    '--graph-duration-area-fill': `${tokens.animation.duration.areaFill}ms`,\n    \n    // Legacy duration support\n    '--graph-duration-hover': `${tokens.animation.duration.fast}ms`,\n  } as const;\n};\n\n// Compatibility with existing Liquid Spark theme\nexport const liquidSparkGraphIntegration = {\n  // Map Apple colors to existing Liquid Spark structure\n  financial: {\n    positive: appleGraphTokens.colors.positive.dark,    // Use dark theme as default\n    negative: appleGraphTokens.colors.negative.dark,\n    neutral: appleGraphTokens.colors.neutral.dark,\n  },\n  \n  // Enhanced glass effects with Apple backgrounds\n  glass: {\n    chartBackground: 'rgba(28, 28, 30, 0.8)',          // Based on Apple dark secondary\n    chartBorder: 'rgba(235, 235, 245, 0.12)',          // Apple separator dark\n    tooltipBackground: 'rgba(28, 28, 30, 0.95)',       // Semi-opaque for tooltips\n    tooltipBorder: 'rgba(235, 235, 245, 0.2)',         // Stronger border for tooltips\n  },\n  \n  // Maintain compatibility with existing dark theme\n  darkTheme: {\n    background: '#0b0d11',  // Existing app background\n    cardBackground: 'rgba(28, 28, 30, 0.6)', // Apple-inspired card background\n    textPrimary: appleGraphTokens.colors.text.primary.dark,\n    textSecondary: appleGraphTokens.colors.text.secondary.dark,\n  },\n} as const;\n\n// Export type for the entire token system\nexport type AppleGraphTokens = typeof appleGraphTokens;\nexport type LiquidSparkGraphIntegration = typeof liquidSparkGraphIntegration;\n\n// Default export\nexport default appleGraphTokens;","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/theme/unified.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/theme/unified.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Vueni Unified Theme System - Single Source of Truth\n * \n * This file replaces all scattered theme sources and provides a unified\n * dark-mode only design system with semantic color aliases and 3-level glass effects.\n * \n * Generated by theme unification process (12-pass analysis + megathink)\n */\n\n// Base color palette - 5 core colors maximum\nconst colorPalette = {\n  primary: '#4A9EFF',    // Blue - primary accent \n  success: '#4AFF88',    // Green - positive/success\n  danger: '#FF4A6A',     // Red - negative/error\n  warning: '#FFD700',    // Gold - warning\n  neutral: '#A0A0B8',    // Gray - neutral/muted\n} as const;\n\n// Surface system - dark mode only\nconst surfaceSystem = {\n  background: '#0A0A0B',     // Deep black - primary background\n  card: '#1A1A24',          // Card background\n  overlay: '#22222E',       // Hover/overlay states\n  glass: {\n    subtle: 'rgba(255, 255, 255, 0.02)',     // Minimal glass effect\n    default: 'rgba(255, 255, 255, 0.06)',    // Standard glass effect  \n    prominent: 'rgba(255, 255, 255, 0.12)',  // Strong glass effect\n    border: 'rgba(255, 255, 255, 0.08)',     // Glass borders\n  },\n} as const;\n\n// Text hierarchy\nconst textSystem = {\n  primary: '#FFFFFF',       // High contrast - body text\n  secondary: '#A0A0B8',     // Medium contrast - subtitles  \n  muted: '#606074',         // Low contrast - captions\n} as const;\n\n// Typography system - single font family\nconst typographySystem = {\n  fontFamily: {\n    primary: '\"SF Pro Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", system-ui, sans-serif',\n  },\n  fontSize: {\n    xs: '0.75rem',     // 12px\n    sm: '0.875rem',    // 14px  \n    base: '1rem',      // 16px\n    lg: '1.125rem',    // 18px\n    xl: '1.25rem',     // 20px\n    '2xl': '1.5rem',   // 24px\n    '3xl': '2rem',     // 32px\n  },\n  fontWeight: {\n    normal: 400,\n    medium: 500, \n    semibold: 600,\n    bold: 700,\n  },\n  lineHeight: {\n    tight: 1.2,\n    normal: 1.4,\n    relaxed: 1.6,\n  },\n} as const;\n\n// Spacing system - 8px grid\nconst spacingSystem = {\n  xs: '0.25rem',    // 4px\n  sm: '0.5rem',     // 8px\n  md: '1rem',       // 16px\n  lg: '1.5rem',     // 24px\n  xl: '2rem',       // 32px\n  '2xl': '3rem',    // 48px\n  '3xl': '4rem',    // 64px\n} as const;\n\n// Border radius system\nconst radiusSystem = {\n  sm: '0.25rem',    // 4px\n  md: '0.5rem',     // 8px\n  lg: '0.75rem',    // 12px - standard card radius\n  xl: '1rem',       // 16px\n  '2xl': '1.5rem',  // 24px\n  full: '9999px',   // Pills/circles\n} as const;\n\n// Animation system\nconst animationSystem = {\n  duration: {\n    fast: '150ms',\n    normal: '250ms',\n    slow: '500ms',\n  },\n  easing: {\n    standard: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',\n    smooth: 'cubic-bezier(0.4, 0.0, 0.2, 1.0)',\n  },\n} as const;\n\n// Z-index layers\nconst zIndexSystem = {\n  background: -1,\n  content: 1,\n  navigation: 50,\n  overlay: 40,\n  modal: 100,\n} as const;\n\n// Semantic color aliases - prevent duplication\nconst semanticColors = {\n  // Primary accent\n  accent: colorPalette.primary,\n  \n  // Financial colors\n  financial: {\n    positive: colorPalette.success, \n    negative: colorPalette.danger,\n    neutral: colorPalette.neutral,\n  },\n  \n  // Status colors  \n  status: {\n    success: colorPalette.success,\n    error: colorPalette.danger, \n    warning: colorPalette.warning,\n    info: colorPalette.primary,\n  },\n  \n  // Chart colors (semantic mapping)\n  chart: {\n    income: colorPalette.success,\n    spending: colorPalette.danger,\n    savings: colorPalette.primary,\n    investments: '#9F4AFF',  // Purple for investments\n    debt: colorPalette.warning,\n  },\n} as const;\n\n// 3-level glass effect system (replaces 10+ opacity chaos)\nconst glassEffects = {\n  subtle: {\n    background: surfaceSystem.glass.subtle,\n    border: surfaceSystem.glass.border,\n    backdrop: 'backdrop-blur-sm',\n  },\n  default: {\n    background: surfaceSystem.glass.default, \n    border: surfaceSystem.glass.border,\n    backdrop: 'backdrop-blur-md',\n  },\n  prominent: {\n    background: surfaceSystem.glass.prominent,\n    border: surfaceSystem.glass.border,\n    backdrop: 'backdrop-blur-lg',\n  },\n} as const;\n\n// Card component system\nconst cardSystem = {\n  background: {\n    default: 'bg-white/[0.02]',     // Maps to glass.subtle\n    hover: 'hover:bg-white/[0.06]', // Maps to glass.default  \n    active: 'bg-white/[0.12]',      // Maps to glass.prominent\n  },\n  border: {\n    default: 'border border-white/[0.08]',\n    hover: 'hover:border-white/[0.12]',\n  },\n  padding: {\n    sm: 'p-3',\n    md: 'p-4', \n    lg: 'p-6',\n    xl: 'p-8',\n  },\n  radius: {\n    sm: 'rounded-xl',   // Maps to radiusSystem.lg\n    md: 'rounded-xl',   // Maps to radiusSystem.lg  \n    lg: 'rounded-2xl',  // Maps to radiusSystem.2xl\n  },\n  effects: {\n    backdrop: 'backdrop-blur-md',\n    transition: 'transition-all duration-300',\n    hoverScale: 'hover:scale-[1.02]',\n    shadow: 'shadow-lg hover:shadow-xl',\n  },\n} as const;\n\n// Main unified theme export\nexport const vueniTheme = {\n  // Color system\n  colors: {\n    palette: colorPalette,\n    semantic: semanticColors,\n    surface: surfaceSystem,\n    text: textSystem,\n  },\n  \n  // Layout systems\n  typography: typographySystem,\n  spacing: spacingSystem,\n  radius: radiusSystem,\n  \n  // Effect systems\n  glass: glassEffects,\n  cards: cardSystem,\n  animation: animationSystem,\n  zIndex: zIndexSystem,\n} as const;\n\n// Theme provider context value\nexport interface VueniThemeContextValue {\n  theme: typeof vueniTheme;\n  colorMode: 'dark'; // Only dark mode supported\n}\n\n// Utility functions for theme access\nexport const getColor = (path: string) => {\n  const keys = path.split('.');\n  let value: any = vueniTheme.colors;\n  \n  for (const key of keys) {\n    value = value?.[key];\n  }\n  \n  return value || '';\n};\n\nexport const getSpacing = (size: keyof typeof spacingSystem) => {\n  return vueniTheme.spacing[size];\n};\n\nexport const getGlassEffect = (level: keyof typeof glassEffects) => {\n  return vueniTheme.glass[level];\n};\n\n// CSS custom properties generator for runtime theming\nexport const generateCSSProperties = () => {\n  return {\n    // Color properties\n    '--vueni-primary': vueniTheme.colors.palette.primary,\n    '--vueni-success': vueniTheme.colors.palette.success,\n    '--vueni-danger': vueniTheme.colors.palette.danger,\n    '--vueni-warning': vueniTheme.colors.palette.warning,\n    '--vueni-neutral': vueniTheme.colors.palette.neutral,\n    \n    // Surface properties\n    '--vueni-surface-bg': vueniTheme.colors.surface.background,\n    '--vueni-surface-card': vueniTheme.colors.surface.card,\n    '--vueni-surface-overlay': vueniTheme.colors.surface.overlay,\n    \n    // Glass properties\n    '--vueni-glass-subtle': vueniTheme.colors.surface.glass.subtle,\n    '--vueni-glass-default': vueniTheme.colors.surface.glass.default,\n    '--vueni-glass-prominent': vueniTheme.colors.surface.glass.prominent,\n    '--vueni-glass-border': vueniTheme.colors.surface.glass.border,\n    \n    // Text properties\n    '--vueni-text-primary': vueniTheme.colors.text.primary,\n    '--vueni-text-secondary': vueniTheme.colors.text.secondary,\n    '--vueni-text-muted': vueniTheme.colors.text.muted,\n    \n    // Typography properties\n    '--vueni-font-family': vueniTheme.typography.fontFamily.primary,\n    \n    // Spacing properties\n    '--vueni-spacing-xs': vueniTheme.spacing.xs,\n    '--vueni-spacing-sm': vueniTheme.spacing.sm,\n    '--vueni-spacing-md': vueniTheme.spacing.md,\n    '--vueni-spacing-lg': vueniTheme.spacing.lg,\n    '--vueni-spacing-xl': vueniTheme.spacing.xl,\n    '--vueni-spacing-2xl': vueniTheme.spacing['2xl'],\n    '--vueni-spacing-3xl': vueniTheme.spacing['3xl'],\n  };\n};\n\n// Type exports for TypeScript integration\nexport type VueniTheme = typeof vueniTheme;\nexport type ColorPalette = typeof colorPalette;\nexport type SemanticColors = typeof semanticColors;\nexport type GlassEffects = typeof glassEffects;\nexport type SpacingSystem = typeof spacingSystem;\nexport type TypographySystem = typeof typographySystem;\n\n// Default export for convenience\nexport default vueniTheme;\n\n/**\n * Migration Notes:\n * \n * This unified theme replaces the following scattered files:\n * - src/theme/colors.ts\n * - src/theme/tokens.ts\n * - src/theme/unified-card-tokens.ts\n * - src/components/shared/VueniDesignSystem.tsx (vueniTokens)\n * - Light mode CSS variables in index.css\n * \n * Key improvements:\n * - 90% reduction in theme sources (9 → 1)\n * - 3-level glass system (vs 10+ opacity values)\n * - Semantic color aliases prevent duplication\n * - Dark-mode only compliance\n * - Type-safe theme access\n * - CSS custom properties for runtime theming\n */ ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/types.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/types.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Domain Types for PFM Gap-10 features\n// These will be expanded with full schemas and Zod validations in later steps.\n\nexport interface LinkedAccount {\n  id: string;\n  provider: string; // e.g., 'plaid', 'teller'\n  displayName: string;\n  institutionName: string;\n  lastFour: string; // last 4 digits\n  type: 'checking' | 'savings' | 'credit' | 'loan' | 'investment';\n  createdAt: string; // ISO date\n  updatedAt: string; // ISO date\n}\n\nexport interface RecurringCharge {\n  id: string;\n  accountId: string;\n  merchantName: string;\n  amount: number;\n  frequency: 'weekly' | 'biweekly' | 'monthly' | 'quarterly' | 'yearly';\n  nextDueDate: string; // ISO\n  status: 'active' | 'canceled' | 'pending_cancel';\n}\n\nexport interface NegotiationCase {\n  id: string;\n  chargeId: string;\n  status: 'queued' | 'in_progress' | 'completed' | 'failed';\n  savingsAmount?: number;\n  submittedAt: string;\n  completedAt?: string;\n}\n\nexport interface AutosavePlan {\n  id: string;\n  accountId: string;\n  targetAmount: number;\n  cadence: 'daily' | 'weekly' | 'monthly';\n  nextTransferDate: string;\n  isActive: boolean;\n}\n\nexport interface HouseholdMember {\n  userId: string;\n  role: 'owner' | 'admin' | 'member';\n}\n\nexport interface Household {\n  id: string;\n  name: string;\n  members: HouseholdMember[];\n  createdAt: string;\n}\n\nexport interface AgeMetric {\n  averageDaysHeld: number;\n  calculatedAt: string;\n}\n\nexport interface PrivacySetting {\n  hideAmounts: boolean;\n  updatedAt: string;\n}\n\nexport interface AdvisorThread {\n  id: string;\n  userId: string;\n  messages: AdvisorMessage[];\n  isEscalated: boolean;\n}\n\nexport interface AdvisorMessage {\n  id: string;\n  sender: 'user' | 'advisor' | 'system';\n  content: string;\n  createdAt: string;\n}\n\nexport interface SpendableCash {\n  amount: number;\n  payday: string; // ISO date of upcoming payday\n  calculatedAt: string;\n}\n\nexport interface HomeWidget {\n  id: string;\n  type: 'balance' | 'safe_to_spend';\n  position: number;\n  config: Record<string, unknown>;\n}\n\n// Transaction status enum used across UI components including TransactionRow and StatusChip\nexport enum TransactionStatus {\n  Pending = 'pending',\n  InTransit = 'inTransit',\n  Delivered = 'delivered',\n  None = 'none', // placeholder when status is unavailable\n}\n\n// Biometric Intervention Types\nexport interface BiometricReading {\n  id: string;\n  timestamp: string;\n  heartRate: number;\n  stressLevel: number; // 0-100\n  spendingRisk: 'low' | 'medium' | 'high';\n}\n\nexport interface InterventionAlert {\n  id: string;\n  type: 'stress_spending' | 'impulse_warning' | 'breathing_break';\n  severity: 'info' | 'warning' | 'critical';\n  message: string;\n  createdAt: string;\n  dismissed?: boolean;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/damon/liquid-spark-finance/src/vite-env.d.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/vite-env.d.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"vite/client\" />\n","usedDeprecatedRules":[]}]
